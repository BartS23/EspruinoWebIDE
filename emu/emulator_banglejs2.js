

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module != 'undefined' ? Module : {};

// See https://caniuse.com/mdn-javascript_builtins_object_assign

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = Object.assign({}, Module);

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = (status, toThrow) => {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

// Attempt to auto-detect the environment
var ENVIRONMENT_IS_WEB = typeof window == 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts == 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
var ENVIRONMENT_IS_NODE = typeof process == 'object' && typeof process.versions == 'object' && typeof process.versions.node == 'string';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)');
}

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

// Normally we don't log exceptions but instead let them bubble out the top
// level where the embedding environment (e.g. the browser) can handle
// them.
// However under v8 and node we sometimes exit the process direcly in which case
// its up to use us to log the exception before exiting.
// If we fix https://github.com/emscripten-core/emscripten/issues/15080
// this may no longer be needed under node.
function logExceptionOnExit(e) {
  if (e instanceof ExitStatus) return;
  let toLog = e;
  if (e && typeof e == 'object' && e.stack) {
    toLog = [e, e.stack];
  }
  err('exiting due to exception: ' + toLog);
}

var fs;
var nodePath;
var requireNodeFS;

if (ENVIRONMENT_IS_NODE) {
  if (!(typeof process == 'object' && typeof require == 'function')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');
  if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = require('path').dirname(scriptDirectory) + '/';
  } else {
    scriptDirectory = __dirname + '/';
  }

// include: node_shell_read.js


requireNodeFS = () => {
  // Use nodePath as the indicator for these not being initialized,
  // since in some environments a global fs may have already been
  // created.
  if (!nodePath) {
    fs = require('fs');
    nodePath = require('path');
  }
};

read_ = function shell_read(filename, binary) {
  var ret = tryParseAsDataURI(filename);
  if (ret) {
    return binary ? ret : ret.toString();
  }
  requireNodeFS();
  filename = nodePath['normalize'](filename);
  return fs.readFileSync(filename, binary ? undefined : 'utf8');
};

readBinary = (filename) => {
  var ret = read_(filename, true);
  if (!ret.buffer) {
    ret = new Uint8Array(ret);
  }
  assert(ret.buffer);
  return ret;
};

readAsync = (filename, onload, onerror) => {
  var ret = tryParseAsDataURI(filename);
  if (ret) {
    onload(ret);
  }
  requireNodeFS();
  filename = nodePath['normalize'](filename);
  fs.readFile(filename, function(err, data) {
    if (err) onerror(err);
    else onload(data.buffer);
  });
};

// end include: node_shell_read.js
  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  if (typeof module != 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  // Without this older versions of node (< v15) will log unhandled rejections
  // but return 0, which is not normally the desired behaviour.  This is
  // not be needed with node v15 and about because it is now the default
  // behaviour:
  // See https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode
  process['on']('unhandledRejection', function(reason) { throw reason; });

  quit_ = (status, toThrow) => {
    if (keepRuntimeAlive()) {
      process['exitCode'] = status;
      throw toThrow;
    }
    logExceptionOnExit(toThrow);
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };

} else
if (ENVIRONMENT_IS_SHELL) {

  if ((typeof process == 'object' && typeof require === 'function') || typeof window == 'object' || typeof importScripts == 'function') throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      const data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    let data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer == 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data == 'object');
    return data;
  };

  readAsync = function readAsync(f, onload, onerror) {
    setTimeout(() => onload(readBinary(f)), 0);
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit == 'function') {
    quit_ = (status, toThrow) => {
      logExceptionOnExit(toThrow);
      quit(status);
    };
  }

  if (typeof print != 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console == 'undefined') console = /** @type{!Console} */({});
    console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);
    console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (typeof printErr != 'undefined' ? printErr : print);
  }

} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (typeof document != 'undefined' && document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  // If scriptDirectory contains a query (starting with ?) or a fragment (starting with #),
  // they are removed because they could contain a slash.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }

  if (!(typeof window == 'object' || typeof importScripts == 'function')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {
// include: web_or_worker_shell_read.js


  read_ = (url) => {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  }

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = (url) => {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = (url, onload, onerror) => {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = () => {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  }

// end include: web_or_worker_shell_read.js
  }

  setWindowTitle = (title) => document.title = title;
} else
{
  throw new Error('environment detection error');
}

var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
Object.assign(Module, moduleOverrides);
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;
checkIncomingModuleAPI();

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.

if (Module['arguments']) arguments_ = Module['arguments'];legacyModuleProp('arguments', 'arguments_');

if (Module['thisProgram']) thisProgram = Module['thisProgram'];legacyModuleProp('thisProgram', 'thisProgram');

if (Module['quit']) quit_ = Module['quit'];legacyModuleProp('quit', 'quit_');

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] == 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] == 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] == 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] == 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] == 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] == 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] == 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] == 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] == 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
legacyModuleProp('read', 'read_');
legacyModuleProp('readAsync', 'readAsync');
legacyModuleProp('readBinary', 'readBinary');
legacyModuleProp('setWindowTitle', 'setWindowTitle');
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';
function alignMemory() { abort('`alignMemory` is now a library function and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line'); }

assert(!ENVIRONMENT_IS_SHELL, "shell environment detected but not enabled at build time.  Add 'shell' to `-sENVIRONMENT` to enable.");




var STACK_ALIGN = 16;
var POINTER_SIZE = 4;

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': case 'u8': return 1;
    case 'i16': case 'u16': return 2;
    case 'i32': case 'u32': return 4;
    case 'i64': case 'u64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length - 1] === '*') {
        return POINTER_SIZE;
      } else if (type[0] === 'i') {
        const bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

// include: runtime_functions.js


// This gives correct answers for everything less than 2^{14} = 16384
// I hope nobody is contemplating functions with 16384 arguments...
function uleb128Encode(n) {
  assert(n < 16384);
  if (n < 128) {
    return [n];
  }
  return [(n % 128) | 128, n >> 7];
}

// Converts a signature like 'vii' into a description of the wasm types, like
// { parameters: ['i32', 'i32'], results: [] }.
function sigToWasmTypes(sig) {
  var typeNames = {
    'i': 'i32',
    'j': 'i64',
    'f': 'f32',
    'd': 'f64',
    'p': 'i32',
  };
  var type = {
    parameters: [],
    results: sig[0] == 'v' ? [] : [typeNames[sig[0]]]
  };
  for (var i = 1; i < sig.length; ++i) {
    assert(sig[i] in typeNames, 'invalid signature char: ' + sig[i]);
    type.parameters.push(typeNames[sig[i]]);
  }
  return type;
}

// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {
  return func;
}

var freeTableIndexes = [];

// Weak map of functions in the table to their indexes, created on first use.
var functionsInTableMap;

function getEmptyTableSlot() {
  // Reuse a free index if there is one, otherwise grow.
  if (freeTableIndexes.length) {
    return freeTableIndexes.pop();
  }
  // Grow the table
  try {
    wasmTable.grow(1);
  } catch (err) {
    if (!(err instanceof RangeError)) {
      throw err;
    }
    throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
  }
  return wasmTable.length - 1;
}

function updateTableMap(offset, count) {
  for (var i = offset; i < offset + count; i++) {
    var item = getWasmTableEntry(i);
    // Ignore null values.
    if (item) {
      functionsInTableMap.set(item, i);
    }
  }
}

/**
 * Add a function to the table.
 * 'sig' parameter is required if the function being added is a JS function.
 * @param {string=} sig
 */
function addFunction(func, sig) {
  assert(typeof func != 'undefined');

  // Check if the function is already in the table, to ensure each function
  // gets a unique index. First, create the map if this is the first use.
  if (!functionsInTableMap) {
    functionsInTableMap = new WeakMap();
    updateTableMap(0, wasmTable.length);
  }
  if (functionsInTableMap.has(func)) {
    return functionsInTableMap.get(func);
  }

  // It's not in the table, add it now.

  var ret = getEmptyTableSlot();

  // Set the new value.
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    setWasmTableEntry(ret, func);
  } catch (err) {
    if (!(err instanceof TypeError)) {
      throw err;
    }
    assert(typeof sig != 'undefined', 'Missing signature argument to addFunction: ' + func);
    var wrapped = convertJsFunctionToWasm(func, sig);
    setWasmTableEntry(ret, wrapped);
  }

  functionsInTableMap.set(func, ret);

  return ret;
}

function removeFunction(index) {
  functionsInTableMap.delete(getWasmTableEntry(index));
  freeTableIndexes.push(index);
}

// end include: runtime_functions.js
// include: runtime_debug.js


function legacyModuleProp(prop, newName) {
  if (!Object.getOwnPropertyDescriptor(Module, prop)) {
    Object.defineProperty(Module, prop, {
      configurable: true,
      get: function() {
        abort('Module.' + prop + ' has been replaced with plain ' + newName + ' (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)');
      }
    });
  }
}

function ignoredModuleProp(prop) {
  if (Object.getOwnPropertyDescriptor(Module, prop)) {
    abort('`Module.' + prop + '` was supplied but `' + prop + '` not included in INCOMING_MODULE_JS_API');
  }
}

function unexportedMessage(sym, isFSSybol) {
  var msg = "'" + sym + "' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)";
  if (isFSSybol) {
    msg += '. Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you';
  }
  return msg;
}

function unexportedRuntimeSymbol(sym, isFSSybol) {
  if (!Object.getOwnPropertyDescriptor(Module, sym)) {
    Object.defineProperty(Module, sym, {
      configurable: true,
      get: function() {
        abort(unexportedMessage(sym, isFSSybol));
      }
    });
  }
}

function unexportedRuntimeFunction(sym, isFSSybol) {
  if (!Object.getOwnPropertyDescriptor(Module, sym)) {
    Module[sym] = () => abort(unexportedMessage(sym, isFSSybol));
  }
}

// end include: runtime_debug.js
var tempRet0 = 0;
var setTempRet0 = (value) => { tempRet0 = value; };
var getTempRet0 = () => tempRet0;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary;
if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];legacyModuleProp('wasmBinary', 'wasmBinary');
var noExitRuntime = Module['noExitRuntime'] || true;legacyModuleProp('noExitRuntime', 'noExitRuntime');

// include: wasm2js.js


// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{duplicate, const} */
var
WebAssembly = {
  // Note that we do not use closure quoting (this['buffer'], etc.) on these
  // functions, as they are just meant for internal use. In other words, this is
  // not a fully general polyfill.
  /** @constructor */
  Memory: function(opts) {
    this.buffer = new ArrayBuffer(opts['initial'] * 65536);
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
  },

  /** @constructor */
  Instance: function(module, info) {
    // TODO: use the module and info somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    this.exports = (
// EMSCRIPTEN_START_ASM
function instantiate(asmLibraryArg) {
function Table(ret) {
  // grow method not included; table is not growable
  ret.set = function(i, func) {
    this[i] = func;
  };
  ret.get = function(i) {
    return this[i];
  };
  return ret;
}

  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 1024, "xKoB");
  base64DecodeToExistingUint8Array(bufferView, 1040, "MAAAAC5ib290MA==");
  base64DecodeToExistingUint8Array(bufferView, 1072, "CmV2YWwocmVxdWlyZSjRB1N0b3JhZ2UpLnJlYWQo0Q1ib290dXBkYXRlLmpzKSk72QIAAC5ib290Y2Rl");
  base64DecodeToExistingUint8Array(bufferView, 1152, "CqxzPXJlcXVpcmUo0QdTdG9yYWdlKS5yZWFkSlNPTijRDHNldHRpbmcuanNvbiwxKaB7fTsKoyhnbG9iYWwuX19GSUxFX1+eIXMuY2xvY2tIYXNXaWRnZXRzKXtsb2FkKCk7sNElQ2xvY2sgaGFzIG5vIHdpZGdldHMsIGNhbid0IGZhc3QgbG9hZDt9CqxfY2xrQXBwPXJlcXVpcmUo0QdTdG9yYWdlKS5yZWFkKHMuY2xvY2spOwqjKCFfY2xrQXBwKXtfY2xrQXBwPXJlcXVpcmUo0QdTdG9yYWdlKS5saXN0KC9cLmluZm8kLykubWFwKGZpbGWie65hcHA9cmVxdWlyZSjRB1N0b3JhZ2UpLnJlYWRKU09OKGZpbGUsMSk7oyhhcHCeYXBwLnR5cGWK0QVjbG9jayl7q2FwcDt9fSkuZmlsdGVyKHiieCkuc29ydCgoYSxiKaJhLnNvcnRvcmRlci1iLnNvcnRvcmRlcilbMF07oyhfY2xrQXBwKXtzLmNsb2NrPV9jbGtBcHAuc3JjO19jbGtBcHA9cmVxdWlyZSjRB1N0b3JhZ2UpLnJlYWQoX2Nsa0FwcC5zcmMpO3MuY2xvY2tIYXNXaWRnZXRzPV9jbGtBcHAuaW5jbHVkZXMo0RJCYW5nbGUubG9hZFdpZGdldHMpO3JlcXVpcmUo0QdTdG9yYWdlKS53cml0ZUpTT04o0QxzZXR0aW5nLmpzb24scyk7fX0KvnM7CqMoIV9jbGtBcHApX2Nsa0FwcD1gRS5zaG93TWVzc2FnZSgiTm8gQ2xvY2sgRm91bmQiKTtzZXRXYXRjaCgoKT0+e0JhbmdsZS5zaG93TGF1bmNoZXIoKTt9LCBnbG9iYWwuQlROMnx8QlROLCB7cmVwZWF0OmZhbHNlLGVkZ2U6ImZhbGxpbmcifSk7YDsKZXZhbChfY2xrQXBwKTsKvl9jbGtBcHA7////QxkAAGJvb3R1cGRhdGUuanM=");
  base64DecodeToExistingUint8Array(bufferView, 1916, "");
  base64DecodeToExistingUint8Array(bufferView, 8416, "eyJpZCI6ImJvb3QiLCJuYW1lIjoiQm9vdGxvYWRlciIsInR5cGUiOiJib290bG9hZGVyIiwic29ydG9yZGVyIjotMTAsInZlcnNpb24iOiIwLjU5IiwidGFncyI6InRvb2wsc3lzdGVtIiwiZmlsZXMiOiJib290LmluZm8sLmJvb3QwLC5ib290Y2RlLGJvb3R1cGRhdGUuanMiff///0sHAABsYXVuY2guYXBwLmpz");
  base64DecodeToExistingUint8Array(bufferView, 8608, "e61zPXJlcXVpcmUo0QdTdG9yYWdlKTutc2NhbGV2YWw9MTutdmVjdG9ydmFsPTIwO61mb250PWcuZ2V0Rm9udHMoKS5pbmNsdWRlcyjRBTEyeDIwKT/RBTEyeDIwOtEFNng4OjI7rXNldHRpbmdzPU9iamVjdC5hc3NpZ24oe3Nob3dDbG9ja3M6tCxmdWxsc2NyZWVuOrV9LHMucmVhZEpTT04o0QtsYXVuY2guanNvbiy0KaB7fSk7oyjRCnZlY3RvcnNpemW5c2V0dGluZ3MpdmVjdG9ydmFsPXBhcnNlSW50KHNldHRpbmdzLnZlY3RvcnNpemUpO6Mo0QRmb250uXNldHRpbmdzKXujKHNldHRpbmdzLmZvbnSK0QZWZWN0b3Ipe3NjYWxldmFsPXZlY3RvcnZhbC8yMDtmb250PdEGVmVjdG9yKyh2ZWN0b3J2YWwpLnRvU3RyaW5nKCk7faR7Zm9udD1zZXR0aW5ncy5mb250O3NjYWxldmFsPShmb250LnNwbGl0KNEBeClbMV0pLzIwO319rWxhdW5jaENhY2hlPXMucmVhZEpTT04o0RFsYXVuY2guY2FjaGUuanNvbiy0KaB7fTutbGF1bmNoSGFzaD1yZXF1aXJlKNEHU3RvcmFnZSkuaGFzaCgvXC5pbmZvLyk7oyhsYXVuY2hDYWNoZS5oYXNojGxhdW5jaEhhc2gpe2xhdW5jaENhY2hlPXtoYXNoOmxhdW5jaEhhc2gsYXBwczpzLmxpc3QoL1wuaW5mbyQvKS5tYXAoYXBwonusYT1zLnJlYWRKU09OKGFwcCwxKTurYZ57bmFtZTphLm5hbWUsdHlwZTphLnR5cGUsaWNvbjphLmljb24sc29ydG9yZGVyOmEuc29ydG9yZGVyLHNyYzphLnNyY307fSkuZmlsdGVyKGFwcKJhcHCeKGFwcC50eXBlitEDYXBwoChhcHAudHlwZYrRBWNsb2NrnnNldHRpbmdzLnNob3dDbG9ja3MpoCFhcHAudHlwZSkpLnNvcnQoKGEsYimie6xuPSgwfGEuc29ydG9yZGVyKS0oMHxiLnNvcnRvcmRlcik7oyhuKatuO6MoYS5uYW1lPGIubmFtZSmrLTE7oyhhLm5hbWU+Yi5uYW1lKasxO6swO30pfTtzLndyaXRlSlNPTijREWxhdW5jaC5jYWNoZS5qc29uLGxhdW5jaENhY2hlKTt9rWFwcHM9bGF1bmNoQ2FjaGUuYXBwczujKCFzZXR0aW5ncy5mdWxsc2NyZWVuKUJhbmdsZS5sb2FkV2lkZ2V0cygpO0Uuc2hvd1Njcm9sbGVyKHtoOjY0KnNjYWxldmFsLGM6YXBwcy5sZW5ndGgsZHJhdzooaSxyKaJ7rGFwcD1hcHBzW2ldO6MoIWFwcCmrO2cuY2xlYXJSZWN0KChyLngpLChyLnkpLChyLngrci53LTEpLChyLnkrci5oLTEpKTtnLnNldEZvbnQoZm9udCkuc2V0Rm9udEFsaWduKC0xLDApLmRyYXdTdHJpbmcoYXBwLm5hbWUsNjQqc2NhbGV2YWwsci55KygzMipzY2FsZXZhbCkpO6MoYXBwLmljb24pe6MoIWFwcC5pbWcpYXBwLmltZz1zLnJlYWQoYXBwLmljb24pO7F7Zy5kcmF3SW1hZ2UoYXBwLmltZyw4KnNjYWxldmFsLHIueSsoOCpzY2FsZXZhbCkse3NjYWxlOnNjYWxldmFsfSk7fWNhdGNoKGUpe319fSxzZWxlY3Q6aaJ7rGFwcD1hcHBzW2ldO6MoIWFwcCmrO6MoIWFwcC5zcmOgcmVxdWlyZSjRB1N0b3JhZ2UpLnJlYWQoYXBwLnNyYymLtyl7RS5zaG93TWVzc2FnZSjRFEFwcCBTb3VyY2UKTm90IGZvdW5kKTtzZXRUaW1lb3V0KGRyYXdNZW51LDIwMDApO32ke2xvYWQoYXBwLnNyYyk7fX0sYmFjazpCYW5nbGUuc2hvd0Nsb2NrLHJlbW92ZTooKaJ7oyhsb2NrVGltZW91dCljbGVhclRpbWVvdXQobG9ja1RpbWVvdXQpO0JhbmdsZS5yZW1vdmVMaXN0ZW5lcijRBGxvY2ssbG9ja0hhbmRsZXIpO319KTtnLmZsaXAoKTtCYW5nbGUuc2V0TG9ja2VkKLUpO61sb2NrVGltZW91dDutbG9ja0hhbmRsZXI9qihsb2NrZWQpe6MobG9ja1RpbWVvdXQpY2xlYXJUaW1lb3V0KGxvY2tUaW1lb3V0KTtsb2NrVGltZW91dD23O6MobG9ja2VkKWxvY2tUaW1lb3V0PXNldFRpbWVvdXQoQmFuZ2xlLnNob3dDbG9jaywxMDAwMCk7fUJhbmdsZS5vbijRBGxvY2ssbG9ja0hhbmRsZXIpO6MoIXNldHRpbmdzLmZ1bGxzY3JlZW4pQmFuZ2xlLmRyYXdXaWRnZXRzKCk7ff/xAgAAbGF1bmNoLnNldHRpbmdzLmpz");
  base64DecodeToExistingUint8Array(bufferView, 10508, "KKooYmFjayl7rXNldHRpbmdzPU9iamVjdC5hc3NpZ24oe3Nob3dDbG9ja3M6tCxmdWxsc2NyZWVuOrV9LHJlcXVpcmUo0QdTdG9yYWdlKS5yZWFkSlNPTijRC2xhdW5jaC5qc29uLLQpoHt9KTutZm9udHM9Zy5nZXRGb250cygpO6pzYXZlKGtleSx2YWx1ZSl7c2V0dGluZ3Nba2V5XT12YWx1ZTtyZXF1aXJlKNEHU3RvcmFnZSkud3JpdGUo0QtsYXVuY2guanNvbixzZXR0aW5ncyk7fa5hcHBNZW51PXvRADp70QV0aXRsZTrRCExhdW5jaGVyfSzRBjwgQmFjazpiYWNrLNEERm9udDp7dmFsdWU6Zm9udHMuaW5jbHVkZXMoc2V0dGluZ3MuZm9udCk/Zm9udHMuaW5kZXhPZihzZXR0aW5ncy5mb250KTpmb250cy5pbmRleE9mKNEFMTJ4MjApLG1pbjowLG1heDpmb250cy5sZW5ndGgtMSxzdGVwOjEsd3JhcDq0LG9uY2hhbmdlOihtKaJ7c2F2ZSjRBGZvbnQsZm9udHNbbV0pfSxmb3JtYXQ6dqJmb250c1t2XX0s0RBWZWN0b3IgRm9udCBTaXplOnt2YWx1ZTpzZXR0aW5ncy52ZWN0b3JzaXploDEwLG1pbjoxMCxtYXg6MjAsc3RlcDoxLHdyYXA6tCxvbmNoYW5nZToobSmie3NhdmUo0Qp2ZWN0b3JzaXplLG0pfX0s0QtTaG93IENsb2Nrczp7dmFsdWU6c2V0dGluZ3Muc2hvd0Nsb2Nrc4q0LG9uY2hhbmdlOihtKaJ7c2F2ZSjRCnNob3dDbG9ja3MsbSl9fSzRCkZ1bGxzY3JlZW46e3ZhbHVlOnNldHRpbmdzLmZ1bGxzY3JlZW6KtCxvbmNoYW5nZToobSmie3NhdmUo0QpmdWxsc2NyZWVuLG0pfX19O0Uuc2hvd01lbnUoYXBwTWVudSk7fSk7////5AAAAGxhdW5jaC5pbmZv");
  base64DecodeToExistingUint8Array(bufferView, 11296, "eyJpZCI6ImxhdW5jaCIsIm5hbWUiOiJMYXVuY2hlciIsInR5cGUiOiJsYXVuY2giLCJzcmMiOiJsYXVuY2guYXBwLmpzIiwic29ydG9yZGVyIjotMTAsInZlcnNpb24iOiIwLjIwIiwidGFncyI6InRvb2wsc3lzdGVtLGxhdW5jaGVyIiwiZmlsZXMiOiJsYXVuY2guaW5mbyxsYXVuY2guYXBwLmpzLGxhdW5jaC5zZXR0aW5ncy5qcyIsImRhdGEiOiJsYXVuY2guanNvbixsYXVuY2guY2FjaGUuanNvbiJ9ExQAAGFudG9uY2xrLmFwcC5qcw==");
  base64DecodeToExistingUint8Array(bufferView, 11556, "CkdyYXBoaWNzLnByb3RvdHlwZS5zZXRGb250QW50b249qihzY2FsZSl7Zy5zZXRGb250Q3VzdG9tKNL8EA==");
  base64DecodeToExistingUint8Array(bufferView, 11642, "B/+AAAAAAAAAAB/+AAAAAAAAAAB/+AAAAAAAAAAB/+AAAAAAAAAAB/+AAAAAAAAAAB/+AAAAAAAAAAB/+AAAAAAAAAAB/+AAAAAAAAAAB/+AAAAAAAAAAB/+AAAAAAAAAAB/+AAAAAAAAAAB/+AAAAAAAAAAB/+AAAAAAAAAAB/+");
  base64DecodeToExistingUint8Array(bufferView, 11810, "OAAAAAAAAAAAD+AAAAAAAAAAA/+AAAAAAAAAAf/+AAAAAAAAAH//+AAAAAAAAB///+AAAAAAAA////+AAAAAAAP////+AAAAAAD/////+AAAAAA//////+AAAAAf//////+AAAAH///////+AAAB////////+AAA/////////+AAP/////////8AD/////////+AAD/////////gAAD////////4AAAD///////+AAAAD///////AAAAAD//////wAAAAAD/////8AAAAAAD////+AAAAAAAD////gAAAAAAAD///4AAAAAAAAD//+AAAAAAAAAD//AAAAAAAAAAD/wAAAAAAAAAAD8=");
  base64DecodeToExistingUint8Array(bufferView, 12085, "gA==");
  base64DecodeToExistingUint8Array(bufferView, 12116, "P/////8AAAAAH///////wAAAAf///////8AAAB/////////AAAD/////////gAAH/////////wAAP/////////4AAf/////////8AA//////////+AA//////////+AA//////////+AB///////////AB///////////AB///////////AB///////////AD//wAAAAAH//gD//AAAAAAB//gD/+AAAAAAA//gD/+AAAAAAA//gD/+AAAAAAA//gD//AAAAAAB//gD///////////gB///////////AB///////////AB///////////AB///////////AA//////////+AA//////////+AAf/////////8AAf/////////8AAP/////////4AAH/////////wAAD/////////gAAA////////+AAAAP///////4AAAAB///////g=");
  base64DecodeToExistingUint8Array(bufferView, 12495, "D/4AAAAAAAAAAD/4AAAAAAAAAAH/4AAAAAAAAAAH/4AAAAAAAAAAH/wAAAAAAAAAAP/wAAAAAAAAAAP/gAAAAAAAAAAf/AAAAAAAAAAA//////////4AB//////////4AD//////////4AP//////////4AP//////////4AP//////////4AP//////////4AP//////////4AP//////////4AP//////////4AP//////////4AP//////////4AP//////////4AP//////////4AP//////////4A==");
  base64DecodeToExistingUint8Array(bufferView, 12759, "B/+AAAAAf4AAA//+AAAAH/4AAD//+AAAAf/4AAP//+AAAB//4AAf//+AAAH//4AA///+AAAP//4AB///+AAA///4AD///+AAB///4AD///+AAD///4AH///+AAH///4AH///+AAf///4AH///+AA////4AP///+AB////4AP///+AH////4AP///+AP////4AP/8AAAf////4AP/4AAB/////4AP/4AAD/////4AP/4AAP///P/4AP/4AA///8P/4AP/8AP///4P/4AP///////wP/4AP///////AP/4AP//////+AP/4AH//////8AP/4AH//////4AP/4AH//////gAP/4AD//////AAP/4AD/////+AAP/4AB/////4AAP/4AA/////wAAP/4AAf////AAAP/4AAP///8AAAP/4AAD///wAAAP/4AAA///AAAAP/4AAAD/g==");
  base64DecodeToExistingUint8Array(bufferView, 13133, "H/4AAAAAP/AAAH//wAAAA//AAAH//8AAAD//AAAH///AAAH//AAAH///gAAP//AAAH///wAAf//AAAH///4AA///AAAH///4AA///AAAH///8AB///AAAH///8AB///AAAH///+AB///AAAH///+AD///AAAH///+AD///AAAH///+AD///D/8AB///AD//gD/8AAD//AD/+AD/8AAB//AD/+AH/+AAB//AD/+AH/+AAB//AD/+AP//AAD//AD//Af//wAH//AD//////////+AD//////////+AD//////////+AD//////////+AB//////////8AB//////////8AA//////////8AA//////////4AAf/////////wAAf///7/////gAAP///5/////AAAD///w////+AAAB///gf///4AAAAf/+AH///AAAAAA/gAAf/w==");
  base64DecodeToExistingUint8Array(bufferView, 13504, "D/wAAAAAAAAAA//wAAAAAAAAAP//wAAAAAAAAB///wAAAAAAAAf///wAAAAAAAH////wAAAAAAA/////wAAAAAAP/////wAAAAAB//////wAAAAAf//////wAAAAH///////wAAAA////////wAAAP////////wAAA///////H/wAAA//////wH/wAAA/////8AH/wAAA/////AAH/wAAA////gAAH/wAAA///4AAAH/wAAA//+AAAAH/wAAA///////////gA///////////gA///////////gA///////////gA///////////gA///////////gA///////////gA///////////gA///////////gA///////////gA///////////gA///////////gA///////////gA///////////gAAAAAAAAH/4AAAAAAAAAAH/wAAAAAAAAAAH/wAAAAAAAAAAH/w");
  base64DecodeToExistingUint8Array(bufferView, 13903, "B//8AAA/////+B///AAA/////+B///wAA/////+B///4AA/////+B///8AA/////+B///8AA/////+B///+AA/////+B////AA/////+B////AA/////+B////AA/////+B////gA/////+B////gA/////+B////gA/////+A////gA//gP/gAAB//wA//gf/AAAA//wA//gf/AAAAf/wA//g//AAAAf/wA//g//AAAA//wA//g//gAAA//wA//g//+AAP//wA//g////////gA//g////////gA//g////////gA//g////////gA//g////////AA//gf///////AA//gf//////+AA//gP//////+AA//gH//////8AA//gD//////4AA//gB//////wAA//gA//////AAAAAAAH////8AAAAAAAA////A==");
  base64DecodeToExistingUint8Array(bufferView, 14280, "A//////4AAAAAf///////gAAAB////////4AAAH////////+AAAf/////////AAA//////////gAB//////////wAB//////////4AD//////////4AD//////////4AH//////////8AH//////////8AH//////////8AH//////////8AH//////////+AP/8AA/+AAH/+AP/4AB/8AAD/+AP/4AB/8AAD/+AP/4AD/8AAD/+AP/4AD/+AAH/+AP/8AD//gA//+AP//8D//////+AH//+D//////8AH//+D//////8AH//+D//////8AH//+D//////8AD//+D//////4AD//+B//////4AB//+B//////wAB//+A//////gAA//+A//////AAAf/+Af////+AAAP/+AP////8AAAD/+AD////wAAAAf+AA///+AAAAAAAAAB//A=");
  base64DecodeToExistingUint8Array(bufferView, 14659, "//AAAAAAAAAAA//gAAAAAAAAAA//gAAAAAAAAAA//gAAAAAAADgA//gAAAAAAP/gA//gAAAAAH//gA//gAAAAB///gA//gAAAAP///gA//gAAAD////gA//gAAAf////gA//gAAB/////gA//gAAP/////gA//gAB//////gA//gAH//////gA//gA///////gA//gD///////gA//gf///////gA//h////////gA//n////////gA//////////gAA/////////AAAA////////wAAAA///////4AAAAA///////AAAAAA//////4AAAAAA//////AAAAAAA/////4AAAAAAA/////AAAAAAAA////8AAAAAAAA////gAAAAAAAA///+AAAAAAAAA///4AAAAAAAAA///AAAAAAAAAA//4AAAAAAAAAA/+");
  base64DecodeToExistingUint8Array(bufferView, 15040, "D//gB///wAAAAP//4H///+AAAA///8P////gAAB///+f////4AAD///+/////8AAH/////////+AAH//////////AAP//////////gAP//////////gAf//////////gAf//////////wAf//////////wAf//////////wA///////////wA//4D//wAB//4A//wB//gAA//4A//gA//gAAf/4A//gA//AAAf/4A//gA//gAAf/4A//wB//gAA//4A///P//8AH//4Af//////////wAf//////////wAf//////////wAf//////////wAf//////////gAP//////////gAP//////////AAH//////////AAD/////////+AAD///+/////8AAB///8f////wAAAf//4P////AAAAH//wD///8AAAAA/+AAf//A=");
  base64DecodeToExistingUint8Array(bufferView, 15421, "H//gAAAAAAAAB///+AA/+AAAAP////gA//wAAAf////wA//4AAB/////4A//8AAD/////8A//+AAD/////+A///AAH/////+A///AAP//////A///gAP//////A///gAf//////A///wAf//////A///wAf//////A///wAf//////A///wA///////AB//4A//4AD//AAP/4A//gAB//AAP/4A//gAA//AAP/4A//gAA/+AAP/4A//gAB/8AAP/4A//wAB/8AAf/4Af//////////wAf//////////wAf//////////wAf//////////wAf//////////wAP//////////gAP//////////gAH//////////AAH/////////+AAD/////////8AAB/////////4AAAf////////wAAAP////////AAAAB///////4AAAAAD/////w==");
  base64DecodeToExistingUint8Array(bufferView, 15801, "H/wAAf/AAAAAAP/wAA//AAAAAAP/wAA//AAAAAAP/wAA//AAAAAAP/wAA//AAAAAAP/wAA//AAAAAAP/wAA//AAAAAAP/wAA//AAAAAAP/wAA//AAAAAAP/wAA//AAAAAAP/wAA//AAAAAAP/wAA//AAAAAAP/wAA//AAAAAAP/wAA//");
  base64DecodeToExistingUint8Array(bufferView, 15965, "LDQ2LNENEiAnGicnJycnJycnEyw3OCsoc2NhbGWPOCkrKDGPMTYpKTt9O3utZHJhd1RpbWVvdXQ7rWRyYXc9qigpe6x4PWcuZ2V0V2lkdGgoKS8yO6x5PWcuZ2V0SGVpZ2h0KCkvMjtnLnJlc2V0KCkuY2xlYXJSZWN0KEJhbmdsZS5hcHBSZWN0KTusZGF0ZT24RGF0ZSgpO6x0aW1lU3RyPXJlcXVpcmUo0QZsb2NhbGUpLnRpbWUoZGF0ZSwxKTtnLnNldEZvbnRBbGlnbigwLDApLnNldEZvbnQo0QVBbnRvbikuZHJhd1N0cmluZyh0aW1lU3RyLHgseSk7rGRhdGVTdHI9cmVxdWlyZSjRBmxvY2FsZSkuZGF0ZShkYXRlLDApLnRvVXBwZXJDYXNlKCkr0QEKK3JlcXVpcmUo0QZsb2NhbGUpLmRvdyhkYXRlLDApLnRvVXBwZXJDYXNlKCk7Zy5zZXRGb250QWxpZ24oMCwwKS5zZXRGb250KNEDNng4LDIpLmRyYXdTdHJpbmcoZGF0ZVN0cix4LHkrNDgpO6MoZHJhd1RpbWVvdXQpY2xlYXJUaW1lb3V0KGRyYXdUaW1lb3V0KTtkcmF3VGltZW91dD1zZXRUaW1lb3V0KKooKXtkcmF3VGltZW91dD23O2RyYXcoKTt9LDYwMDAwLShEYXRlLm5vdygpJTYwMDAwKSk7fTtCYW5nbGUuc2V0VUkoe21vZGU60QVjbG9jayxyZW1vdmU6qigpe6MoZHJhd1RpbWVvdXQpY2xlYXJUaW1lb3V0KGRyYXdUaW1lb3V0KTtkcmF3VGltZW91dD23O75HcmFwaGljcy5wcm90b3R5cGUuc2V0Rm9udEFudG9uO319KTtCYW5nbGUubG9hZFdpZGdldHMoKTtkcmF3KCk7c2V0VGltZW91dChCYW5nbGUuZHJhd1dpZGdldHMsMCk7ff9DAgAAYW50b25jbGsuaW1n");
  base64DecodeToExistingUint8Array(bufferView, 16728, "MDAC//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////6v/q///+r6qqr///AP9Av//0DwAAC//5AP0Av//QDwAAC//AAMAAv/0ADwAAC//AAMAAtV0AD1VQD//BAMEAoA0AD//QD//vAO8AsA7wD//AH///AP8AoA/wD//AL///AP8Av//wD/8AP///AP8Av//wD/8Av///AP8Av//wD/0A////AP8Av//wD/wA////AP8Av//wD/wC////AP8AsV/wD/AD////AP8AoA/wD/AH////AP8AsA/wD/AL////AP8AoA/wD+AL////AP8Av//wD9AP////AP8Av//wD8AP////AP8Av//wD8AP////AP8Av//wD8Av////AP8A///wD4Av///////////////////////////////////62tr/66v/r56vv//6297//vv/+qvuv///r9v/6/v/rrq/v//66v//q+v/q66ub//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////7gAAABhbnRvbmNsay5pbmZv");
  base64DecodeToExistingUint8Array(bufferView, 17340, "eyJpZCI6ImFudG9uY2xrIiwibmFtZSI6IkFudG9uIENsb2NrIiwidHlwZSI6ImNsb2NrIiwic3JjIjoiYW50b25jbGsuYXBwLmpzIiwiaWNvbiI6ImFudG9uY2xrLmltZyIsInZlcnNpb24iOiIwLjExIiwidGFncyI6ImNsb2NrIiwiZmlsZXMiOiJhbnRvbmNsay5pbmZvLGFudG9uY2xrLmFwcC5qcyxhbnRvbmNsay5pbWcifQwsAABhYm91dC5hcHAuanM=");
  base64DecodeToExistingUint8Array(bufferView, 17556, "");
  base64DecodeToExistingUint8Array(bufferView, 28864, "MDCI/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+VVVVVVVVVVVV/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/lVVVVVVVVVVVVVV/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+VVVVVVVVVVVVVVVVVVVVVf7+/v7+/v7+/v4QEP7+/v7+/v7+/v7+/v7+/v7+/v5VVVVVVVVVVVVVVVVVVVVVVVX+/v7+/v7+/hAQEBD+/v7+/v7+/v7+/v7+/v7+/lVVVVVVVVVVVVVVVVVVVVVVVVVV/v7+/v7+/hAQEBD+/v7+/v7+/v7+/v7+/v7+VVVVVVVVVVVVVVVVVVVVVVVVVVVVVf7+/v7+/v4QEP7+/v7+/v7+/v7+/v7+/v5VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v5VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/lVVVVVVVVVVVVVVVVVVVXmjeVVVVVVVVVVV/v7+EBAQEBD+/v7+/v7+/v7+/v7+/lVVVVVVVVVVVVVVVVV5o87OznlVVVVVVVVV/v7+EBAQEBD+/v7+/v7+/v7+/v7+VVVVVVVVVVVVVVVVVXnIzs7Ozsd5VVVVVVVVVf7+EBAQEBD+/v7+/v7+/v7+/v7+VVVVVVVVVVVVVVV5o87Ozs7Ozs6jVVVVVVVVVf7+/v4QEBD+/v7+/v7+/v7+/v7+VVVVVVVVVVVVeaPOzs7Ozs7Ozs7Oo1VVVVVVVf7+/v4QEBD+/v7+/v7+/v7+/v7+VVVVVVVVVVWjyM7Ozs7Ozs7Ozs7OzlVVVVVVVf7+/v4QEBD+/v7+/v7+/v7+/v5VVVVVVVVVecfOzs7Ozs7Ozs7Ozs7OzlVVVVVVVVX+/v4QEBD+/v7+/v7+/v7+/v5VVVVVVVVVzs7Ozs7Ozs7Ozs7Ozs7OzlVVVVVVVVX+/v4QEBD+/v7+/v7+/v7+/v5VVVVVVVVVzs7OeXnOzs7Ozs55ec7OzlVVVVVVVVX+/v4QEBD+/v7+/v7+/v7+/v5VVVVVVVVVzs7OeXnOzs7Ozs55ec7OzlVVVVVVVVX+/v4QEBD+/v7+/v7+/v7+/v5VVVVVVVVVzs7Ozs7Ozs7Ozs7Ozs7OzlVVVVVVVVX+/v4QEBD+/v7+/v7+/v7+/v5VVVVVVVVVzs7Ozs7Ozs7Ozs7Ozs7OzlVVVVVVVVX+/v7+/v7+/v7+/v7+/v7+/v5VVVVVVVVVzs7Ozs7Ozs7Ozs7Ozs7OzlVVVVVVVVX+/v7+/v7+/v7+/v7+/v7+/v5VVVVVVVVVzc7Ozs7Ozs7Ozs7Ozs7OzlVVVVVVVVX+/v7+/v7+/v7+/v7+/v7+/v5VVVVVVVVVec7Ozs7Ozs7Ozs7Ozs7OeVVVVVVVVVX+/v7+/v7+/v7+/v7+/v7+/v5VVVVVVVVVT53Ozs7Ozs7Ozs7Ozs55T1VVVVVVVf7+/v7+/v7+/v7+/v7+/v7+/v7+VVVVVVVVT095x87Ozs7Ozs7Ox3lPT1VVVVX+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v5VVVVVT09PxsbHx83Nx8fGxk9PT1VVVf7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+VVVVT09PxsbGxsbGxsbGxk9PT1VV/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v5VVjMPx8bGxsbGxsbGxw8zVlX+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v5lZQ8PgMbGxsbGxsbGgA8PZWX+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+ZWVlZToPOc3GxsbGxsbNOQ86ZWVlZf7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v5lZWVlZToPD87Nx8bGx83ODw86ZWVlZWX+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/mVlZWVlZWUPD4HOzs7Ozs5dDw9lZWVlZWVl/v7+/v7+/v7+/v7+/v7+/v7+/v7+ZWVlZWVlZWU6Dw+kzs7OzqQPDzplZWVlZWVlZf7+/v7+/v7+/v7+/v7+/v7+/v7+ZWVlZWVlZWVlEA8PXc7OXQ8PEGVlZWVlZWVlZf7+/v7+/v7+/v7+/v7+/v7+/v5lZWVlZWVlZWVlQQ8PDw8PDw8QQWVlZWVlZWVlZWX+/v7+/v7+/v7+/v7+/v7+/v5lZWVlZWVlZWVlZWU6Dw8PDzplZWVlZWVlZWVlZWX+/v7+/v7+/v7+/v7+/v7+/mVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVl/v7+/v7+/v7+/v7+/v7+/mVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVl/v7+/v7+/v7+/v7+/v7+/mVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVl/v7+/v7+/v7+/v7+/v7+/mVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVl/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/qYAAABhYm91dC5pbmZv");
  base64DecodeToExistingUint8Array(bufferView, 31204, "eyJpZCI6ImFib3V0IiwibmFtZSI6IkFib3V0Iiwic3JjIjoiYWJvdXQuYXBwLmpzIiwiaWNvbiI6ImFib3V0LmltZyIsInNvcnRvcmRlciI6LTQsInZlcnNpb24iOiIwLjE0IiwidGFncyI6InRvb2wsc3lzdGVtIiwiZmlsZXMiOiJhYm91dC5pbmZvLGFib3V0LmFwcC5qcyxhYm91dC5pbWciff//BAEAAHdpZGxvY2sud2lkLmpz");
  base64DecodeToExistingUint8Array(bufferView, 31404, "QmFuZ2xlLm9uKNEEbG9jayyqKCl7V0lER0VUU1vRBGxvY2tdLndpZHRoPUJhbmdsZS5pc0xvY2tlZCgpPzE2OjE7QmFuZ2xlLmRyYXdXaWRnZXRzKCk7fSk7CldJREdFVFNb0QRsb2NrXT17YXJlYTrRAnRsLHNvcnRvcmRlcjoxMCx3aWR0aDpCYW5nbGUuaXNMb2NrZWQoKT8xNjoxLGRyYXc6qih3KXujKEJhbmdsZS5pc0xvY2tlZCgpKWcucmVzZXQoKS5kcmF3SW1hZ2Uo0R8OEAEf4P/DAwwMMDDAx/+///h/4f+H/z/8//P//9/+LHcueCsxLHcueSs0KTt9fTuBAAAAd2lkbG9jay5pbmZv");
  base64DecodeToExistingUint8Array(bufferView, 31696, "eyJpZCI6IndpZGxvY2siLCJuYW1lIjoiTG9jayBXaWRnZXQiLCJ0eXBlIjoid2lkZ2V0IiwidmVyc2lvbiI6IjAuMDgiLCJ0YWdzIjoid2lkZ2V0LGxvY2siLCJmaWxlcyI6IndpZGxvY2suaW5mbyx3aWRsb2NrLndpZC5qcyJ9////MAMAAHdpZGJhdC53aWQuanM=");
  base64DecodeToExistingUint8Array(bufferView, 31860, "e0JhbmdsZS5vbijRCGNoYXJnaW5nLKooY2hhcmdpbmcpe6MoY2hhcmdpbmcpQmFuZ2xlLmJ1enooKTtXSURHRVRTW9EDYmF0XS5kcmF3KCk7Zy5mbGlwKCk7fSk7rWJhdHRlcnlJbnRlcnZhbD1CYW5nbGUuaXNMQ0RPbigpP3NldEludGVydmFsKCgpoldJREdFVFNb0QNiYXRdLmRyYXcoKSw2MDAwMCk6tztCYW5nbGUub24o0QhsY2RQb3dlciyqKG9uKXujKG9uKXtXSURHRVRTW9EDYmF0XS5kcmF3KCk7oyghYmF0dGVyeUludGVydmFsKWJhdHRlcnlJbnRlcnZhbD1zZXRJbnRlcnZhbCgoKaJXSURHRVRTW9EDYmF0XS5kcmF3KCksNjAwMDApO32ke6MoYmF0dGVyeUludGVydmFsKXtjbGVhckludGVydmFsKGJhdHRlcnlJbnRlcnZhbCk7YmF0dGVyeUludGVydmFsPbc7fX19KTtXSURHRVRTW9EDYmF0XT17YXJlYTrRAnRyLHdpZHRoOjQwLGRyYXc6qigpe6x4Pa8ueCx5Pa8ueTtnLnJlc2V0KCkuc2V0Q29sb3IoZy50aGVtZS5mZykuZmlsbFJlY3QoeCx5KzIseCszNSx5KzIxKS5jbGVhclJlY3QoeCsyLHkrNCx4KzMzLHkrMTkpLmZpbGxSZWN0KHgrMzYseSsxMCx4KzM5LHkrMTQpO6xiYXR0ZXJ5PUUuZ2V0QmF0dGVyeSgpO6MoYmF0dGVyeTwyMClnLnNldENvbG9yKNEEI2YwMCk7pKMoYmF0dGVyeTw0MClnLnNldENvbG9yKGcudGhlbWUuZGFyaz/RBCNmZjA60QQjZjgwKTukZy5zZXRDb2xvcijRBCMwZjApO2cuZmlsbFJlY3QoeCs0LHkrNix4KzQrYmF0dGVyeSoyNy8xMDAseSsxNyk7oyhCYW5nbGUuaXNDaGFyZ2luZygpKWcucmVzZXQoKS5kcmF3SW1hZ2Uo0R0UCoEAAcAADwAA/AAH8Ph/w/4fD+AAPwAA8AADgCx4KzgseSs3KTt9fTt9igAAAHdpZGJhdC5pbmZv");
  base64DecodeToExistingUint8Array(bufferView, 32708, "eyJpZCI6IndpZGJhdCIsIm5hbWUiOiJCYXR0ZXJ5IExldmVsIFdpZGdldCIsInR5cGUiOiJ3aWRnZXQiLCJ2ZXJzaW9uIjoiMC4xMiIsInRhZ3MiOiJ3aWRnZXQsYmF0dGVyeSIsImZpbGVzIjoid2lkYmF0LmluZm8sd2lkYmF0LndpZC5qcyJ9///AAQAAd2lkYnQud2lkLmpz");
  base64DecodeToExistingUint8Array(bufferView, 32880, "V0lER0VUU1vRCWJsdWV0b290aF09e2FyZWE60QJ0cix3aWR0aDoxNSxkcmF3OqooKXtnLnJlc2V0KCk7oyhOUkYuZ2V0U2VjdXJpdHlTdGF0dXMoKS5jb25uZWN0ZWQpe6MoZy5nZXRCZ0NvbG9yKCmLMzEpe2cuc2V0Q29sb3Io0QQjMGZmKTt9pHtnLnNldENvbG9yKChnLmdldEJQUCgpPjgpP9EEIzA3ZjooZy50aGVtZS5kYXJrP9EEIzBmZjrRBCMwMGYpKTt9faR7Zy5zZXRDb2xvcihnLnRoZW1lLmRhcms/0QQjNjY2OtEEIzk5OSk7fWcuZHJhd0ltYWdlKNEfCxQBBgDgFgJgR4jZMawfAcA4D4NYybEYIwTAsBwDACwyK68ueCwyK68ueSk7fSxjaGFuZ2VkOqooKXtXSURHRVRTW9EJYmx1ZXRvb3RoXS5kcmF3KCk7fX07TlJGLm9uKNEHY29ubmVjdCxXSURHRVRTW9EJYmx1ZXRvb3RoXS5jaGFuZ2VkKTtOUkYub24o0QpkaXNjb25uZWN0LFdJREdFVFNb0QlibHVldG9vdGhdLmNoYW5nZWQpO4UAAAB3aWRidC5pbmZv");
  base64DecodeToExistingUint8Array(bufferView, 33360, "eyJpZCI6IndpZGJ0IiwibmFtZSI6IkJsdWV0b290aCBXaWRnZXQiLCJ0eXBlIjoid2lkZ2V0IiwidmVyc2lvbiI6IjAuMDkiLCJ0YWdzIjoid2lkZ2V0LGJsdWV0b290aCIsImZpbGVzIjoid2lkYnQuaW5mbyx3aWRidC53aWQuanMiff////wAAAB3aWRpZC53aWQuanM=");
  base64DecodeToExistingUint8Array(bufferView, 33528, "KCgponuqZHJhdygpe6xpZD1OUkYuZ2V0QWRkcmVzcygpLnN1YnN0cigpLnN1YnN0cigxMikuc3BsaXQo0QE6KTtnLnJlc2V0KCkuc2V0Q29sb3IoZy50aGVtZS5kYXJrP9EEIzBmZjrRBCMwMGYpLnNldEZvbnQo0QM2eDgsMSk7Zy5kcmF3U3RyaW5nKGlkWzBdLK8ueCsyLK8ueSs0LLQpO2cuZHJhd1N0cmluZyhpZFsxXSyvLngrMiyvLnkrMTQstCk7fVdJREdFVFNb0QV3aWRpZF09e2FyZWE60QJ0cix3aWR0aDoxNixkcmF3OmRyYXd9O30pKCk7igAAAHdpZGlkLmluZm8=");
  base64DecodeToExistingUint8Array(bufferView, 33812, "eyJpZCI6IndpZGlkIiwibmFtZSI6IkJsdWV0b290aCBJRCBXaWRnZXQiLCJ0eXBlIjoid2lkZ2V0IiwidmVyc2lvbiI6IjAuMDMiLCJ0YWdzIjoid2lkZ2V0LGFkZHJlc3MsbWFjIiwiZmlsZXMiOiJ3aWRpZC5pbmZvLHdpZGlkLndpZC5qcyJ9//+pAAAAd2VsY29tZS5ib290Lmpz");
  base64DecodeToExistingUint8Array(bufferView, 33984, "KKooKXutcz1yZXF1aXJlKNEHU3RvcmFnZSkucmVhZEpTT04o0Qx3ZWxjb21lLmpzb24sMSmge307oyghcy53ZWxjb21lZCl7c2V0VGltZW91dCgoKaJ7cmVxdWlyZSjRB1N0b3JhZ2UpLndyaXRlKNEMd2VsY29tZS5qc29uLHt3ZWxjb21lZDq0fSlsb2FkKNEOd2VsY29tZS5hcHAuanMpfSl9fSkoKf///xkWAAB3ZWxjb21lLmFwcC5qcw==");
  base64DecodeToExistingUint8Array(bufferView, 34188, "CqphbmltYXRlKHNlcSxwZXJpb2Qpe6xjPWcuZ2V0Q29sb3IoKTusaT1zZXRJbnRlcnZhbCiqKCl7oyhzZXEubGVuZ3RoKXusZj1zZXEuc2hpZnQoKTtnLnNldENvbG9yKGMpO6MoZilmKCk7faRjbGVhckludGVydmFsKGkpO30scGVyaW9kKTt9CqpmYWRlKGNvbCxjYWxsYmFjayl7rG49MDuqZigpe9EDcmFtZy5zZXRDb2xvcihjb2wpO6corGk9bjtpPDI0MDtpljEwKWcuZHJhd0xpbmUoaSwwLDAsaSkuZHJhd0xpbmUoaSwyNDAsMjQwLGkpO2cuZmxpcCgpO26YO6MobjwxMClzZXRUaW1lb3V0KGYsMCk7pGNhbGxiYWNrKCk7fWYoKTt9CqxTQ0VORV9DT1VOVD0xMDsKqmdldFNjZW5lKG4pe6MoboowKauqKCl7Zy5yZXNldCgpLnNldEJnQ29sb3IoMCkuY2xlYXJSZWN0KDAsMCwxNzYsMTc2KTtnLnNldEZvbnQo0QQ2eDE1KTusbj0wO6xsPUJhbmdsZS5nZXRMb2dvKCk7rGltPWcuaW1hZ2VNZXRyaWNzKGwpO6xpPXNldEludGVydmFsKKooKXtuljAuMTtnLnNldENvbG9yKG4sbixuKTtnLmRyYXdJbWFnZShsLCgxNzYtaW0ud2lkdGgpLzIsKDE3Ni1pbS5oZWlnaHQpLzIpO6MobpExKXtjbGVhckludGVydmFsKGkpO3NldFRpbWVvdXQoKCmiZy5kcmF3U3RyaW5nKNEET3Blbiw0NCwxMDQpLDUwMCk7c2V0VGltZW91dCgoKaJnLmRyYXdTdHJpbmco0QhIYWNrYWJsZSw0NCwxMTYpLDEwMDApO3NldFRpbWVvdXQoKCmiZy5kcmF3U3RyaW5nKNELU21hcnQgV2F0Y2gsNDQsMTI4KSwxNTAwKTt9fSw1MCk7fTujKG6KMSmrqigpe6xpbWc9cmVxdWlyZSjRCmhlYXRzaHJpbmspLmRlY29tcHJlc3Mo0nUDptR4n/j/4gH+8H5wl+jOukVVoHZ8dt/n//n37OtgH9sHhwHp4H5xmkGiH72MRje/LL/7iIAEE7sPEgoAC+AlagIlIiMQErPxDwUYxAABwIHCj8N7nOl3uEqa6BEggnFjfM5nCkUil3gEq5KDAAQmC6QmBE4JxSEhIABiQmB8QmSXoQlCYRMdEwIlCAAIlNhYlOiO85nNEyMPEoZwIAAcsYIYmPXoYlMiKaFExX/u9VEqLBBOYrCH+czmtVqJyDEpiaCOYsgSYszmc3qtTEqMR7hzG8AlGmd1OQglOOY6aEgYlCmmZoJMCTBrnD6SaIEoU/zOUuolSjbnBJgqaCEoU5zOXX4RyQYBBzCS4X5zNDqqZCJiERJg5zBEoVJEoM1JgYlQjhMHc4JLEmZMEEp6ZIJgPzS4WTmZMVTILmFYAK+BmglCmd1JgUYJiPNEorABEIOZygDBm5MCiJMQlhMH8ByBXwIlBJgUxJiMd5nOTIzlBTAK+BAANVq4jPAAS/HJgJyCTATAEACC/B4S/IJgIlCYAgAPiS/Kn5yEYANTEyPc5niOQxMB/LlCOapyJJgbpBYAZzROQK/Gl0ATIWfEoZzBc6IlB6SYGgBJBJgpzSlhyH8EAh5MBTIjnCuIlOjjlHTAJzC/LmDTSSYIEoTABOYIlETSKYHXwIABOYM0yYmETSCYHEobnDOYqaBExu8TAwlEc4U5EoiaCmK+NTAolFEwX0TQzBMXwXiEpTBCAAomNEoS+EEo4mIYIImKEoS+EEpDoBEyUbEo3gEo4mJdAImIJY4lJEycdEoPOOBYmPuIlE+HcJYhKKTZ1fhYkB2EAhnNcYMuEhomMr8A3YABEoJyB5gjOAAYmHm9VgELEoJMBEoXAEyXzE45YBJgXwEqx1I+ByDOYJyVJw5yCgEB3cQGgJMWJwQnCu6/CgFBigDB13S/glVAAf1qomCglEoADB1QDBADEPEoNVqEAolEgEKolKErJMDYAJMD0lE0AmaEoNaAgJMCFIYAahV/IgIiDOTgABNYJMEOToiCIoJMCOTzfCN4RMBOTxsDJIRyfIwZMBKQZzfJgRyfOYZMBOUBzCJgNKOT5zDJgLoCADxKBOAIABOT6aCAARyfOYRyjOYRyjOYlKEsBzEEsBzEOUJzDOUIABOUiaDOURzCOUZzCEscKCiYKTusaW09Zy5pbWFnZU1ldHJpY3MoaW1nKTtnLnJlc2V0KCk7Zy5zZXRCZ0NvbG9yKNEHI2ZmMDBmZik7rHk9MTc2LHNwZWVkPTU7qmJhbGxvb24oY2FsbGJhY2spe3mXc3BlZWQ7rHg9KDE3Ni1pbS53aWR0aCkvMjtnLmRyYXdJbWFnZShpbWcseCx5KTtnLmNsZWFyUmVjdCh4LHkrODEseCs3Nyx5KzgxK3NwZWVkKTujKHk+MzApc2V0VGltZW91dChiYWxsb29uLDAsY2FsbGJhY2spO6RjYWxsYmFjaygpO31mYWRlKNEHI2ZmMDBmZiyqKCl7YmFsbG9vbiiqKCl7Zy5zZXRDb2xvcigtMSkuc2V0Rm9udCjRBjZ4MTU6Mikuc2V0Rm9udEFsaWduKDAsMCk7Zy5kcmF3U3RyaW5nKNEIV2VsY29tZS4sODgsMTMwKTt9KTt9KTtzZXRUaW1lb3V0KKooKXusbj0wO6xpPXNldEludGVydmFsKKooKXtuljQ7Zy5zY3JvbGwoMCwtNCk7oyhuPjE1MCljbGVhckludGVydmFsKGkpO30sMjApO30sMzUwMCk7fTujKG6KMimrqigpe2cucmVzZXQoKTtnLnNldEJnQ29sb3Io0QcjZmZmZjAwKS5zZXRDb2xvcigwKS5jbGVhcigpO2cuc2V0Rm9udCjRBTEyeDIwKS5zZXRGb250QWxpZ24oMCwwKTuseD03MCx5PTI1LGg9MjU7YW5pbWF0ZShbKCmiZy5kcmF3U3RyaW5nKNEEWW91cix4LHmWaCksKCmiZy5kcmF3U3RyaW5nKNEJQmFuZ2xlLmpzLHgseZZoKSwoKaJnLmRyYXdTdHJpbmco0QdoYXMgb25lLHgseZZoKSwoKaJnLmRyYXdTdHJpbmco0QZidXR0b24seCx5lmgpLCgpontnLnNldEZvbnQo0QcxMngyMDoyKS5zZXRGb250QWxpZ24oMCwwLDEpLmRyYXdTdHJpbmco0QVIRVJFISwxNTAsODgpO31dLDIwMCk7fTujKG6KMymrqigpe2cucmVzZXQoKTtnLnNldEJnQ29sb3Io0QcjMDBmZmZmKS5zZXRDb2xvcigwKS5jbGVhcigpO2cuc2V0Rm9udEFsaWduKDAsMCkuc2V0Rm9udCjRBjZ4MTU6Mik7Zy5kcmF3U3RyaW5nKNEFUHJlc3MsODgsNDApLnNldEZvbnRBbGlnbigwLC0xKTtnLnNldEZvbnQo0QUxMngyMCk7Zy5kcmF3U3RyaW5nKNEjVG8gd2FrZSB0aGUKc2NyZWVuIHVwLCBvciB0bwpzZWxlY3QsODgsNjApO307oyhuijQpq6ooKXtnLnJlc2V0KCk7Zy5zZXRCZ0NvbG9yKNEHIzAwZmZmZikuc2V0Q29sb3IoMCkuY2xlYXIoKTtnLnNldEZvbnRBbGlnbigwLDApLnNldEZvbnQo0QY2eDE1OjIpO2cuZHJhd1N0cmluZyjRCkxvbmcgUHJlc3MsODgsNDApLnNldEZvbnRBbGlnbigwLC0xKTtnLnNldEZvbnQo0QUxMngyMCk7Zy5kcmF3U3RyaW5nKNEXVG8gZ28gYmFjayB0bwp0aGUgY2xvY2ssODgsNjApO307oyhuijUpq6ooKXtnLnJlc2V0KCk7Zy5zZXRCZ0NvbG9yKNEHI2ZmMDAwMCkuc2V0Q29sb3IoMCkuY2xlYXIoKTtnLnNldEZvbnRBbGlnbigwLDApLnNldEZvbnQo0QUxMngyMCk7Zy5kcmF3U3RyaW5nKNFWSWYgQmFuZ2xlLmpzIGV2ZXIKc3RvcHMsIGhvbGQgdGhlCmJ1dHRvbiBmb3IKdGVuIHNlY29uZHMuCgpCYW5nbGUuanMgd2lsbAp0aGVuIHJlYm9vdC4sODgsNzgpO307oyhuijYpq6ooKXtnLnJlc2V0KCk7Zy5zZXRCZ0NvbG9yKNEHIzAwMDBmZikuc2V0Q29sb3IoLTEpLmNsZWFyKCk7Zy5zZXRGb250KNEFMTJ4MjApLnNldEZvbnRBbGlnbigwLDApO6x4PTg4LHk9LTIwLGg9NjA7YW5pbWF0ZShbKCmie2cuZHJhd1N0cmluZyjRIEJhbmdsZS5qcyBoYXMgYQpmdWxsIHRvdWNoc2NyZWVuLHgseZZoKTt9LDAsMCwoKaJ7Zy5kcmF3U3RyaW5nKNEsRHJhZyB1cCBhbmQgZG93bgp0byBzY3JvbGwgYW5kCnRhcCB0byBzZWxlY3QseCx5lmgpO30sXSwzMDApO307oyhuijcpq6ooKXtnLnJlc2V0KCk7Zy5zZXRCZ0NvbG9yKNEHIzAwZmYwMCkuc2V0Q29sb3IoMCkuY2xlYXIoKTtnLnNldEZvbnQo0QUxMngyMCkuc2V0Rm9udEFsaWduKDAsMCk7rHg9ODgseT0tMzUsaD04MDthbmltYXRlKFsoKaJ7Zy5kcmF3U3RyaW5nKNEpQmFuZ2xlLmpzIGNvbWVzCndpdGggYSBmZXcKYXBwcyBpbnN0YWxsZWQseCx5lmgpO30sMCwwLCgpontnLmRyYXdTdHJpbmco0SRUbyBhZGQgbW9yZSwgdmlzaXQKYmFuZ2xlanMuY29tL2FwcHMseCx5lmgpO30sXSw0MDApO307oyhuijgpq6ooKXtnLnJlc2V0KCk7Zy5zZXRCZ0NvbG9yKNEHI2ZmMDAwMCkuc2V0Q29sb3IoMCkuY2xlYXIoKTtnLnNldEZvbnQo0QUxMngyMCkuc2V0Rm9udEFsaWduKDAsMCk7rHg9ODg7Zy5kcmF3U3RyaW5nKNEgWW91IGNhbiBhbHNvIG1ha2UKeW91ciBvd24gYXBwcyEseCwzMCk7Zy5kcmF3U3RyaW5nKNEWQ2hlY2sgb3V0CmJhbmdsZWpzLmNvbSx4LDEzMCk7rHJ4PTAscnk9MDuqZHJhdygpe3J4ljAuMTtyeZYwLjExO6xyY3g9TWF0aC5jb3MocngpLHJzeD1NYXRoLnNpbihyeCkscmN5PU1hdGguY29zKHJ5KSxyc3k9TWF0aC5zaW4ocnkpO6pwKHgseSx6KXusdDt0PXgqcmN5K3oqcnN5O3o9eipyY3kteCpyc3k7eD10O3Q9eSpyY3greipyc3g7ej16KnJjeC15KnJzeDt5PXQ7epY0O6tbODgrNjAqeC96LDc4KzYwKnkvel07faxhO6xzPTMwO2cuY2xlYXJSZWN0KDg4LXMsNzgtcyw4OCtzLDc4K3MpO2E9cCgtMSwtMSwtMSk7Zy5tb3ZlVG8oYVswXSxhWzFdKTthPXAoMSwtMSwtMSk7Zy5saW5lVG8oYVswXSxhWzFdKTthPXAoMSwxLC0xKTtnLmxpbmVUbyhhWzBdLGFbMV0pO2E9cCgtMSwxLC0xKTtnLmxpbmVUbyhhWzBdLGFbMV0pO2E9cCgtMSwtMSwtMSk7Zy5saW5lVG8oYVswXSxhWzFdKTthPXAoLTEsLTEsMSk7Zy5tb3ZlVG8oYVswXSxhWzFdKTthPXAoMSwtMSwxKTtnLmxpbmVUbyhhWzBdLGFbMV0pO2E9cCgxLDEsMSk7Zy5saW5lVG8oYVswXSxhWzFdKTthPXAoLTEsMSwxKTtnLmxpbmVUbyhhWzBdLGFbMV0pO2E9cCgtMSwtMSwxKTtnLmxpbmVUbyhhWzBdLGFbMV0pO2E9cCgtMSwtMSwtMSk7Zy5tb3ZlVG8oYVswXSxhWzFdKTthPXAoLTEsLTEsMSk7Zy5saW5lVG8oYVswXSxhWzFdKTthPXAoMSwtMSwtMSk7Zy5tb3ZlVG8oYVswXSxhWzFdKTthPXAoMSwtMSwxKTtnLmxpbmVUbyhhWzBdLGFbMV0pO2E9cCgxLDEsLTEpO2cubW92ZVRvKGFbMF0sYVsxXSk7YT1wKDEsMSwxKTtnLmxpbmVUbyhhWzBdLGFbMV0pO2E9cCgtMSwxLC0xKTtnLm1vdmVUbyhhWzBdLGFbMV0pO2E9cCgtMSwxLDEpO2cubGluZVRvKGFbMF0sYVsxXSk7fXNldEludGVydmFsKGRyYXcsNTApO307oyhuijkpq6ooKXtnLnJlc2V0KCk7Zy5zZXRCZ0NvbG9yKNEHI2ZmZmZmZik7Zy5jbGVhcigpO2cuc2V0Rm9udEFsaWduKDAsMCk7Zy5zZXRGb250KNEFMTJ4MjApO6x4PTg4LHk9MTAsaD0yMTthbmltYXRlKFsoKaJnLmRyYXdTdHJpbmco0QpUaGF0J3MgaXQhLHgseZZoKSwoKaJ7Zy5kcmF3U3RyaW5nKNEFUHJlc3MseCx5lmgqMik7Zy5kcmF3U3RyaW5nKNEKdGhlIGJ1dHRvbix4LHmWaCk7Zy5kcmF3U3RyaW5nKNEIdG8gc3RhcnQseCx5lmgpO2cuZHJhd1N0cmluZyjRCUJhbmdsZS5qcyx4LHmWaCk7fV0sNDAwKTt9faxzY2VuZU51bWJlcj0wO6ptb3ZlKGRpcil7oyhkaXI+MJ5zY2VuZU51bWJlcisxilNDRU5FX0NPVU5UKas7c2NlbmVOdW1iZXI9KHNjZW5lTnVtYmVyK2RpciklU0NFTkVfQ09VTlQ7oyhzY2VuZU51bWJlcjwwKXNjZW5lTnVtYmVyPTA7Y2xlYXJJbnRlcnZhbCgpO2dldFNjZW5lKHNjZW5lTnVtYmVyKSgpO6Moc2NlbmVOdW1iZXI+MSl7rGw9U0NFTkVfQ09VTlQ7pyisaT0wO2k8bC0yO2mYKXuseD04OCsoaS0obC0yKS8yKSoxMjujKGk8c2NlbmVOdW1iZXItMSl7Zy5zZXRDb2xvcigtMSkuZmlsbENpcmNsZSh4LDE2Niw0KTt9pHtnLnNldENvbG9yKDApLmZpbGxDaXJjbGUoeCwxNjYsNCk7Zy5zZXRDb2xvcigtMSkuZHJhd0NpcmNsZSh4LDE2Niw0KTt9fX2jKHNjZW5lTnVtYmVyPFNDRU5FX0NPVU5ULTEpc2V0VGltZW91dCiqKCl7bW92ZSgxKTt9LDUwMDApO31CYW5nbGUub24o0QVzd2lwZSxkaXKibW92ZShkaXIpKTtzZXRXYXRjaCgoKaJ7oyhzY2VuZU51bWJlcopTQ0VORV9DT1VOVC0xKWxvYWQoKTukbW92ZSgxKTt9LEJUTjEse3JlcGVhdDq0fSk7QmFuZ2xlLnNldExDRFRpbWVvdXQoMCk7QmFuZ2xlLnNldExvY2tlZCgwKTtCYW5nbGUuc2V0TENEUG93ZXIoMSk7bW92ZSgwKTv////qAQAAd2VsY29tZS5zZXR0aW5ncy5qcw==");
  base64DecodeToExistingUint8Array(bufferView, 39880, "KKooYmFjayl7rXNldHRpbmdzPXJlcXVpcmUo0QdTdG9yYWdlKS5yZWFkSlNPTijRDHdlbGNvbWUuanNvbiwxKaByZXF1aXJlKNEHU3RvcmFnZSkucmVhZEpTT04o0QxzZXR0aW5nLmpzb24sMSmge31FLnNob3dNZW51KHvRADp70QV0aXRsZTrRC1dlbGNvbWUgQXBwfSzRDVJ1biBuZXh0IGJvb3Q6e3ZhbHVlOiFzZXR0aW5ncy53ZWxjb21lZCxmb3JtYXQ6dqJ2P9EDWWVzOtECTm8sb25jaGFuZ2U6dqJyZXF1aXJlKNEHU3RvcmFnZSkud3JpdGUo0Qx3ZWxjb21lLmpzb24se3dlbGNvbWVkOiF2fSksfSzRB1J1biBOb3c6KCmibG9hZCjRDndlbGNvbWUuYXBwLmpzKSzRE1R1cm4gb2ZmICYgcnVuIG5leHQ6KCmie3JlcXVpcmUo0QdTdG9yYWdlKS53cml0ZSjRDHdlbGNvbWUuanNvbix7d2VsY29tZWQ6tX0pO0JhbmdsZS5zZXRMb2NrZWQotCk7oyhCYW5nbGUuc29mdE9mZigpKUJhbmdsZS5zb2Z0T2ZmKCk7pEJhbmdsZS5vZmYoKTt9LNEGPCBCYWNrOmJhY2ssfSl9Kf//BAkAAHdlbGNvbWUuaW1n");
  base64DecodeToExistingUint8Array(bufferView, 40404, "MDCI/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/szMzMzMzP7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7MzMzMzMzMzMzM/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+zMzMzc7W1tbWzs3MzMaWlrq6uv7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7MzMzO1tfWzs3MzMzMzMzAlpa6urq6uv7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7MzNXX1s3MzMzMzMzMzMzMupa6urq6urr+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/szMztfWzczMzMzMzMzMzMzMxpaWurq6urq6/v7+/v7+/v7+/v7+/v7+/v7+YVtbf8zN1tbNzMzMzMzMzMzMzMzMzLqWurq6urq6uv7+/v7+/v7+/v7+/v7+/mFhYVtbqczO187MzMzMzMzMzMzMzMzMzMCWurq6urq6uv7+/v7+/v7+/v7+/v7+YWGGq6yHzMzV1szMzMzMzMzMzMzMzMzMzMaWlrq6urq6uv7+/v7+/v7+/v7+/v5hYYfWq1tbzMzWzszMzMzMzMzMzMzMzMzMzMyWlrq6urq6urr+/v7+/v7+/v7+/mFhh9erYVtbzMzWzczMzMzMzMzMzMzMzMzMzMyWlrq6urq6urr+/v7+/v7+/v7+/mGG16xhYVtbzMzVzMzMzMzMzMzMzMzMzMzMzMaWlrq6urq6urr+/v7+/v7+/v7+YWGs14ZhYVtbqMzOzMzMzMzMzMzMzMzMzMzMzMCWurq6urq6urr+/v7+/v7+/v7+YYXWrGFhYVtbf8zMzczMzMzMzMzMzMzMzMzMzMCWurq6urq6urr+/v7+/v7+/v7+YYbXh2FhYVtbW8zMzMzMzMzMzMzMzMzMzMzMzJaWurq6urq6uv7+/v7+/v7+/v7+YYbXhmFhYVtbW6jMzMzMzMzMzMzMzMzMzMzMxpaWurq6urq6uv7+/v7+/v7+/v7+YYbXhmFhYWFbW3/MzMzMzMzMzMzMzMzMzMzMupa6urq6urq6uv7+/v7+/v7+/v7+YWGyhmFhYWFbW1vMzMzMzMzMzMzMzMzMzMzGlpa6urq6urq6/v7+/v7+/v7+/v7+/mGGq2FhYWFhW1t/zMzMzMzMzMzMzMzMzMy6lrq6urq6urr+/v7+/v7+/v7+/v7+/mFhq2FhYWFhW1tbqMzMzMzMzMzMzMzMzMCWlrq6urq6uv7+/v7+/v7+/v7+/v7+/v5hhoZhYWFhYVtbW8zMzMzMzMzMzMzMxpaWurq6urq6/v7+/v7+/v7+/v7+/v7+/v7+YWFhYWFhYWFbW1vMzMzMzMzMzMzGlpa6urq6urr+/v7+/v7+/v7+/v7+/v7+/v7+YWFhYWFhYWFbW1tbqMzMzMzMzMaWlpa6urq6/v7+/v7+/v7+/v7+/v7+/v7+/v7+/mFhYWFhYWFhW1tbW3/MzMzM/v66urq6uv7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+YWFhYWFhYVtbW/7GxsbG/paWlv7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/lthYWFhYWFb/v7GxsbG/paWlv7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+YWFhW1tbW/7+pKT+/p6Xlv7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/ltbW/7+iIj+/oiI/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/ltbXP7+iIj+/oiI/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v6BiP7+iIj+iIj+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v6IiP7+iIj+iIj+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+iIj+iIj+iIj+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+iIj+iIiIiP7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/oiIiIiIiP7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/oiIiIiIiP7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/oiIiIiI/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v6IiIiI/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v6IiIiI/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v6IiIiI/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+iIj+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/v7+/uEAAAB3ZWxjb21lLmluZm8=");
  base64DecodeToExistingUint8Array(bufferView, 42744, "eyJpZCI6IndlbGNvbWUiLCJuYW1lIjoiV2VsY29tZSIsInNyYyI6IndlbGNvbWUuYXBwLmpzIiwiaWNvbiI6IndlbGNvbWUuaW1nIiwidmVyc2lvbiI6IjAuMTQiLCJ0YWdzIjoic3RhcnQsd2VsY29tZSIsImZpbGVzIjoid2VsY29tZS5pbmZvLHdlbGNvbWUuYm9vdC5qcyx3ZWxjb21lLmFwcC5qcyx3ZWxjb21lLnNldHRpbmdzLmpzLHdlbGNvbWUuaW1nIiwiZGF0YSI6IndlbGNvbWUuanNvbiJ9////8QgAAG5vdGlmeQ==");
  base64DecodeToExistingUint8Array(bufferView, 43004, "rXBvcz0wLHNpemU9MDsKrWlkPbY7Cq1oaWRlQ2FsbGJhY2s9tzsKrW92ZXJsYXlJbWFnZT23OwqqZml0V29yZHModGV4dCxyb3dzLHdpZHRoKXuud29yZHM9dGV4dC50cmltKCkuc3Vic3RyKDAscm93cyp3aWR0aCkuc3BsaXQoL1xzKy8pO61yb3c9MSxsZW49MCxsaW1pdD13aWR0aDutcmVzdWx0PdEAO6corXdvcmTGd29yZHMpe6MoKGxlbj9sZW4rMTowKSt3b3JkLmxlbmd0aD5saW1pdCl7oyhyb3eRcm93cyl7cmVzdWx0ltEDLi4uO6g7fXJlc3VsdJbRAQo7bGVuPTA7cm93mDujKHJvd4tyb3dzKWxpbWl0lzM7fXJlc3VsdJYobGVuP9EBIDrRACkrd29yZDtsZW6WKGxlbj8xOjApK3dvcmQubGVuZ3RoO32rcmVzdWx0O30KZXhwb3J0cy5zaG93Paoob3B0aW9ucyl7b3B0aW9ucz1vcHRpb25zoHt9O6Mob3B0aW9ucy5vbou3KW9wdGlvbnMub249tDtpZD0o0QJpZLlvcHRpb25zKT9vcHRpb25zLmlkOrY7rXc9Zy5nZXRXaWR0aCgpO610ZXh0PVtdO3NpemU9b3B0aW9ucy5zaXplO6Mob3B0aW9ucy5ib2R5KXuuYmg9KHNpemWgODApLTIwLG1heFJvd3M9TWF0aC5mbG9vcigoYmgtNCkvOCksbWF4Q2hhcnM9TWF0aC5mbG9vcih3LzYpLTI7dGV4dD1maXRXb3JkcyhvcHRpb25zLmJvZHksbWF4Um93cyxtYXhDaGFycyk7oyghc2l6ZSlzaXplPTI4Kyh0ZXh0Lm1hdGNoKC9cbi9nKS5sZW5ndGgrMSkqODt9pHNpemU9MjA7oyhzaXplPjgwKXNpemU9ODA7rWdnPUdyYXBoaWNzLmNyZWF0ZUFycmF5QnVmZmVyKHcsc2l6ZSwxNik7Z2cuc2V0QmdDb2xvcihnLnRoZW1lLmJnKTtvdmVybGF5SW1hZ2U9e3dpZHRoOmdnLmdldFdpZHRoKCksaGVpZ2h0OmdnLmdldEhlaWdodCgpLGJwcDoxNixidWZmZXI6Z2cuYnVmZmVyfTuteD0wLHk9MCxoPXNpemUsYj15K2gtMSxyPXgrdy0xO6Mob3B0aW9ucy5iZ0NvbG9yjbcpZ2cuc2V0QmdDb2xvcihvcHRpb25zLmJnQ29sb3IpO2dnLmNsZWFyUmVjdCh4LHkscixiKTujKG9wdGlvbnMudGl0bGWgb3B0aW9ucy5zcmMpe2dnLnNldENvbG9yKNEMdGl0bGVCZ0NvbG9yuW9wdGlvbnM/b3B0aW9ucy50aXRsZUJnQ29sb3I6Zy50aGVtZS5kYXJrPzB4MToweDM5QzcpLmZpbGxSZWN0KHgseSxyLHkrMjApO650aXRsZT1vcHRpb25zLnRpdGxloG9wdGlvbnMuc3JjO2dnLnNldENvbG9yKGcudGhlbWUuZmcpLnNldEZvbnRBbGlnbigtMSwtMSwwKS5zZXRGb250KNEDNng4LDIpO2dnLmRyYXdTdHJpbmcodGl0bGUudHJpbSgpLnN1YnN0cmluZygwLDEzKSx4KzI1LHkrMyk7oyhvcHRpb25zLnRpdGxlnm9wdGlvbnMuc3JjKXtnZy5zZXRGb250KNEDNng4LDEpLnNldEZvbnRBbGlnbigxLDEsMCk7Z2cuZHJhd1N0cmluZyhvcHRpb25zLnNyYy5zdWJzdHJpbmcoMCwxMCksZ2cuZ2V0V2lkdGgoKS0yMyx5KzE4KTt9fXmWMjA7aJcyMDujKG9wdGlvbnMuaWNvbil7rWk9b3B0aW9ucy5pY29uLGl3O2dnLmRyYXdJbWFnZShpLHgseSs0KTujKNEGc3RyaW5nir9pKWl3PWkuY2hhckNvZGVBdCgwKTukaXc9aVswXTt4lml3O3eXaXc7faMob3B0aW9ucy5ib2R5KXtnZy5zZXRDb2xvcihnLnRoZW1lLmZnKS5zZXRGb250KNEDNng4LDEpLnNldEZvbnRBbGlnbigtMSwtMSwwKS5kcmF3U3RyaW5nKHRleHQseCs2LHkrNCk7faMob3B0aW9ucy5yZW5kZXIpe29wdGlvbnMucmVuZGVyKHt4OngseTp5LHc6dyxoOmh9KTt9oyhvcHRpb25zLm9uniEocmVxdWlyZSjRB1N0b3JhZ2UpLnJlYWRKU09OKNEMc2V0dGluZy5qc29uLDEpoHt9KS5xdWlldCl7QmFuZ2xlLnNldExDRFBvd2VyKDEpO32qYW5pbSgpe3Bvc5cyO6MocG9zPC1zaXplKXtwb3M9LXNpemU7fUJhbmdsZS5zZXRMQ0RPdmVybGF5KG92ZXJsYXlJbWFnZSwwLC0ocG9zK3NpemUpKTujKHBvcz4tc2l6ZSlzZXRUaW1lb3V0KGFuaW0sMTUpO31hbmltKCk7QmFuZ2xlLm9uKNEFdG91Y2gsZXhwb3J0cy5oaWRlKTujKG9wdGlvbnMub25IaWRlKWhpZGVDYWxsYmFjaz1vcHRpb25zLm9uSGlkZTt9OwpleHBvcnRzLmhpZGU9qihvcHRpb25zKXtvcHRpb25zPW9wdGlvbnOge307oyjRAmlkuW9wdGlvbnOeb3B0aW9ucy5pZI1pZCmrO6MoaGlkZUNhbGxiYWNrKWhpZGVDYWxsYmFjayh7aWQ6aWR9KTtoaWRlQ2FsbGJhY2s9tztpZD22O0JhbmdsZS5yZW1vdmVMaXN0ZW5lcijRBXRvdWNoLGV4cG9ydHMuaGlkZSk7qmFuaW0oKXtwb3OWNDujKHBvcz4wKXtwb3M9MDtvdmVybGF5SW1hZ2U9tztCYW5nbGUuc2V0TENET3ZlcmxheSgpO32kQmFuZ2xlLnNldExDRE92ZXJsYXkob3ZlcmxheUltYWdlLDAsLShwb3Mrc2l6ZSkpO6MocG9zPDApc2V0VGltZW91dChhbmltLDEwKTt9YW5pbSgpO307////dAAAAG5vdGlmeS5pbmZv");
  base64DecodeToExistingUint8Array(bufferView, 45328, "eyJpZCI6Im5vdGlmeSIsIm5hbWUiOiJOb3RpZmljYXRpb25zIiwidHlwZSI6Im5vdGlmeSIsInZlcnNpb24iOiIwLjEzIiwidGFncyI6IndpZGdldCIsImZpbGVzIjoibm90aWZ5LmluZm8sbm90aWZ5In3tEQAAaGVhbHRoLmFwcC5qcw==");
  base64DecodeToExistingUint8Array(bufferView, 45476, "rXNldHRpbmdzOwqubXlwcm9maWxlPXJlcXVpcmUo0QdTdG9yYWdlKS5yZWFkSlNPTijRDm15cHJvZmlsZS5qc29uLDEpoHt9OwqqbWVudU1haW4oKXtFLnNob3dNZW51KHvRADp7dGl0bGU60Q9IZWFsdGggVHJhY2tpbmd9LNEGPCBCYWNrOigpomxvYWQoKSzRDVN0ZXAgQ291bnRpbmc6KCmibWVudVN0ZXBDb3VudCgpLNEITW92ZW1lbnQ6KCmibWVudU1vdmVtZW50KCks0QpIZWFydCBSYXRlOigpom1lbnVIUk0oKSzRCFNldHRpbmdzOigpomV2YWwocmVxdWlyZSjRB1N0b3JhZ2UpLnJlYWQo0RJoZWFsdGguc2V0dGluZ3MuanMpKSgoKaJ7bG9hZFNldHRpbmdzKCk7bWVudU1haW4oKTt9KX0pO30Kqm1lbnVTdGVwQ291bnQoKXuubWVudT170QA6e3RpdGxlOtEFU3RlcHN9LNEGPCBCYWNrOigpom1lbnVNYWluKCks0QhwZXIgaG91cjooKaJzdGVwc1BlckhvdXIobWVudVN0ZXBDb3VudCks0QdwZXIgZGF5OigponN0ZXBzUGVyRGF5KG1lbnVTdGVwQ291bnQpfTujKG15cHJvZmlsZS5zdHJpZGVMZW5ndGgpe21lbnVb0QhkaXN0YW5jZV09KCmibWVudURpc3RhbmNlKCk7fUUuc2hvd01lbnUobWVudSk7fQqqbWVudURpc3RhbmNlKCl7rmRpc3RNdWx0PTEqcmVxdWlyZSjRBmxvY2FsZSkuZGlzdGFuY2UobXlwcm9maWxlLnN0cmlkZUxlbmd0aCwyKTtFLnNob3dNZW51KHvRADp7dGl0bGU60QhEaXN0YW5jZX0s0QY8IEJhY2s6KCmibWVudVN0ZXBDb3VudCgpLNEIcGVyIGhvdXI6KCmic3RlcHNQZXJIb3VyKG1lbnVEaXN0YW5jZSxkaXN0TXVsdCks0QdwZXIgZGF5OigponN0ZXBzUGVyRGF5KG1lbnVEaXN0YW5jZSxkaXN0TXVsdCl9KTt9CqptZW51TW92ZW1lbnQoKXtFLnNob3dNZW51KHvRADp7dGl0bGU60QhNb3ZlbWVudH0s0QY8IEJhY2s6KCmibWVudU1haW4oKSzRCHBlciBob3VyOigpom1vdmVtZW50UGVySG91cigpLNEHcGVyIGRheTooKaJtb3ZlbWVudFBlckRheSgpLH0pO30Kqm1lbnVIUk0oKXtFLnNob3dNZW51KHvRADp7dGl0bGU60QpIZWFydCBSYXRlfSzRBjwgQmFjazooKaJtZW51TWFpbigpLNEIcGVyIGhvdXI6KCmiaHJtUGVySG91cigpLNEHcGVyIGRheTooKaJocm1QZXJEYXkoKSx9KTt9CqpzdGVwc1BlckhvdXIoYmFjayxtdWx0KXtFLnNob3dNZXNzYWdlKNEKTG9hZGluZy4uLik7Y3VycmVudF9zZWxlY3Rpb2490QxzdGVwc1BlckhvdXI7rGRhdGE9uFVpbnQxNkFycmF5KDI0KTtyZXF1aXJlKNEGaGVhbHRoKS5yZWFkRGF5KLhEYXRlKCksaKJkYXRhW2guaHJdlmguc3RlcHMpO6MobXVsdI23KXtkYXRhLmZvckVhY2goKGQsaSmiZGF0YVtpXT1kKm11bHQrMC41KTt9c2V0QnV0dG9uKGJhY2ssbXVsdCk7YmFyQ2hhcnQo0QRIT1VSLGRhdGEsbXVsdCk7fQqqc3RlcHNQZXJEYXkoYmFjayxtdWx0KXtFLnNob3dNZXNzYWdlKNEKTG9hZGluZy4uLik7Y3VycmVudF9zZWxlY3Rpb2490QtzdGVwc1BlckRheTusZGF0YT24VWludDE2QXJyYXkoMzIpO3JlcXVpcmUo0QZoZWFsdGgpLnJlYWREYWlseVN1bW1hcmllcyi4RGF0ZSgpLGiiZGF0YVtoLmRheV2WaC5zdGVwcyk7oyhkYXRhWyi4RGF0ZSgpKS5nZXREYXRlKCldizApe2RhdGFbKLhEYXRlKCkpLmdldERhdGUoKV09QmFuZ2xlLmdldEhlYWx0aFN0YXR1cyjRA2RheSkuc3RlcHM7faMobXVsdI23KXtkYXRhLmZvckVhY2goKGQsaSmiZGF0YVtpXT1kKm11bHQrMC41KTt9c2V0QnV0dG9uKGJhY2ssbXVsdCk7YmFyQ2hhcnQo0QNEQVksZGF0YSxtdWx0KTtkcmF3SG9yaXpvbnRhbExpbmUoc2V0dGluZ3Muc3RlcEdvYWwqKG11bHSgMSkpO30KqmhybVBlckhvdXIoKXtFLnNob3dNZXNzYWdlKNEKTG9hZGluZy4uLik7Y3VycmVudF9zZWxlY3Rpb2490Qpocm1QZXJIb3VyO6xkYXRhPbhVaW50MTZBcnJheSgyNCk7rGNudD24VWludDhBcnJheSgyNCk7cmVxdWlyZSjRBmhlYWx0aCkucmVhZERheSi4RGF0ZSgpLGiie2RhdGFbaC5ocl2WaC5icG07oyhoLmJwbSljbnRbaC5ocl2YO30pO2RhdGEuZm9yRWFjaCgoZCxpKaJkYXRhW2ldPWQvY250W2ldKzAuNSk7c2V0QnV0dG9uKG1lbnVIUk0pO2JhckNoYXJ0KNEESE9VUixkYXRhKTt9Cqpocm1QZXJEYXkoKXtFLnNob3dNZXNzYWdlKNEKTG9hZGluZy4uLik7Y3VycmVudF9zZWxlY3Rpb2490Qlocm1QZXJEYXk7rGRhdGE9uFVpbnQxNkFycmF5KDMyKTusY250PbhVaW50OEFycmF5KDMyKTtyZXF1aXJlKNEGaGVhbHRoKS5yZWFkRGFpbHlTdW1tYXJpZXMouERhdGUoKSxoontkYXRhW2guZGF5XZZoLmJwbTujKGguYnBtKWNudFtoLmRheV2YO30pO2RhdGEuZm9yRWFjaCgoZCxpKaJkYXRhW2ldPWQvY250W2ldKzAuNSk7c2V0QnV0dG9uKG1lbnVIUk0pO2JhckNoYXJ0KNEDREFZLGRhdGEpO30Kqm1vdmVtZW50UGVySG91cigpe0Uuc2hvd01lc3NhZ2Uo0QpMb2FkaW5nLi4uKTtjdXJyZW50X3NlbGVjdGlvbj3RD21vdmVtZW50UGVySG91cjusZGF0YT24VWludDE2QXJyYXkoMjQpO6xjbnQ9uFVpbnQ4QXJyYXkoMjQpO3JlcXVpcmUo0QZoZWFsdGgpLnJlYWREYXkouERhdGUoKSxoontkYXRhW2guaHJdlmgubW92ZW1lbnQ7Y250W2guaHJdmDt9KTtkYXRhLmZvckVhY2goKGQsaSmiZGF0YVtpXT1kL2NudFtpXSswLjUpO3NldEJ1dHRvbihtZW51TW92ZW1lbnQpO2JhckNoYXJ0KNEESE9VUixkYXRhKTt9Cqptb3ZlbWVudFBlckRheSgpe0Uuc2hvd01lc3NhZ2Uo0QpMb2FkaW5nLi4uKTtjdXJyZW50X3NlbGVjdGlvbj3RDm1vdmVtZW50UGVyRGF5O6xkYXRhPbhVaW50MTZBcnJheSgzMik7rGNudD24VWludDhBcnJheSgzMik7cmVxdWlyZSjRBmhlYWx0aCkucmVhZERhaWx5U3VtbWFyaWVzKLhEYXRlKCksaKJ7ZGF0YVtoLmRheV2WaC5tb3ZlbWVudDtjbnRbaC5kYXldmDt9KTtkYXRhLmZvckVhY2goKGQsaSmiZGF0YVtpXT1kL2NudFtpXSswLjUpO3NldEJ1dHRvbihtZW51TW92ZW1lbnQpO2JhckNoYXJ0KNEDREFZLGRhdGEpO30Krnc9Zy5nZXRXaWR0aCgpOwquaD1nLmdldEhlaWdodCgpOwquYmFyX2JvdD0xNDA7CqxkYXRhX2xlbjsKrGNoYXJ0X2luZGV4OwqsY2hhcnRfbWF4X2RhdHVtOwqsY2hhcnRfbGFiZWw7CqxjaGFydF9kYXRhOwqsY3VycmVudF9zZWxlY3Rpb247CqptYXgoYXJyKXusbT0tSW5maW5pdHk7pyisaT0wO2k8YXJyLmxlbmd0aDtpmCmjKGFycltpXT5tKW09YXJyW2ldO6ttO30KqmdldF9kYXRhX2xlbmd0aChhcnIpe6xubGVuPWFyci5sZW5ndGg7pyisaT1hcnIubGVuZ3RoLTE7aT4wnmFycltpXYowO2mZKW5sZW6ZO6tubGVuO30KqmJhckNoYXJ0KGxhYmVsLGR0KXtkYXRhX2xlbj1nZXRfZGF0YV9sZW5ndGgoZHQpO2NoYXJ0X2luZGV4PU1hdGgubWF4KGRhdGFfbGVuLTUsLTUpO2NoYXJ0X21heF9kYXR1bT1tYXgoZHQpO2NoYXJ0X2xhYmVsPWxhYmVsO2NoYXJ0X2RhdGE9ZHQ7ZHJhd0JhckNoYXJ0KCk7c3dpcGVfZW5hYmxlZD20O30KqmRyYXdCYXJDaGFydCgpe65iYXJfd2lkdGg9KHctMikvOTusYmFyX3RvcDusYmFyO2cucmVzZXQoKS5jbGVhclJlY3QoMCwyNCx3LGgpO6coYmFyPTE7YmFyPDEwO2Jhcpgpe6MoYmFyijUpe2cuc2V0Rm9udCjRAzZ4OCwyKS5zZXRGb250QWxpZ24oMCwtMSkuc2V0Q29sb3IoZy50aGVtZS5mZyk7Zy5kcmF3U3RyaW5nKGNoYXJ0X2xhYmVsK9EBICsoY2hhcnRfaW5kZXgrYmFyLTEpK9EDICAgK2NoYXJ0X2RhdGFbY2hhcnRfaW5kZXgrYmFyLTFdLGcuZ2V0V2lkdGgoKS8yLDE1MCk7Zy5zZXRDb2xvcijRBCMwMGYpO32ke2cuc2V0Q29sb3Io0QQjMGZmKTt9oygoY2hhcnRfaW5kZXgrYmFyLTEpkTCeKGNoYXJ0X2luZGV4K2Jhci0xKTxkYXRhX2xlbp5jaGFydF9tYXhfZGF0dW0+MCliYXJfdG9wPWJhcl9ib3QtMTAwKihjaGFydF9kYXRhW2NoYXJ0X2luZGV4K2Jhci0xXSkvY2hhcnRfbWF4X2RhdHVtO6RiYXJfdG9wPWJhcl9ib3Q7Zy5maWxsUmVjdCgxKyhiYXItMSkqYmFyX3dpZHRoLGJhcl9ib3QsMStiYXIqYmFyX3dpZHRoLGJhcl90b3ApO2cuc2V0Q29sb3IoZy50aGVtZS5mZykuZHJhd1JlY3QoMSsoYmFyLTEpKmJhcl93aWR0aCxiYXJfYm90LDErYmFyKmJhcl93aWR0aCxiYXJfdG9wKTt9fQqqZHJhd0hvcml6b250YWxMaW5lKHZhbHVlKXuudG9wPWJhcl9ib3QtMTAwKnZhbHVlL2NoYXJ0X21heF9kYXR1bTtnLnNldENvbG9yKGcudGhlbWUuZmcpLmRyYXdMaW5lKDAsdG9wLGcuZ2V0V2lkdGgoKSx0b3ApO30KqnNldEJ1dHRvbihmbixtdWx0KXtCYW5nbGUuc2V0VUkoe21vZGU60QZjdXN0b20sYmFjazpmbixzd2lwZToobHIsdWQponujKGxyijEpe2NoYXJ0X2luZGV4PU1hdGgubWF4KChjaGFydF9sYWJlbIrRA0RBWSk/LTM6LTQsY2hhcnRfaW5kZXgtMSk7faSjKGxyPDApe2NoYXJ0X2luZGV4PU1hdGgubWluKGRhdGFfbGVuLTUsY2hhcnRfaW5kZXgrMSk7faR7q2ZuKCk7fWRyYXdCYXJDaGFydCgpO6MoY3VycmVudF9zZWxlY3Rpb26K0QtzdGVwc1BlckRheSl7ZHJhd0hvcml6b250YWxMaW5lKHNldHRpbmdzLnN0ZXBHb2FsKihtdWx0oDEpKTt9fX0pO30KqmxvYWRTZXR0aW5ncygpe3NldHRpbmdzPXJlcXVpcmUo0QdTdG9yYWdlKS5yZWFkSlNPTijRC2hlYWx0aC5qc29uLDEpoHt9O30KQmFuZ2xlLmxvYWRXaWRnZXRzKCk7CkJhbmdsZS5kcmF3V2lkZ2V0cygpOwpsb2FkU2V0dGluZ3MoKTsKbWVudU1haW4oKTv///9MAgAAaGVhbHRoLmltZw==");
  base64DecodeToExistingUint8Array(bufferView, 50100, "MDDCAP//4Pn//zv/");
  base64DecodeToExistingUint8Array(bufferView, 50198, "AVVQAAAFVUAAAAAAFVVVAABVVVQAAAAAVVVVQAFVVVoAAAABVVVVUAVVVWqAAAAFVVVVVBVVVeqgAAAVVVVVVVVVV6q0AAAVVVVVVVVVXqrUAABVVVVVVVVVeqtVAABVVVVVVVVV6q1VAABVVXrVVVVXqrVVAABVVWq1VVVeqtVVAABVVWqtVVV6q1VVAABVVXqrVVXqrVVVAABVVV6q1VeqtVVVAAAVVVeqtV6q1VVUAAAVVVXqrXqrVVVUAAAFVVV6q+qtVVVQAAABVVVeqqq1VVVAAAAAVVVXqqrVVVUAAAAAFVVV6qtVVVQAAAAABVVVeq1VVVAAAAAAAVVVXrVVVUAAAAAAAFVVV9VVVQAAAAAAABVVVVVVVAAAAAAAAAVVVVVVUAAAAAAAAAFVVVVVQAAAAAAAAABVVVVVAAAAAAAAAAAVVVVUAAAAAAAAAAAFVVVQAAAAAAAAAAABVVVA");
  base64DecodeToExistingUint8Array(bufferView, 50561, "VVU=");
  base64DecodeToExistingUint8Array(bufferView, 50573, "FVQ=");
  base64DecodeToExistingUint8Array(bufferView, 50585, "BVA=");
  base64DecodeToExistingUint8Array(bufferView, 50597, "AUA=");
  base64DecodeToExistingUint8Array(bufferView, 50688, "YQgAAGhlYWx0aC5ib290Lmpz");
  base64DecodeToExistingUint8Array(bufferView, 50720, "ZnVuY3Rpb24gbSgpe3ZhciBhPXJlcXVpcmUoIlN0b3JhZ2UiKS5yZWFkSlNPTigiaGVhbHRoLmpzb24iLDEpfHx7fSxkPUJhbmdsZS5nZXRIZWFsdGhTdGF0dXMoImRheSIpLnN0ZXBzO2Euc3RlcEdvYWxOb3RpZmljYXRpb24mJjA8YS5zdGVwR29hbCYmZD49YS5zdGVwR29hbCYmKGQ9KG5ldyBEYXRlKERhdGUubm93KCkpKS50b0lTT1N0cmluZygpLnNwbGl0KCJUIilbMF0sIWEuc3RlcEdvYWxOb3RpZmljYXRpb25EYXRlfHxhLnN0ZXBHb2FsTm90aWZpY2F0aW9uRGF0ZTxkKSYmKEJhbmdsZS5idXp6KDIwMCwuNSkscmVxdWlyZSgibm90aWZ5Iikuc2hvdyh7dGl0bGU6YS5zdGVwR29hbCsiIHN0ZXBzIixib2R5OiJZb3UgcmVhY2hlZCB5b3VyIHN0ZXAgZ29hbCEiLGljb246YXRvYigiREF5QkFCbUQ2QmFCTUFzQThCQ0JDQkNCQ0E4QUFBPT0iKX0pLGEuc3RlcEdvYWxOb3RpZmljYXRpb25EYXRlPWQscmVxdWlyZSgiU3RvcmFnZSIpLndyaXRlSlNPTigiaGVhbHRoLmpzb24iLAphKSl9KGZ1bmN0aW9uKCl7dmFyIGE9MHwocmVxdWlyZSgiU3RvcmFnZSIpLnJlYWRKU09OKCJoZWFsdGguanNvbiIsMSl8fHt9KS5ocm07aWYoMT09YXx8Mj09YSl7ZnVuY3Rpb24gZCgpe0JhbmdsZS5zZXRIUk1Qb3dlcigxLCJoZWFsdGgiKTtzZXRUaW1lb3V0KCgpPT5CYW5nbGUuc2V0SFJNUG93ZXIoMCwiaGVhbHRoIiksNkU0KmEpO2lmKDE9PWEpe2Z1bmN0aW9uIGIoKXtCYW5nbGUuc2V0SFJNUG93ZXIoMSwiaGVhbHRoIik7c2V0VGltZW91dCgoKT0+e0JhbmdsZS5zZXRIUk1Qb3dlcigwLCJoZWFsdGgiKX0sNkU0KX1zZXRUaW1lb3V0KGIsMkU1KTtzZXRUaW1lb3V0KGIsNEU1KX19QmFuZ2xlLm9uKCJoZWFsdGgiLGQpO0JhbmdsZS5vbigiSFJNIixiPT57OTA8Yi5jb25maWRlbmNlJiYxPk1hdGguYWJzKEJhbmdsZS5nZXRIZWFsdGhTdGF0dXMoKS5icG0tYi5icG0pJiZCYW5nbGUuc2V0SFJNUG93ZXIoMCwiaGVhbHRoIil9KTs5MDxCYW5nbGUuZ2V0SGVhbHRoU3RhdHVzKCkuYnBtQ29uZmlkZW5jZXx8CmQoKX1lbHNlIEJhbmdsZS5zZXRIUk1Qb3dlcighIWEsImhlYWx0aCIpfSkoKTtCYW5nbGUub24oImhlYWx0aCIsYT0+e2Z1bmN0aW9uIGQoYyl7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYy5zdGVwcz4+OCxjLnN0ZXBzJjI1NSxjLmJwbSxNYXRoLm1pbihjLm1vdmVtZW50LDI1NSkpfXZhciBiPW5ldyBEYXRlKERhdGUubm93KCktNTlFNCk7YSYmMDxhLnN0ZXBzJiZtKCk7dmFyIGY9ZnVuY3Rpb24oYyl7cmV0dXJuIDE0NSooYy5nZXREYXRlKCktMSkrNipjLmdldEhvdXJzKCkrKDB8NipjLmdldE1pbnV0ZXMoKS82MCl9KGIpO2I9ZnVuY3Rpb24oYyl7cmV0dXJuImhlYWx0aC0iK2MuZ2V0RnVsbFllYXIoKSsiLSIrKGMuZ2V0TW9udGgoKSsxKSsiLnJhdyJ9KGIpO3ZhciBnPXJlcXVpcmUoIlN0b3JhZ2UiKS5yZWFkKGIpO2lmKGcpe3ZhciBlPWcuc3Vic3RyKDgrNCpmLDQpO2lmKCJceGZmXHhmZlx4ZmZceGZmIiE9ZSl7cHJpbnQoIkhFQUxUSCBFUlI6IEFscmVhZHkgd3JpdHRlbiEiKTsKcmV0dXJufX1lbHNlIHJlcXVpcmUoIlN0b3JhZ2UiKS53cml0ZShiLCJIRUFMVEgxXHgwMCIsMCwxNzk4OCk7dmFyIGg9OCs0KmY7YT1PYmplY3QuYXNzaWduKHt9LGEpO2EubW92ZW1lbnQvPTg7cmVxdWlyZSgiU3RvcmFnZSIpLndyaXRlKGIsZChhKSxoLDE3OTg4KTtpZigxNDM9PWYlMTQ1KWlmKGY9aCs0LCJceGZmXHhmZlx4ZmZceGZmIiE9Zy5zdWJzdHIoZiw0KSlwcmludCgiSEVBTFRIIEVSUjogRGFpbHkgc3VtbWFyeSBhbHJlYWR5IHdyaXR0ZW4hIik7ZWxzZXthPXtzdGVwczowLGJwbTowLG1vdmVtZW50OjAsbW92Q250OjAsYnBtQ250OjB9O2Zvcih2YXIgaz0wOzE0ND5rO2srKyl7ZT1nLnN1YnN0cihoLDQpO2lmKCJceGZmXHhmZlx4ZmZceGZmIiE9ZSl7YS5zdGVwcys9KGUuY2hhckNvZGVBdCgwKTw8OCkrZS5jaGFyQ29kZUF0KDEpO3ZhciBsPWUuY2hhckNvZGVBdCgyKTthLmJwbSs9bDthLm1vdmVtZW50Kz1lLmNoYXJDb2RlQXQoMyk7YS5tb3ZDbnQrKzsKbCYmYS5icG1DbnQrK31oLT00fWEuYnBtQ250JiYoYS5icG0vPWEuYnBtQ250KTthLm1vdkNudCYmKGEubW92ZW1lbnQvPWEubW92Q250KTtyZXF1aXJlKCJTdG9yYWdlIikud3JpdGUoYixkKGEpLGYsMTc5ODgpfX0p////HAYAAGhlYWx0aA==");
  base64DecodeToExistingUint8Array(bufferView, 52900, "ZnVuY3Rpb24gaChhKXtyZXR1cm4iaGVhbHRoLSIrYS5nZXRGdWxsWWVhcigpKyItIisoYS5nZXRNb250aCgpKzEpKyIucmF3In1mdW5jdGlvbiBrKGEpe3JldHVybiAxNDUqKGEuZ2V0RGF0ZSgpLTEpKzYqYS5nZXRIb3VycygpKygwfDYqYS5nZXRNaW51dGVzKCkvNjApfWV4cG9ydHMucmVhZEFsbFJlY29yZHM9ZnVuY3Rpb24oYSxlKXthPWgoYSk7YT1yZXF1aXJlKCJTdG9yYWdlIikucmVhZChhKTtpZih2b2lkIDAhPT1hKWZvcih2YXIgZD04LGI9MDszMT5iO2IrKyl7Zm9yKHZhciBjPTA7MjQ+YztjKyspZm9yKHZhciBmPTA7Nj5mO2YrKyl7dmFyIGc9YS5zdWJzdHIoZCw0KTsiXHhmZlx4ZmZceGZmXHhmZiIhPWcmJmUoe2RheTpiKzEsaHI6YyxtaW46MTAqZixzdGVwczpnLmNoYXJDb2RlQXQoMCk8PDh8Zy5jaGFyQ29kZUF0KDEpLGJwbTpnLmNoYXJDb2RlQXQoMiksbW92ZW1lbnQ6OCpnLmNoYXJDb2RlQXQoMyl9KTtkKz0KNH1kKz00fX07ZXhwb3J0cy5yZWFkRnVsbERhdGFiYXNlPWZ1bmN0aW9uKGEpe3JlcXVpcmUoIlN0b3JhZ2UiKS5saXN0KC9oZWFsdGgtWzAtOV0rLVswLTldKy5yYXcvKS5mb3JFYWNoKGU9Pntjb25zb2xlLmxvZyhlKTtlPWUuc3BsaXQoIi0iKTt2YXIgZD1wYXJzZUludChlWzFdKSxiPXBhcnNlSW50KGVbMl0ucmVwbGFjZSgiLnJhdyIsIiIpKTtleHBvcnRzLnJlYWRBbGxSZWNvcmRzKG5ldyBEYXRlKGQsYiwxKSxjPT57Yy5kYXRlPW5ldyBEYXRlKGQsYixjLmRheSxjLmhyLGMubWluKTthKGMpfSl9KX07ZXhwb3J0cy5yZWFkQWxsUmVjb3Jkc1NpbmNlPWZ1bmN0aW9uKGEsZSl7Zm9yKHZhciBkPShuZXcgRGF0ZSkuZ2V0VGltZSgpO2EuZ2V0VGltZSgpPD1kOylleHBvcnRzLnJlYWREYXkoYSxiPT57Yi5kYXRlPW5ldyBEYXRlKGEuZ2V0RnVsbFllYXIoKSxhLmdldE1vbnRoKCksYS5nZXREYXRlKCksYi5ocixiLm1pbik7ZShiKX0pLGEuc2V0RGF0ZShhLmdldERhdGUoKSsxKX07CmV4cG9ydHMucmVhZERhaWx5U3VtbWFyaWVzPWZ1bmN0aW9uKGEsZSl7ayhhKTthPWgoYSk7YT1yZXF1aXJlKCJTdG9yYWdlIikucmVhZChhKTtpZih2b2lkIDAhPT1hKWZvcih2YXIgZD01ODQsYj0wOzMxPmI7YisrKXt2YXIgYz1hLnN1YnN0cihkLDQpOyJceGZmXHhmZlx4ZmZceGZmIiE9YyYmZSh7ZGF5OmIrMSxzdGVwczpjLmNoYXJDb2RlQXQoMCk8PDh8Yy5jaGFyQ29kZUF0KDEpLGJwbTpjLmNoYXJDb2RlQXQoMiksbW92ZW1lbnQ6OCpjLmNoYXJDb2RlQXQoMyl9KTtkKz01ODB9fTtleHBvcnRzLnJlYWREYXk9ZnVuY3Rpb24oYSxlKXtrKGEpO3ZhciBkPWgoYSk7ZD1yZXF1aXJlKCJTdG9yYWdlIikucmVhZChkKTtpZih2b2lkIDAhPT1kKXthPTgrNTgwKihhLmdldERhdGUoKS0xKTtmb3IodmFyIGI9MDsyND5iO2IrKylmb3IodmFyIGM9MDs2PmM7YysrKXt2YXIgZj1kLnN1YnN0cihhLDQpOyJceGZmXHhmZlx4ZmZceGZmIiE9ZiYmZSh7aHI6YixtaW46MTAqCmMsc3RlcHM6Zi5jaGFyQ29kZUF0KDApPDw4fGYuY2hhckNvZGVBdCgxKSxicG06Zi5jaGFyQ29kZUF0KDIpLG1vdmVtZW50OjgqZi5jaGFyQ29kZUF0KDMpfSk7YSs9NH19fb8CAABoZWFsdGguc2V0dGluZ3MuanM=");
  base64DecodeToExistingUint8Array(bufferView, 54496, "KKooYmFjayl7rHNldHRpbmdzPU9iamVjdC5hc3NpZ24oe2hybTowLHN0ZXBHb2FsOjEwMDAwLHN0ZXBHb2FsTm90aWZpY2F0aW9uOrV9LHJlcXVpcmUo0QdTdG9yYWdlKS5yZWFkSlNPTijRC2hlYWx0aC5qc29uLLQpoHt9KTuqc2V0U2V0dGluZ3MoKXtyZXF1aXJlKNEHU3RvcmFnZSkud3JpdGVKU09OKNELaGVhbHRoLmpzb24sc2V0dGluZ3MpO31FLnNob3dNZW51KHvRADp7dGl0bGU60Q9IZWFsdGggVHJhY2tpbmd9LNEGPCBCYWNrOigpomJhY2soKSzRDEhSTSBJbnRlcnZhbDp7dmFsdWU6c2V0dGluZ3MuaHJtLG1pbjowLG1heDozLGZvcm1hdDp2olvRA09mZizRBTMgbWluLNEGMTAgbWluLNEGQWx3YXlzXVt2XSxvbmNoYW5nZTp2ontzZXR0aW5ncy5ocm09djtzZXRTZXR0aW5ncygpO319LNEPRGFpbHkgU3RlcCBHb2FsOnt2YWx1ZTpzZXR0aW5ncy5zdGVwR29hbCxtaW46MCxtYXg6MjAwMDAsc3RlcDoyNTAsb25jaGFuZ2U6dqJ7c2V0dGluZ3Muc3RlcEdvYWw9djtzZXRTZXR0aW5ncygpO319LNEWU3RlcCBHb2FsIE5vdGlmaWNhdGlvbjp7dmFsdWU60RRzdGVwR29hbE5vdGlmaWNhdGlvbrlzZXR0aW5ncz9zZXR0aW5ncy5zdGVwR29hbE5vdGlmaWNhdGlvbjq1LG9uY2hhbmdlOigpontzZXR0aW5ncy5zdGVwR29hbE5vdGlmaWNhdGlvbj0hc2V0dGluZ3Muc3RlcEdvYWxOb3RpZmljYXRpb247c2V0U2V0dGluZ3MoKTt9fSx9KTt9Kf/jAAAAaGVhbHRoLmluZm8=");
  base64DecodeToExistingUint8Array(bufferView, 55232, "eyJpZCI6ImhlYWx0aCIsIm5hbWUiOiJIZWFsdGgiLCJzcmMiOiJoZWFsdGguYXBwLmpzIiwiaWNvbiI6ImhlYWx0aC5pbWciLCJ2ZXJzaW9uIjoiMC4yOCIsInRhZ3MiOiJ0b29sLHN5c3RlbSxoZWFsdGgiLCJmaWxlcyI6ImhlYWx0aC5pbmZvLGhlYWx0aC5hcHAuanMsaGVhbHRoLmltZyxoZWFsdGguYm9vdC5qcyxoZWFsdGgsaGVhbHRoLnNldHRpbmdzLmpzIiwiZGF0YSI6ImhlYWx0aC5qc29uIn3/5E4AAHNldHRpbmcuYXBwLmpz");
  base64DecodeToExistingUint8Array(bufferView, 55492, "");
  base64DecodeToExistingUint8Array(bufferView, 75720, "MDDCAP//8WPMQm9T");
  base64DecodeToExistingUint8Array(bufferView, 75784, "AVVVQAAAAAAAAAAAAVVVQAAAAAAAAAAAAVVVUAAAAAAAAAAAAVVVUAAAAAAAAAAABVVVUAAAAAAAAAAABVVVUAAAAAAAABAABVVVUAAFAAAAAFUAVVVVVQBVAAAAAVVRVVVVVUVVQAAAAVVVVfqvVVVVUAAABVVVXqqqtVVVUAAAFVVV6qqqq1VVVAAAFVVXqqqqqtVVVAAAVVVeqqqqqrVVVQAAVVVaqqqqqqVVVQAAVVV6qqqqqq1VVQAAFVVqqqAKqqlVVAAAAVXqqgAAqqtVQAAAAFXqqgAAqqtVAAAAABWqqAAAKqpVAAAAABWqqAAAKqpVAAAAABWqqAAAKqpVAAAAABWqqAAAKqpVAAAAAFXqqgAAqqtVAAAAAVXqqgAAqqtVQAAAFVVqqqAKqqlVVAAAVVV6qqqqqq1VVQAAVVVaqqqqqqVVVQAAVVVeqqqqqrVVVQAAFVVXqqqqqtVVVAAAFVVV6qqqq1VVVAAABVVVXqqqtVVVUAAABVVVVfqvVVVVQAAAAVVRVVVVVUVVQAAAAFUAVVVVVQBVAAAAAFAABVVVUAAEAAAAAAAABVVVUAAAAAAAAAAABVVVUAAAAAAAAAAABVVVQAAAAAAAAAAABVVVQAAAAAAAAAAAAVVVQAAAAAAAAAAAAVVVQA==");
  base64DecodeToExistingUint8Array(bufferView, 76308, "TwEAAHNldHRpbmcuanNvbg==");
  base64DecodeToExistingUint8Array(bufferView, 76340, "eyJibGUiOnRydWUsImJsZXJlcGwiOnRydWUsImxvZyI6ZmFsc2UsInRpbWVvdXQiOjEwLCJ2aWJyYXRlIjp0cnVlLCJiZWVwIjoidmliIiwidGltZXpvbmUiOjAsIkhJRCI6ZmFsc2UsImNsb2NrIjpudWxsLCIxMmhvdXIiOmZhbHNlLCJicmlnaHRuZXNzIjoxLCJvcHRpb25zIjp7Indha2VPbkJUTjEiOnRydWUsIndha2VPbkJUTjIiOnRydWUsIndha2VPbkJUTjMiOnRydWUsIndha2VPbkZhY2VVcCI6ZmFsc2UsIndha2VPblRvdWNoIjpmYWxzZSwid2FrZU9uVHdpc3QiOmZhbHNlLCJ0d2lzdFRocmVzaG9sZCI6ODE5LjIsInR3aXN0TWF4WSI6LTgwMCwidHdpc3RUaW1lb3V0IjoxMDAwfX3/ywAAAHNldHRpbmcuaW5mbw==");
  base64DecodeToExistingUint8Array(bufferView, 76708, "eyJpZCI6InNldHRpbmciLCJuYW1lIjoiU2V0dGluZ3MiLCJzcmMiOiJzZXR0aW5nLmFwcC5qcyIsImljb24iOiJzZXR0aW5nLmltZyIsInNvcnRvcmRlciI6LTUsInZlcnNpb24iOiIwLjY4IiwidGFncyI6InRvb2wsc3lzdGVtIiwiZmlsZXMiOiJzZXR0aW5nLmluZm8sc2V0dGluZy5hcHAuanMsc2V0dGluZy5pbWciLCJkYXRhIjoic2V0dGluZy5qc29uIn3/gAIAAHNjaGVkLmJvb3QuanM=");
  base64DecodeToExistingUint8Array(bufferView, 76944, "KKooKXujKEJhbmdsZS5TQ0hFRCl7Y2xlYXJUaW1lb3V0KEJhbmdsZS5TQ0hFRCk7vkJhbmdsZS5TQ0hFRDt9rGFsYXJtcz1yZXF1aXJlKNEHU3RvcmFnZSkucmVhZEpTT04o0QpzY2hlZC5qc29uLDEpoFtdO6x0aW1lPbhEYXRlKCk7rGN1cnJlbnRUaW1lPSh0aW1lLmdldEhvdXJzKCkqMzYwMDAwMCkrKHRpbWUuZ2V0TWludXRlcygpKjYwMDAwKSsodGltZS5nZXRTZWNvbmRzKCkqMTAwMCk7rGQ9dGltZS5nZXREYXRlKCk7rGFjdGl2ZT1hbGFybXMuZmlsdGVyKGGiYS5vbp4oYS5sYXN0jGQpnihhLnQrNjAwMDA+Y3VycmVudFRpbWUpnihhLmRvd5J0aW1lLmdldERheSgpJjEpnighYS5kYXRloGEuZGF0ZYp0aW1lLnRvTG9jYWxJU09TdHJpbmcoKS5zdWJzdHIoMCwxMCkpKTujKGFjdGl2ZS5sZW5ndGgpe2FjdGl2ZT1hY3RpdmUuc29ydCgoYSxiKaJhLnQtYi50KTusdD1hY3RpdmVbMF0udC1jdXJyZW50VGltZTujKHQ8MTAwMCl0PTEwMDA7QmFuZ2xlLlNDSEVEPXNldFRpbWVvdXQoYWN0aXZlWzBdLmpzoNEQbG9hZCgic2NoZWQuanMiKSx0KTt9pHtCYW5nbGUuU0NIRUQ9c2V0VGltZW91dCjRLmV2YWwocmVxdWlyZSgiU3RvcmFnZSIpLnJlYWQoInNjaGVkLmJvb3QuanMiKSksODY0MDAwMDAtY3VycmVudFRpbWUpO319KSgpOxAUAABzY2hlZC5qcw==");
  base64DecodeToExistingUint8Array(bufferView, 77616, "TW9kdWxlcy5hZGRDYWNoZWQo0Qp0aW1lX3V0aWxzLKooKXuuT05FX1NFQ09ORD0xMDAwO65PTkVfTUlOVVRFPTYwKk9ORV9TRUNPTkQ7rk9ORV9IT1VSPTYwKk9ORV9NSU5VVEU7rk9ORV9EQVk9MjQqT05FX0hPVVI7ZXhwb3J0cy5lbmNvZGVUaW1lPSh0aW1lKaJ7dGltZT1zYWZlVGltZSh0aW1lKTurdGltZS5kKk9ORV9EQVkrdGltZS5oKk9ORV9IT1VSK3RpbWUubSpPTkVfTUlOVVRFK3RpbWUucypPTkVfU0VDT05EO32qc2FmZVRpbWUodGltZSl7q3tkOnRpbWUuZKAwLGg6dGltZS5ooDAsbTp0aW1lLm2gMCxzOnRpbWUuc6AwfTt9ZXhwb3J0cy5kZWNvZGVUaW1lPShtaWxsaXMponujKL9taWxsaXON0QZudW1iZXIpsNEcT25seSBhIG51bWJlciBjYW4gYmUgZGVjb2RlZDusZD1NYXRoLmZsb29yKG1pbGxpcy9PTkVfREFZKTttaWxsaXOXZCpPTkVfREFZO6xoPU1hdGguZmxvb3IobWlsbGlzL09ORV9IT1VSKTttaWxsaXOXaCpPTkVfSE9VUjusbT1NYXRoLmZsb29yKG1pbGxpcy9PTkVfTUlOVVRFKTttaWxsaXOXbSpPTkVfTUlOVVRFO6xzPU1hdGguZmxvb3IobWlsbGlzL09ORV9TRUNPTkQpO6t7ZDpkLGg6aCxtOm0sczpzfTt9ZXhwb3J0cy5mb3JtYXRUaW1lPSh2YWx1ZSmie6x0aW1lPXNhZmVUaW1lKL92YWx1ZYvRBm9iamVjdD92YWx1ZTpleHBvcnRzLmRlY29kZVRpbWUodmFsdWUpKTujKHRpbWUuZIwwKbDRF2RheXMgbm90IHN1cHBvcnRlZCBoZXJlO6ModGltZS5oPDCgdGltZS5oPjIzKbDRI0ludmFsaWQgdmFsdWU6IG11c3QgYmUgMCA8PSBoIDw9IDIzO6ModGltZS5tPDCgdGltZS5tPjU5KbDRI0ludmFsaWQgdmFsdWU6IG11c3QgYmUgMCA8PSBtIDw9IDU5O6t0aW1lLmgr0QE6KyjRATArdGltZS5tKS5zdWJzdHIoLTIpO31leHBvcnRzLmZvcm1hdER1cmF0aW9uPSh2YWx1ZSxjb21wYWN0KaJ7Y29tcGFjdD1jb21wYWN0oLU7rGR1cmF0aW9uPdEAO6x0aW1lPXNhZmVUaW1lKL92YWx1ZYvRBm9iamVjdD92YWx1ZTpleHBvcnRzLmRlY29kZVRpbWUodmFsdWUpKTujKHRpbWUuZD4wKWR1cmF0aW9ulnRpbWUuZCvRAmQgO6ModGltZS5oPjApZHVyYXRpb26WdGltZS5oK9ECaCA7oyh0aW1lLm0+MClkdXJhdGlvbpZ0aW1lLm0r0QJtIDujKHRpbWUucz4wKWR1cmF0aW9ulnRpbWUucyvRAXNkdXJhdGlvbj1kdXJhdGlvbi50cmltKCmrY29tcGFjdD9kdXJhdGlvbi5yZXBsYWNlKNEBICzRACk6ZHVyYXRpb247fWV4cG9ydHMuZ2V0Q3VycmVudFRpbWVNaWxsaXM9KCmie6x0aW1lPbhEYXRlKCk7qyh0aW1lLmdldEhvdXJzKCkqMzYwMCt0aW1lLmdldE1pbnV0ZXMoKSo2MCt0aW1lLmdldFNlY29uZHMoKSkqMTAwMDt9fSk7Ck1vZHVsZXMuYWRkQ2FjaGVkKNEEYnV6eiyqKCl7ZXhwb3J0cy5wYXR0ZXJuPXBhdHRlcm6iuFByb21pc2UocmVzb2x2ZaJ7qmRvQnV6eigpe6MocGF0dGVyborRACmrcmVzb2x2ZSgpO6xjPXBhdHRlcm5bMF07cGF0dGVybj1wYXR0ZXJuLnN1YnN0cigxKTuuQlVaWl9XRUFLPTAuMjUsQlVaWl9TVFJPTkc9MTuuU0hPUlRfTVM9MTAwLE1FRElVTV9NUz0yMDAsTE9OR19NUz01MDA7oyhjitEBLilCYW5nbGUuYnV6eihTSE9SVF9NUyxCVVpaX1dFQUspLnRoZW4oKCmic2V0VGltZW91dChkb0J1enosMTAwKSk7pKMoY4rRASwpQmFuZ2xlLmJ1enooTUVESVVNX01TLEJVWlpfV0VBSykudGhlbigoKaJzZXRUaW1lb3V0KGRvQnV6eiwxMDApKTukoyhjitEBLSlCYW5nbGUuYnV6eihMT05HX01TLEJVWlpfV0VBSykudGhlbigoKaJzZXRUaW1lb3V0KGRvQnV6eiwxMDApKTukoyhjitEBOilCYW5nbGUuYnV6eihTSE9SVF9NUyxCVVpaX1NUUk9ORykudGhlbigoKaJzZXRUaW1lb3V0KGRvQnV6eiwxMDApKTukoyhjitEBOylCYW5nbGUuYnV6eihNRURJVU1fTVMsQlVaWl9TVFJPTkcpLnRoZW4oKCmic2V0VGltZW91dChkb0J1enosMTAwKSk7pKMoY4rRAT0pQmFuZ2xlLmJ1enooTE9OR19NUyxCVVpaX1NUUk9ORykudGhlbigoKaJzZXRUaW1lb3V0KGRvQnV6eiwxMDApKTukc2V0VGltZW91dChkb0J1enosMTAwKTt9ZG9CdXp6KCk7fSk7fSk7CqMoQmFuZ2xlLlNDSEVEKXtjbGVhckludGVydmFsKEJhbmdsZS5TQ0hFRCk7vkJhbmdsZS5TQ0hFRDt9CqpzaG93QWxhcm0oYWxhcm0pe65hbGFybUluZGV4PWFsYXJtcy5pbmRleE9mKGFsYXJtKTuuc2V0dGluZ3M9cmVxdWlyZSjRBXNjaGVkKS5nZXRTZXR0aW5ncygpO61tZXNzYWdlPdEAO21lc3NhZ2WWYWxhcm0udGltZXI/cmVxdWlyZSjRCnRpbWVfdXRpbHMpLmZvcm1hdER1cmF0aW9uKGFsYXJtLnRpbWVyKTpyZXF1aXJlKNEKdGltZV91dGlscykuZm9ybWF0VGltZShhbGFybS50KTujKGFsYXJtLm1zZyl7bWVzc2FnZZbRAQorYWxhcm0ubXNnO32ke21lc3NhZ2U9KGFsYXJtLnRpbWVyP9KZAQAkLMIA//9970XBhyEAAAAVVVQAAAAAAAAVVVQAAAAAAAAVVVQAAAAAAAAVVVQAAAAAAAAVVVQAAAAAAAAVVVQAAAAAAAAD/8AAAAAAAAAD/8AAAAAAAAAKqqADwAAAAAKqqqqD/AAAACqqqqqr/wAAAqqqqqqqv8AACqqqpVqqr8AAKqqqpVWqqwAAqqqqpVVaqgACqqqqpVVWqoACqmqqpVVVqoAKqVqqpVVVaqAKpVqqpVVVWqAqpVeqpVVVWqgqlVX6pVVVVqgqlVX+pVVVVqiqVVV/5VVVVaqqVVVf/lVVVaqqVVVf/5VVVaqqVVVX69VVVaqqVVVX69VVVaqqVVVW/5VVVaqqVVVVvlVVVaqqVVVVVVVVVaoqlVVVVVVVVqgqlVVVVVVVVqgqpVVVVVVVWqgKpVVVVVVVWqAKqVVVVVVVaqACqlVVVVVVqoACqpVVVVVWqoAAqqVVVVVaqgAAKqpVVVWqqAAACqqlVVqqoAAAAqqqqqqqgAAAACqqqqqoAAAAAAKqqqqAAAAAAAAKqqAAAAA60vwBAC0swgF97///RcEpMlVVVVVVf9VVVVVVVVX/9VVf9VVf/1VVV///1Vf9VX///VVX///VWqqlV///1Vf//9aqqqqpf//9V///2qqqqqqn///V///6qqqqqqr///X//+qqoAAKqqv//3//6qoAAAAKqr//3//qqAAAAAAqq//3/+qoAADwAAKqv/3/+qgAADwAACqv/3/aqAAADwAAAqp/19qoAAADwAAAKqfV1qgAAADwAAACqXVWqgAAADwAAACqlVWqAAAADwAAAAqlVWqAAAADwAAAAqlVWqAAAADwAAAAqlVaoAAAADwAAAAKpVaoAAAADwAAAAKpVaoAAAADwAAAAKpVaoAAAAOsAAAAKpVaoAAAAOsAAAAKpVaoAAAAL/AAAAKpVaoAAAAgPwAAAKpVaoAAACAD8AAAKpVWqAAAIAA/AAAqlVWqAAAgAAPwAAqlVWqAACAAADwAAqlVWqgAIAAAAAACqlVVqgAgAAAAAACqVVVqoAAAAAAAAKqVVVaqAAAAAAAAqpVVVWqgAAAAAACqlVVVWqoAAAAAAKqlVVVVqqAAAAAAqqVVVVVaqoAAAAKqpVVVVVeqqoAAKqqtVVVVV/6qqqqqqr/VVVVX/2qqqqqqn/1VVVf/VaqqqqpV/9VVVf9VVWqqlVVf9VVVf1VVVVVVVVX9VSkr0QEgK21lc3NhZ2V9QmFuZ2xlLmxvYWRXaWRnZXRzKCk7QmFuZ2xlLmRyYXdXaWRnZXRzKCk7rWJ1enpDb3VudD1zZXR0aW5ncy5idXp6Q291bnQ7RS5zaG93UHJvbXB0KG1lc3NhZ2Use3RpdGxlOmFsYXJtLnRpbWVyP9EGVElNRVIhOtEGQUxBUk0hLGJ1dHRvbnM6e9EGU25vb3plOrQs0QRTdG9wOrV9fSkudGhlbiiqKHNsZWVwKXtidXp6Q291bnQ9MDujKHNsZWVwKXujKGFsYXJtLm90i7cpe2FsYXJtLm90PWFsYXJtLnQ7fWFsYXJtLnSWc2V0dGluZ3MuZGVmYXVsdFNub296ZU1pbGxpcztCYW5nbGUuZW1pdCjRC2FsYXJtU25vb3plLGFsYXJtKTt9pHutZGVsPWFsYXJtLmRlbIu3P3NldHRpbmdzLmRlZmF1bHREZWxldGVFeHBpcmVkVGltZXJzOmFsYXJtLmRlbDujKGRlbCl7YWxhcm1zLnNwbGljZShhbGFybUluZGV4LDEpO32ke6MoYWxhcm0uZGF0ZZ5hbGFybS5ycCl7c2V0TmV4dFJlcGVhdERhdGUoYWxhcm0pO32koyghYWxhcm0udGltZXIpe2FsYXJtLmxhc3Q9uERhdGUoKS5nZXREYXRlKCk7faMoYWxhcm0ub3SNtyl7YWxhcm0udD1hbGFybS5vdDu+YWxhcm0ub3Q7faMoIWFsYXJtLnJwKXthbGFybS5vbj21O319QmFuZ2xlLmVtaXQo0QxhbGFybURpc21pc3MsYWxhcm0pO31yZXF1aXJlKNEFc2NoZWQpLnNldEFsYXJtcyhhbGFybXMpO2xvYWQoKTt9KTuqYnV6eigpe6Moc2V0dGluZ3MudW5sb2NrQXRCdXp6KXtCYW5nbGUuc2V0TG9ja2VkKLUpO32ucGF0dGVybj1hbGFybS52aWJyYXRloChhbGFybS50aW1lcj9zZXR0aW5ncy5kZWZhdWx0VGltZXJQYXR0ZXJuOnNldHRpbmdzLmRlZmF1bHRBbGFybVBhdHRlcm4pO3JlcXVpcmUo0QRidXp6KS5wYXR0ZXJuKHBhdHRlcm4pLnRoZW4oKCmie6MoYnV6ekNvdW50mSl7c2V0VGltZW91dChidXp6LHNldHRpbmdzLmJ1enpJbnRlcnZhbE1pbGxpcyk7faSjKGFsYXJtLmFzKXtidXp6Q291bnQ9c2V0dGluZ3MuYnV6ekNvdW50O3NldFRpbWVvdXQoYnV6eixzZXR0aW5ncy5kZWZhdWx0U25vb3plTWlsbGlzKTt9fSk7fapzZXROZXh0UmVwZWF0RGF0ZShhbGFybSl7rWRhdGU9uERhdGUoYWxhcm0uZGF0ZSk7rXJwPWFsYXJtLnJwO6MocnCLtCl7ZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpKzEpO32kuyhycC5pbnRlcnZhbCl7vNEDZGF5OmRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKStycC5udW0pO6g7vNEEd2VlazpkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkrKHJwLm51bSo3KSk7qDu80QVtb250aDqjKCFhbGFybS5vZClhbGFybS5vZD1kYXRlLmdldERhdGUoKTtkYXRlPbhEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSxkYXRlLmdldE1vbnRoKCkrcnAubnVtLGFsYXJtLm9kKTujKGRhdGUuZ2V0RGF0ZSgpjGFsYXJtLm9kKWRhdGUuc2V0RGF0ZSgwKTuoO7zRBHllYXI6oyghYWxhcm0ub2QpYWxhcm0ub2Q9ZGF0ZS5nZXREYXRlKCk7ZGF0ZT24RGF0ZShkYXRlLmdldEZ1bGxZZWFyKCkrcnAubnVtLGRhdGUuZ2V0TW9udGgoKSxhbGFybS5vZCk7oyhkYXRlLmdldERhdGUoKYxhbGFybS5vZClkYXRlLnNldERhdGUoMCk7qDu9OmNvbnNvbGUubG9nKGBzY2hlZDogdW5rbm93biByZXBlYXQgJyR7SlNPTi5zdHJpbmdpZnkocnApfSdgKTuoO31hbGFybS5kYXRlPWRhdGUudG9Mb2NhbElTT1N0cmluZygpLnNsaWNlKDAsMTApO32jKChyZXF1aXJlKNEHU3RvcmFnZSkucmVhZEpTT04o0QxzZXR0aW5nLmpzb24sMSmge30pLnF1aWV0PjEpqztidXp6KCk7fa1hbGFybXM9cmVxdWlyZSjRBXNjaGVkKS5nZXRBbGFybXMoKTutYWN0aXZlPXJlcXVpcmUo0QVzY2hlZCkuZ2V0QWN0aXZlQWxhcm1zKGFsYXJtcyk7oyhhY3RpdmUubGVuZ3RoKXtzaG93QWxhcm0oYWN0aXZlWzBdKTt9pHtzZXRUaW1lb3V0KGxvYWQsMTAwKTt9hAQAAHNjaGVkLmltZw==");
  base64DecodeToExistingUint8Array(bufferView, 82784, "MDCEBmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmERFmZmZmZmZmZmZmZmZmZmYRERFmZmZmERFmZmZmERERZmZmZmZmZhERERERZmZmERFmZmYREREREWZmZmZmYREREREWZmbMzMzMZmZhERERERZmZmZmERERERFmzMzMzMzMzMxmERERERFmZmZhERERERbMzMzMzMzMzMzMYREREREWZmZhERERERzMzMzMzMzMzMzMwREREREWZmYRERERFMzMzEQz//8zRMzMzEERERERZmYRERERTMzMQ////////zTMzMQRERERZmYREREUzMzD//////////88zMxBERERZmYRERFMzMQ/////8A/////zTMzEERERZmYRERHMzE//////8A//////9MzMERERZmYREWzMxP//////8A///////0zMxhERZmZhFszMw///////8A///////zzMzGEWZmZhZszMP///////8A////////PMzGYWZmZmbMzE////////8A////////9MzMZmZmZmbMzD////////8A////////88zMZmZmZmbMxP////////8A/////////0zMZmZmZmbMxP////////8A/////////0zMZmZmZmzMw/////////8A/////////zzMxmZmZmzMw/////////8A/////////zzMxmZmZmzMz/////////MAP/////////zMxmZmZmzMz/////////BVD/////////zMxmZmZmzMz/////////BVA/////////zMxmZmZmzMz////////zQAAD////////zMxmZmZmzMw///////80PzAAP//////zzMxmZmZmzMw///////ND//MAA//////zzMxmZmZmbMxP/////zQ///8wAD/////0zMZmZmZmbMxP////80P////zAAP////0zMZmZmZmbMzD////ND//////MC////88zMZmZmZmbMzE///zQ///////8/////9MzMZmZmZmZszMP/80P/////////////PMzGZmZmZmZszMw//z/////////////zzMzGZmZmZmZmzMxP///////////////0zMxmZmZmZmZmbMzE//////////////9MzMZmZmZmZmZmbMzMQ////////////zTMzMZmZmZmZmZmZszMzD//////////88zMzGZmZmZmZmZmZmzMzMQ////////zTMzMxmZmZmZmZmZmZmFMzMzEQz//8zRMzMzEFmZmZmZmZmZmZhERzMzMzMzMzMzMzMwREWZmZmZmZmZmYRERbMzMzMzMzMzMzMYRERZmZmZmZmZmEREWZmzMzMzMzMzMxmZhERFmZmZmZmZmERFmZmZmbMzMzMZmZmZmERFmZmZmZmZmERZmZmZmZmZmZmZmZmZmYRFmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZrYIAABzY2hlZA==");
  base64DecodeToExistingUint8Array(bufferView, 83972, "CmV4cG9ydHMuZ2V0QWxhcm1zPaooKXurcmVxdWlyZSjRB1N0b3JhZ2UpLnJlYWRKU09OKNEKc2NoZWQuanNvbiwxKaBbXTt9OwpleHBvcnRzLnNldEFsYXJtcz2qKGFsYXJtcyl7q3JlcXVpcmUo0QdTdG9yYWdlKS53cml0ZUpTT04o0QpzY2hlZC5qc29uLGFsYXJtcyk7fTsKZXhwb3J0cy5nZXRBbGFybT2qKGlkKXurZXhwb3J0cy5nZXRBbGFybXMoKS5maW5kKGGiYS5pZIppZCk7fTsKZXhwb3J0cy5nZXRBY3RpdmVBbGFybXM9qihhbGFybXMsdGltZSl7oyghdGltZSl0aW1lPbhEYXRlKCk7rGN1cnJlbnRUaW1lPSh0aW1lLmdldEhvdXJzKCkqMzYwMDAwMCkrKHRpbWUuZ2V0TWludXRlcygpKjYwMDAwKSsodGltZS5nZXRTZWNvbmRzKCkqMTAwMCkrMTAwMDA7q2FsYXJtcy5maWx0ZXIoYaJhLm9unihhLmxhc3SMdGltZS5nZXREYXRlKCkpnihhLnQ8Y3VycmVudFRpbWUpnihhLmRvd5J0aW1lLmdldERheSgpJjEpnighYS5kYXRloGEuZGF0ZYp0aW1lLnRvTG9jYWxJU09TdHJpbmcoKS5zdWJzdHIoMCwxMCkpKS5zb3J0KChhLGIpomEudC1iLnQpO30KZXhwb3J0cy5zZXRBbGFybT2qKGlkLGFsYXJtKXusYWxhcm1zPWV4cG9ydHMuZ2V0QWxhcm1zKCkuZmlsdGVyKGGiYS5pZIxpZCk7oyhhbGFybY23KXthbGFybS5pZD1pZDujKGFsYXJtLmRvd4u3KWFsYXJtLmRvdz0wYjExMTExMTE7oyhhbGFybS5vbo21KWFsYXJtLm9uPbQ7oyhhbGFybS50aW1lcil7rHRpbWU9uERhdGUoKTusY3VycmVudFRpbWU9KHRpbWUuZ2V0SG91cnMoKSozNjAwMDAwKSsodGltZS5nZXRNaW51dGVzKCkqNjAwMDApKyh0aW1lLmdldFNlY29uZHMoKSoxMDAwKTthbGFybS50PWN1cnJlbnRUaW1lK2FsYXJtLnRpbWVyO31hbGFybXMucHVzaChhbGFybSk7fWV4cG9ydHMuc2V0QWxhcm1zKGFsYXJtcyk7fTsKZXhwb3J0cy5nZXRUaW1lVG9BbGFybT2qKGFsYXJtLHRpbWUpe6MoIWFsYXJtKau3O6MoIXRpbWUpdGltZT24RGF0ZSgpO6xjdXJyZW50VGltZT0odGltZS5nZXRIb3VycygpKjM2MDAwMDApKyh0aW1lLmdldE1pbnV0ZXMoKSo2MDAwMCkrKHRpbWUuZ2V0U2Vjb25kcygpKjEwMDApO6xhY3RpdmU9YWxhcm0ub26eKGFsYXJtLmRvd5IoKHRpbWUuZ2V0RGF5KCkrKGFsYXJtLnQ8Y3VycmVudFRpbWUpKSU3KSkmMZ4oIWFsYXJtLmRhdGWgYWxhcm0uZGF0ZYp0aW1lLnRvTG9jYWxJU09TdHJpbmcoKS5zdWJzdHIoMCwxMCkpO6MoIWFjdGl2ZSmrtzusdD1hbGFybS50LWN1cnJlbnRUaW1lO6MoYWxhcm0ubGFzdIp0aW1lLmdldERhdGUoKaB0PC02MDAwMCl0ljg2NDAwMDAwO6t0O307CmV4cG9ydHMucmVsb2FkPaooKXtldmFsKHJlcXVpcmUo0QdTdG9yYWdlKS5yZWFkKNENc2NoZWQuYm9vdC5qcykpO6MoZ2xvYmFsLldJREdFVFOeV0lER0VUU1vRBWFsYXJtXSl7V0lER0VUU1vRBWFsYXJtXS5yZWxvYWQoKTtCYW5nbGUuZHJhd1dpZGdldHMoKTt9fTsKZXhwb3J0cy5uZXdEZWZhdWx0QWxhcm09qigpe65zZXR0aW5ncz1leHBvcnRzLmdldFNldHRpbmdzKCk7rGFsYXJtPXt0OjEyKjM2MDAwMDAsZGVsOrUsb246tCxycDq1LGFzOnNldHRpbmdzLmRlZmF1bHRBdXRvU25vb3plLGRvdzowYjExMTExMTEsbGFzdDowLHZpYnJhdGU6c2V0dGluZ3MuZGVmYXVsdEFsYXJtUGF0dGVybix9O75zZXR0aW5nczurYWxhcm07fQpleHBvcnRzLm5ld0RlZmF1bHRUaW1lcj2qKCl7rnNldHRpbmdzPWV4cG9ydHMuZ2V0U2V0dGluZ3MoKTusdGltZXI9e3RpbWVyOjUqNjAqMTAwMCxkZWw6c2V0dGluZ3MuZGVmYXVsdERlbGV0ZUV4cGlyZWRUaW1lcnMsb246tCxycDq1LGFzOrUsZG93OjBiMTExMTExMSxsYXN0OjAsdmlicmF0ZTpzZXR0aW5ncy5kZWZhdWx0VGltZXJQYXR0ZXJufb5zZXR0aW5nczurdGltZXI7fTsKZXhwb3J0cy5nZXRTZXR0aW5ncz2qKCl7q09iamVjdC5hc3NpZ24oe3VubG9ja0F0QnV6ejq1LGRlZmF1bHRTbm9vemVNaWxsaXM6NjAwMDAwLGRlZmF1bHRBdXRvU25vb3plOrUsZGVmYXVsdERlbGV0ZUV4cGlyZWRUaW1lcnM6tCxidXp6Q291bnQ6MTAsYnV6ekludGVydmFsTWlsbGlzOjMwMDAsZGVmYXVsdEFsYXJtUGF0dGVybjrRAjo6LGRlZmF1bHRUaW1lclBhdHRlcm460QI6On0scmVxdWlyZSjRB1N0b3JhZ2UpLnJlYWRKU09OKNETc2NoZWQuc2V0dGluZ3MuanNvbiy0KaB7fSk7fQpleHBvcnRzLnNldFNldHRpbmdzPaooc2V0dGluZ3Mpe3JlcXVpcmUo0QdTdG9yYWdlKS53cml0ZUpTT04o0RNzY2hlZC5zZXR0aW5ncy5qc29uLHNldHRpbmdzKTt9O///VgkAAHNjaGVkLnNldHRpbmdzLmpz");
  base64DecodeToExistingUint8Array(bufferView, 86236, "TW9kdWxlcy5hZGRDYWNoZWQo0QRidXp6LKooKXtleHBvcnRzLnBhdHRlcm49cGF0dGVybqK4UHJvbWlzZShyZXNvbHZlonuqZG9CdXp6KCl7oyhwYXR0ZXJuitEAKatyZXNvbHZlKCk7rGM9cGF0dGVyblswXTtwYXR0ZXJuPXBhdHRlcm4uc3Vic3RyKDEpO65CVVpaX1dFQUs9MC4yNSxCVVpaX1NUUk9ORz0xO65TSE9SVF9NUz0xMDAsTUVESVVNX01TPTIwMCxMT05HX01TPTUwMDujKGOK0QEuKUJhbmdsZS5idXp6KFNIT1JUX01TLEJVWlpfV0VBSykudGhlbigoKaJzZXRUaW1lb3V0KGRvQnV6eiwxMDApKTukoyhjitEBLClCYW5nbGUuYnV6eihNRURJVU1fTVMsQlVaWl9XRUFLKS50aGVuKCgponNldFRpbWVvdXQoZG9CdXp6LDEwMCkpO6SjKGOK0QEtKUJhbmdsZS5idXp6KExPTkdfTVMsQlVaWl9XRUFLKS50aGVuKCgponNldFRpbWVvdXQoZG9CdXp6LDEwMCkpO6SjKGOK0QE6KUJhbmdsZS5idXp6KFNIT1JUX01TLEJVWlpfU1RST05HKS50aGVuKCgponNldFRpbWVvdXQoZG9CdXp6LDEwMCkpO6SjKGOK0QE7KUJhbmdsZS5idXp6KE1FRElVTV9NUyxCVVpaX1NUUk9ORykudGhlbigoKaJzZXRUaW1lb3V0KGRvQnV6eiwxMDApKTukoyhjitEBPSlCYW5nbGUuYnV6eihMT05HX01TLEJVWlpfU1RST05HKS50aGVuKCgponNldFRpbWVvdXQoZG9CdXp6LDEwMCkpO6RzZXRUaW1lb3V0KGRvQnV6eiwxMDApO31kb0J1enooKTt9KTt9KTsKTW9kdWxlcy5hZGRDYWNoZWQo0QlidXp6X21lbnUsqigpe2V4cG9ydHMucGF0dGVybj2qKHZhbHVlLGNhbGxiYWNrKXuscGF0dGVybnM9W9EALNEBLizRATos0QIuLizRAjo6LNEBLCzRATss0QIsLCzRAjs7LNEBLSzRAT0s0QItLSzRAj09LNEDLi4uLNEDOjo6LNEDLS0tLNEDOzs7LNEDPT09XTure3ZhbHVlOk1hdGgubWF4KDAscGF0dGVybnMuaW5kZXhPZih2YWx1ZSkpLG1pbjowLG1heDpwYXR0ZXJucy5sZW5ndGgtMSxmb3JtYXQ6dqJwYXR0ZXJuc1t2XaDRA09mZixvbmNoYW5nZTp2ontyZXF1aXJlKNEEYnV6eikucGF0dGVybihwYXR0ZXJuc1t2XSk7Y2FsbGJhY2socGF0dGVybnNbdl0pO319O319KTsoqihiYWNrKXutc2V0dGluZ3M9cmVxdWlyZSjRBXNjaGVkKS5nZXRTZXR0aW5ncygpO0Uuc2hvd01lbnUoe9EAOnvRBXRpdGxlOtEJU2NoZWR1bGVyfSzRBjwgQmFjazooKaJiYWNrKCks0Q5VbmxvY2sgYXQgQnV6ejp7dmFsdWU6c2V0dGluZ3MudW5sb2NrQXRCdXp6LG9uY2hhbmdlOnaie3NldHRpbmdzLnVubG9ja0F0QnV6ej12O3JlcXVpcmUo0QVzY2hlZCkuc2V0U2V0dGluZ3Moc2V0dGluZ3MpO319LNEVRGVsZXRlIEV4cGlyZWQgVGltZXJzOnt2YWx1ZTpzZXR0aW5ncy5kZWZhdWx0RGVsZXRlRXhwaXJlZFRpbWVycyxvbmNoYW5nZTp2ontzZXR0aW5ncy5kZWZhdWx0RGVsZXRlRXhwaXJlZFRpbWVycz12O3JlcXVpcmUo0QVzY2hlZCkuc2V0U2V0dGluZ3Moc2V0dGluZ3MpO319LNETRGVmYXVsdCBBdXRvIFNub296ZTp7dmFsdWU6c2V0dGluZ3MuZGVmYXVsdEF1dG9Tbm9vemUsb25jaGFuZ2U6dqJ7c2V0dGluZ3MuZGVmYXVsdEF1dG9Tbm9vemU9djtyZXF1aXJlKNEFc2NoZWQpLnNldFNldHRpbmdzKHNldHRpbmdzKTt9fSzRDkRlZmF1bHQgU25vb3plOnt2YWx1ZTpzZXR0aW5ncy5kZWZhdWx0U25vb3plTWlsbGlzLzYwMDAwLG1pbjo1LG1heDozMCxzdGVwOjUsZm9ybWF0OnaidivRAW0sb25jaGFuZ2U6dqJ7c2V0dGluZ3MuZGVmYXVsdFNub296ZU1pbGxpcz12KjYwMDAwO3JlcXVpcmUo0QVzY2hlZCkuc2V0U2V0dGluZ3Moc2V0dGluZ3MpO319LNEKQnV6eiBDb3VudDp7dmFsdWU6c2V0dGluZ3MuYnV6ekNvdW50LG1pbjo1LG1heDoxNSxzdGVwOjEsb25jaGFuZ2U6dqJ7c2V0dGluZ3MuYnV6ekNvdW50PXY7cmVxdWlyZSjRBXNjaGVkKS5zZXRTZXR0aW5ncyhzZXR0aW5ncyk7fX0s0Q1CdXp6IEludGVydmFsOnt2YWx1ZTpzZXR0aW5ncy5idXp6SW50ZXJ2YWxNaWxsaXMvMTAwMCxtaW46MSxtYXg6NSxzdGVwOjEsZm9ybWF0OnaidivRAXMsb25jaGFuZ2U6dqJ7c2V0dGluZ3MuYnV6ekludGVydmFsTWlsbGlzPXYqMTAwMDtyZXF1aXJlKNEFc2NoZWQpLnNldFNldHRpbmdzKHNldHRpbmdzKTt9fSzRFURlZmF1bHQgQWxhcm0gUGF0dGVybjpyZXF1aXJlKNEJYnV6el9tZW51KS5wYXR0ZXJuKHNldHRpbmdzLmRlZmF1bHRBbGFybVBhdHRlcm4sdqJ7c2V0dGluZ3MuZGVmYXVsdEFsYXJtUGF0dGVybj12O3JlcXVpcmUo0QVzY2hlZCkuc2V0U2V0dGluZ3Moc2V0dGluZ3MpO30pLNEVRGVmYXVsdCBUaW1lciBQYXR0ZXJuOnJlcXVpcmUo0QlidXp6X21lbnUpLnBhdHRlcm4oc2V0dGluZ3MuZGVmYXVsdFRpbWVyUGF0dGVybix2ontzZXR0aW5ncy5kZWZhdWx0VGltZXJQYXR0ZXJuPXY7cmVxdWlyZSjRBXNjaGVkKS5zZXRTZXR0aW5ncyhzZXR0aW5ncyk7fSl9KTt9KTv//xcOAABzY2hlZC5jbGtpbmZvLmpz");
  base64DecodeToExistingUint8Array(bufferView, 88660, "TW9kdWxlcy5hZGRDYWNoZWQo0Qp0aW1lX3V0aWxzLKooKXuuT05FX1NFQ09ORD0xMDAwO65PTkVfTUlOVVRFPTYwKk9ORV9TRUNPTkQ7rk9ORV9IT1VSPTYwKk9ORV9NSU5VVEU7rk9ORV9EQVk9MjQqT05FX0hPVVI7ZXhwb3J0cy5lbmNvZGVUaW1lPSh0aW1lKaJ7dGltZT1zYWZlVGltZSh0aW1lKTurdGltZS5kKk9ORV9EQVkrdGltZS5oKk9ORV9IT1VSK3RpbWUubSpPTkVfTUlOVVRFK3RpbWUucypPTkVfU0VDT05EO32qc2FmZVRpbWUodGltZSl7q3tkOnRpbWUuZKAwLGg6dGltZS5ooDAsbTp0aW1lLm2gMCxzOnRpbWUuc6AwfTt9ZXhwb3J0cy5kZWNvZGVUaW1lPShtaWxsaXMponujKL9taWxsaXON0QZudW1iZXIpsNEcT25seSBhIG51bWJlciBjYW4gYmUgZGVjb2RlZDusZD1NYXRoLmZsb29yKG1pbGxpcy9PTkVfREFZKTttaWxsaXOXZCpPTkVfREFZO6xoPU1hdGguZmxvb3IobWlsbGlzL09ORV9IT1VSKTttaWxsaXOXaCpPTkVfSE9VUjusbT1NYXRoLmZsb29yKG1pbGxpcy9PTkVfTUlOVVRFKTttaWxsaXOXbSpPTkVfTUlOVVRFO6xzPU1hdGguZmxvb3IobWlsbGlzL09ORV9TRUNPTkQpO6t7ZDpkLGg6aCxtOm0sczpzfTt9ZXhwb3J0cy5mb3JtYXRUaW1lPSh2YWx1ZSmie6x0aW1lPXNhZmVUaW1lKL92YWx1ZYvRBm9iamVjdD92YWx1ZTpleHBvcnRzLmRlY29kZVRpbWUodmFsdWUpKTujKHRpbWUuZIwwKbDRF2RheXMgbm90IHN1cHBvcnRlZCBoZXJlO6ModGltZS5oPDCgdGltZS5oPjIzKbDRI0ludmFsaWQgdmFsdWU6IG11c3QgYmUgMCA8PSBoIDw9IDIzO6ModGltZS5tPDCgdGltZS5tPjU5KbDRI0ludmFsaWQgdmFsdWU6IG11c3QgYmUgMCA8PSBtIDw9IDU5O6t0aW1lLmgr0QE6KyjRATArdGltZS5tKS5zdWJzdHIoLTIpO31leHBvcnRzLmZvcm1hdER1cmF0aW9uPSh2YWx1ZSxjb21wYWN0KaJ7Y29tcGFjdD1jb21wYWN0oLU7rGR1cmF0aW9uPdEAO6x0aW1lPXNhZmVUaW1lKL92YWx1ZYvRBm9iamVjdD92YWx1ZTpleHBvcnRzLmRlY29kZVRpbWUodmFsdWUpKTujKHRpbWUuZD4wKWR1cmF0aW9ulnRpbWUuZCvRAmQgO6ModGltZS5oPjApZHVyYXRpb26WdGltZS5oK9ECaCA7oyh0aW1lLm0+MClkdXJhdGlvbpZ0aW1lLm0r0QJtIDujKHRpbWUucz4wKWR1cmF0aW9ulnRpbWUucyvRAXNkdXJhdGlvbj1kdXJhdGlvbi50cmltKCmrY29tcGFjdD9kdXJhdGlvbi5yZXBsYWNlKNEBICzRACk6ZHVyYXRpb247fWV4cG9ydHMuZ2V0Q3VycmVudFRpbWVNaWxsaXM9KCmie6x0aW1lPbhEYXRlKCk7qyh0aW1lLmdldEhvdXJzKCkqMzYwMCt0aW1lLmdldE1pbnV0ZXMoKSo2MCt0aW1lLmdldFNlY29uZHMoKSkqMTAwMDt9fSk7KKooKXuuYWxhcm09cmVxdWlyZSjRBXNjaGVkKTuuaWNvbkFsYXJtT2490UwYGIEAAAAAAAAABgBgDgBwHH44Of+cA//AB//gD+fwD+fwH+f4H+f4H+f4H+f4H+H4H/j4D/7wD//wB//gA//AAf+AAH4AAAAAAAAAO65pY29uQWxhcm1PZmY90UwYGIEAAAAAAAAABgBgDgBwHH44Of+cA//AB//gD+fwD+fwH+f4H+f4H+cAH+YAH+B4H/n+D/m2D/MDB/OHA/OHAfMDAHm2AAH+AAB4O65pY29uVGltZXJPbj3RTBgYgQ==");
  base64DecodeToExistingUint8Array(bufferView, 90222, "B//gB//gAYGAAYGAAYGAAP8AAP8AAH4AADwAADwAAH4AAOcAAMMAAYGAAYGAAYGAB//gB//g");
  base64DecodeToExistingUint8Array(bufferView, 90285, "O65pY29uVGltZXJPZmY90UwYGIE=");
  base64DecodeToExistingUint8Array(bufferView, 90315, "B//gB//gAYGAAYGAAYGAAP8AAP8AAH4AADwAADwAAH4AAOR4AMH+AYG2AYMDAYOHB/OHB/MDAAG2AAH+AAB4O6pnZXRBbGFybVZhbHVlKGEpe61taW49TWF0aC5yb3VuZChhbGFybS5nZXRUaW1lVG9BbGFybShhKS8oNjAqMTAwMCkpO6MoIW1pbimrMDurZ2V0QWxhcm1NYXgoYSktbWluO32qZ2V0QWxhcm1NYXgoYSl7oyhhLnRpbWVyKatNYXRoLnJvdW5kKGEudGltZXIvKDYwKjEwMDApKTurMTQ0MDt9qmdldEFsYXJtSWNvbihhKXujKGEub24pe6MoYS50aW1lcimraWNvblRpbWVyT247q2ljb25BbGFybU9uO32ke6MoYS50aW1lcimraWNvblRpbWVyT2ZmO6tpY29uQWxhcm1PZmY7fX2qZ2V0QWxhcm1UZXh0KGEpe6MoYS50aW1lcil7oyghYS5vbimr0QNvZmY7rXRpbWU9TWF0aC5yb3VuZChhbGFybS5nZXRUaW1lVG9BbGFybShhKS8oNjAqMTAwMCkpO6ModGltZT42MCl0aW1lPU1hdGgucm91bmQodGltZS82MCkr0QFoO6R0aW1lltEBbTurdGltZTt9q3JlcXVpcmUo0Qp0aW1lX3V0aWxzKS5mb3JtYXRUaW1lKGEudCk7fapnZXRBbGFybU9yZGVyKGEpe612YWw9YWxhcm0uZ2V0VGltZVRvQWxhcm0oYSk7oyi/dmFsitEJdW5kZWZpbmVkKas4NjQwMCoxMDAwO6t2YWw7fapnZXRSZWZyZXNoSW50ZXJ2YWxzKGEpe65taW51dGU9NjAqMTAwMDuuaGFsZmhvdXI9MzAqbWludXRlO65ob3VyPTIqaGFsZmhvdXI7rW1zZWNzPWFsYXJtLmdldFRpbWVUb0FsYXJtKGEpO6Mov21zZWNzitEJdW5kZWZpbmVkoG1zZWNzijApq1tdO6MobXNlY3M+aG91cil7rXJlbWFpbj0obXNlY3MrbWludXRlKSVoYWxmaG91cjujKHJlbWFpbjwyNyptaW51dGWecmVtYWlujDApq1toYWxmaG91cixyZW1haW5dO6tbaGFsZmhvdXIsbXNlY3MtaG91cl07faR7oyghYS50aW1lcimrW107q1ttaW51dGUsbXNlY3NdO319ql9kb0ludGVydmFsKGludGVydmFsKXurc2V0VGltZW91dCgoKaJ7ry5lbWl0KNEGcmVkcmF3KTuvLmludGVydmFsPXNldEludGVydmFsKCgponuvLmVtaXQo0QZyZWRyYXcpO30saW50ZXJ2YWwpO30saW50ZXJ2YWwpO32qX2RvU3dpdGNoVGltZW91dChhLHN3aXRjaFRpbWVvdXQpe6tzZXRUaW1lb3V0KCgponuvLmVtaXQo0QZyZWRyYXcpO2NsZWFySW50ZXJ2YWwory5pbnRlcnZhbCk7ry5pbnRlcnZhbD23O6x0bXA9Z2V0UmVmcmVzaEludGVydmFscyhhKTusaW50ZXJ2YWw9dG1wWzBdO6xzd2l0Y2hUaW1lb3V0PXRtcFsxXTujKCFpbnRlcnZhbCmrO68uaW50ZXJ2YWw9X2RvSW50ZXJ2YWwuY2FsbCivLGludGVydmFsKTuvLnN3aXRjaFRpbWVvdXQ9X2RvU3dpdGNoVGltZW91dC5jYWxsKK8sYSxzd2l0Y2hUaW1lb3V0KTt9LHN3aXRjaFRpbWVvdXQpO32saW1nPWljb25BbGFybU9uO6xhbGFybUl0ZW1zPXtuYW1lOtEGQWxhcm1zLGltZzppbWcsZHluYW1pYzq0LGl0ZW1zOmFsYXJtLmdldEFsYXJtcygpLmZpbHRlcihhoiFhLmFwcGlkKS5zb3J0KChhLGIpomdldEFsYXJtT3JkZXIoYSktZ2V0QWxhcm1PcmRlcihiKSkubWFwKChhLGkpoih7bmFtZTq2LGhhc1JhbmdlOrQsZ2V0Oigpoih7dGV4dDpnZXRBbGFybVRleHQoYSksaW1nOmdldEFsYXJtSWNvbihhKSx2OmdldEFsYXJtVmFsdWUoYSksbWluOjAsbWF4OmdldEFsYXJtTWF4KGEpfSksc2hvdzqqKCl7rHRtcD1nZXRSZWZyZXNoSW50ZXJ2YWxzKGEpO6xpbnRlcnZhbD10bXBbMF07rHN3aXRjaFRpbWVvdXQ9dG1wWzFdO6MoIWludGVydmFsKas7ry5pbnRlcnZhbD1fZG9JbnRlcnZhbC5jYWxsKK8saW50ZXJ2YWwpO68uc3dpdGNoVGltZW91dD1fZG9Td2l0Y2hUaW1lb3V0LmNhbGworyxhLHN3aXRjaFRpbWVvdXQpO30saGlkZTqqKCl7oyivLmludGVydmFsKWNsZWFySW50ZXJ2YWwory5pbnRlcnZhbCk7oyivLnN3aXRjaFRpbWVvdXQpY2xlYXJUaW1lb3V0KK8uc3dpdGNoVGltZW91dCk7ry5pbnRlcnZhbD23O68uc3dpdGNoVGltZW91dD23O30scnVuOqooKXt9fSkpLH07q2FsYXJtSXRlbXM7fSn/AgEAAHNjaGVkLmluZm8=");
  base64DecodeToExistingUint8Array(bufferView, 92300, "eyJpZCI6InNjaGVkIiwibmFtZSI6IlNjaGVkdWxlciIsInR5cGUiOiJzY2hlZHVsZXIiLCJpY29uIjoic2NoZWQuaW1nIiwidmVyc2lvbiI6IjAuMjIiLCJ0YWdzIjoidG9vbCxzeXN0ZW0sYWxhcm0sY2xraW5mbyIsImZpbGVzIjoic2NoZWQuaW5mbyxzY2hlZC5ib290LmpzLHNjaGVkLmpzLHNjaGVkLmltZyxzY2hlZCxzY2hlZC5zZXR0aW5ncy5qcyxzY2hlZC5jbGtpbmZvLmpzIiwiZGF0YSI6InNjaGVkLmpzb24sc2NoZWQuc2V0dGluZ3MuanNvbiJ9//8/AQAAd2lkYWxhcm0ud2lkLmpz");
  base64DecodeToExistingUint8Array(bufferView, 92592, "V0lER0VUU1vRBWFsYXJtXT17YXJlYTrRAnRsLHdpZHRoOjAsZHJhdzqqKCl7oyivLndpZHRoKWcucmVzZXQoKS5kcmF3SW1hZ2Uo0UsYGAEAAAAAAAAAGAAOGHAMPDAY/xgZ/5gx/4wz/8wz/8wD/8AD/8AD/8AD/8AD/8AD/8AH/+AP//AP//AAAAAAPAAAGAAAAAAAAAAsry54LK8ueSk7fSxyZWxvYWQ6qigpe1dJREdFVFNb0QVhbGFybV0ud2lkdGg9KHJlcXVpcmUo0QdTdG9yYWdlKS5yZWFkSlNPTijRCnNjaGVkLmpzb24sMSmgW10pLnNvbWUoYWxhcm2iYWxhcm0ub26eKGFsYXJtLmhpZGRlbo20KSk/MjQ6MDt9fTtXSURHRVRTW9EFYWxhcm1dLnJlbG9hZCgpO/+MAAAAd2lkYWxhcm0uaW5mbw==");
  base64DecodeToExistingUint8Array(bufferView, 92944, "eyJpZCI6IndpZGFsYXJtIiwibmFtZSI6IkFsYXJtcyBXaWRnZXQiLCJ0eXBlIjoid2lkZ2V0IiwidmVyc2lvbiI6IjAuMDEiLCJ0YWdzIjoidG9vbCxhbGFybSx3aWRnZXQiLCJmaWxlcyI6IndpZGFsYXJtLmluZm8sd2lkYWxhcm0ud2lkLmpzIn1UOQAAYWxhcm0uYXBwLmpz");
  base64DecodeToExistingUint8Array(bufferView, 93116, "TW9kdWxlcy5hZGRDYWNoZWQo0Qp0aW1lX3V0aWxzLKooKXuuT05FX1NFQ09ORD0xMDAwO65PTkVfTUlOVVRFPTYwKk9ORV9TRUNPTkQ7rk9ORV9IT1VSPTYwKk9ORV9NSU5VVEU7rk9ORV9EQVk9MjQqT05FX0hPVVI7ZXhwb3J0cy5lbmNvZGVUaW1lPSh0aW1lKaJ7dGltZT1zYWZlVGltZSh0aW1lKTurdGltZS5kKk9ORV9EQVkrdGltZS5oKk9ORV9IT1VSK3RpbWUubSpPTkVfTUlOVVRFK3RpbWUucypPTkVfU0VDT05EO32qc2FmZVRpbWUodGltZSl7q3tkOnRpbWUuZKAwLGg6dGltZS5ooDAsbTp0aW1lLm2gMCxzOnRpbWUuc6AwfTt9ZXhwb3J0cy5kZWNvZGVUaW1lPShtaWxsaXMponujKL9taWxsaXON0QZudW1iZXIpsNEcT25seSBhIG51bWJlciBjYW4gYmUgZGVjb2RlZDusZD1NYXRoLmZsb29yKG1pbGxpcy9PTkVfREFZKTttaWxsaXOXZCpPTkVfREFZO6xoPU1hdGguZmxvb3IobWlsbGlzL09ORV9IT1VSKTttaWxsaXOXaCpPTkVfSE9VUjusbT1NYXRoLmZsb29yKG1pbGxpcy9PTkVfTUlOVVRFKTttaWxsaXOXbSpPTkVfTUlOVVRFO6xzPU1hdGguZmxvb3IobWlsbGlzL09ORV9TRUNPTkQpO6t7ZDpkLGg6aCxtOm0sczpzfTt9ZXhwb3J0cy5mb3JtYXRUaW1lPSh2YWx1ZSmie6x0aW1lPXNhZmVUaW1lKL92YWx1ZYvRBm9iamVjdD92YWx1ZTpleHBvcnRzLmRlY29kZVRpbWUodmFsdWUpKTujKHRpbWUuZIwwKbDRF2RheXMgbm90IHN1cHBvcnRlZCBoZXJlO6ModGltZS5oPDCgdGltZS5oPjIzKbDRI0ludmFsaWQgdmFsdWU6IG11c3QgYmUgMCA8PSBoIDw9IDIzO6ModGltZS5tPDCgdGltZS5tPjU5KbDRI0ludmFsaWQgdmFsdWU6IG11c3QgYmUgMCA8PSBtIDw9IDU5O6t0aW1lLmgr0QE6KyjRATArdGltZS5tKS5zdWJzdHIoLTIpO31leHBvcnRzLmZvcm1hdER1cmF0aW9uPSh2YWx1ZSxjb21wYWN0KaJ7Y29tcGFjdD1jb21wYWN0oLU7rGR1cmF0aW9uPdEAO6x0aW1lPXNhZmVUaW1lKL92YWx1ZYvRBm9iamVjdD92YWx1ZTpleHBvcnRzLmRlY29kZVRpbWUodmFsdWUpKTujKHRpbWUuZD4wKWR1cmF0aW9ulnRpbWUuZCvRAmQgO6ModGltZS5oPjApZHVyYXRpb26WdGltZS5oK9ECaCA7oyh0aW1lLm0+MClkdXJhdGlvbpZ0aW1lLm0r0QJtIDujKHRpbWUucz4wKWR1cmF0aW9ulnRpbWUucyvRAXNkdXJhdGlvbj1kdXJhdGlvbi50cmltKCmrY29tcGFjdD9kdXJhdGlvbi5yZXBsYWNlKNEBICzRACk6ZHVyYXRpb247fWV4cG9ydHMuZ2V0Q3VycmVudFRpbWVNaWxsaXM9KCmie6x0aW1lPbhEYXRlKCk7qyh0aW1lLmdldEhvdXJzKCkqMzYwMCt0aW1lLmdldE1pbnV0ZXMoKSo2MCt0aW1lLmdldFNlY29uZHMoKSkqMTAwMDt9fSk7Ck1vZHVsZXMuYWRkQ2FjaGVkKNEKZGF0ZV91dGlscyyqKCl7ZXhwb3J0cy5kb3c9KGksYWJicmV2aWF0ZWQponusZG93PXJlcXVpcmUo0QZsb2NhbGUpLmRvdyh7Z2V0RGF5OigpoihpfDApJTd9LGFiYnJldmlhdGVkKS5zbGljZSgwLChhYmJyZXZpYXRlZIoyKT8xOjEwMCk7q2FiYnJldmlhdGVkijI/ZG93LnRvVXBwZXJDYXNlKCk6ZG93O31leHBvcnRzLmRvd3M9KGZpcnN0RGF5T2ZXZWVrLGFiYnJldmlhdGVkKaJ7rGRvd3M9W107rGxvY2FsZT1yZXF1aXJlKNEGbG9jYWxlKTunKKxpPTA7aTw3O2mYKXtkb3dzLnB1c2goZXhwb3J0cy5kb3coaSsoZmlyc3REYXlPZldlZWugMCksYWJicmV2aWF0ZWQpKX2rYWJicmV2aWF0ZWSKMj9kb3dzLm1hcChkb3eiZG93LnRvVXBwZXJDYXNlKCkpOmRvd3M7fTtleHBvcnRzLm1vbnRoPShpLGFiYnJldmlhdGVkKaJ7rG1vbnRoPXJlcXVpcmUo0QZsb2NhbGUpLm1vbnRoKHtnZXRNb250aDooKaIoMTErKGl8MCkpJTEyfSxhYmJyZXZpYXRlZCkuc2xpY2UoMCwoYWJicmV2aWF0ZWSKMik/MToxMDApO6thYmJyZXZpYXRlZIoyP21vbnRoLnRvVXBwZXJDYXNlKCk6bW9udGg7fWV4cG9ydHMubW9udGhzPShhYmJyZXZpYXRlZCmie6xtb250aHM9W107rGxvY2FsZT1yZXF1aXJlKNEGbG9jYWxlKTunKKxpPTA7aTwxMjtpmCltb250aHMucHVzaChsb2NhbGUubW9udGgoe2dldE1vbnRoOigpoml9LGFiYnJldmlhdGVkKS5zbGljZSgwLChhYmJyZXZpYXRlZIoyKT8xOjEwMCkpO6thYmJyZXZpYXRlZIoyP21vbnRocy5tYXAobW9udGiibW9udGgudG9VcHBlckNhc2UoKSk6bW9udGhzO307fSk7Ck1vZHVsZXMuYWRkQ2FjaGVkKNEEYnV6eiyqKCl7ZXhwb3J0cy5wYXR0ZXJuPXBhdHRlcm6iuFByb21pc2UocmVzb2x2ZaJ7qmRvQnV6eigpe6MocGF0dGVyborRACmrcmVzb2x2ZSgpO6xjPXBhdHRlcm5bMF07cGF0dGVybj1wYXR0ZXJuLnN1YnN0cigxKTuuQlVaWl9XRUFLPTAuMjUsQlVaWl9TVFJPTkc9MTuuU0hPUlRfTVM9MTAwLE1FRElVTV9NUz0yMDAsTE9OR19NUz01MDA7oyhjitEBLilCYW5nbGUuYnV6eihTSE9SVF9NUyxCVVpaX1dFQUspLnRoZW4oKCmic2V0VGltZW91dChkb0J1enosMTAwKSk7pKMoY4rRASwpQmFuZ2xlLmJ1enooTUVESVVNX01TLEJVWlpfV0VBSykudGhlbigoKaJzZXRUaW1lb3V0KGRvQnV6eiwxMDApKTukoyhjitEBLSlCYW5nbGUuYnV6eihMT05HX01TLEJVWlpfV0VBSykudGhlbigoKaJzZXRUaW1lb3V0KGRvQnV6eiwxMDApKTukoyhjitEBOilCYW5nbGUuYnV6eihTSE9SVF9NUyxCVVpaX1NUUk9ORykudGhlbigoKaJzZXRUaW1lb3V0KGRvQnV6eiwxMDApKTukoyhjitEBOylCYW5nbGUuYnV6eihNRURJVU1fTVMsQlVaWl9TVFJPTkcpLnRoZW4oKCmic2V0VGltZW91dChkb0J1enosMTAwKSk7pKMoY4rRAT0pQmFuZ2xlLmJ1enooTE9OR19NUyxCVVpaX1NUUk9ORykudGhlbigoKaJzZXRUaW1lb3V0KGRvQnV6eiwxMDApKTukc2V0VGltZW91dChkb0J1enosMTAwKTt9ZG9CdXp6KCk7fSk7fSk7Ck1vZHVsZXMuYWRkQ2FjaGVkKNEJYnV6el9tZW51LKooKXtleHBvcnRzLnBhdHRlcm49qih2YWx1ZSxjYWxsYmFjayl7rHBhdHRlcm5zPVvRACzRAS4s0QE6LNECLi4s0QI6OizRASws0QE7LNECLCws0QI7OyzRAS0s0QE9LNECLS0s0QI9PSzRAy4uLizRAzo6OizRAy0tLSzRAzs7OyzRAz09PV07q3t2YWx1ZTpNYXRoLm1heCgwLHBhdHRlcm5zLmluZGV4T2YodmFsdWUpKSxtaW46MCxtYXg6cGF0dGVybnMubGVuZ3RoLTEsZm9ybWF0OnaicGF0dGVybnNbdl2g0QNPZmYsb25jaGFuZ2U6dqJ7cmVxdWlyZSjRBGJ1enopLnBhdHRlcm4ocGF0dGVybnNbdl0pO2NhbGxiYWNrKHBhdHRlcm5zW3ZdKTt9fTt9fSk7CkJhbmdsZS5sb2FkV2lkZ2V0cygpOwpCYW5nbGUuZHJhd1dpZGdldHMoKTsKrnNldHRpbmdzPU9iamVjdC5hc3NpZ24oe3Nob3dDb25maXJtOrQsc2hvd0F1dG9Tbm9vemU6tCxzaG93SGlkZGVuOrR9LHJlcXVpcmUo0QdTdG9yYWdlKS5yZWFkSlNPTijRCmFsYXJtLmpzb24sMSmge30pOwquZmlyc3REYXlPZldlZWs9KHJlcXVpcmUo0QdTdG9yYWdlKS5yZWFkSlNPTijRDHNldHRpbmcuanNvbiy0KaB7fSkuZmlyc3REYXlPZldlZWugMDsKrldPUktEQVlTPTYyOwquV0VFS0VORD1maXJzdERheU9mV2Vlaz8xOTI6NjU7Cq5FVkVSWV9EQVk9Zmlyc3REYXlPZldlZWs/MjU0OjEyNzsKrklOVEVSVkFMUz1b0QNkYXks0QR3ZWVrLNEFbW9udGgs0QR5ZWFyXTsKrklOVEVSVkFMX0xBQkVMUz1b0QNEYXks0QRXZWVrLNEFTW9udGgs0QRZZWFyXTsKrmljb25BbGFybU9uPdEBACvRTBgYgQAAAAAAAAAGAGAOAHAcfjg5/5wD/8AH/+AP5/AP5/Af5/gf5/gf5/gf5/gf4fgf+PgP/vAP//AH/+AD/8AB/4AAfgAAAAAAAAA7rmljb25BbGFybU9mZj3RAQArKGcudGhlbWUuZGFyaz/RUBgYwQD/////AAAAAAAABgBgDgBwHH44Of+cA//AB//gD+fwD+fwH+f4H+f4H+cAH+YAH+B4H/n+D/m2D/MDB/OHA/OHAfMDAHm2AAH+AAB4OtFQGBjBAP//AAAAAAAAAAAGAGAOAHAcfjg5/5wD/8AH/+AP5/AP5/Af5/gf5/gf5wAf5gAf4Hgf+f4P+bYP8wMH84cD84cB8wMAebYAAf4AAHgpO65pY29uVGltZXJPbj3RAQArKGcudGhlbWUuZGFyaz/RUBgYwQD/////");
  base64DecodeToExistingUint8Array(bufferView, 97052, "B//gB//gAYGAAYGAAYGAAP8AAP8AAH4AADwAADwAAH4AAOcAAMMAAYGAAYGAAYGAB//gB//g");
  base64DecodeToExistingUint8Array(bufferView, 97115, "OtFQGBjBAP//");
  base64DecodeToExistingUint8Array(bufferView, 97135, "B//gB//gAYGAAYGAAYGAAP8AAP8AAH4AADwAADwAAH4AAOcAAMMAAYGAAYGAAYGAB//gB//g");
  base64DecodeToExistingUint8Array(bufferView, 97198, "KTuuaWNvblRpbWVyT2ZmPdEBACsoZy50aGVtZS5kYXJrP9FQGBjBAP////8=");
  base64DecodeToExistingUint8Array(bufferView, 97251, "B//gB//gAYGAAYGAAYGAAP8AAP8AAH4AADwAADwAAH4AAOR4AMH+AYG2AYMDAYOHB/OHB/MDAAG2AAH+AAB4OtFQGBjBAP//");
  base64DecodeToExistingUint8Array(bufferView, 97334, "");
  base64DecodeToExistingUint8Array(bufferView, 107824, "MDCEBmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmERFmZmZmZmZmZmZmZmZmZmYRERFmZmZmERFmZmZmERERZmZmZmZmZhERERERZmZmERFmZmYREREREWZmZmZmYREREREWZmbMzMzMZmZhERERERZmZmZmERERERFmzMzMzMzMzMxmERERERFmZmZhERERERbMzMzMzMzMzMzMYREREREWZmZhERERERzMzMzMzMzMzMzMwREREREWZmYRERERFMzMzEQz//8zRMzMzEERERERZmYRERERTMzMQ////////zTMzMQRERERZmYREREUzMzD//////////88zMxBERERZmYRERFMzMQ/////8A/////zTMzEERERZmYRERHMzE//////8A//////9MzMERERZmYREWzMxP//////8A///////0zMxhERZmZhFszMw///////8A///////zzMzGEWZmZhZszMP///////8A////////PMzGYWZmZmbMzE////////8A////////9MzMZmZmZmbMzD////////8A////////88zMZmZmZmbMxP////////8A/////////0zMZmZmZmbMxP////////8A/////////0zMZmZmZmzMw/////////8A/////////zzMxmZmZmzMw/////////8A/////////zzMxmZmZmzMz/////////MAP/////////zMxmZmZmzMz/////////BVD/////////zMxmZmZmzMz/////////BVA/////////zMxmZmZmzMz////////zQAAD////////zMxmZmZmzMw///////80PzAAP//////zzMxmZmZmzMw///////ND//MAA//////zzMxmZmZmbMxP/////zQ///8wAD/////0zMZmZmZmbMxP////80P////zAAP////0zMZmZmZmbMzD////ND//////MC////88zMZmZmZmbMzE///zQ///////8/////9MzMZmZmZmZszMP/80P/////////////PMzGZmZmZmZszMw//z/////////////zzMzGZmZmZmZmzMxP///////////////0zMxmZmZmZmZmbMzE//////////////9MzMZmZmZmZmZmbMzMQ////////////zTMzMZmZmZmZmZmZszMzD//////////88zMzGZmZmZmZmZmZmzMzMQ////////zTMzMxmZmZmZmZmZmZmFMzMzEQz//8zRMzMzEFmZmZmZmZmZmZhERzMzMzMzMzMzMzMwREWZmZmZmZmZmYRERbMzMzMzMzMzMzMYRERZmZmZmZmZmEREWZmzMzMzMzMzMxmZhERFmZmZmZmZmERFmZmZmbMzMzMZmZmZmERFmZmZmZmZmERZmZmZmZmZmZmZmZmZmYRFmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZhgEAABhbGFybS5zZXR0aW5ncy5qcw==");
  base64DecodeToExistingUint8Array(bufferView, 109012, "KKooYmFjayl7rXNldHRpbmdzPU9iamVjdC5hc3NpZ24oe3Nob3dDb25maXJtOrQsc2hvd0F1dG9Tbm9vemU6tCxzaG93SGlkZGVuOrR9LHJlcXVpcmUo0QdTdG9yYWdlKS5yZWFkSlNPTijRCmFsYXJtLmpzb24sMSmge30pO65zYXZlPSgponJlcXVpcmUo0QdTdG9yYWdlKS53cml0ZSjRCmFsYXJtLmpzb24sc2V0dGluZ3MpO65EQVRFX0ZPUk1BVFM9W9EHZGVmYXVsdCzRBG1tZGRdO65EQVRFX0ZPUk1BVFNfTEFCRUxTPVvRB0RlZmF1bHQs0QRNTUREXTuuYXBwTWVudT170QA6e3RpdGxlOtEFYWxhcm19LNEGPCBCYWNrOmJhY2ss0RBNZW51IERhdGUgRm9ybWF0Ont2YWx1ZTpEQVRFX0ZPUk1BVFMuaW5kZXhPZihzZXR0aW5ncy5tZW51RGF0ZUZvcm1hdKDRB2RlZmF1bHQpLGZvcm1hdDp2okRBVEVfRk9STUFUU19MQUJFTFNbdl0sbWluOjAsbWF4OkRBVEVfRk9STUFUUy5sZW5ndGgtMSxvbmNoYW5nZTp2onujKHY+MCl7c2V0dGluZ3MubWVudURhdGVGb3JtYXQ9REFURV9GT1JNQVRTW3ZdO32ke75zZXR0aW5ncy5tZW51RGF0ZUZvcm1hdDt9c2F2ZSgpO319LNEVU2hvdyBNZW51IEF1dG8gU25vb3plOnt2YWx1ZTohIXNldHRpbmdzLnNob3dBdXRvU25vb3plLG9uY2hhbmdlOnaie3NldHRpbmdzLnNob3dBdXRvU25vb3plPXY7c2F2ZSgpO319LNERU2hvdyBNZW51IENvbmZpcm06e3ZhbHVlOiEhc2V0dGluZ3Muc2hvd0NvbmZpcm0sb25jaGFuZ2U6dqJ7c2V0dGluZ3Muc2hvd0NvbmZpcm09djtzYXZlKCk7fX0s0RBTaG93IE1lbnUgSGlkZGVuOnt2YWx1ZTohIXNldHRpbmdzLnNob3dIaWRkZW4sb25jaGFuZ2U6dqJ7c2V0dGluZ3Muc2hvd0hpZGRlbj12O3NhdmUoKTt9fSzRD1Nob3cgTWVudSBHcm91cDp7dmFsdWU6ISFzZXR0aW5ncy5zaG93R3JvdXAsb25jaGFuZ2U6dqJ7c2V0dGluZ3Muc2hvd0dyb3VwPXY7c2F2ZSgpO319LNESU2hvdyBUZXh0IE92ZXJmbG93Ont2YWx1ZTohIXNldHRpbmdzLnNob3dPdmVyZmxvdyxvbmNoYW5nZTp2ontzZXR0aW5ncy5zaG93T3ZlcmZsb3c9djtzYXZlKCk7fX0sfTtFLnNob3dNZW51KGFwcE1lbnUpO30pO8YAAABhbGFybS5pbmZv");
  base64DecodeToExistingUint8Array(bufferView, 110092, "eyJpZCI6ImFsYXJtIiwibmFtZSI6IkFsYXJtcyIsInNyYyI6ImFsYXJtLmFwcC5qcyIsImljb24iOiJhbGFybS5pbWciLCJ2ZXJzaW9uIjoiMC40NiIsInRhZ3MiOiJ0b29sLGFsYXJtIiwiZmlsZXMiOiJhbGFybS5pbmZvLGFsYXJtLmFwcC5qcyxhbGFybS5pbWcsYWxhcm0uc2V0dGluZ3MuanMiLCJkYXRhIjoiYWxhcm0uc2V0dGluZ3MuanNvbiJ9//8=");
  base64DecodeToExistingUint8Array(bufferView, 110313, "AQEBAQE=");
  base64DecodeToExistingUint8Array(bufferView, 110336, "");
  base64DecodeToExistingUint8Array(bufferView, 146992, "PT0APT09ACE9ACE9PQA8PQA8PAA8PD0APj0APj4APj4+AD4+PQA+Pj49ACs9AC09ACsrAC0tACo9AC89ACU9ACY9ACYmAHw9AHx8AF49AD0+AGlmAGVsc2UAZG8Ad2hpbGUAZm9yAGJyZWFrAGNvbnRpbnVlAGZ1bmN0aW9uAHJldHVybgB2YXIAbGV0AGNvbnN0AHRoaXMAdGhyb3cAdHJ5AGNhdGNoAGZpbmFsbHkAdHJ1ZQBmYWxzZQBudWxsAHVuZGVmaW5lZABuZXcAaW4AaW5zdGFuY2VvZgBzd2l0Y2gAY2FzZQBkZWZhdWx0AGRlbGV0ZQB0eXBlb2YAdm9pZABkZWJ1Z2dlcgBjbGFzcwBleHRlbmRzAHN1cGVyAHN0YXRpYwBvZg==");
  base64DecodeToExistingUint8Array(bufferView, 147300, "Pz8AADAAAAAAZGVlcFNsZWVwAHVuc2FmZUZsYXNoAHVuc3luY0ZpbGVzAHByZXRva2VuaXNlAGppdERlYnVn");
  base64DecodeToExistingUint8Array(bufferView, 147378, "B4AyAAAABwABgDMAAAAPAAGANAAAABcACIA1AAAAHABYgDYAAAAiAHiANwAAACYAA4A4AAAAKwAAgDkAAAAxAACAOgAAADUAA4A7AAAAPAAYgDwAAABCANiBPQAAAGFuYWxvZwBnZXRJbmZvAGdldE1vZGUAbW9kZQBwdWxzZQBwd20AcmVhZAByZXNldABzZXQAdG9nZ2xlAHdyaXRlAHdyaXRlQXRUaW1lAAAAAAARACAAAAAGACEALwAAABIAAQAwAAAAIgAFcD4AAAAmAAVwPwAAACsAAQAcAAAAMgABAB8AAAA8AAsAQAAAAEQACQkLAAAATQARAAwAAABSAAEAHQAAAFQACQANAAAAWgAJCUEAAABnAAkJQgAAAHQAEQAxAAAAfQABAAoAAACGAARwQwAAAIsAAQAYAAAAjwABcEQAAACUAAdwRQAAAJ0ACQlGAAAAqAAJCUcAAACzAAkJSAAAAL0ACQAQAAAAywABACIAAADQAAFwSQAAANQAAXBJAAAA2QABcEoAAADeAARwSwAAAOIAAXBMAAAA7AABcE0AAAD2AAEAJwAAAPsAAQAmAAAAAwEBAB4AAAAHAQdwTgAAAAsBEQAjAAAAEgEJACQAAAAZASkAEwAAACEBCQAbAAAAJQEJABQAAAAtAQkAEQAAADwBSQASAAAAQwEBABcAAABHAQFwTwAAAEwBAQAVAAAAUwEBcFAAAABbAQEAFgAAAGcBEQAlAAAAbgEJAA4AAAB6AQEAGgAAAI0BAXBRAAAAlgEJAA8AAACgAQFwUgAAAKQBCQlTAAAAsAEJCVQAAAC8AQkJVQAAAMgBCQlWAAAA0wEJCVcAAADlAQVwWAAAAO0BYQAZAAAA9gEvAFkAAAABAugDWgAAAA0CAXBbAAAAFwIJAFwAAAAcAgkAXQAAACECyAFeAAAAMAIQAF8AAAA+AhAAYAAAAEsCEABhAAAAVgIBACEAAABeAgkAYgAAAHEC6AJjAAAAfgIMAGQAAACKAggBZQAAAJcCAABmAAAAnAIYAGcAAAChAggAaAAAAKYCCQBpAAAAuQIJAAkAAAC+AgEAKQAAAMECKQBqAAAAzAIBAGsAAADWAgcAbAAAAN4CAXBtAAAA5QILAG4AAADuAgsAbwAAAPQCCABwAAAA+QIPAHEAAAAEA0kAcgAAAA0DIQFzAAAAFAMhAXQAAAAbAyEBdQAAACEDaAZ2AAAAKQNgAHcAAAAwA2AAeAAAADcDYAB5AAAAPQMQAHoAAABDAwEAKgAAAEsDCQB7AAAAUwMYAHwAAABZAwgAfQAAAGoDyQV+AAAAdgMIAH8AAACIAzgAgAAAAJADyQWBAAAAmwNJA4IAAACkA0gCgwAAAK0DCACEAAAAQXJyYXkAQXJyYXlCdWZmZXIAQXJyYXlCdWZmZXJWaWV3AEJUTgBCVE4xAEJhbmdsZQBCbHVldG9vdGgAQm9vbGVhbgBEYXRhVmlldwBEYXRlAEUARXJyb3IARmxvYXQzMkFycmF5AEZsb2F0NjRBcnJheQBGdW5jdGlvbgBHcmFwaGljcwBISUdIAEkyQwBJMkMxAEluZmluaXR5AEludDE2QXJyYXkASW50MzJBcnJheQBJbnQ4QXJyYXkASW50ZXJuYWxFcnJvcgBKU09OAExFRABMRUQxAExFRDIATE9XAExvb3BiYWNrQQBMb29wYmFja0IATWF0aABNb2R1bGVzAE5SRgBOYU4ATnVtYmVyAE9iamVjdABPbmVXaXJlAFBpbgBQcm9taXNlAFJlZmVyZW5jZUVycm9yAFJlZ0V4cABTUEkAU1BJMQBTZXJpYWwAU2VyaWFsMQBTdG9yYWdlRmlsZQBTdHJpbmcAU3ludGF4RXJyb3IAVEZNaWNyb0ludGVycHJldGVyAFRlcm1pbmFsAFR5cGVFcnJvcgBVU0IAVWludDE2QXJyYXkAVWludDI0QXJyYXkAVWludDMyQXJyYXkAVWludDhBcnJheQBVaW50OENsYW1wZWRBcnJheQBWSUJSQVRFAFdhdmVmb3JtAGFuYWxvZ1JlYWQAYW5hbG9nV3JpdGUAYXJndW1lbnRzAGF0b2IAYnRvYQBjaGFuZ2VJbnRlcnZhbABjbGVhckludGVydmFsAGNsZWFyVGltZW91dABjbGVhcldhdGNoAGNvbnNvbGUAZGVjb2RlVVJJQ29tcG9uZW50AGRpZ2l0YWxQdWxzZQBkaWdpdGFsUmVhZABkaWdpdGFsV3JpdGUAZHVtcABlY2hvAGVkaXQAZW5jb2RlVVJJQ29tcG9uZW50AGV2YWwAZnMAZ2V0UGluTW9kZQBnZXRTZXJpYWwAZ2V0VGltZQBnbG9iYWwAaXNGaW5pdGUAaXNOYU4AbG9hZABwYXJzZUZsb2F0AHBhcnNlSW50AHBlZWsxNgBwZWVrMzIAcGVlazgAcGluTW9kZQBwb2tlMTYAcG9rZTMyAHBva2U4AHByaW50AHByb2Nlc3MAcmVxdWlyZQByZXNldABzZXRCdXN5SW5kaWNhdG9yAHNldEludGVydmFsAHNldFNsZWVwSW5kaWNhdG9yAHNldFRpbWUAc2V0VGltZW91dABzZXRXYXRjaABzaGlmdE91dAB0cmFjZQ==");
  base64DecodeToExistingUint8Array(bufferView, 149378, "IQGFAAAACAAgAYYAAAAQAAFwhwAAABgAIQGIAAAAJAAgAYkAAAAwACEBigAAADUA4QGLAAAAOgAhAYwAAABEACABjQAAAE4AAQCOAAAAUgAAAI8AAABeABgAkAAAAGsAAQCRAAAAdAABAJIAAAB/AAEAkwAAAIkACQCUAAAAmQABAJUAAACkAAEAlgAAAKwAAQCXAAAAtwABAJgAAADDAAQAmQAAANAAIQGaAAAA1gAgAZsAAADcAAMAnAAAAOoAAwCdAAAA+AADAJ4AAAADAQMAnwAAAA8BAwCgAAAAFwEDAKEAAAAfAQMAogAAACcBAwCjAAAAMAFgAKQAAAA2AQgApQAAADsBAACmAAAARwEAAKcAAABLAQkAqAAAAFMBAACpAAAAYAEYAKoAAABtAVsAqwAAAH8BWwCsAAAAjwFbAK0AAACbAVsArgAAAKcBOACvAAAAuAEIALAAAADDASAAsQAAANABCAmyAAAA3gEYALMAAADqATgAtAAAAPgBGAC1AAAAAgIIALYAAAANAjgAtwAAAB0CIAC4AAAAKgJIALkAAAAwAgAAugAAADoCAAC7AAAARwIAALwAAABYAgAAvQ==");
  base64DecodeToExistingUint8Array(bufferView, 149840, "YWNjZWxSZABhY2NlbFdyAGFwcFJlY3QAYmFyb21ldGVyUmQAYmFyb21ldGVyV3IAYmVlcABidXp6AGNvbXBhc3NSZABjb21wYXNzV3IAZGJnAGRyYXdXaWRnZXRzAGZhY3RvcnlSZXNldABnZXRBY2NlbABnZXRDb21wYXNzAGdldEdQU0ZpeABnZXRIZWFsdGhTdGF0dXMAZ2V0TENETW9kZQBnZXRMb2dvAGdldE9wdGlvbnMAZ2V0UHJlc3N1cmUAZ2V0U3RlcENvdW50AGhybVJkAGhybVdyAGlzQmFja2xpZ2h0T24AaXNCYXJvbWV0ZXJPbgBpc0NoYXJnaW5nAGlzQ29tcGFzc09uAGlzR1BTT24AaXNIUk1PbgBpc0xDRE9uAGlzTG9ja2VkAGxjZFdyAGxvYWQAbG9hZFdpZGdldHMAb2ZmAHByb2plY3QAcmVzZXRDb21wYXNzAHNldEJhY2tsaWdodABzZXRCYXJvbWV0ZXJQb3dlcgBzZXRDb21wYXNzUG93ZXIAc2V0R1BTUG93ZXIAc2V0SFJNUG93ZXIAc2V0TENEQnJpZ2h0bmVzcwBzZXRMQ0RNb2RlAHNldExDRE9mZnNldABzZXRMQ0RPdmVybGF5AHNldExDRFBvd2VyAHNldExDRFRpbWVvdXQAc2V0TG9ja2VkAHNldE9wdGlvbnMAc2V0UG9sbEludGVydmFsAHNldFN0ZXBDb3VudABzZXRVSQBzaG93Q2xvY2sAc2hvd0xhdW5jaGVyAHNob3dSZWNvdmVyeU1lbnUAc29mdE9mZg==");
  base64DecodeToExistingUint8Array(bufferView, 150466, "CQC+AAAABgBIBr8AAAAKAPlPwAAAABMACQDBAAAAGgCIAMIAAAAeAP8PwwAAACMACADEAAAALQBPCMUAAAA2AEkCxgAAAEEAAADHAAAASAAAAMgAAABaAAEAyQAAAGIAAADKAAAAbQAAAMsAAAB7AHgAzAAAAIoACQDNAAAAkwDMAM4AAACgAAcAzwAAAK4ABADQAAAAuQABANEAAADEAAEA0gAAANIAAQDTAAAA2wAJAdQAAADlAAcA1QAAAPQABADWAAAA+wALANcAAAACAQAA2AAAAA8BAADZAAAAGwFJBtoAAAAoAUhC2wAAADMBIQHcAAAAPgFJAN0AAABIAWEC3gAAAFMBSALfAAAAWAEAAOAAAABfASQA4QAAAGsByADiAAAAdwEMAOMAAACAAUgA5AAAAIsBEADlAAAAkgEIAOYAAACbAQgA5wAAAKcBOADoAAAAswFJAOkAAAC9AQkA6gAAAMYBSADrAAAA0gFJAOwAAADdAQkA7QAAAOoBIADuAAAA8AEAAO8AAAAFAg8A8AAAAAkCCQDxAAAAFwIRAPIAAAAkAgkA8wAAACkCEQD0AAAAMgIRAPUAAAA/As8B9g==");
  base64DecodeToExistingUint8Array(bufferView, 150928, "Q1JDMzIARkZUAEhTQnRvUkdCAGFzVVRGOABhc20AY2xpcABjb21waWxlZEMAY29udm9sdmUAZGVjb2RlVVRGOABkZWZyYWcAZHVtcEZyYWdtZW50YXRpb24AZHVtcFN0cgBkdW1wVGltZXJzAGR1bXBWYXJpYWJsZXMAZW5hYmxlV2F0Y2hkb2cAZnJvbVVURjgAZ2V0QWRkcmVzc09mAGdldEFuYWxvZ1ZSZWYAZ2V0QmF0dGVyeQBnZXRDb25zb2xlAGdldEVycm9yRmxhZ3MAZ2V0RmxhZ3MAZ2V0U2l6ZU9mAGdldFRlbXBlcmF0dXJlAGh3UmFuZABpc1VURjgAa2lja1dhdGNoZG9nAGxvY2tDb25zb2xlAGxvb2t1cE5vQ2FzZQBtYXBJblBsYWNlAG1lbW9yeUFyZWEAbWVtb3J5TWFwAG5hdGl2ZUNhbGwAcGlwZQByZWJvb3QAcmV2ZXJzZUJ5dGUAc2V0Qm9vdENvZGUAc2V0Q2xvY2sAc2V0Q29uc29sZQBzZXREU1QAc2V0RmxhZ3MAc2V0UGFzc3dvcmQAc2V0VGltZVpvbmUAc2hvd0FsZXJ0AHNob3dNZW51AHNob3dNZXNzYWdlAHNob3dQcm9tcHQAc2hvd1Njcm9sbGVyAHNyYW5kAHN0b3BFdmVudFByb3BhZ2F0aW9uAHN1bQB0b0FycmF5QnVmZmVyAHRvRmxhdFN0cmluZwB0b0pTAHRvU3RyaW5nAHRvVWludDhBcnJheQB2YXJpYW5jZQ==");
  base64DecodeToExistingUint8Array(bufferView, 151522, "AYD3AAAABgAJgPgAAAAOAAGA+QAAABQATIL6AAAAHwAJgPsAAAAkABmA/AAAACoACcn9AAAANAAhif4AAAA/ACGJ/wAAAEwAIckAAQAAWAAJmQEBAABiAEmAAgEAAG0AIckDAQAAdgD5/wQBAACBAMmABQEAAIoAyYAGAQAAlQAJyQcBAACeAAm5CAEAAKkAAIAJAQAArgAhiQoBAAC5ACHJCwEAAMUACYAMAQAAzgAJgA0BAADZAAnJDgEAAOIAIYMPAQAA7AAEgBABAADzAASAEQEAAP4ABIASAQAABwEBgBMBAAAPAQSAFAEAAB0BAYAVAQAAJgEEgBYBAAAwARmAFwEAADwBJIEYAQAARQFJgBkBAABYAQSAGgEAAGEBCYAbAQAAbgEhgRwBAAB1ASGBHQEAAHwBSYAeAQAAjAEBgB8BAACSASGBIAEAAJkBSYIhAQAApAEhySIBAACwAUmCIwEAALkBCYEkAQAAwQEhgCUBAADOASGAJgEAANoBIYknAQAA5wEBgCgBAAD1AQnDKQEAAAMCCYAqAQAADgIhgCsBAAAcAiGDLAEAACUC4YAtAQAAMQIJgC4BAAA6AgmALwEAAEgCDIAwAQAAVAIB8DEBAABaAkyCMgEAAGICSYAzAQAAdAIJgTQBAABhc0JNUABhc0ltYWdlAGFzVVJMAGJsZW5kQ29sb3IAYmxpdABjbGVhcgBjbGVhclJlY3QAZHJhd0NpcmNsZQBkcmF3Q2lyY2xlQUEAZHJhd0VsbGlwc2UAZHJhd0ltYWdlAGRyYXdJbWFnZXMAZHJhd0xpbmUAZHJhd0xpbmVBQQBkcmF3UG9seQBkcmF3UG9seUFBAGRyYXdSZWN0AGRyYXdTdHJpbmcAZHVtcABmaWxsQ2lyY2xlAGZpbGxFbGxpcHNlAGZpbGxQb2x5AGZpbGxQb2x5QUEAZmlsbFJlY3QAZmxvb2RGaWxsAGdldEJQUABnZXRCZ0NvbG9yAGdldENvbG9yAGdldEZvbnQAZ2V0Rm9udEhlaWdodABnZXRGb250cwBnZXRIZWlnaHQAZ2V0TW9kaWZpZWQAZ2V0UGl4ZWwAZ2V0VmVjdG9yRm9udFBvbHlzAGdldFdpZHRoAGltYWdlTWV0cmljcwBsaW5lVG8AbW92ZVRvAHF1YWRyYXRpY0JlemllcgByZXNldABzY3JvbGwAc2V0QmdDb2xvcgBzZXRDbGlwUmVjdABzZXRDb2xvcgBzZXRGb250AHNldEZvbnQxMngyMABzZXRGb250NngxNQBzZXRGb250QWxpZ24Ac2V0Rm9udEJpdG1hcABzZXRGb250Q3VzdG9tAHNldEZvbnRQQkYAc2V0Rm9udFZlY3RvcgBzZXRQaXhlbABzZXRSb3RhdGlvbgBzZXRUaGVtZQBzdHJpbmdNZXRyaWNzAHN0cmluZ1dpZHRoAHRoZW1lAHRvQ29sb3IAdHJhbnNmb3JtVmVydGljZXMAd3JhcFN0cmluZwAAAAABADUBAAALAAEANgEAAB0ASAA3AQAALABIADgBAABnZXRBZGRyZXNzAGdldFNlY3VyaXR5U3RhdHVzAHNldEFkdmVydGlzaW5nAHNldFNlcnZpY2Vz");
  base64DecodeToExistingUint8Array(bufferView, 152752, "OQEAAHNldENvbnNvbGUAAAAAEYA6AQAABwBJgDsBAAANAAmDPAEAABIASYA9AQAAGQAJgD4BAAAeAAmAPwEAACgASIBAAQAAMAALgUEBAAA5AAmBQgEAAEEACYBDAQAARgAB8EQBAABNAEmARQEAAFEAAYBGAQAAVQAUgEcBAABaAEmASAEAAGEAAYBJAQAAaQABgEoBAABvAGGASwEAAHUASYBMAQAAegAJgE0BAAB/AGGETgEAAIYACYABAAAAjwAUgE8B");
  base64DecodeToExistingUint8Array(bufferView, 152960, "Y29uY2F0AGV2ZXJ5AGZpbGwAZmlsdGVyAGZpbmQAZmluZEluZGV4AGZvckVhY2gAaW5jbHVkZXMAaW5kZXhPZgBqb2luAGxlbmd0aABtYXAAcG9wAHB1c2gAcmVkdWNlAHJldmVyc2UAc2hpZnQAc2xpY2UAc29tZQBzb3J0AHNwbGljZQB0b1N0cmluZwB1bnNoaWZ0AAAAAAsAUAEAAGlzQXJyYXkAAAAAAAAABPBRAQAAYnl0ZUxlbmd0aAAAAAAB8FIBAAAHAATwUwEAABIABPBUAQAAHQAJgzwBAAAiAEmAPQEAACkACYA+AQAALgAJgD8BAAA4AEiAQAEAAEAAC4FBAQAASQAJgUIBAABRAAmAQwEAAFYASYBVAQAAWgBJgEgBAABhAAGASQEAAGkACIFWAQAAbQBhgEsBAABzAAmAVwEAAHgAYYBYAQAAYnVmZmVyAGJ5dGVMZW5ndGgAYnl0ZU9mZnNldABmaWxsAGZpbHRlcgBmaW5kAGZpbmRJbmRleABmb3JFYWNoAGluY2x1ZGVzAGluZGV4T2YAam9pbgBtYXAAcmVkdWNlAHJldmVyc2UAc2V0AHNsaWNlAHNvcnQAc3ViYXJyYXk=");
  base64DecodeToExistingUint8Array(bufferView, 153442, "4YBZAQAACwDhgFoBAAAWAOGAWwEAAB8A4YBcAQAAKADhgF0BAAAwAOGAXgEAADoA4YBfAQAARADhgGABAABNAGCGYQEAAFgAYIZiAQAAYwBghmMBAABsAGCGZAEAAHUAYIZlAQAAfQBghmYBAACHAGCGZwEAAJEAYIZoAQAAZ2V0RmxvYXQzMgBnZXRGbG9hdDY0AGdldEludDE2AGdldEludDMyAGdldEludDgAZ2V0VWludDE2AGdldFVpbnQzMgBnZXRVaW50OABzZXRGbG9hdDMyAHNldEZsb2F0NjQAc2V0SW50MTYAc2V0SW50MzIAc2V0SW50OABzZXRVaW50MTYAc2V0VWludDMyAHNldFVpbnQ4");
  base64DecodeToExistingUint8Array(bufferView, 153730, "BwBpAQAABAAPAGoBAABub3cAcGFyc2U=");
  base64DecodeToExistingUint8Array(bufferView, 153762, "BIBrAQAACAAEgGwBAAAPAASAbQEAABsABIBuAQAAJAAEgG8BAAAtAASAcAEAAD0ABIBxAQAASAAEgHIBAABRAASAcwEAAFwAB4B0AQAAZAAEgHUBAAB2ACeAdgEAAH4AZ4J3AQAAigBnkngBAACTACeAeQEAAKMAZ4J6AQAArgBngHsBAAC3AGeAfAEAAMIAP4B9AQAAygABgH4BAADWAAGAfgEAAN0AAYB/AQAA7gABgIABAAD3AAGAgQEAAAMBB4B0AQ==");
  base64DecodeToExistingUint8Array(bufferView, 153968, "Z2V0RGF0ZQBnZXREYXkAZ2V0RnVsbFllYXIAZ2V0SG91cnMAZ2V0SXNEU1QAZ2V0TWlsbGlzZWNvbmRzAGdldE1pbnV0ZXMAZ2V0TW9udGgAZ2V0U2Vjb25kcwBnZXRUaW1lAGdldFRpbWV6b25lT2Zmc2V0AHNldERhdGUAc2V0RnVsbFllYXIAc2V0SG91cnMAc2V0TWlsbGlzZWNvbmRzAHNldE1pbnV0ZXMAc2V0TW9udGgAc2V0U2Vjb25kcwBzZXRUaW1lAHRvSVNPU3RyaW5nAHRvSlNPTgB0b0xvY2FsSVNPU3RyaW5nAHRvU3RyaW5nAHRvVVRDU3RyaW5nAHZhbHVlT2YAAAAAAYCCAQAAdG9TdHJpbmcAAAAAAAABgIIBAAB0b1N0cmluZwAAAAAAAAGAggEAAHRvU3RyaW5nAAAAAAAAAYCCAQAAdG9TdHJpbmcAAAAAAAABgIIBAAB0b1N0cmluZwAAAAAAABAAegAAAAYAEAB6AAAADAAQAHoAAAARABAAegAAABUAEAB6");
  base64DecodeToExistingUint8Array(bufferView, 154384, "ZGVidWcAZXJyb3IAaW5mbwBsb2cAd2Fybg==");
  base64DecodeToExistingUint8Array(bufferView, 154418, "CQCDAQAABgBJAoQBAABwYXJzZQBzdHJpbmdpZnk=");
  base64DecodeToExistingUint8Array(bufferView, 154466, "B3CFAQAACgAHcIYBAAAUAAdwhwEAACYAB3CIAQAAKgAHcIkB");
  base64DecodeToExistingUint8Array(bufferView, 154512, "TUFYX1ZBTFVFAE1JTl9WQUxVRQBORUdBVElWRV9JTkZJTklUWQBOYU4AUE9TSVRJVkVfSU5GSU5JVFkAAAAAAAAAIYCKAQAAdG9GaXhlZA==");
  base64DecodeToExistingUint8Array(bufferView, 154610, "SICLAQAADAABgIwBAAASAIiAjQEAABcAC4COAQAAJgAB8EQBAAAtAEiAiwEAADAASICPAQAAQAAIgJABAABTAEiAkQEAAGIACYABAAAAawABgJIB");
  base64DecodeToExistingUint8Array(bufferView, 154704, "YWRkTGlzdGVuZXIAY2xvbmUAZW1pdABoYXNPd25Qcm9wZXJ0eQBsZW5ndGgAb24AcHJlcGVuZExpc3RlbmVyAHJlbW92ZUFsbExpc3RlbmVycwByZW1vdmVMaXN0ZW5lcgB0b1N0cmluZwB2YWx1ZU9m");
  base64DecodeToExistingUint8Array(bufferView, 154834, "EQCTAQAABwBJAJQBAAAOAEkAlQEAAB8ASQKWAQAALgAJAJcBAAA2AAkAmAEAAEIASQCZAQAAWwAJAJoBAAB1AAkAmwEAAIkACQCcAQAAmAAJAJ0BAACdAEkAngEAAKwACQCfAQ==");
  base64DecodeToExistingUint8Array(bufferView, 154944, "YXNzaWduAGNyZWF0ZQBkZWZpbmVQcm9wZXJ0aWVzAGRlZmluZVByb3BlcnR5AGVudHJpZXMAZnJvbUVudHJpZXMAZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yAGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMAZ2V0T3duUHJvcGVydHlOYW1lcwBnZXRQcm90b3R5cGVPZgBrZXlzAHNldFByb3RvdHlwZU9mAHZhbHVlcw==");
  base64DecodeToExistingUint8Array(bufferView, 155138, "SYCgAQAABgCJgKEBAAALAImAoAEAABAACICiAQAAYXBwbHkAYmluZABjYWxsAHJlcGxhY2VXaXRoAAAAAAAAAAmAowEAAAUAC4CkAQAAZXhlYwB0ZXN0");
  base64DecodeToExistingUint8Array(bufferView, 155234, "IYClAQAABwAhgKYBAAASABGApwEAABkAS4CoAQAAIgBLgKkBAAArAEyAqgEAADMATICrAQAAPwAB8EQBAABGAAmArAEAAEwAYYCtAQAAUwBhgK4BAABcAAGArwEAAGoAIYCwAQAAcQBJgLEBAAB5AGGAsgEAAH8ACYCzAQAAhQALgbQBAACQAGGAtQEAAJcAYYC2AQAAoQABgLcBAACtAAGAuAEAALkAAYC5AQAAY2hhckF0AGNoYXJDb2RlQXQAY29uY2F0AGVuZHNXaXRoAGluY2x1ZGVzAGluZGV4T2YAbGFzdEluZGV4T2YAbGVuZ3RoAG1hdGNoAHBhZEVuZABwYWRTdGFydAByZW1vdmVBY2NlbnRzAHJlcGVhdAByZXBsYWNlAHNsaWNlAHNwbGl0AHN0YXJ0c1dpdGgAc3Vic3RyAHN1YnN0cmluZwB0b0xvd2VyQ2FzZQB0b1VwcGVyQ2FzZQB0cmltAAAAAAARALoBAABmcm9tQ2hhckNvZGU=");
  base64DecodeToExistingUint8Array(bufferView, 155634, "SAC7AQAACgABALwBAAAUAAAAvQEAACQACAC+AQAAYWRkQ2FjaGVkAGdldENhY2hlZAByZW1vdmVBbGxDYWNoZWQAcmVtb3ZlQ2FjaGVk");
  base64DecodeToExistingUint8Array(bufferView, 155730, "B3C/AQAAAgAHcMABAAAHAAdwwQEAAAsAB3DCAQAAEgAHcMMBAAAYAAdwxAEAABsAB3DFAQAAIwAHcMYBAAApAD8AxwEAAC0APwDIAQAAMgA/AMkBAAA3AD8AygEAADwA/wHLAQAAQgA/AMwBAABHAP8PzQEAAEwAPwDOAQAAUAA/AM8BAABUAD8A0AEAAFoAPwDRAQAAXgAXANIBAABiABcA0wEAAGYA/wHUAQAAagAHANUBAABxADkA1gEAAHcAPADXAQAAfAA/ANgBAACAAD8A2QEAAIUAPwDaAQAAiQD/AdsB");
  base64DecodeToExistingUint8Array(bufferView, 155968, "RQBMTjEwAExOMgBMT0cxMEUATE9HMkUAUEkAU1FSVDFfMgBTUVJUMgBhYnMAYWNvcwBhc2luAGF0YW4AYXRhbjIAY2VpbABjbGlwAGNvcwBleHAAZmxvb3IAbG9nAG1heABtaW4AcG93AHJhbmRvbQByb3VuZABzaWduAHNpbgBzcXJ0AHRhbgB3cmFwAAAAAAAIANwBAAAKAAEA3QEAABIAIQDeAQAAGgAhAd8BAAAfAAgB4AE=");
  base64DecodeToExistingUint8Array(bufferView, 156160, "ZXJhc2VQYWdlAGdldEZyZWUAZ2V0UGFnZQByZWFkAHdyaXRlAAAAAAAASALfAAAAcGlwZQ==");
  base64DecodeToExistingUint8Array(bufferView, 156226, "AXDhAQAABAAJAOIBAAALAAFw4wE=");
  base64DecodeToExistingUint8Array(bufferView, 156256, "ZW52AG1lbW9yeQB2ZXJzaW9u");
  base64DecodeToExistingUint8Array(bufferView, 156290, "CYDkAQAABQADgOUBAAALACGA5gEAABIACIDnAQAAGQAAgOgBAAAeAMiA6QEAAHJlYWQAcmVzZXQAc2VhcmNoAHNlbGVjdABza2lwAHdyaXRl");
  base64DecodeToExistingUint8Array(bufferView, 156386, "CQDqAQAABAAJAOsBAAALAAkA7AE=");
  base64DecodeToExistingUint8Array(bufferView, 156416, "YWxsAHJlamVjdAByZXNvbHZl");
  base64DecodeToExistingUint8Array(bufferView, 156450, "CYDtAQAABgBJgO4BAABjYXRjaAB0aGVuAAAAACkA7wEAAGZpbmQ=");
  base64DecodeToExistingUint8Array(bufferView, 156498, "BIDwAQAACgAAgPEBAAAQABCA8gEAABcASIDfAAAAHAAIgPMBAAAiAAiA9AEAACoAIYD1AQAALwAYgPYBAAA6AEiA9wEAAEAAAID4AQAASAAQgPkB");
  base64DecodeToExistingUint8Array(bufferView, 156592, "YXZhaWxhYmxlAGZsdXNoAGluamVjdABwaXBlAHByaW50AHByaW50bG4AcmVhZABzZXRDb25zb2xlAHNldHVwAHVuc2V0dXAAd3JpdGUAAAAAABgA+gEAAAgACAD7AQAADgAAAPwBAAAXABwA/QEAAB8AGQD+AQAAKAAMAP8BAAAtAEkAAAIAADIASQABAgAANwAAAAICAABAAAkJAwIAAEUACQAEAgAAVQDJAAUCAABeAEtIBgIAAGQASwAHAgAAY29tcGFjdABlcmFzZQBlcmFzZUFsbABnZXRGcmVlAGdldFN0YXRzAGhhc2gAbGlzdABvcGVuAG9wdGltaXNlAHJlYWQAcmVhZEFycmF5QnVmZmVyAHJlYWRKU09OAHdyaXRlAHdyaXRlSlNPTgAAAAAAAIAIAgAABgAEgAkCAAAQAEiA3wAAABUAIYAKAgAAGgABgAsCAAAjAAiADAIAAGVyYXNlAGdldExlbmd0aABwaXBlAHJlYWQAcmVhZExpbmUAd3JpdGUAAAAAAAApAA0CAABmaW5k");
  base64DecodeToExistingUint8Array(bufferView, 157010, "SYEOAgAABQAI2Q8CAAAOAAjZEAIAABcACIARAgAAHQAQgBIC");
  base64DecodeToExistingUint8Array(bufferView, 157056, "c2VuZABzZW5kNGJpdABzZW5kOGJpdABzZXR1cAB3cml0ZQAAAAApABMCAABmaW5k");
  base64DecodeToExistingUint8Array(bufferView, 157122, "CYEUAgAACQAhiRUCAAARAAiAFgIAABcAiIAXAgAAcmVhZEZyb20AcmVhZFJlZwBzZXR1cAB3cml0ZVRvAAAAAOiDGAIAAAsA6IMZAgAAFwAAgBoC");
  base64DecodeToExistingUint8Array(bufferView, 157216, "c3RhcnRJbnB1dABzdGFydE91dHB1dABzdG9wAAAAAAAAAAkAGwIAAAkACQAcAgAAY29tcHJlc3MAZGVjb21wcmVzcw==");
  base64DecodeToExistingUint8Array(bufferView, 157298, "IRkdAgAAEgAhGR4CAAAhAAkAHwIAAC0AAQAgAgAAY3JlYXRlQXJyYXlCdWZmZXIAY3JlYXRlQ2FsbGJhY2sAY3JlYXRlSW1hZ2UAZ2V0SW5zdGFuY2U=");
  base64DecodeToExistingUint8Array(bufferView, 157394, "CQAhAgAABQAJACICAAAMAAkAIwIAABMACQAkAgAAGgAJACUC");
  base64DecodeToExistingUint8Array(bufferView, 157440, "U0hBMQBTSEEyMjQAU0hBMjU2AFNIQTM4NABTSEE1MTIAAAAAAABhACYCAABjcmVhdGU=");
  base64DecodeToExistingUint8Array(bufferView, 157506, "AYAnAgAACQABgCgCAAATAACAKQI=");
  base64DecodeToExistingUint8Array(bufferView, 157536, "Z2V0SW5wdXQAZ2V0T3V0cHV0AGludm9rZQAAAAAAAACoPwIAqD8CAACwPwIAEEACAAxgQAIAwEMCAGyARwIAUEkCADnASwIAkE0CADngTwIA0FECAD5QVAIAcFQCAASsVAIAtFQCAAHAVAIAgFUCABcYVgIAIFYCAAEsVgIANFYCAAFAVgIA0FYCABJgVwIA4FcCABCAWAIAkFgCAAKgWAIAcFkCABl8WgIAhFoCAAGQWgIAmFoCAAGkWgIArFoCAAG4WgIAwFoCAAHMWgIA1FoCAAHgWgIAEFsCAAUwWwIAQFsCAAJgWwIAkFsCAAXQWwIA2FsCAAHwWwIAUFwCAAvQXAIAQF0CAA0AXgIAIF4CAARAXgIAUF4CAAJgXgIAEF8CABbQXwIA2F8CAAHwXwIAEGACAARQYAIAQGECAB3QYQIAAGICAAUoYgIAMGICAAFAYgIAYGICAAOAYgIAsGICAAbgYgIAAGMCAAMgYwIAMGMCAAI8YwIARGMCAAFQYwIAsGMCAAsAZAIAcGQCAA7gZAIAEGUCAAY8ZQIARGUCAAFQZQIAgGUCAAWkZQIArGUCAAHAZQIA4GUCAAQAZgIAIGYCAANAZgIAUGYCAAJwZgIAkGYCAATQZgIAAGcCAAUkZwIALGcCAAFAZwIAYGcCAANQaW4AQmFuZ2xlAEUAR3JhcGhpY3MATlJGAEJsdWV0b290aABBcnJheQBBcnJheUJ1ZmZlcgBBcnJheUJ1ZmZlclZpZXcAVWludDhBcnJheQBVaW50OENsYW1wZWRBcnJheQBJbnQ4QXJyYXkAVWludDE2QXJyYXkASW50MTZBcnJheQBVaW50MjRBcnJheQBVaW50MzJBcnJheQBJbnQzMkFycmF5AEZsb2F0MzJBcnJheQBGbG9hdDY0QXJyYXkARGF0YVZpZXcARGF0ZQBFcnJvcgBTeW50YXhFcnJvcgBUeXBlRXJyb3IASW50ZXJuYWxFcnJvcgBSZWZlcmVuY2VFcnJvcgBGdW5jdGlvbgBjb25zb2xlAEpTT04ATnVtYmVyAE9iamVjdABCb29sZWFuAFJlZ0V4cABTdHJpbmcATW9kdWxlcwBNYXRoAGZzAHByb2Nlc3MAT25lV2lyZQBQcm9taXNlAFNlcmlhbABTdG9yYWdlRmlsZQBTUEkASTJDAFdhdmVmb3JtAFRGTWljcm9JbnRlcnByZXRlcgAAZw==");
  base64DecodeToExistingUint8Array(bufferView, 158464, "alXqH0ItwEdCXwAEliQWcwNTBgOHBAAAABAAEAIgx0ESRCAAkj11UpVUFXP6HQAA3yVkWnY0qRqWJAAAAAAAAJIuABGSLiAAlixpW3pN4FtaLQAA/lclWbV7JVs+VwAAT1mKeYp5anlXfwAAlWVvW29br28VVwAAe1tUW1J7UX/WVQAA7U9tSLooFRnVHwAAFwgpZAEQAXDHcQAARBDeJGV/ZSneJgAAoEQzUK1tq1TpVQYIBgCyZXpbelt/ZQBAAATrXrVVZVSjMwEAAABte70qf0d6cwAMk3eSfNZwknCTcQBwAwAEAAYABgAEAAMAQAGSCUQppxVEfSoIBChHGgSogiQA/LokBCg3GwAAAgBEIAAAhBAAAAQJRQAACUIAAIn/AQAJQgiAEEUIQCAAEAAEAAAACEccAIjJIgCQSgMfkEocgKBMIIAg9z8AQAAAAAAAAE588x3RQBQiRnkvHEGGSCLxx4giTjiHHAAAAAAAAAAADgABIJEQAhCREPQJDwAIBIEQ9AmOEAIQACABIMABAAAuEu84cZIYJaIqDyOkuggjYMYYJQRG7zjgAQAAAAAAAP+76A4QwkgCnMNPAhDeSCIQxkgiH7roHAAAAAAAAAAAEcboPBLuHCMU1hojHMYZPRLGGCHxx+ggAAAAAAAAAADOux8jMUISI9E7EiMxBhIVMkYSFS064ggBAAAAAADgIDHGjxBRRYEQlSiCCFURhAguEogEKpKPBAAA4AKOAAQgggACIEIB4DxCARAiIgLwIgIAECMCAPA8DnwAACCAAyAgAAQg7jn/PDBGFCMwfhQjMEL0Iu89FCIAAOAAREAGAABAAgDMRaI9REhSI0RwUiNESFIjTkRTI4ADAAAAAAAQAAAAEM4/6zwxxgwRMUboENE/GBAOBugPAAY=");
  base64DecodeToExistingUint8Array(bufferView, 159160, "McYYPzFGFQVRVRIJUVX1EI+oGD4AAOAAg2AADIQQABKEEAA4mIwEEJiMCjiEEAkShBAADINgAAAADAAAABAACAAQAAgAOAA+ABAACICRDQiAkFQJAGEJCARkAgCEaAceXxEoKAQgRywEwIAoH+xIKARsJx4EAAAAgABAGOADgAhPAMAQlAAAABYBAAAUAgAA7wMAAAAAAABpAwAAMgEAGlsSACwAOAAAAHz3AQA4AAAAEAAAAAAAAIAAAAgfAAAAy0EFPguiCgTAEQsIICAKEMDDBT4AAAAAAAACABEAYgAREIciCgDKHQQQihQEkIccBBByIwAQAgCROOUYkUAQBYowUB0fSJAlBCSQHZ8YUAGEBBABgHjgAAAA9xkAgAgkBYAOJAqADRjUgw4ASoANAEWACAAAAAcAgDEBAEQIkh6EEJA6HwmQGsQx0AoEAKAKHwCACgAAAAsAEAYkADAJJAAQSSkMEKkIDDhWEgABoBaAAEAvAAMAIhICZhxSAQAAVBJCCIQBpRSLEuccKaEYI3LFGCMzOgAAVhEAGISA4z6EEBYhSikLOc45DiExRhohMcbrPgAAQABGAWYc/3/nHBBCQgicc0IIEEJCCBBCQgj/f+ccAAAAAApYZhSOReccROUYI6TXGCMkzRgjRMUYI45F5xwAAAAAVoHADM4BFyMxghkjMaoaIzGSGiMxqhwjzgHnHAAACABKEQAYMUbIADFGLx0xqkgDMZI4HzESHyPOEWgfAAAAAMRZpQAAAEAAzjnnPCGEEArvvfc+McYYKe+99xYAAAAAgBmlGAAAAADOOecYMMYYCdB77wkQQggJ7733HAQAAABGKWUZAAAGAIwx4R2EEBcjhJAYI4SQGCPOORcdAAAAAEZZBQAAAAACzjlHHDHGCCYxxvgrMcYIMs45RxwAAAAgzChFIAAAACAxxhgtMcYYMzHGGDMxxvgs770XIAAA4CAKAAAAAAAAABEAAAARAAAAEQAAAA8AAAABAAAADgAAAAQEBAQEBAQEBB4EFRUeDAwEBAQEBAYEBAoKBAQLDg0KBgwHGBAEBAYEBAYLBCsMGxgUDAoGDAwQDAYOCh8QBAQOCAQHEAQECQoIBAgGBAQEFgQUBBUJBAwLBAQJBAwLBAQJHAkQBw8EBAkEChsEGxIWBAQEBBQEEQQeBAQEBAQeFAYGBhIOEAQEBAQEBAQLBgYECwsMEhMEBAQHCAQEFRQLBAQHBAQEBAwHBAQUBAQEBAQSGwQEBwgEBBUmCwQEBAQHCAQEBAQEBAAAAAAAAACpq8XDJymRjycpXVsqLGBeKy3HxS8xy8mCjaecT1p0aR0e1NMqKzpVU0VEUF1rbHuWo7zHxrecnqytoZSGhXZbTjUuMMXDKCo4Ul5dQVBFXUQpRTZBKUJdXE40lZelv8vKrr2yyrGWsqOulq/KybuhLDdQa8vNbVJGVGB2j5y3xsi9sX99lq6snpGFb1Y7HR9Eap7G7+3EnGhCGhxFbaHH7OrFn2tDKiyUkjVOiXA7VoNoaHCKgkRGrqyqrMbf3cRobYeCISPS0CosO1ZURkRQTjWcnqyuoqS9yMa3TlCenFRWpKIqLK6xy8OprERbQVRWY3yfuKuxy8OpkG1hVFZjfJekopWHhWttYSwuyshThIqknIInL0lDaoJeYG+KpKKIeniEgmknL0nHxUdBTlBda21hVFZjiG6XpKKVh4WRnpyPaoRbTlBqeHpuVFakooiJlJKDaFtdd3VcXnh2SWN5l7F1TlZwaIKKpJxBW3mPqX1UVmN8h5SSeGxtYayuyMZFSVhmgajAv6KWiJSisbytknlufZimpZmMcWJga4SeucjN2uXh0sSpdVxQKy3Ny1OknoWJU8XDJyw7VmN8bn2Ypb7Jxauvo5aIhGptYVRGQ8XDKy49S1ZHRlFqhJ+ur6Szv8rHuKqPW0I2Jyw7SWSYsb3IxautoolvVEVDxcMnL0lDam6IhKuxy8MnL0lDam6IhMXDe3+zsZeVJylqby4wzMqJhMXDJytFRKytx8OpqkJBLjClvsnGt5yRrJ6trqOvlicpdy4weczKhZHFwycpq7HLwycplZQwMs7MZK+uXcXDJymWLjDMyl3FwysuPUtmmrO/ysiur6SLcVZHRlFqhJ+uyMe4qo9bQjYnLDtWcImUkXd6blRGQ8XDsbzm24aIzMpOUF1rbXyXpKKVh4V2WycxS0fJx0VBJymenCcpoS8xyccnKcjGLC7MyjEzzMosLsjGJynNyy8xxcMnKW0vMYjJx4YnL0mrscvDqUdBGh85NtLV7+oaHNnXGh/v6tDTNzQrdXdSe33Q2PLqJylSUGBiysheX26Jo7zHraGHeXiEnqytx8a3nIJpJynFw15fbomHeXiEnqytoaO8x8a3nIJpLC7KyF5fbomjnoSHeXiEnqyuvMfGt5yCaSssRkVRxsRPNltgenVgYsrj7u3e0MTT1MheX26JysiHeXiEaVtdxcMnKUNBXV/H4Ovq0NHFKStFQycpkWBik8rIn6vFw2Nkc47PzYx+fYluW13s6mBi8e9eX258h3l4hGleX258iHl4hHeFhpWjvMfGt6mdrK2hrqCfkIJpKCqfra7Ix7idW12erK2hYGLKyLu8x8a3nFtdoGFjyMZbXcjGYGLMymVnzMqVyMZbXcvJYWPFw2JkyOHs69HSxltdrsdbYnyssMrDqXl1HyA6OUVfeISSrcfV1vDv4MWrkJ6PdWp2XUMqGhzs6hobKkVfemx7laCUrcfg6+rQ0cWrkoZ4XUM1NFFcdYKEd2t5lKOYf3JwfYl7YCwvPldIR1JrhaCvsKXAy8i5q5BcQzdocH11goqXj0FDXVt1d9/dUVJhfHpsa3eRn6CUlq+6uaqPdVxERcfGKyw7SVRGRVGSq7HLw6mQTzZoboiCQk5cdZCcqp6tlJKEal5gboiUraKwpJZ9YlZIVEVQdn6Lg5CYpZ2PkezqGhx3dSstR0UrLz5MZ5u0wMu+s5pmSzw4Q1yQq7q+y8e4qo9bQjZGSFdycGJgbIaUloqMpbCun4RqUV5shKCsgmFvh6OvhWhwsa+IgisvPDhDXJCrur7Lx7iqj1tCNi88S2aas77LwLSbZ0w+REhkfoqysIiWlHp8YmCurCcvSUE3OaGfqbHLw1tjfXUpK1BOnLjs6oKEnpzExdPg7Ord3tLf0V9rh5+tiVxohJyqhi8xxsQpKl5fbGlcXTZCNYqLzMuKi7CzwLyviYuZpr7Azcq9pZiWKCo4RVFEUl9raVxeUVBDRDc1eHqUoJ+ruMbIvL7X4uDRtqmQhURGYF4DBSAfBQcfHgQGIiASHhwEDxwRIBUIEwIEHhwGCCIgBAYULjo5HSwhOSAFIRIdBR45OCoQLDNNSXBzjYqxtc/Jop+GiEcuxcPIydfk8O7h4tbj1QIEHx4EBh4dAwUhHxEdGwEDHRsFByEfAAIdHAIEHBsoLEZFra7IxKqrQ0ICBCAeEBwaAAIcGgQGIB4oLTxKZZmyvsnGrK6jinBVRkTGxAQGISBCTrCkSFaqnDAyxcMnKZGcJylDRlVwiqOuq5GUiG5gXcXDKis6VWJue5exvcjGrK6ilXlsYFNFRFDFw041KStGRSosREMqLEhGOERCKjVCN0Y7LjkoKkRCLC5IRh0fLUdTUjZFOlI5HjorNh43UlFDKV5fbmNkc46oo4mMfn2Jo7GzwczLvMfFqZyEh6Gfq56sraGHeXdpxsfV4u7s3+DU4dNcXsbEJylEQygqQkFdX8fFKStHRTdDQSk1RF+JfFQ4LDpdT5KUrqxgYsXDKy1FRCcp7OotL0lHAAAAAAABAgMEBQYHCAkKCwwNAg4PEBESExQVFgAXGBkaGxwdGB4YGR8gGSEhGRgaIiMYGSQZGCUAFSYnKCkqKywYLS4vMDEyMzQwNTY3ODk6Ozw9Pjw/PUAYGUFCN0NERUZHSElKS0xNTk9QUFFSUFNUVVZXUFhRWVpbXF1RWFleWFlQUF9QYGFZYmNWZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXp7R3x9Wn5/gIGCg4SFhocLiImKi4xkjY6PkJGSk5GUkpGTlZaXmC6ZLpoumy6cnS6eLp8woDKhMqIyozKkpTamNqeoqaiqq6wWO5utPJk8mjybPJydPK6vsDyYsTeisTeasTecnbE3R5mys7RPULVPULZPULdPULi5T1BPULq7UrxUtFS1VLZUuLm9vlm/wMHAWn5QwsO3WFlQtFC1ULZQt1C4uROXxFDFZLRktWS2ZLi5aWrGx1BpalzIAAAAAAACAgQCAwEBAQEDAgEBAQEEAQIDAQMEAQMDAgIBAgEDAQEBAQEBAQIBAQEBAQEBAQECAgMBAgEBAgEBAQEBAQEBAgIBAgECAgICAgEBAwIBAgICAQIBAQECAgEBAQEBAAM=");
  base64DecodeToExistingUint8Array(bufferView, 162512, "AgICAQMCAAICAAIBAAMBAQMAAAECAAEBAAACAwMDAgICAgIDAgECAgICAwICAgMCAgICAgIDAgIDAwMEAgEBAwMDAwQDAQICAgIDAgICAwMDAgICAgMDAgICAgMDAgQABCEUpRznDGMAAAAAAAAAAJgvikKRRDdxz/vAtaXbtelbwlY58RHxWaSCP5LVXhyrmKoH2AFbgxK+hTEkw30MVXRdvnL+sd6Apwbcm3Txm8HBaZvkhke+78adwQ/MoQwkbyzpLaqEdErcqbBc2oj5dlJRPphtxjGoyCcDsMd/Wb/zC+DGR5Gn1VFjygZnKSkUhQq3JzghGy78bSxNEw04U1RzCmW7Cmp2LsnCgYUscpKh6L+iS2YaqHCLS8KjUWzHGeiS0SQGmdaFNQ70cKBqEBbBpBkIbDceTHdIJ7W8sDSzDBw5SqrYTk/KnFvzby5o7oKPdG9jpXgUeMiECALHjPr/vpDrbFCk96P5vvJ4ccaA");
  base64DecodeToExistingUint8Array(bufferView, 162944, "Iq4o15gvikLNZe8jkUQ3cS87TezP+8C1vNuJgaXbtek4tUjzW8JWORnQBbbxEfFZm08Zr6SCP5IYgW3a1V4cq0ICA6OYqgfYvm9wRQFbgxKMsuROvoUxJOK0/9XDfQxVb4l78nRdvnKxlhY7/rHegDUSxyWnBtyblCZpz3Txm8HSSvGewWmb5OMlTziGR77vtdWMi8adwQ9lnKx3zKEMJHUCK1lvLOktg+SmbqqEdErU+0G93KmwXLVTEYPaiPl2q99m7lJRPpgQMrQtbcYxqD8h+5jIJwOw5A7vvsd/Wb/Cj6g98wvgxiWnCpNHkafVb4ID4FFjygZwbg4KZykpFPwv0kaFCrcnJskmXDghGy7tKsRa/G0sTd+zlZ0TDThT3mOvi1RzCmWosnc8uwpqduau7UcuycKBOzWCFIUscpJkA/FMoei/ogEwQrxLZhqokZf40HCLS8IwvlQGo1FsxxhS79YZ6JLREKllVSQGmdYqIHFXhTUO9LjRuzJwoGoQyNDSuBbBpBlTq0FRCGw3Hpnrjt9Md0gnqEib4bW8sDRjWsnFswwcOcuKQeNKqthOc+Njd0/KnFujuLLW828uaPyy713ugo90YC8XQ29jpXhyq/ChFHjIhOw5ZBoIAseMKB5jI/r/vpDpvYLe62xQpBV5xrL3o/m+K1Ny4/J4ccacYSbqzj4nygfCwCHHuIbRHuvgzdZ92up40W7uf0999bpvF3KqZ/AGppjIosV9YwquDfm+BJg/ERtHHBM1C3EbhH0EI/V32yiTJMdAe6vKMry+yRUKvp48TA0QnMRnHUO2Qj7LvtTFTCp+ZfycKX9Z7PrWOqtvy18XWEdKjBlEbIA=");
  base64DecodeToExistingUint8Array(bufferView, 163712, "BAAABAEABAIgBAMhBAQiBAUjBAYABAcABAgABAkABAoABAsABAwABA0ABA4ABA8ABBAAFBEABBIABBMABBQABBUABBYABBcABBgABBkABBoABBsABBwkBB0lBB4mBB8nBCAABCEABCIABCMABCQABCUABCYABCcABCgABCkABCoABCsABCwABC0ABC4ABC8Au84gINKgP/+AcLg//8AOLh4ONj//4AOLn//wAOLv//M5n//wNLM4P8M5v4M5qFMM4J2MM4IOMM4KFLgP4j4OIRwUPwEH8F/CArmDnkAgfgwFABwkCAYRlBgPhEoYACgggCE4MB4QOGhCTCAQNB4g0DAAUQAQMcDgOBxA0DAAUgAQMwIAMDyAlCAAZQCSIMIgcgEoR2FgICBmEHoBnFIIUDEQUOUoMf5F/gF+oUD/EOCYUNCINAqHBgcCwkIjBYBg0AjxqBgFhgMMgcIkEYLAJVBUwNEgFCgUQAIOAiFgNgU4gGIgGEgkggkhBYKiBKoNwgMQgMIhGAhFD//BM4MIgPggUgFAMRUQOEM4OAgMogfAglAFQIpBkJFBYAMCwEGEwIBBoFCJoKbBMoME8EdIIOAmGAw0BwkQhkMHQNgnSrBwGhgMGgsIiEwQoMUoFn/0A/x2Bg/yiEf4EYgEngJrBAAkEAYSBBoDECAAjzDBwOAYgLrFToIOCZ4IRBdYrzDvACB+AOFwIFDBwMHJI38Agd8gE/JIwAEn8D/AOM//gBxd//46GAAv//4NLgP/V4IAKgf/L4gOJLBkH/6TFAA0PM5sfM5qFBwCFNBpaFBM5gOBM4I=");
  base64DecodeToExistingUint8Array(bufferView, 164343, "D+YAACQAcAAAASADgAAAABABPAPAPPAPAPIAIAAAA4gIiBEQf/BEQIiAjgAABgYSECTAMmAZIEJDAwAAADwOhCIIRhBzIAGAHoAACQAcAAAAB8AwYIAiACAACACIAgwYB8AAACQAMAH4AMACQAAAAgAEAAgA/gAgAEAAgAAAAEgA4AAAEAAgAEAAgAEAAAAAYADAAAABAAwAYAMAGADAAAAA/gICCGIRhBAQH8AAAEABAAQAD/4AABA4QZCEIRBBwIAABAQQBCEIQhB7wAAADABoARAMID/4AIAAAfCCIIRBCIIQ+AAAP+CIIRBCIII+AAAQACB4QwCYAcAAAAPeCEIQhCEIPeAAAPCCEIQhCEIP+AAAGGAwwAAAwoGGAAAAgAKACIAggICAAACIARACIARACIARAAABAQEEARABQAEAAABAAQACCYQgCIAOAAAAP+CAIRxCRISJB/AAAAf4MQCCAMQAf4AAD/4QhCEIQhB7wAAB/wQBCAIQBBAQAAD/4QBCAIICA/gAAD/4QhCEIQhCAIAAD/4RACIARACAAAAB/wQBCAIQhBHwAAD/4AgAEAAgD/4AACAIf/CAIAACAwQBCAIQBD/wAAD/4AgAKAGMDAYAAD/4ABAAIABAAIAAD/4MAAYAMAD/4AAD/4MAAYAAwD/4AAB/wQBCAIQBB/wAAD/4QgCEAQgB4AAAB/wQBCAoQCB/oAAD/4QgCEAQ4B44AABwQRBCEIQRBBwAACAAQAD/4QACAAAAD/wABAAIABD/wAAD4AA8AAYA8D4AAAD/gADABgAwABgADD/gAADA4GYAMAGYDA4AADgADAAH4DADgAAACAYQNCOIWBDAIAAD/8QAiAEAADAAGAAMAAYAAwABAAAQAiAEf/gAACABgAQABgACAAAAABAAIABAAIABAAIAACAAIAAgAAAAJwCRASICSAP4AAD/4BCAQICBAPwAAAPwCBAQICBAIQAAAPwCBAQIBCD/4AAAPwCRASICRAOQAAAQAP/CQASACQAAAAOsCKQRSCKQeSCBgAAf/AIACAAQAB/AAAABAQIT/AAIABAAAAAgACAAQQCT/gAAf/ABAAYAMgCDAAAABCAIf/AAIABAAAD/AQAD/AQAB/AAAD/AIACAAQAB/AAAB+AQICBAQIB+AAAD/wIQCBAQIB+AAAB+AQICBAIQD/wAAD/AIACAAQABAAAABiASICRARIBGAAACAD/wCBAQICBAAAD+AAIABAAQD/AAADgADgADADgDgAAAD8AAYAcAAYD8AAADDAEgAYAEgDDAAADwYBsACABgDwAAACDAQoCZAUIDBAAAOTiNiQAQAAf/AAAQASNiOTgAAAgAIABAAEAAQACAAgAAAMACQASABgAAAC4AVABIAAACoAVABQAAABAAQAAAAAf6MQKCAMQAf4AAAf4MQKCCMQAf4AAAf5MQSCBMQAf4AAAf6MQKCCMQAf4AAA/yYgEECYgA/wAAAf5MQWCBMQAf4AAB/wQBKAKQBBAQAAP+CAJQBqAKICAAAB/yQBKAKQBBAQAAD/4QhKEKQhCAIAAf/CEKQhqEJQBAAAH/yhCEIShCEAQAASAJf/CAIAACAJf/SAIAAKAKf/KAIAAUAQ/+UAQAAf/CEIQhBAQH8AAAD/4MAIYCAwD/4AAD/6MAIYCAwD/4AAB/wQBKAKQBB/wAAB/xQBSAJQBB/wAAB/xQBSAJQBR/wAAD/igCEASgCD/gAAIQAkADAAYAEgBCAAAAf/SEBQgSHAPHAAAf+IAKgBIAIf+AAAf+AAJABQAIf+AAAf+IAKABIAKf+AAA/8QAQACQAQ/8AAAcAAYBA/QYAcAAACAAQAL/+QACAAAAB/4QACIIRBB0IAeAAAD/AIAKACQABAAAABOASIKRCSQB/AAABOBSISRBSQB/AAABOCSIKRCSQB/AAABOBSICRBSQB/AAAAnBJEVIhJIA/gAABOASICRAPwCRASIByAAAB+AQICBwQJBCAAAB+CQIKBCQIBCAAAB+ASIKRCSIByAAAB+ASICRwSJByAAAB+BSICRBSIByAAAB+CSIKRCSIByAAAABAQIL/CAIABAAAABBQIT/BAIABAAAA/gICBAQEEX/zAAAAAPwCBAQIJCD/4IAAAAD/AIAKACQAB/AAAD/CIAKACQAB/AAAB+AQIKBCQIB+AAAB+BQISBBQIB+AAAB+BQISBBQIR+AAAB+BQICBBQIB+AAAAgAEAGsA1gAgAEAAAAf4RABQASAAIAAAAP4IAigEIBAP8AAAfwABBAIQCAf4AAAfwIBCAIICCf4AAAfwIBAAIICAf4AAAeDANhAQQMAeAAAAQAf+AQJCBwQIAAAAAADAgYICAgIAwUFBggDBgMHBwUGBgcGBgYGBgMDBgcGBwcGBgYGBgYGBgQGBgYGBgYGBgYGBgYGCAYGBgQHBAYHBAYGBgYGBgcGBgYGBgYGBgYGBgYGBgYGBgYGBAIECA==");
  base64DecodeToExistingUint8Array(bufferView, 166256, "BQAEBAM=");
  base64DecodeToExistingUint8Array(bufferView, 166272, "BgYGBgYGBgYGBgYGBAQEBAYGBgYGBgYHBgYGBgYGBgcGBgYGBgYIBgYGBgYGBgYHBwYGBgYGBgcGBgYGBgYG");
  base64DecodeToExistingUint8Array(bufferView, 166351, "f+cH/nAAAA+AAPgAAAAAAAAPgAD4AAAAAAQQAEEAf/8H//AEEABBAH//B//wBBAAQQAAAADggB8MAxhgIIIP//j//4IIIDDGAYfACDgAAAAYAAPAMCQPA8PAGPAAPGAPDwPAkDAPAABgAAAAA8AcfgPsMGOBBBgQY8MD5mAcPAAP8ADDAAAA+AAPgAAAAAB/AB/8A4DgYAMEABAAAAQAEGADA4DgH/wAfwAAAAAIAAiIAMmABrAAPgABwAA+AAawAMmACIgACAAAAAAIAACAAAgAAIAA/4AP+AAIAACAAAgAAIAAAAAAAIAA+AAPAAAAAIAACAAAgAAIAACAAAgAAIAACAAAgAAIAAAAAABwAAcAAAAAAwAA8AA8AA8AA8AA8AA8AAMAAAAAAf/AP/4GAzBAYQQMEEGBBDAQZgMD/+Af/AAAAAgBAYAQMAEH//B//wAAEAABAAAQAAABwDA8BwYA0EAZBAMQQGEEDBBhgQPwEB4BAAAAEAQDAGBgAwQIEECBBAgQQIEGHDA/fgHjwAAAAAeAAPgAGIADCABggAwIAYCAMAgH//B//wAAAH8EB/BgQQMEEBBBAQQQEEEBBBgwQP4EB8AAAAH/wD/+BhAwQQEEEBBBAQQQEEGDBA/gAHwAAABwAAcAAEAABAAAQB8EB/BB4AR4AH4AB4AAAAAB48A/fgYcMECBBAgQQIEECBBhwwP34B48AAAAHwAD+BBgwQQEEEBBBAQQQEEGBDA//gH/wAAAAHDgBw4AAAAAAIBw+AcPAAAAAIAAHAADYABjAAwYAYDAMAYGADBAAQAAAAIQACEAAhAAIQACEAAhAAIQACEAAhAAIQAAAAQAEGADAwBgGAwAwYAGMAA2AAHAAAgAAAABwAA8AAYAAEAABAZwQOcEGABjAAPgABwAAAAAH/wD/+BgAwQAEEPhBH8QTBkEgJBoCQP/kB/5AAAAH/8D//BgQAQEAEBABAQAQEAGBAA//wH/8AAAB//wf/8EEBBBAQQQEEEBBBAQY4MD7+AcfAAAAB/8A//gYAMEABBAAQQAEEABBgAwOA4BgMAAAAf/8H//BAAQQAEEABBAAQQAEGADA//gH/wAAAB//wf/8ECBBAgQQIEECBBAgQQIEEABBAAQAAAH//B//wQIAECABAgAQIAECABAgAQAAEAAAAAAH/wD/+BgAwQAEEABBAgQQIEGCDA4/gGPwAAAB//wf/8ACAAAgAAIAACAAAgAAIAH//B//wAAAEABBAAQf/8H//BAAQQAEAAAAAHAAB4AADAAAQAAEEABBAAwf/4H/8BAAAQAAAAAB//wf/8AHAADYABjAAwYAYDAMAYGADBAAQAAAH//B//wAAEAABAAAQAAEAABAAAQAAEAABAAAAf/8D//AYAADAAAYAADAABgAAwAAYAAP/8H//AAAAf/8H//AGAAAwAAGAAAwAAGAAAwB//wf/8AAAAf/AP/4GADBAAQQAEEABBAAQYAMD/+Af/AAAAH//B//wQIAECABAgAQIAECABhgAPwAB4AAAAAH/wD/+BgAwQAEEAFBABwQAMGADg//sH/xAAAB//wf/8EDABA4AQLAECYBAjAYYYD8DAeAQAAAB4EA/BgYYMECBBAgQQIEECBBgwwMH4BA8AAAAQAAEAABAAAQAAH//B//wQAAEAABAAAQAAAAAB//Af/4AADAAAQAAEAABAAAQAAMH/+B//AAAAHgAB/gAB/AAB8AADwAA8AB8AH8Af4AHgAAAAAf/8H/+AADAABgAAwAAYAADAAAYAADAf/4H//AAAAYAMHgPAePAB3AAHAABwAB3AB48B4DwYAMAAABgAAeAAB4AAHgAAf8AH/AHgAHgAHgABgAAAAAEAPBAHwQDEEBhBAwQQYEEMBBGAQfAEHgBAAAAf/8H//BAAQQAEEABAAAAMAADwAAPAAA8AADwAAPAAA8AADAAAAQAEEABBAAQf/8H//AAAACAABgAAwAAYAAMAADAAAYAADAAAYAACAAAAAAAAEAABAAAQAAEAABAAAQAAEAABAAAQAAEAAAIAADAAAYAACAAAAAAABwAQ+AEYwBEEARBAEQQBEEAZBAD/wAf8AAAB//wf/8AQBAEAQBAEAQBAEAQBgMAP+AB/AAAAAH8AD/gBgMAQBAEAQBAEAQBAGAwAwYAEEAAAAAfwAP+AGAwBAEAQBAEAQBAEAQBB//wf/8AAAAB/AA/4AYjAEIQBCEAQhAEIQBiEAPjAB4gAAAAQAAEAABAAD//B//wRAAEQABEAAQAAAAAAB/AA/4QYDEEARBAEQQBEEARBAMwf/4H/8AAAH//B//wBAAAQAAEAABAAAQAAGAAA/8AH/AAAABAEAQBB3/wd/8AABAAAQAAAAAAwAAOAAAwAAEEABBAA3f/53/8AAAH//B//wACAABwAA2AAYwAMGAGAwBAEAAABAAQQAEH//B//wAAEAABAAAAB/8Af/AEAABAAAf/AH/wBAAAYAAD/wAf8AAAAH/wB/8AQAAEAABAAAQAAEAABgAAP/AB/wAAAAH8AD/gBgMAQBAEAQBAEAQBAGAwA/4AH8AAAAB//wf/8EAQBAEAQBAEAQBAEAYDAD/gAfwAAAAB/AA/4AYDAEAQBAEAQBAEAQBAEAf/8H//AAAAf/AH/wAYAAMAAGAABAAAQAAEAABAAAQAAAAAA8IAfjAEIQBCEAQhAEIQBCEAQhAGPwAh4AAAAEAABAAAQAB//gf/8AQBAEAQBAEAABAAAAB/wAf+AAAwAAEAABAAAQAAEAABAH/wB/8AAAAHAAB8AADwAAPAAA8AAPAAPAAPAAfAAHAAAAAAf+AH/wAAEAABAAfwAH8AABAAAQB/8Af+AAAABgMAcHABjAANgABwAAcAANgAGMAHBwBgMAAAAH/AB/4QADEAARAAEQABEAARAAMwf/4H/8AAAAQDAEBwBA0AQZAEMQBGEATBAFgQBwEAYBAAAAAIAACAAf/AP34GADBAAQQAEAAAB//wf/8AAABAAQQAEGADA/fgH/wACAAAgAAAAHAADwAAgAAIAADgAAcAABAAAQAA8AAOAAAAAAc/8HP/AAAAAfwAP+AGAwBAEB//wf/8BAEAYDADBgAQQAAAAAgQH/8D//BggQQIEECBBggQMAEBAHAABwAAABACAb9gD/wAQIAECABAgAQIAECAD/wBv2AQAgAAAGAAB4JAHiQAckAB/wAf8AckAeJAeCQGAAAAAAfj8H4/AAAAd8IP/jCIMQiBEIwRDH/wQ+4AAADgAA4AAAAAAAAA4AAOAAAAAAB/gAgEAT8gF/oBQKAUCgFAoBc6ATMgCAQAf4AAAADyAJ+gCQoAkKAJCgCQoAkKAP+gB/oAAAAAAgAAcAANgAGMADJgBnMATZABjAAwYAYDAEAQAAAAIAACAAAgAAIAACAAAgAAIAACAAA/AAPwAAAAAIAACAAAgAAIAACAAAgAAIAACAAAAAB/gAgEAX+gF/oBRCAUYgFHIBfaATigCAQAf4");
  base64DecodeToExistingUint8Array(bufferView, 169013, "B4AA/AAIQACEAAhAAPwAB4AAAAAACBAAgQAIEACBAP+QD/kACBAAgQAIEACBAAAAYgAOYACOAAmgAPIABiAAAAAEQADGAAkgAJIAD+AAbAAAAAAgAAYAAMAACAAAAAAAf/8H//AAEAABAAAQAAEAADAABgB/8Af/AAAAPwAH+ABAgAQIAH//B//wQAAEAAB//wf/8AAAABwAAcAAAAAAABAADwAA4AAAIAAGIAD+AA/gAAIAAAAAPiAH8gDBoAgKAICgCAoAwaAH8gA+IAAAAAQBAGAwAwYAGMAE2QBnMAMmABjAANgABwAAIAAAAAAGAgDAYBgP4wD+ZgAM4AGaADMgBn+Ax/gAAAAAwCAYBgMA/mAP7YgBuYAyOAYmgMPIGBiAAABEBgxgwJIYCSMA/mYGzOABmgAzIAZ/gMf4AAAAAcAAPgAGMADBBzgQcwEAABAAAwAB4AAcAAAAA//gf/6MCAyAgGgIAoCACAgAwIAH/+A//gAAAD/+B//gwIAICAKAgGgIDICAjAgAf/4D/+AAAAP/4H/+LAgGgIDICAyAgGgIAsCAB//gP/4AAAA//mf/7sCAiAgMgIBoCAKAgOwIDH/+A//gAAAD/+B//uwIDoCACAgAgIDoCA7AgAf/4D/+AAAAP/4H/+bAgPgICYCAmAgPgIBsCAB//gP/4AAAH/8D//BggAQIAECABAgAf/8H//BAgQQIEECBBAgQAAAB/8A//gYAMEABFAAfQAHkABBgAwOA4BgMAAAAD//g//6IECyBAmgQIoECCBAggQIIACCAAgAAAP/+D//ggQIIECKBAmgQLIECiBAggAIIACAAAA//4P/+KBAmgQLIECyBAmgQIoECCAAggAIAAAD//g//7oEC6BAggQIIEC6BAugQIIACCAAgAACIACyAAm//4v/+CAAggAIAAACAAggAIv/+b//sgAKIACAAACgAJoACz//s//5oACKAAgAADoAC6AAg//4P/+6AAugAIAAAAIAH//B//wQIEECBBAgQQIEEABBgAwP/4B/8AAAAD//m//7gwAgGAMAwBgGAIAwOAGDP/+D//gAAAD/4B//IwAbIACaAAigAIIACDABgf/wD/4AAAAP/gH/8DABggAIoACaAAsgAKMAGB//AP/gAAAA/+Af/wsAGaAAsgALIACaAAiwAYH/8A/+AAAAD/4Z//OwAaIACyAAmgAIoAC7ABsf/wD/4AAAAP/gH/87ABugAIIACCAAugALsAGB//AP/gAAACAgAwYAGMAA2AAHAABwAA2AAYwAMGACAgAAAAABAH/wD/+BgMwQGEEDBBBgQQwEGYDA//gH/wBAAAAAAD/+A//yAAGwAAmAAIgACAAAgAAYP/8D/+AAAAP/4D//AAAYAACIAAmAALAACgABg//wP/4AAAA//gP/8IABmAALAACwAAmAAIgAGD//A//gAAAD/+A//zgAG4AAgAAIAAC4AAuAAYP/8D/+AAAAMAADwAAPAAA8AID/mA/7A8Ag8AA8AAMAAAAAH//B//wCBAAgQAIEACBAAgQAMMAB+AAPAAAAAP/8H//BBBAQQMEEBBBAQYwED+DAc/gAHwAAAAAHABD4ERjBkQQNEEBRBAEQQBkEAP/AB/wAAAAAcAEPgBGMARBAUQQNEEGRBBGQQA/8AH/AAAAABwAQ+AUYwNEEGRBBkQQNEEBZBAD/wAf8AAAAAHAND4HRjBEQQZEEDRBAUQQdkEGP/AB/wAAAAAcAEPgdGMHRBAEQQBEEHRBB2QQA/8AH/AAAAABwAQ+A0YwfEEExBBMQQfEEDZBAD/wAf8AAAAAPgBH8ARBAEQQBkEAP/AH/gBCMAQhAEIQB+MAPiAAAAAfwAP+AGAwBAEQQB8EAeBAEAYDADBgAQQAAAAB/AA/4EYjBkIQNCEBQhAEIQBiEAPjAB4gAAAAH8AD/gBiMAQhAUIQNCEGQhBGIQA+MAHiAAAAAfwAP+AWIwNCEGQhBkIQNCEBYhAD4wAeIAAAAB/AA/4HYjB0IQBCEAQhB0IQdiEAPjAB4gAAAEQBBkAQN/8Bf/AAAQAAEAAAAEAQBAEBf/A3/wYAEEABAAAAFAEDQBBn/wZ/8DABAQAQAAAHQBB0AQB/8Af/BwAQcAEAAAAB/AU/4HYDAkAQdAEFwBAMAQBgMAP+AB/AAAAAf/A3/wdAAEQABkAANAABQAB2AAY/8AH/AAAAAfwAP+BGAwZAEDQBAUAQBAEAYDAD/gAfwAAAAB/AA/4AYDAEAQFAEDQBBkAQRgMAP+AB/AAAAAH8AD/gFgMDQBBkAQZAEDQBAWAwA/4AH8AAAAAfwDP+B2AwRAEGQBA0AQFAEHYDBj/gAfwAAAAB/AA/4HYDB0AQBAEAQBB0AQdgMAP+AB/AAAAACAAAgAAIAACAAcnAHJwACAAAgAAIAACAAAAAAf0AP+AGDwBBkAQxAEYQBMEAeDAD/gBfwAAAAH/AB/4EADBgAQMAEBABAAAQAAEAf/AH/wAAAAf8AH/gAAMAABAQAQMAEGABBAAQB/8Af/AAAAB/wAf+AQAwMAEGABBgAQMAEBABAH/wB/8AAAAH/AB/4HADBwAQAAEAABBwAQcAEAf/AH/wAAAAf8AH/hAAMQABEQARMAEWABFAAzB//gf/wAAAf//3//8EAQBAEAQBAEAQBAEAYDAD/gAfwAAAAH/AB/4XADFwARAAEQABFwARcAMwf/4H/8");
  base64DecodeToExistingUint8Array(bufferView, 171072, "BgMHCwsLCwMGBgwLBAsDCQsJCwsLCwsLCwsDBAoLCgsMCwsLCwsLCwsHDAsLDAsLCwsLCwsLCwwLCwsGCQYLCwULCwsLCwoLCwcJCgcLCwsLCwsLCgsLCwsLCwgDCAs=");
  base64DecodeToExistingUint8Array(bufferView, 171201, "AwsLDAsDCAcMCgwLCQwJCAsHBwULCwMEBgoMCwsLCwsLCwsLCw0LCwsLCwcHBwcMCwsLCwsLCw0LCwsLCwsLCwsLCwsLDQsLCwsLBwcHBwsLCwsLCwsLCwsLCwsLCwtKYW4ARmViAE1hcgBBcHIATWF5AEp1bgBKdWwAQXVnAFNlcABPY3QATm92AERlYwBTdW4ATW9uAFR1ZQBXZWQAVGh1AEZyaQBTYXQAAAAAAF4CAABfAgAAYAIAAGECAABiAgAAYwIAAGQCAABlAgAAZgIAAGcCAABoAgAAaQIAAGoCAABrAgAAbAIAAG0CAABuAg==");
  base64DecodeToExistingUint8Array(bufferView, 171458, "HwDgB/8HAPgf+OD///8=");
  base64DecodeToExistingUint8Array(bufferView, 171490, "KEJRjNe9QMwgiiAD4Af/Bx8AEYgf+AD4QPzg////AAAGAAwAEwAZAB8AgAGGAYwBkwGZAZ8BIAMmAywDMwM5Az8DwATGBMwE0wTZBN8EYAZmBmwGcwZ5Bn8G4AfmB+wH8wf5B/8HADAGMAwwEzAZMB8wgDGGMYwxkzGZMZ8xIDMmMywzMzM5Mz8zwDTGNMw00zTZNN80YDZmNmw2czZ5Nn824DfmN+w38zf5N/83AGAGYAxgE2AZYB9ggGGGYYxhk2GZYZ9hIGMmYyxjM2M5Yz9jwGTGZMxk02TZZN9kYGZmZmxmc2Z5Zn9m4GfmZ+xn82f5Z/9nAJgGmAyYE5gZmB+YgJmGmYyZk5mZmZ+ZIJsmmyybM5s5mz+bwJzGnMyc05zZnN+cYJ5mnmyec555nn+e4J/mn+yf85/5n/+fAMgGyAzIE8gZyB/IgMmGyYzJk8mZyZ/JIMsmyyzLM8s5yz/LwMzGzMzM08zZzN/MYM5mzmzOc855zn/O4M/mz+zP88/5z//PAPgG+Az4E/gZ+B/4gPmG+Yz5k/mZ+Z/5IPsm+yz7M/s5+z/7wPzG/Mz80/zZ/N/8YP5m/mz+c/55/n/+4P/m/+z/8//5////");
  base64DecodeToExistingUint8Array(bufferView, 172030, "//8AACsAgQCsAHkATgAMABIAFwAEACcAtwCQAMAA0gDXAAAABQAeACMAtAC5ANIA1wAAAAkABwAIAAwACwAOAA8=");
  base64DecodeToExistingUint8Array(bufferView, 172104, "gQIAAIICAACDAgAAhAIAAIUCAACGAgAApOgBANHoAQD95AEAvegBALPoAQAX6AEASOcBAHzkAQA45AEAlOgBAI3kAQDs5AEA4egBAM/kAQDw6AEAwOQBALjlAQDF6AEA2+UBADjjAQCD7gEA0esBALHnAQBl5AEASOUBAOziAQDe5gEAQ+cBAAHnAQAJ5AEAyOUBAP/lAQC95QEAa+cBAK/oAQAV5QEAXuQBAG3oAQBb6AEAg+cBAGPlAQAU6QEAKOMBAFPnAQCE5QEACegBADHlAQB45AEAbe0BALTjAQDo4gEAYucBAKHlAQA94wEAN+MBAHTlAQDV4gEAfOUBAPTjAQAc5wEAgO0BAFbkAQAi5gEAF+YBAN/jAQAR6AEATOUBABPjAQCN5wEAwecBAP3jAQAq5gEADeYBAAbnAQBw5QEAQ+MBAELjAQCz5wEA+eIBAFDlAQB+4wEAMOgBAN3iAQBe5gEALeQBAF/jAQCF6AEAU+MBAFzmAQBY5QEAIuMBAFPiAQCj5wEAzOcBAPrlAQA86AEA1+cBAD7kAQAs4wEA9ucBAKjoAQAj5AEAC+MBAFvnAQAE5gEAde0BALPkAQBR6AEA+eMBAJ3nAQBT5gEAOeMBAOXnAQAg5wEASucBACznAQB/6AEA7eYBAEDnAQDG5wEA0+wBALzsAQBG6AEAY+0BAF7iAQBo5QEA0uUB");
  base64DecodeToExistingUint8Array(bufferView, 172652, "kAIAAJECAACSAgAAjgIAAJMCAACUAgAAlQIAAJYCAACXAgAAmAIAAJkCAACaAg==");
  base64DecodeToExistingUint8Array(bufferView, 172708, "mwIAAJwCAACdAgAAngI=");
  base64DecodeToExistingUint8Array(bufferView, 172732, "nwIAAJ8CAACgAgAAoQIAAAAAAABPZmZsaW5lTWVtb3J5QWxsb2NhdGlvbgCA////fwAAAAAAAAD/AAAAAID///9/AACA////fwAAAACA////fwAAgP///38AAAAAAACA////fwAAAID///9/AAAAAAAAAAC6AgAAuwIAAJ8CAACfAgAAnwIAAJ8C");
  base64DecodeToExistingUint8Array(bufferView, 172880, "vAIAAL0CAAC+AgAAvwIAAMACAADBAg==");
  base64DecodeToExistingUint8Array(bufferView, 172912, "ygIAAMsCAADMAg==");
  base64DecodeToExistingUint8Array(bufferView, 172932, "zQIAAM4CAACfAg==");
  base64DecodeToExistingUint8Array(bufferView, 172952, "zwIAANACAADRAgAA0gIAANMCAADUAgAA1QIAANYC");
  base64DecodeToExistingUint8Array(bufferView, 172992, "zwIAANACAADRAgAA1wIAANgCAACfAgAAnwIAAJ8C");
  base64DecodeToExistingUint8Array(bufferView, 173032, "nwIAAJ8CAADRAgAA2QIAANoCAAAAAAAAT7thBWes3T8YLURU+yHpP5v2gdILc+8/GC1EVPsh+T/iZS8ifyt6PAdcFDMmpoE8vcvweogHcDwHXBQzJqaRPBgtRFT7Iek/GC1EVPsh6b/SITN/fNkCQNIhM3982QLA");
  base64DecodeToExistingUint8Array(bufferView, 173167, "gBgtRFT7IQlAGC1EVPshCcD+gitlRxVnQAAAAAAAADhDAAD6/kIudr86O568mvcMvb39/////98/PFRVVVVVxT+RKxfPVVWlPxfQpGcREYE/AAAAAAAAyELvOfr+Qi7mPyTEgv+9v84/tfQM1whrrD/MUEbSq7KDP4Q6Tpvg11U/");
  base64DecodeToExistingUint8Array(bufferView, 173310, "8D9uv4gaTzubPDUz+6k99u8/XdzYnBNgcbxhgHc+muzvP9FmhxB6XpC8hX9u6BXj7z8T9mc1UtKMPHSFFdOw2e8/+o75I4DOi7ze9t0pa9DvP2HI5mFO92A8yJt1GEXH7z+Z0zNb5KOQPIPzxso+vu8/bXuDXaaalzwPiflsWLXvP/zv/ZIatY4890dyK5Ks7z/RnC9wPb4+PKLR0zLso+8/C26QiTQDarwb0/6vZpvvPw69LypSVpW8UVsS0AGT7z9V6k6M74BQvMwxbMC9iu8/FvTVuSPJkbzgLamumoLvP69VXOnj04A8UY6lyJh67z9Ik6XqFRuAvHtRfTy4cu8/PTLeVfAfj7zqjYw4+WrvP79TEz+MiYs8dctv61tj7z8m6xF2nNmWvNRcBITgW+8/YC86PvfsmjyquWgxh1TvP504hsuC54+8Hdn8IlBN7z+Nw6ZEQW+KPNaMYog7Ru8/fQTksAV6gDyW3H2RST/vP5SoqOP9jpY8OGJ1bno47z99SHTyGF6HPD+msk/OMe8/8ucfmCtHgDzdfOJlRSvvP14IcT97uJa8gWP14d8k7z8xqwlt4feCPOHeH/WdHu8/+r9vGpshPbyQ2drQfxjvP7QKDHKCN4s8CwPkpoUS7z+Py86JkhRuPFYvPqmvDO8/tquwTXVNgzwVtzEK/gbvP0x0rOIBQoY8MdhM/HAB7z9K+NNdOd2PPP8WZLII/O4/BFuOO4Cjhrzxn5JfxfbuP2hQS8ztSpK8y6k6N6fx7j+OLVEb+AeZvGbYBW2u7O4/0jaUPujRcbz3n+U02+fuPxUbzrMZGZm85agTwy3j7j9tTCqnSJ+FPCI0Ekym3u4/imkoemASk7wcgKwERdruP1uJF0iPp1i8Ki73IQrW7j8bmklnmyx8vJeoUNn10e4/EazCYO1jQzwtiWFgCM7uP+9kBjsJZpY8VwAd7UHK7j95A6Ha4cxuPNA8wbWixu4/MBIPP47/kzze09fwKsPuP7CvervOkHY8Jyo21dq/7j934FTrvR2TPA3d/ZmyvO4/jqNxADSUj7ynLJ12srnuP0mjk9zM3oe8QmbPotq27j9fOA+9xt54vIJPnVYrtO4/9lx77EYShrwPkl3KpLHuP47X/RgFNZM82ie1Nkev7j8Fm4ovt5h7PP3Hl9QSre4/CVQc4uFjkDwpVEjdB6vuP+rGGVCFxzQ8t0ZZiiap7j81wGQr5jKUPEghrRVvp+4/n3aZYUrkjLwJ3Ha54aXuP6hN7zvFM4y8hVU6sH6k7j+u6SuJeFOEvCDDzDRGo+4/WFhWeN3Ok7wlIlWCOKLuP2QZfoCqEFc8c6lM1FWh7j8oIl6/77OTvM07f2aeoO4/grk0h60Sary/2gt1EqDuP+6pbbjvZ2O8LxplPLKf7j9RiOBUPdyAvISUUfl9n+4/zz5afmQfeLx0X+zodZ/uP7B9i8BK7oa8dIGlSJqf7j+K5lUeMhmGvMlnQlbrn+4/09QJXsuckDw/Xd5PaaDuPx2lTbncMnu8hwHrcxSh7j9rwGdU/eyUPDLBMAHtoe4/VWzWq+HrZTxiTs8286LuP0LPsy/FoYi8Eho+VCek7j80NzvxtmmTvBPOTJmJpe4/Hv8ZOoRegLytxyNGGqfuP25XcthQ1JS87ZJEm9mo7j8Aig5bZ62QPJlmitnHqu4/tOrwwS+3jTzboCpC5azuP//nxZxgtmW8jES1FjKv7j9EX/NZg/Z7PDZ3FZmuse4/gz0epx8Jk7zG/5ELW7TuPykebIu4qV285cXNsDe37j9ZuZB8+SNsvA9SyMtEuu4/qvn0IkNDkrxQTt6fgr3uP0uOZtdsyoW8ugfKcPHA7j8nzpEr/K9xPJDwo4KRxO4/u3MK4TXSbTwjI+MZY8juP2MiYiIExYe8ZeVde2bM7j/VMeLjhhyLPDMtSuyb0O4/Fbu809G7kbxdJT6yA9XuP9Ix7pwxzJA8WLMwE57Z7j+zWnNuhGmEPL/9eVVr3u4/tJ2Ol83fgrx689O/a+PuP4czy5J3Gow8rdNamZ/o7j/62dFKj3uQvGa2jSkH7u4/uq7cVtnDVbz7FU+4ovPuP0D2pj0OpJC8OlnljXL57j80k6049NZovEde+/J2/+4/NYpYa+LukbxKBqEwsAXvP83dXwrX/3Q80sFLkB4M7z+smJL6+72RvAke11vCEu8/swyvMK5uczycUoXdmxnvP5T9n1wy4448etD/X6sg7z+sWQnRj+CEPEvRVy7xJ+8/ZxpOOK/NYzy15waUbS/vP2gZkmwsa2c8aZDv3CA37z/StcyDGIqAvPrDXVULP+8/b/r/P12tj7x8iQdKLUfvP0mpdTiuDZC88okNCIdP7z+nBz2mhaN0PIek+9wYWO8/DyJAIJ6RgryYg8kW42DvP6ySwdVQWo48hTLbA+Zp7z9LawGsWTqEPGC0AfMhc+8/Hz60ByHVgrxfm3szl3zvP8kNRzu5Kom8KaH1FEaG7z/TiDpgBLZ0PPY/i+cukO8/cXKdUezFgzyDTMf7UZrvP/CR048S94+82pCkoq+k7z99dCPimK6NvPFnji1Ir+8/CCCqQbzDjjwnWmHuG7rvPzLrqcOUK4Q8l7prNyvF7z/uhdExqWSKPEBFblt20O8/7eM75Lo3jrwUvpyt/dvvP53NkU07iXc82JCegcHn7z+JzGBBwQVTPPFxjyvC8+8/AAAAAAAA8D90hRXTsNnvPw+J+WxYte8/UVsS0AGT7z97UX08uHLvP6q5aDGHVO8/OGJ1bno47z/h3h/1nR7vPxW3MQr+Bu8/y6k6N6fx7j8iNBJMpt7uPy2JYWAIzu4/Jyo21dq/7j+CT51WK7TuPylUSN0Hq+4/hVU6sH6k7j/NO39mnqDuP3Rf7Oh1n+4/hwHrcxSh7j8TzkyZiaXuP9ugKkLlrO4/5cXNsDe37j+Q8KOCkcTuP10lPrID1e4/rdNamZ/o7j9HXvvydv/uP5xShd2bGe8/aZDv3CA37z+HpPvcGFjvP1+bezOXfO8/2pCkoq+k7z9ARW5bdtDvPwAAAAAAAOhClCORS/hqrD/zxPpQzr/OP9ZSDP9CLuY/AAAAAAAAOEP+gitlRxVHQJQjkUv4arw+88T6UM6/Lj/WUgz/Qi6WPwAAAAAAAAAAAwAAAAQAAAAEAAAABgAAAIP5ogBETm4A/CkVANFXJwDdNPUAYtvAADyZlQBBkEMAY1H+ALveqwC3YcUAOm4kANJNQgBJBuAACeouAByS0QDrHf4AKbEcAOg+pwD1NYIARLsuAJzphAC0JnAAQX5fANaROQBTgzkAnPQ5AItfhAAo+b0A+B87AN7/lwAPmAUAES/vAApaiwBtH20Az342AAnLJwBGT7cAnmY/AC3qXwC6J3UA5evHAD178QD3OQcAklKKAPtr6gAfsV8ACF2NADADVgB7/EYA8KtrACC8zwA29JoA46kdAF5hkQAIG+YAhZllAKAUXwCNQGgAgNj/ACdzTQAGBjEAylYVAMmocwB74mAAa4zAABnERwDNZ8MACejcAFmDKgCLdsQAphyWAESv3QAZV9EApT4FAAUH/wAzfj8AwjLoAJhP3gC7fTIAJj3DAB5r7wCf+F4ANR86AH/yygDxhx0AfJAhAGokfADVbvoAMC13ABU7QwC1FMYAwxmdAK3EwgAsTUEADABdAIZ9RgDjcS0Am8aaADNiAAC00nwAtKeXADdV1QDXPvYAoxAYAE12/ABknSoAcNerAGN8+AB6sFcAFxXnAMBJVgA71tkAp4Q4ACQjywDWincAWlQjAAAfuQDxChsAGc7fAJ8x/wBmHmoAmVdhAKz7RwB+f9gAImW3ADLoiQDmv2AA78TNAGw2CQBdP9QAFt7XAFg73gDem5IA0iIoACiG6ADiWE0AxsoyAAjjFgDgfcsAF8BQAPMdpwAY4FsALhM0AIMSYgCDSAEA9Y5bAK2wfwAe6fIASEpDABBn0wCq3dgArl9CAGphzgAKKKQA05m0AAam8gBcd38Ao8KDAGE8iACKc3gAr4xaAG/XvQAtpmMA9L/LAI2B7wAmwWcAVcpFAMrZNgAoqNIAwmGNABLJdwAEJhQAEkabAMRZxADIxUQATbKRAAAX8wDUQ60AKUnlAP3VEAAAvvwAHpTMAHDO7gATPvUA7PGAALPnwwDH+CgAkwWUAMFxPgAuCbMAC0XzAIgSnACrIHsALrWfAEeSwgB7Mi8ADFVtAHKnkABr5x8AMcuWAHkWSgBBeeIA9N+JAOiUlwDi5oQAmTGXAIjtawBfXzYAu/0OAEiatABnpGwAcXJCAI1dMgCfFbgAvOUJAI0xJQD3dDkAMAUcAA0MAQBLCGgALO5YAEeqkAB05wIAvdYkAPd9pgBuSHIAnxbvAI6UpgC0kfYA0VNRAM8K8gAgmDMA9Ut+ALJjaADdPl8AQF0DAIWJfwBVUikAN2TAAG3YEAAySDIAW0x1AE5x1ABFVG4ACwnBACr1aQAUZtUAJwedAF0EUAC0O9sA6nbFAIf5FwBJa30AHSe6AJZpKQDGzKwArRRUAJDiagCI2YkALHJQAASkvgB3B5QA8zBwAAD8JwDqcagAZsJJAGTgPQCX3YMAoz+XAEOU/QANhowAMUHeAJI5nQDdcIwAF7fnAAjfOwAVNysAXICgAFqAkwAQEZIAD+jYAGyArwDb/0sAOJAPAFkYdgBipRUAYcu7AMeJuQAQQL0A0vIEAEl1JwDrtvYA2yK7AAoUqgCJJi8AZIN2AAk7MwAOlBoAUTqqAB2jwgCv7a4AXCYSAG3CTQAtepwAwFaXAAM/gwAJ8PYAK0CMAG0xmQA5tAcADCAVANjDWwD1ksQAxq1LAE7KpQCnN80A5qk2AKuSlADdQmgAGWPeAHaM7wBoi1IA/Ns3AK6hqwDfFTEAAK6hAAz72gBkTWYA7QW3ACllMABXVr8AR/86AGr5uQB1vvMAKJPfAKuAMABmjPYABMsVAPoiBgDZ5B0APbOkAFcbjwA2zQkATkLpABO+pAAzI7UA8KoaAE9lqADSwaUACz8PAFt4zQAj+XYAe4sEAIkXcgDGplMAb27iAO/rAACbSlgAxNq3AKpmugB2z88A0QIdALHxLQCMmcEAw613AIZI2gD3XaAAxoD0AKzwLwDd7JoAP1y8ANDebQCQxx8AKtu2AKMlOgAAr5oArVOTALZXBAApLbQAS4B+ANoHpwB2qg4Ae1mhABYSKgDcty0A+uX9AInb/gCJvv0A5HZsAAap/AA+gHAAhW4VAP2H/wAoPgcAYWczACoYhgBNveoAs+evAI9tbgCVZzkAMb9bAITXSAAw3xYAxy1DACVhNQDJcM4AMMu4AL9s/QCkAKIABWzkAFrdoAAhb0cAYhLSALlchABwYUkAa1bgAJlSAQBQVTcAHtW3ADPxxAATbl8AXTDkAIUuqQAdssMAoTI2AAi3pADqsdQAFvchAI9p5AAn/3cADAOAAI1ALQBPzaAAIKWZALOi0wAvXQoAtPlCABHaywB9vtAAm9vBAKsXvQDKooEACGpcAC5VFwAnAFUAfxTwAOEHhgAUC2QAlkGNAIe+3gDa/SoAayW2AHuJNAAF8/4Aub+eAGhqTwBKKqgAT8RaAC34vADXWpgA9MeVAA1NjQAgOqYApFdfABQ/sQCAOJUAzCABAHHdhgDJ3rYAv2D1AE1lEQABB2sAjLCsALLA0ABRVUgAHvsOAJVywwCjBjsAwEA1AAbcewDgRcwATin6ANbKyADo80EAfGTeAJtk2ADZvjEApJfDAHdY1ABp48UA8NoTALo6PABGGEYAVXVfANK99QBuksYArC5dAA5E7QAcPkIAYcSHACn96QDn1vMAInzKAG+RNQAI4MUA/9eNAG5q4gCw/cYAkwjBAHxddABrrbIAzW6dAD5yewDGEWoA98+pAClz3wC1yboAtwBRAOKyDQB0uiQA5X1gAHTYigANFSwAgRgMAH5mlAABKRYAn3p2AP39vgBWRe8A2X42AOzZEwCLurkAxJf8ADGoJwDxbsMAlMU2ANioVgC0qLUAz8wOABKJLQBvVzQALFaJAJnO4wDWILkAa16qAD4qnAARX8wA/QtKAOH0+wCOO20A4oYsAOnUhAD8tKkA7+7RAC41yQAvOWEAOCFEABvZyACB/AoA+0pqAC8c2ABTtIQATpmMAFQizAAqVdwAwMbWAAsZlgAacLgAaZVkACZaYAA/Uu4AfxEPAPS1EQD8y/UANLwtADS87gDoXcwA3V5gAGeOmwCSM+8AyRe4AGFYmwDhV7wAUYPGANg+EADdcUgALRzdAK8YoQAhLEYAWfPXANl6mACeVMAAT4b6AFYG/ADlea4AiSI2ADitIgBnk9wAVeiqAIImOADK55sAUQ2kAJkzsQCp1w4AaQVIAGWy8AB/iKcAiEyXAPnRNgAhkrMAe4JKAJjPIQBAn9wA3EdVAOF0OgBn60IA/p3fAF7UXwB7Z6QAuqx6AFX2ogAriCMAQbpVAFluCAAhKoYAOUeDAInj5gDlntQASftAAP9W6QAcD8oAxVmKAJT6KwDTwcUAD8XPANtargBHxYYAhUNiACGGOwAseZQAEGGHACpMewCALBoAQ78SAIgmkAB4PIkAqMTkAOXbewDEOsIAJvTqAPdnigANkr8AZaMrAD2TsQC9fAsApFHcACfdYwBp4d0AmpQZAKgplQBozigACe20AESfIABOmMoAcIJjAH58IwAPuTIAp/WOABRW5wAh8QgAtZ0qAG9+TQClGVEAtfmrAILf1gCW3WEAFjYCAMQ6nwCDoqEAcu1tADmNegCCuKkAazJcAEYnWwAANO0A0gB3APz0VQABWU0A4HGA");
  base64DecodeToExistingUint8Array(bufferView, 178467, "QPsh+T8AAAAALUR0PgAAAICYRvg8AAAAYFHMeDsAAACAgxvwOQAAAEAgJXo4AAAAgCKC4zYAAAAAHfNpNQ==");
  base64DecodeToExistingUint8Array(bufferView, 178529, "gAEAbT8CAO++rd6+uv7KFf//AP//////////AQCgAKAAIAPQBwAABAAAAAoAAAAgAwAA4Pz//+gDAAAgnQIAUJ0CANkzAgAVAAAAAAAAAAU=");
  base64DecodeToExistingUint8Array(bufferView, 178620, "2wI=");
  base64DecodeToExistingUint8Array(bufferView, 178644, "3AIAAN0CAADotAU=");
  base64DecodeToExistingUint8Array(bufferView, 178668, "Ag==");
  base64DecodeToExistingUint8Array(bufferView, 178684, "//////////8=");
  base64DecodeToExistingUint8Array(bufferView, 178752, "sLkC");
}

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[2] = value;
  }
      
function asmFunc(env) {
 var memory = env.memory;
 var buffer = memory.buffer;
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var abort = env.abort;
 var nan = NaN;
 var infinity = Infinity;
 var emscripten_asm_const_int = env.emscripten_asm_const_int;
 var emscripten_asm_const_double = env.emscripten_asm_const_double;
 var abort = env.abort;
 var __wasi_fd_close = env.fd_close;
 var __wasi_fd_write = env.fd_write;
 var setTempRet0 = env.setTempRet0;
 var legalimport$__wasi_fd_seek = env.fd_seek;
 var __stack_pointer = 5616896;
 var __stack_end = 0;
 var __stack_base = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
function jswCallFunctionHack($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $5 = __stack_pointer - 560 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 552 >> 2] = $0;
 HEAP16[$5 + 550 >> 1] = $1;
 HEAP32[$5 + 544 >> 2] = $2;
 HEAP32[$5 + 540 >> 2] = $3;
 HEAP32[$5 + 536 >> 2] = $4;
 label$1: {
  label$2: {
   label$3: {
    label$4: {
     label$5: {
      label$6: {
       label$7: {
        label$8: {
         label$9: {
          label$10: {
           label$11: {
            label$12: {
             label$13: {
              label$14: {
               label$15: {
                label$16: {
                 label$17: {
                  label$18: {
                   label$19: {
                    label$20: {
                     label$21: {
                      label$22: {
                       label$23: {
                        label$24: {
                         label$25: {
                          label$26: {
                           label$27: {
                            label$28: {
                             label$29: {
                              label$30: {
                               label$31: {
                                label$32: {
                                 label$33: {
                                  label$34: {
                                   label$35: {
                                    label$36: {
                                     label$37: {
                                      label$38: {
                                       label$39: {
                                        label$40: {
                                         label$41: {
                                          label$42: {
                                           label$43: {
                                            label$44: {
                                             label$45: {
                                              label$46: {
                                               label$47: {
                                                label$48: {
                                                 label$49: {
                                                  label$50: {
                                                   label$51: {
                                                    label$52: {
                                                     label$53: {
                                                      label$54: {
                                                       label$55: {
                                                        label$56: {
                                                         label$57: {
                                                          label$58: {
                                                           label$59: {
                                                            label$60: {
                                                             label$61: {
                                                              label$62: {
                                                               label$63: {
                                                                label$64: {
                                                                 label$65: {
                                                                  label$66: {
                                                                   label$67: {
                                                                    label$68: {
                                                                     label$69: {
                                                                      label$70: {
                                                                       label$71: {
                                                                        label$72: {
                                                                         label$73: {
                                                                          label$74: {
                                                                           label$75: {
                                                                            label$76: {
                                                                             label$77: {
                                                                              label$78: {
                                                                               label$79: {
                                                                                label$80: {
                                                                                 label$81: {
                                                                                  label$82: {
                                                                                   label$83: {
                                                                                    label$84: {
                                                                                     label$85: {
                                                                                      label$86: {
                                                                                       label$87: {
                                                                                        label$88: {
                                                                                         label$89: {
                                                                                          label$90: {
                                                                                           label$91: {
                                                                                            label$92: {
                                                                                             label$93: {
                                                                                              label$94: {
                                                                                               label$95: {
                                                                                                label$96: {
                                                                                                 label$97: {
                                                                                                  label$98: {
                                                                                                   label$99: {
                                                                                                    label$100: {
                                                                                                     label$101: {
                                                                                                      label$102: {
                                                                                                       label$103: {
                                                                                                        label$104: {
                                                                                                         label$105: {
                                                                                                          label$106: {
                                                                                                           label$107: {
                                                                                                            label$108: {
                                                                                                             label$109: {
                                                                                                              label$110: {
                                                                                                               label$111: {
                                                                                                                label$112: {
                                                                                                                 label$113: {
                                                                                                                  label$114: {
                                                                                                                   label$115: {
                                                                                                                    label$116: {
                                                                                                                     label$117: {
                                                                                                                      label$118: {
                                                                                                                       label$119: {
                                                                                                                        label$120: {
                                                                                                                         label$121: {
                                                                                                                          label$122: {
                                                                                                                           label$123: {
                                                                                                                            $0 = HEAPU16[$5 + 550 >> 1];
                                                                                                                            if ($0) {
                                                                                                                             if (($0 | 0) == 1) {
                                                                                                                              break label$117;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 3) {
                                                                                                                              break label$114;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 4) {
                                                                                                                              break label$111;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 7) {
                                                                                                                              break label$82;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 8) {
                                                                                                                              break label$118;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 9) {
                                                                                                                              break label$110;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 11) {
                                                                                                                              break label$91;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 12) {
                                                                                                                              break label$50;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 15) {
                                                                                                                              break label$74;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 16) {
                                                                                                                              break label$73;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 17) {
                                                                                                                              break label$102;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 23) {
                                                                                                                              break label$59;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 24) {
                                                                                                                              break label$120;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 25) {
                                                                                                                              break label$23;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 28) {
                                                                                                                              break label$24;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 32) {
                                                                                                                              break label$116;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 33) {
                                                                                                                              break label$88;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 36) {
                                                                                                                              break label$49;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 41) {
                                                                                                                              break label$35;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 47) {
                                                                                                                              break label$39;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 56) {
                                                                                                                              break label$119;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 57) {
                                                                                                                              break label$61;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 60) {
                                                                                                                              break label$58;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 63) {
                                                                                                                              break label$63;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 72) {
                                                                                                                              break label$106;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 73) {
                                                                                                                              break label$105;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 75) {
                                                                                                                              break label$25;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 91) {
                                                                                                                              break label$112;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 96) {
                                                                                                                              break label$113;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 97) {
                                                                                                                              break label$19;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 120) {
                                                                                                                              break label$53;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 136) {
                                                                                                                              break label$43;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 200) {
                                                                                                                              break label$51;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 201) {
                                                                                                                              break label$27;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 204) {
                                                                                                                              break label$47;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 264) {
                                                                                                                              break label$42;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 265) {
                                                                                                                              break label$48;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 288) {
                                                                                                                              break label$109;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 289) {
                                                                                                                              break label$108;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 456) {
                                                                                                                              break label$40;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 463) {
                                                                                                                              break label$56;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 481) {
                                                                                                                              break label$107;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 511) {
                                                                                                                              break label$62;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 584) {
                                                                                                                              break label$52;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 585) {
                                                                                                                              break label$72;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 609) {
                                                                                                                              break label$57;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 744) {
                                                                                                                              break label$37;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 841) {
                                                                                                                              break label$34;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 1e3) {
                                                                                                                              break label$38;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 1481) {
                                                                                                                              break label$41;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 1608) {
                                                                                                                              break label$54;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 1609) {
                                                                                                                              break label$45;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 1640) {
                                                                                                                              break label$36;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 2127) {
                                                                                                                              break label$55;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 2312) {
                                                                                                                              break label$115;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 2313) {
                                                                                                                              break label$86;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 4095) {
                                                                                                                              break label$60;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 6433) {
                                                                                                                              break label$17;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 16968) {
                                                                                                                              break label$46;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 18507) {
                                                                                                                              break label$26;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 20473) {
                                                                                                                              break label$44;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 28673) {
                                                                                                                              break label$104;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 28676) {
                                                                                                                              break label$70;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 28677) {
                                                                                                                              break label$121;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 28679) {
                                                                                                                              break label$71;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 32768) {
                                                                                                                              break label$122;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 32769) {
                                                                                                                              break label$96;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 32771) {
                                                                                                                              break label$123;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 32772) {
                                                                                                                              break label$81;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 32775) {
                                                                                                                              break label$80;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 32776) {
                                                                                                                              break label$67;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 32777) {
                                                                                                                              break label$101;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 32779) {
                                                                                                                              break label$69;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 32780) {
                                                                                                                              break label$8;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 32784) {
                                                                                                                              break label$28;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 32785) {
                                                                                                                              break label$90;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 32788) {
                                                                                                                              break label$97;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 32792) {
                                                                                                                              break label$33;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 32793) {
                                                                                                                              break label$16;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 32801) {
                                                                                                                              break label$103;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 32807) {
                                                                                                                              break label$75;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 32831) {
                                                                                                                              break label$79;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 32840) {
                                                                                                                              break label$94;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 32841) {
                                                                                                                              break label$95;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 32843) {
                                                                                                                              break label$64;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 32844) {
                                                                                                                              break label$65;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 32856) {
                                                                                                                              break label$31;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 32865) {
                                                                                                                              break label$92;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 32871) {
                                                                                                                              break label$76;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 32888) {
                                                                                                                              break label$30;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 32904) {
                                                                                                                              break label$68;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 32905) {
                                                                                                                              break label$66;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 32968) {
                                                                                                                              break label$29;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 32969) {
                                                                                                                              break label$4;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 32993) {
                                                                                                                              break label$84;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 33032) {
                                                                                                                              break label$85;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 33033) {
                                                                                                                              break label$99;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 33035) {
                                                                                                                              break label$98;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 33057) {
                                                                                                                              break label$5;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 33060) {
                                                                                                                              break label$13;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 33097) {
                                                                                                                              break label$22;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 33240) {
                                                                                                                              break label$32;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 33353) {
                                                                                                                              break label$10;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 33356) {
                                                                                                                              break label$11;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 33383) {
                                                                                                                              break label$77;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 33545) {
                                                                                                                              break label$89;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 33569) {
                                                                                                                              break label$12;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 33768) {
                                                                                                                              break label$18;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 33889) {
                                                                                                                              break label$93;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 34400) {
                                                                                                                              break label$83;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 35105) {
                                                                                                                              break label$20;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 37479) {
                                                                                                                              break label$78;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 39177) {
                                                                                                                              break label$3;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 47369) {
                                                                                                                              break label$7;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 49929) {
                                                                                                                              break label$9;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 51465) {
                                                                                                                              break label$15;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 51489) {
                                                                                                                              break label$14;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 55560) {
                                                                                                                              break label$21;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 61441) {
                                                                                                                              break label$100;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 61444) {
                                                                                                                              break label$87;
                                                                                                                             }
                                                                                                                             if (($0 | 0) == 65529) {
                                                                                                                              break label$6;
                                                                                                                             }
                                                                                                                             break label$2;
                                                                                                                            }
                                                                                                                            HEAP32[$5 + 532 >> 2] = 0;
                                                                                                                            FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]]();
                                                                                                                            HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 532 >> 2];
                                                                                                                            break label$1;
                                                                                                                           }
                                                                                                                           HEAP32[$5 + 528 >> 2] = 0;
                                                                                                                           HEAP32[$5 + 528 >> 2] = jsvNewFromBool(FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]](HEAP32[$5 + 544 >> 2]) & 1);
                                                                                                                           HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 528 >> 2];
                                                                                                                           break label$1;
                                                                                                                          }
                                                                                                                          HEAP32[$5 + 524 >> 2] = 0;
                                                                                                                          FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]](HEAP32[$5 + 544 >> 2]);
                                                                                                                          HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 524 >> 2];
                                                                                                                          break label$1;
                                                                                                                         }
                                                                                                                         HEAP32[$5 + 520 >> 2] = 0;
                                                                                                                         HEAP32[$5 + 520 >> 2] = jsvNewFromPin(FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]]() & 255);
                                                                                                                         HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 520 >> 2];
                                                                                                                         break label$1;
                                                                                                                        }
                                                                                                                        HEAP32[$5 + 516 >> 2] = 0;
                                                                                                                        $0 = HEAP32[$5 + 552 >> 2];
                                                                                                                        if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                                         $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                                                        } else {
                                                                                                                         $1 = 0;
                                                                                                                        }
                                                                                                                        FUNCTION_TABLE[$0 | 0](jsvGetBool($1) & 1);
                                                                                                                        HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 516 >> 2];
                                                                                                                        break label$1;
                                                                                                                       }
                                                                                                                       HEAP32[$5 + 512 >> 2] = 0;
                                                                                                                       $0 = HEAP32[$5 + 552 >> 2];
                                                                                                                       if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                                        $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                                                       } else {
                                                                                                                        $1 = 0;
                                                                                                                       }
                                                                                                                       FUNCTION_TABLE[$0 | 0](jsvGetFloat($1));
                                                                                                                       HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 512 >> 2];
                                                                                                                       break label$1;
                                                                                                                      }
                                                                                                                      HEAP32[$5 + 508 >> 2] = 0;
                                                                                                                      $0 = HEAP32[$5 + 552 >> 2];
                                                                                                                      if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                                       $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                                                      } else {
                                                                                                                       $1 = 0;
                                                                                                                      }
                                                                                                                      FUNCTION_TABLE[$0 | 0]($1);
                                                                                                                      HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 508 >> 2];
                                                                                                                      break label$1;
                                                                                                                     }
                                                                                                                     HEAP32[$5 + 504 >> 2] = 0;
                                                                                                                     HEAP32[$5 + 504 >> 2] = FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]]();
                                                                                                                     HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 504 >> 2];
                                                                                                                     break label$1;
                                                                                                                    }
                                                                                                                    HEAP32[$5 + 500 >> 2] = 0;
                                                                                                                    $0 = HEAP32[$5 + 552 >> 2];
                                                                                                                    if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                                     $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                                                    } else {
                                                                                                                     $1 = 0;
                                                                                                                    }
                                                                                                                    FUNCTION_TABLE[$0 | 0](jsvGetInteger($1));
                                                                                                                    HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 500 >> 2];
                                                                                                                    break label$1;
                                                                                                                   }
                                                                                                                   HEAP32[$5 + 496 >> 2] = 0;
                                                                                                                   $2 = HEAP32[$5 + 552 >> 2];
                                                                                                                   if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                                    $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                                                   } else {
                                                                                                                    $0 = 0;
                                                                                                                   }
                                                                                                                   if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                                                    $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                                                   } else {
                                                                                                                    $1 = 0;
                                                                                                                   }
                                                                                                                   $1 = jsvGetInteger($1);
                                                                                                                   if (HEAP32[$5 + 536 >> 2] > 2) {
                                                                                                                    $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                                                                                                   } else {
                                                                                                                    $3 = 0;
                                                                                                                   }
                                                                                                                   FUNCTION_TABLE[$2 | 0]($0, $1, jsvGetInteger($3));
                                                                                                                   HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 496 >> 2];
                                                                                                                   break label$1;
                                                                                                                  }
                                                                                                                  HEAP32[$5 + 492 >> 2] = 0;
                                                                                                                  HEAP32[$5 + 492 >> 2] = jsvNewFromBool(FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]]() & 1);
                                                                                                                  HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 492 >> 2];
                                                                                                                  break label$1;
                                                                                                                 }
                                                                                                                 HEAP32[$5 + 488 >> 2] = 0;
                                                                                                                 $1 = HEAP32[$5 + 552 >> 2];
                                                                                                                 if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                                  $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                                                 } else {
                                                                                                                  $0 = 0;
                                                                                                                 }
                                                                                                                 $0 = jsvGetInteger($0);
                                                                                                                 if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                                                  $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                                                 } else {
                                                                                                                  $2 = 0;
                                                                                                                 }
                                                                                                                 FUNCTION_TABLE[$1 | 0]($0, $2);
                                                                                                                 HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 488 >> 2];
                                                                                                                 break label$1;
                                                                                                                }
                                                                                                                HEAP32[$5 + 484 >> 2] = 0;
                                                                                                                $1 = HEAP32[$5 + 552 >> 2];
                                                                                                                if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                                 $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                                                } else {
                                                                                                                 $0 = 0;
                                                                                                                }
                                                                                                                $0 = jsvGetBool($0) & 1;
                                                                                                                if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                                                 $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                                                } else {
                                                                                                                 $2 = 0;
                                                                                                                }
                                                                                                                HEAP32[$5 + 484 >> 2] = jsvNewFromBool(FUNCTION_TABLE[$1 | 0]($0, $2) & 1);
                                                                                                                HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 484 >> 2];
                                                                                                                break label$1;
                                                                                                               }
                                                                                                               HEAP32[$5 + 480 >> 2] = 0;
                                                                                                               HEAP32[$5 + 480 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]]() | 0);
                                                                                                               HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 480 >> 2];
                                                                                                               break label$1;
                                                                                                              }
                                                                                                              HEAP32[$5 + 476 >> 2] = 0;
                                                                                                              $0 = HEAP32[$5 + 552 >> 2];
                                                                                                              if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                               $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                                              } else {
                                                                                                               $1 = 0;
                                                                                                              }
                                                                                                              HEAP32[$5 + 476 >> 2] = FUNCTION_TABLE[$0 | 0]($1);
                                                                                                              HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 476 >> 2];
                                                                                                              break label$1;
                                                                                                             }
                                                                                                             HEAP32[$5 + 472 >> 2] = 0;
                                                                                                             $1 = HEAP32[$5 + 552 >> 2];
                                                                                                             if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                              $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                                             } else {
                                                                                                              $0 = 0;
                                                                                                             }
                                                                                                             $0 = jsvGetInteger($0);
                                                                                                             if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                                              $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                                             } else {
                                                                                                              $2 = 0;
                                                                                                             }
                                                                                                             FUNCTION_TABLE[$1 | 0]($0, jsvGetInteger($2));
                                                                                                             HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 472 >> 2];
                                                                                                             break label$1;
                                                                                                            }
                                                                                                            HEAP32[$5 + 468 >> 2] = 0;
                                                                                                            $1 = HEAP32[$5 + 552 >> 2];
                                                                                                            if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                             $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                                            } else {
                                                                                                             $0 = 0;
                                                                                                            }
                                                                                                            $0 = jsvGetInteger($0);
                                                                                                            if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                                             $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                                            } else {
                                                                                                             $2 = 0;
                                                                                                            }
                                                                                                            HEAP32[$5 + 468 >> 2] = FUNCTION_TABLE[$1 | 0]($0, jsvGetInteger($2));
                                                                                                            HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 468 >> 2];
                                                                                                            break label$1;
                                                                                                           }
                                                                                                           HEAP32[$5 + 464 >> 2] = 0;
                                                                                                           $1 = HEAP32[$5 + 552 >> 2];
                                                                                                           if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                            $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                                           } else {
                                                                                                            $0 = 0;
                                                                                                           }
                                                                                                           $0 = jsvGetInteger($0);
                                                                                                           if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                                            $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                                           } else {
                                                                                                            $2 = 0;
                                                                                                           }
                                                                                                           HEAP32[$5 + 464 >> 2] = FUNCTION_TABLE[$1 | 0]($0, jsvGetFloat($2));
                                                                                                           HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 464 >> 2];
                                                                                                           break label$1;
                                                                                                          }
                                                                                                          HEAP32[$5 + 460 >> 2] = 0;
                                                                                                          $1 = HEAP32[$5 + 552 >> 2];
                                                                                                          if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                           $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                                          } else {
                                                                                                           $0 = 0;
                                                                                                          }
                                                                                                          if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                                           $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                                          } else {
                                                                                                           $2 = 0;
                                                                                                          }
                                                                                                          FUNCTION_TABLE[$1 | 0]($0, $2);
                                                                                                          HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 460 >> 2];
                                                                                                          break label$1;
                                                                                                         }
                                                                                                         HEAP32[$5 + 456 >> 2] = 0;
                                                                                                         $1 = HEAP32[$5 + 552 >> 2];
                                                                                                         if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                          $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                                         } else {
                                                                                                          $0 = 0;
                                                                                                         }
                                                                                                         if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                                          $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                                         } else {
                                                                                                          $2 = 0;
                                                                                                         }
                                                                                                         HEAP32[$5 + 456 >> 2] = FUNCTION_TABLE[$1 | 0]($0, $2);
                                                                                                         HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 456 >> 2];
                                                                                                         break label$1;
                                                                                                        }
                                                                                                        HEAP32[$5 + 452 >> 2] = 0;
                                                                                                        HEAP32[$5 + 452 >> 2] = FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]]();
                                                                                                        HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 452 >> 2];
                                                                                                        break label$1;
                                                                                                       }
                                                                                                       HEAP32[$5 + 448 >> 2] = 0;
                                                                                                       $1 = HEAP32[$5 + 552 >> 2];
                                                                                                       $0 = HEAP32[$5 + 544 >> 2];
                                                                                                       if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                        $2 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                                       } else {
                                                                                                        $2 = 0;
                                                                                                       }
                                                                                                       HEAP32[$5 + 448 >> 2] = FUNCTION_TABLE[$1 | 0]($0, jsvGetInteger($2));
                                                                                                       HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 448 >> 2];
                                                                                                       break label$1;
                                                                                                      }
                                                                                                      HEAP32[$5 + 444 >> 2] = 0;
                                                                                                      label$171: {
                                                                                                       if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                        $0 = jsvNewArray(HEAP32[$5 + 540 >> 2], HEAP32[$5 + 536 >> 2]);
                                                                                                        break label$171;
                                                                                                       }
                                                                                                       $0 = jsvNewEmptyArray();
                                                                                                      }
                                                                                                      HEAP32[$5 + 440 >> 2] = $0;
                                                                                                      HEAP32[$5 + 444 >> 2] = FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]](HEAP32[$5 + 440 >> 2]);
                                                                                                      jsvUnLock(HEAP32[$5 + 440 >> 2]);
                                                                                                      HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 444 >> 2];
                                                                                                      break label$1;
                                                                                                     }
                                                                                                     HEAP32[$5 + 436 >> 2] = 0;
                                                                                                     $1 = HEAP32[$5 + 552 >> 2];
                                                                                                     $0 = HEAP32[$5 + 544 >> 2];
                                                                                                     if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                      $2 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                                     } else {
                                                                                                      $2 = 0;
                                                                                                     }
                                                                                                     HEAP32[$5 + 436 >> 2] = FUNCTION_TABLE[$1 | 0]($0, $2);
                                                                                                     HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 436 >> 2];
                                                                                                     break label$1;
                                                                                                    }
                                                                                                    HEAP32[$5 + 432 >> 2] = 0;
                                                                                                    HEAP32[$5 + 432 >> 2] = FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]](HEAP32[$5 + 544 >> 2]);
                                                                                                    HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 432 >> 2];
                                                                                                    break label$1;
                                                                                                   }
                                                                                                   HEAP32[$5 + 428 >> 2] = 0;
                                                                                                   $2 = HEAP32[$5 + 552 >> 2];
                                                                                                   $1 = HEAP32[$5 + 544 >> 2];
                                                                                                   if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                    $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                                   } else {
                                                                                                    $0 = 0;
                                                                                                   }
                                                                                                   if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                                    $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                                   } else {
                                                                                                    $3 = 0;
                                                                                                   }
                                                                                                   HEAP32[$5 + 428 >> 2] = FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetInteger($3));
                                                                                                   HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 428 >> 2];
                                                                                                   break label$1;
                                                                                                  }
                                                                                                  HEAP32[$5 + 424 >> 2] = 0;
                                                                                                  $2 = HEAP32[$5 + 552 >> 2];
                                                                                                  $1 = HEAP32[$5 + 544 >> 2];
                                                                                                  if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                   $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                                  } else {
                                                                                                   $0 = 0;
                                                                                                  }
                                                                                                  if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                                   $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                                  } else {
                                                                                                   $3 = 0;
                                                                                                  }
                                                                                                  HEAP32[$5 + 424 >> 2] = jsvNewFromBool(FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetInteger($3)) & 1);
                                                                                                  HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 424 >> 2];
                                                                                                  break label$1;
                                                                                                 }
                                                                                                 HEAP32[$5 + 420 >> 2] = 0;
                                                                                                 label$183: {
                                                                                                  if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                   $0 = jsvNewArray(HEAP32[$5 + 540 >> 2], HEAP32[$5 + 536 >> 2]);
                                                                                                   break label$183;
                                                                                                  }
                                                                                                  $0 = jsvNewEmptyArray();
                                                                                                 }
                                                                                                 HEAP32[$5 + 416 >> 2] = $0;
                                                                                                 HEAP32[$5 + 420 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]](HEAP32[$5 + 544 >> 2], HEAP32[$5 + 416 >> 2]) | 0);
                                                                                                 jsvUnLock(HEAP32[$5 + 416 >> 2]);
                                                                                                 HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 420 >> 2];
                                                                                                 break label$1;
                                                                                                }
                                                                                                HEAP32[$5 + 412 >> 2] = 0;
                                                                                                HEAP32[$5 + 412 >> 2] = FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]](HEAP32[$5 + 544 >> 2]);
                                                                                                HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 412 >> 2];
                                                                                                break label$1;
                                                                                               }
                                                                                               HEAP32[$5 + 408 >> 2] = 0;
                                                                                               $2 = HEAP32[$5 + 552 >> 2];
                                                                                               $1 = HEAP32[$5 + 544 >> 2];
                                                                                               if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                                $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                               } else {
                                                                                                $0 = 0;
                                                                                               }
                                                                                               if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                                $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                               } else {
                                                                                                $3 = 0;
                                                                                               }
                                                                                               HEAP32[$5 + 408 >> 2] = FUNCTION_TABLE[$2 | 0]($1, $0, $3);
                                                                                               HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 408 >> 2];
                                                                                               break label$1;
                                                                                              }
                                                                                              HEAP32[$5 + 404 >> 2] = 0;
                                                                                              $2 = HEAP32[$5 + 552 >> 2];
                                                                                              $1 = HEAP32[$5 + 544 >> 2];
                                                                                              if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                               $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                              } else {
                                                                                               $0 = 0;
                                                                                              }
                                                                                              if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                               $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                              } else {
                                                                                               $3 = 0;
                                                                                              }
                                                                                              FUNCTION_TABLE[$2 | 0]($1, $0, $3);
                                                                                              HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 404 >> 2];
                                                                                              break label$1;
                                                                                             }
                                                                                             HEAP32[$5 + 400 >> 2] = 0;
                                                                                             label$193: {
                                                                                              if (HEAP32[$5 + 536 >> 2] > 2) {
                                                                                               $0 = jsvNewArray(HEAP32[$5 + 540 >> 2] + 8 | 0, HEAP32[$5 + 536 >> 2] - 2 | 0);
                                                                                               break label$193;
                                                                                              }
                                                                                              $0 = jsvNewEmptyArray();
                                                                                             }
                                                                                             HEAP32[$5 + 396 >> 2] = $0;
                                                                                             $2 = HEAP32[$5 + 552 >> 2];
                                                                                             $1 = HEAP32[$5 + 544 >> 2];
                                                                                             if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                              $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                             } else {
                                                                                              $0 = 0;
                                                                                             }
                                                                                             $0 = jsvGetInteger($0);
                                                                                             if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                              $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                             } else {
                                                                                              $3 = 0;
                                                                                             }
                                                                                             HEAP32[$5 + 400 >> 2] = FUNCTION_TABLE[$2 | 0]($1, $0, $3, HEAP32[$5 + 396 >> 2]);
                                                                                             jsvUnLock(HEAP32[$5 + 396 >> 2]);
                                                                                             HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 400 >> 2];
                                                                                             break label$1;
                                                                                            }
                                                                                            HEAP32[$5 + 392 >> 2] = 0;
                                                                                            $2 = HEAP32[$5 + 552 >> 2];
                                                                                            $1 = HEAP32[$5 + 544 >> 2];
                                                                                            if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                             $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                            } else {
                                                                                             $0 = 0;
                                                                                            }
                                                                                            $0 = jsvGetInteger($0);
                                                                                            if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                             $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                            } else {
                                                                                             $3 = 0;
                                                                                            }
                                                                                            HEAP32[$5 + 392 >> 2] = FUNCTION_TABLE[$2 | 0]($1, $0, $3);
                                                                                            HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 392 >> 2];
                                                                                            break label$1;
                                                                                           }
                                                                                           HEAP32[$5 + 388 >> 2] = 0;
                                                                                           $0 = HEAP32[$5 + 552 >> 2];
                                                                                           if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                            $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                           } else {
                                                                                            $1 = 0;
                                                                                           }
                                                                                           HEAP32[$5 + 388 >> 2] = jsvNewFromBool(FUNCTION_TABLE[$0 | 0]($1) & 1);
                                                                                           HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 388 >> 2];
                                                                                           break label$1;
                                                                                          }
                                                                                          HEAP32[$5 + 384 >> 2] = 0;
                                                                                          label$205: {
                                                                                           if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                            $0 = jsvNewArray(HEAP32[$5 + 540 >> 2], HEAP32[$5 + 536 >> 2]);
                                                                                            break label$205;
                                                                                           }
                                                                                           $0 = jsvNewEmptyArray();
                                                                                          }
                                                                                          HEAP32[$5 + 380 >> 2] = $0;
                                                                                          HEAP32[$5 + 384 >> 2] = FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]](HEAP32[$5 + 544 >> 2], HEAP32[$5 + 380 >> 2]);
                                                                                          jsvUnLock(HEAP32[$5 + 380 >> 2]);
                                                                                          HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 384 >> 2];
                                                                                          break label$1;
                                                                                         }
                                                                                         HEAP32[$5 + 376 >> 2] = 0;
                                                                                         $3 = HEAP32[$5 + 552 >> 2];
                                                                                         $2 = HEAP32[$5 + 544 >> 2];
                                                                                         if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                          $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                         } else {
                                                                                          $0 = 0;
                                                                                         }
                                                                                         if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                          $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                         } else {
                                                                                          $1 = 0;
                                                                                         }
                                                                                         $1 = jsvGetInteger($1);
                                                                                         if (HEAP32[$5 + 536 >> 2] > 2) {
                                                                                          $4 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                                                                         } else {
                                                                                          $4 = 0;
                                                                                         }
                                                                                         HEAP32[$5 + 376 >> 2] = FUNCTION_TABLE[$3 | 0]($2, $0, $1, $4);
                                                                                         HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 376 >> 2];
                                                                                         break label$1;
                                                                                        }
                                                                                        HEAP32[$5 + 372 >> 2] = 0;
                                                                                        $0 = HEAP32[$5 + 552 >> 2];
                                                                                        if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                         $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                        } else {
                                                                                         $1 = 0;
                                                                                        }
                                                                                        HEAP32[$5 + 372 >> 2] = FUNCTION_TABLE[$0 | 0](jsvGetInteger($1));
                                                                                        HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 372 >> 2];
                                                                                        break label$1;
                                                                                       }
                                                                                       HEAP32[$5 + 368 >> 2] = 0;
                                                                                       HEAP32[$5 + 368 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]](HEAP32[$5 + 544 >> 2]) | 0);
                                                                                       HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 368 >> 2];
                                                                                       break label$1;
                                                                                      }
                                                                                      HEAP32[$5 + 364 >> 2] = 0;
                                                                                      $2 = HEAP32[$5 + 552 >> 2];
                                                                                      if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                       $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                      } else {
                                                                                       $0 = 0;
                                                                                      }
                                                                                      if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                       $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                      } else {
                                                                                       $1 = 0;
                                                                                      }
                                                                                      $1 = jsvGetInteger($1);
                                                                                      if (HEAP32[$5 + 536 >> 2] > 2) {
                                                                                       $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                                                                      } else {
                                                                                       $3 = 0;
                                                                                      }
                                                                                      HEAP32[$5 + 364 >> 2] = FUNCTION_TABLE[$2 | 0]($0, $1, jsvGetInteger($3));
                                                                                      HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 364 >> 2];
                                                                                      break label$1;
                                                                                     }
                                                                                     HEAP32[$5 + 360 >> 2] = 0;
                                                                                     $2 = HEAP32[$5 + 552 >> 2];
                                                                                     $1 = HEAP32[$5 + 544 >> 2];
                                                                                     if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                      $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                     } else {
                                                                                      $0 = 0;
                                                                                     }
                                                                                     if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                      $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                     } else {
                                                                                      $3 = 0;
                                                                                     }
                                                                                     FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetInteger($3));
                                                                                     HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 360 >> 2];
                                                                                     break label$1;
                                                                                    }
                                                                                    HEAP32[$5 + 356 >> 2] = 0;
                                                                                    $2 = HEAP32[$5 + 552 >> 2];
                                                                                    $1 = HEAP32[$5 + 544 >> 2];
                                                                                    if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                     $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                    } else {
                                                                                     $0 = 0;
                                                                                    }
                                                                                    $0 = jsvGetInteger($0);
                                                                                    if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                     $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                    } else {
                                                                                     $3 = 0;
                                                                                    }
                                                                                    HEAP32[$5 + 356 >> 2] = FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetBool($3) & 1);
                                                                                    HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 356 >> 2];
                                                                                    break label$1;
                                                                                   }
                                                                                   HEAP32[$5 + 352 >> 2] = 0;
                                                                                   $3 = HEAP32[$5 + 552 >> 2];
                                                                                   $2 = HEAP32[$5 + 544 >> 2];
                                                                                   if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                    $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                                   } else {
                                                                                    $0 = 0;
                                                                                   }
                                                                                   $1 = jsvGetInteger($0);
                                                                                   if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                                    $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                                   } else {
                                                                                    $0 = 0;
                                                                                   }
                                                                                   if (HEAP32[$5 + 536 >> 2] > 2) {
                                                                                    $4 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                                                                   } else {
                                                                                    $4 = 0;
                                                                                   }
                                                                                   FUNCTION_TABLE[$3 | 0]($2, $1, $0, jsvGetBool($4) & 1);
                                                                                   HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 352 >> 2];
                                                                                   break label$1;
                                                                                  }
                                                                                  HEAP32[$5 + 348 >> 2] = 0;
                                                                                  HEAP32[$5 + 348 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]]());
                                                                                  HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 348 >> 2];
                                                                                  break label$1;
                                                                                 }
                                                                                 HEAP32[$5 + 344 >> 2] = 0;
                                                                                 HEAP32[$5 + 344 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]](HEAP32[$5 + 544 >> 2]) | 0);
                                                                                 HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 344 >> 2];
                                                                                 break label$1;
                                                                                }
                                                                                HEAP32[$5 + 340 >> 2] = 0;
                                                                                HEAP32[$5 + 340 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]](HEAP32[$5 + 544 >> 2]));
                                                                                HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 340 >> 2];
                                                                                break label$1;
                                                                               }
                                                                               HEAP32[$5 + 336 >> 2] = 0;
                                                                               $1 = HEAP32[$5 + 552 >> 2];
                                                                               $0 = HEAP32[$5 + 544 >> 2];
                                                                               if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                                $2 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                               } else {
                                                                                $2 = 0;
                                                                               }
                                                                               HEAP32[$5 + 336 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$1 | 0]($0, jsvGetFloat($2)));
                                                                               HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 336 >> 2];
                                                                               break label$1;
                                                                              }
                                                                              HEAP32[$5 + 332 >> 2] = 0;
                                                                              $4 = HEAP32[$5 + 552 >> 2];
                                                                              $3 = HEAP32[$5 + 544 >> 2];
                                                                              if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                               $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                              } else {
                                                                               $0 = 0;
                                                                              }
                                                                              $2 = jsvGetInteger($0);
                                                                              if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                               $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                              } else {
                                                                               $1 = 0;
                                                                              }
                                                                              if (HEAP32[$5 + 536 >> 2] > 2) {
                                                                               $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                                                              } else {
                                                                               $0 = 0;
                                                                              }
                                                                              if (HEAP32[$5 + 536 >> 2] > 3) {
                                                                               $6 = HEAP32[HEAP32[$5 + 540 >> 2] + 12 >> 2];
                                                                              } else {
                                                                               $6 = 0;
                                                                              }
                                                                              HEAP32[$5 + 332 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$4 | 0]($3, $2, $1, $0, $6));
                                                                              HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 332 >> 2];
                                                                              break label$1;
                                                                             }
                                                                             HEAP32[$5 + 328 >> 2] = 0;
                                                                             $3 = HEAP32[$5 + 552 >> 2];
                                                                             $2 = HEAP32[$5 + 544 >> 2];
                                                                             if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                              $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                             } else {
                                                                              $0 = 0;
                                                                             }
                                                                             $1 = jsvGetInteger($0);
                                                                             if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                              $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                             } else {
                                                                              $0 = 0;
                                                                             }
                                                                             if (HEAP32[$5 + 536 >> 2] > 2) {
                                                                              $4 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                                                             } else {
                                                                              $4 = 0;
                                                                             }
                                                                             HEAP32[$5 + 328 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$3 | 0]($2, $1, $0, $4));
                                                                             HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 328 >> 2];
                                                                             break label$1;
                                                                            }
                                                                            HEAP32[$5 + 324 >> 2] = 0;
                                                                            $2 = HEAP32[$5 + 552 >> 2];
                                                                            $1 = HEAP32[$5 + 544 >> 2];
                                                                            if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                             $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                            } else {
                                                                             $0 = 0;
                                                                            }
                                                                            $0 = jsvGetInteger($0);
                                                                            if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                             $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                            } else {
                                                                             $3 = 0;
                                                                            }
                                                                            HEAP32[$5 + 324 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$2 | 0]($1, $0, $3));
                                                                            HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 324 >> 2];
                                                                            break label$1;
                                                                           }
                                                                           HEAP32[$5 + 320 >> 2] = 0;
                                                                           $1 = HEAP32[$5 + 552 >> 2];
                                                                           $0 = HEAP32[$5 + 544 >> 2];
                                                                           if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                            $2 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                           } else {
                                                                            $2 = 0;
                                                                           }
                                                                           HEAP32[$5 + 320 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$1 | 0]($0, jsvGetInteger($2)));
                                                                           HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 320 >> 2];
                                                                           break label$1;
                                                                          }
                                                                          HEAP32[$5 + 316 >> 2] = 0;
                                                                          $0 = HEAP32[$5 + 552 >> 2];
                                                                          if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                           $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                          } else {
                                                                           $1 = 0;
                                                                          }
                                                                          HEAP32[$5 + 316 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$0 | 0]($1));
                                                                          HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 316 >> 2];
                                                                          break label$1;
                                                                         }
                                                                         HEAP32[$5 + 312 >> 2] = 0;
                                                                         label$259: {
                                                                          if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                           $0 = jsvNewArray(HEAP32[$5 + 540 >> 2], HEAP32[$5 + 536 >> 2]);
                                                                           break label$259;
                                                                          }
                                                                          $0 = jsvNewEmptyArray();
                                                                         }
                                                                         HEAP32[$5 + 308 >> 2] = $0;
                                                                         FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]](HEAP32[$5 + 308 >> 2]);
                                                                         jsvUnLock(HEAP32[$5 + 308 >> 2]);
                                                                         HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 312 >> 2];
                                                                         break label$1;
                                                                        }
                                                                        HEAP32[$5 + 304 >> 2] = 0;
                                                                        $2 = HEAP32[$5 + 552 >> 2];
                                                                        if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                         $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                        } else {
                                                                         $1 = 0;
                                                                        }
                                                                        if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                         $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                        } else {
                                                                         $0 = 0;
                                                                        }
                                                                        if (HEAP32[$5 + 536 >> 2] > 2) {
                                                                         $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                                                        } else {
                                                                         $3 = 0;
                                                                        }
                                                                        HEAP32[$5 + 304 >> 2] = FUNCTION_TABLE[$2 | 0]($1, $0, $3);
                                                                        HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 304 >> 2];
                                                                        break label$1;
                                                                       }
                                                                       HEAP32[$5 + 300 >> 2] = 0;
                                                                       HEAP32[$5 + 300 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]]());
                                                                       HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 300 >> 2];
                                                                       break label$1;
                                                                      }
                                                                      HEAP32[$5 + 296 >> 2] = 0;
                                                                      HEAP32[$5 + 296 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]]() | 0);
                                                                      HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 296 >> 2];
                                                                      break label$1;
                                                                     }
                                                                     HEAP32[$5 + 292 >> 2] = 0;
                                                                     $1 = HEAP32[$5 + 552 >> 2];
                                                                     $0 = HEAP32[$5 + 544 >> 2];
                                                                     if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                      $2 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                     } else {
                                                                      $2 = 0;
                                                                     }
                                                                     HEAP32[$5 + 292 >> 2] = jsvNewFromBool(FUNCTION_TABLE[$1 | 0]($0, $2) & 1);
                                                                     HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 292 >> 2];
                                                                     break label$1;
                                                                    }
                                                                    HEAP32[$5 + 288 >> 2] = 0;
                                                                    label$269: {
                                                                     if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                      $0 = jsvNewArray(HEAP32[$5 + 540 >> 2] + 4 | 0, HEAP32[$5 + 536 >> 2] - 1 | 0);
                                                                      break label$269;
                                                                     }
                                                                     $0 = jsvNewEmptyArray();
                                                                    }
                                                                    HEAP32[$5 + 284 >> 2] = $0;
                                                                    $1 = HEAP32[$5 + 552 >> 2];
                                                                    $0 = HEAP32[$5 + 544 >> 2];
                                                                    if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                     $2 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                    } else {
                                                                     $2 = 0;
                                                                    }
                                                                    FUNCTION_TABLE[$1 | 0]($0, $2, HEAP32[$5 + 284 >> 2]);
                                                                    jsvUnLock(HEAP32[$5 + 284 >> 2]);
                                                                    HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 288 >> 2];
                                                                    break label$1;
                                                                   }
                                                                   HEAP32[$5 + 280 >> 2] = 0;
                                                                   $1 = HEAP32[$5 + 552 >> 2];
                                                                   $0 = HEAP32[$5 + 544 >> 2];
                                                                   if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                    $2 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                   } else {
                                                                    $2 = 0;
                                                                   }
                                                                   FUNCTION_TABLE[$1 | 0]($0, $2);
                                                                   HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 280 >> 2];
                                                                   break label$1;
                                                                  }
                                                                  HEAP32[$5 + 276 >> 2] = 0;
                                                                  label$275: {
                                                                   if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                    $0 = jsvNewArray(HEAP32[$5 + 540 >> 2] + 4 | 0, HEAP32[$5 + 536 >> 2] - 1 | 0);
                                                                    break label$275;
                                                                   }
                                                                   $0 = jsvNewEmptyArray();
                                                                  }
                                                                  HEAP32[$5 + 272 >> 2] = $0;
                                                                  $1 = HEAP32[$5 + 552 >> 2];
                                                                  $0 = HEAP32[$5 + 544 >> 2];
                                                                  if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                   $2 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                  } else {
                                                                   $2 = 0;
                                                                  }
                                                                  HEAP32[$5 + 276 >> 2] = FUNCTION_TABLE[$1 | 0]($0, $2, HEAP32[$5 + 272 >> 2]);
                                                                  jsvUnLock(HEAP32[$5 + 272 >> 2]);
                                                                  HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 276 >> 2];
                                                                  break label$1;
                                                                 }
                                                                 HEAP32[$5 + 268 >> 2] = 0;
                                                                 $2 = HEAP32[$5 + 552 >> 2];
                                                                 $1 = HEAP32[$5 + 544 >> 2];
                                                                 if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                  $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                 } else {
                                                                  $0 = 0;
                                                                 }
                                                                 if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                  $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                 } else {
                                                                  $3 = 0;
                                                                 }
                                                                 HEAP32[$5 + 268 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$2 | 0]($1, $0, $3) | 0);
                                                                 HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 268 >> 2];
                                                                 break label$1;
                                                                }
                                                                HEAP32[$5 + 264 >> 2] = 0;
                                                                $2 = HEAP32[$5 + 552 >> 2];
                                                                $1 = HEAP32[$5 + 544 >> 2];
                                                                if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                 $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                                } else {
                                                                 $0 = 0;
                                                                }
                                                                if (HEAP32[$5 + 536 >> 2] > 1) {
                                                                 $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                                } else {
                                                                 $3 = 0;
                                                                }
                                                                HEAP32[$5 + 264 >> 2] = jsvNewFromBool(FUNCTION_TABLE[$2 | 0]($1, $0, $3) & 1);
                                                                HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 264 >> 2];
                                                                break label$1;
                                                               }
                                                               HEAP32[$5 + 260 >> 2] = 0;
                                                               $0 = HEAP32[$5 + 552 >> 2];
                                                               if (HEAP32[$5 + 536 >> 2] > 0) {
                                                                $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                               } else {
                                                                $1 = 0;
                                                               }
                                                               HEAP32[$5 + 260 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$0 | 0](jsvGetFloat($1)));
                                                               HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 260 >> 2];
                                                               break label$1;
                                                              }
                                                              HEAP32[$5 + 256 >> 2] = 0;
                                                              $0 = HEAP32[$5 + 552 >> 2];
                                                              if (HEAP32[$5 + 536 >> 2] > 0) {
                                                               $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                              } else {
                                                               $1 = 0;
                                                              }
                                                              $7 = jsvGetFloat($1);
                                                              if (HEAP32[$5 + 536 >> 2] > 1) {
                                                               $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                              } else {
                                                               $1 = 0;
                                                              }
                                                              HEAP32[$5 + 256 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$0 | 0]($7, jsvGetFloat($1)));
                                                              HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 256 >> 2];
                                                              break label$1;
                                                             }
                                                             HEAP32[$5 + 252 >> 2] = 0;
                                                             $0 = HEAP32[$5 + 552 >> 2];
                                                             if (HEAP32[$5 + 536 >> 2] > 0) {
                                                              $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                             } else {
                                                              $1 = 0;
                                                             }
                                                             HEAP32[$5 + 252 >> 2] = FUNCTION_TABLE[$0 | 0](jsvGetFloat($1));
                                                             HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 252 >> 2];
                                                             break label$1;
                                                            }
                                                            HEAP32[$5 + 248 >> 2] = 0;
                                                            $0 = HEAP32[$5 + 552 >> 2];
                                                            if (HEAP32[$5 + 536 >> 2] > 0) {
                                                             $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                            } else {
                                                             $1 = 0;
                                                            }
                                                            $8 = jsvGetFloat($1);
                                                            if (HEAP32[$5 + 536 >> 2] > 1) {
                                                             $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                            } else {
                                                             $1 = 0;
                                                            }
                                                            $7 = jsvGetFloat($1);
                                                            if (HEAP32[$5 + 536 >> 2] > 2) {
                                                             $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                                            } else {
                                                             $1 = 0;
                                                            }
                                                            HEAP32[$5 + 248 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$0 | 0]($8, $7, jsvGetFloat($1)));
                                                            HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 248 >> 2];
                                                            break label$1;
                                                           }
                                                           HEAP32[$5 + 244 >> 2] = 0;
                                                           label$301: {
                                                            if (HEAP32[$5 + 536 >> 2] > 0) {
                                                             $0 = jsvNewArray(HEAP32[$5 + 540 >> 2], HEAP32[$5 + 536 >> 2]);
                                                             break label$301;
                                                            }
                                                            $0 = jsvNewEmptyArray();
                                                           }
                                                           HEAP32[$5 + 240 >> 2] = $0;
                                                           HEAP32[$5 + 244 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]](HEAP32[$5 + 240 >> 2]));
                                                           jsvUnLock(HEAP32[$5 + 240 >> 2]);
                                                           HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 244 >> 2];
                                                           break label$1;
                                                          }
                                                          HEAP32[$5 + 236 >> 2] = 0;
                                                          $0 = HEAP32[$5 + 552 >> 2];
                                                          if (HEAP32[$5 + 536 >> 2] > 0) {
                                                           $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                          } else {
                                                           $1 = 0;
                                                          }
                                                          HEAP32[$5 + 236 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$0 | 0](jsvGetFloat($1)) | 0);
                                                          HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 236 >> 2];
                                                          break label$1;
                                                         }
                                                         HEAP32[$5 + 232 >> 2] = 0;
                                                         $2 = HEAP32[$5 + 552 >> 2];
                                                         if (HEAP32[$5 + 536 >> 2] > 0) {
                                                          $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                         } else {
                                                          $0 = 0;
                                                         }
                                                         $1 = jsvGetInteger($0);
                                                         if (HEAP32[$5 + 536 >> 2] > 1) {
                                                          $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                         } else {
                                                          $0 = 0;
                                                         }
                                                         if (HEAP32[$5 + 536 >> 2] > 2) {
                                                          $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                                         } else {
                                                          $3 = 0;
                                                         }
                                                         HEAP32[$5 + 232 >> 2] = FUNCTION_TABLE[$2 | 0]($1, $0, $3);
                                                         HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 232 >> 2];
                                                         break label$1;
                                                        }
                                                        HEAP32[$5 + 228 >> 2] = 0;
                                                        $1 = HEAP32[$5 + 552 >> 2];
                                                        if (HEAP32[$5 + 536 >> 2] > 0) {
                                                         $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                        } else {
                                                         $0 = 0;
                                                        }
                                                        if (HEAP32[$5 + 536 >> 2] > 1) {
                                                         $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                        } else {
                                                         $2 = 0;
                                                        }
                                                        HEAP32[$5 + 228 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$1 | 0]($0, jsvGetFloat($2)));
                                                        HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 228 >> 2];
                                                        break label$1;
                                                       }
                                                       HEAP32[$5 + 224 >> 2] = 0;
                                                       $2 = HEAP32[$5 + 552 >> 2];
                                                       if (HEAP32[$5 + 536 >> 2] > 0) {
                                                        $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                       } else {
                                                        $1 = 0;
                                                       }
                                                       if (HEAP32[$5 + 536 >> 2] > 1) {
                                                        $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                       } else {
                                                        $0 = 0;
                                                       }
                                                       if (HEAP32[$5 + 536 >> 2] > 2) {
                                                        $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                                       } else {
                                                        $3 = 0;
                                                       }
                                                       HEAP32[$5 + 224 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetInteger($3)));
                                                       HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 224 >> 2];
                                                       break label$1;
                                                      }
                                                      HEAP32[$5 + 220 >> 2] = 0;
                                                      $2 = HEAP32[$5 + 552 >> 2];
                                                      if (HEAP32[$5 + 536 >> 2] > 0) {
                                                       $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                      } else {
                                                       $1 = 0;
                                                      }
                                                      if (HEAP32[$5 + 536 >> 2] > 1) {
                                                       $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                      } else {
                                                       $0 = 0;
                                                      }
                                                      if (HEAP32[$5 + 536 >> 2] > 2) {
                                                       $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                                      } else {
                                                       $3 = 0;
                                                      }
                                                      FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetBool($3) & 1);
                                                      HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 220 >> 2];
                                                      break label$1;
                                                     }
                                                     HEAP32[$5 + 216 >> 2] = 0;
                                                     $0 = HEAP32[$5 + 552 >> 2];
                                                     if (HEAP32[$5 + 536 >> 2] > 0) {
                                                      $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                     } else {
                                                      $1 = 0;
                                                     }
                                                     $7 = jsvGetFloat($1);
                                                     if (HEAP32[$5 + 536 >> 2] > 1) {
                                                      $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                     } else {
                                                      $1 = 0;
                                                     }
                                                     FUNCTION_TABLE[$0 | 0]($7, $1);
                                                     HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 216 >> 2];
                                                     break label$1;
                                                    }
                                                    HEAP32[$5 + 212 >> 2] = 0;
                                                    $2 = HEAP32[$5 + 552 >> 2];
                                                    if (HEAP32[$5 + 536 >> 2] > 0) {
                                                     $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                    } else {
                                                     $1 = 0;
                                                    }
                                                    if (HEAP32[$5 + 536 >> 2] > 1) {
                                                     $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                    } else {
                                                     $0 = 0;
                                                    }
                                                    if (HEAP32[$5 + 536 >> 2] > 2) {
                                                     $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                                    } else {
                                                     $3 = 0;
                                                    }
                                                    FUNCTION_TABLE[$2 | 0]($1, $0, $3);
                                                    HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 212 >> 2];
                                                    break label$1;
                                                   }
                                                   HEAP32[$5 + 208 >> 2] = 0;
                                                   $1 = HEAP32[$5 + 552 >> 2];
                                                   if (HEAP32[$5 + 536 >> 2] > 0) {
                                                    $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                   } else {
                                                    $0 = 0;
                                                   }
                                                   if (HEAP32[$5 + 536 >> 2] > 1) {
                                                    $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                   } else {
                                                    $2 = 0;
                                                   }
                                                   FUNCTION_TABLE[$1 | 0]($0, jsvGetBool($2) & 1);
                                                   HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 208 >> 2];
                                                   break label$1;
                                                  }
                                                  HEAP32[$5 + 204 >> 2] = 0;
                                                  $0 = HEAP32[$5 + 552 >> 2];
                                                  if (HEAP32[$5 + 536 >> 2] > 0) {
                                                   $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                  } else {
                                                   $1 = 0;
                                                  }
                                                  HEAP32[$5 + 204 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$0 | 0]($1) | 0);
                                                  HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 204 >> 2];
                                                  break label$1;
                                                 }
                                                 HEAP32[$5 + 200 >> 2] = 0;
                                                 $0 = HEAP32[$5 + 552 >> 2];
                                                 if (HEAP32[$5 + 536 >> 2] > 0) {
                                                  $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                 } else {
                                                  $1 = 0;
                                                 }
                                                 HEAP32[$5 + 200 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$0 | 0](jsvGetInteger($1)) | 0);
                                                 HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 200 >> 2];
                                                 break label$1;
                                                }
                                                HEAP32[$5 + 196 >> 2] = 0;
                                                $1 = HEAP32[$5 + 552 >> 2];
                                                if (HEAP32[$5 + 536 >> 2] > 0) {
                                                 $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                                } else {
                                                 $0 = 0;
                                                }
                                                if (HEAP32[$5 + 536 >> 2] > 1) {
                                                 $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                                } else {
                                                 $2 = 0;
                                                }
                                                HEAP32[$5 + 196 >> 2] = FUNCTION_TABLE[$1 | 0]($0, jsvGetInteger($2));
                                                HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 196 >> 2];
                                                break label$1;
                                               }
                                               HEAP32[$5 + 192 >> 2] = 0;
                                               $1 = HEAP32[$5 + 552 >> 2];
                                               if (HEAP32[$5 + 536 >> 2] > 0) {
                                                $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                               } else {
                                                $0 = 0;
                                               }
                                               if (HEAP32[$5 + 536 >> 2] > 1) {
                                                $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                               } else {
                                                $2 = 0;
                                               }
                                               HEAP32[$5 + 192 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$1 | 0]($0, jsvGetBool($2) & 1) | 0);
                                               HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 192 >> 2];
                                               break label$1;
                                              }
                                              HEAP32[$5 + 188 >> 2] = 0;
                                              $3 = HEAP32[$5 + 552 >> 2];
                                              if (HEAP32[$5 + 536 >> 2] > 0) {
                                               $2 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                              } else {
                                               $2 = 0;
                                              }
                                              if (HEAP32[$5 + 536 >> 2] > 1) {
                                               $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                              } else {
                                               $1 = 0;
                                              }
                                              if (HEAP32[$5 + 536 >> 2] > 2) {
                                               $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                              } else {
                                               $0 = 0;
                                              }
                                              if (HEAP32[$5 + 536 >> 2] > 3) {
                                               $4 = HEAP32[HEAP32[$5 + 540 >> 2] + 12 >> 2];
                                              } else {
                                               $4 = 0;
                                              }
                                              FUNCTION_TABLE[$3 | 0]($2, $1, $0, jsvGetInteger($4));
                                              HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 188 >> 2];
                                              break label$1;
                                             }
                                             HEAP32[$5 + 184 >> 2] = 0;
                                             $2 = HEAP32[$5 + 552 >> 2];
                                             if (HEAP32[$5 + 536 >> 2] > 0) {
                                              $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                             } else {
                                              $1 = 0;
                                             }
                                             if (HEAP32[$5 + 536 >> 2] > 1) {
                                              $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                             } else {
                                              $0 = 0;
                                             }
                                             if (HEAP32[$5 + 536 >> 2] > 2) {
                                              $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                             } else {
                                              $3 = 0;
                                             }
                                             HEAP32[$5 + 184 >> 2] = FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetBool($3) & 1);
                                             HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 184 >> 2];
                                             break label$1;
                                            }
                                            HEAP32[$5 + 180 >> 2] = 0;
                                            $0 = HEAP32[$5 + 552 >> 2];
                                            if (HEAP32[$5 + 536 >> 2] > 0) {
                                             $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                            } else {
                                             $1 = 0;
                                            }
                                            $9 = jsvGetFloat($1);
                                            if (HEAP32[$5 + 536 >> 2] > 1) {
                                             $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                            } else {
                                             $1 = 0;
                                            }
                                            $8 = jsvGetFloat($1);
                                            if (HEAP32[$5 + 536 >> 2] > 2) {
                                             $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                            } else {
                                             $1 = 0;
                                            }
                                            $7 = jsvGetFloat($1);
                                            if (HEAP32[$5 + 536 >> 2] > 3) {
                                             $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 12 >> 2];
                                            } else {
                                             $1 = 0;
                                            }
                                            HEAP32[$5 + 180 >> 2] = FUNCTION_TABLE[$0 | 0]($9, $8, $7, jsvGetInteger($1));
                                            HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 180 >> 2];
                                            break label$1;
                                           }
                                           HEAP32[$5 + 176 >> 2] = 0;
                                           label$375: {
                                            if (HEAP32[$5 + 536 >> 2] > 1) {
                                             $0 = jsvNewArray(HEAP32[$5 + 540 >> 2] + 4 | 0, HEAP32[$5 + 536 >> 2] - 1 | 0);
                                             break label$375;
                                            }
                                            $0 = jsvNewEmptyArray();
                                           }
                                           HEAP32[$5 + 172 >> 2] = $0;
                                           $0 = HEAP32[$5 + 552 >> 2];
                                           if (HEAP32[$5 + 536 >> 2] > 0) {
                                            $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                           } else {
                                            $1 = 0;
                                           }
                                           FUNCTION_TABLE[$0 | 0]($1, HEAP32[$5 + 172 >> 2]);
                                           jsvUnLock(HEAP32[$5 + 172 >> 2]);
                                           HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 176 >> 2];
                                           break label$1;
                                          }
                                          HEAP32[$5 + 168 >> 2] = 0;
                                          $1 = HEAP32[$5 + 552 >> 2];
                                          if (HEAP32[$5 + 536 >> 2] > 0) {
                                           $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                          } else {
                                           $0 = 0;
                                          }
                                          if (HEAP32[$5 + 536 >> 2] > 1) {
                                           $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                          } else {
                                           $2 = 0;
                                          }
                                          FUNCTION_TABLE[$1 | 0]($0, jsvGetInteger($2));
                                          HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 168 >> 2];
                                          break label$1;
                                         }
                                         HEAP32[$5 + 164 >> 2] = 0;
                                         label$383: {
                                          if (HEAP32[$5 + 536 >> 2] > 2) {
                                           $0 = jsvNewArray(HEAP32[$5 + 540 >> 2] + 8 | 0, HEAP32[$5 + 536 >> 2] - 2 | 0);
                                           break label$383;
                                          }
                                          $0 = jsvNewEmptyArray();
                                         }
                                         HEAP32[$5 + 160 >> 2] = $0;
                                         $1 = HEAP32[$5 + 552 >> 2];
                                         if (HEAP32[$5 + 536 >> 2] > 0) {
                                          $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                         } else {
                                          $0 = 0;
                                         }
                                         if (HEAP32[$5 + 536 >> 2] > 1) {
                                          $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                         } else {
                                          $2 = 0;
                                         }
                                         HEAP32[$5 + 164 >> 2] = FUNCTION_TABLE[$1 | 0]($0, jsvGetFloat($2), HEAP32[$5 + 160 >> 2]);
                                         jsvUnLock(HEAP32[$5 + 160 >> 2]);
                                         HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 164 >> 2];
                                         break label$1;
                                        }
                                        HEAP32[$5 + 156 >> 2] = 0;
                                        $1 = HEAP32[$5 + 552 >> 2];
                                        if (HEAP32[$5 + 536 >> 2] > 0) {
                                         $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                        } else {
                                         $0 = 0;
                                        }
                                        if (HEAP32[$5 + 536 >> 2] > 1) {
                                         $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                        } else {
                                         $2 = 0;
                                        }
                                        FUNCTION_TABLE[$1 | 0]($0, jsvGetFloat($2));
                                        HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 156 >> 2];
                                        break label$1;
                                       }
                                       HEAP32[$5 + 152 >> 2] = 0;
                                       $0 = HEAP32[$5 + 552 >> 2];
                                       if (HEAP32[$5 + 536 >> 2] > 0) {
                                        $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                       } else {
                                        $1 = 0;
                                       }
                                       HEAP32[$5 + 152 >> 2] = jsvNewFromFloat(+FUNCTION_TABLE[$0 | 0](jshGetPinFromVar($1) & 255));
                                       HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 152 >> 2];
                                       break label$1;
                                      }
                                      HEAP32[$5 + 148 >> 2] = 0;
                                      $1 = HEAP32[$5 + 552 >> 2];
                                      if (HEAP32[$5 + 536 >> 2] > 0) {
                                       $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                      } else {
                                       $0 = 0;
                                      }
                                      $0 = jshGetPinFromVar($0) & 255;
                                      if (HEAP32[$5 + 536 >> 2] > 1) {
                                       $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                      } else {
                                       $2 = 0;
                                      }
                                      $7 = jsvGetFloat($2);
                                      if (HEAP32[$5 + 536 >> 2] > 2) {
                                       $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                      } else {
                                       $2 = 0;
                                      }
                                      FUNCTION_TABLE[$1 | 0]($0, $7, $2);
                                      HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 148 >> 2];
                                      break label$1;
                                     }
                                     HEAP32[$5 + 144 >> 2] = 0;
                                     $2 = HEAP32[$5 + 552 >> 2];
                                     if (HEAP32[$5 + 536 >> 2] > 0) {
                                      $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                     } else {
                                      $0 = 0;
                                     }
                                     $1 = jshGetPinFromVar($0) & 255;
                                     if (HEAP32[$5 + 536 >> 2] > 1) {
                                      $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                     } else {
                                      $0 = 0;
                                     }
                                     $0 = jsvGetBool($0) & 1;
                                     if (HEAP32[$5 + 536 >> 2] > 2) {
                                      $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                     } else {
                                      $3 = 0;
                                     }
                                     FUNCTION_TABLE[$2 | 0]($1, $0, $3);
                                     HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 144 >> 2];
                                     break label$1;
                                    }
                                    HEAP32[$5 + 140 >> 2] = 0;
                                    $2 = HEAP32[$5 + 552 >> 2];
                                    if (HEAP32[$5 + 536 >> 2] > 0) {
                                     $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                    } else {
                                     $0 = 0;
                                    }
                                    $1 = jshGetPinFromVar($0) & 255;
                                    if (HEAP32[$5 + 536 >> 2] > 1) {
                                     $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                    } else {
                                     $0 = 0;
                                    }
                                    if (HEAP32[$5 + 536 >> 2] > 2) {
                                     $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                    } else {
                                     $3 = 0;
                                    }
                                    FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetBool($3) & 1);
                                    HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 140 >> 2];
                                    break label$1;
                                   }
                                   HEAP32[$5 + 136 >> 2] = 0;
                                   $0 = HEAP32[$5 + 552 >> 2];
                                   if (HEAP32[$5 + 536 >> 2] > 0) {
                                    $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                   } else {
                                    $1 = 0;
                                   }
                                   HEAP32[$5 + 136 >> 2] = FUNCTION_TABLE[$0 | 0](jshGetPinFromVar($1) & 255);
                                   HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 136 >> 2];
                                   break label$1;
                                  }
                                  HEAP32[$5 + 132 >> 2] = 0;
                                  $2 = HEAP32[$5 + 552 >> 2];
                                  if (HEAP32[$5 + 536 >> 2] > 0) {
                                   $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                  } else {
                                   $0 = 0;
                                  }
                                  if (HEAP32[$5 + 536 >> 2] > 1) {
                                   $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                  } else {
                                   $1 = 0;
                                  }
                                  $1 = jshGetPinFromVar($1) & 255;
                                  if (HEAP32[$5 + 536 >> 2] > 2) {
                                   $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                                  } else {
                                   $3 = 0;
                                  }
                                  HEAP32[$5 + 132 >> 2] = FUNCTION_TABLE[$2 | 0]($0, $1, $3);
                                  HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 132 >> 2];
                                  break label$1;
                                 }
                                 HEAP32[$5 + 128 >> 2] = 0;
                                 $1 = HEAP32[$5 + 552 >> 2];
                                 $0 = HEAP32[$5 + 544 >> 2];
                                 if (HEAP32[$5 + 536 >> 2] > 0) {
                                  $2 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                 } else {
                                  $2 = 0;
                                 }
                                 FUNCTION_TABLE[$1 | 0]($0, jsvGetBool($2) & 1);
                                 HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 128 >> 2];
                                 break label$1;
                                }
                                HEAP32[$5 + 124 >> 2] = 0;
                                $2 = HEAP32[$5 + 552 >> 2];
                                $1 = HEAP32[$5 + 544 >> 2];
                                if (HEAP32[$5 + 536 >> 2] > 0) {
                                 $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                                } else {
                                 $0 = 0;
                                }
                                $0 = jsvGetBool($0) & 1;
                                if (HEAP32[$5 + 536 >> 2] > 1) {
                                 $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                                } else {
                                 $3 = 0;
                                }
                                FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetFloat($3));
                                HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 124 >> 2];
                                break label$1;
                               }
                               HEAP32[$5 + 120 >> 2] = 0;
                               $2 = HEAP32[$5 + 552 >> 2];
                               $1 = HEAP32[$5 + 544 >> 2];
                               if (HEAP32[$5 + 536 >> 2] > 0) {
                                $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                               } else {
                                $0 = 0;
                               }
                               $0 = jsvGetBool($0) & 1;
                               if (HEAP32[$5 + 536 >> 2] > 1) {
                                $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                               } else {
                                $3 = 0;
                               }
                               FUNCTION_TABLE[$2 | 0]($1, $0, $3);
                               HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 120 >> 2];
                               break label$1;
                              }
                              HEAP32[$5 + 116 >> 2] = 0;
                              $1 = HEAP32[$5 + 552 >> 2];
                              $0 = HEAP32[$5 + 544 >> 2];
                              if (HEAP32[$5 + 536 >> 2] > 0) {
                               $2 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                              } else {
                               $2 = 0;
                              }
                              $7 = jsvGetFloat($2);
                              if (HEAP32[$5 + 536 >> 2] > 1) {
                               $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                              } else {
                               $2 = 0;
                              }
                              FUNCTION_TABLE[$1 | 0]($0, $7, $2);
                              HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 116 >> 2];
                              break label$1;
                             }
                             HEAP32[$5 + 112 >> 2] = 0;
                             $2 = HEAP32[$5 + 552 >> 2];
                             $1 = HEAP32[$5 + 544 >> 2];
                             if (HEAP32[$5 + 536 >> 2] > 0) {
                              $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                             } else {
                              $0 = 0;
                             }
                             if (HEAP32[$5 + 536 >> 2] > 1) {
                              $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                             } else {
                              $3 = 0;
                             }
                             FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetBool($3) & 1);
                             HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 112 >> 2];
                             break label$1;
                            }
                            HEAP32[$5 + 108 >> 2] = 0;
                            label$439: {
                             if (HEAP32[$5 + 536 >> 2] > 0) {
                              $0 = jsvNewArray(HEAP32[$5 + 540 >> 2], HEAP32[$5 + 536 >> 2]);
                              break label$439;
                             }
                             $0 = jsvNewEmptyArray();
                            }
                            HEAP32[$5 + 104 >> 2] = $0;
                            FUNCTION_TABLE[HEAP32[$5 + 552 >> 2]](HEAP32[$5 + 544 >> 2], HEAP32[$5 + 104 >> 2]);
                            jsvUnLock(HEAP32[$5 + 104 >> 2]);
                            HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 108 >> 2];
                            break label$1;
                           }
                           HEAP32[$5 + 100 >> 2] = 0;
                           $1 = HEAP32[$5 + 552 >> 2];
                           if (HEAP32[$5 + 536 >> 2] > 0) {
                            $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                           } else {
                            $0 = 0;
                           }
                           if (HEAP32[$5 + 536 >> 2] > 1) {
                            $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                           } else {
                            $2 = 0;
                           }
                           HEAP32[$5 + 100 >> 2] = FUNCTION_TABLE[$1 | 0]($0, jsvGetBool($2) & 1);
                           HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 100 >> 2];
                           break label$1;
                          }
                          HEAP32[$5 + 96 >> 2] = 0;
                          $3 = HEAP32[$5 + 552 >> 2];
                          if (HEAP32[$5 + 536 >> 2] > 0) {
                           $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                          } else {
                           $1 = 0;
                          }
                          if (HEAP32[$5 + 536 >> 2] > 1) {
                           $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                          } else {
                           $0 = 0;
                          }
                          if (HEAP32[$5 + 536 >> 2] > 2) {
                           $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                          } else {
                           $2 = 0;
                          }
                          $2 = jsvGetInteger($2);
                          if (HEAP32[$5 + 536 >> 2] > 3) {
                           $4 = HEAP32[HEAP32[$5 + 540 >> 2] + 12 >> 2];
                          } else {
                           $4 = 0;
                          }
                          HEAP32[$5 + 96 >> 2] = jsvNewFromBool(FUNCTION_TABLE[$3 | 0]($1, $0, $2, jsvGetInteger($4)) & 1);
                          HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 96 >> 2];
                          break label$1;
                         }
                         HEAP32[$5 + 92 >> 2] = 0;
                         $1 = HEAP32[$5 + 552 >> 2];
                         if (HEAP32[$5 + 536 >> 2] > 0) {
                          $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                         } else {
                          $0 = 0;
                         }
                         if (HEAP32[$5 + 536 >> 2] > 1) {
                          $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                         } else {
                          $2 = 0;
                         }
                         HEAP32[$5 + 92 >> 2] = jsvNewFromBool(FUNCTION_TABLE[$1 | 0]($0, $2) & 1);
                         HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 92 >> 2];
                         break label$1;
                        }
                        HEAP32[$5 + 88 >> 2] = 0;
                        $0 = HEAP32[$5 + 552 >> 2];
                        if (HEAP32[$5 + 536 >> 2] > 0) {
                         $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                        } else {
                         $1 = 0;
                        }
                        HEAP32[$5 + 88 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$0 | 0](jsvGetBool($1) & 1) | 0);
                        HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 88 >> 2];
                        break label$1;
                       }
                       HEAP32[$5 + 84 >> 2] = 0;
                       $0 = HEAP32[$5 + 552 >> 2];
                       if (HEAP32[$5 + 536 >> 2] > 0) {
                        $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                       } else {
                        $1 = 0;
                       }
                       HEAP32[$5 + 84 >> 2] = FUNCTION_TABLE[$0 | 0](jsvGetBool($1) & 1);
                       HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 84 >> 2];
                       break label$1;
                      }
                      HEAP32[$5 + 80 >> 2] = 0;
                      $2 = HEAP32[$5 + 552 >> 2];
                      $1 = HEAP32[$5 + 544 >> 2];
                      if (HEAP32[$5 + 536 >> 2] > 0) {
                       $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                      } else {
                       $0 = 0;
                      }
                      if (HEAP32[$5 + 536 >> 2] > 1) {
                       $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                      } else {
                       $3 = 0;
                      }
                      HEAP32[$5 + 80 >> 2] = FUNCTION_TABLE[$2 | 0]($1, $0, jshGetPinFromVar($3) & 255);
                      HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 80 >> 2];
                      break label$1;
                     }
                     HEAP32[$5 + 76 >> 2] = 0;
                     $4 = HEAP32[$5 + 552 >> 2];
                     $3 = HEAP32[$5 + 544 >> 2];
                     if (HEAP32[$5 + 536 >> 2] > 0) {
                      $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                     } else {
                      $0 = 0;
                     }
                     if (HEAP32[$5 + 536 >> 2] > 1) {
                      $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                     } else {
                      $1 = 0;
                     }
                     $2 = jsvGetInteger($1);
                     if (HEAP32[$5 + 536 >> 2] > 2) {
                      $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                     } else {
                      $1 = 0;
                     }
                     $1 = jsvGetInteger($1);
                     if (HEAP32[$5 + 536 >> 2] > 3) {
                      $6 = HEAP32[HEAP32[$5 + 540 >> 2] + 12 >> 2];
                     } else {
                      $6 = 0;
                     }
                     FUNCTION_TABLE[$4 | 0]($3, $0, $2, $1, jshGetPinFromVar($6) & 255);
                     HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 76 >> 2];
                     break label$1;
                    }
                    HEAP32[$5 + 72 >> 2] = 0;
                    $3 = HEAP32[$5 + 552 >> 2];
                    $2 = HEAP32[$5 + 544 >> 2];
                    if (HEAP32[$5 + 536 >> 2] > 0) {
                     $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                    } else {
                     $0 = 0;
                    }
                    $1 = jsvGetInteger($0);
                    if (HEAP32[$5 + 536 >> 2] > 1) {
                     $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                    } else {
                     $0 = 0;
                    }
                    $0 = jsvGetInteger($0);
                    if (HEAP32[$5 + 536 >> 2] > 2) {
                     $4 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                    } else {
                     $4 = 0;
                    }
                    HEAP32[$5 + 72 >> 2] = FUNCTION_TABLE[$3 | 0]($2, $1, $0, jsvGetInteger($4));
                    HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 72 >> 2];
                    break label$1;
                   }
                   HEAP32[$5 + 68 >> 2] = 0;
                   $1 = HEAP32[$5 + 552 >> 2];
                   if (HEAP32[$5 + 536 >> 2] > 0) {
                    $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                   } else {
                    $0 = 0;
                   }
                   $0 = jsvGetInteger($0);
                   if (HEAP32[$5 + 536 >> 2] > 1) {
                    $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                   } else {
                    $2 = 0;
                   }
                   HEAP32[$5 + 68 >> 2] = FUNCTION_TABLE[$1 | 0]($0, $2);
                   HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 68 >> 2];
                   break label$1;
                  }
                  HEAP32[$5 + 64 >> 2] = 0;
                  $2 = HEAP32[$5 + 552 >> 2];
                  $1 = HEAP32[$5 + 544 >> 2];
                  if (HEAP32[$5 + 536 >> 2] > 0) {
                   $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                  } else {
                   $0 = 0;
                  }
                  $0 = jshGetPinFromVar($0) & 255;
                  if (HEAP32[$5 + 536 >> 2] > 1) {
                   $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                  } else {
                   $3 = 0;
                  }
                  $7 = jsvGetFloat($3);
                  if (HEAP32[$5 + 536 >> 2] > 2) {
                   $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                  } else {
                   $3 = 0;
                  }
                  FUNCTION_TABLE[$2 | 0]($1, $0, $7, $3);
                  HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 64 >> 2];
                  break label$1;
                 }
                 HEAP32[$5 + 60 >> 2] = 0;
                 $3 = HEAP32[$5 + 552 >> 2];
                 if (HEAP32[$5 + 536 >> 2] > 0) {
                  $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                 } else {
                  $0 = 0;
                 }
                 $2 = jsvGetInteger($0);
                 if (HEAP32[$5 + 536 >> 2] > 1) {
                  $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
                 } else {
                  $0 = 0;
                 }
                 $1 = jsvGetInteger($0);
                 if (HEAP32[$5 + 536 >> 2] > 2) {
                  $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
                 } else {
                  $0 = 0;
                 }
                 $0 = jsvGetInteger($0);
                 if (HEAP32[$5 + 536 >> 2] > 3) {
                  $4 = HEAP32[HEAP32[$5 + 540 >> 2] + 12 >> 2];
                 } else {
                  $4 = 0;
                 }
                 HEAP32[$5 + 60 >> 2] = FUNCTION_TABLE[$3 | 0]($2, $1, $0, $4);
                 HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 60 >> 2];
                 break label$1;
                }
                HEAP32[$5 + 56 >> 2] = 0;
                $1 = HEAP32[$5 + 552 >> 2];
                $0 = HEAP32[$5 + 544 >> 2];
                if (HEAP32[$5 + 536 >> 2] > 0) {
                 $2 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
                } else {
                 $2 = 0;
                }
                HEAP32[$5 + 56 >> 2] = FUNCTION_TABLE[$1 | 0]($0, jsvGetBool($2) & 1);
                HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 56 >> 2];
                break label$1;
               }
               HEAP32[$5 + 52 >> 2] = 0;
               $4 = HEAP32[$5 + 552 >> 2];
               $3 = HEAP32[$5 + 544 >> 2];
               if (HEAP32[$5 + 536 >> 2] > 0) {
                $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
               } else {
                $0 = 0;
               }
               if (HEAP32[$5 + 536 >> 2] > 1) {
                $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
               } else {
                $1 = 0;
               }
               $2 = jsvGetInteger($1);
               if (HEAP32[$5 + 536 >> 2] > 2) {
                $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
               } else {
                $1 = 0;
               }
               $1 = jsvGetInteger($1);
               if (HEAP32[$5 + 536 >> 2] > 3) {
                $6 = HEAP32[HEAP32[$5 + 540 >> 2] + 12 >> 2];
               } else {
                $6 = 0;
               }
               HEAP32[$5 + 52 >> 2] = FUNCTION_TABLE[$4 | 0]($3, $0, $2, $1, jsvGetInteger($6));
               HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 52 >> 2];
               break label$1;
              }
              HEAP32[$5 + 48 >> 2] = 0;
              $4 = HEAP32[$5 + 552 >> 2];
              $3 = HEAP32[$5 + 544 >> 2];
              if (HEAP32[$5 + 536 >> 2] > 0) {
               $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
              } else {
               $0 = 0;
              }
              $2 = jsvGetInteger($0);
              if (HEAP32[$5 + 536 >> 2] > 1) {
               $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
              } else {
               $0 = 0;
              }
              $1 = jsvGetInteger($0);
              if (HEAP32[$5 + 536 >> 2] > 2) {
               $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
              } else {
               $0 = 0;
              }
              $0 = jsvGetInteger($0);
              if (HEAP32[$5 + 536 >> 2] > 3) {
               $6 = HEAP32[HEAP32[$5 + 540 >> 2] + 12 >> 2];
              } else {
               $6 = 0;
              }
              HEAP32[$5 + 48 >> 2] = FUNCTION_TABLE[$4 | 0]($3, $2, $1, $0, jsvGetInteger($6));
              HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 48 >> 2];
              break label$1;
             }
             HEAP32[$5 + 44 >> 2] = 0;
             $2 = HEAP32[$5 + 552 >> 2];
             $1 = HEAP32[$5 + 544 >> 2];
             if (HEAP32[$5 + 536 >> 2] > 0) {
              $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
             } else {
              $0 = 0;
             }
             $0 = jsvGetInteger($0);
             if (HEAP32[$5 + 536 >> 2] > 1) {
              $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
             } else {
              $3 = 0;
             }
             HEAP32[$5 + 44 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetInteger($3)) | 0);
             HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 44 >> 2];
             break label$1;
            }
            HEAP32[$5 + 40 >> 2] = 0;
            $3 = HEAP32[$5 + 552 >> 2];
            $2 = HEAP32[$5 + 544 >> 2];
            if (HEAP32[$5 + 536 >> 2] > 0) {
             $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
            } else {
             $0 = 0;
            }
            $1 = jsvGetInteger($0);
            if (HEAP32[$5 + 536 >> 2] > 1) {
             $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
            } else {
             $0 = 0;
            }
            $0 = jsvGetInteger($0);
            if (HEAP32[$5 + 536 >> 2] > 2) {
             $4 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
            } else {
             $4 = 0;
            }
            HEAP32[$5 + 40 >> 2] = FUNCTION_TABLE[$3 | 0]($2, $1, $0, $4);
            HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 40 >> 2];
            break label$1;
           }
           HEAP32[$5 + 36 >> 2] = 0;
           $3 = HEAP32[$5 + 552 >> 2];
           $2 = HEAP32[$5 + 544 >> 2];
           if (HEAP32[$5 + 536 >> 2] > 0) {
            $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
           } else {
            $1 = 0;
           }
           if (HEAP32[$5 + 536 >> 2] > 1) {
            $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
           } else {
            $0 = 0;
           }
           if (HEAP32[$5 + 536 >> 2] > 2) {
            $4 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
           } else {
            $4 = 0;
           }
           HEAP32[$5 + 36 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$3 | 0]($2, $1, $0, $4) | 0);
           HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 36 >> 2];
           break label$1;
          }
          HEAP32[$5 + 32 >> 2] = 0;
          $3 = HEAP32[$5 + 552 >> 2];
          $2 = HEAP32[$5 + 544 >> 2];
          if (HEAP32[$5 + 536 >> 2] > 0) {
           $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
          } else {
           $1 = 0;
          }
          if (HEAP32[$5 + 536 >> 2] > 1) {
           $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
          } else {
           $0 = 0;
          }
          if (HEAP32[$5 + 536 >> 2] > 2) {
           $4 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
          } else {
           $4 = 0;
          }
          HEAP32[$5 + 32 >> 2] = FUNCTION_TABLE[$3 | 0]($2, $1, $0, $4);
          HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 32 >> 2];
          break label$1;
         }
         HEAP32[$5 + 28 >> 2] = 0;
         $4 = HEAP32[$5 + 552 >> 2];
         $3 = HEAP32[$5 + 544 >> 2];
         if (HEAP32[$5 + 536 >> 2] > 0) {
          $1 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
         } else {
          $1 = 0;
         }
         if (HEAP32[$5 + 536 >> 2] > 1) {
          $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
         } else {
          $0 = 0;
         }
         $2 = jsvGetInteger($0);
         if (HEAP32[$5 + 536 >> 2] > 2) {
          $0 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
         } else {
          $0 = 0;
         }
         if (HEAP32[$5 + 536 >> 2] > 3) {
          $6 = HEAP32[HEAP32[$5 + 540 >> 2] + 12 >> 2];
         } else {
          $6 = 0;
         }
         HEAP32[$5 + 28 >> 2] = FUNCTION_TABLE[$4 | 0]($3, $1, $2, $0, jsvGetInteger($6));
         HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 28 >> 2];
         break label$1;
        }
        HEAP32[$5 + 24 >> 2] = 0;
        $1 = HEAP32[$5 + 552 >> 2];
        $0 = HEAP32[$5 + 544 >> 2];
        if (HEAP32[$5 + 536 >> 2] > 0) {
         $2 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
        } else {
         $2 = 0;
        }
        HEAP32[$5 + 24 >> 2] = jsvNewFromInteger(FUNCTION_TABLE[$1 | 0]($0, $2) | 0);
        HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 24 >> 2];
        break label$1;
       }
       HEAP32[$5 + 20 >> 2] = 0;
       $4 = HEAP32[$5 + 552 >> 2];
       $3 = HEAP32[$5 + 544 >> 2];
       if (HEAP32[$5 + 536 >> 2] > 0) {
        $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
       } else {
        $0 = 0;
       }
       if (HEAP32[$5 + 536 >> 2] > 1) {
        $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
       } else {
        $1 = 0;
       }
       $2 = jsvGetInteger($1);
       if (HEAP32[$5 + 536 >> 2] > 2) {
        $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
       } else {
        $1 = 0;
       }
       $1 = jsvGetInteger($1);
       if (HEAP32[$5 + 536 >> 2] > 3) {
        $6 = HEAP32[HEAP32[$5 + 540 >> 2] + 12 >> 2];
       } else {
        $6 = 0;
       }
       HEAP32[$5 + 20 >> 2] = FUNCTION_TABLE[$4 | 0]($3, $0, $2, $1, jsvGetBool($6) & 1);
       HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 20 >> 2];
       break label$1;
      }
      HEAP32[$5 + 16 >> 2] = 0;
      $1 = HEAP32[$5 + 552 >> 2];
      $0 = HEAP32[$5 + 544 >> 2];
      if (HEAP32[$5 + 536 >> 2] > 0) {
       $2 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
      } else {
       $2 = 0;
      }
      $9 = jsvGetFloat($2);
      if (HEAP32[$5 + 536 >> 2] > 1) {
       $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
      } else {
       $2 = 0;
      }
      $8 = jsvGetFloat($2);
      if (HEAP32[$5 + 536 >> 2] > 2) {
       $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
      } else {
       $2 = 0;
      }
      $7 = jsvGetFloat($2);
      if (HEAP32[$5 + 536 >> 2] > 3) {
       $2 = HEAP32[HEAP32[$5 + 540 >> 2] + 12 >> 2];
      } else {
       $2 = 0;
      }
      HEAP32[$5 + 16 >> 2] = FUNCTION_TABLE[$1 | 0]($0, $9, $8, $7, jsvGetFloat($2));
      HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 16 >> 2];
      break label$1;
     }
     HEAP32[$5 + 12 >> 2] = 0;
     $2 = HEAP32[$5 + 552 >> 2];
     $1 = HEAP32[$5 + 544 >> 2];
     if (HEAP32[$5 + 536 >> 2] > 0) {
      $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
     } else {
      $0 = 0;
     }
     $0 = jsvGetInteger($0);
     if (HEAP32[$5 + 536 >> 2] > 1) {
      $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
     } else {
      $3 = 0;
     }
     HEAP32[$5 + 12 >> 2] = FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetInteger($3));
     HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 12 >> 2];
     break label$1;
    }
    HEAP32[$5 + 8 >> 2] = 0;
    $2 = HEAP32[$5 + 552 >> 2];
    $1 = HEAP32[$5 + 544 >> 2];
    if (HEAP32[$5 + 536 >> 2] > 0) {
     $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
    } else {
     $0 = 0;
    }
    if (HEAP32[$5 + 536 >> 2] > 1) {
     $3 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
    } else {
     $3 = 0;
    }
    HEAP32[$5 + 8 >> 2] = FUNCTION_TABLE[$2 | 0]($1, $0, jsvGetBool($3) & 1);
    HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 8 >> 2];
    break label$1;
   }
   HEAP32[$5 + 4 >> 2] = 0;
   $4 = HEAP32[$5 + 552 >> 2];
   $3 = HEAP32[$5 + 544 >> 2];
   if (HEAP32[$5 + 536 >> 2] > 0) {
    $0 = HEAP32[HEAP32[$5 + 540 >> 2] >> 2];
   } else {
    $0 = 0;
   }
   if (HEAP32[$5 + 536 >> 2] > 1) {
    $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 4 >> 2];
   } else {
    $1 = 0;
   }
   $2 = jsvGetInteger($1);
   if (HEAP32[$5 + 536 >> 2] > 2) {
    $1 = HEAP32[HEAP32[$5 + 540 >> 2] + 8 >> 2];
   } else {
    $1 = 0;
   }
   $1 = jsvGetInteger($1);
   if (HEAP32[$5 + 536 >> 2] > 3) {
    $6 = HEAP32[HEAP32[$5 + 540 >> 2] + 12 >> 2];
   } else {
    $6 = 0;
   }
   HEAP32[$5 + 4 >> 2] = FUNCTION_TABLE[$4 | 0]($3, $0, $2, $1, $6);
   HEAP32[$5 + 556 >> 2] = HEAP32[$5 + 4 >> 2];
   break label$1;
  }
  HEAP32[$5 >> 2] = HEAPU16[$5 + 550 >> 1];
  jsExceptionHere(1, 122666, $5);
  HEAP32[$5 + 556 >> 2] = 0;
 }
 __stack_pointer = $5 + 560 | 0;
 return HEAP32[$5 + 556 >> 2];
}

function mbedtls_sha512_process($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 $4 = __stack_pointer - 736 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 732 >> 2] = $0;
 HEAP32[$4 + 728 >> 2] = $1;
 HEAP32[$4 + 724 >> 2] = 0;
 while (1) {
  if (HEAP32[$4 + 724 >> 2] < 16) {
   $2 = HEAP32[$4 + 728 >> 2] + ((HEAP32[$4 + 724 >> 2] << 3) + 7 | 0) | 0;
   $1 = HEAPU8[$2 | 0];
   $5 = $1;
   $2 = HEAP32[$4 + 728 >> 2] + (HEAP32[$4 + 724 >> 2] << 3) | 0;
   $0 = HEAPU8[$2 | 0];
   $0 = $0 << 24;
   $2 = $0;
   $1 = HEAP32[$4 + 728 >> 2] + ((HEAP32[$4 + 724 >> 2] << 3) + 1 | 0) | 0;
   $0 = HEAPU8[$1 | 0];
   $0 = $0 << 16;
   $1 = $0;
   $0 = $2;
   $1 = $1 | $0;
   $2 = $1;
   $0 = HEAP32[$4 + 728 >> 2] + ((HEAP32[$4 + 724 >> 2] << 3) + 2 | 0) | 0;
   $1 = HEAPU8[$0 | 0];
   $0 = $1;
   $1 = $0 << 8;
   $0 = $1;
   $1 = $2;
   $0 = $1 | $0;
   $2 = $0;
   $1 = HEAP32[$4 + 728 >> 2] + ((HEAP32[$4 + 724 >> 2] << 3) + 3 | 0) | 0;
   $0 = HEAPU8[$1 | 0];
   $1 = $0;
   $0 = $2;
   $1 = $1 | $0;
   $2 = $1;
   $0 = HEAP32[$4 + 728 >> 2] + ((HEAP32[$4 + 724 >> 2] << 3) + 4 | 0) | 0;
   $1 = HEAPU8[$0 | 0];
   $0 = $1;
   $7 = $0 << 24;
   $1 = $0 >>> 8 | 0;
   $0 = $1;
   $1 = $2;
   $0 = $1 | $0;
   $3 = $0;
   $2 = 0;
   $6 = 0;
   $2 = $2 | $6;
   $2 = $2 | 0;
   $2 = $2 | 0;
   $6 = $7;
   $2 = $2 | $6;
   $1 = HEAP32[$4 + 728 >> 2] + ((HEAP32[$4 + 724 >> 2] << 3) + 5 | 0) | 0;
   $0 = HEAPU8[$1 | 0];
   $6 = $0 << 16;
   $0 = $0 >>> 16 | 0;
   $1 = $0;
   $0 = $3;
   $1 = $1 | $0;
   $3 = $1;
   $0 = HEAP32[$4 + 728 >> 2] + ((HEAP32[$4 + 724 >> 2] << 3) + 6 | 0) | 0;
   $1 = HEAPU8[$0 | 0];
   $0 = $1;
   $7 = $0 << 8;
   $1 = $0 >>> 24 | 0;
   $0 = $1;
   $1 = $3;
   $0 = $1 | $0;
   $1 = $5;
   $2 = $2 | $6;
   $6 = $7;
   $6 = $2 | $6;
   $2 = $1 | $6;
   $1 = ($4 - -64 | 0) + (HEAP32[$4 + 724 >> 2] << 3) | 0;
   HEAP32[$1 >> 2] = $2;
   $2 = $0;
   HEAP32[$1 + 4 >> 2] = $2;
   HEAP32[$4 + 724 >> 2] = HEAP32[$4 + 724 >> 2] + 1;
   continue;
  }
  break;
 }
 while (1) {
  if (HEAP32[$4 + 724 >> 2] < 80) {
   $0 = ((HEAP32[$4 + 724 >> 2] << 3) + $4 | 0) + -64 | 0;
   $2 = HEAP32[$0 >> 2];
   $11 = $2;
   $1 = HEAP32[$0 + 4 >> 2];
   $9 = $1;
   $0 = ((HEAP32[$4 + 724 >> 2] << 3) + $4 | 0) + 8 | 0;
   $1 = HEAP32[$0 >> 2];
   $8 = $1;
   $2 = HEAP32[$0 + 4 >> 2];
   $7 = $2;
   $0 = ((HEAP32[$4 + 724 >> 2] << 3) + $4 | 0) + 48 | 0;
   $2 = HEAP32[$0 >> 2];
   $0 = $2;
   $2 = $0 << 13;
   $3 = $2;
   $1 = ((HEAP32[$4 + 724 >> 2] << 3) + $4 | 0) + 48 | 0;
   $2 = HEAP32[$1 >> 2];
   $0 = HEAP32[$1 + 4 >> 2];
   $1 = $2;
   $2 = $0 >>> 19 | 0;
   $6 = ($0 & 524287) << 13 | $1 >>> 19;
   $0 = 0;
   $12 = $0 | $6;
   $1 = $2;
   $2 = $3;
   $1 = $1 | $2;
   $5 = $1;
   $2 = ((HEAP32[$4 + 724 >> 2] << 3) + $4 | 0) + 48 | 0;
   $1 = HEAP32[$2 >> 2];
   $0 = HEAP32[$2 + 4 >> 2];
   $10 = $1 << 3;
   $1 = $0 << 3 | $1 >>> 29;
   $3 = $1;
   $0 = ((HEAP32[$4 + 724 >> 2] << 3) + $4 | 0) + 48 | 0;
   $1 = HEAP32[$0 >> 2];
   $2 = HEAP32[$0 + 4 >> 2];
   $6 = $2 >>> 29 | 0;
   $1 = 0;
   $0 = $1;
   $1 = $3;
   $0 = $1 | $0;
   $3 = $0;
   $1 = $12;
   $2 = $10;
   $6 = $2 | $6;
   $10 = $1 ^ $6;
   $0 = $5;
   $2 = $3;
   $2 = $0 ^ $2;
   $3 = $2;
   $0 = ((HEAP32[$4 + 724 >> 2] << 3) + $4 | 0) + 48 | 0;
   $2 = HEAP32[$0 >> 2];
   $1 = HEAP32[$0 + 4 >> 2];
   $0 = $2;
   $6 = ($1 & 63) << 26 | $0 >>> 6;
   $2 = $1 >>> 6 | 0;
   $0 = $2;
   $2 = $3;
   $0 = $0 ^ $2;
   $2 = $8;
   $1 = $10;
   $6 = $1 ^ $6;
   $3 = $2 + $6 | 0;
   $1 = $0;
   $0 = $7;
   $5 = $1 + $0 | 0;
   $5 = $3 >>> 0 < $6 >>> 0 ? $5 + 1 | 0 : $5;
   $8 = $5;
   $0 = ((HEAP32[$4 + 724 >> 2] << 3) + $4 | 0) - 56 | 0;
   $5 = HEAP32[$0 >> 2];
   $0 = $5;
   $5 = $0 << 31;
   $1 = $5;
   $2 = ((HEAP32[$4 + 724 >> 2] << 3) + $4 | 0) - 56 | 0;
   $5 = HEAP32[$2 >> 2];
   $0 = HEAP32[$2 + 4 >> 2];
   $2 = $5;
   $5 = $0 >>> 1 | 0;
   $6 = ($0 & 1) << 31 | $2 >>> 1;
   $0 = 0;
   $10 = $0 | $6;
   $2 = $5;
   $5 = $1;
   $2 = $2 | $5;
   $7 = $2;
   $5 = ((HEAP32[$4 + 724 >> 2] << 3) + $4 | 0) - 56 | 0;
   $2 = HEAP32[$5 >> 2];
   $2 = $2 << 24;
   $1 = $2;
   $0 = ((HEAP32[$4 + 724 >> 2] << 3) + $4 | 0) - 56 | 0;
   $2 = HEAP32[$0 >> 2];
   $5 = HEAP32[$0 + 4 >> 2];
   $0 = $2;
   $6 = ($5 & 255) << 24 | $0 >>> 8;
   $2 = $5 >>> 8 | 0;
   $0 = $2;
   $2 = $1;
   $0 = $0 | $2;
   $1 = $0;
   $2 = $10;
   $5 = 0;
   $6 = $6 | $5;
   $10 = $2 ^ $6;
   $0 = $7;
   $5 = $1;
   $5 = $0 ^ $5;
   $1 = $5;
   $0 = ((HEAP32[$4 + 724 >> 2] << 3) + $4 | 0) - 56 | 0;
   $5 = HEAP32[$0 >> 2];
   $2 = HEAP32[$0 + 4 >> 2];
   $0 = $5;
   $6 = ($2 & 127) << 25 | $0 >>> 7;
   $5 = $2 >>> 7 | 0;
   $0 = $5;
   $5 = $1;
   $0 = $0 ^ $5;
   $5 = $0;
   $2 = $10;
   $6 = $2 ^ $6;
   $1 = $6 + $3 | 0;
   $0 = $8;
   $2 = $5;
   $3 = $0 + $2 | 0;
   $2 = $1;
   $3 = $1 >>> 0 < $6 >>> 0 ? $3 + 1 | 0 : $3;
   $5 = $3;
   $3 = $9;
   $1 = $3 + $5 | 0;
   $0 = $11;
   $6 = $2;
   $2 = $0 + $6 | 0;
   $1 = $2 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
   $0 = ($4 - -64 | 0) + (HEAP32[$4 + 724 >> 2] << 3) | 0;
   HEAP32[$0 >> 2] = $2;
   HEAP32[$0 + 4 >> 2] = $1;
   HEAP32[$4 + 724 >> 2] = HEAP32[$4 + 724 >> 2] + 1;
   continue;
  }
  break;
 }
 $3 = HEAP32[$4 + 732 >> 2];
 $1 = HEAP32[$3 + 16 >> 2];
 $0 = HEAP32[$3 + 20 >> 2];
 HEAP32[$4 + 56 >> 2] = $1;
 HEAP32[$4 + 60 >> 2] = $0;
 $3 = HEAP32[$4 + 732 >> 2];
 $0 = HEAP32[$3 + 24 >> 2];
 $1 = HEAP32[$3 + 28 >> 2];
 HEAP32[$4 + 48 >> 2] = $0;
 HEAP32[$4 + 52 >> 2] = $1;
 $3 = HEAP32[$4 + 732 >> 2];
 $1 = HEAP32[$3 + 32 >> 2];
 $0 = HEAP32[$3 + 36 >> 2];
 HEAP32[$4 + 40 >> 2] = $1;
 HEAP32[$4 + 44 >> 2] = $0;
 $3 = HEAP32[$4 + 732 >> 2];
 $0 = HEAP32[$3 + 40 >> 2];
 $1 = HEAP32[$3 + 44 >> 2];
 HEAP32[$4 + 32 >> 2] = $0;
 HEAP32[$4 + 36 >> 2] = $1;
 $3 = HEAP32[$4 + 732 >> 2];
 $1 = HEAP32[$3 + 48 >> 2];
 $0 = HEAP32[$3 + 52 >> 2];
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 28 >> 2] = $0;
 $3 = HEAP32[$4 + 732 >> 2];
 $0 = HEAP32[$3 + 56 >> 2];
 $1 = HEAP32[$3 + 60 >> 2];
 HEAP32[$4 + 16 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 $3 = HEAP32[$4 + 732 >> 2];
 $1 = HEAP32[$3 + 64 >> 2];
 $0 = HEAP32[$3 + 68 >> 2];
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 12 >> 2] = $0;
 $3 = HEAP32[$4 + 732 >> 2];
 $0 = HEAP32[$3 + 72 >> 2];
 $1 = HEAP32[$3 + 76 >> 2];
 HEAP32[$4 >> 2] = $0;
 HEAP32[$4 + 4 >> 2] = $1;
 HEAP32[$4 + 724 >> 2] = 0;
 while (1) {
  $3 = ($4 - -64 | 0) + (HEAP32[$4 + 724 >> 2] << 3) | 0;
  $1 = HEAP32[$3 >> 2];
  $13 = $1;
  $0 = HEAP32[$3 + 4 >> 2];
  $14 = $0;
  $3 = (HEAP32[$4 + 724 >> 2] << 3) + 162944 | 0;
  $0 = HEAP32[$3 >> 2];
  $15 = $0;
  $1 = HEAP32[$3 + 4 >> 2];
  $12 = $1;
  $1 = HEAP32[$4 >> 2];
  $9 = $1;
  $0 = HEAP32[$4 + 4 >> 2];
  $8 = $0;
  $0 = HEAP32[$4 + 24 >> 2];
  $5 = $0 << 23;
  $1 = HEAP32[$4 + 28 >> 2];
  $0 = $1 << 23 | $0 >>> 9;
  $2 = $0;
  $0 = HEAP32[$4 + 24 >> 2];
  $3 = HEAP32[$4 + 28 >> 2];
  $6 = $3 >>> 9 | 0;
  $3 = $5;
  $10 = $6 | $3;
  $0 = 0;
  $1 = $0;
  $0 = $2;
  $1 = $1 | $0;
  $7 = $1;
  $1 = HEAP32[$4 + 24 >> 2];
  $0 = $1;
  $1 = $0 << 18;
  $2 = $1;
  $1 = HEAP32[$4 + 24 >> 2];
  $3 = $1;
  $0 = HEAP32[$4 + 28 >> 2];
  $1 = $0 >>> 14 | 0;
  $6 = ($0 & 16383) << 18 | $3 >>> 14;
  $3 = $1;
  $0 = 0;
  $11 = $0 | $6;
  $1 = $2;
  $3 = $1 | $3;
  $5 = $3;
  $3 = HEAP32[$4 + 24 >> 2];
  $1 = $3;
  $3 = $1 << 14;
  $2 = $3;
  $3 = HEAP32[$4 + 24 >> 2];
  $0 = $3;
  $1 = HEAP32[$4 + 28 >> 2];
  $3 = $1 >>> 18 | 0;
  $6 = ($1 & 262143) << 14 | $0 >>> 18;
  $0 = $3;
  $3 = $2;
  $0 = $0 | $3;
  $1 = 0;
  $6 = $1 | $6;
  $3 = $11;
  $6 = $6 ^ $3;
  $1 = $0;
  $0 = $5;
  $1 = $1 ^ $0;
  $3 = $1;
  $1 = $7;
  $3 = $1 ^ $3;
  $1 = $9;
  $0 = $10;
  $6 = $0 ^ $6;
  $5 = $1 + $6 | 0;
  $0 = $3;
  $3 = $8;
  $2 = $0 + $3 | 0;
  $2 = $5 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2;
  $10 = $2;
  $2 = HEAP32[$4 + 8 >> 2];
  $11 = $2;
  $1 = HEAP32[$4 + 12 >> 2];
  $9 = $1;
  $1 = HEAP32[$4 + 24 >> 2];
  $8 = $1;
  $2 = HEAP32[$4 + 28 >> 2];
  $7 = $2;
  $2 = HEAP32[$4 + 16 >> 2];
  $3 = $2;
  $1 = HEAP32[$4 + 20 >> 2];
  $0 = $1;
  $1 = HEAP32[$4 + 8 >> 2];
  $6 = $1;
  $2 = HEAP32[$4 + 12 >> 2];
  $1 = $2;
  $2 = $0;
  $1 = $1 ^ $2;
  $0 = $1;
  $2 = $8;
  $6 = $6 ^ $3;
  $6 = $2 & $6;
  $1 = $7;
  $3 = $0;
  $3 = $1 & $3;
  $2 = $3;
  $3 = $9;
  $2 = $2 ^ $3;
  $1 = $11;
  $6 = $1 ^ $6;
  $3 = $5;
  $0 = $6 + $3 | 0;
  $1 = $2;
  $2 = $10;
  $5 = $1 + $2 | 0;
  $1 = $0;
  $5 = $0 >>> 0 < $6 >>> 0 ? $5 + 1 | 0 : $5;
  $3 = $5;
  $5 = $12;
  $0 = $3 + $5 | 0;
  $2 = $15;
  $6 = $1;
  $1 = $2 + $6 | 0;
  $0 = $1 >>> 0 < $6 >>> 0 ? $0 + 1 | 0 : $0;
  $6 = $1;
  $2 = $0;
  $0 = $14;
  $1 = $0 + $2 | 0;
  $5 = $13;
  $3 = $6 + $5 | 0;
  HEAP32[$4 + 712 >> 2] = $3;
  $1 = $3 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
  HEAP32[$4 + 716 >> 2] = $1;
  $1 = HEAP32[$4 + 56 >> 2];
  $0 = $1;
  $5 = HEAP32[$4 + 60 >> 2];
  $3 = $5;
  $1 = HEAP32[$4 + 52 >> 2];
  $2 = $1;
  $5 = HEAP32[$4 + 48 >> 2];
  $9 = $0 & $5;
  $1 = $3;
  $5 = $2;
  $5 = $1 & $5;
  $8 = $5;
  $5 = HEAP32[$4 + 40 >> 2];
  $7 = $5;
  $0 = HEAP32[$4 + 44 >> 2];
  $3 = $0;
  $0 = HEAP32[$4 + 56 >> 2];
  $2 = $0;
  $5 = HEAP32[$4 + 60 >> 2];
  $1 = $5;
  $5 = HEAP32[$4 + 48 >> 2];
  $6 = $5;
  $0 = HEAP32[$4 + 52 >> 2];
  $5 = $0;
  $0 = $1;
  $5 = $0 | $5;
  $0 = $7;
  $1 = $2;
  $6 = $1 | $6;
  $1 = $5;
  $5 = $3;
  $1 = $1 & $5;
  $2 = $1;
  $6 = $0 & $6;
  $5 = $9;
  $10 = $6 | $5;
  $1 = $8;
  $0 = $2;
  $0 = $1 | $0;
  $8 = $0;
  $0 = HEAP32[$4 + 56 >> 2];
  $3 = $0 << 25;
  $5 = HEAP32[$4 + 60 >> 2];
  $0 = $5 << 25 | $0 >>> 7;
  $2 = $0;
  $0 = HEAP32[$4 + 56 >> 2];
  $1 = HEAP32[$4 + 60 >> 2];
  $6 = $1 >>> 7 | 0;
  $0 = 0;
  $5 = $0;
  $1 = $3;
  $11 = $1 | $6;
  $0 = $2;
  $5 = $0 | $5;
  $7 = $5;
  $5 = HEAP32[$4 + 56 >> 2];
  $0 = $5;
  $5 = $0 << 4;
  $2 = $5;
  $5 = HEAP32[$4 + 56 >> 2];
  $1 = $5;
  $0 = HEAP32[$4 + 60 >> 2];
  $5 = $0 >>> 28 | 0;
  $6 = ($0 & 268435455) << 4 | $1 >>> 28;
  $0 = 0;
  $6 = $0 | $6;
  $1 = $5;
  $5 = $2;
  $1 = $1 | $5;
  $3 = $1;
  $1 = HEAP32[$4 + 56 >> 2];
  $9 = $1 << 30;
  $0 = HEAP32[$4 + 60 >> 2];
  $1 = $0 << 30 | $1 >>> 2;
  $2 = $1;
  $1 = HEAP32[$4 + 56 >> 2];
  $5 = HEAP32[$4 + 60 >> 2];
  $1 = 0;
  $0 = $1;
  $1 = $2;
  $0 = $1 | $0;
  $2 = $0;
  $1 = $6;
  $6 = $5 >>> 2 | 0;
  $5 = $9;
  $6 = $6 | $5;
  $6 = $1 ^ $6;
  $0 = $3;
  $5 = $2;
  $5 = $0 ^ $5;
  $1 = $5;
  $5 = $7;
  $1 = $1 ^ $5;
  $3 = $1;
  $0 = $11;
  $6 = $0 ^ $6;
  $5 = $10;
  $2 = $6 + $5 | 0;
  $1 = $8;
  $0 = $3;
  $3 = $1 + $0 | 0;
  HEAP32[$4 + 704 >> 2] = $2;
  $3 = $2 >>> 0 < $6 >>> 0 ? $3 + 1 | 0 : $3;
  HEAP32[$4 + 708 >> 2] = $3;
  $3 = HEAP32[$4 + 712 >> 2];
  $1 = $3;
  $5 = HEAP32[$4 + 716 >> 2];
  $0 = $5;
  $5 = HEAP32[$4 + 32 >> 2];
  $6 = $5;
  $3 = HEAP32[$4 + 36 >> 2];
  $5 = $3;
  $3 = $0;
  $2 = $3 + $5 | 0;
  $0 = $1 + $6 | 0;
  $2 = $0 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2;
  HEAP32[$4 + 32 >> 2] = $0;
  HEAP32[$4 + 36 >> 2] = $2;
  $1 = HEAP32[$4 + 716 >> 2];
  $0 = $1;
  $1 = HEAP32[$4 + 704 >> 2];
  $6 = $1;
  $2 = HEAP32[$4 + 712 >> 2];
  $3 = $2;
  $5 = $1 + $3 | 0;
  $2 = HEAP32[$4 + 708 >> 2];
  $1 = $2;
  $2 = $0;
  $0 = $1 + $2 | 0;
  HEAP32[$4 >> 2] = $5;
  $0 = $5 >>> 0 < $6 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$4 + 4 >> 2] = $0;
  HEAP32[$4 + 724 >> 2] = HEAP32[$4 + 724 >> 2] + 1;
  $2 = ($4 - -64 | 0) + (HEAP32[$4 + 724 >> 2] << 3) | 0;
  $0 = HEAP32[$2 >> 2];
  $16 = $0;
  $3 = HEAP32[$2 + 4 >> 2];
  $13 = $3;
  $2 = (HEAP32[$4 + 724 >> 2] << 3) + 162944 | 0;
  $3 = HEAP32[$2 >> 2];
  $14 = $3;
  $0 = HEAP32[$2 + 4 >> 2];
  $15 = $0;
  $0 = HEAP32[$4 + 8 >> 2];
  $9 = $0;
  $3 = HEAP32[$4 + 12 >> 2];
  $8 = $3;
  $3 = HEAP32[$4 + 32 >> 2];
  $5 = $3 << 23;
  $0 = HEAP32[$4 + 36 >> 2];
  $3 = $0 << 23 | $3 >>> 9;
  $1 = $3;
  $3 = HEAP32[$4 + 32 >> 2];
  $2 = HEAP32[$4 + 36 >> 2];
  $6 = $2 >>> 9 | 0;
  $2 = $5;
  $10 = $2 | $6;
  $3 = 0;
  $0 = $3;
  $3 = $1;
  $0 = $0 | $3;
  $7 = $0;
  $0 = HEAP32[$4 + 32 >> 2];
  $0 = $0 << 18;
  $5 = $0;
  $0 = HEAP32[$4 + 32 >> 2];
  $2 = $0;
  $3 = HEAP32[$4 + 36 >> 2];
  $0 = $3 >>> 14 | 0;
  $1 = $0;
  $6 = ($3 & 16383) << 18 | $2 >>> 14;
  $3 = 0;
  $11 = $6 | $3;
  $0 = $5;
  $2 = $1;
  $2 = $0 | $2;
  $5 = $2;
  $2 = HEAP32[$4 + 32 >> 2];
  $0 = $2;
  $2 = $0 << 14;
  $1 = $2;
  $2 = HEAP32[$4 + 32 >> 2];
  $3 = $2;
  $0 = HEAP32[$4 + 36 >> 2];
  $2 = $0 >>> 18 | 0;
  $6 = ($0 & 262143) << 14 | $3 >>> 18;
  $3 = $2;
  $2 = $1;
  $3 = $2 | $3;
  $2 = $11;
  $0 = 0;
  $6 = $0 | $6;
  $6 = $2 ^ $6;
  $0 = $3;
  $3 = $5;
  $0 = $0 ^ $3;
  $2 = $0;
  $0 = $7;
  $2 = $0 ^ $2;
  $5 = $2;
  $0 = $9;
  $3 = $10;
  $6 = $6 ^ $3;
  $1 = $0 + $6 | 0;
  $2 = $8;
  $3 = $5;
  $5 = $2 + $3 | 0;
  $5 = $1 >>> 0 < $6 >>> 0 ? $5 + 1 | 0 : $5;
  $12 = $5;
  $5 = HEAP32[$4 + 16 >> 2];
  $10 = $5;
  $0 = HEAP32[$4 + 20 >> 2];
  $11 = $0;
  $0 = HEAP32[$4 + 32 >> 2];
  $9 = $0;
  $5 = HEAP32[$4 + 36 >> 2];
  $8 = $5;
  $5 = HEAP32[$4 + 24 >> 2];
  $7 = $5;
  $0 = HEAP32[$4 + 28 >> 2];
  $2 = $0;
  $0 = HEAP32[$4 + 16 >> 2];
  $6 = $0;
  $5 = HEAP32[$4 + 20 >> 2];
  $0 = $5;
  $5 = $2;
  $0 = $0 ^ $5;
  $3 = $0;
  $2 = $7;
  $6 = $2 ^ $6;
  $5 = $9;
  $6 = $6 & $5;
  $0 = $8;
  $2 = $3;
  $2 = $0 & $2;
  $5 = $2;
  $2 = $11;
  $5 = $2 ^ $5;
  $0 = $10;
  $6 = $0 ^ $6;
  $3 = $1 + $6 | 0;
  $0 = $5;
  $5 = $12;
  $1 = $0 + $5 | 0;
  $0 = $3;
  $1 = $3 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
  $2 = $1;
  $1 = $15;
  $3 = $1 + $2 | 0;
  $6 = $0;
  $5 = $14;
  $0 = $6 + $5 | 0;
  $3 = $0 >>> 0 < $6 >>> 0 ? $3 + 1 | 0 : $3;
  $6 = $0;
  $5 = $3;
  $3 = $13;
  $0 = $3 + $5 | 0;
  $1 = $16;
  $2 = $1 + $6 | 0;
  $0 = $2 >>> 0 < $6 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$4 + 712 >> 2] = $2;
  HEAP32[$4 + 716 >> 2] = $0;
  $1 = HEAP32[$4 + 4 >> 2];
  $2 = $1;
  $1 = HEAP32[$4 + 56 >> 2];
  $0 = HEAP32[$4 >> 2];
  $11 = $1 & $0;
  $0 = HEAP32[$4 + 60 >> 2];
  $1 = $0;
  $0 = $2;
  $1 = $1 & $0;
  $9 = $1;
  $1 = HEAP32[$4 + 48 >> 2];
  $8 = $1;
  $3 = HEAP32[$4 + 52 >> 2];
  $7 = $3;
  $3 = HEAP32[$4 >> 2];
  $5 = $3;
  $1 = HEAP32[$4 + 4 >> 2];
  $0 = $1;
  $1 = HEAP32[$4 + 56 >> 2];
  $6 = $1;
  $3 = HEAP32[$4 + 60 >> 2];
  $1 = $3;
  $3 = $0;
  $1 = $1 | $3;
  $2 = $1;
  $0 = $5;
  $6 = $0 | $6;
  $3 = $8;
  $1 = $7;
  $0 = $2;
  $0 = $1 & $0;
  $2 = $0;
  $1 = $11;
  $6 = $6 & $3;
  $12 = $1 | $6;
  $0 = $9;
  $3 = $2;
  $3 = $0 | $3;
  $8 = $3;
  $3 = HEAP32[$4 >> 2];
  $0 = $3;
  $5 = $0 << 25;
  $1 = HEAP32[$4 + 4 >> 2];
  $3 = $1 << 25 | $0 >>> 7;
  $2 = $3;
  $3 = HEAP32[$4 >> 2];
  $0 = HEAP32[$4 + 4 >> 2];
  $6 = $0 >>> 7 | 0;
  $0 = $5;
  $10 = $0 | $6;
  $3 = 0;
  $1 = $3;
  $3 = $2;
  $1 = $1 | $3;
  $7 = $1;
  $1 = HEAP32[$4 >> 2];
  $1 = $1 << 4;
  $5 = $1;
  $1 = HEAP32[$4 >> 2];
  $0 = $1;
  $3 = HEAP32[$4 + 4 >> 2];
  $1 = $3 >>> 28 | 0;
  $2 = $1;
  $6 = ($3 & 268435455) << 4 | $0 >>> 28;
  $3 = 0;
  $11 = $6 | $3;
  $1 = $5;
  $0 = $2;
  $0 = $1 | $0;
  $5 = $0;
  $0 = HEAP32[$4 >> 2];
  $9 = $0 << 30;
  $3 = HEAP32[$4 + 4 >> 2];
  $0 = $3 << 30 | $0 >>> 2;
  $2 = $0;
  $0 = HEAP32[$4 >> 2];
  $1 = HEAP32[$4 + 4 >> 2];
  $6 = $1 >>> 2 | 0;
  $0 = 0;
  $3 = $0;
  $0 = $2;
  $3 = $0 | $3;
  $0 = $11;
  $1 = $9;
  $6 = $1 | $6;
  $6 = $0 ^ $6;
  $1 = $3;
  $3 = $5;
  $1 = $1 ^ $3;
  $0 = $1;
  $1 = $7;
  $0 = $1 ^ $0;
  $2 = $0;
  $1 = $12;
  $3 = $10;
  $6 = $6 ^ $3;
  $5 = $1 + $6 | 0;
  $0 = $8;
  $3 = $2;
  $2 = $0 + $3 | 0;
  HEAP32[$4 + 704 >> 2] = $5;
  $2 = $5 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2;
  HEAP32[$4 + 708 >> 2] = $2;
  $1 = HEAP32[$4 + 716 >> 2];
  $5 = $1;
  $2 = HEAP32[$4 + 712 >> 2];
  $0 = $2;
  $1 = HEAP32[$4 + 40 >> 2];
  $6 = $1;
  $3 = $0 + $1 | 0;
  $2 = HEAP32[$4 + 44 >> 2];
  $1 = $2;
  $2 = $5;
  $5 = $1 + $2 | 0;
  HEAP32[$4 + 40 >> 2] = $3;
  $5 = $3 >>> 0 < $6 >>> 0 ? $5 + 1 | 0 : $5;
  HEAP32[$4 + 44 >> 2] = $5;
  $5 = HEAP32[$4 + 712 >> 2];
  $2 = $5;
  $0 = HEAP32[$4 + 716 >> 2];
  $1 = $0;
  $0 = HEAP32[$4 + 704 >> 2];
  $6 = $0;
  $5 = HEAP32[$4 + 708 >> 2];
  $0 = $5;
  $5 = $1;
  $3 = $0 + $5 | 0;
  $1 = $2 + $6 | 0;
  $3 = $1 >>> 0 < $6 >>> 0 ? $3 + 1 | 0 : $3;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 12 >> 2] = $3;
  HEAP32[$4 + 724 >> 2] = HEAP32[$4 + 724 >> 2] + 1;
  $5 = ($4 - -64 | 0) + (HEAP32[$4 + 724 >> 2] << 3) | 0;
  $3 = HEAP32[$5 >> 2];
  $13 = $3;
  $2 = HEAP32[$5 + 4 >> 2];
  $14 = $2;
  $5 = (HEAP32[$4 + 724 >> 2] << 3) + 162944 | 0;
  $2 = HEAP32[$5 >> 2];
  $15 = $2;
  $3 = HEAP32[$5 + 4 >> 2];
  $12 = $3;
  $3 = HEAP32[$4 + 16 >> 2];
  $9 = $3;
  $2 = HEAP32[$4 + 20 >> 2];
  $8 = $2;
  $2 = HEAP32[$4 + 40 >> 2];
  $1 = $2 << 23;
  $3 = HEAP32[$4 + 44 >> 2];
  $2 = $3 << 23 | $2 >>> 9;
  $0 = $2;
  $2 = HEAP32[$4 + 40 >> 2];
  $5 = HEAP32[$4 + 44 >> 2];
  $2 = 0;
  $3 = $2;
  $6 = $5 >>> 9 | 0;
  $5 = $1;
  $10 = $6 | $5;
  $2 = $0;
  $3 = $2 | $3;
  $7 = $3;
  $3 = HEAP32[$4 + 40 >> 2];
  $3 = $3 << 18;
  $0 = $3;
  $3 = HEAP32[$4 + 40 >> 2];
  $5 = $3;
  $2 = HEAP32[$4 + 44 >> 2];
  $3 = $2 >>> 14 | 0;
  $6 = ($2 & 16383) << 18 | $5 >>> 14;
  $5 = $3;
  $2 = 0;
  $11 = $2 | $6;
  $3 = $0;
  $5 = $3 | $5;
  $1 = $5;
  $5 = HEAP32[$4 + 40 >> 2];
  $3 = $5;
  $5 = $3 << 14;
  $0 = $5;
  $5 = HEAP32[$4 + 40 >> 2];
  $2 = $5;
  $3 = HEAP32[$4 + 44 >> 2];
  $5 = $3 >>> 18 | 0;
  $6 = ($3 & 262143) << 14 | $2 >>> 18;
  $2 = $5;
  $5 = $0;
  $2 = $2 | $5;
  $0 = $2;
  $3 = 0;
  $6 = $6 | $3;
  $5 = $11;
  $6 = $6 ^ $5;
  $2 = $1;
  $3 = $0;
  $3 = $2 ^ $3;
  $5 = $3;
  $3 = $7;
  $5 = $3 ^ $5;
  $2 = $10;
  $6 = $2 ^ $6;
  $3 = $9;
  $0 = $6 + $3 | 0;
  $2 = $5;
  $5 = $8;
  $1 = $2 + $5 | 0;
  $1 = $0 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
  $10 = $1;
  $1 = HEAP32[$4 + 24 >> 2];
  $11 = $1;
  $3 = HEAP32[$4 + 28 >> 2];
  $9 = $3;
  $3 = HEAP32[$4 + 40 >> 2];
  $8 = $3;
  $1 = HEAP32[$4 + 44 >> 2];
  $7 = $1;
  $1 = HEAP32[$4 + 32 >> 2];
  $5 = $1;
  $3 = HEAP32[$4 + 36 >> 2];
  $2 = $3;
  $3 = HEAP32[$4 + 24 >> 2];
  $6 = $3;
  $1 = HEAP32[$4 + 28 >> 2];
  $3 = $1;
  $1 = $2;
  $3 = $1 ^ $3;
  $2 = $3;
  $1 = $8;
  $6 = $6 ^ $5;
  $6 = $1 & $6;
  $3 = $7;
  $5 = $2;
  $5 = $3 & $5;
  $1 = $5;
  $5 = $9;
  $1 = $1 ^ $5;
  $5 = $1;
  $3 = $11;
  $6 = $6 ^ $3;
  $2 = $6 + $0 | 0;
  $1 = $10;
  $3 = $5;
  $0 = $1 + $3 | 0;
  $3 = $2;
  $0 = $2 >>> 0 < $6 >>> 0 ? $0 + 1 | 0 : $0;
  $5 = $0;
  $0 = $12;
  $2 = $0 + $5 | 0;
  $1 = $15;
  $6 = $3;
  $3 = $1 + $6 | 0;
  $5 = $3;
  $2 = $3 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2;
  $1 = $2;
  $2 = $14;
  $3 = $1 + $2 | 0;
  $0 = $13;
  $6 = $5;
  $5 = $0 + $6 | 0;
  HEAP32[$4 + 712 >> 2] = $5;
  $3 = $5 >>> 0 < $6 >>> 0 ? $3 + 1 | 0 : $3;
  HEAP32[$4 + 716 >> 2] = $3;
  $0 = HEAP32[$4 + 12 >> 2];
  $1 = $0;
  $3 = HEAP32[$4 + 8 >> 2];
  $0 = HEAP32[$4 >> 2];
  $9 = $3 & $0;
  $3 = HEAP32[$4 + 4 >> 2];
  $0 = $3;
  $3 = $1;
  $0 = $0 & $3;
  $8 = $0;
  $0 = HEAP32[$4 + 56 >> 2];
  $7 = $0;
  $2 = HEAP32[$4 + 60 >> 2];
  $5 = $2;
  $2 = HEAP32[$4 + 8 >> 2];
  $3 = $2;
  $0 = HEAP32[$4 + 12 >> 2];
  $1 = $0;
  $0 = HEAP32[$4 >> 2];
  $6 = $0;
  $2 = HEAP32[$4 + 4 >> 2];
  $0 = $2;
  $2 = $1;
  $0 = $0 | $2;
  $1 = $0;
  $2 = $7;
  $6 = $6 | $3;
  $0 = $5;
  $3 = $1;
  $3 = $0 & $3;
  $0 = $9;
  $6 = $2 & $6;
  $12 = $0 | $6;
  $2 = $3;
  $3 = $8;
  $2 = $2 | $3;
  $8 = $2;
  $2 = HEAP32[$4 + 8 >> 2];
  $3 = $2;
  $5 = $3 << 25;
  $0 = HEAP32[$4 + 12 >> 2];
  $2 = $0 << 25 | $3 >>> 7;
  $1 = $2;
  $2 = HEAP32[$4 + 8 >> 2];
  $3 = HEAP32[$4 + 12 >> 2];
  $6 = $3 >>> 7 | 0;
  $3 = $5;
  $10 = $6 | $3;
  $2 = 0;
  $0 = $2;
  $2 = $1;
  $0 = $0 | $2;
  $7 = $0;
  $0 = HEAP32[$4 + 8 >> 2];
  $0 = $0 << 4;
  $1 = $0;
  $0 = HEAP32[$4 + 8 >> 2];
  $3 = $0;
  $2 = HEAP32[$4 + 12 >> 2];
  $0 = $2 >>> 28 | 0;
  $6 = ($2 & 268435455) << 4 | $3 >>> 28;
  $3 = $0;
  $2 = 0;
  $11 = $2 | $6;
  $0 = $1;
  $3 = $0 | $3;
  $5 = $3;
  $3 = HEAP32[$4 + 8 >> 2];
  $0 = $3;
  $9 = $0 << 30;
  $2 = HEAP32[$4 + 12 >> 2];
  $3 = $2 << 30 | $0 >>> 2;
  $1 = $3;
  $3 = HEAP32[$4 + 8 >> 2];
  $0 = HEAP32[$4 + 12 >> 2];
  $6 = $0 >>> 2 | 0;
  $3 = 0;
  $2 = $3;
  $3 = $1;
  $2 = $2 | $3;
  $0 = $9;
  $6 = $0 | $6;
  $3 = $11;
  $6 = $6 ^ $3;
  $0 = $2;
  $2 = $5;
  $0 = $0 ^ $2;
  $3 = $0;
  $0 = $7;
  $3 = $0 ^ $3;
  $0 = $12;
  $2 = $10;
  $6 = $2 ^ $6;
  $1 = $0 + $6 | 0;
  $2 = $3;
  $3 = $8;
  $5 = $2 + $3 | 0;
  HEAP32[$4 + 704 >> 2] = $1;
  $5 = $1 >>> 0 < $6 >>> 0 ? $5 + 1 | 0 : $5;
  HEAP32[$4 + 708 >> 2] = $5;
  $0 = HEAP32[$4 + 716 >> 2];
  $1 = $0;
  $0 = HEAP32[$4 + 48 >> 2];
  $6 = $0;
  $5 = HEAP32[$4 + 712 >> 2];
  $3 = $5;
  $2 = $0 + $3 | 0;
  $5 = HEAP32[$4 + 52 >> 2];
  $0 = $5;
  $5 = $1;
  $1 = $0 + $5 | 0;
  HEAP32[$4 + 48 >> 2] = $2;
  $1 = $2 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
  HEAP32[$4 + 52 >> 2] = $1;
  $1 = HEAP32[$4 + 712 >> 2];
  $5 = $1;
  $3 = HEAP32[$4 + 716 >> 2];
  $7 = $3;
  $1 = HEAP32[$4 + 708 >> 2];
  $2 = $1;
  $3 = HEAP32[$4 + 704 >> 2];
  $6 = $3;
  $0 = $3 + $5 | 0;
  $1 = $7;
  $3 = $2;
  $2 = $1 + $3 | 0;
  HEAP32[$4 + 16 >> 2] = $0;
  $2 = $0 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2;
  HEAP32[$4 + 20 >> 2] = $2;
  HEAP32[$4 + 724 >> 2] = HEAP32[$4 + 724 >> 2] + 1;
  $1 = ($4 - -64 | 0) + (HEAP32[$4 + 724 >> 2] << 3) | 0;
  $2 = HEAP32[$1 >> 2];
  $13 = $2;
  $5 = HEAP32[$1 + 4 >> 2];
  $14 = $5;
  $1 = (HEAP32[$4 + 724 >> 2] << 3) + 162944 | 0;
  $5 = HEAP32[$1 >> 2];
  $15 = $5;
  $2 = HEAP32[$1 + 4 >> 2];
  $12 = $2;
  $2 = HEAP32[$4 + 24 >> 2];
  $9 = $2;
  $5 = HEAP32[$4 + 28 >> 2];
  $8 = $5;
  $5 = HEAP32[$4 + 48 >> 2];
  $1 = $5;
  $3 = $1 << 23;
  $2 = HEAP32[$4 + 52 >> 2];
  $5 = $2 << 23 | $1 >>> 9;
  $0 = $5;
  $5 = HEAP32[$4 + 48 >> 2];
  $1 = HEAP32[$4 + 52 >> 2];
  $6 = $1 >>> 9 | 0;
  $1 = $3;
  $10 = $1 | $6;
  $5 = 0;
  $2 = $5;
  $5 = $0;
  $2 = $2 | $5;
  $7 = $2;
  $2 = HEAP32[$4 + 48 >> 2];
  $2 = $2 << 18;
  $0 = $2;
  $2 = HEAP32[$4 + 48 >> 2];
  $1 = $2;
  $5 = HEAP32[$4 + 52 >> 2];
  $2 = $5 >>> 14 | 0;
  $6 = ($5 & 16383) << 18 | $1 >>> 14;
  $5 = 0;
  $11 = $6 | $5;
  $1 = $2;
  $2 = $0;
  $1 = $1 | $2;
  $3 = $1;
  $1 = HEAP32[$4 + 48 >> 2];
  $1 = $1 << 14;
  $0 = $1;
  $1 = HEAP32[$4 + 48 >> 2];
  $5 = $1;
  $2 = HEAP32[$4 + 52 >> 2];
  $1 = $2 >>> 18 | 0;
  $6 = ($2 & 262143) << 14 | $5 >>> 18;
  $5 = $1;
  $1 = $0;
  $5 = $1 | $5;
  $1 = $11;
  $2 = 0;
  $6 = $2 | $6;
  $6 = $1 ^ $6;
  $2 = $5;
  $5 = $3;
  $2 = $2 ^ $5;
  $1 = $2;
  $2 = $7;
  $1 = $1 ^ $2;
  $0 = $1;
  $2 = $9;
  $5 = $10;
  $6 = $6 ^ $5;
  $3 = $2 + $6 | 0;
  $1 = $8;
  $5 = $0;
  $0 = $1 + $5 | 0;
  $0 = $3 >>> 0 < $6 >>> 0 ? $0 + 1 | 0 : $0;
  $10 = $0;
  $0 = HEAP32[$4 + 32 >> 2];
  $11 = $0;
  $2 = HEAP32[$4 + 36 >> 2];
  $9 = $2;
  $2 = HEAP32[$4 + 48 >> 2];
  $8 = $2;
  $0 = HEAP32[$4 + 52 >> 2];
  $7 = $0;
  $0 = HEAP32[$4 + 40 >> 2];
  $5 = $0;
  $2 = HEAP32[$4 + 44 >> 2];
  $1 = $2;
  $2 = HEAP32[$4 + 32 >> 2];
  $6 = $2;
  $0 = HEAP32[$4 + 36 >> 2];
  $2 = $0;
  $0 = $1;
  $2 = $0 ^ $2;
  $0 = $8;
  $1 = $5;
  $6 = $1 ^ $6;
  $6 = $0 & $6;
  $1 = $2;
  $2 = $7;
  $1 = $1 & $2;
  $0 = $1;
  $1 = $9;
  $0 = $1 ^ $0;
  $7 = $0;
  $1 = $3;
  $2 = $11;
  $6 = $2 ^ $6;
  $5 = $1 + $6 | 0;
  $0 = $10;
  $2 = $7;
  $3 = $0 + $2 | 0;
  $2 = $5;
  $3 = $5 >>> 0 < $6 >>> 0 ? $3 + 1 | 0 : $3;
  $1 = $3;
  $3 = $12;
  $5 = $1 + $3 | 0;
  $0 = $15;
  $6 = $2;
  $2 = $0 + $6 | 0;
  $5 = $2 >>> 0 < $6 >>> 0 ? $5 + 1 | 0 : $5;
  $6 = $2;
  $0 = $5;
  $5 = $14;
  $2 = $0 + $5 | 0;
  $3 = $13;
  $1 = $6 + $3 | 0;
  $2 = $1 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2;
  HEAP32[$4 + 712 >> 2] = $1;
  HEAP32[$4 + 716 >> 2] = $2;
  $2 = HEAP32[$4 + 16 >> 2];
  $5 = $2;
  $3 = HEAP32[$4 + 20 >> 2];
  $1 = $3;
  $2 = HEAP32[$4 + 12 >> 2];
  $0 = $2;
  $3 = HEAP32[$4 + 8 >> 2];
  $9 = $3 & $5;
  $2 = $1;
  $3 = $0;
  $3 = $2 & $3;
  $8 = $3;
  $3 = HEAP32[$4 >> 2];
  $7 = $3;
  $5 = HEAP32[$4 + 4 >> 2];
  $1 = $5;
  $5 = HEAP32[$4 + 16 >> 2];
  $2 = $5;
  $3 = HEAP32[$4 + 20 >> 2];
  $0 = $3;
  $3 = HEAP32[$4 + 8 >> 2];
  $6 = $3;
  $5 = HEAP32[$4 + 12 >> 2];
  $3 = $5;
  $5 = $0;
  $3 = $3 | $5;
  $6 = $2 | $6;
  $5 = $7;
  $2 = $3;
  $3 = $1;
  $2 = $2 & $3;
  $0 = $2;
  $6 = $6 & $5;
  $3 = $9;
  $10 = $6 | $3;
  $2 = $8;
  $5 = $0;
  $5 = $2 | $5;
  $8 = $5;
  $5 = HEAP32[$4 + 16 >> 2];
  $2 = $5;
  $1 = $2 << 25;
  $3 = HEAP32[$4 + 20 >> 2];
  $5 = $3 << 25 | $2 >>> 7;
  $0 = $5;
  $5 = HEAP32[$4 + 16 >> 2];
  $2 = HEAP32[$4 + 20 >> 2];
  $6 = $2 >>> 7 | 0;
  $2 = $1;
  $11 = $2 | $6;
  $5 = 0;
  $3 = $5;
  $5 = $0;
  $3 = $3 | $5;
  $7 = $3;
  $3 = HEAP32[$4 + 16 >> 2];
  $3 = $3 << 4;
  $0 = $3;
  $3 = HEAP32[$4 + 16 >> 2];
  $2 = $3;
  $5 = HEAP32[$4 + 20 >> 2];
  $3 = $5 >>> 28 | 0;
  $6 = ($5 & 268435455) << 4 | $2 >>> 28;
  $5 = 0;
  $6 = $6 | $5;
  $2 = $3;
  $3 = $0;
  $2 = $2 | $3;
  $1 = $2;
  $2 = HEAP32[$4 + 16 >> 2];
  $3 = $2;
  $9 = $3 << 30;
  $5 = HEAP32[$4 + 20 >> 2];
  $2 = $5 << 30 | $3 >>> 2;
  $0 = $2;
  $2 = HEAP32[$4 + 16 >> 2];
  $3 = HEAP32[$4 + 20 >> 2];
  $2 = 0;
  $5 = $2;
  $2 = $0;
  $5 = $2 | $5;
  $2 = $6;
  $6 = $3 >>> 2 | 0;
  $3 = $9;
  $6 = $6 | $3;
  $6 = $2 ^ $6;
  $3 = $5;
  $5 = $1;
  $3 = $3 ^ $5;
  $2 = $3;
  $3 = $7;
  $2 = $2 ^ $3;
  $1 = $2;
  $5 = $11;
  $6 = $6 ^ $5;
  $3 = $10;
  $0 = $6 + $3 | 0;
  $2 = $8;
  $5 = $1;
  $1 = $2 + $5 | 0;
  HEAP32[$4 + 704 >> 2] = $0;
  $1 = $0 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
  HEAP32[$4 + 708 >> 2] = $1;
  $1 = HEAP32[$4 + 712 >> 2];
  $2 = $1;
  $3 = HEAP32[$4 + 716 >> 2];
  $7 = $3;
  $1 = HEAP32[$4 + 60 >> 2];
  $0 = $1;
  $3 = HEAP32[$4 + 56 >> 2];
  $6 = $3;
  $5 = $2 + $3 | 0;
  $1 = $7;
  $3 = $0;
  $0 = $1 + $3 | 0;
  HEAP32[$4 + 56 >> 2] = $5;
  $0 = $5 >>> 0 < $6 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$4 + 60 >> 2] = $0;
  $0 = HEAP32[$4 + 712 >> 2];
  $1 = $0;
  $2 = HEAP32[$4 + 716 >> 2];
  $7 = $2;
  $0 = HEAP32[$4 + 708 >> 2];
  $5 = $0;
  $2 = HEAP32[$4 + 704 >> 2];
  $6 = $2;
  $3 = $1 + $2 | 0;
  $0 = $7;
  $2 = $5;
  $5 = $0 + $2 | 0;
  HEAP32[$4 + 24 >> 2] = $3;
  $5 = $3 >>> 0 < $6 >>> 0 ? $5 + 1 | 0 : $5;
  HEAP32[$4 + 28 >> 2] = $5;
  HEAP32[$4 + 724 >> 2] = HEAP32[$4 + 724 >> 2] + 1;
  $0 = ($4 - -64 | 0) + (HEAP32[$4 + 724 >> 2] << 3) | 0;
  $5 = HEAP32[$0 >> 2];
  $13 = $5;
  $1 = HEAP32[$0 + 4 >> 2];
  $14 = $1;
  $0 = (HEAP32[$4 + 724 >> 2] << 3) + 162944 | 0;
  $1 = HEAP32[$0 >> 2];
  $15 = $1;
  $5 = HEAP32[$0 + 4 >> 2];
  $12 = $5;
  $5 = HEAP32[$4 + 32 >> 2];
  $9 = $5;
  $1 = HEAP32[$4 + 36 >> 2];
  $8 = $1;
  $1 = HEAP32[$4 + 56 >> 2];
  $0 = $1;
  $3 = $0 << 23;
  $5 = HEAP32[$4 + 60 >> 2];
  $1 = $5 << 23 | $0 >>> 9;
  $2 = $1;
  $1 = HEAP32[$4 + 56 >> 2];
  $0 = HEAP32[$4 + 60 >> 2];
  $6 = $0 >>> 9 | 0;
  $1 = 0;
  $5 = $1;
  $0 = $3;
  $10 = $0 | $6;
  $1 = $2;
  $5 = $1 | $5;
  $7 = $5;
  $5 = HEAP32[$4 + 56 >> 2];
  $1 = $5;
  $5 = $1 << 18;
  $2 = $5;
  $5 = HEAP32[$4 + 56 >> 2];
  $0 = $5;
  $1 = HEAP32[$4 + 60 >> 2];
  $5 = $1 >>> 14 | 0;
  $6 = ($1 & 16383) << 18 | $0 >>> 14;
  $1 = 0;
  $11 = $1 | $6;
  $0 = $5;
  $5 = $2;
  $0 = $0 | $5;
  $3 = $0;
  $0 = HEAP32[$4 + 56 >> 2];
  $0 = $0 << 14;
  $2 = $0;
  $0 = HEAP32[$4 + 56 >> 2];
  $1 = $0;
  $5 = HEAP32[$4 + 60 >> 2];
  $0 = $5 >>> 18 | 0;
  $6 = ($5 & 262143) << 14 | $1 >>> 18;
  $1 = $0;
  $0 = $2;
  $1 = $1 | $0;
  $2 = $1;
  $0 = $11;
  $5 = 0;
  $6 = $6 | $5;
  $6 = $0 ^ $6;
  $1 = $3;
  $5 = $2;
  $5 = $1 ^ $5;
  $0 = $5;
  $5 = $7;
  $0 = $0 ^ $5;
  $1 = $10;
  $6 = $1 ^ $6;
  $5 = $9;
  $2 = $6 + $5 | 0;
  $1 = $0;
  $0 = $8;
  $3 = $1 + $0 | 0;
  $3 = $2 >>> 0 < $6 >>> 0 ? $3 + 1 | 0 : $3;
  $10 = $3;
  $3 = HEAP32[$4 + 40 >> 2];
  $11 = $3;
  $5 = HEAP32[$4 + 44 >> 2];
  $9 = $5;
  $5 = HEAP32[$4 + 56 >> 2];
  $8 = $5;
  $3 = HEAP32[$4 + 60 >> 2];
  $7 = $3;
  $3 = HEAP32[$4 + 48 >> 2];
  $1 = $3;
  $5 = HEAP32[$4 + 52 >> 2];
  $0 = $5;
  $5 = HEAP32[$4 + 40 >> 2];
  $6 = $5;
  $3 = HEAP32[$4 + 44 >> 2];
  $5 = $3;
  $3 = $0;
  $5 = $3 ^ $5;
  $0 = $1;
  $6 = $0 ^ $6;
  $3 = $8;
  $6 = $6 & $3;
  $0 = $5;
  $5 = $7;
  $0 = $0 & $5;
  $3 = $0;
  $0 = $9;
  $3 = $0 ^ $3;
  $7 = $3;
  $0 = $2;
  $5 = $11;
  $6 = $6 ^ $5;
  $1 = $0 + $6 | 0;
  $3 = $10;
  $5 = $7;
  $2 = $3 + $5 | 0;
  $2 = $1 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2;
  $6 = $1;
  $3 = $15;
  $5 = $1 + $3 | 0;
  $0 = $2;
  $2 = $12;
  $1 = $0 + $2 | 0;
  $0 = $5;
  $1 = $5 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
  $3 = $1;
  $1 = $14;
  $5 = $1 + $3 | 0;
  $2 = $13;
  $6 = $0;
  $0 = $2 + $6 | 0;
  $5 = $0 >>> 0 < $6 >>> 0 ? $5 + 1 | 0 : $5;
  HEAP32[$4 + 712 >> 2] = $0;
  HEAP32[$4 + 716 >> 2] = $5;
  $2 = HEAP32[$4 + 28 >> 2];
  $0 = $2;
  $5 = HEAP32[$4 + 24 >> 2];
  $1 = $5;
  $2 = HEAP32[$4 + 16 >> 2];
  $9 = $1 & $2;
  $5 = HEAP32[$4 + 20 >> 2];
  $2 = $5;
  $5 = $0;
  $2 = $2 & $5;
  $8 = $2;
  $2 = HEAP32[$4 + 8 >> 2];
  $7 = $2;
  $1 = HEAP32[$4 + 12 >> 2];
  $3 = $1;
  $1 = HEAP32[$4 + 24 >> 2];
  $5 = $1;
  $2 = HEAP32[$4 + 28 >> 2];
  $0 = $2;
  $2 = HEAP32[$4 + 16 >> 2];
  $6 = $2;
  $1 = HEAP32[$4 + 20 >> 2];
  $2 = $1;
  $1 = $0;
  $2 = $1 | $2;
  $0 = $2;
  $1 = $7;
  $6 = $6 | $5;
  $2 = $3;
  $5 = $0;
  $5 = $2 & $5;
  $2 = $9;
  $6 = $1 & $6;
  $12 = $2 | $6;
  $1 = $5;
  $5 = $8;
  $1 = $1 | $5;
  $8 = $1;
  $1 = HEAP32[$4 + 24 >> 2];
  $3 = $1 << 25;
  $2 = HEAP32[$4 + 28 >> 2];
  $1 = $2 << 25 | $1 >>> 7;
  $0 = $1;
  $1 = HEAP32[$4 + 24 >> 2];
  $5 = HEAP32[$4 + 28 >> 2];
  $1 = 0;
  $2 = $1;
  $6 = $5 >>> 7 | 0;
  $5 = $3;
  $10 = $6 | $5;
  $1 = $0;
  $2 = $1 | $2;
  $7 = $2;
  $2 = HEAP32[$4 + 24 >> 2];
  $1 = $2;
  $2 = $1 << 4;
  $0 = $2;
  $2 = HEAP32[$4 + 24 >> 2];
  $5 = $2;
  $1 = HEAP32[$4 + 28 >> 2];
  $2 = $1 >>> 28 | 0;
  $6 = ($1 & 268435455) << 4 | $5 >>> 28;
  $5 = $2;
  $1 = 0;
  $11 = $1 | $6;
  $2 = $0;
  $5 = $2 | $5;
  $3 = $5;
  $5 = HEAP32[$4 + 24 >> 2];
  $2 = $5;
  $9 = $2 << 30;
  $1 = HEAP32[$4 + 28 >> 2];
  $5 = $1 << 30 | $2 >>> 2;
  $0 = $5;
  $5 = HEAP32[$4 + 24 >> 2];
  $2 = HEAP32[$4 + 28 >> 2];
  $6 = $2 >>> 2 | 0;
  $5 = 0;
  $1 = $5;
  $5 = $0;
  $1 = $1 | $5;
  $0 = $1;
  $2 = $9;
  $6 = $2 | $6;
  $5 = $11;
  $6 = $6 ^ $5;
  $1 = $3;
  $2 = $0;
  $2 = $1 ^ $2;
  $5 = $2;
  $2 = $7;
  $5 = $2 ^ $5;
  $2 = $12;
  $1 = $10;
  $6 = $1 ^ $6;
  $3 = $2 + $6 | 0;
  $1 = $5;
  $5 = $8;
  $0 = $1 + $5 | 0;
  HEAP32[$4 + 704 >> 2] = $3;
  $0 = $3 >>> 0 < $6 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$4 + 708 >> 2] = $0;
  $0 = HEAP32[$4 + 712 >> 2];
  $5 = $0;
  $2 = HEAP32[$4 + 716 >> 2];
  $7 = $2;
  $0 = HEAP32[$4 + 4 >> 2];
  $3 = $0;
  $2 = HEAP32[$4 >> 2];
  $6 = $2;
  $1 = $2 + $5 | 0;
  $0 = $7;
  $2 = $3;
  $3 = $0 + $2 | 0;
  HEAP32[$4 >> 2] = $1;
  $3 = $1 >>> 0 < $6 >>> 0 ? $3 + 1 | 0 : $3;
  HEAP32[$4 + 4 >> 2] = $3;
  $3 = HEAP32[$4 + 712 >> 2];
  $2 = $3;
  $5 = HEAP32[$4 + 716 >> 2];
  $0 = $5;
  $5 = HEAP32[$4 + 704 >> 2];
  $6 = $5;
  $3 = HEAP32[$4 + 708 >> 2];
  $5 = $3;
  $3 = $0;
  $1 = $3 + $5 | 0;
  $0 = $2;
  $2 = $0 + $6 | 0;
  $1 = $2 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
  HEAP32[$4 + 32 >> 2] = $2;
  HEAP32[$4 + 36 >> 2] = $1;
  HEAP32[$4 + 724 >> 2] = HEAP32[$4 + 724 >> 2] + 1;
  $3 = ($4 - -64 | 0) + (HEAP32[$4 + 724 >> 2] << 3) | 0;
  $1 = HEAP32[$3 >> 2];
  $13 = $1;
  $0 = HEAP32[$3 + 4 >> 2];
  $14 = $0;
  $3 = (HEAP32[$4 + 724 >> 2] << 3) + 162944 | 0;
  $0 = HEAP32[$3 >> 2];
  $15 = $0;
  $1 = HEAP32[$3 + 4 >> 2];
  $12 = $1;
  $1 = HEAP32[$4 + 40 >> 2];
  $9 = $1;
  $0 = HEAP32[$4 + 44 >> 2];
  $8 = $0;
  $0 = HEAP32[$4 >> 2];
  $5 = $0 << 23;
  $1 = HEAP32[$4 + 4 >> 2];
  $0 = $1 << 23 | $0 >>> 9;
  $2 = $0;
  $0 = HEAP32[$4 >> 2];
  $3 = HEAP32[$4 + 4 >> 2];
  $6 = $3 >>> 9 | 0;
  $3 = $5;
  $10 = $6 | $3;
  $0 = 0;
  $1 = $0;
  $0 = $2;
  $1 = $1 | $0;
  $7 = $1;
  $1 = HEAP32[$4 >> 2];
  $0 = $1;
  $1 = $0 << 18;
  $2 = $1;
  $1 = HEAP32[$4 >> 2];
  $3 = $1;
  $0 = HEAP32[$4 + 4 >> 2];
  $1 = $0 >>> 14 | 0;
  $6 = ($0 & 16383) << 18 | $3 >>> 14;
  $3 = $1;
  $0 = 0;
  $11 = $0 | $6;
  $1 = $2;
  $3 = $1 | $3;
  $5 = $3;
  $3 = HEAP32[$4 >> 2];
  $1 = $3;
  $3 = $1 << 14;
  $2 = $3;
  $3 = HEAP32[$4 >> 2];
  $0 = $3;
  $1 = HEAP32[$4 + 4 >> 2];
  $3 = $1 >>> 18 | 0;
  $6 = ($1 & 262143) << 14 | $0 >>> 18;
  $0 = $3;
  $3 = $2;
  $0 = $0 | $3;
  $1 = 0;
  $6 = $1 | $6;
  $3 = $11;
  $6 = $6 ^ $3;
  $1 = $0;
  $0 = $5;
  $1 = $1 ^ $0;
  $3 = $1;
  $1 = $7;
  $3 = $1 ^ $3;
  $1 = $9;
  $0 = $10;
  $6 = $0 ^ $6;
  $5 = $1 + $6 | 0;
  $0 = $3;
  $3 = $8;
  $2 = $0 + $3 | 0;
  $2 = $5 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2;
  $10 = $2;
  $2 = HEAP32[$4 + 48 >> 2];
  $11 = $2;
  $1 = HEAP32[$4 + 52 >> 2];
  $9 = $1;
  $1 = HEAP32[$4 >> 2];
  $8 = $1;
  $2 = HEAP32[$4 + 4 >> 2];
  $7 = $2;
  $2 = HEAP32[$4 + 56 >> 2];
  $3 = $2;
  $1 = HEAP32[$4 + 60 >> 2];
  $0 = $1;
  $1 = HEAP32[$4 + 48 >> 2];
  $6 = $1;
  $2 = HEAP32[$4 + 52 >> 2];
  $1 = $2;
  $2 = $0;
  $1 = $1 ^ $2;
  $0 = $1;
  $2 = $8;
  $6 = $6 ^ $3;
  $6 = $2 & $6;
  $1 = $7;
  $3 = $0;
  $3 = $1 & $3;
  $2 = $3;
  $3 = $9;
  $2 = $2 ^ $3;
  $1 = $11;
  $6 = $1 ^ $6;
  $3 = $5;
  $0 = $6 + $3 | 0;
  $1 = $2;
  $2 = $10;
  $5 = $1 + $2 | 0;
  $1 = $0;
  $5 = $0 >>> 0 < $6 >>> 0 ? $5 + 1 | 0 : $5;
  $3 = $5;
  $5 = $12;
  $0 = $3 + $5 | 0;
  $2 = $15;
  $6 = $1;
  $1 = $2 + $6 | 0;
  $0 = $1 >>> 0 < $6 >>> 0 ? $0 + 1 | 0 : $0;
  $6 = $1;
  $2 = $0;
  $0 = $14;
  $1 = $0 + $2 | 0;
  $5 = $13;
  $3 = $6 + $5 | 0;
  HEAP32[$4 + 712 >> 2] = $3;
  $1 = $3 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
  HEAP32[$4 + 716 >> 2] = $1;
  $1 = HEAP32[$4 + 32 >> 2];
  $0 = $1;
  $5 = HEAP32[$4 + 36 >> 2];
  $3 = $5;
  $1 = HEAP32[$4 + 28 >> 2];
  $2 = $1;
  $5 = HEAP32[$4 + 24 >> 2];
  $9 = $0 & $5;
  $1 = $3;
  $5 = $2;
  $5 = $1 & $5;
  $8 = $5;
  $5 = HEAP32[$4 + 16 >> 2];
  $7 = $5;
  $0 = HEAP32[$4 + 20 >> 2];
  $3 = $0;
  $0 = HEAP32[$4 + 32 >> 2];
  $2 = $0;
  $5 = HEAP32[$4 + 36 >> 2];
  $1 = $5;
  $5 = HEAP32[$4 + 24 >> 2];
  $6 = $5;
  $0 = HEAP32[$4 + 28 >> 2];
  $5 = $0;
  $0 = $1;
  $5 = $0 | $5;
  $0 = $7;
  $1 = $2;
  $6 = $1 | $6;
  $1 = $5;
  $5 = $3;
  $1 = $1 & $5;
  $2 = $1;
  $6 = $0 & $6;
  $5 = $9;
  $10 = $6 | $5;
  $1 = $8;
  $0 = $2;
  $0 = $1 | $0;
  $8 = $0;
  $0 = HEAP32[$4 + 32 >> 2];
  $3 = $0 << 25;
  $5 = HEAP32[$4 + 36 >> 2];
  $0 = $5 << 25 | $0 >>> 7;
  $2 = $0;
  $0 = HEAP32[$4 + 32 >> 2];
  $1 = HEAP32[$4 + 36 >> 2];
  $6 = $1 >>> 7 | 0;
  $0 = 0;
  $5 = $0;
  $1 = $3;
  $11 = $1 | $6;
  $0 = $2;
  $5 = $0 | $5;
  $7 = $5;
  $5 = HEAP32[$4 + 32 >> 2];
  $0 = $5;
  $5 = $0 << 4;
  $2 = $5;
  $5 = HEAP32[$4 + 32 >> 2];
  $1 = $5;
  $0 = HEAP32[$4 + 36 >> 2];
  $5 = $0 >>> 28 | 0;
  $6 = ($0 & 268435455) << 4 | $1 >>> 28;
  $0 = 0;
  $6 = $0 | $6;
  $1 = $5;
  $5 = $2;
  $1 = $1 | $5;
  $3 = $1;
  $1 = HEAP32[$4 + 32 >> 2];
  $9 = $1 << 30;
  $0 = HEAP32[$4 + 36 >> 2];
  $1 = $0 << 30 | $1 >>> 2;
  $2 = $1;
  $1 = HEAP32[$4 + 32 >> 2];
  $5 = HEAP32[$4 + 36 >> 2];
  $1 = 0;
  $0 = $1;
  $1 = $2;
  $0 = $1 | $0;
  $2 = $0;
  $1 = $6;
  $6 = $5 >>> 2 | 0;
  $5 = $9;
  $6 = $6 | $5;
  $6 = $1 ^ $6;
  $0 = $3;
  $5 = $2;
  $5 = $0 ^ $5;
  $1 = $5;
  $5 = $7;
  $1 = $1 ^ $5;
  $3 = $1;
  $0 = $11;
  $6 = $0 ^ $6;
  $5 = $10;
  $2 = $6 + $5 | 0;
  $1 = $8;
  $0 = $3;
  $3 = $1 + $0 | 0;
  HEAP32[$4 + 704 >> 2] = $2;
  $3 = $2 >>> 0 < $6 >>> 0 ? $3 + 1 | 0 : $3;
  HEAP32[$4 + 708 >> 2] = $3;
  $3 = HEAP32[$4 + 712 >> 2];
  $1 = $3;
  $5 = HEAP32[$4 + 716 >> 2];
  $0 = $5;
  $5 = HEAP32[$4 + 8 >> 2];
  $6 = $5;
  $3 = HEAP32[$4 + 12 >> 2];
  $5 = $3;
  $3 = $0;
  $2 = $3 + $5 | 0;
  $0 = $1 + $6 | 0;
  $2 = $0 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2;
  HEAP32[$4 + 8 >> 2] = $0;
  HEAP32[$4 + 12 >> 2] = $2;
  $1 = HEAP32[$4 + 716 >> 2];
  $0 = $1;
  $1 = HEAP32[$4 + 704 >> 2];
  $6 = $1;
  $2 = HEAP32[$4 + 712 >> 2];
  $3 = $2;
  $5 = $1 + $3 | 0;
  $2 = HEAP32[$4 + 708 >> 2];
  $1 = $2;
  $2 = $0;
  $0 = $1 + $2 | 0;
  HEAP32[$4 + 40 >> 2] = $5;
  $0 = $5 >>> 0 < $6 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$4 + 44 >> 2] = $0;
  HEAP32[$4 + 724 >> 2] = HEAP32[$4 + 724 >> 2] + 1;
  $2 = ($4 - -64 | 0) + (HEAP32[$4 + 724 >> 2] << 3) | 0;
  $0 = HEAP32[$2 >> 2];
  $16 = $0;
  $3 = HEAP32[$2 + 4 >> 2];
  $13 = $3;
  $2 = (HEAP32[$4 + 724 >> 2] << 3) + 162944 | 0;
  $3 = HEAP32[$2 >> 2];
  $14 = $3;
  $0 = HEAP32[$2 + 4 >> 2];
  $15 = $0;
  $0 = HEAP32[$4 + 48 >> 2];
  $9 = $0;
  $3 = HEAP32[$4 + 52 >> 2];
  $8 = $3;
  $3 = HEAP32[$4 + 8 >> 2];
  $5 = $3 << 23;
  $0 = HEAP32[$4 + 12 >> 2];
  $3 = $0 << 23 | $3 >>> 9;
  $1 = $3;
  $3 = HEAP32[$4 + 8 >> 2];
  $2 = HEAP32[$4 + 12 >> 2];
  $6 = $2 >>> 9 | 0;
  $2 = $5;
  $10 = $2 | $6;
  $3 = 0;
  $0 = $3;
  $3 = $1;
  $0 = $0 | $3;
  $7 = $0;
  $0 = HEAP32[$4 + 8 >> 2];
  $0 = $0 << 18;
  $5 = $0;
  $0 = HEAP32[$4 + 8 >> 2];
  $2 = $0;
  $3 = HEAP32[$4 + 12 >> 2];
  $0 = $3 >>> 14 | 0;
  $1 = $0;
  $6 = ($3 & 16383) << 18 | $2 >>> 14;
  $3 = 0;
  $11 = $6 | $3;
  $0 = $5;
  $2 = $1;
  $2 = $0 | $2;
  $5 = $2;
  $2 = HEAP32[$4 + 8 >> 2];
  $0 = $2;
  $2 = $0 << 14;
  $1 = $2;
  $2 = HEAP32[$4 + 8 >> 2];
  $3 = $2;
  $0 = HEAP32[$4 + 12 >> 2];
  $2 = $0 >>> 18 | 0;
  $6 = ($0 & 262143) << 14 | $3 >>> 18;
  $3 = $2;
  $2 = $1;
  $3 = $2 | $3;
  $2 = $11;
  $0 = 0;
  $6 = $0 | $6;
  $6 = $2 ^ $6;
  $0 = $3;
  $3 = $5;
  $0 = $0 ^ $3;
  $2 = $0;
  $0 = $7;
  $2 = $0 ^ $2;
  $5 = $2;
  $0 = $9;
  $3 = $10;
  $6 = $6 ^ $3;
  $1 = $0 + $6 | 0;
  $2 = $8;
  $3 = $5;
  $5 = $2 + $3 | 0;
  $5 = $1 >>> 0 < $6 >>> 0 ? $5 + 1 | 0 : $5;
  $12 = $5;
  $5 = HEAP32[$4 + 56 >> 2];
  $10 = $5;
  $0 = HEAP32[$4 + 60 >> 2];
  $11 = $0;
  $0 = HEAP32[$4 + 8 >> 2];
  $9 = $0;
  $5 = HEAP32[$4 + 12 >> 2];
  $8 = $5;
  $5 = HEAP32[$4 >> 2];
  $7 = $5;
  $0 = HEAP32[$4 + 4 >> 2];
  $2 = $0;
  $0 = HEAP32[$4 + 56 >> 2];
  $6 = $0;
  $5 = HEAP32[$4 + 60 >> 2];
  $0 = $5;
  $5 = $2;
  $0 = $0 ^ $5;
  $3 = $0;
  $2 = $7;
  $6 = $2 ^ $6;
  $5 = $9;
  $6 = $6 & $5;
  $0 = $8;
  $2 = $3;
  $2 = $0 & $2;
  $5 = $2;
  $2 = $11;
  $5 = $2 ^ $5;
  $0 = $10;
  $6 = $0 ^ $6;
  $3 = $1 + $6 | 0;
  $0 = $5;
  $5 = $12;
  $1 = $0 + $5 | 0;
  $0 = $3;
  $1 = $3 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
  $2 = $1;
  $1 = $15;
  $3 = $1 + $2 | 0;
  $6 = $0;
  $5 = $14;
  $0 = $6 + $5 | 0;
  $3 = $0 >>> 0 < $6 >>> 0 ? $3 + 1 | 0 : $3;
  $6 = $0;
  $5 = $3;
  $3 = $13;
  $0 = $3 + $5 | 0;
  $1 = $16;
  $2 = $1 + $6 | 0;
  $0 = $2 >>> 0 < $6 >>> 0 ? $0 + 1 | 0 : $0;
  HEAP32[$4 + 712 >> 2] = $2;
  HEAP32[$4 + 716 >> 2] = $0;
  $1 = HEAP32[$4 + 44 >> 2];
  $2 = $1;
  $1 = HEAP32[$4 + 32 >> 2];
  $0 = HEAP32[$4 + 40 >> 2];
  $11 = $1 & $0;
  $0 = HEAP32[$4 + 36 >> 2];
  $1 = $0;
  $0 = $2;
  $1 = $1 & $0;
  $9 = $1;
  $1 = HEAP32[$4 + 24 >> 2];
  $8 = $1;
  $3 = HEAP32[$4 + 28 >> 2];
  $7 = $3;
  $3 = HEAP32[$4 + 40 >> 2];
  $5 = $3;
  $1 = HEAP32[$4 + 44 >> 2];
  $0 = $1;
  $1 = HEAP32[$4 + 32 >> 2];
  $6 = $1;
  $3 = HEAP32[$4 + 36 >> 2];
  $1 = $3;
  $3 = $0;
  $1 = $1 | $3;
  $2 = $1;
  $0 = $5;
  $6 = $0 | $6;
  $3 = $8;
  $1 = $7;
  $0 = $2;
  $0 = $1 & $0;
  $2 = $0;
  $1 = $11;
  $6 = $6 & $3;
  $12 = $1 | $6;
  $0 = $9;
  $3 = $2;
  $3 = $0 | $3;
  $8 = $3;
  $3 = HEAP32[$4 + 40 >> 2];
  $0 = $3;
  $5 = $0 << 25;
  $1 = HEAP32[$4 + 44 >> 2];
  $3 = $1 << 25 | $0 >>> 7;
  $2 = $3;
  $3 = HEAP32[$4 + 40 >> 2];
  $0 = HEAP32[$4 + 44 >> 2];
  $6 = $0 >>> 7 | 0;
  $0 = $5;
  $10 = $0 | $6;
  $3 = 0;
  $1 = $3;
  $3 = $2;
  $1 = $1 | $3;
  $7 = $1;
  $1 = HEAP32[$4 + 40 >> 2];
  $1 = $1 << 4;
  $5 = $1;
  $1 = HEAP32[$4 + 40 >> 2];
  $0 = $1;
  $3 = HEAP32[$4 + 44 >> 2];
  $1 = $3 >>> 28 | 0;
  $2 = $1;
  $6 = ($3 & 268435455) << 4 | $0 >>> 28;
  $3 = 0;
  $11 = $6 | $3;
  $1 = $5;
  $0 = $2;
  $0 = $1 | $0;
  $5 = $0;
  $0 = HEAP32[$4 + 40 >> 2];
  $9 = $0 << 30;
  $3 = HEAP32[$4 + 44 >> 2];
  $0 = $3 << 30 | $0 >>> 2;
  $2 = $0;
  $0 = HEAP32[$4 + 40 >> 2];
  $1 = HEAP32[$4 + 44 >> 2];
  $6 = $1 >>> 2 | 0;
  $0 = 0;
  $3 = $0;
  $0 = $2;
  $3 = $0 | $3;
  $0 = $11;
  $1 = $9;
  $6 = $1 | $6;
  $6 = $0 ^ $6;
  $1 = $3;
  $3 = $5;
  $1 = $1 ^ $3;
  $0 = $1;
  $1 = $7;
  $0 = $1 ^ $0;
  $2 = $0;
  $1 = $12;
  $3 = $10;
  $6 = $6 ^ $3;
  $5 = $1 + $6 | 0;
  $0 = $8;
  $3 = $2;
  $2 = $0 + $3 | 0;
  HEAP32[$4 + 704 >> 2] = $5;
  $2 = $5 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2;
  HEAP32[$4 + 708 >> 2] = $2;
  $1 = HEAP32[$4 + 716 >> 2];
  $5 = $1;
  $2 = HEAP32[$4 + 712 >> 2];
  $0 = $2;
  $1 = HEAP32[$4 + 16 >> 2];
  $6 = $1;
  $3 = $0 + $1 | 0;
  $2 = HEAP32[$4 + 20 >> 2];
  $1 = $2;
  $2 = $5;
  $5 = $1 + $2 | 0;
  HEAP32[$4 + 16 >> 2] = $3;
  $5 = $3 >>> 0 < $6 >>> 0 ? $5 + 1 | 0 : $5;
  HEAP32[$4 + 20 >> 2] = $5;
  $5 = HEAP32[$4 + 712 >> 2];
  $2 = $5;
  $0 = HEAP32[$4 + 716 >> 2];
  $1 = $0;
  $0 = HEAP32[$4 + 704 >> 2];
  $6 = $0;
  $5 = HEAP32[$4 + 708 >> 2];
  $0 = $5;
  $5 = $1;
  $3 = $0 + $5 | 0;
  $1 = $2 + $6 | 0;
  $3 = $1 >>> 0 < $6 >>> 0 ? $3 + 1 | 0 : $3;
  HEAP32[$4 + 48 >> 2] = $1;
  HEAP32[$4 + 52 >> 2] = $3;
  HEAP32[$4 + 724 >> 2] = HEAP32[$4 + 724 >> 2] + 1;
  $5 = ($4 - -64 | 0) + (HEAP32[$4 + 724 >> 2] << 3) | 0;
  $3 = HEAP32[$5 >> 2];
  $13 = $3;
  $2 = HEAP32[$5 + 4 >> 2];
  $14 = $2;
  $5 = (HEAP32[$4 + 724 >> 2] << 3) + 162944 | 0;
  $2 = HEAP32[$5 >> 2];
  $15 = $2;
  $3 = HEAP32[$5 + 4 >> 2];
  $12 = $3;
  $3 = HEAP32[$4 + 56 >> 2];
  $9 = $3;
  $2 = HEAP32[$4 + 60 >> 2];
  $8 = $2;
  $2 = HEAP32[$4 + 16 >> 2];
  $1 = $2 << 23;
  $3 = HEAP32[$4 + 20 >> 2];
  $2 = $3 << 23 | $2 >>> 9;
  $0 = $2;
  $2 = HEAP32[$4 + 16 >> 2];
  $5 = HEAP32[$4 + 20 >> 2];
  $2 = 0;
  $3 = $2;
  $6 = $5 >>> 9 | 0;
  $5 = $1;
  $10 = $6 | $5;
  $2 = $0;
  $3 = $2 | $3;
  $7 = $3;
  $3 = HEAP32[$4 + 16 >> 2];
  $3 = $3 << 18;
  $0 = $3;
  $3 = HEAP32[$4 + 16 >> 2];
  $5 = $3;
  $2 = HEAP32[$4 + 20 >> 2];
  $3 = $2 >>> 14 | 0;
  $6 = ($2 & 16383) << 18 | $5 >>> 14;
  $5 = $3;
  $2 = 0;
  $11 = $2 | $6;
  $3 = $0;
  $5 = $3 | $5;
  $1 = $5;
  $5 = HEAP32[$4 + 16 >> 2];
  $3 = $5;
  $5 = $3 << 14;
  $0 = $5;
  $5 = HEAP32[$4 + 16 >> 2];
  $2 = $5;
  $3 = HEAP32[$4 + 20 >> 2];
  $5 = $3 >>> 18 | 0;
  $6 = ($3 & 262143) << 14 | $2 >>> 18;
  $2 = $5;
  $5 = $0;
  $2 = $2 | $5;
  $0 = $2;
  $3 = 0;
  $6 = $6 | $3;
  $5 = $11;
  $6 = $6 ^ $5;
  $2 = $1;
  $3 = $0;
  $3 = $2 ^ $3;
  $5 = $3;
  $3 = $7;
  $5 = $3 ^ $5;
  $2 = $10;
  $6 = $2 ^ $6;
  $3 = $9;
  $0 = $6 + $3 | 0;
  $2 = $5;
  $5 = $8;
  $1 = $2 + $5 | 0;
  $1 = $0 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
  $10 = $1;
  $1 = HEAP32[$4 >> 2];
  $11 = $1;
  $3 = HEAP32[$4 + 4 >> 2];
  $9 = $3;
  $3 = HEAP32[$4 + 16 >> 2];
  $8 = $3;
  $1 = HEAP32[$4 + 20 >> 2];
  $7 = $1;
  $1 = HEAP32[$4 + 8 >> 2];
  $5 = $1;
  $3 = HEAP32[$4 + 12 >> 2];
  $2 = $3;
  $3 = HEAP32[$4 >> 2];
  $6 = $3;
  $1 = HEAP32[$4 + 4 >> 2];
  $3 = $1;
  $1 = $2;
  $3 = $1 ^ $3;
  $2 = $3;
  $1 = $8;
  $6 = $6 ^ $5;
  $6 = $1 & $6;
  $3 = $7;
  $5 = $2;
  $5 = $3 & $5;
  $1 = $5;
  $5 = $9;
  $1 = $1 ^ $5;
  $5 = $1;
  $3 = $11;
  $6 = $6 ^ $3;
  $2 = $6 + $0 | 0;
  $1 = $10;
  $3 = $5;
  $0 = $1 + $3 | 0;
  $3 = $2;
  $0 = $2 >>> 0 < $6 >>> 0 ? $0 + 1 | 0 : $0;
  $5 = $0;
  $0 = $12;
  $2 = $0 + $5 | 0;
  $1 = $15;
  $6 = $3;
  $3 = $1 + $6 | 0;
  $5 = $3;
  $2 = $3 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2;
  $1 = $2;
  $2 = $14;
  $3 = $1 + $2 | 0;
  $0 = $13;
  $6 = $5;
  $5 = $0 + $6 | 0;
  HEAP32[$4 + 712 >> 2] = $5;
  $3 = $5 >>> 0 < $6 >>> 0 ? $3 + 1 | 0 : $3;
  HEAP32[$4 + 716 >> 2] = $3;
  $0 = HEAP32[$4 + 52 >> 2];
  $1 = $0;
  $3 = HEAP32[$4 + 48 >> 2];
  $0 = HEAP32[$4 + 40 >> 2];
  $9 = $3 & $0;
  $3 = HEAP32[$4 + 44 >> 2];
  $0 = $3;
  $3 = $1;
  $0 = $0 & $3;
  $8 = $0;
  $0 = HEAP32[$4 + 32 >> 2];
  $7 = $0;
  $2 = HEAP32[$4 + 36 >> 2];
  $5 = $2;
  $2 = HEAP32[$4 + 48 >> 2];
  $3 = $2;
  $0 = HEAP32[$4 + 52 >> 2];
  $1 = $0;
  $0 = HEAP32[$4 + 40 >> 2];
  $6 = $0;
  $2 = HEAP32[$4 + 44 >> 2];
  $0 = $2;
  $2 = $1;
  $0 = $0 | $2;
  $1 = $0;
  $2 = $7;
  $6 = $6 | $3;
  $0 = $5;
  $3 = $1;
  $3 = $0 & $3;
  $0 = $9;
  $6 = $2 & $6;
  $12 = $0 | $6;
  $2 = $3;
  $3 = $8;
  $2 = $2 | $3;
  $8 = $2;
  $2 = HEAP32[$4 + 48 >> 2];
  $3 = $2;
  $5 = $3 << 25;
  $0 = HEAP32[$4 + 52 >> 2];
  $2 = $0 << 25 | $3 >>> 7;
  $1 = $2;
  $2 = HEAP32[$4 + 48 >> 2];
  $3 = HEAP32[$4 + 52 >> 2];
  $6 = $3 >>> 7 | 0;
  $3 = $5;
  $10 = $6 | $3;
  $2 = 0;
  $0 = $2;
  $2 = $1;
  $0 = $0 | $2;
  $7 = $0;
  $0 = HEAP32[$4 + 48 >> 2];
  $0 = $0 << 4;
  $1 = $0;
  $0 = HEAP32[$4 + 48 >> 2];
  $3 = $0;
  $2 = HEAP32[$4 + 52 >> 2];
  $0 = $2 >>> 28 | 0;
  $6 = ($2 & 268435455) << 4 | $3 >>> 28;
  $3 = $0;
  $2 = 0;
  $11 = $2 | $6;
  $0 = $1;
  $3 = $0 | $3;
  $5 = $3;
  $3 = HEAP32[$4 + 48 >> 2];
  $0 = $3;
  $9 = $0 << 30;
  $2 = HEAP32[$4 + 52 >> 2];
  $3 = $2 << 30 | $0 >>> 2;
  $1 = $3;
  $3 = HEAP32[$4 + 48 >> 2];
  $0 = HEAP32[$4 + 52 >> 2];
  $6 = $0 >>> 2 | 0;
  $3 = 0;
  $2 = $3;
  $3 = $1;
  $2 = $2 | $3;
  $0 = $9;
  $6 = $0 | $6;
  $3 = $11;
  $6 = $6 ^ $3;
  $0 = $2;
  $2 = $5;
  $0 = $0 ^ $2;
  $3 = $0;
  $0 = $7;
  $3 = $0 ^ $3;
  $0 = $12;
  $2 = $10;
  $6 = $2 ^ $6;
  $1 = $0 + $6 | 0;
  $2 = $3;
  $3 = $8;
  $5 = $2 + $3 | 0;
  HEAP32[$4 + 704 >> 2] = $1;
  $5 = $1 >>> 0 < $6 >>> 0 ? $5 + 1 | 0 : $5;
  HEAP32[$4 + 708 >> 2] = $5;
  $0 = HEAP32[$4 + 716 >> 2];
  $1 = $0;
  $0 = HEAP32[$4 + 24 >> 2];
  $6 = $0;
  $5 = HEAP32[$4 + 712 >> 2];
  $3 = $5;
  $2 = $0 + $3 | 0;
  $5 = HEAP32[$4 + 28 >> 2];
  $0 = $5;
  $5 = $1;
  $1 = $0 + $5 | 0;
  HEAP32[$4 + 24 >> 2] = $2;
  $1 = $2 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
  HEAP32[$4 + 28 >> 2] = $1;
  $1 = HEAP32[$4 + 712 >> 2];
  $5 = $1;
  $3 = HEAP32[$4 + 716 >> 2];
  $7 = $3;
  $1 = HEAP32[$4 + 708 >> 2];
  $2 = $1;
  $3 = HEAP32[$4 + 704 >> 2];
  $6 = $3;
  $0 = $3 + $5 | 0;
  $1 = $7;
  $3 = $2;
  $2 = $1 + $3 | 0;
  HEAP32[$4 + 56 >> 2] = $0;
  $2 = $0 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2;
  HEAP32[$4 + 60 >> 2] = $2;
  HEAP32[$4 + 724 >> 2] = HEAP32[$4 + 724 >> 2] + 1;
  if (HEAP32[$4 + 724 >> 2] < 80) {
   continue;
  }
  break;
 }
 $7 = HEAP32[$4 + 732 >> 2];
 $2 = HEAP32[$4 + 56 >> 2];
 $3 = $2;
 $5 = HEAP32[$4 + 60 >> 2];
 $0 = $5;
 $1 = $7;
 $5 = HEAP32[$1 + 16 >> 2];
 $6 = $5;
 $2 = HEAP32[$1 + 20 >> 2];
 $5 = $2;
 $2 = $0;
 $0 = $2 + $5 | 0;
 $1 = $3;
 $3 = $1 + $6 | 0;
 $1 = $7;
 HEAP32[$1 + 16 >> 2] = $3;
 $0 = $3 >>> 0 < $6 >>> 0 ? $0 + 1 | 0 : $0;
 HEAP32[$1 + 20 >> 2] = $0;
 $7 = HEAP32[$4 + 732 >> 2];
 $0 = HEAP32[$4 + 48 >> 2];
 $5 = $0;
 $1 = HEAP32[$4 + 52 >> 2];
 $3 = $1;
 $2 = $7;
 $1 = HEAP32[$2 + 24 >> 2];
 $6 = $1;
 $0 = HEAP32[$2 + 28 >> 2];
 $1 = $0;
 $0 = $3;
 $3 = $1 + $0 | 0;
 $2 = $5;
 $5 = $2 + $6 | 0;
 $2 = $7;
 HEAP32[$2 + 24 >> 2] = $5;
 $3 = $5 >>> 0 < $6 >>> 0 ? $3 + 1 | 0 : $3;
 HEAP32[$2 + 28 >> 2] = $3;
 $8 = HEAP32[$4 + 732 >> 2];
 $3 = HEAP32[$4 + 40 >> 2];
 $7 = $3;
 $2 = HEAP32[$4 + 44 >> 2];
 $1 = $2;
 $0 = $8;
 $2 = HEAP32[$0 + 32 >> 2];
 $6 = $2;
 $3 = HEAP32[$0 + 36 >> 2];
 $2 = $3;
 $3 = $1;
 $5 = $2 + $3 | 0;
 $0 = $7;
 $1 = $0 + $6 | 0;
 $5 = $1 >>> 0 < $6 >>> 0 ? $5 + 1 | 0 : $5;
 $0 = $8;
 HEAP32[$0 + 32 >> 2] = $1;
 HEAP32[$0 + 36 >> 2] = $5;
 $7 = HEAP32[$4 + 732 >> 2];
 $5 = HEAP32[$4 + 32 >> 2];
 $2 = $5;
 $0 = HEAP32[$4 + 36 >> 2];
 $1 = $0;
 $3 = $7;
 $0 = HEAP32[$3 + 40 >> 2];
 $6 = $0;
 $5 = HEAP32[$3 + 44 >> 2];
 $0 = $5;
 $5 = $1;
 $1 = $0 + $5 | 0;
 $3 = $2;
 $2 = $6 + $3 | 0;
 $1 = $2 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
 $3 = $7;
 HEAP32[$3 + 40 >> 2] = $2;
 HEAP32[$3 + 44 >> 2] = $1;
 $8 = HEAP32[$4 + 732 >> 2];
 $1 = HEAP32[$4 + 24 >> 2];
 $7 = $1;
 $3 = HEAP32[$4 + 28 >> 2];
 $0 = $3;
 $5 = $8;
 $3 = HEAP32[$5 + 48 >> 2];
 $6 = $3;
 $1 = HEAP32[$5 + 52 >> 2];
 $3 = $1;
 $1 = $0;
 $2 = $1 + $3 | 0;
 $5 = $7;
 $0 = $6 + $5 | 0;
 $2 = $0 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2;
 $5 = $8;
 HEAP32[$5 + 48 >> 2] = $0;
 HEAP32[$5 + 52 >> 2] = $2;
 $7 = HEAP32[$4 + 732 >> 2];
 $2 = HEAP32[$4 + 16 >> 2];
 $3 = $2;
 $5 = HEAP32[$4 + 20 >> 2];
 $0 = $5;
 $1 = $7;
 $5 = HEAP32[$1 + 56 >> 2];
 $6 = $5;
 $2 = HEAP32[$1 + 60 >> 2];
 $5 = $2;
 $2 = $0;
 $0 = $2 + $5 | 0;
 $1 = $3;
 $3 = $1 + $6 | 0;
 $1 = $7;
 HEAP32[$1 + 56 >> 2] = $3;
 $0 = $3 >>> 0 < $6 >>> 0 ? $0 + 1 | 0 : $0;
 HEAP32[$1 + 60 >> 2] = $0;
 $7 = HEAP32[$4 + 732 >> 2];
 $0 = HEAP32[$4 + 8 >> 2];
 $5 = $0;
 $1 = HEAP32[$4 + 12 >> 2];
 $3 = $1;
 $2 = $7;
 $1 = HEAP32[$2 + 64 >> 2];
 $6 = $1;
 $0 = HEAP32[$2 + 68 >> 2];
 $1 = $0;
 $0 = $3;
 $3 = $1 + $0 | 0;
 $2 = $5;
 $5 = $2 + $6 | 0;
 $2 = $7;
 HEAP32[$2 + 64 >> 2] = $5;
 $3 = $5 >>> 0 < $6 >>> 0 ? $3 + 1 | 0 : $3;
 HEAP32[$2 + 68 >> 2] = $3;
 $8 = HEAP32[$4 + 732 >> 2];
 $3 = HEAP32[$4 >> 2];
 $7 = $3;
 $2 = HEAP32[$4 + 4 >> 2];
 $1 = $2;
 $0 = $8;
 $2 = HEAP32[$0 + 72 >> 2];
 $6 = $2;
 $3 = HEAP32[$0 + 76 >> 2];
 $2 = $3;
 $3 = $1;
 $5 = $2 + $3 | 0;
 $0 = $7;
 $1 = $0 + $6 | 0;
 $5 = $1 >>> 0 < $6 >>> 0 ? $5 + 1 | 0 : $5;
 $0 = $8;
 HEAP32[$0 + 72 >> 2] = $1;
 HEAP32[$0 + 76 >> 2] = $5;
 __stack_pointer = $4 + 736 | 0;
}

function jsiIdle() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $0 = __stack_pointer - 320 | 0;
 __stack_pointer = $0;
 if (HEAPU8[347086] < 255) {
  HEAP8[347086] = HEAPU8[347086] + 1;
 }
 HEAP8[$0 + 319 | 0] = 0;
 HEAP32[$0 + 308 >> 2] = jshGetEventsUsed();
 while (1) {
  $5 = HEAP32[$0 + 308 >> 2];
  HEAP32[$0 + 308 >> 2] = $5 - 1;
  $1 = 0;
  if (($5 | 0) > 0) {
   $1 = jshPopIOEvent($0 + 312 | 0);
  }
  if ($1 & 1) {
   jsiSetBusy(1, 1);
   HEAP8[$0 + 319 | 0] = 1;
   HEAP8[$0 + 307 | 0] = HEAPU8[$0 + 312 | 0] & 31;
   HEAP8[347086] = 0;
   label$5: {
    if (HEAPU8[$0 + 307 | 0] == HEAPU8[178544]) {
     jsiHandleIOEventForConsole($0 + 312 | 0);
     break label$5;
    }
    label$7: {
     if (!(HEAPU8[$0 + 307 | 0] < 17 | HEAPU8[$0 + 307 | 0] > 22)) {
      HEAP32[$0 + 300 >> 2] = jsvSkipNameAndUnLock(jsiGetClassNameFromDevice(HEAPU8[$0 + 307 | 0]));
      if (jsvIsObject(HEAP32[$0 + 300 >> 2]) & 1) {
       $5 = jsiHandleIOEventForSerial(HEAP32[$0 + 300 >> 2], $0 + 312 | 0);
       HEAP32[$0 + 308 >> 2] = HEAP32[$0 + 308 >> 2] - $5;
      }
      jsvUnLock(HEAP32[$0 + 300 >> 2]);
      break label$7;
     }
     label$10: {
      if (!(HEAPU8[$0 + 307 | 0] < 23 | HEAPU8[$0 + 307 | 0] > 23)) {
       HEAP32[$0 + 296 >> 2] = jsvSkipNameAndUnLock(jsiGetClassNameFromDevice(HEAPU8[$0 + 312 | 0] - 1 & 31));
       if (jsvIsObject(HEAP32[$0 + 296 >> 2]) & 1) {
        if (HEAPU8[$0 + 312 | 0] & 32) {
         jsiExecuteEventCallbackName(HEAP32[$0 + 296 >> 2], 118994, 0, 0);
        }
        if (HEAPU8[$0 + 312 | 0] & 64) {
         jsiExecuteEventCallbackName(HEAP32[$0 + 296 >> 2], 111570, 0, 0);
        }
       }
       jsvUnLock(HEAP32[$0 + 296 >> 2]);
       break label$10;
      }
      label$15: {
       if (HEAPU8[$0 + 307 | 0] == 24) {
        jsbangle_exec_pending($0 + 312 | 0);
        break label$15;
       }
       if (!(!HEAPU8[$0 + 307 | 0] | HEAPU8[$0 + 307 | 0] > 16)) {
        HEAP32[$0 + 292 >> 2] = jsvLock(HEAPU16[173533]);
        jsvObjectIteratorNew($0 + 288 | 0, HEAP32[$0 + 292 >> 2]);
        while (1) {
         if (jsvObjectIteratorHasValue_3($0 + 288 | 0) & 1) {
          HEAP8[$0 + 287 | 0] = 0;
          HEAP32[$0 + 280 >> 2] = jsvObjectIteratorGetValue_3($0 + 288 | 0);
          HEAP8[$0 + 279 | 0] = jshGetPinFromVarAndUnLock(jsvObjectGetChildIfExists(HEAP32[$0 + 280 >> 2], 117541));
          if (jshIsEventForPin($0 + 312 | 0, HEAPU8[$0 + 279 | 0]) & 1) {
           $4 = jshGetSystemTime();
           HEAP32[$0 + 264 >> 2] = $4;
           $2 = i64toi32_i32$HIGH_BITS;
           HEAP32[$0 + 268 >> 2] = $2;
           $2 = HEAP32[$0 + 264 >> 2];
           if ($2 >>> 0 < (HEAPU8[$0 + 313 | 0] | HEAPU8[$0 + 314 | 0] << 8 | (HEAPU8[$0 + 315 | 0] << 16 | HEAPU8[$0 + 316 | 0] << 24)) >>> 0) {
            $4 = HEAP32[$0 + 264 >> 2];
            $5 = $4;
            $2 = HEAP32[$0 + 268 >> 2];
            $1 = 1;
            $1 = $2 - $1 | 0;
            $3 = $5;
            HEAP32[$0 + 264 >> 2] = $3;
            HEAP32[$0 + 268 >> 2] = $1;
           }
           $1 = HEAPU8[$0 + 313 | 0] | HEAPU8[$0 + 314 | 0] << 8 | (HEAPU8[$0 + 315 | 0] << 16 | HEAPU8[$0 + 316 | 0] << 24);
           $2 = $1;
           $5 = HEAP32[$0 + 264 >> 2];
           $1 = HEAP32[$0 + 268 >> 2];
           $5 = $1;
           $6 = $11;
           $1 = $2;
           $1 = $6 | $1;
           HEAP32[$0 + 256 >> 2] = $1;
           $2 = $5;
           HEAP32[$0 + 260 >> 2] = $2;
           HEAP8[$0 + 255 | 0] = (HEAPU8[$0 + 312 | 0] & 32) != 0;
           HEAP8[$0 + 254 | 0] = 0;
           HEAP32[$0 + 248 >> 2] = jsvObjectGetIntegerChild(HEAP32[$0 + 280 >> 2], 120483);
           label$22: {
            if (HEAP32[$0 + 248 >> 2] <= 0) {
             HEAP8[$0 + 254 | 0] = 1;
             break label$22;
            }
            HEAP8[$0 + 247 | 0] = jsvObjectGetBoolChild(HEAP32[$0 + 280 >> 2], 119652) & 1;
            HEAP32[$0 + 240 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 280 >> 2], 112572);
            label$24: {
             if (HEAP32[$0 + 240 >> 2]) {
              $2 = HEAP32[86784];
              $5 = $2;
              $1 = HEAP32[86785];
              $3 = $1;
              $1 = jsvGetLongIntegerAndUnLock(jsvObjectGetChildIfExists(HEAP32[$0 + 240 >> 2], 120023));
              $6 = $1;
              $2 = i64toi32_i32$HIGH_BITS;
              $1 = $2;
              $2 = $3;
              $3 = $2 + $1 | 0;
              $4 = $5 + $6 | 0;
              $3 = $4 >>> 0 < $6 >>> 0 ? $3 + 1 | 0 : $3;
              HEAP32[$0 + 232 >> 2] = $4;
              HEAP32[$0 + 236 >> 2] = $3;
              $3 = HEAP32[$0 + 248 >> 2];
              $5 = $3 >> 31;
              $7 = $3;
              $8 = $5;
              $5 = HEAP32[$0 + 256 >> 2];
              $2 = $5;
              $3 = HEAP32[$0 + 260 >> 2];
              $4 = $3;
              $5 = HEAP32[86785];
              $9 = $5;
              $3 = HEAP32[86784];
              $6 = $3;
              $1 = $2 - $3 | 0;
              $10 = $1;
              $5 = $4;
              $3 = $9;
              $4 = $3 + ($2 >>> 0 < $6 >>> 0) | 0;
              $4 = $5 - $4 | 0;
              $2 = $4;
              $4 = $8;
              $1 = $4 + $2 | 0;
              $5 = $7;
              $6 = $10;
              $3 = $5 + $6 | 0;
              $1 = $3 >>> 0 < $6 >>> 0 ? $1 + 1 | 0 : $1;
              jsvUnLock(jsvObjectSetChild(HEAP32[$0 + 240 >> 2], 120023, jsvNewFromLongInteger($3, $1)));
              jsvObjectSetChildAndUnLock(HEAP32[$0 + 240 >> 2], 119652, jsvNewFromBool(HEAP8[$0 + 255 | 0] & 1));
              $5 = HEAP32[$0 + 260 >> 2];
              $2 = $5;
              $1 = HEAP32[$0 + 256 >> 2];
              $4 = $1;
              $5 = HEAP32[$0 + 232 >> 2];
              $6 = $5;
              $1 = HEAP32[$0 + 236 >> 2];
              $5 = $1;
              $1 = $2;
              if (!($4 >>> 0 <= $6 >>> 0 & ($5 | 0) >= ($1 | 0) | ($1 | 0) < ($5 | 0) | (HEAP8[$0 + 255 | 0] & 1) == (HEAP8[$0 + 247 | 0] & 1))) {
               HEAP8[$0 + 254 | 0] = 1;
               $4 = HEAP32[$0 + 232 >> 2];
               $6 = $4;
               $1 = HEAP32[$0 + 236 >> 2];
               $3 = $1;
               $1 = HEAP32[$0 + 248 >> 2];
               $4 = $1 >> 31;
               $7 = $4;
               $5 = $1;
               $2 = $6 - $1 | 0;
               $4 = $3;
               $1 = $7;
               $3 = $1 + ($5 >>> 0 > $6 >>> 0) | 0;
               $3 = $4 - $3 | 0;
               HEAP32[$0 + 256 >> 2] = $2;
               HEAP32[$0 + 260 >> 2] = $3;
               jsvObjectSetChildAndUnLock(HEAP32[$0 + 280 >> 2], 119652, jsvNewFromBool(HEAP8[$0 + 255 | 0] & 1));
               HEAP32[$0 + 228 >> 2] = jsvNewArray($0 + 240 | 0, 1);
               jswrap_interface_clearTimeout(HEAP32[$0 + 228 >> 2]);
               jsvUnLock(HEAP32[$0 + 228 >> 2]);
               jsvObjectRemoveChild(HEAP32[$0 + 280 >> 2], 112572);
              }
              break label$24;
             }
             if ((HEAP8[$0 + 255 | 0] & 1) != (HEAP8[$0 + 247 | 0] & 1)) {
              HEAP32[$0 + 240 >> 2] = jsvNewObject();
              if (HEAP32[$0 + 240 >> 2]) {
               jsvObjectSetChild(HEAP32[$0 + 240 >> 2], 118675, HEAP32[$0 + 280 >> 2]);
               $3 = HEAP32[$0 + 248 >> 2];
               $6 = $3 >> 31;
               $7 = $3;
               $8 = $6;
               $6 = HEAP32[$0 + 256 >> 2];
               $4 = $6;
               $3 = HEAP32[$0 + 260 >> 2];
               $2 = $3;
               $6 = HEAP32[86785];
               $9 = $6;
               $3 = HEAP32[86784];
               $5 = $3;
               $1 = $4 - $3 | 0;
               $10 = $1;
               $6 = $2;
               $3 = $9;
               $2 = $3 + ($5 >>> 0 > $4 >>> 0) | 0;
               $2 = $6 - $2 | 0;
               $4 = $2;
               $2 = $8;
               $1 = $4 + $2 | 0;
               $5 = $10;
               $6 = $7;
               $3 = $5 + $6 | 0;
               $1 = $5 >>> 0 > $3 >>> 0 ? $1 + 1 | 0 : $1;
               jsvObjectSetChildAndUnLock(HEAP32[$0 + 240 >> 2], 120023, jsvNewFromLongInteger($3, $1));
               jsvObjectSetChildAndUnLock(HEAP32[$0 + 240 >> 2], 118173, jsvObjectGetChildIfExists(HEAP32[$0 + 280 >> 2], 118173));
               jsvObjectSetChildAndUnLock(HEAP32[$0 + 240 >> 2], 120028, jsvObjectGetChildIfExists(HEAP32[$0 + 280 >> 2], 120028));
               jsvObjectSetChildAndUnLock(HEAP32[$0 + 240 >> 2], 117541, jsvNewFromPin(HEAPU8[$0 + 279 | 0]));
               jsvObjectSetChildAndUnLock(HEAP32[$0 + 240 >> 2], 119652, jsvNewFromBool(HEAP8[$0 + 255 | 0] & 1));
               jsiTimerAdd(HEAP32[$0 + 240 >> 2]);
               jsvObjectSetChild(HEAP32[$0 + 280 >> 2], 112572, HEAP32[$0 + 240 >> 2]);
              }
             }
            }
            jsvUnLock(HEAP32[$0 + 240 >> 2]);
           }
           if (HEAP8[$0 + 254 | 0] & 1) {
            $1 = HEAP32[$0 + 256 >> 2];
            $6 = HEAP32[$0 + 260 >> 2];
            HEAP32[$0 + 224 >> 2] = jsvNewFromFloat(jshGetMillisecondsFromTime($1, $6) / 1e3);
            if (jsiShouldExecuteWatch(HEAP32[$0 + 280 >> 2], HEAP8[$0 + 255 | 0] & 1) & 1) {
             HEAP32[$0 + 220 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 280 >> 2], 118173);
             HEAP8[$0 + 219 | 0] = jsvObjectGetBoolChild(HEAP32[$0 + 280 >> 2], 115962) & 1;
             HEAP32[$0 + 212 >> 2] = jsvNewObject();
             if (HEAP32[$0 + 212 >> 2]) {
              jsvObjectSetChildAndUnLock(HEAP32[$0 + 212 >> 2], 119652, jsvNewFromBool(HEAP8[$0 + 255 | 0] & 1));
              jsvObjectSetChildAndUnLock(HEAP32[$0 + 212 >> 2], 120028, jsvObjectGetChildIfExists(HEAP32[$0 + 280 >> 2], 120028));
              jsvObjectSetChild(HEAP32[$0 + 212 >> 2], 120023, HEAP32[$0 + 224 >> 2]);
              jsvObjectSetChildAndUnLock(HEAP32[$0 + 212 >> 2], 117541, jsvNewFromPin(HEAPU8[$0 + 279 | 0]));
              HEAP8[$0 + 211 | 0] = jshGetEventDataPin(HEAPU8[$0 + 307 | 0]);
              if (jshIsPinValid(HEAPU8[$0 + 211 | 0]) & 1) {
               jsvObjectSetChildAndUnLock(HEAP32[$0 + 212 >> 2], 122985, jsvNewFromBool((HEAPU8[$0 + 312 | 0] & 64) != 0));
              }
             }
             if (!(jsiExecuteEventCallback(0, HEAP32[$0 + 220 >> 2], 1, $0 + 212 | 0) & 1 | !(HEAP8[$0 + 219 | 0] & 1))) {
              jsError(126905, 0);
              HEAP8[346998] = HEAPU8[346998] | 4;
              HEAP8[$0 + 219 | 0] = 0;
             }
             jsvUnLock(HEAP32[$0 + 212 >> 2]);
             if (!(HEAP8[$0 + 219 | 0] & 1)) {
              jsvObjectIteratorRemoveAndGotoNext($0 + 288 | 0, HEAP32[$0 + 292 >> 2]);
              HEAP8[$0 + 287 | 0] = 1;
              if (!(jsiIsWatchingPin(HEAPU8[$0 + 279 | 0]) & 1)) {
               jshPinWatch(HEAPU8[$0 + 279 | 0], 0, 0);
              }
             }
             jsvUnLock(HEAP32[$0 + 220 >> 2]);
            }
            jsvObjectSetChildAndUnLock(HEAP32[$0 + 280 >> 2], 120028, HEAP32[$0 + 224 >> 2]);
           }
          }
          jsvUnLock(HEAP32[$0 + 280 >> 2]);
          if (!(HEAP8[$0 + 287 | 0] & 1)) {
           jsvObjectIteratorNext($0 + 288 | 0);
          }
          continue;
         }
         break;
        }
        jsvObjectIteratorFree_3($0 + 288 | 0);
        jsvUnLock(HEAP32[$0 + 292 >> 2]);
       }
      }
     }
    }
   }
   continue;
  }
  break;
 }
 if ((jshGetEventsUsed() | 0) < 95) {
  jshSetFlowControlAllReady();
 }
 HEAP32[$0 + 200 >> 2] = -1;
 HEAP32[$0 + 204 >> 2] = 2147483647;
 $6 = jshGetSystemTime();
 HEAP32[$0 + 192 >> 2] = $6;
 $1 = i64toi32_i32$HIGH_BITS;
 HEAP32[$0 + 196 >> 2] = $1;
 $1 = HEAP32[$0 + 192 >> 2];
 $2 = $1;
 $6 = HEAP32[$0 + 196 >> 2];
 $3 = $6;
 $1 = HEAP32[86785];
 $7 = $1;
 $6 = HEAP32[86784];
 $5 = $6;
 $4 = $2 - $5 | 0;
 HEAP32[$0 + 184 >> 2] = $4;
 $1 = $3;
 $6 = $7;
 $3 = $6 + ($2 >>> 0 < $5 >>> 0) | 0;
 $3 = $1 - $3 | 0;
 HEAP32[$0 + 188 >> 2] = $3;
 $2 = HEAP32[$0 + 196 >> 2];
 $3 = HEAP32[$0 + 192 >> 2];
 HEAP32[86784] = $3;
 HEAP32[86785] = $2;
 HEAP32[$0 + 180 >> 2] = jsvLock(HEAPU16[173532]);
 jsvObjectIteratorNew($0 + 176 | 0, HEAP32[$0 + 180 >> 2]);
 while (1) {
  if (jsvObjectIteratorHasValue_3($0 + 176 | 0) & 1) {
   HEAP32[$0 + 172 >> 2] = jsvObjectIteratorGetValue_3($0 + 176 | 0);
   $2 = jsvGetLongIntegerAndUnLock(jsvObjectGetChildIfExists(HEAP32[$0 + 172 >> 2], 120023));
   HEAP32[$0 + 160 >> 2] = $2;
   $3 = i64toi32_i32$HIGH_BITS;
   HEAP32[$0 + 164 >> 2] = $3;
   $3 = HEAP32[$0 + 160 >> 2];
   $1 = $3;
   $2 = HEAP32[$0 + 164 >> 2];
   $4 = $2;
   $3 = HEAP32[$0 + 188 >> 2];
   $7 = $3;
   $2 = HEAP32[$0 + 184 >> 2];
   $5 = $2;
   $6 = $1 - $2 | 0;
   HEAP32[$0 + 152 >> 2] = $6;
   $3 = $4;
   $2 = $7;
   $4 = $2 + ($1 >>> 0 < $5 >>> 0) | 0;
   $4 = $3 - $4 | 0;
   HEAP32[$0 + 156 >> 2] = $4;
   $4 = HEAP32[$0 + 152 >> 2];
   $1 = HEAP32[$0 + 156 >> 2];
   jsvObjectSetChildAndUnLock(HEAP32[$0 + 172 >> 2], 120023, jsvNewFromLongInteger($4, $1));
   jsvUnLock(HEAP32[$0 + 172 >> 2]);
   jsvObjectIteratorNext($0 + 176 | 0);
   continue;
  }
  break;
 }
 jsvObjectIteratorFree_3($0 + 176 | 0);
 while (1) {
  HEAP16[173534] = HEAPU16[173534] & -5;
  jsvObjectIteratorNew($0 + 176 | 0, HEAP32[$0 + 180 >> 2]);
  while (1) {
   $5 = 0;
   if (jsvObjectIteratorHasValue_3($0 + 176 | 0) & 1) {
    $5 = (HEAPU16[173534] & 4) != 0 ^ -1;
   }
   if ($5 & 1) {
    HEAP8[$0 + 151 | 0] = 0;
    HEAP32[$0 + 144 >> 2] = jsvObjectIteratorGetValue_3($0 + 176 | 0);
    $1 = jsvGetLongIntegerAndUnLock(jsvObjectGetChildIfExists(HEAP32[$0 + 144 >> 2], 120023));
    HEAP32[$0 + 136 >> 2] = $1;
    $4 = i64toi32_i32$HIGH_BITS;
    HEAP32[$0 + 140 >> 2] = $4;
    $4 = HEAP32[$0 + 136 >> 2];
    $3 = $4;
    $1 = HEAP32[$0 + 140 >> 2];
    if (!$3 & ($1 | 0) <= 0 | ($1 | 0) < 0) {
     jsiSetBusy(1, 1);
     HEAP8[$0 + 319 | 0] = 1;
     HEAP32[$0 + 132 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 144 >> 2], 118173);
     HEAP32[$0 + 128 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 144 >> 2], 118675);
     HEAP8[$0 + 127 | 0] = 1;
     HEAP32[$0 + 120 >> 2] = 0;
     if (HEAP32[$0 + 128 >> 2]) {
      HEAP8[$0 + 119 | 0] = jsvObjectGetBoolChild(HEAP32[$0 + 128 >> 2], 119652) & 1;
      HEAP8[$0 + 118 | 0] = jsvObjectGetBoolChild(HEAP32[$0 + 144 >> 2], 119652) & 1;
      jsvObjectSetChildAndUnLock(HEAP32[$0 + 128 >> 2], 119652, jsvNewFromBool(HEAP8[$0 + 118 | 0] & 1));
      HEAP8[$0 + 127 | 0] = 0;
      if ((HEAP8[$0 + 119 | 0] & 1) != (HEAP8[$0 + 118 | 0] & 1)) {
       HEAP32[$0 + 112 >> 2] = jsvObjectGetIntegerChild(HEAP32[$0 + 128 >> 2], 120483);
       $3 = HEAP32[86784];
       $5 = $3;
       $1 = HEAP32[86785];
       $6 = $1;
       $3 = HEAP32[$0 + 140 >> 2];
       $7 = $3;
       $1 = HEAP32[$0 + 136 >> 2];
       $4 = $1;
       $2 = $1 + $5 | 0;
       $3 = $6;
       $1 = $7;
       $6 = $3 + $1 | 0;
       $6 = $2 >>> 0 < $4 >>> 0 ? $6 + 1 | 0 : $6;
       $3 = $6;
       $6 = HEAP32[$0 + 112 >> 2];
       $5 = $6 >> 31;
       $7 = $5;
       $4 = $6;
       $1 = $2 - $4 | 0;
       $5 = $3;
       $6 = $7;
       $2 = $6 + ($4 >>> 0 > $2 >>> 0) | 0;
       $2 = $5 - $2 | 0;
       HEAP32[$0 + 108 >> 2] = jsvNewFromFloat(jshGetMillisecondsFromTime($1, $2) / 1e3);
       if (jsiShouldExecuteWatch(HEAP32[$0 + 128 >> 2], HEAP8[$0 + 118 | 0] & 1) & 1) {
        HEAP32[$0 + 120 >> 2] = jsvNewObject();
        if (HEAP32[$0 + 120 >> 2]) {
         HEAP8[$0 + 127 | 0] = 1;
         jsvObjectSetChildAndUnLock(HEAP32[$0 + 120 >> 2], 119652, jsvNewFromBool(HEAP8[$0 + 118 | 0] & 1));
         jsvObjectSetChildAndUnLock(HEAP32[$0 + 120 >> 2], 120028, jsvObjectGetChildIfExists(HEAP32[$0 + 128 >> 2], 120028));
         jsvObjectSetChild(HEAP32[$0 + 120 >> 2], 120023, HEAP32[$0 + 108 >> 2]);
         jsvObjectSetChildAndUnLock(HEAP32[$0 + 120 >> 2], 117541, jsvObjectGetChildIfExists(HEAP32[$0 + 128 >> 2], 117541));
        }
       }
       jsvObjectSetChildAndUnLock(HEAP32[$0 + 128 >> 2], 120028, HEAP32[$0 + 108 >> 2]);
      }
     }
     HEAP8[$0 + 107 | 0] = 0;
     if (HEAP8[$0 + 127 | 0] & 1) {
      label$50: {
       if (HEAP32[$0 + 120 >> 2]) {
        HEAP8[$0 + 106 | 0] = jsiExecuteEventCallback(0, HEAP32[$0 + 132 >> 2], 1, $0 + 120 | 0) & 1;
        break label$50;
       }
       HEAP32[$0 + 100 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 144 >> 2], 115433);
       HEAP8[$0 + 106 | 0] = jsiExecuteEventCallbackArgsArray(0, HEAP32[$0 + 132 >> 2], HEAP32[$0 + 100 >> 2]) & 1;
       jsvUnLock(HEAP32[$0 + 100 >> 2]);
      }
      if (!(HEAP8[$0 + 106 | 0] & 1)) {
       HEAP32[$0 + 96 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 144 >> 2], 118059);
       if (HEAP32[$0 + 96 >> 2]) {
        jsvUnLock(HEAP32[$0 + 96 >> 2]);
        jsError(126857, 0);
        HEAP8[346998] = HEAPU8[346998] | 4;
        HEAP8[$0 + 107 | 0] = 1;
       }
      }
     }
     jsvUnLock(HEAP32[$0 + 120 >> 2]);
     if (HEAP32[$0 + 128 >> 2]) {
      jsvObjectRemoveChild(HEAP32[$0 + 128 >> 2], 112572);
      if (HEAP8[$0 + 127 | 0] & 1) {
       HEAP8[$0 + 95 | 0] = jsvObjectGetBoolChild(HEAP32[$0 + 128 >> 2], 115962) & 1;
       if (!(HEAP8[$0 + 95 | 0] & 1)) {
        HEAP32[$0 + 88 >> 2] = jsvLock(HEAPU16[173533]);
        HEAP32[$0 + 84 >> 2] = jsvGetIndexOf(HEAP32[$0 + 88 >> 2], HEAP32[$0 + 128 >> 2], 1);
        if (HEAP32[$0 + 84 >> 2]) {
         jsvRemoveChildAndUnLock(HEAP32[$0 + 88 >> 2], HEAP32[$0 + 84 >> 2]);
        }
        jsvUnLock(HEAP32[$0 + 88 >> 2]);
        HEAP8[$0 + 83 | 0] = jshGetPinFromVarAndUnLock(jsvObjectGetChildIfExists(HEAP32[$0 + 128 >> 2], 117541));
        if (!(jsiIsWatchingPin(HEAPU8[$0 + 83 | 0]) & 1)) {
         jshPinWatch(HEAPU8[$0 + 83 | 0], 0, 0);
        }
       }
      }
      jsvUnLock(HEAP32[$0 + 128 >> 2]);
     }
     HEAP32[$0 + 76 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 144 >> 2], 118059);
     label$59: {
      if (!(!HEAP32[$0 + 76 >> 2] | HEAP8[$0 + 107 | 0] & 1)) {
       $2 = HEAP32[$0 + 136 >> 2];
       $5 = $2;
       $3 = HEAP32[$0 + 140 >> 2];
       $1 = $3;
       $3 = jsvGetLongInteger(HEAP32[$0 + 76 >> 2]);
       $4 = $3;
       $2 = i64toi32_i32$HIGH_BITS;
       $3 = $2;
       $2 = $1;
       $1 = $2 + $3 | 0;
       $6 = $4 + $5 | 0;
       HEAP32[$0 + 136 >> 2] = $6;
       $1 = $4 >>> 0 > $6 >>> 0 ? $1 + 1 | 0 : $1;
       HEAP32[$0 + 140 >> 2] = $1;
       $1 = HEAP32[$0 + 136 >> 2];
       $5 = HEAP32[$0 + 140 >> 2];
       jsvObjectSetChildAndUnLock(HEAP32[$0 + 144 >> 2], 120023, jsvNewFromLongInteger($1, $5));
       break label$59;
      }
      jsvObjectIteratorRemoveAndGotoNext($0 + 176 | 0, HEAP32[$0 + 180 >> 2]);
      HEAP8[$0 + 151 | 0] = 1;
      HEAP32[$0 + 136 >> 2] = -1;
      HEAP32[$0 + 140 >> 2] = -1;
     }
     jsvUnLock2(HEAP32[$0 + 132 >> 2], HEAP32[$0 + 76 >> 2]);
    }
    $5 = HEAP32[$0 + 136 >> 2];
    $1 = HEAP32[$0 + 140 >> 2];
    label$61: {
     if (($1 | 0) < 0) {
      break label$61;
     }
     $2 = HEAP32[$0 + 136 >> 2];
     $4 = $2;
     $1 = HEAP32[$0 + 140 >> 2];
     $3 = $1;
     $2 = HEAP32[$0 + 204 >> 2];
     $6 = $2;
     $1 = HEAP32[$0 + 200 >> 2];
     $5 = $1;
     $2 = $3;
     $1 = $6;
     if ($5 >>> 0 <= $4 >>> 0 & ($2 | 0) >= ($1 | 0) | ($1 | 0) < ($2 | 0)) {
      break label$61;
     }
     $2 = HEAP32[$0 + 140 >> 2];
     $4 = HEAP32[$0 + 136 >> 2];
     HEAP32[$0 + 200 >> 2] = $4;
     HEAP32[$0 + 204 >> 2] = $2;
    }
    if (!(HEAP8[$0 + 151 | 0] & 1)) {
     jsvObjectIteratorNext($0 + 176 | 0);
    }
    jsvUnLock(HEAP32[$0 + 144 >> 2]);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_3($0 + 176 | 0);
  if (HEAPU16[173534] & 4) {
   continue;
  }
  break;
 }
 jsvUnLock(HEAP32[$0 + 180 >> 2]);
 if (jswIdle() & 1) {
  HEAP8[$0 + 319 | 0] = 1;
 }
 label$64: {
  if (!(HEAP8[$0 + 319 | 0] & 1)) {
   if (jsvArrayIsEmpty(HEAP32[86765]) & 1) {
    break label$64;
   }
  }
  HEAP8[347086] = 0;
 }
 if (HEAP8[$0 + 319 | 0] & 1) {
  jsiSetBusy(1, 0);
 }
 if (!(jspIsInterrupted() & 1)) {
  jsiExecuteEvents();
 }
 if (HEAPU16[173534] & 224) {
  jsiSetBusy(1, 1);
  HEAP32[$0 + 72 >> 2] = jsvGetMemoryTotal();
  HEAP16[$0 + 70 >> 1] = HEAPU16[173534];
  if ((HEAPU16[$0 + 70 >> 1] & 128) == 128) {
   jsiKill();
   jsvKill();
   jshReset();
   jsvInit(HEAP32[$0 + 72 >> 2]);
   jsiSemiInit(0, 0);
   HEAP16[173534] = HEAPU16[173534] & 65407;
  }
  if ((HEAPU16[$0 + 70 >> 1] & 32) == 32) {
   jsvGarbageCollect();
   jsiSoftKill();
   jspSoftKill();
   jsvSoftKill();
   jsfSaveToFlash();
   jshReset();
   jsvSoftInit();
   jspSoftInit();
   jsiSoftInit(0);
   HEAP16[173534] = HEAPU16[173534] & 65503;
  }
  if ((HEAPU16[$0 + 70 >> 1] & 64) == 64) {
   HEAP32[$0 + 64 >> 2] = jsvObjectGetChildIfExists(HEAP32[86751], 121988);
   label$72: {
    if (HEAP32[$0 + 64 >> 2]) {
     jsfNameFromVarAndUnLock($0 + 32 | 0, HEAP32[$0 + 64 >> 2]);
     jsiKill();
     jsvKill();
     jshReset();
     jsvInit(HEAP32[$0 + 72 >> 2]);
     jsiSemiInit(0, $0 + 32 | 0);
     HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 56 >> 2];
     $4 = HEAP32[$0 + 52 >> 2];
     $2 = HEAP32[$0 + 48 >> 2];
     HEAP32[$0 + 16 >> 2] = $2;
     HEAP32[$0 + 20 >> 2] = $4;
     $2 = HEAP32[$0 + 44 >> 2];
     $4 = HEAP32[$0 + 40 >> 2];
     HEAP32[$0 + 8 >> 2] = $4;
     HEAP32[$0 + 12 >> 2] = $2;
     $4 = HEAP32[$0 + 36 >> 2];
     $2 = HEAP32[$0 + 32 >> 2];
     HEAP32[$0 >> 2] = $2;
     HEAP32[$0 + 4 >> 2] = $4;
     HEAP32[$0 + 28 >> 2] = jsfReadFile($0, 0, 0);
     if (HEAP32[$0 + 28 >> 2]) {
      jsvUnLock2(jspEvaluateVar(HEAP32[$0 + 28 >> 2], 0, 0), HEAP32[$0 + 28 >> 2]);
     }
     break label$72;
    }
    jsiSoftKill();
    jspSoftKill();
    jsvSoftKill();
    jsvKill();
    jshReset();
    jsvInit(HEAP32[$0 + 72 >> 2]);
    jsfLoadStateFromFlash();
    jsvSoftInit();
    jspSoftInit();
    jsiSoftInit(0);
   }
   HEAP16[173534] = HEAPU16[173534] & 65471;
  }
  jsiSetBusy(1, 0);
 }
 if (HEAPU16[173534] & 512) {
  jshKickWatchDog();
 }
 label$76: {
  label$77: {
   if (HEAPU8[347086] != 1) {
    break label$77;
   }
   $4 = HEAP32[$0 + 200 >> 2];
   $5 = $4;
   $2 = HEAP32[$0 + 204 >> 2];
   $1 = $2;
   $2 = jshGetTimeFromMilliseconds(10);
   $3 = $2;
   $4 = i64toi32_i32$HIGH_BITS;
   $2 = $4;
   $4 = $1;
   $1 = $3;
   if (($4 | 0) <= ($2 | 0) & $5 >>> 0 <= $1 >>> 0 | ($2 | 0) > ($4 | 0)) {
    break label$77;
   }
   if (jsvMoreFreeVariablesThan(600) & 1) {
    break label$77;
   }
   jsiSetBusy(1, 1);
   jsvGarbageCollect();
   jsiSetBusy(1, 0);
   break label$76;
  }
  if (!HEAPU8[347086]) {
   break label$76;
  }
  if (jshHasEvents() & 1) {
   break label$76;
  }
  $5 = HEAP32[$0 + 200 >> 2];
  $4 = HEAP32[$0 + 204 >> 2];
  jshSleep($5, $4);
 }
 __stack_pointer = $0 + 320 | 0;
}

function jslGetNextToken() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = HEAP16[HEAP32[44743] + 2 >> 1];
 HEAP16[HEAP32[44743] + 2 >> 1] = 0;
 HEAP8[HEAP32[44743] + 80 | 0] = 0;
 if (HEAP32[HEAP32[44743] + 76 >> 2]) {
  jsvUnLock(HEAP32[HEAP32[44743] + 76 >> 2]);
  HEAP32[HEAP32[44743] + 76 >> 2] = 0;
 }
 HEAP32[HEAP32[44743] + 8 >> 2] = HEAP32[HEAP32[44743] + 4 >> 2];
 HEAP8[$0 + 11 | 0] = HEAPU8[HEAP32[44743]];
 if (HEAPU8[$0 + 11 | 0] > 124) {
  HEAP8[$0 + 11 | 0] = 0;
 }
 label$3: {
  label$4: {
   label$5: {
    label$6: {
     label$7: {
      label$8: {
       label$9: {
        label$10: {
         label$11: {
          label$12: {
           label$13: {
            label$14: {
             label$15: {
              label$16: {
               label$17: {
                label$18: {
                 label$19: {
                  while (1) {
                   label$21: {
                    $1 = jsvStringIteratorGetIndex(HEAP32[44743] + 88 | 0);
                    HEAP32[HEAP32[44743] + 4 >> 2] = $1 - 1;
                    label$22: {
                     switch (HEAPU8[HEAPU8[$0 + 11 | 0] + 110304 | 0]) {
                     case 12:
                      break label$10;

                     case 13:
                      break label$11;

                     case 10:
                      break label$12;

                     case 9:
                      break label$13;

                     case 8:
                      break label$14;

                     case 7:
                      break label$15;

                     case 6:
                      break label$16;

                     case 4:
                      break label$17;

                     case 3:
                      break label$18;

                     case 2:
                      break label$19;

                     case 0:
                      break label$21;

                     case 1:
                      break label$22;

                     case 17:
                      break label$4;

                     case 15:
                      break label$5;

                     case 16:
                      break label$6;

                     case 11:
                      break label$7;

                     case 14:
                      break label$8;

                     case 5:
                      break label$9;

                     default:
                      break label$3;
                     }
                    }
                    jslSkipWhiteSpace();
                    HEAP8[$0 + 11 | 0] = HEAPU8[HEAP32[44743]];
                    if (HEAPU8[$0 + 11 | 0] > 124) {
                     HEAP8[$0 + 11 | 0] = 0;
                    }
                    if (HEAPU8[$0 + 11 | 0] == 47) {
                     HEAP8[$0 + 11 | 0] = 125;
                    }
                    continue;
                   }
                   break;
                  }
                  jslSingleChar();
                  label$25: {
                   if (HEAP16[HEAP32[44743] + 2 >> 1] == 175) {
                    HEAP8[HEAP32[44743] + 81 | 0] = 1;
                    break label$25;
                   }
                   if (!(HEAP16[HEAP32[44743] + 2 >> 1] != 209 & HEAP16[HEAP32[44743] + 2 >> 1] != 210)) {
                    jslGetRawString();
                   }
                  }
                  break label$3;
                 }
                 while (1) {
                  $1 = 1;
                  label$30: {
                   if (isAlphaInline(HEAP8[HEAP32[44743]]) & 1) {
                    break label$30;
                   }
                   $1 = 1;
                   if (isNumericInline(HEAP8[HEAP32[44743]]) & 1) {
                    break label$30;
                   }
                   $1 = HEAP8[HEAP32[44743]] == 36;
                  }
                  if ($1) {
                   jslTokenAppendChar(HEAP8[HEAP32[44743]]);
                   jslGetNextCh();
                   continue;
                  }
                  break;
                 }
                 HEAP16[HEAP32[44743] + 2 >> 1] = 128;
                 if (!HEAPU8[HEAP32[44743] + 13 | 0]) {
                  break label$3;
                 }
                 label$32: {
                  label$33: {
                   switch (HEAP8[HEAP32[44743] + 12 | 0] - 98 | 0) {
                   case 0:
                    jslCheckToken(118182, 168);
                    break label$32;

                   case 1:
                    if (!(jslCheckToken(119750, 188) & 1)) {
                     if (!(jslCheckToken(118676, 178) & 1)) {
                      if (!(jslCheckToken(115174, 194) & 1)) {
                       if (!(jslCheckToken(112662, 174) & 1)) {
                        jslCheckToken(119425, 169);
                       }
                      }
                     }
                    }
                    break label$32;

                   case 2:
                    if (!(jslCheckToken(113031, 189) & 1)) {
                     if (!(jslCheckToken(119646, 190) & 1)) {
                      if (!(jslCheckToken(117090, 165) & 1)) {
                       jslCheckToken(116334, 193);
                      }
                     }
                    }
                    break label$32;

                   case 3:
                    if (!(jslCheckToken(119738, 164) & 1)) {
                     jslCheckToken(115736, 195);
                    }
                    break label$32;

                   case 4:
                    if (!(jslCheckToken(119737, 181) & 1)) {
                     if (!(jslCheckToken(111661, 179) & 1)) {
                      if (!(jslCheckToken(116192, 167) & 1)) {
                       jslCheckToken(117413, 170);
                      }
                     }
                    }
                    break label$32;

                   case 7:
                    if (!(jslCheckToken(119167, 163) & 1)) {
                     if (!(jslCheckToken(117629, 185) & 1)) {
                      jslCheckToken(119090, 186);
                     }
                    }
                    break label$32;

                   case 10:
                    jslCheckToken(113244, 173);
                    break label$32;

                   case 12:
                    if (!(jslCheckToken(112180, 184) & 1)) {
                     jslCheckToken(117781, 182);
                    }
                    break label$32;

                   case 13:
                    jslCheckToken(119167, 198);
                    break label$32;

                   case 16:
                    jslCheckToken(117112, 171);
                    break label$32;

                   case 17:
                    if (!(jslCheckToken(122843, 197) & 1)) {
                     if (!(jslCheckToken(116248, 196) & 1)) {
                      jslCheckToken(118540, 187);
                     }
                    }
                    break label$32;

                   case 18:
                    label$64: {
                     if (jslCheckToken(115424, 175) & 1) {
                      HEAP8[HEAP32[44743] + 81 | 0] = 1;
                      break label$64;
                     }
                     if (!(jslCheckToken(111930, 176) & 1)) {
                      if (!(jslCheckToken(119420, 180) & 1)) {
                       if (!(jslCheckToken(111595, 177) & 1)) {
                        jslCheckToken(119084, 191);
                       }
                      }
                     }
                    }
                    break label$32;

                   case 19:
                    jslCheckToken(121671, 183);
                    break label$32;

                   case 21:
                    jslCheckToken(120061, 166);
                    break label$32;

                   case 20:
                    break label$33;

                   default:
                    break label$32;
                   }
                  }
                  if (!(jslCheckToken(116636, 172) & 1)) {
                   jslCheckToken(120990, 192);
                  }
                 }
                 break label$3;
                }
                HEAP8[$0 + 10 | 0] = 1;
                label$70: {
                 if (HEAP8[HEAP32[44743]] == 46) {
                  jslGetNextCh();
                  label$72: {
                   if (isNumericInline(HEAP8[HEAP32[44743]]) & 1) {
                    HEAP16[HEAP32[44743] + 2 >> 1] = 130;
                    jslTokenAppendChar(46);
                    break label$72;
                   }
                   HEAP16[HEAP32[44743] + 2 >> 1] = 46;
                   break label$3;
                  }
                  break label$70;
                 }
                 if (HEAP8[HEAP32[44743]] == 48) {
                  jslTokenAppendChar(HEAP8[HEAP32[44743]]);
                  jslGetNextCh();
                  label$75: {
                   label$76: {
                    if (HEAP8[HEAP32[44743]] == 120 | HEAP8[HEAP32[44743]] == 88 | (HEAP8[HEAP32[44743]] == 98 | HEAP8[HEAP32[44743]] == 66)) {
                     break label$76;
                    }
                    if (HEAP8[HEAP32[44743]] == 111) {
                     break label$76;
                    }
                    if (HEAP8[HEAP32[44743]] != 79) {
                     break label$75;
                    }
                   }
                   HEAP8[$0 + 10 | 0] = 0;
                   jslTokenAppendChar(HEAP8[HEAP32[44743]]);
                   jslGetNextCh();
                  }
                 }
                 HEAP16[HEAP32[44743] + 2 >> 1] = 129;
                 while (1) {
                  $1 = 1;
                  label$78: {
                   if (isNumericInline(HEAP8[HEAP32[44743]]) & 1) {
                    break label$78;
                   }
                   if (!(HEAP8[$0 + 10 | 0] & 1)) {
                    $1 = 1;
                    if (isHexadecimal(HEAP8[HEAP32[44743]]) & 1) {
                     break label$78;
                    }
                   }
                   $1 = HEAP8[HEAP32[44743]] == 95;
                  }
                  if ($1) {
                   if (HEAP8[HEAP32[44743]] != 95) {
                    jslTokenAppendChar(HEAP8[HEAP32[44743]]);
                   }
                   jslGetNextCh();
                   continue;
                  }
                  break;
                 }
                 if (!(!(HEAP8[$0 + 10 | 0] & 1) | HEAP8[HEAP32[44743]] != 46)) {
                  HEAP16[HEAP32[44743] + 2 >> 1] = 130;
                  jslTokenAppendChar(46);
                  jslGetNextCh();
                 }
                }
                if (HEAP16[HEAP32[44743] + 2 >> 1] == 130) {
                 while (1) {
                  $1 = 1;
                  if (!(isNumeric(HEAP8[HEAP32[44743]]) & 1)) {
                   $1 = HEAP8[HEAP32[44743]] == 95;
                  }
                  if ($1) {
                   if (HEAP8[HEAP32[44743]] != 95) {
                    jslTokenAppendChar(HEAP8[HEAP32[44743]]);
                   }
                   jslGetNextCh();
                   continue;
                  }
                  break;
                 }
                }
                if (!(!(HEAP8[$0 + 10 | 0] & 1) | HEAP8[HEAP32[44743]] != 101 & HEAP8[HEAP32[44743]] != 69)) {
                 HEAP16[HEAP32[44743] + 2 >> 1] = 130;
                 jslTokenAppendChar(HEAP8[HEAP32[44743]]);
                 jslGetNextCh();
                 if (!(HEAP8[HEAP32[44743]] != 45 & HEAP8[HEAP32[44743]] != 43)) {
                  jslTokenAppendChar(HEAP8[HEAP32[44743]]);
                  jslGetNextCh();
                 }
                 while (1) {
                  $1 = 1;
                  if (!(isNumeric(HEAP8[HEAP32[44743]]) & 1)) {
                   $1 = HEAP8[HEAP32[44743]] == 95;
                  }
                  if ($1) {
                   if (HEAP8[HEAP32[44743]] != 95) {
                    jslTokenAppendChar(HEAP8[HEAP32[44743]]);
                   }
                   jslGetNextCh();
                   continue;
                  }
                  break;
                 }
                }
                break label$3;
               }
               jslLexString();
               break label$3;
              }
              jslSingleChar();
              if (HEAP8[HEAP32[44743]] == 61) {
               HEAP16[HEAP32[44743] + 2 >> 1] = 140;
               jslGetNextCh();
               if (HEAP8[HEAP32[44743]] == 61) {
                HEAP16[HEAP32[44743] + 2 >> 1] = 141;
                jslGetNextCh();
               }
              }
              break label$3;
             }
             jslSingleChar();
             label$98: {
              if (HEAP8[HEAP32[44743]] == 61) {
               HEAP16[HEAP32[44743] + 2 >> 1] = 150;
               jslGetNextCh();
               break label$98;
              }
              if (HEAP8[HEAP32[44743]] == 43) {
               HEAP16[HEAP32[44743] + 2 >> 1] = 152;
               jslGetNextCh();
              }
             }
             break label$3;
            }
            jslSingleChar();
            label$101: {
             if (HEAP8[HEAP32[44743]] == 61) {
              HEAP16[HEAP32[44743] + 2 >> 1] = 151;
              jslGetNextCh();
              break label$101;
             }
             if (HEAP8[HEAP32[44743]] == 45) {
              HEAP16[HEAP32[44743] + 2 >> 1] = 153;
              jslGetNextCh();
             }
            }
            break label$3;
           }
           jslSingleChar();
           label$104: {
            if (HEAP8[HEAP32[44743]] == 61) {
             HEAP16[HEAP32[44743] + 2 >> 1] = 157;
             jslGetNextCh();
             break label$104;
            }
            if (HEAP8[HEAP32[44743]] == 38) {
             HEAP16[HEAP32[44743] + 2 >> 1] = 158;
             jslGetNextCh();
            }
           }
           break label$3;
          }
          jslSingleChar();
          label$107: {
           if (HEAP8[HEAP32[44743]] == 61) {
            HEAP16[HEAP32[44743] + 2 >> 1] = 159;
            jslGetNextCh();
            break label$107;
           }
           if (HEAP8[HEAP32[44743]] == 124) {
            HEAP16[HEAP32[44743] + 2 >> 1] = 160;
            jslGetNextCh();
           }
          }
          break label$3;
         }
         jslSingleChar();
         if (HEAP8[HEAP32[44743]] == 61) {
          HEAP16[HEAP32[44743] + 2 >> 1] = 161;
          jslGetNextCh();
         }
         break label$3;
        }
        jslSingleChar();
        if (HEAP8[HEAP32[44743]] == 61) {
         HEAP16[HEAP32[44743] + 2 >> 1] = 154;
         jslGetNextCh();
        }
        break label$3;
       }
       jslSingleChar();
       if (HEAP8[HEAP32[44743]] == 63) {
        HEAP16[HEAP32[44743] + 2 >> 1] = 208;
        jslGetNextCh();
       }
       break label$3;
      }
      label$113: {
       label$114: {
        label$115: {
         if (!HEAP32[$0 + 12 >> 2]) {
          break label$115;
         }
         label$116: {
          if (HEAP32[$0 + 12 >> 2] < 138 | HEAP32[$0 + 12 >> 2] > 208 | (HEAP32[$0 + 12 >> 2] == 180 | HEAP32[$0 + 12 >> 2] == 181)) {
           break label$116;
          }
          if (HEAP32[$0 + 12 >> 2] == 182) {
           break label$116;
          }
          if (HEAP32[$0 + 12 >> 2] != 183) {
           break label$115;
          }
         }
         if (HEAP32[$0 + 12 >> 2] == 33 | HEAP32[$0 + 12 >> 2] == 37 | (HEAP32[$0 + 12 >> 2] == 38 | HEAP32[$0 + 12 >> 2] == 42)) {
          break label$115;
         }
         if (HEAP32[$0 + 12 >> 2] == 43 | HEAP32[$0 + 12 >> 2] == 45 | (HEAP32[$0 + 12 >> 2] == 47 | HEAP32[$0 + 12 >> 2] == 60)) {
          break label$115;
         }
         if (HEAP32[$0 + 12 >> 2] == 61 | HEAP32[$0 + 12 >> 2] == 62 | (HEAP32[$0 + 12 >> 2] == 63 | HEAP32[$0 + 12 >> 2] == 91)) {
          break label$115;
         }
         if (HEAP32[$0 + 12 >> 2] == 123 | HEAP32[$0 + 12 >> 2] == 125 | (HEAP32[$0 + 12 >> 2] == 40 | HEAP32[$0 + 12 >> 2] == 44)) {
          break label$115;
         }
         if (HEAP32[$0 + 12 >> 2] == 59) {
          break label$115;
         }
         if (HEAP32[$0 + 12 >> 2] != 58) {
          break label$114;
         }
        }
        jslLexRegex();
        break label$113;
       }
       jslSingleChar();
       if (HEAP8[HEAP32[44743]] == 61) {
        HEAP16[HEAP32[44743] + 2 >> 1] = 155;
        jslGetNextCh();
       }
      }
      break label$3;
     }
     jslSingleChar();
     if (HEAP8[HEAP32[44743]] == 61) {
      HEAP16[HEAP32[44743] + 2 >> 1] = 156;
      jslGetNextCh();
     }
     break label$3;
    }
    jslSingleChar();
    label$119: {
     if (HEAP8[HEAP32[44743]] == 61) {
      HEAP16[HEAP32[44743] + 2 >> 1] = 138;
      jslGetNextCh();
      if (HEAP8[HEAP32[44743]] == 61) {
       HEAP16[HEAP32[44743] + 2 >> 1] = 139;
       jslGetNextCh();
      }
      break label$119;
     }
     if (HEAP8[HEAP32[44743]] == 62) {
      HEAP16[HEAP32[44743] + 2 >> 1] = 162;
      jslGetNextCh();
     }
    }
    break label$3;
   }
   jslSingleChar();
   label$123: {
    if (HEAP8[HEAP32[44743]] == 61) {
     HEAP16[HEAP32[44743] + 2 >> 1] = 142;
     jslGetNextCh();
     break label$123;
    }
    if (HEAP8[HEAP32[44743]] == 60) {
     HEAP16[HEAP32[44743] + 2 >> 1] = 143;
     jslGetNextCh();
     if (HEAP8[HEAP32[44743]] == 61) {
      HEAP16[HEAP32[44743] + 2 >> 1] = 144;
      jslGetNextCh();
     }
    }
   }
   break label$3;
  }
  jslSingleChar();
  label$127: {
   if (HEAP8[HEAP32[44743]] == 61) {
    HEAP16[HEAP32[44743] + 2 >> 1] = 145;
    jslGetNextCh();
    break label$127;
   }
   if (HEAP8[HEAP32[44743]] == 62) {
    HEAP16[HEAP32[44743] + 2 >> 1] = 146;
    jslGetNextCh();
    label$130: {
     if (HEAP8[HEAP32[44743]] == 61) {
      HEAP16[HEAP32[44743] + 2 >> 1] = 148;
      jslGetNextCh();
      break label$130;
     }
     if (HEAP8[HEAP32[44743]] == 62) {
      jslGetNextCh();
      label$133: {
       if (HEAP8[HEAP32[44743]] == 61) {
        HEAP16[HEAP32[44743] + 2 >> 1] = 149;
        jslGetNextCh();
        break label$133;
       }
       HEAP16[HEAP32[44743] + 2 >> 1] = 147;
      }
     }
    }
   }
  }
 }
 __stack_pointer = $0 + 16 | 0;
}

function jspeFunctionCall($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0;
 $7 = __stack_pointer - 416 | 0;
 $6 = $7;
 __stack_pointer = $6;
 HEAP32[$6 + 408 >> 2] = $0;
 HEAP32[$6 + 404 >> 2] = $1;
 HEAP32[$6 + 400 >> 2] = $2;
 HEAP8[$6 + 399 | 0] = $3;
 HEAP32[$6 + 392 >> 2] = $4;
 HEAP32[$6 + 388 >> 2] = $5;
 label$1: {
  if (!(HEAP32[$6 + 408 >> 2] | (HEAP32[86758] & 63) != 1)) {
   label$3: {
    if (HEAP32[$6 + 404 >> 2]) {
     HEAP32[$6 + 64 >> 2] = HEAP32[$6 + 404 >> 2];
     jsExceptionHere(1, 143764, $6 - -64 | 0);
     break label$3;
    }
    HEAP32[$6 + 80 >> 2] = HEAP32[$6 + 404 >> 2];
    jsExceptionHere(1, 143787, $6 + 80 | 0);
   }
   HEAP32[$6 + 412 >> 2] = 0;
   break label$1;
  }
  if ((HEAP32[86758] & 63) == 1) {
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$6 + 412 >> 2] = 0;
    break label$1;
   }
  }
  if (!(!HEAP32[$6 + 408 >> 2] | (HEAP32[86758] & 63) != 1)) {
   HEAP32[$6 + 384 >> 2] = 0;
   if (!(jsvIsFunction(HEAP32[$6 + 408 >> 2]) & 1)) {
    HEAP32[$6 + 48 >> 2] = HEAP32[$6 + 408 >> 2];
    jsExceptionHere(1, 114020, $6 + 48 | 0);
    HEAP32[$6 + 412 >> 2] = 0;
    break label$1;
   }
   HEAP32[$6 + 380 >> 2] = jsvLockAgainSafe(HEAP32[$6 + 400 >> 2]);
   if (HEAP8[$6 + 399 | 0] & 1) {
    if (!(jslMatch(40) & 1)) {
     HEAP32[$6 + 412 >> 2] = 0;
     break label$1;
    }
   }
   label$11: {
    if (jsvIsNativeFunction(HEAP32[$6 + 408 >> 2]) & 1) {
     HEAP32[$6 + 376 >> 2] = 0;
     HEAP32[$6 + 372 >> 2] = 0;
     jsvObjectIteratorNew($6 + 368 | 0, HEAP32[$6 + 408 >> 2]);
     HEAP32[$6 + 364 >> 2] = jsvObjectIteratorGetKey_2($6 + 368 | 0);
     while (1) {
      if (jsvIsFunctionParameter(HEAP32[$6 + 364 >> 2]) & 1) {
       if (HEAPU32[$6 + 392 >> 2] >= HEAPU32[$6 + 376 >> 2]) {
        if (HEAP32[$6 + 376 >> 2]) {
         $0 = HEAP32[$6 + 376 >> 2];
        } else {
         $0 = HEAP32[$6 + 392 >> 2];
        }
        HEAP32[$6 + 360 >> 2] = $0 << 2;
        HEAP32[$6 + 356 >> 2] = HEAP32[$6 + 360 >> 2] << 2;
        if (jsuGetFreeStack() >>> 0 < HEAP32[$6 + 356 >> 2] + 256 >>> 0) {
         jsExceptionHere(1, 114916, 0);
         jsvUnLock(HEAP32[$6 + 380 >> 2]);
         HEAP32[$6 + 412 >> 2] = 0;
         break label$1;
        }
        $7 = $7 - (HEAP32[$6 + 356 >> 2] + 15 & -16) | 0;
        __stack_pointer = $7;
        HEAP32[$6 + 352 >> 2] = $7;
        __memcpy(HEAP32[$6 + 352 >> 2], HEAP32[$6 + 388 >> 2], HEAP32[$6 + 392 >> 2] << 2);
        HEAP32[$6 + 388 >> 2] = HEAP32[$6 + 352 >> 2];
        HEAP32[$6 + 376 >> 2] = HEAP32[$6 + 360 >> 2];
       }
       HEAP32[$6 + 348 >> 2] = HEAP32[$6 + 392 >> 2] - 1;
       while (1) {
        if (HEAP32[$6 + 348 >> 2] >= HEAP32[$6 + 372 >> 2]) {
         HEAP32[HEAP32[$6 + 388 >> 2] + (HEAP32[$6 + 348 >> 2] + 1 << 2) >> 2] = HEAP32[HEAP32[$6 + 388 >> 2] + (HEAP32[$6 + 348 >> 2] << 2) >> 2];
         HEAP32[$6 + 348 >> 2] = HEAP32[$6 + 348 >> 2] - 1;
         continue;
        }
        break;
       }
       $0 = jsvSkipName(HEAP32[$6 + 364 >> 2]);
       HEAP32[HEAP32[$6 + 388 >> 2] + (HEAP32[$6 + 372 >> 2] << 2) >> 2] = $0;
       HEAP32[$6 + 392 >> 2] = HEAP32[$6 + 392 >> 2] + 1;
       HEAP32[$6 + 372 >> 2] = HEAP32[$6 + 372 >> 2] + 1;
       jsvUnLock(HEAP32[$6 + 364 >> 2]);
       jsvObjectIteratorNext($6 + 368 | 0);
       HEAP32[$6 + 364 >> 2] = jsvObjectIteratorGetKey_2($6 + 368 | 0);
       continue;
      }
      break;
     }
     while (1) {
      if (HEAP32[$6 + 364 >> 2]) {
       if (jsvIsStringEqual(HEAP32[$6 + 364 >> 2], 115428) & 1) {
        jsvUnLock(HEAP32[$6 + 380 >> 2]);
        HEAP32[$6 + 380 >> 2] = jsvSkipName(HEAP32[$6 + 364 >> 2]);
       } else {
        jsvUnLock(HEAP32[$6 + 364 >> 2]);
        jsvObjectIteratorNext($6 + 368 | 0);
        HEAP32[$6 + 364 >> 2] = jsvObjectIteratorGetKey_2($6 + 368 | 0);
        continue;
       }
      }
      break;
     }
     jsvUnLock(HEAP32[$6 + 364 >> 2]);
     jsvObjectIteratorFree_2($6 + 368 | 0);
     HEAP32[$6 + 344 >> 2] = HEAP32[$6 + 372 >> 2];
     if (HEAP8[$6 + 399 | 0] & 1) {
      while (1) {
       $0 = 0;
       label$27: {
        if (HEAP32[86758] & 112) {
         break label$27;
        }
        $0 = 0;
        if (HEAP16[HEAP32[44743] + 2 >> 1] == 41) {
         break label$27;
        }
        $0 = HEAP16[HEAP32[44743] + 2 >> 1];
       }
       if ($0) {
        if (HEAPU32[$6 + 392 >> 2] >= HEAPU32[$6 + 376 >> 2]) {
         if (HEAP32[$6 + 376 >> 2]) {
          $0 = HEAP32[$6 + 376 >> 2] << 2;
         } else {
          $0 = 16;
         }
         HEAP32[$6 + 340 >> 2] = $0;
         $7 = $7 - ((HEAP32[$6 + 340 >> 2] << 2) + 15 & -16) | 0;
         __stack_pointer = $7;
         HEAP32[$6 + 336 >> 2] = $7;
         __memcpy(HEAP32[$6 + 336 >> 2], HEAP32[$6 + 388 >> 2], HEAP32[$6 + 392 >> 2] << 2);
         HEAP32[$6 + 388 >> 2] = HEAP32[$6 + 336 >> 2];
         HEAP32[$6 + 376 >> 2] = HEAP32[$6 + 340 >> 2];
        }
        $1 = jsvSkipNameAndUnLock(jspeAssignmentExpression());
        $2 = HEAP32[$6 + 388 >> 2];
        $0 = HEAP32[$6 + 392 >> 2];
        HEAP32[$6 + 392 >> 2] = $0 + 1;
        HEAP32[($0 << 2) + $2 >> 2] = $1;
        if (HEAP16[HEAP32[44743] + 2 >> 1] != 41) {
         if (!(jslMatch(44) & 1)) {
          jsvUnLockMany(HEAP32[$6 + 392 >> 2], HEAP32[$6 + 388 >> 2]);
          jsvUnLock(HEAP32[$6 + 380 >> 2]);
          HEAP32[$6 + 412 >> 2] = 0;
          break label$1;
         }
        }
        continue;
       }
       break;
      }
      if (!(jslMatch(41) & 1)) {
       jsvUnLockMany(HEAP32[$6 + 392 >> 2], HEAP32[$6 + 388 >> 2]);
       jsvUnLock(HEAP32[$6 + 380 >> 2]);
       HEAP32[$6 + 412 >> 2] = 0;
       break label$1;
      }
      HEAP32[$6 + 344 >> 2] = HEAP32[$6 + 392 >> 2];
     }
     HEAP32[$6 + 332 >> 2] = jsvGetNativeFunctionPtr(HEAP32[$6 + 408 >> 2]);
     HEAP32[$6 + 328 >> 2] = HEAP32[86756];
     label$35: {
      if (HEAP32[$6 + 380 >> 2]) {
       HEAP32[86756] = jsvRef(HEAP32[$6 + 380 >> 2]);
       break label$35;
      }
      label$37: {
       if (HEAP32[$6 + 332 >> 2] == 9) {
        if (HEAP32[86756]) {
         HEAP32[86756] = jsvRef(HEAP32[86756]);
        }
        break label$37;
       }
       HEAP32[86756] = jsvRef(HEAP32[86750]);
      }
     }
     label$40: {
      if (!(!HEAP32[$6 + 332 >> 2] | HEAP32[86758] & 112)) {
       $0 = HEAP32[$6 + 408 >> 2];
       HEAP32[$6 + 384 >> 2] = jsnCallFunction(HEAP32[$6 + 332 >> 2], HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8, HEAP32[$6 + 380 >> 2], HEAP32[$6 + 388 >> 2], HEAP32[$6 + 392 >> 2]);
       break label$40;
      }
      HEAP32[$6 + 384 >> 2] = 0;
     }
     jsvUnLockMany(HEAP32[$6 + 344 >> 2], HEAP32[$6 + 388 >> 2]);
     if (HEAP32[86756]) {
      jsvUnRef(HEAP32[86756]);
     }
     HEAP32[86756] = HEAP32[$6 + 328 >> 2];
     break label$11;
    }
    HEAP32[$6 + 324 >> 2] = jsvNewWithFlags(7);
    if (!HEAP32[$6 + 324 >> 2]) {
     jspSetError(0);
     jsvUnLock(HEAP32[$6 + 380 >> 2]);
     HEAP32[$6 + 412 >> 2] = 0;
     break label$1;
    }
    HEAP32[$6 + 320 >> 2] = 0;
    HEAP32[$6 + 316 >> 2] = 0;
    HEAP32[$6 + 312 >> 2] = 0;
    jsvObjectIteratorNew($6 + 304 | 0, HEAP32[$6 + 408 >> 2]);
    HEAP32[$6 + 300 >> 2] = jsvObjectIteratorGetKey_2($6 + 304 | 0);
    HEAP32[$6 + 296 >> 2] = jsvObjectIteratorGetValue_2($6 + 304 | 0);
    while (1) {
     $0 = 0;
     if (jsvIsFunctionParameter(HEAP32[$6 + 300 >> 2]) & 1) {
      $0 = HEAP32[$6 + 296 >> 2] != 0;
     }
     if ($0) {
      jsvAddFunctionParameter(HEAP32[$6 + 324 >> 2], jsvNewFromStringVar(HEAP32[$6 + 300 >> 2], 1, 2147483647), HEAP32[$6 + 296 >> 2]);
      jsvUnLock2(HEAP32[$6 + 296 >> 2], HEAP32[$6 + 300 >> 2]);
      jsvObjectIteratorNext($6 + 304 | 0);
      HEAP32[$6 + 300 >> 2] = jsvObjectIteratorGetKey_2($6 + 304 | 0);
      HEAP32[$6 + 296 >> 2] = jsvObjectIteratorGetValue_2($6 + 304 | 0);
      continue;
     }
     break;
    }
    jsvUnLock2(HEAP32[$6 + 296 >> 2], HEAP32[$6 + 300 >> 2]);
    label$47: {
     if (HEAP8[$6 + 399 | 0] & 1) {
      HEAP32[$6 + 292 >> 2] = 0;
      while (1) {
       $0 = 0;
       $0 = HEAP32[86758] & 80 ? $0 : HEAP16[HEAP32[44743] + 2 >> 1] != 41;
       if ($0) {
        HEAP32[$6 + 288 >> 2] = jsvObjectIteratorGetKey_2($6 + 304 | 0);
        HEAP8[$6 + 287 | 0] = jsvIsFunctionParameter(HEAP32[$6 + 288 >> 2]) & 1;
        if (!(HEAP8[$6 + 287 | 0] & 1 ? 0 : HEAP16[HEAP32[44743] + 2 >> 1] == 41)) {
         HEAP32[$6 + 292 >> 2] = HEAP32[$6 + 292 >> 2] + 1;
         HEAP32[$6 + 280 >> 2] = 0;
         if (HEAP16[HEAP32[44743] + 2 >> 1] != 41) {
          HEAP32[$6 + 280 >> 2] = jspeAssignmentExpression();
         }
         HEAP32[$6 + 280 >> 2] = jsvSkipNameAndUnLock(HEAP32[$6 + 280 >> 2]);
         $1 = HEAP32[$6 + 324 >> 2];
         label$55: {
          if (HEAP8[$6 + 287 | 0] & 1) {
           $0 = jsvNewFromStringVar(HEAP32[$6 + 288 >> 2], 1, 2147483647);
           break label$55;
          }
          $0 = 0;
         }
         jsvAddFunctionParameter($1, $0, HEAP32[$6 + 280 >> 2]);
         jsvUnLock(HEAP32[$6 + 280 >> 2]);
         if (HEAP16[HEAP32[44743] + 2 >> 1] != 41) {
          if (!(jslMatch(44) & 1)) {
           HEAP32[$6 + 412 >> 2] = 0;
           break label$1;
          }
         }
        }
        jsvUnLock(HEAP32[$6 + 288 >> 2]);
        if (HEAP8[$6 + 287 | 0] & 1) {
         jsvObjectIteratorNext($6 + 304 | 0);
        }
        continue;
       }
       break;
      }
      if (!(jslMatch(41) & 1)) {
       HEAP32[$6 + 412 >> 2] = 0;
       break label$1;
      }
      break label$47;
     }
     HEAP32[$6 + 276 >> 2] = 0;
     while (1) {
      if (HEAP32[$6 + 276 >> 2] < HEAP32[$6 + 392 >> 2]) {
       HEAP32[$6 + 272 >> 2] = jsvObjectIteratorGetKey_2($6 + 304 | 0);
       HEAP8[$6 + 271 | 0] = jsvIsFunctionParameter(HEAP32[$6 + 272 >> 2]) & 1;
       $1 = HEAP32[$6 + 324 >> 2];
       label$63: {
        if (HEAP8[$6 + 271 | 0] & 1) {
         $0 = jsvNewFromStringVar(HEAP32[$6 + 272 >> 2], 1, 2147483647);
         break label$63;
        }
        $0 = 0;
       }
       jsvAddFunctionParameter($1, $0, HEAP32[HEAP32[$6 + 388 >> 2] + (HEAP32[$6 + 276 >> 2] << 2) >> 2]);
       HEAP32[$6 + 276 >> 2] = HEAP32[$6 + 276 >> 2] + 1;
       jsvUnLock(HEAP32[$6 + 272 >> 2]);
       if (HEAP8[$6 + 271 | 0] & 1) {
        jsvObjectIteratorNext($6 + 304 | 0);
       }
       continue;
      }
      break;
     }
    }
    while (1) {
     if (jsvObjectIteratorHasValue_2($6 + 304 | 0) & 1) {
      HEAP32[$6 + 264 >> 2] = jsvObjectIteratorGetKey_2($6 + 304 | 0);
      if (jsvIsString(HEAP32[$6 + 264 >> 2]) & 1) {
       label$69: {
        if (jsvIsStringEqual(HEAP32[$6 + 264 >> 2], 117081) & 1) {
         HEAP32[$6 + 320 >> 2] = jsvSkipName(HEAP32[$6 + 264 >> 2]);
         break label$69;
        }
        label$71: {
         if (jsvIsStringEqual(HEAP32[$6 + 264 >> 2], 120874) & 1) {
          HEAP32[$6 + 316 >> 2] = jsvSkipName(HEAP32[$6 + 264 >> 2]);
          break label$71;
         }
         label$73: {
          if (jsvIsStringEqual(HEAP32[$6 + 264 >> 2], 117763) & 1) {
           HEAP32[$6 + 312 >> 2] = jsvSkipName(HEAP32[$6 + 264 >> 2]);
           break label$73;
          }
          label$75: {
           if (jsvIsStringEqual(HEAP32[$6 + 264 >> 2], 115428) & 1) {
            jsvUnLock(HEAP32[$6 + 380 >> 2]);
            HEAP32[$6 + 380 >> 2] = jsvSkipName(HEAP32[$6 + 264 >> 2]);
            break label$75;
           }
           if (jsvIsFunctionParameter(HEAP32[$6 + 264 >> 2]) & 1) {
            HEAP32[$6 + 260 >> 2] = jsvSkipName(HEAP32[$6 + 264 >> 2]);
            jsvAddFunctionParameter(HEAP32[$6 + 324 >> 2], jsvNewFromStringVar(HEAP32[$6 + 264 >> 2], 1, 2147483647), HEAP32[$6 + 260 >> 2]);
            jsvUnLock(HEAP32[$6 + 260 >> 2]);
           }
          }
         }
        }
       }
      }
      jsvUnLock(HEAP32[$6 + 264 >> 2]);
      jsvObjectIteratorNext($6 + 304 | 0);
      continue;
     }
     break;
    }
    jsvObjectIteratorFree_2($6 + 304 | 0);
    if (HEAP32[$6 + 312 >> 2]) {
     HEAP32[$6 + 256 >> 2] = jsvMakeIntoVariableName(jsvNewFromStringVarComplete(HEAP32[$6 + 312 >> 2]), HEAP32[$6 + 408 >> 2]);
     jsvAddName(HEAP32[$6 + 324 >> 2], HEAP32[$6 + 256 >> 2]);
     jsvUnLock2(HEAP32[$6 + 256 >> 2], HEAP32[$6 + 312 >> 2]);
    }
    if (!(HEAP32[86758] & 112)) {
     HEAP32[$6 + 252 >> 2] = HEAP32[86752];
     HEAP32[86752] = 0;
     if (HEAP32[$6 + 320 >> 2]) {
      jspeiLoadScopesFromVar(HEAP32[$6 + 320 >> 2]);
      jsvUnLock(HEAP32[$6 + 320 >> 2]);
     }
     if (jspeiAddScope(HEAP32[$6 + 324 >> 2]) & 1) {
      HEAP32[$6 + 248 >> 2] = HEAP32[86753];
      HEAP8[$6 + 247 | 0] = HEAPU8[347020];
      HEAP32[86753] = HEAP32[$6 + 324 >> 2];
      HEAP8[347020] = 0;
      HEAP32[$6 + 240 >> 2] = HEAP32[86756];
      label$82: {
       if (HEAP32[$6 + 380 >> 2]) {
        HEAP32[86756] = jsvRef(HEAP32[$6 + 380 >> 2]);
        break label$82;
       }
       HEAP32[86756] = jsvRef(HEAP32[86750]);
      }
      if (HEAP32[$6 + 316 >> 2]) {
       HEAP8[$6 + 239 | 0] = 0;
       label$85: {
        if (HEAP32[86758] & 16384) {
         if (HEAP32[$6 + 404 >> 2]) {
          HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 404 >> 2];
          jsiConsolePrintf(144456, $6 + 16 | 0);
          break label$85;
         }
         HEAP32[$6 + 32 >> 2] = HEAP32[$6 + 404 >> 2];
         jsiConsolePrintf(145375, $6 + 32 | 0);
         break label$85;
        }
        HEAP8[$6 + 239 | 0] = (HEAP32[86758] & 8192) != 0;
        if (HEAP8[$6 + 239 | 0] & 1) {
         HEAP32[86758] = HEAP32[86758] & -8193;
        }
       }
       HEAP32[$6 + 108 >> 2] = jslSetLex($6 + 112 | 0);
       jslInit(HEAP32[$6 + 316 >> 2]);
       HEAP32[$6 + 104 >> 2] = HEAP32[86758];
       HEAP32[86758] = HEAP32[86758] & 14448 | 1;
       label$89: {
        if (jsvIsFunctionReturn(HEAP32[$6 + 408 >> 2]) & 1) {
         if (!(!(HEAP32[86758] & 8192) | (HEAP32[86758] & 63) != 1)) {
          HEAP32[HEAP32[44743] + 8 >> 2] = HEAP32[HEAP32[44743] + 4 >> 2];
          jsiDebuggerLoop();
         }
         if (!(HEAP16[HEAP32[44743] + 2 >> 1] == 59 | HEAP16[HEAP32[44743] + 2 >> 1] == 125)) {
          HEAP32[$6 + 384 >> 2] = jsvSkipNameAndUnLock(jspeExpression());
         }
         break label$89;
        }
        HEAP32[$6 + 100 >> 2] = jsvAddNamedChild(HEAP32[$6 + 324 >> 2], 0, 117107);
        HEAP8[347020] = HEAPU8[347020] - 1;
        jspeBlockNoBrackets();
        HEAP8[347020] = HEAPU8[347020] + 1;
        HEAP32[$6 + 384 >> 2] = jsvSkipName(HEAP32[$6 + 100 >> 2]);
        if (HEAP32[$6 + 100 >> 2]) {
         jsvRemoveChildAndUnLock(HEAP32[$6 + 324 >> 2], HEAP32[$6 + 100 >> 2]);
        }
       }
       HEAP32[$6 + 96 >> 2] = HEAP32[86758] & 112;
       HEAP32[86758] = HEAP32[86758] & -1664 | HEAP32[$6 + 104 >> 2] & 1663;
       HEAP8[$6 + 95 | 0] = 0;
       if (HEAP32[86758] & 57344) {
        jsiConsolePrintString(125394);
        jsfPrintJSON(HEAP32[$6 + 384 >> 2], 45);
        jsiConsolePrintChar(10);
        if (HEAP32[86758] & 32768) {
         HEAP8[$6 + 95 | 0] = 1;
         jsiDebuggerLoop();
        }
       }
       if (!(!(HEAP8[$6 + 239 | 0] & 1) | HEAP8[$6 + 95 | 0] & 1)) {
        HEAP32[86758] = HEAP32[86758] | 8192;
       }
       jslKill();
       jslSetLex(HEAP32[$6 + 108 >> 2]);
       if (HEAP32[$6 + 96 >> 2]) {
        HEAP32[86758] = HEAP32[$6 + 96 >> 2] | HEAP32[86758];
        HEAP32[$6 + 88 >> 2] = jsvObjectGetChild(HEAP32[86751], 120557, 28);
        if (HEAP32[$6 + 88 >> 2]) {
         $0 = HEAP32[$6 + 88 >> 2];
         $1 = jsvIsString(HEAP32[$6 + 404 >> 2]) & 1;
         HEAP32[$6 >> 2] = HEAP32[$6 + 404 >> 2];
         jsvAppendPrintf($0, $1 ? 144112 : 144140, $6);
         label$99: {
          if (HEAP32[44743]) {
           jspAppendStackTrace(HEAP32[$6 + 88 >> 2]);
           break label$99;
          }
          jsvAppendPrintf(HEAP32[$6 + 88 >> 2], 145399, 0);
         }
         jsvUnLock(HEAP32[$6 + 88 >> 2]);
        }
       }
      }
      if (HEAP32[86756]) {
       jsvUnRef(HEAP32[86756]);
      }
      HEAP32[86756] = HEAP32[$6 + 240 >> 2];
      jspeiRemoveScope();
      HEAP32[86753] = HEAP32[$6 + 248 >> 2];
      HEAP8[347020] = HEAPU8[$6 + 247 | 0];
     }
     jsvUnLock(HEAP32[86752]);
     HEAP32[86752] = HEAP32[$6 + 252 >> 2];
    }
    jsvUnLock2(HEAP32[$6 + 316 >> 2], HEAP32[$6 + 324 >> 2]);
   }
   jsvUnLock(HEAP32[$6 + 380 >> 2]);
   if (HEAP32[44743]) {
    jsvStringIteratorUpdatePtr(HEAP32[44743] + 88 | 0);
   }
   HEAP32[$6 + 412 >> 2] = HEAP32[$6 + 384 >> 2];
   break label$1;
  }
  if (HEAP8[$6 + 399 | 0] & 1) {
   if (jspCheckStackPosition() & 1) {
    jspeParseFunctionCallBrackets();
   }
   HEAP32[$6 + 412 >> 2] = 0;
   break label$1;
  }
  HEAP32[$6 + 412 >> 2] = 0;
 }
 __stack_pointer = $6 + 416 | 0;
 return HEAP32[$6 + 412 >> 2];
}

function jsfGetJSONWithCallback($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = __stack_pointer - 352 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 348 >> 2] = $0;
 HEAP32[$6 + 344 >> 2] = $1;
 HEAP32[$6 + 340 >> 2] = $2;
 HEAP32[$6 + 336 >> 2] = $3;
 HEAP32[$6 + 332 >> 2] = $4;
 HEAP32[$6 + 328 >> 2] = $5;
 HEAP32[$6 + 324 >> 2] = HEAP32[$6 + 340 >> 2] + 16384;
 if (!HEAP32[$6 + 336 >> 2]) {
  HEAP32[$6 + 336 >> 2] = 144372;
 }
 label$2: {
  if (jsvIsUndefined(HEAP32[$6 + 348 >> 2]) & 1) {
   cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP32[$6 + 340 >> 2] & 64 ? 117780 : 121670, 0);
   break label$2;
  }
  label$4: {
   $0 = HEAP32[$6 + 348 >> 2];
   label$5: {
    if ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 512) {
     break label$5;
    }
    if (jsuGetFreeStack() >>> 0 < 512) {
     break label$5;
    }
    if (!(jspIsInterrupted() & 1)) {
     break label$4;
    }
   }
   cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], 144345, 0);
   break label$2;
  }
  $0 = HEAP32[$6 + 348 >> 2];
  $1 = HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8 | 512;
  HEAP8[$0 + 12 | 0] = $1;
  HEAP8[$0 + 13 | 0] = $1 >>> 8;
  label$6: {
   if (jsvIsArray(HEAP32[$6 + 348 >> 2]) & 1) {
    HEAP32[$6 + 320 >> 2] = jsvGetArrayLength(HEAP32[$6 + 348 >> 2]);
    $7 = HEAP32[$6 + 340 >> 2] & 8 ? HEAP32[$6 + 320 >> 2] > 15 : $7;
    HEAP8[$6 + 319 | 0] = $7;
    HEAP8[$6 + 318 | 0] = 0;
    cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP32[$6 + 340 >> 2] & 4 ? 144223 : 123406, 0);
    HEAP32[$6 + 312 >> 2] = -1;
    HEAP8[$6 + 311 | 0] = 1;
    HEAP8[$6 + 310 | 0] = 1;
    jsvObjectIteratorNew($6 + 304 | 0, HEAP32[$6 + 348 >> 2]);
    while (1) {
     $0 = 0;
     label$10: {
      if (HEAP32[$6 + 320 >> 2] <= (HEAP32[$6 + 312 >> 2] + 1 | 0)) {
       break label$10;
      }
      $0 = 0;
      if (!(HEAP8[$6 + 311 | 0] & 1)) {
       break label$10;
      }
      $0 = jspIsInterrupted() ^ -1;
     }
     if ($0 & 1) {
      HEAP32[$6 + 300 >> 2] = jsvObjectIteratorGetKey_5($6 + 304 | 0);
      label$12: {
       label$13: {
        if (jsvObjectIteratorHasValue_8($6 + 304 | 0) & 1) {
         if (!(jsvIsNumeric(HEAP32[$6 + 300 >> 2]) & 1)) {
          break label$13;
         }
        }
        label$15: {
         if (jsvObjectIteratorHasValue_8($6 + 304 | 0) & 1) {
          $0 = jsvGetInteger(HEAP32[$6 + 300 >> 2]);
          break label$15;
         }
         $0 = HEAP32[$6 + 320 >> 2] - 1 | 0;
        }
        HEAP32[$6 + 296 >> 2] = $0;
        HEAP32[$6 + 292 >> 2] = jsvObjectIteratorGetValue_8($6 + 304 | 0);
        while (1) {
         if (HEAP32[$6 + 312 >> 2] < HEAP32[$6 + 296 >> 2]) {
          HEAP32[$6 + 312 >> 2] = HEAP32[$6 + 312 >> 2] + 1;
          if (!(!(!(HEAP8[$6 + 319 | 0] & 1) | HEAP32[$6 + 312 >> 2] < 5) & HEAP32[$6 + 312 >> 2] < (HEAP32[$6 + 320 >> 2] - 5 | 0))) {
           if (!(HEAP8[$6 + 310 | 0] & 1)) {
            cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP32[$6 + 340 >> 2] & 4 ? 144359 : 128061, 0);
           }
           HEAP8[$6 + 310 | 0] = 0;
           if (!(!(HEAP8[$6 + 319 | 0] & 1) | HEAP32[$6 + 312 >> 2] != (HEAP32[$6 + 320 >> 2] - 5 | 0))) {
            cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP32[44649], 0);
           }
           $0 = 0;
           if (HEAP32[$6 + 340 >> 2] & 1) {
            $0 = jsonNeedsNewLine(HEAP32[$6 + 292 >> 2]);
           }
           HEAP8[$6 + 291 | 0] = $0 & 1;
           if (HEAP32[$6 + 340 >> 2] & 2) {
            HEAP8[$6 + 318 | 0] = 1;
            HEAP8[$6 + 291 | 0] = 1;
           }
           if (HEAP8[$6 + 291 | 0] & 1 ? 1 : HEAP8[$6 + 318 | 0] & 1) {
            jsonNewLine(HEAP32[$6 + 324 >> 2], HEAP32[$6 + 336 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2]);
            HEAP8[$6 + 318 | 0] = 0;
           }
           label$27: {
            if (HEAP32[$6 + 312 >> 2] == HEAP32[$6 + 296 >> 2]) {
             HEAP32[$6 + 284 >> 2] = jsvNewFromInteger(HEAP32[$6 + 296 >> 2]);
             jsfGetJSONWithCallback(HEAP32[$6 + 292 >> 2], HEAP32[$6 + 284 >> 2], HEAP32[$6 + 324 >> 2], HEAP32[$6 + 336 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2]);
             jsvUnLock(HEAP32[$6 + 284 >> 2]);
             break label$27;
            }
            cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP32[$6 + 340 >> 2] & 64 ? 117780 : 121670, 0);
           }
           HEAP8[$6 + 318 | 0] = HEAP8[$6 + 291 | 0] & 1;
          }
          continue;
         }
         break;
        }
        jsvUnLock(HEAP32[$6 + 292 >> 2]);
        jsvObjectIteratorNext($6 + 304 | 0);
        break label$12;
       }
       HEAP8[$6 + 311 | 0] = 0;
      }
      jsvUnLock(HEAP32[$6 + 300 >> 2]);
      continue;
     }
     break;
    }
    if (HEAP32[$6 + 340 >> 2] & 4) {
     jsfGetJSONForObjectItWithCallback($6 + 304 | 0, HEAP32[$6 + 340 >> 2], HEAP32[$6 + 336 >> 2], HEAP32[$6 + 324 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP8[$6 + 310 | 0] & 1);
    }
    jsvObjectIteratorFree_8($6 + 304 | 0);
    if (HEAP8[$6 + 318 | 0] & 1) {
     jsonNewLine(HEAP32[$6 + 340 >> 2], HEAP32[$6 + 336 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2]);
    }
    cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP32[$6 + 340 >> 2] & 4 ? 123393 : 123394, 0);
    break label$6;
   }
   label$31: {
    if (jsvIsArrayBuffer(HEAP32[$6 + 348 >> 2]) & 1) {
     HEAP8[$6 + 223 | 0] = 1;
     jsvArrayBufferIteratorNew($6 + 224 | 0, HEAP32[$6 + 348 >> 2], 0);
     while (1) {
      if (jsvArrayBufferIteratorHasElement($6 + 224 | 0) & 1) {
       if (jsvArrayBufferIteratorGetFloatValue($6 + 224 | 0) != 0) {
        HEAP8[$6 + 223 | 0] = 0;
       }
       jsvArrayBufferIteratorNext($6 + 224 | 0);
       continue;
      }
      break;
     }
     jsvArrayBufferIteratorFree($6 + 224 | 0);
     HEAP8[$6 + 222 | 0] = (HEAP32[$6 + 340 >> 2] & 128) != 0;
     label$36: {
      if (!(!(HEAP8[$6 + 223 | 0] & 1) | HEAP8[$6 + 222 | 0] & 1)) {
       $0 = HEAP32[$6 + 332 >> 2];
       $1 = HEAP32[$6 + 328 >> 2];
       $2 = jswGetBasicObjectName(HEAP32[$6 + 348 >> 2]);
       HEAP32[$6 + 20 >> 2] = jsvGetArrayBufferLength(HEAP32[$6 + 348 >> 2]);
       HEAP32[$6 + 16 >> 2] = $2;
       cbprintf($0, $1, 142921, $6 + 16 | 0);
       break label$36;
      }
      HEAP32[$6 + 216 >> 2] = jswGetBasicObjectName(HEAP32[$6 + 348 >> 2]);
      HEAP8[$6 + 215 | 0] = !strcmp(HEAP32[$6 + 216 >> 2], 116488);
      if (HEAP8[$6 + 215 | 0] & 1) {
       HEAP32[$6 + 216 >> 2] = 111734;
      }
      $0 = HEAP32[$6 + 332 >> 2];
      $1 = HEAP32[$6 + 328 >> 2];
      $2 = HEAP8[$6 + 222 | 0] & 1;
      HEAP32[$6 >> 2] = HEAP32[$6 + 216 >> 2];
      cbprintf($0, $1, $2 ? 123406 : 123399, $6);
      if (HEAP32[$6 + 340 >> 2] & 2) {
       jsonNewLine(HEAP32[$6 + 324 >> 2], HEAP32[$6 + 336 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2]);
      }
      HEAP32[$6 + 208 >> 2] = jsvGetArrayBufferLength(HEAP32[$6 + 348 >> 2]);
      $7 = HEAP32[$6 + 340 >> 2] & 8 ? HEAPU32[$6 + 208 >> 2] > 15 : $7;
      HEAP8[$6 + 207 | 0] = $7;
      jsvArrayBufferIteratorNew($6 + 224 | 0, HEAP32[$6 + 348 >> 2], 0);
      while (1) {
       $0 = 0;
       if (jsvArrayBufferIteratorHasElement($6 + 224 | 0) & 1) {
        $0 = jspIsInterrupted() ^ -1;
       }
       if ($0 & 1) {
        if (!(!(!(HEAP8[$6 + 207 | 0] & 1) | HEAPU32[$6 + 272 >> 2] < 5) & HEAPU32[$6 + 272 >> 2] < HEAP32[$6 + 208 >> 2] - 5 >>> 0)) {
         if (HEAP32[$6 + 272 >> 2]) {
          cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP32[$6 + 340 >> 2] & 4 ? 144359 : 128061, 0);
         }
         if (HEAP32[$6 + 340 >> 2] & 2) {
          jsonNewLine(HEAP32[$6 + 324 >> 2], HEAP32[$6 + 336 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2]);
         }
         if (!(!(HEAP8[$6 + 207 | 0] & 1) | HEAP32[$6 + 272 >> 2] != (HEAP32[$6 + 208 >> 2] - 5 | 0))) {
          cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP32[44649], 0);
         }
         HEAP32[$6 + 200 >> 2] = jsvArrayBufferIteratorGetValue($6 + 224 | 0, 0);
         jsfGetJSONWithCallback(HEAP32[$6 + 200 >> 2], 0, HEAP32[$6 + 324 >> 2], HEAP32[$6 + 336 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2]);
         jsvUnLock(HEAP32[$6 + 200 >> 2]);
        }
        jsvArrayBufferIteratorNext($6 + 224 | 0);
        continue;
       }
       break;
      }
      if (HEAP32[$6 + 340 >> 2] & 2) {
       jsonNewLine(HEAP32[$6 + 340 >> 2], HEAP32[$6 + 336 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2]);
      }
      jsvArrayBufferIteratorFree($6 + 224 | 0);
      cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP8[$6 + 222 | 0] & 1 ? 123394 : 143089, 0);
      if (!(!(HEAP8[$6 + 215 | 0] & 1) | HEAP8[$6 + 222 | 0] & 1)) {
       cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], 116402, 0);
      }
     }
     break label$31;
    }
    label$51: {
     if (jsvIsObject(HEAP32[$6 + 348 >> 2]) & 1) {
      label$53: {
       if (HEAP32[$6 + 340 >> 2] & 32) {
        $0 = jsiGetDeviceFromClass(HEAP32[$6 + 348 >> 2]) & 255;
        break label$53;
       }
       $0 = 0;
      }
      HEAP8[$6 + 199 | 0] = $0;
      label$55: {
       if (HEAPU8[$6 + 199 | 0]) {
        $0 = HEAP32[$6 + 332 >> 2];
        $1 = HEAP32[$6 + 328 >> 2];
        HEAP32[$6 + 32 >> 2] = jshGetDeviceString(HEAPU8[$6 + 199 | 0]);
        cbprintf($0, $1, 115959, $6 + 32 | 0);
        break label$55;
       }
       HEAP8[$6 + 198 | 0] = 1;
       if (HEAP32[$6 + 340 >> 2] & 256) {
        HEAP32[$6 + 192 >> 2] = jsvObjectGetChildIfExists(HEAP32[$6 + 348 >> 2], 123007);
        if (jsvHasChildren(HEAP32[$6 + 192 >> 2]) & 1) {
         HEAP32[$6 + 188 >> 2] = jsvObjectGetChildIfExists(HEAP32[$6 + 192 >> 2], 116071);
         if (HEAP32[$6 + 188 >> 2]) {
          HEAP32[$6 + 184 >> 2] = jsvGetIndexOf(HEAP32[86750], HEAP32[$6 + 188 >> 2], 1);
          if (HEAP32[$6 + 184 >> 2]) {
           $0 = HEAP32[$6 + 332 >> 2];
           $1 = HEAP32[$6 + 328 >> 2];
           HEAP32[$6 + 64 >> 2] = HEAP32[$6 + 184 >> 2];
           cbprintf($0, $1, 144258, $6 - -64 | 0);
          }
          jsvUnLock2(HEAP32[$6 + 184 >> 2], HEAP32[$6 + 188 >> 2]);
          HEAP32[$6 + 180 >> 2] = jspGetNamedField(HEAP32[$6 + 348 >> 2], 118770, 0);
          label$61: {
           if (!(jsvIsFunction(HEAP32[$6 + 180 >> 2]) & 1)) {
            break label$61;
           }
           $0 = HEAP32[$6 + 180 >> 2];
           if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 1) {
            break label$61;
           }
           HEAP32[$6 + 176 >> 2] = jspExecuteFunction(HEAP32[$6 + 180 >> 2], HEAP32[$6 + 348 >> 2], 0, 0);
           $0 = HEAP32[$6 + 332 >> 2];
           $1 = HEAP32[$6 + 328 >> 2];
           HEAP32[$6 + 48 >> 2] = HEAP32[$6 + 176 >> 2];
           cbprintf($0, $1, 112309, $6 + 48 | 0);
           jsvUnLock(HEAP32[$6 + 176 >> 2]);
           HEAP8[$6 + 198 | 0] = 0;
          }
          jsvUnLock(HEAP32[$6 + 180 >> 2]);
         }
        }
        jsvUnLock(HEAP32[$6 + 192 >> 2]);
       }
       if (HEAP8[$6 + 198 | 0] & 1) {
        HEAP32[$6 + 172 >> 2] = 0;
        if (HEAP32[$6 + 340 >> 2] & 8192) {
         HEAP32[$6 + 172 >> 2] = jspGetNamedField(HEAP32[$6 + 348 >> 2], 124089, 0);
        }
        label$64: {
         if (jsvIsFunction(HEAP32[$6 + 172 >> 2]) & 1) {
          label$66: {
           if (HEAP32[$6 + 344 >> 2]) {
            $0 = jsvAsString(HEAP32[$6 + 344 >> 2]);
            break label$66;
           }
           $0 = 0;
          }
          HEAP32[$6 + 168 >> 2] = $0;
          HEAP32[$6 + 164 >> 2] = jspExecuteFunction(HEAP32[$6 + 172 >> 2], HEAP32[$6 + 348 >> 2], 1, $6 + 168 | 0);
          jsvUnLock(HEAP32[$6 + 168 >> 2]);
          if (HEAP32[$6 + 164 >> 2] == HEAP32[$6 + 348 >> 2]) {
           $0 = HEAP32[$6 + 348 >> 2];
           $1 = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & -513;
           HEAP8[$0 + 12 | 0] = $1;
           HEAP8[$0 + 13 | 0] = $1 >>> 8;
          }
          jsfGetJSONWithCallback(HEAP32[$6 + 164 >> 2], 0, HEAP32[$6 + 340 >> 2] & -8193, HEAP32[$6 + 336 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2]);
          jsvUnLock(HEAP32[$6 + 164 >> 2]);
          break label$64;
         }
         jsvObjectIteratorNew($6 + 160 | 0, HEAP32[$6 + 348 >> 2]);
         cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP32[$6 + 340 >> 2] & 4 ? 144076 : 111533, 0);
         HEAP8[$6 + 159 | 0] = jsfGetJSONForObjectItWithCallback($6 + 160 | 0, HEAP32[$6 + 340 >> 2], HEAP32[$6 + 336 >> 2], HEAP32[$6 + 324 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], 1) & 1;
         jsvObjectIteratorFree_8($6 + 160 | 0);
         if (HEAP8[$6 + 159 | 0] & 1) {
          jsonNewLine(HEAP32[$6 + 340 >> 2], HEAP32[$6 + 336 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2]);
         }
         cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], HEAP32[$6 + 340 >> 2] & 4 ? 111522 : 111526, 0);
        }
        jsvUnLock(HEAP32[$6 + 172 >> 2]);
       }
      }
      break label$51;
     }
     label$70: {
      if (jsvIsFunction(HEAP32[$6 + 348 >> 2]) & 1) {
       if (HEAP32[$6 + 340 >> 2] & 16) {
        cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], 121670, 0);
        break label$70;
       }
       cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], 144102, 0);
       jsfGetJSONForFunctionWithCallback(HEAP32[$6 + 348 >> 2], HEAP32[$6 + 324 >> 2], HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2]);
       break label$70;
      }
      label$73: {
       label$74: {
        label$75: {
         if (jsvIsString(HEAP32[$6 + 348 >> 2]) & 1) {
          if (!(jsvIsName(HEAP32[$6 + 348 >> 2]) & 1)) {
           break label$75;
          }
         }
         if (!(HEAP32[$6 + 340 >> 2] & 1024)) {
          break label$74;
         }
         if (!(jsvIsPin(HEAP32[$6 + 348 >> 2]) & 1)) {
          break label$74;
         }
        }
        label$77: {
         label$78: {
          if (!(HEAP32[$6 + 340 >> 2] & 8)) {
           break label$78;
          }
          if (jsvGetStringLength(HEAP32[$6 + 348 >> 2]) >>> 0 <= 40) {
           break label$78;
          }
          HEAP32[$6 + 152 >> 2] = jsvNewFromStringVar(HEAP32[$6 + 348 >> 2], 0, 17);
          HEAP32[$6 + 148 >> 2] = jsvNewFromStringVar(HEAP32[$6 + 348 >> 2], jsvGetStringLength(HEAP32[$6 + 348 >> 2]) - 17 | 0, 17);
          $0 = HEAP32[$6 + 332 >> 2];
          $1 = HEAP32[$6 + 328 >> 2];
          $2 = HEAP32[$6 + 152 >> 2];
          $3 = HEAP32[44649];
          HEAP32[$6 + 88 >> 2] = HEAP32[$6 + 148 >> 2];
          HEAP32[$6 + 84 >> 2] = $3;
          HEAP32[$6 + 80 >> 2] = $2;
          cbprintf($0, $1, 116651, $6 + 80 | 0);
          jsvUnLock2(HEAP32[$6 + 152 >> 2], HEAP32[$6 + 148 >> 2]);
          break label$77;
         }
         $0 = HEAP32[$6 + 332 >> 2];
         $1 = HEAP32[$6 + 328 >> 2];
         $2 = HEAP32[$6 + 340 >> 2] & 2048;
         HEAP32[$6 + 96 >> 2] = HEAP32[$6 + 348 >> 2];
         cbprintf($0, $1, $2 ? 124021 : 116826, $6 + 96 | 0);
        }
        break label$73;
       }
       label$79: {
        label$80: {
         if (!(HEAP32[$6 + 340 >> 2] & 4096)) {
          break label$80;
         }
         if (!(jsvIsFloat(HEAP32[$6 + 348 >> 2]) & 1)) {
          break label$80;
         }
         __DOUBLE_BITS_5(jsvGetFloat(HEAP32[$6 + 348 >> 2]));
         if ((i64toi32_i32$HIGH_BITS & 2147483647) >>> 0 < 2146435072) {
          break label$80;
         }
         cbprintf(HEAP32[$6 + 332 >> 2], HEAP32[$6 + 328 >> 2], 117780, 0);
         break label$79;
        }
        $0 = HEAP32[$6 + 332 >> 2];
        $1 = HEAP32[$6 + 328 >> 2];
        HEAP32[$6 + 112 >> 2] = HEAP32[$6 + 348 >> 2];
        cbprintf($0, $1, 112309, $6 + 112 | 0);
       }
      }
     }
    }
   }
  }
  $0 = HEAP32[$6 + 348 >> 2];
  $1 = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & -513;
  HEAP8[$0 + 12 | 0] = $1;
  HEAP8[$0 + 13 | 0] = $1 >>> 8;
 }
 __stack_pointer = $6 + 352 | 0;
}

function jsvMathsOp($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $3 = __stack_pointer - 80 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 72 >> 2] = $0;
 HEAP32[$3 + 68 >> 2] = $1;
 HEAP32[$3 + 64 >> 2] = $2;
 label$1: {
  if (!(HEAP32[$3 + 64 >> 2] != 139 & HEAP32[$3 + 64 >> 2] != 141)) {
   HEAP8[$3 + 63 | 0] = jsvMathsOpTypeEqual(HEAP32[$3 + 72 >> 2], HEAP32[$3 + 68 >> 2]) & 1;
   if (HEAP32[$3 + 64 >> 2] == 139) {
    HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP8[$3 + 63 | 0] & 1);
    break label$1;
   }
   HEAP32[$3 + 76 >> 2] = jsvNewFromBool((HEAPU8[$3 + 63 | 0] ^ -1) & 1);
   break label$1;
  }
  $0 = 1;
  label$5: {
   if (HEAP32[$3 + 64 >> 2] == 38) {
    break label$5;
   }
   $0 = 1;
   if (HEAP32[$3 + 64 >> 2] == 124) {
    break label$5;
   }
   $0 = 1;
   if (HEAP32[$3 + 64 >> 2] == 94) {
    break label$5;
   }
   $0 = 1;
   if (HEAP32[$3 + 64 >> 2] == 143) {
    break label$5;
   }
   $0 = 1;
   if (HEAP32[$3 + 64 >> 2] == 146) {
    break label$5;
   }
   $0 = HEAP32[$3 + 64 >> 2] == 147;
  }
  HEAP8[$3 + 62 | 0] = $0;
  $0 = 1;
  label$6: {
   if (HEAP8[$3 + 62 | 0] & 1) {
    break label$6;
   }
   $0 = 1;
   if (HEAP32[$3 + 64 >> 2] == 42) {
    break label$6;
   }
   $0 = 1;
   if (HEAP32[$3 + 64 >> 2] == 47) {
    break label$6;
   }
   $0 = 1;
   if (HEAP32[$3 + 64 >> 2] == 37) {
    break label$6;
   }
   $0 = HEAP32[$3 + 64 >> 2] == 45;
  }
  HEAP8[$3 + 61 | 0] = $0;
  $0 = 1;
  label$7: {
   if (HEAP32[$3 + 64 >> 2] == 138) {
    break label$7;
   }
   $0 = 1;
   if (HEAP32[$3 + 64 >> 2] == 140) {
    break label$7;
   }
   $0 = 1;
   if (HEAP32[$3 + 64 >> 2] == 60) {
    break label$7;
   }
   $0 = 1;
   if (HEAP32[$3 + 64 >> 2] == 142) {
    break label$7;
   }
   $0 = 1;
   if (HEAP32[$3 + 64 >> 2] == 62) {
    break label$7;
   }
   $0 = HEAP32[$3 + 64 >> 2] == 145;
  }
  HEAP8[$3 + 60 | 0] = $0;
  if (HEAP8[$3 + 60 | 0] & 1) {
   label$9: {
    label$10: {
     if (!(jsvIsNumeric(HEAP32[$3 + 72 >> 2]) & 1)) {
      break label$10;
     }
     if (!(jsvIsString(HEAP32[$3 + 68 >> 2]) & 1)) {
      break label$10;
     }
     HEAP8[$3 + 61 | 0] = 1;
     if (jsvIsIntegerish(HEAP32[$3 + 72 >> 2]) & 1) {
      $4 = jsvIsStringNumericInt(HEAP32[$3 + 68 >> 2], 0);
     }
     HEAP8[$3 + 62 | 0] = $4 & 1;
     break label$9;
    }
    label$12: {
     if (!(jsvIsNumeric(HEAP32[$3 + 68 >> 2]) & 1)) {
      break label$12;
     }
     if (!(jsvIsString(HEAP32[$3 + 72 >> 2]) & 1)) {
      break label$12;
     }
     HEAP8[$3 + 61 | 0] = 1;
     if (jsvIsIntegerish(HEAP32[$3 + 68 >> 2]) & 1) {
      $4 = jsvIsStringNumericInt(HEAP32[$3 + 72 >> 2], 0);
     }
     HEAP8[$3 + 62 | 0] = $4 & 1;
    }
   }
  }
  label$14: {
   if (!(jsvIsUndefined(HEAP32[$3 + 72 >> 2]) & 1)) {
    break label$14;
   }
   if (!(jsvIsUndefined(HEAP32[$3 + 68 >> 2]) & 1)) {
    break label$14;
   }
   if (HEAP32[$3 + 64 >> 2] == 138) {
    HEAP32[$3 + 76 >> 2] = jsvNewFromBool(1);
    break label$1;
   }
   if (HEAP32[$3 + 64 >> 2] == 140) {
    HEAP32[$3 + 76 >> 2] = jsvNewFromBool(0);
    break label$1;
   }
   HEAP32[$3 + 76 >> 2] = 0;
   break label$1;
  }
  label$17: {
   label$18: {
    if (HEAP8[$3 + 61 | 0] & 1) {
     break label$18;
    }
    label$19: {
     if (jsvIsNumeric(HEAP32[$3 + 72 >> 2]) & 1) {
      break label$19;
     }
     if (jsvIsUndefined(HEAP32[$3 + 72 >> 2]) & 1) {
      break label$19;
     }
     if (!(jsvIsNull(HEAP32[$3 + 72 >> 2]) & 1)) {
      break label$17;
     }
    }
    if (jsvIsNumeric(HEAP32[$3 + 68 >> 2]) & 1) {
     break label$18;
    }
    if (jsvIsUndefined(HEAP32[$3 + 68 >> 2]) & 1) {
     break label$18;
    }
    if (!(jsvIsNull(HEAP32[$3 + 68 >> 2]) & 1)) {
     break label$17;
    }
   }
   label$20: {
    if (!(HEAP8[$3 + 62 | 0] & 1)) {
     if (!(jsvIsIntegerish(HEAP32[$3 + 72 >> 2]) & 1)) {
      break label$20;
     }
     if (!(jsvIsIntegerish(HEAP32[$3 + 68 >> 2]) & 1)) {
      break label$20;
     }
    }
    HEAP32[$3 + 56 >> 2] = jsvGetInteger(HEAP32[$3 + 72 >> 2]);
    HEAP32[$3 + 52 >> 2] = jsvGetInteger(HEAP32[$3 + 68 >> 2]);
    label$22: {
     switch (HEAP32[$3 + 64 >> 2] - 37 | 0) {
     case 6:
      $0 = HEAP32[$3 + 56 >> 2];
      $4 = $0 >> 31;
      $2 = $0;
      $1 = $4;
      $4 = HEAP32[$3 + 52 >> 2];
      $0 = $4 >> 31;
      $5 = $4;
      $4 = $0;
      $0 = $1;
      $1 = $0 + $4 | 0;
      $2 = $2 + $5 | 0;
      $1 = $2 >>> 0 < $5 >>> 0 ? $1 + 1 | 0 : $1;
      HEAP32[$3 + 76 >> 2] = jsvNewFromLongInteger($2, $1);
      break label$1;

     case 8:
      $1 = HEAP32[$3 + 56 >> 2];
      $2 = $1 >> 31;
      $0 = $1;
      $6 = $2;
      $2 = HEAP32[$3 + 52 >> 2];
      $1 = $2 >> 31;
      $7 = $1;
      $5 = $2;
      $4 = $0 - $2 | 0;
      $1 = $6;
      $2 = $7;
      $2 = $2 + ($0 >>> 0 < $5 >>> 0) | 0;
      $2 = $1 - $2 | 0;
      HEAP32[$3 + 76 >> 2] = jsvNewFromLongInteger($4, $2);
      break label$1;

     case 5:
      $2 = HEAP32[$3 + 56 >> 2];
      $0 = $2 >> 31;
      $5 = $2;
      $1 = $0;
      $0 = HEAP32[$3 + 52 >> 2];
      $2 = $0 >> 31;
      $4 = $2;
      $2 = $1;
      $1 = $0;
      $0 = $4;
      $0 = __wasm_i64_mul($5, $2, $1, $0);
      $2 = i64toi32_i32$HIGH_BITS;
      HEAP32[$3 + 76 >> 2] = jsvNewFromLongInteger($0, $2);
      break label$1;

     case 10:
      HEAP32[$3 + 76 >> 2] = jsvNewFromFloat(+HEAP32[$3 + 56 >> 2] / +HEAP32[$3 + 52 >> 2]);
      break label$1;

     case 1:
      HEAP32[$3 + 76 >> 2] = jsvNewFromInteger(HEAP32[$3 + 56 >> 2] & HEAP32[$3 + 52 >> 2]);
      break label$1;

     case 87:
      HEAP32[$3 + 76 >> 2] = jsvNewFromInteger(HEAP32[$3 + 56 >> 2] | HEAP32[$3 + 52 >> 2]);
      break label$1;

     case 57:
      HEAP32[$3 + 76 >> 2] = jsvNewFromInteger(HEAP32[$3 + 56 >> 2] ^ HEAP32[$3 + 52 >> 2]);
      break label$1;

     case 0:
      if (HEAP32[$3 + 52 >> 2] < 0) {
       HEAP32[$3 + 52 >> 2] = 0 - HEAP32[$3 + 52 >> 2];
      }
      label$41: {
       if (HEAP32[$3 + 52 >> 2]) {
        $0 = jsvNewFromInteger(HEAP32[$3 + 56 >> 2] % HEAP32[$3 + 52 >> 2] | 0);
        break label$41;
       }
       $0 = jsvNewFromFloat(nan);
      }
      HEAP32[$3 + 76 >> 2] = $0;
      break label$1;

     case 106:
      HEAP32[$3 + 76 >> 2] = jsvNewFromInteger(HEAP32[$3 + 56 >> 2] << HEAP32[$3 + 52 >> 2]);
      break label$1;

     case 109:
      HEAP32[$3 + 76 >> 2] = jsvNewFromInteger(HEAP32[$3 + 56 >> 2] >> HEAP32[$3 + 52 >> 2]);
      break label$1;

     case 110:
      HEAP32[$3 + 76 >> 2] = jsvNewFromLongInteger(HEAP32[$3 + 56 >> 2] >>> HEAP32[$3 + 52 >> 2] | 0, 0);
      break label$1;

     case 101:
      if (HEAP32[$3 + 56 >> 2] == HEAP32[$3 + 52 >> 2]) {
       $5 = (jsvIsNull(HEAP32[$3 + 72 >> 2]) & 1) == (jsvIsNull(HEAP32[$3 + 68 >> 2]) & 1);
      }
      HEAP32[$3 + 76 >> 2] = jsvNewFromBool($5);
      break label$1;

     case 103:
      $0 = 1;
      if (HEAP32[$3 + 56 >> 2] == HEAP32[$3 + 52 >> 2]) {
       $0 = (jsvIsNull(HEAP32[$3 + 72 >> 2]) & 1) != (jsvIsNull(HEAP32[$3 + 68 >> 2]) & 1);
      }
      HEAP32[$3 + 76 >> 2] = jsvNewFromBool($0);
      break label$1;

     case 23:
      HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 56 >> 2] < HEAP32[$3 + 52 >> 2]);
      break label$1;

     case 105:
      HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 56 >> 2] <= HEAP32[$3 + 52 >> 2]);
      break label$1;

     case 25:
      HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 56 >> 2] > HEAP32[$3 + 52 >> 2]);
      break label$1;

     case 108:
      HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 56 >> 2] >= HEAP32[$3 + 52 >> 2]);
      break label$1;

     default:
      break label$22;
     }
    }
    HEAP32[$3 + 76 >> 2] = jsvMathsOpError(HEAP32[$3 + 64 >> 2], 116384);
    break label$1;
   }
   HEAPF64[$3 + 40 >> 3] = jsvGetFloat(HEAP32[$3 + 72 >> 2]);
   HEAPF64[$3 + 32 >> 3] = jsvGetFloat(HEAP32[$3 + 68 >> 2]);
   label$45: {
    switch (HEAP32[$3 + 64 >> 2] - 37 | 0) {
    case 6:
     HEAP32[$3 + 76 >> 2] = jsvNewFromFloat(HEAPF64[$3 + 40 >> 3] + HEAPF64[$3 + 32 >> 3]);
     break label$1;

    case 8:
     HEAP32[$3 + 76 >> 2] = jsvNewFromFloat(HEAPF64[$3 + 40 >> 3] - HEAPF64[$3 + 32 >> 3]);
     break label$1;

    case 5:
     HEAP32[$3 + 76 >> 2] = jsvNewFromFloat(HEAPF64[$3 + 40 >> 3] * HEAPF64[$3 + 32 >> 3]);
     break label$1;

    case 10:
     HEAP32[$3 + 76 >> 2] = jsvNewFromFloat(HEAPF64[$3 + 40 >> 3] / HEAPF64[$3 + 32 >> 3]);
     break label$1;

    case 0:
     HEAP32[$3 + 76 >> 2] = jsvNewFromFloat(jswrap_math_mod(HEAPF64[$3 + 40 >> 3], HEAPF64[$3 + 32 >> 3]));
     break label$1;

    case 101:
    case 103:
     if (HEAPF64[$3 + 40 >> 3] == HEAPF64[$3 + 32 >> 3]) {
      $5 = (jsvIsNull(HEAP32[$3 + 72 >> 2]) & 1) == (jsvIsNull(HEAP32[$3 + 68 >> 2]) & 1);
     }
     HEAP8[$3 + 31 | 0] = $5;
     label$57: {
      label$58: {
       if (jsvIsNull(HEAP32[$3 + 72 >> 2]) & 1) {
        if (jsvIsUndefined(HEAP32[$3 + 68 >> 2]) & 1) {
         break label$58;
        }
       }
       if (!(jsvIsNull(HEAP32[$3 + 68 >> 2]) & 1)) {
        break label$57;
       }
       if (!(jsvIsUndefined(HEAP32[$3 + 72 >> 2]) & 1)) {
        break label$57;
       }
      }
      HEAP8[$3 + 31 | 0] = 1;
     }
     if (HEAP32[$3 + 64 >> 2] == 138) {
      $0 = HEAP8[$3 + 31 | 0] & 1;
     } else {
      $0 = (HEAPU8[$3 + 31 | 0] ^ -1) & 1;
     }
     HEAP32[$3 + 76 >> 2] = jsvNewFromBool($0);
     break label$1;

    case 23:
     HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAPF64[$3 + 40 >> 3] < HEAPF64[$3 + 32 >> 3]);
     break label$1;

    case 105:
     HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAPF64[$3 + 40 >> 3] <= HEAPF64[$3 + 32 >> 3]);
     break label$1;

    case 25:
     HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAPF64[$3 + 40 >> 3] > HEAPF64[$3 + 32 >> 3]);
     break label$1;

    case 108:
     HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAPF64[$3 + 40 >> 3] >= HEAPF64[$3 + 32 >> 3]);
     break label$1;

    default:
     break label$45;
    }
   }
   HEAP32[$3 + 76 >> 2] = jsvMathsOpError(HEAP32[$3 + 64 >> 2], 120152);
   break label$1;
  }
  label$62: {
   label$63: {
    if (jsvIsArray(HEAP32[$3 + 72 >> 2]) & 1) {
     break label$63;
    }
    if (jsvIsObject(HEAP32[$3 + 72 >> 2]) & 1) {
     break label$63;
    }
    if (jsvIsFunction(HEAP32[$3 + 72 >> 2]) & 1) {
     break label$63;
    }
    if (jsvIsArray(HEAP32[$3 + 68 >> 2]) & 1) {
     break label$63;
    }
    if (jsvIsObject(HEAP32[$3 + 68 >> 2]) & 1) {
     break label$63;
    }
    if (!(jsvIsFunction(HEAP32[$3 + 68 >> 2]) & 1)) {
     break label$62;
    }
   }
   if ((jsvIsArray(HEAP32[$3 + 72 >> 2]) & 1) != (jsvIsArray(HEAP32[$3 + 68 >> 2]) & 1) | HEAP32[$3 + 64 >> 2] != 138 & HEAP32[$3 + 64 >> 2] != 140) {
    break label$62;
   }
   HEAP8[$3 + 30 | 0] = HEAP32[$3 + 72 >> 2] == HEAP32[$3 + 68 >> 2];
   label$65: {
    if (!(jsvIsNativeFunction(HEAP32[$3 + 72 >> 2]) & 1)) {
     if (!(jsvIsNativeFunction(HEAP32[$3 + 68 >> 2]) & 1)) {
      break label$65;
     }
    }
    $0 = 0;
    label$67: {
     if (!HEAP32[$3 + 72 >> 2]) {
      break label$67;
     }
     $0 = 0;
     if (!HEAP32[$3 + 68 >> 2]) {
      break label$67;
     }
     $1 = HEAP32[$3 + 72 >> 2];
     $2 = HEAP32[$3 + 68 >> 2];
     $0 = 0;
     if ((HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24)) != (HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24))) {
      break label$67;
     }
     $1 = HEAP32[$3 + 72 >> 2];
     $2 = HEAP32[$3 + 68 >> 2];
     $0 = 0;
     if ((HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8) != (HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8)) {
      break label$67;
     }
     $0 = (jsvGetFirstChild(HEAP32[$3 + 72 >> 2]) & 65535) == (jsvGetFirstChild(HEAP32[$3 + 68 >> 2]) & 65535);
    }
    HEAP8[$3 + 30 | 0] = $0;
   }
   label$68: {
    switch (HEAP32[$3 + 64 >> 2] - 138 | 0) {
    case 0:
     HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP8[$3 + 30 | 0] & 1);
     break label$1;

    case 2:
     HEAP32[$3 + 76 >> 2] = jsvNewFromBool((HEAPU8[$3 + 30 | 0] ^ -1) & 1);
     break label$1;

    default:
     break label$68;
    }
   }
   HEAP32[$3 + 76 >> 2] = jsvMathsOpError(HEAP32[$3 + 64 >> 2], jsvIsArray(HEAP32[$3 + 72 >> 2]) & 1 ? 111833 : 113254);
   break label$1;
  }
  HEAP32[$3 + 24 >> 2] = jsvAsString(HEAP32[$3 + 72 >> 2]);
  HEAP32[$3 + 20 >> 2] = jsvAsString(HEAP32[$3 + 68 >> 2]);
  if (!(HEAP32[$3 + 20 >> 2] ? HEAP32[$3 + 24 >> 2] : 0)) {
   jsvUnLock2(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
   HEAP32[$3 + 76 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$3 + 64 >> 2] == 43) {
   $0 = HEAP32[$3 + 24 >> 2];
   HEAP16[$3 + 14 >> 1] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
   label$74: {
    label$75: {
     if (HEAPU16[$3 + 14 >> 1] < 28 | HEAPU16[$3 + 14 >> 1] > 37) {
      break label$75;
     }
     if ((jsvGetLocks(HEAP32[$3 + 24 >> 2]) & 255) != 1) {
      break label$75;
     }
     if (jsvGetRefs(HEAP32[$3 + 24 >> 2]) & 65535) {
      break label$75;
     }
     HEAP32[$3 + 16 >> 2] = jsvLockAgain(HEAP32[$3 + 24 >> 2]);
     break label$74;
    }
    label$76: {
     if (!(!(HEAPU16[$3 + 14 >> 1] == 38 | HEAPU16[$3 + 14 >> 1] == 39) & HEAPU16[$3 + 14 >> 1] != 40)) {
      HEAP32[$3 + 16 >> 2] = jsvNewFromEmptyString_1();
      if (HEAP32[$3 + 16 >> 2]) {
       jsvAppendStringVarComplete(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 24 >> 2]);
      }
      break label$76;
     }
     HEAP32[$3 + 16 >> 2] = jsvCopy(HEAP32[$3 + 24 >> 2], 0);
    }
   }
   if (HEAP32[$3 + 16 >> 2]) {
    jsvAppendStringVarComplete(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 20 >> 2]);
   }
   jsvUnLock2(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
   HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 16 >> 2];
   break label$1;
  }
  HEAP32[$3 + 8 >> 2] = jsvCompareString(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], 0, 0, 0);
  jsvUnLock2(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
  label$81: {
   label$82: {
    label$83: {
     label$84: {
      $0 = HEAP32[$3 + 64 >> 2];
      if (($0 | 0) != 60) {
       if (($0 | 0) == 62) {
        break label$83;
       }
       label$86: {
        if (($0 | 0) != 138) {
         switch ($0 - 140 | 0) {
         case 5:
          break label$82;

         case 2:
          break label$84;

         case 0:
          break label$86;

         default:
          break label$81;
         }
        }
        HEAP32[$3 + 76 >> 2] = jsvNewFromBool(!HEAP32[$3 + 8 >> 2]);
        break label$1;
       }
       HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 8 >> 2] != 0);
       break label$1;
      }
      HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 8 >> 2] < 0);
      break label$1;
     }
     HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 8 >> 2] <= 0);
     break label$1;
    }
    HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 8 >> 2] > 0);
    break label$1;
   }
   HEAP32[$3 + 76 >> 2] = jsvNewFromBool(HEAP32[$3 + 8 >> 2] >= 0);
   break label$1;
  }
  HEAP32[$3 + 76 >> 2] = jsvMathsOpError(HEAP32[$3 + 64 >> 2], 118935);
 }
 __stack_pointer = $3 + 80 | 0;
 return HEAP32[$3 + 76 >> 2];
}

function jswrap_graphics_drawImage($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0;
 $5 = __stack_pointer - 784 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 776 >> 2] = $0;
 HEAP32[$5 + 772 >> 2] = $1;
 HEAP32[$5 + 768 >> 2] = $2;
 HEAP32[$5 + 764 >> 2] = $3;
 HEAP32[$5 + 760 >> 2] = $4;
 label$1: {
  if (!(graphicsGetFromVar($5 + 688 | 0, HEAP32[$5 + 776 >> 2]) & 1)) {
   HEAP32[$5 + 780 >> 2] = 0;
   break label$1;
  }
  if (!(_jswrap_graphics_parseImage($5 + 688 | 0, HEAP32[$5 + 772 >> 2], 0, $5 + 600 | 0) & 1)) {
   HEAP32[$5 + 780 >> 2] = 0;
   break label$1;
  }
  HEAPF64[$5 + 592 >> 3] = 1;
  HEAPF64[$5 + 584 >> 3] = 0;
  HEAP8[$5 + 583 | 0] = 0;
  HEAP8[$5 + 582 | 0] = 0;
  if (jsvIsObject(HEAP32[$5 + 760 >> 2]) & 1) {
   HEAP32[$5 + 576 >> 2] = jsvObjectGetIntegerChild(HEAP32[$5 + 760 >> 2], 120043);
   if (HEAP32[$5 + 576 >> 2] > 0) {
    HEAP32[$5 + 624 >> 2] = HEAP32[$5 + 624 >> 2] + Math_imul(HEAPU16[$5 + 650 >> 1], HEAP32[$5 + 576 >> 2]);
   }
   HEAPF64[$5 + 592 >> 3] = jsvObjectGetFloatChild(HEAP32[$5 + 760 >> 2], 120250);
   $1 = __DOUBLE_BITS_11(HEAPF64[$5 + 592 >> 3]);
   $2 = $1;
   $0 = i64toi32_i32$HIGH_BITS;
   $1 = $0 & 2147483647;
   if (HEAPF64[$5 + 592 >> 3] <= 0 ? 1 : ($1 | 0) == 2146435072 | $1 >>> 0 > 2146435072) {
    HEAPF64[$5 + 592 >> 3] = 1;
   }
   HEAPF64[$5 + 584 >> 3] = jsvObjectGetFloatChild(HEAP32[$5 + 760 >> 2], 119658);
   $0 = __DOUBLE_BITS_11(HEAPF64[$5 + 584 >> 3]);
   $2 = $0;
   $1 = i64toi32_i32$HIGH_BITS;
   $0 = $1 & 2147483647;
   HEAP8[$5 + 583 | 0] = $0 >>> 0 < 2146435072;
   if (!(HEAP8[$5 + 583 | 0] & 1)) {
    HEAPF64[$5 + 584 >> 3] = 0;
   }
   HEAP8[$5 + 582 | 0] = jsvObjectGetBoolChild(HEAP32[$5 + 760 >> 2], 116222) & 1;
  }
  HEAP32[$5 + 572 >> 2] = 0;
  HEAP32[$5 + 568 >> 2] = 0;
  HEAP32[$5 + 564 >> 2] = 0;
  jsvStringIteratorNew($5 + 528 | 0, HEAP32[$5 + 620 >> 2], HEAP32[$5 + 624 >> 2]);
  label$10: {
   if (!(HEAP8[$5 + 583 | 0] & 1 | (HEAPF64[$5 + 592 >> 3] != 1 | HEAPF64[$5 + 584 >> 3] != 0))) {
    _jswrap_drawImageSimple($5 + 688 | 0, HEAP32[$5 + 768 >> 2], HEAP32[$5 + 764 >> 2], $5 + 600 | 0, $5 + 528 | 0, 0);
    break label$10;
   }
   $0 = 0;
   label$12: {
    if (HEAP8[$5 + 583 | 0] & 1) {
     break label$12;
    }
    $0 = 0;
    if (HEAPF64[$5 + 592 >> 3] - Math_floor(HEAPF64[$5 + 592 >> 3]) != 0) {
     break label$12;
    }
    $0 = !((HEAPU8[$5 + 696 | 0] | HEAPU8[$5 + 697 | 0] << 8 | (HEAPU8[$5 + 698 | 0] << 16 | HEAPU8[$5 + 699 | 0] << 24)) & 112);
   }
   HEAP8[$5 + 527 | 0] = $0;
   label$13: {
    if (HEAP8[$5 + 527 | 0] & 1) {
     $6 = HEAPF64[$5 + 592 >> 3];
     label$15: {
      if (Math_abs($6) < 2147483648) {
       $0 = ~~$6;
       break label$15;
      }
      $0 = -2147483648;
     }
     HEAP32[$5 + 520 >> 2] = $0;
     HEAP32[$5 + 516 >> 2] = 0;
     HEAP32[$5 + 512 >> 2] = HEAP32[$5 + 764 >> 2];
     HEAP32[$5 + 568 >> 2] = 0;
     while (1) {
      if (HEAP32[$5 + 568 >> 2] < HEAP32[$5 + 604 >> 2]) {
       HEAP32[$5 + 508 >> 2] = jsvStringIteratorGetIndex_6($5 + 528 | 0);
       HEAP32[$5 + 504 >> 2] = HEAP32[$5 + 516 >> 2];
       HEAP32[$5 + 500 >> 2] = HEAP32[$5 + 564 >> 2];
       HEAP32[$5 + 496 >> 2] = 0;
       while (1) {
        if (HEAP32[$5 + 496 >> 2] < HEAP32[$5 + 520 >> 2]) {
         if (HEAP32[$5 + 496 >> 2]) {
          jsvStringIteratorGoto($5 + 528 | 0, HEAP32[$5 + 620 >> 2], HEAP32[$5 + 508 >> 2]);
          HEAP32[$5 + 516 >> 2] = HEAP32[$5 + 504 >> 2];
          HEAP32[$5 + 564 >> 2] = HEAP32[$5 + 500 >> 2];
         }
         HEAP32[$5 + 492 >> 2] = HEAP32[$5 + 768 >> 2];
         HEAP32[$5 + 572 >> 2] = 0;
         while (1) {
          if (HEAP32[$5 + 572 >> 2] < HEAP32[$5 + 600 >> 2]) {
           while (1) {
            if (HEAP32[$5 + 516 >> 2] < HEAP32[$5 + 608 >> 2]) {
             HEAP32[$5 + 564 >> 2] = HEAP32[$5 + 564 >> 2] << 8 | jsvStringIteratorGetCharAndNext($5 + 528 | 0) & 255;
             HEAP32[$5 + 516 >> 2] = HEAP32[$5 + 516 >> 2] + 8;
             continue;
            }
            break;
           }
           HEAP32[$5 + 488 >> 2] = HEAP32[$5 + 636 >> 2] & HEAP32[$5 + 564 >> 2] >>> HEAP32[$5 + 516 >> 2] - HEAP32[$5 + 608 >> 2];
           HEAP32[$5 + 516 >> 2] = HEAP32[$5 + 516 >> 2] - HEAP32[$5 + 608 >> 2];
           label$26: {
            if (!(HEAP32[$5 + 616 >> 2] == HEAP32[$5 + 488 >> 2] | HEAP32[$5 + 512 >> 2] < (HEAPU8[$5 + 722 | 0] | HEAPU8[$5 + 723 | 0] << 8) | HEAP32[$5 + 512 >> 2] > (HEAPU8[$5 + 726 | 0] | HEAPU8[$5 + 727 | 0] << 8))) {
             if (HEAP32[$5 + 628 >> 2]) {
              HEAP32[$5 + 488 >> 2] = HEAPU16[HEAP32[$5 + 628 >> 2] + ((HEAP32[$5 + 488 >> 2] & HEAP32[$5 + 632 >> 2]) << 1) >> 1];
             }
             HEAP32[$5 + 484 >> 2] = 0;
             while (1) {
              if (HEAP32[$5 + 484 >> 2] < HEAP32[$5 + 520 >> 2]) {
               if (!(HEAP32[$5 + 492 >> 2] < (HEAPU8[$5 + 720 | 0] | HEAPU8[$5 + 721 | 0] << 8) | HEAP32[$5 + 492 >> 2] > (HEAPU8[$5 + 724 | 0] | HEAPU8[$5 + 725 | 0] << 8))) {
                FUNCTION_TABLE[HEAPU8[$5 + 740 | 0] | HEAPU8[$5 + 741 | 0] << 8 | (HEAPU8[$5 + 742 | 0] << 16 | HEAPU8[$5 + 743 | 0] << 24)]($5 + 688 | 0, HEAP32[$5 + 492 >> 2], HEAP32[$5 + 512 >> 2], HEAP32[$5 + 488 >> 2]);
               }
               HEAP32[$5 + 492 >> 2] = HEAP32[$5 + 492 >> 2] + 1;
               HEAP32[$5 + 484 >> 2] = HEAP32[$5 + 484 >> 2] + 1;
               continue;
              }
              break;
             }
             break label$26;
            }
            HEAP32[$5 + 492 >> 2] = HEAP32[$5 + 520 >> 2] + HEAP32[$5 + 492 >> 2];
           }
           HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 572 >> 2] + 1;
           continue;
          }
          break;
         }
         HEAP32[$5 + 512 >> 2] = HEAP32[$5 + 512 >> 2] + 1;
         HEAP32[$5 + 496 >> 2] = HEAP32[$5 + 496 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$5 + 568 >> 2] = HEAP32[$5 + 568 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$5 + 480 >> 2] = HEAP32[$5 + 768 >> 2];
     HEAP32[$5 + 476 >> 2] = HEAP32[$5 + 764 >> 2];
     HEAP32[$5 + 472 >> 2] = HEAP32[$5 + 768 >> 2] + Math_imul(HEAP32[$5 + 520 >> 2], HEAP32[$5 + 600 >> 2]);
     HEAP32[$5 + 468 >> 2] = HEAP32[$5 + 764 >> 2] + Math_imul(HEAP32[$5 + 520 >> 2], HEAP32[$5 + 604 >> 2]);
     graphicsSetModifiedAndClip($5 + 688 | 0, $5 + 480 | 0, $5 + 476 | 0, $5 + 472 | 0, $5 + 468 | 0, 0);
     break label$13;
    }
    HEAP32[$5 + 272 >> 2] = HEAP32[$5 + 768 >> 2];
    HEAP32[$5 + 276 >> 2] = HEAP32[$5 + 764 >> 2];
    __memcpy($5 + 308 | 0, $5 + 600 | 0, 84);
    $0 = HEAP32[$5 + 532 >> 2];
    $1 = HEAP32[$5 + 528 >> 2];
    $3 = $1;
    $2 = $5 + 272 | 0;
    $1 = $2;
    HEAP32[$1 + 120 >> 2] = $3;
    HEAP32[$1 + 124 >> 2] = $0;
    HEAP32[$1 + 152 >> 2] = HEAP32[$5 + 560 >> 2];
    $1 = HEAP32[$5 + 556 >> 2];
    $0 = HEAP32[$5 + 552 >> 2];
    $3 = $0;
    $0 = $2;
    HEAP32[$0 + 144 >> 2] = $3;
    HEAP32[$0 + 148 >> 2] = $1;
    $0 = HEAP32[$5 + 548 >> 2];
    $1 = HEAP32[$5 + 544 >> 2];
    $3 = $1;
    $1 = $2;
    HEAP32[$1 + 136 >> 2] = $3;
    HEAP32[$1 + 140 >> 2] = $0;
    $1 = HEAP32[$5 + 540 >> 2];
    $0 = HEAP32[$5 + 536 >> 2];
    $3 = $0;
    $0 = $2;
    HEAP32[$0 + 128 >> 2] = $3;
    HEAP32[$0 + 132 >> 2] = $1;
    HEAPF64[$5 + 288 >> 3] = HEAPF64[$5 + 584 >> 3];
    HEAPF64[$5 + 296 >> 3] = HEAPF64[$5 + 592 >> 3];
    HEAP8[$5 + 304 | 0] = HEAP8[$5 + 583 | 0] & 1;
    HEAP8[$5 + 305 | 0] = 0;
    _jswrap_drawImageLayerInit($5 + 272 | 0);
    HEAP32[$5 + 268 >> 2] = HEAP32[$5 + 272 >> 2];
    HEAP32[$5 + 264 >> 2] = HEAP32[$5 + 276 >> 2];
    HEAP32[$5 + 260 >> 2] = HEAP32[$5 + 280 >> 2] - 1;
    HEAP32[$5 + 256 >> 2] = HEAP32[$5 + 284 >> 2] - 1;
    graphicsSetModifiedAndClip($5 + 688 | 0, $5 + 268 | 0, $5 + 264 | 0, $5 + 260 | 0, $5 + 256 | 0, 0);
    _jswrap_drawImageLayerSetStart($5 + 272 | 0, HEAP32[$5 + 268 >> 2], HEAP32[$5 + 264 >> 2]);
    HEAP32[$5 + 252 >> 2] = graphicsGetSetPixelFn($5 + 688 | 0);
    label$32: {
     if (!(!(HEAP8[$5 + 582 | 0] & 1) | !(HEAPF64[$5 + 592 >> 3] < .75))) {
      $6 = +HEAP32[$5 + 436 >> 2] * HEAPF64[$5 + 592 >> 3];
      label$34: {
       if (Math_abs($6) < 2147483648) {
        $0 = ~~$6;
        break label$34;
       }
       $0 = -2147483648;
      }
      HEAP32[$5 + 248 >> 2] = $0;
      $6 = +HEAP32[$5 + 440 >> 2] * HEAPF64[$5 + 592 >> 3];
      label$36: {
       if (Math_abs($6) < 2147483648) {
        $0 = ~~$6;
        break label$36;
       }
       $0 = -2147483648;
      }
      HEAP32[$5 + 244 >> 2] = $0;
      HEAP32[$5 + 240 >> 2] = HEAP32[$5 + 436 >> 2] - HEAP32[$5 + 248 >> 2];
      HEAP32[$5 + 236 >> 2] = HEAP32[$5 + 440 >> 2] - HEAP32[$5 + 244 >> 2];
      __memcpy($5 + 40 | 0, $5 + 272 | 0, 192);
      jsvStringIteratorNew($5 + 160 | 0, HEAP32[$5 + 96 >> 2], 0);
      HEAP32[$5 + 212 >> 2] = HEAP32[$5 + 244 >> 2] + HEAP32[$5 + 212 >> 2];
      HEAP32[$5 + 216 >> 2] = HEAP32[$5 + 248 >> 2] + HEAP32[$5 + 216 >> 2];
      _jswrap_drawImageLayerNextY($5 + 40 | 0);
      HEAP32[$5 + 568 >> 2] = HEAP32[$5 + 264 >> 2];
      while (1) {
       if (HEAP32[$5 + 568 >> 2] <= HEAP32[$5 + 256 >> 2]) {
        _jswrap_drawImageLayerStartX($5 + 272 | 0);
        _jswrap_drawImageLayerStartX($5 + 40 | 0);
        HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 268 >> 2];
        while (1) {
         if (HEAP32[$5 + 572 >> 2] <= HEAP32[$5 + 260 >> 2]) {
          HEAP8[$5 + 23 | 0] = 1;
          HEAP8[$5 + 23 | 0] = _jswrap_drawImageLayerGetPixel($5 + 272 | 0, $5 + 36 | 0) & 1 & (HEAP8[$5 + 23 | 0] & 1);
          HEAP32[$5 + 452 >> 2] = HEAP32[$5 + 248 >> 2] + HEAP32[$5 + 452 >> 2];
          HEAP32[$5 + 456 >> 2] = HEAP32[$5 + 456 >> 2] - HEAP32[$5 + 244 >> 2];
          HEAP8[$5 + 23 | 0] = _jswrap_drawImageLayerGetPixel($5 + 272 | 0, $5 + 32 | 0) & 1 & (HEAP8[$5 + 23 | 0] & 1);
          HEAP32[$5 + 452 >> 2] = HEAP32[$5 + 240 >> 2] + HEAP32[$5 + 452 >> 2];
          HEAP32[$5 + 456 >> 2] = HEAP32[$5 + 456 >> 2] - HEAP32[$5 + 236 >> 2];
          HEAP8[$5 + 23 | 0] = _jswrap_drawImageLayerGetPixel($5 + 40 | 0, $5 + 28 | 0) & 1 & (HEAP8[$5 + 23 | 0] & 1);
          HEAP32[$5 + 220 >> 2] = HEAP32[$5 + 248 >> 2] + HEAP32[$5 + 220 >> 2];
          HEAP32[$5 + 224 >> 2] = HEAP32[$5 + 224 >> 2] - HEAP32[$5 + 244 >> 2];
          HEAP8[$5 + 23 | 0] = _jswrap_drawImageLayerGetPixel($5 + 40 | 0, $5 + 24 | 0) & 1 & (HEAP8[$5 + 23 | 0] & 1);
          HEAP32[$5 + 220 >> 2] = HEAP32[$5 + 240 >> 2] + HEAP32[$5 + 220 >> 2];
          HEAP32[$5 + 224 >> 2] = HEAP32[$5 + 224 >> 2] - HEAP32[$5 + 236 >> 2];
          HEAP32[$5 + 36 >> 2] = graphicsBlendColor($5 + 688 | 0, HEAP32[$5 + 36 >> 2], HEAP32[$5 + 32 >> 2], 128);
          HEAP32[$5 + 28 >> 2] = graphicsBlendColor($5 + 688 | 0, HEAP32[$5 + 28 >> 2], HEAP32[$5 + 24 >> 2], 128);
          HEAP32[$5 + 564 >> 2] = graphicsBlendColor($5 + 688 | 0, HEAP32[$5 + 36 >> 2], HEAP32[$5 + 28 >> 2], 128);
          FUNCTION_TABLE[HEAP32[$5 + 252 >> 2]]($5 + 688 | 0, HEAP32[$5 + 572 >> 2], HEAP32[$5 + 568 >> 2], HEAP32[$5 + 564 >> 2]);
          HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 572 >> 2] + 1;
          continue;
         }
         break;
        }
        _jswrap_drawImageLayerNextY($5 + 272 | 0);
        _jswrap_drawImageLayerNextY($5 + 40 | 0);
        HEAP32[$5 + 568 >> 2] = HEAP32[$5 + 568 >> 2] + 1;
        continue;
       }
       break;
      }
      jsvStringIteratorFree_16($5 + 160 | 0);
      break label$32;
     }
     HEAP32[$5 + 568 >> 2] = HEAP32[$5 + 264 >> 2];
     while (1) {
      if (HEAP32[$5 + 568 >> 2] <= HEAP32[$5 + 256 >> 2]) {
       _jswrap_drawImageLayerStartX($5 + 272 | 0);
       HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 268 >> 2];
       while (1) {
        if (HEAP32[$5 + 572 >> 2] <= HEAP32[$5 + 260 >> 2]) {
         if (_jswrap_drawImageLayerGetPixel($5 + 272 | 0, $5 + 564 | 0) & 1) {
          FUNCTION_TABLE[HEAP32[$5 + 252 >> 2]]($5 + 688 | 0, HEAP32[$5 + 572 >> 2], HEAP32[$5 + 568 >> 2], HEAP32[$5 + 564 >> 2]);
         }
         _jswrap_drawImageLayerNextX($5 + 272 | 0);
         HEAP32[$5 + 572 >> 2] = HEAP32[$5 + 572 >> 2] + 1;
         continue;
        }
        break;
       }
       _jswrap_drawImageLayerNextY($5 + 272 | 0);
       HEAP32[$5 + 568 >> 2] = HEAP32[$5 + 568 >> 2] + 1;
       continue;
      }
      break;
     }
    }
    $2 = $5 + 272 | 0;
    HEAP32[$5 + 560 >> 2] = HEAP32[$2 + 152 >> 2];
    $1 = HEAP32[$2 + 144 >> 2];
    $0 = HEAP32[$2 + 148 >> 2];
    HEAP32[$5 + 552 >> 2] = $1;
    HEAP32[$5 + 556 >> 2] = $0;
    $1 = HEAP32[$2 + 140 >> 2];
    $0 = HEAP32[$2 + 136 >> 2];
    HEAP32[$5 + 544 >> 2] = $0;
    HEAP32[$5 + 548 >> 2] = $1;
    $0 = HEAP32[$2 + 132 >> 2];
    $1 = HEAP32[$2 + 128 >> 2];
    HEAP32[$5 + 536 >> 2] = $1;
    HEAP32[$5 + 540 >> 2] = $0;
    $1 = HEAP32[$2 + 124 >> 2];
    $0 = HEAP32[$2 + 120 >> 2];
    HEAP32[$5 + 528 >> 2] = $0;
    HEAP32[$5 + 532 >> 2] = $1;
   }
  }
  jsvStringIteratorFree_16($5 + 528 | 0);
  _jswrap_graphics_freeImageInfo($5 + 600 | 0);
  graphicsSetVar($5 + 688 | 0);
  HEAP32[$5 + 780 >> 2] = jsvLockAgain(HEAP32[$5 + 776 >> 2]);
 }
 __stack_pointer = $5 + 784 | 0;
 return HEAP32[$5 + 780 >> 2];
}

function jswrap_graphics_drawString($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 432 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 424 >> 2] = $0;
 HEAP32[$5 + 420 >> 2] = $1;
 HEAP32[$5 + 416 >> 2] = $2;
 HEAP32[$5 + 412 >> 2] = $3;
 HEAP8[$5 + 411 | 0] = $4;
 label$1: {
  if (!(graphicsGetFromVar($5 + 336 | 0, HEAP32[$5 + 424 >> 2]) & 1)) {
   HEAP32[$5 + 428 >> 2] = 0;
   break label$1;
  }
  _jswrap_graphics_getFontInfo($5 + 336 | 0, $5 + 312 | 0);
  HEAP32[$5 + 308 >> 2] = _jswrap_graphics_getFontHeightInternal($5 + 336 | 0, $5 + 312 | 0);
  HEAP32[$5 + 304 >> 2] = 1;
  if (HEAP32[$5 + 312 >> 2] & 32768) {
   if ((HEAP32[$5 + 312 >> 2] & 57344) == 40960) {
    HEAP32[$5 + 304 >> 2] = 2;
   }
   if ((HEAP32[$5 + 312 >> 2] & 57344) == 49152) {
    HEAP32[$5 + 304 >> 2] = 4;
   }
  }
  HEAP32[$5 + 300 >> 2] = HEAPU8[$5 + 344 | 0] | HEAPU8[$5 + 345 | 0] << 8 | (HEAPU8[$5 + 346 | 0] << 16 | HEAPU8[$5 + 347 | 0] << 24);
  label$6: {
   if ((HEAPU8[$5 + 367 | 0] >>> 4 & 3) == 1) {
    $0 = (HEAPU8[$5 + 344 | 0] | HEAPU8[$5 + 345 | 0] << 8 | (HEAPU8[$5 + 346 | 0] << 16 | HEAPU8[$5 + 347 | 0] << 24)) ^ 48;
    HEAP8[$5 + 344 | 0] = $0;
    HEAP8[$5 + 345 | 0] = $0 >>> 8;
    HEAP8[$5 + 346 | 0] = $0 >>> 16;
    HEAP8[$5 + 347 | 0] = $0 >>> 24;
    HEAP32[$5 + 296 >> 2] = (HEAPU8[$5 + 348 | 0] | HEAPU8[$5 + 349 | 0] << 8) - (HEAP32[$5 + 416 >> 2] + 1 | 0);
    HEAP32[$5 + 416 >> 2] = HEAP32[$5 + 412 >> 2];
    HEAP32[$5 + 412 >> 2] = HEAP32[$5 + 296 >> 2];
    break label$6;
   }
   label$8: {
    if ((HEAPU8[$5 + 367 | 0] >>> 4 & 3) == 2) {
     $0 = (HEAPU8[$5 + 344 | 0] | HEAPU8[$5 + 345 | 0] << 8 | (HEAPU8[$5 + 346 | 0] << 16 | HEAPU8[$5 + 347 | 0] << 24)) ^ 96;
     HEAP8[$5 + 344 | 0] = $0;
     HEAP8[$5 + 345 | 0] = $0 >>> 8;
     HEAP8[$5 + 346 | 0] = $0 >>> 16;
     HEAP8[$5 + 347 | 0] = $0 >>> 24;
     HEAP32[$5 + 416 >> 2] = (HEAPU8[$5 + 348 | 0] | HEAPU8[$5 + 349 | 0] << 8) - (HEAP32[$5 + 416 >> 2] + 1 | 0);
     HEAP32[$5 + 412 >> 2] = (HEAPU8[$5 + 350 | 0] | HEAPU8[$5 + 351 | 0] << 8) - (HEAP32[$5 + 412 >> 2] + 1 | 0);
     break label$8;
    }
    if ((HEAPU8[$5 + 367 | 0] >>> 4 & 3) == 3) {
     $0 = (HEAPU8[$5 + 344 | 0] | HEAPU8[$5 + 345 | 0] << 8 | (HEAPU8[$5 + 346 | 0] << 16 | HEAPU8[$5 + 347 | 0] << 24)) ^ 80;
     HEAP8[$5 + 344 | 0] = $0;
     HEAP8[$5 + 345 | 0] = $0 >>> 8;
     HEAP8[$5 + 346 | 0] = $0 >>> 16;
     HEAP8[$5 + 347 | 0] = $0 >>> 24;
     HEAP32[$5 + 292 >> 2] = (HEAPU8[$5 + 350 | 0] | HEAPU8[$5 + 351 | 0] << 8) - (HEAP32[$5 + 412 >> 2] + 1 | 0);
     HEAP32[$5 + 412 >> 2] = HEAP32[$5 + 416 >> 2];
     HEAP32[$5 + 416 >> 2] = HEAP32[$5 + 292 >> 2];
    }
   }
  }
  HEAP32[$5 + 288 >> 2] = jsvAsString(HEAP32[$5 + 420 >> 2]);
  HEAP32[$5 + 284 >> 2] = HEAP32[$5 + 416 >> 2];
  if ((HEAPU8[$5 + 367 | 0] & 3) >>> 0 < 2) {
   HEAP32[$5 + 416 >> 2] = HEAP32[$5 + 284 >> 2] - ((Math_imul(_jswrap_graphics_stringWidth($5 + 336 | 0, HEAP32[$5 + 288 >> 2], 0), (HEAPU8[$5 + 367 | 0] & 3) + 1 | 0) | 0) / 2 | 0);
  }
  if ((HEAPU8[$5 + 367 | 0] >>> 2 & 3) >>> 0 < 2) {
   _jswrap_graphics_stringMetrics($5 + 336 | 0, HEAP32[$5 + 288 >> 2], -1, $5 + 264 | 0);
   HEAP32[$5 + 412 >> 2] = HEAP32[$5 + 412 >> 2] - ((Math_imul(HEAP32[$5 + 268 >> 2], (HEAPU8[$5 + 367 | 0] >>> 2 & 3) + 1 | 0) | 0) / 2 | 0);
  }
  HEAP32[$5 + 260 >> 2] = HEAPU8[$5 + 368 | 0] | HEAPU8[$5 + 369 | 0] << 8;
  HEAP32[$5 + 256 >> 2] = HEAPU8[$5 + 370 | 0] | HEAPU8[$5 + 371 | 0] << 8;
  HEAP32[$5 + 252 >> 2] = HEAPU8[$5 + 372 | 0] | HEAPU8[$5 + 373 | 0] << 8;
  HEAP32[$5 + 248 >> 2] = HEAPU8[$5 + 374 | 0] | HEAPU8[$5 + 375 | 0] << 8;
  deviceToGraphicsCoordinates($5 + 336 | 0, $5 + 260 | 0, $5 + 256 | 0);
  deviceToGraphicsCoordinates($5 + 336 | 0, $5 + 252 | 0, $5 + 248 | 0);
  if (HEAP32[$5 + 252 >> 2] < HEAP32[$5 + 260 >> 2]) {
   HEAP32[$5 + 244 >> 2] = HEAP32[$5 + 260 >> 2];
   HEAP32[$5 + 260 >> 2] = HEAP32[$5 + 252 >> 2];
   HEAP32[$5 + 252 >> 2] = HEAP32[$5 + 244 >> 2];
  }
  if (HEAP32[$5 + 248 >> 2] < HEAP32[$5 + 256 >> 2]) {
   HEAP32[$5 + 240 >> 2] = HEAP32[$5 + 256 >> 2];
   HEAP32[$5 + 256 >> 2] = HEAP32[$5 + 248 >> 2];
   HEAP32[$5 + 248 >> 2] = HEAP32[$5 + 240 >> 2];
  }
  jsvStringIteratorNewUTF8($5 + 200 | 0, HEAP32[$5 + 288 >> 2], 0);
  while (1) {
   if (jsvStringIteratorHasChar_12($5 + 200 | 0) & 1) {
    HEAP32[$5 + 196 >> 2] = jsvStringIteratorGetUTF8CharAndNext($5 + 200 | 0);
    if (HEAP32[$5 + 196 >> 2] == 10) {
     HEAP32[$5 + 416 >> 2] = HEAP32[$5 + 284 >> 2];
     if ((HEAPU8[$5 + 367 | 0] & 3) >>> 0 < 2) {
      HEAP32[$5 + 416 >> 2] = HEAP32[$5 + 284 >> 2] - ((Math_imul(_jswrap_graphics_stringWidth($5 + 336 | 0, HEAP32[$5 + 288 >> 2], jsvStringIteratorGetIndex_6($5 + 200 | 0)), (HEAPU8[$5 + 367 | 0] & 3) + 1 | 0) | 0) / 2 | 0);
     }
     HEAP32[$5 + 412 >> 2] = HEAP32[$5 + 308 >> 2] + HEAP32[$5 + 412 >> 2];
     continue;
    }
    if (!HEAP32[$5 + 196 >> 2]) {
     HEAP32[$5 + 108 >> 2] = jsvConvertToUTF8Index(HEAP32[$5 + 288 >> 2], jsvStringIteratorGetIndex_6($5 + 200 | 0));
     if (_jswrap_graphics_parseImage($5 + 336 | 0, HEAP32[$5 + 288 >> 2], HEAP32[$5 + 108 >> 2], $5 + 112 | 0) & 1) {
      jsvStringIteratorGotoUTF8($5 + 200 | 0, HEAP32[$5 + 288 >> 2], HEAP32[$5 + 108 >> 2] + HEAPU16[$5 + 160 >> 1] | 0);
      _jswrap_drawImageSimple($5 + 336 | 0, HEAP32[$5 + 416 >> 2], HEAP32[$5 + 412 >> 2] + ((HEAP32[$5 + 308 >> 2] - HEAP32[$5 + 116 >> 2] | 0) / 2 | 0) | 0, $5 + 112 | 0, $5 + 200 | 0, 1);
      _jswrap_graphics_freeImageInfo($5 + 112 | 0);
      HEAP32[$5 + 416 >> 2] = HEAP32[$5 + 112 >> 2] + HEAP32[$5 + 416 >> 2];
     }
     continue;
    }
    label$21: {
     if (!(HEAP32[$5 + 312 >> 2] | HEAP32[$5 + 196 >> 2] >= 256)) {
      HEAP32[$5 + 104 >> 2] = graphicsVectorCharWidth(HEAPU16[$5 + 318 >> 1], HEAP32[$5 + 196 >> 2] << 24 >> 24);
      if (!(HEAP32[$5 + 416 >> 2] <= (HEAP32[$5 + 260 >> 2] - HEAP32[$5 + 104 >> 2] | 0) | HEAP32[$5 + 416 >> 2] >= HEAP32[$5 + 252 >> 2] | (HEAP32[$5 + 412 >> 2] <= (HEAP32[$5 + 256 >> 2] - HEAP32[$5 + 308 >> 2] | 0) | HEAP32[$5 + 412 >> 2] > HEAP32[$5 + 248 >> 2]))) {
       if (HEAP8[$5 + 411 | 0] & 1) {
        graphicsFillRect($5 + 336 | 0, HEAP32[$5 + 416 >> 2], HEAP32[$5 + 412 >> 2], (HEAP32[$5 + 416 >> 2] + HEAP32[$5 + 104 >> 2] | 0) - 1 | 0, (HEAP32[$5 + 412 >> 2] + HEAP32[$5 + 308 >> 2] | 0) - 1 | 0, HEAPU8[$5 + 357 | 0] | HEAPU8[$5 + 358 | 0] << 8 | (HEAPU8[$5 + 359 | 0] << 16 | HEAPU8[$5 + 360 | 0] << 24));
       }
       graphicsGetVectorChar(636, $5 + 336 | 0, HEAP32[$5 + 416 >> 2], HEAP32[$5 + 412 >> 2], HEAPU16[$5 + 318 >> 1], HEAPU16[$5 + 320 >> 1], HEAP32[$5 + 196 >> 2] << 24 >> 24);
      }
      HEAP32[$5 + 416 >> 2] = HEAP32[$5 + 104 >> 2] + HEAP32[$5 + 416 >> 2];
      break label$21;
     }
     label$25: {
      if (!(HEAP32[$5 + 312 >> 2] != 8192 | HEAP32[$5 + 196 >> 2] >= 256)) {
       if (!(HEAP32[$5 + 416 >> 2] <= (HEAP32[$5 + 260 >> 2] - (HEAPU16[$5 + 318 >> 1] << 2) | 0) | HEAP32[$5 + 416 >> 2] >= HEAP32[$5 + 252 >> 2] | (HEAP32[$5 + 412 >> 2] <= (HEAP32[$5 + 256 >> 2] - HEAP32[$5 + 308 >> 2] | 0) | HEAP32[$5 + 412 >> 2] > HEAP32[$5 + 248 >> 2]))) {
        graphicsDrawChar4x6($5 + 336 | 0, HEAP32[$5 + 416 >> 2], HEAP32[$5 + 412 >> 2], HEAP32[$5 + 196 >> 2] << 24 >> 24, HEAPU16[$5 + 318 >> 1], HEAPU16[$5 + 320 >> 1], HEAP8[$5 + 411 | 0] & 1);
       }
       HEAP32[$5 + 416 >> 2] = HEAP32[$5 + 416 >> 2] + (HEAPU16[$5 + 318 >> 1] << 2);
       break label$25;
      }
      label$28: {
       if (HEAP32[$5 + 312 >> 2] == 16384) {
        if (!(HEAP32[$5 + 416 >> 2] <= (HEAP32[$5 + 260 >> 2] - Math_imul(HEAPU16[$5 + 318 >> 1], 6) | 0) | HEAP32[$5 + 416 >> 2] >= HEAP32[$5 + 252 >> 2] | (HEAP32[$5 + 412 >> 2] <= (HEAP32[$5 + 256 >> 2] - HEAP32[$5 + 308 >> 2] | 0) | HEAP32[$5 + 412 >> 2] > HEAP32[$5 + 248 >> 2]))) {
         graphicsDrawChar6x8($5 + 336 | 0, HEAP32[$5 + 416 >> 2], HEAP32[$5 + 412 >> 2], HEAP32[$5 + 196 >> 2] << 24 >> 24, HEAPU16[$5 + 318 >> 1], HEAPU16[$5 + 320 >> 1], HEAP8[$5 + 411 | 0] & 1);
        }
        HEAP32[$5 + 416 >> 2] = HEAP32[$5 + 416 >> 2] + Math_imul(HEAPU16[$5 + 318 >> 1], 6);
        break label$28;
       }
       if (!(!(HEAP32[$5 + 312 >> 2] & 32768) | HEAP32[$5 + 196 >> 2] >= 256)) {
        HEAP32[$5 + 100 >> 2] = (1 << HEAP32[$5 + 304 >> 2]) - 1;
        HEAP32[$5 + 96 >> 2] = 0;
        HEAP32[$5 + 92 >> 2] = 0;
        label$32: {
         if (jsvIsString(HEAP32[$5 + 324 >> 2]) & 1) {
          if (HEAP32[$5 + 196 >> 2] >= HEAPU8[$5 + 322 | 0]) {
           jsvStringIteratorNew($5 + 56 | 0, HEAP32[$5 + 324 >> 2], 0);
           while (1) {
            $0 = 0;
            if (jsvStringIteratorHasChar_12($5 + 56 | 0) & 1) {
             $0 = (jsvStringIteratorGetIndex_6($5 + 56 | 0) | 0) < (HEAP32[$5 + 196 >> 2] - HEAPU8[$5 + 322 | 0] | 0);
            }
            if ($0) {
             HEAP32[$5 + 92 >> 2] = (jsvStringIteratorGetCharAndNext($5 + 56 | 0) & 255) + HEAP32[$5 + 92 >> 2];
             continue;
            }
            break;
           }
           HEAP32[$5 + 96 >> 2] = jsvStringIteratorGetChar_6($5 + 56 | 0) & 255;
           jsvStringIteratorFree_16($5 + 56 | 0);
          }
          break label$32;
         }
         HEAP32[$5 + 96 >> 2] = jsvGetInteger(HEAP32[$5 + 324 >> 2]);
         HEAP32[$5 + 92 >> 2] = Math_imul(HEAP32[$5 + 96 >> 2], HEAP32[$5 + 196 >> 2] - HEAPU8[$5 + 322 | 0] | 0);
        }
        label$38: {
         if (HEAP32[$5 + 196 >> 2] < HEAPU8[$5 + 322 | 0] | HEAP32[$5 + 416 >> 2] <= (HEAP32[$5 + 260 >> 2] - Math_imul(HEAP32[$5 + 96 >> 2], HEAPU16[$5 + 318 >> 1]) | 0) | (HEAP32[$5 + 412 >> 2] <= (HEAP32[$5 + 256 >> 2] - HEAP32[$5 + 308 >> 2] | 0) | HEAP32[$5 + 416 >> 2] >= HEAP32[$5 + 252 >> 2])) {
          break label$38;
         }
         if (HEAP32[$5 + 412 >> 2] > HEAP32[$5 + 248 >> 2]) {
          break label$38;
         }
         HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 308 >> 2] / HEAPU16[$5 + 320 >> 1];
         HEAP32[$5 + 92 >> 2] = Math_imul(HEAP32[$5 + 92 >> 2], Math_imul(HEAP32[$5 + 52 >> 2], HEAP32[$5 + 304 >> 2]));
         jsvStringIteratorNew($5 + 16 | 0, HEAP32[$5 + 328 >> 2], HEAP32[$5 + 92 >> 2] >> 3);
         HEAP32[$5 + 92 >> 2] = HEAP32[$5 + 92 >> 2] & 7;
         HEAP32[$5 + 4 >> 2] = jsvStringIteratorGetChar_6($5 + 16 | 0) << 24 >> 24;
         HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] << Math_imul(HEAP32[$5 + 304 >> 2], HEAP32[$5 + 92 >> 2]);
         HEAP32[$5 + 12 >> 2] = 0;
         while (1) {
          if (HEAP32[$5 + 12 >> 2] < HEAP32[$5 + 96 >> 2]) {
           HEAP32[$5 + 8 >> 2] = 0;
           while (1) {
            if (HEAP32[$5 + 8 >> 2] < HEAP32[$5 + 52 >> 2]) {
             HEAP32[$5 >> 2] = (HEAP32[$5 + 4 >> 2] & 255) >> 8 - HEAP32[$5 + 304 >> 2];
             if (HEAP32[$5 >> 2] ? 1 : HEAP8[$5 + 411 | 0] & 1) {
              graphicsFillRect($5 + 336 | 0, HEAP32[$5 + 416 >> 2] + Math_imul(HEAP32[$5 + 12 >> 2], HEAPU16[$5 + 318 >> 1]) | 0, HEAP32[$5 + 412 >> 2] + Math_imul(HEAP32[$5 + 8 >> 2], HEAPU16[$5 + 320 >> 1]) | 0, (HEAPU16[$5 + 318 >> 1] + (HEAP32[$5 + 416 >> 2] + Math_imul(HEAP32[$5 + 12 >> 2], HEAPU16[$5 + 318 >> 1]) | 0) | 0) - 1 | 0, (HEAPU16[$5 + 320 >> 1] + (HEAP32[$5 + 412 >> 2] + Math_imul(HEAP32[$5 + 8 >> 2], HEAPU16[$5 + 320 >> 1]) | 0) | 0) - 1 | 0, graphicsBlendGfxColor($5 + 336 | 0, (HEAP32[$5 >> 2] << 8) / HEAP32[$5 + 100 >> 2] | 0));
             }
             HEAP32[$5 + 92 >> 2] = HEAP32[$5 + 304 >> 2] + HEAP32[$5 + 92 >> 2];
             HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] << HEAP32[$5 + 304 >> 2];
             if (HEAP32[$5 + 92 >> 2] >= 8) {
              HEAP32[$5 + 92 >> 2] = 0;
              jsvStringIteratorNext($5 + 16 | 0);
              HEAP32[$5 + 4 >> 2] = jsvStringIteratorGetChar_6($5 + 16 | 0) << 24 >> 24;
             }
             HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 8 >> 2] + 1;
             continue;
            }
            break;
           }
           HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 12 >> 2] + 1;
           continue;
          }
          break;
         }
         jsvStringIteratorFree_16($5 + 16 | 0);
        }
        HEAP32[$5 + 416 >> 2] = HEAP32[$5 + 416 >> 2] + Math_imul(HEAP32[$5 + 96 >> 2], HEAPU16[$5 + 318 >> 1]);
       }
      }
     }
    }
    if (!(jspIsInterrupted() & 1)) {
     continue;
    }
   }
   break;
  }
  jsvStringIteratorFree_16($5 + 200 | 0);
  jsvUnLock(HEAP32[$5 + 288 >> 2]);
  $0 = HEAP32[$5 + 300 >> 2];
  HEAP8[$5 + 344 | 0] = $0;
  HEAP8[$5 + 345 | 0] = $0 >>> 8;
  HEAP8[$5 + 346 | 0] = $0 >>> 16;
  HEAP8[$5 + 347 | 0] = $0 >>> 24;
  graphicsSetVar($5 + 336 | 0);
  _jswrap_graphics_freeFontInfo($5 + 312 | 0);
  HEAP32[$5 + 428 >> 2] = jsvLockAgain(HEAP32[$5 + 424 >> 2]);
 }
 __stack_pointer = $5 + 432 | 0;
 return HEAP32[$5 + 428 >> 2];
}

function _jswrap_graphics_parseImage($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 176 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 168 >> 2] = $0;
 HEAP32[$4 + 164 >> 2] = $1;
 HEAP32[$4 + 160 >> 2] = $2;
 HEAP32[$4 + 156 >> 2] = $3;
 memset(HEAP32[$4 + 156 >> 2], 0, 84);
 label$1: {
  label$2: {
   if (jsvIsObject(HEAP32[$4 + 164 >> 2]) & 1) {
    label$4: {
     if (jsvIsInstanceOf(HEAP32[$4 + 164 >> 2], 115743) & 1) {
      if (!(graphicsGetFromVar($4 + 80 | 0, HEAP32[$4 + 164 >> 2]) & 1)) {
       HEAP8[$4 + 175 | 0] = 0;
       break label$1;
      }
      if (HEAPU8[$4 + 84 | 0] | HEAPU8[$4 + 85 | 0] << 8 | (HEAPU8[$4 + 86 | 0] << 16 | HEAPU8[$4 + 87 | 0] << 24)) {
       HEAP8[$4 + 175 | 0] = 0;
       break label$1;
      }
      HEAP32[HEAP32[$4 + 156 >> 2] >> 2] = HEAPU8[$4 + 92 | 0] | HEAPU8[$4 + 93 | 0] << 8;
      HEAP32[HEAP32[$4 + 156 >> 2] + 4 >> 2] = HEAPU8[$4 + 94 | 0] | HEAPU8[$4 + 95 | 0] << 8;
      HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] = HEAPU8[$4 + 96 | 0];
      break label$4;
     }
     $0 = jsvObjectGetIntegerChild(HEAP32[$4 + 164 >> 2], 118428);
     HEAP32[HEAP32[$4 + 156 >> 2] >> 2] = $0;
     $0 = jsvObjectGetIntegerChild(HEAP32[$4 + 164 >> 2], 113099);
     HEAP32[HEAP32[$4 + 156 >> 2] + 4 >> 2] = $0;
     $0 = jsvObjectGetIntegerChild(HEAP32[$4 + 164 >> 2], 116866);
     HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] = $0;
     if (HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] <= 0) {
      HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] = 1;
     }
    }
    HEAP32[$4 + 76 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 164 >> 2], 116403);
    $0 = jsvGetArrayBufferBackingString(HEAP32[$4 + 76 >> 2], HEAP32[$4 + 156 >> 2] + 24 | 0);
    HEAP32[HEAP32[$4 + 156 >> 2] + 20 >> 2] = $0;
    jsvUnLock(HEAP32[$4 + 76 >> 2]);
    $0 = HEAP32[$4 + 156 >> 2];
    HEAP32[$0 + 24 >> 2] = HEAP32[$4 + 160 >> 2] + HEAP32[$0 + 24 >> 2];
    HEAP32[$4 + 72 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 164 >> 2], 112883);
    HEAP8[HEAP32[$4 + 156 >> 2] + 12 | 0] = HEAP32[$4 + 72 >> 2] != 0;
    $0 = jsvGetIntegerAndUnLock(HEAP32[$4 + 72 >> 2]);
    HEAP32[HEAP32[$4 + 156 >> 2] + 16 >> 2] = $0;
    HEAP32[$4 + 72 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 164 >> 2], 119591);
    if (HEAP32[$4 + 72 >> 2]) {
     label$10: {
      if (!(!(jsvIsArrayBuffer(HEAP32[$4 + 72 >> 2]) & 1) | HEAPU8[HEAP32[$4 + 72 >> 2] + 5 | 0] != 2)) {
       HEAP32[$4 + 68 >> 2] = 0;
       $0 = jsvGetDataPointer(HEAP32[$4 + 72 >> 2], $4 + 68 | 0);
       HEAP32[HEAP32[$4 + 156 >> 2] + 28 >> 2] = $0;
       jsvUnLock(HEAP32[$4 + 72 >> 2]);
       label$12: {
        label$13: {
         if (!(HEAP32[$4 + 68 >> 2] == 2 | HEAP32[$4 + 68 >> 2] == 4 | (HEAP32[$4 + 68 >> 2] == 8 | HEAP32[$4 + 68 >> 2] == 16))) {
          if (HEAP32[$4 + 68 >> 2] != 256) {
           break label$13;
          }
         }
         HEAP32[HEAP32[$4 + 156 >> 2] + 32 >> 2] = HEAP32[$4 + 68 >> 2] - 1;
         break label$12;
        }
        HEAP32[HEAP32[$4 + 156 >> 2] + 28 >> 2] = 0;
       }
       break label$10;
      }
      jsvUnLock(HEAP32[$4 + 72 >> 2]);
     }
     if (!HEAP32[HEAP32[$4 + 156 >> 2] + 28 >> 2]) {
      jsExceptionHere(1, 115019, 0);
      HEAP8[$4 + 175 | 0] = 0;
      break label$1;
     }
    }
    break label$2;
   }
   label$16: {
    label$17: {
     if (!(jsvIsString(HEAP32[$4 + 164 >> 2]) & 1)) {
      if (!(jsvIsArrayBuffer(HEAP32[$4 + 164 >> 2]) & 1)) {
       break label$17;
      }
     }
     label$19: {
      if (jsvIsArrayBuffer(HEAP32[$4 + 164 >> 2]) & 1) {
       $0 = jsvGetArrayBufferBackingString(HEAP32[$4 + 164 >> 2], HEAP32[$4 + 156 >> 2] + 24 | 0);
       HEAP32[HEAP32[$4 + 156 >> 2] + 20 >> 2] = $0;
       break label$19;
      }
      $0 = jsvLockAgain(HEAP32[$4 + 164 >> 2]);
      HEAP32[HEAP32[$4 + 156 >> 2] + 20 >> 2] = $0;
     }
     jsvStringIteratorNewUTF8($4 + 32 | 0, HEAP32[HEAP32[$4 + 156 >> 2] + 20 >> 2], HEAP32[$4 + 160 >> 2]);
     $0 = jsvStringIteratorGetUTF8CharAndNext($4 + 32 | 0);
     HEAP32[HEAP32[$4 + 156 >> 2] >> 2] = $0;
     $0 = jsvStringIteratorGetUTF8CharAndNext($4 + 32 | 0);
     HEAP32[HEAP32[$4 + 156 >> 2] + 4 >> 2] = $0;
     $0 = jsvStringIteratorGetUTF8CharAndNext($4 + 32 | 0);
     HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] = $0;
     $0 = HEAP32[$4 + 156 >> 2];
     HEAP32[$0 + 24 >> 2] = HEAP32[$4 + 160 >> 2] + HEAP32[$0 + 24 >> 2];
     label$21: {
      if (HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] & 128) {
       HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] = HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] & 127;
       HEAP8[HEAP32[$4 + 156 >> 2] + 12 | 0] = 1;
       $0 = jsvStringIteratorGetUTF8CharAndNext($4 + 32 | 0);
       HEAP32[HEAP32[$4 + 156 >> 2] + 16 >> 2] = $0;
       HEAP16[HEAP32[$4 + 156 >> 2] + 48 >> 1] = 4;
       break label$21;
      }
      HEAP16[HEAP32[$4 + 156 >> 2] + 48 >> 1] = 3;
     }
     $0 = HEAP32[$4 + 156 >> 2];
     HEAP32[$0 + 24 >> 2] = HEAPU16[HEAP32[$4 + 156 >> 2] + 48 >> 1] + HEAP32[$0 + 24 >> 2];
     if (HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] & 64) {
      HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] = HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] & 63;
      if (HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] > 8) {
       jsExceptionHere(1, 115572, 0);
       _jswrap_graphics_freeImageInfo(HEAP32[$4 + 156 >> 2]);
       jsvStringIteratorFree_16($4 + 32 | 0);
       HEAP8[$4 + 175 | 0] = 0;
       break label$1;
      }
      HEAP32[$4 + 28 >> 2] = 1 << HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2];
      HEAP32[HEAP32[$4 + 156 >> 2] + 32 >> 2] = HEAP32[$4 + 28 >> 2] - 1;
      label$25: {
       if (HEAP32[$4 + 28 >> 2] << 1 >>> 0 <= 32) {
        HEAP32[$4 + 24 >> 2] = HEAP32[HEAP32[$4 + 156 >> 2] + 24 >> 2];
        HEAP32[$4 + 20 >> 2] = 0;
        while (1) {
         if (HEAPU32[$4 + 20 >> 2] < HEAPU32[$4 + 28 >> 2]) {
          $0 = jsvStringIteratorGetUTF8CharAndNext($4 + 32 | 0) & 255;
          $1 = (jsvStringIteratorGetUTF8CharAndNext($4 + 32 | 0) & 255) << 8;
          HEAP16[(HEAP32[$4 + 156 >> 2] + 52 | 0) + (HEAP32[$4 + 20 >> 2] << 1) >> 1] = $0 | $1;
          HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 24 >> 2] + 2;
          HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 20 >> 2] + 1;
          continue;
         }
         break;
        }
        HEAP32[HEAP32[$4 + 156 >> 2] + 28 >> 2] = HEAP32[$4 + 156 >> 2] + 52;
        break label$25;
       }
       if (HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] <= 8) {
        HEAP32[$4 + 16 >> 2] = HEAP32[HEAP32[$4 + 156 >> 2] + 24 >> 2] + (HEAP32[$4 + 28 >> 2] << 1);
        HEAP32[$4 + 12 >> 2] = 0;
        HEAP32[$4 + 8 >> 2] = jsvGetDataPointer(HEAP32[HEAP32[$4 + 156 >> 2] + 20 >> 2], $4 + 12 | 0);
        if (!(!HEAP32[$4 + 8 >> 2] | HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] > 8 | HEAPU32[$4 + 16 >> 2] >= HEAPU32[$4 + 12 >> 2])) {
         HEAP32[HEAP32[$4 + 156 >> 2] + 32 >> 2] = HEAP32[$4 + 28 >> 2] - 1;
         HEAP32[HEAP32[$4 + 156 >> 2] + 28 >> 2] = HEAP32[$4 + 8 >> 2] + (HEAP32[HEAP32[$4 + 156 >> 2] + 24 >> 2] + HEAPU16[HEAP32[$4 + 156 >> 2] + 48 >> 1] | 0);
        }
       }
      }
      if (!HEAP32[HEAP32[$4 + 156 >> 2] + 28 >> 2]) {
       jsExceptionHere(1, 125314, 0);
       _jswrap_graphics_freeImageInfo(HEAP32[$4 + 156 >> 2]);
       jsvStringIteratorFree_16($4 + 32 | 0);
       HEAP8[$4 + 175 | 0] = 0;
       break label$1;
      }
      $0 = HEAP32[$4 + 156 >> 2];
      HEAP16[$0 + 48 >> 1] = HEAPU16[$0 + 48 >> 1] + (HEAP32[$4 + 28 >> 2] << 1 & 65535);
      $0 = HEAP32[$4 + 156 >> 2];
      HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] + (HEAP32[$4 + 28 >> 2] << 1 & 65535);
     }
     jsvStringIteratorFree_16($4 + 32 | 0);
     break label$16;
    }
    jsExceptionHere(1, 118779, 0);
    HEAP8[$4 + 175 | 0] = 0;
    break label$1;
   }
  }
  if (!(HEAP8[HEAP32[$4 + 156 >> 2] + 12 | 0] & 1)) {
   HEAP32[HEAP32[$4 + 156 >> 2] + 16 >> 2] = -1;
  }
  if (!HEAP32[HEAP32[$4 + 156 >> 2] + 28 >> 2]) {
   label$34: {
    if (HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] == 1) {
     $0 = HEAP32[$4 + 168 >> 2];
     HEAP16[HEAP32[$4 + 156 >> 2] + 52 >> 1] = HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24);
     $0 = HEAP32[$4 + 168 >> 2];
     HEAP16[HEAP32[$4 + 156 >> 2] + 54 >> 1] = HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24);
     HEAP32[HEAP32[$4 + 156 >> 2] + 28 >> 2] = HEAP32[$4 + 156 >> 2] + 52;
     HEAP32[HEAP32[$4 + 156 >> 2] + 32 >> 2] = 1;
     break label$34;
    }
    label$36: {
     if (HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] == 2) {
      $0 = HEAP32[$4 + 168 >> 2];
      HEAP16[HEAP32[$4 + 156 >> 2] + 52 >> 1] = HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24);
      $0 = graphicsBlendGfxColor(HEAP32[$4 + 168 >> 2], 85);
      HEAP16[HEAP32[$4 + 156 >> 2] + 54 >> 1] = $0;
      $0 = graphicsBlendGfxColor(HEAP32[$4 + 168 >> 2], 171);
      HEAP16[HEAP32[$4 + 156 >> 2] + 56 >> 1] = $0;
      $0 = HEAP32[$4 + 168 >> 2];
      HEAP16[HEAP32[$4 + 156 >> 2] + 58 >> 1] = HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24);
      HEAP32[HEAP32[$4 + 156 >> 2] + 28 >> 2] = HEAP32[$4 + 156 >> 2] + 52;
      HEAP32[HEAP32[$4 + 156 >> 2] + 32 >> 2] = 3;
      break label$36;
     }
     label$38: {
      if (!(HEAPU8[HEAP32[$4 + 168 >> 2] + 16 | 0] != 16 | HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] != 3)) {
       HEAP32[HEAP32[$4 + 156 >> 2] + 28 >> 2] = 171456;
       HEAP32[HEAP32[$4 + 156 >> 2] + 32 >> 2] = 7;
       break label$38;
      }
      label$40: {
       if (!(HEAPU8[HEAP32[$4 + 168 >> 2] + 16 | 0] != 16 | HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] != 4)) {
        HEAP32[HEAP32[$4 + 156 >> 2] + 28 >> 2] = 171488;
        HEAP32[HEAP32[$4 + 156 >> 2] + 32 >> 2] = 15;
        break label$40;
       }
       label$42: {
        if (!(HEAPU8[HEAP32[$4 + 168 >> 2] + 16 | 0] != 16 | HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] != 8)) {
         HEAP32[HEAP32[$4 + 156 >> 2] + 28 >> 2] = 171520;
         HEAP32[HEAP32[$4 + 156 >> 2] + 32 >> 2] = 255;
         break label$42;
        }
        label$44: {
         if (!(HEAPU8[HEAP32[$4 + 168 >> 2] + 16 | 0] != 8 | HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] != 4)) {
          HEAP32[HEAP32[$4 + 156 >> 2] + 28 >> 2] = 172032;
          HEAP32[HEAP32[$4 + 156 >> 2] + 32 >> 2] = 15;
          break label$44;
         }
         label$46: {
          if (!(HEAPU8[HEAP32[$4 + 168 >> 2] + 16 | 0] != 8 | HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] != 3)) {
           HEAP32[HEAP32[$4 + 156 >> 2] + 28 >> 2] = 172064;
           HEAP32[HEAP32[$4 + 156 >> 2] + 32 >> 2] = 7;
           break label$46;
          }
          if (!(HEAPU8[HEAP32[$4 + 168 >> 2] + 16 | 0] != 4 | HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] != 3)) {
           HEAP32[HEAP32[$4 + 156 >> 2] + 28 >> 2] = 172080;
           HEAP32[HEAP32[$4 + 156 >> 2] + 32 >> 2] = 7;
          }
         }
        }
       }
      }
     }
    }
   }
  }
  label$49: {
   if (!(!(jsvIsString(HEAP32[HEAP32[$4 + 156 >> 2] + 20 >> 2]) & 1) | HEAP32[HEAP32[$4 + 156 >> 2] >> 2] <= 0 | HEAP32[HEAP32[$4 + 156 >> 2] + 4 >> 2] <= 0)) {
    if (HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] <= 32) {
     break label$49;
    }
   }
   jsExceptionHere(1, 120368, 0);
   _jswrap_graphics_freeImageInfo(HEAP32[$4 + 156 >> 2]);
   HEAP8[$4 + 175 | 0] = 0;
   break label$1;
  }
  HEAP32[HEAP32[$4 + 156 >> 2] + 36 >> 2] = (1 << HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2]) - 1;
  $1 = HEAP32[$4 + 156 >> 2];
  if (HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] < 8) {
   $0 = (8 / HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2] | 0) - 1 | 0;
  } else {
   $0 = 0;
  }
  HEAP32[$1 + 40 >> 2] = $0;
  HEAP32[HEAP32[$4 + 156 >> 2] + 44 >> 2] = Math_imul(HEAP32[HEAP32[$4 + 156 >> 2] >> 2], HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2]) + 7 >> 3;
  HEAP16[HEAP32[$4 + 156 >> 2] + 50 >> 1] = Math_imul(HEAP32[HEAP32[$4 + 156 >> 2] + 8 >> 2], Math_imul(HEAP32[HEAP32[$4 + 156 >> 2] >> 2], HEAP32[HEAP32[$4 + 156 >> 2] + 4 >> 2])) + 7 >> 3;
  HEAP8[$4 + 175 | 0] = 1;
 }
 __stack_pointer = $4 + 176 | 0;
 return HEAP8[$4 + 175 | 0] & 1;
}

function jswrap_banglejs_idle() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0;
 $2 = __stack_pointer - 352 | 0;
 $0 = $2;
 __stack_pointer = $0;
 HEAP32[$0 + 348 >> 2] = jsvObjectGetChildIfExists(HEAP32[86750], 120138);
 label$1: {
  if (jsiObjectHasCallbacks(HEAP32[$0 + 348 >> 2], 118038) & 1) {
   HEAP32[93413] = HEAP32[93413] | 1024;
   break label$1;
  }
  HEAP32[93413] = HEAP32[93413] & -1025;
 }
 if (!HEAP32[$0 + 348 >> 2]) {
  HEAP32[93416] = 0;
 }
 if (HEAP32[93416]) {
  if (HEAP32[93416] & 4) {
   jswrap_banglejs_setLCDPower(0);
  }
  if (HEAP32[93416] & 2) {
   jswrap_banglejs_setLCDPower(1);
  }
  if (HEAP32[93416] & 16) {
   jswrap_banglejs_setLCDPowerBacklight(0);
  }
  if (HEAP32[93416] & 8) {
   jswrap_banglejs_setLCDPowerBacklight(1);
  }
  if (HEAP32[93416] & 32) {
   _jswrap_banglejs_setLocked(1, HEAP32[93414]);
   HEAP32[93414] = 0;
  }
  if (HEAP32[93416] & 64) {
   _jswrap_banglejs_setLocked(0, HEAP32[93414]);
   HEAP32[93414] = 0;
  }
  if (HEAP32[93416] & 1) {
   HEAP16[173534] = HEAPU16[173534] | 64;
  }
  if (HEAP32[93416] & 67108864) {
   jswrap_banglejs_setPollInterval_internal(80);
  }
  if (HEAP32[93416] & 134217728) {
   jswrap_banglejs_setPollInterval_internal(800);
  }
  if (HEAP32[93416] & 128) {
   HEAP32[$0 + 344 >> 2] = jswrap_banglejs_getAccel();
   if (HEAP32[$0 + 344 >> 2]) {
    jsiQueueObjectCallbacks(HEAP32[$0 + 348 >> 2], 118038, $0 + 344 | 0, 1);
    jsvUnLock(HEAP32[$0 + 344 >> 2]);
   }
  }
  if (HEAP32[93416] & 256) {
   HEAP32[$0 + 340 >> 2] = jsvNewObject();
   if (HEAP32[$0 + 340 >> 2]) {
    HEAP32[$0 + 336 >> 2] = 146978;
    if (HEAPU8[373820] & 2) {
     HEAP32[$0 + 336 >> 2] = 112805;
    }
    if (HEAP8[373820] & 1) {
     HEAP32[$0 + 336 >> 2] = 118177;
    }
    if (HEAPU8[373820] & 8) {
     HEAP32[$0 + 336 >> 2] = 117726;
    }
    if (HEAPU8[373820] & 4) {
     HEAP32[$0 + 336 >> 2] = 116871;
    }
    if (HEAPU8[373820] & 16) {
     HEAP32[$0 + 336 >> 2] = 113068;
    }
    if (HEAPU8[373820] & 32) {
     HEAP32[$0 + 336 >> 2] = 113137;
    }
    HEAP32[$0 + 332 >> 2] = HEAPU8[373820] & 128 ? 2 : 1;
    jsvObjectSetChildAndUnLock(HEAP32[$0 + 340 >> 2], 116195, jsvNewFromString(HEAP32[$0 + 336 >> 2]));
    jsvObjectSetChildAndUnLock(HEAP32[$0 + 340 >> 2], 120145, jsvNewFromBool((HEAPU8[373820] & 128) != 0));
    $3 = HEAP32[$0 + 340 >> 2];
    if (HEAPU8[373820] & 16) {
     $1 = 0 - HEAP32[$0 + 332 >> 2] | 0;
    } else {
     if (HEAPU8[373820] & 32) {
      $1 = HEAP32[$0 + 332 >> 2];
     } else {
      $1 = 0;
     }
    }
    jsvObjectSetChildAndUnLock($3, 111928, jsvNewFromInteger($1));
    $3 = HEAP32[$0 + 340 >> 2];
    if (HEAPU8[373820] & 4) {
     $1 = 0 - HEAP32[$0 + 332 >> 2] | 0;
    } else {
     if (HEAPU8[373820] & 8) {
      $1 = HEAP32[$0 + 332 >> 2];
     } else {
      $1 = 0;
     }
    }
    jsvObjectSetChildAndUnLock($3, 111841, jsvNewFromInteger($1));
    $3 = HEAP32[$0 + 340 >> 2];
    if (HEAP8[373820] & 1) {
     $1 = 0 - HEAP32[$0 + 332 >> 2] | 0;
    } else {
     if (HEAPU8[373820] & 2) {
      $1 = HEAP32[$0 + 332 >> 2];
     } else {
      $1 = 0;
     }
    }
    jsvObjectSetChildAndUnLock($3, 111568, jsvNewFromInteger($1));
    jsiQueueObjectCallbacks(HEAP32[$0 + 348 >> 2], 116999, $0 + 340 | 0, 1);
    jsvUnLock(HEAP32[$0 + 340 >> 2]);
   }
  }
  if (HEAP32[93416] & 16384) {
   label$37: {
    if (!HEAP32[$0 + 348 >> 2]) {
     break label$37;
    }
    if (!(jsiObjectHasCallbacks(HEAP32[$0 + 348 >> 2], 119056) & 1)) {
     break label$37;
    }
    HEAP32[$0 + 328 >> 2] = jswrap_banglejs_getCompass();
    if (HEAP32[$0 + 328 >> 2]) {
     jsiQueueObjectCallbacks(HEAP32[$0 + 348 >> 2], 119056, $0 + 328 | 0, 1);
     jsvUnLock(HEAP32[$0 + 328 >> 2]);
    }
   }
  }
  if (HEAP32[93416] & 536870912) {
   HEAP32[$0 + 324 >> 2] = _jswrap_banglejs_getHealthStatusObject(373760);
   if (HEAP32[$0 + 324 >> 2]) {
    jsiQueueObjectCallbacks(HEAP32[$0 + 348 >> 2], 118369, $0 + 324 | 0, 1);
    jsvUnLock(HEAP32[$0 + 324 >> 2]);
   }
  }
  if (HEAP32[93416] & 1073741824) {
   jsiQueueObjectCallbacks(HEAP32[$0 + 348 >> 2], 113074, 0, 0);
  }
  if (HEAP32[93416] & 32768) {
   if (jsiObjectHasCallbacks(HEAP32[$0 + 348 >> 2], 119754) & 1) {
    HEAP32[$0 + 320 >> 2] = jsvNewTypedArray(17, Math_imul(HEAPU8[373821], 3));
    if (HEAP32[$0 + 320 >> 2]) {
     HEAP32[$0 + 316 >> 2] = HEAPU8[373822] - Math_imul(HEAPU8[373821], 3);
     while (1) {
      if (HEAP32[$0 + 316 >> 2] < 0) {
       HEAP32[$0 + 316 >> 2] = HEAP32[$0 + 316 >> 2] + 150;
       continue;
      }
      break;
     }
     jsvArrayBufferIteratorNew($0 + 256 | 0, HEAP32[$0 + 320 >> 2], 0);
     HEAP32[$0 + 252 >> 2] = 0;
     while (1) {
      if (HEAP32[$0 + 252 >> 2] < (Math_imul(HEAPU8[373821], 3) | 0)) {
       $1 = HEAP32[$0 + 316 >> 2];
       HEAP32[$0 + 316 >> 2] = $1 + 1;
       jsvArrayBufferIteratorSetByteValue($0 + 256 | 0, HEAP8[$1 + 373824 | 0]);
       jsvArrayBufferIteratorNext($0 + 256 | 0);
       if (HEAP32[$0 + 316 >> 2] >= 150) {
        HEAP32[$0 + 316 >> 2] = HEAP32[$0 + 316 >> 2] - 150;
       }
       HEAP32[$0 + 252 >> 2] = HEAP32[$0 + 252 >> 2] + 1;
       continue;
      }
      break;
     }
     jsvArrayBufferIteratorFree($0 + 256 | 0);
     jsiQueueObjectCallbacks(HEAP32[$0 + 348 >> 2], 119754, $0 + 320 | 0, 1);
     jsvUnLock(HEAP32[$0 + 320 >> 2]);
    }
   }
   if (jsiObjectHasCallbacks(HEAP32[$0 + 348 >> 2], 119765) & 1) {
    jsfNameFromString($0 + 184 | 0, 117869);
    HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 208 >> 2];
    $3 = HEAP32[$0 + 204 >> 2];
    $1 = HEAP32[$0 + 200 >> 2];
    HEAP32[$0 + 24 >> 2] = $1;
    HEAP32[$0 + 28 >> 2] = $3;
    $1 = HEAP32[$0 + 196 >> 2];
    $3 = HEAP32[$0 + 192 >> 2];
    HEAP32[$0 + 16 >> 2] = $3;
    HEAP32[$0 + 20 >> 2] = $1;
    $3 = HEAP32[$0 + 188 >> 2];
    $1 = HEAP32[$0 + 184 >> 2];
    HEAP32[$0 + 8 >> 2] = $1;
    HEAP32[$0 + 12 >> 2] = $3;
    HEAP32[$0 + 212 >> 2] = jsfFindFile($0 + 8 | 0, $0 + 216 | 0);
    label$51: {
     if (!HEAP32[$0 + 212 >> 2]) {
      jsiConsolePrintf(145407, 0);
      break label$51;
     }
     HEAP32[$0 + 180 >> 2] = jsfGetFileSize($0 + 216 | 0);
     $2 = $2 - (HEAP32[$0 + 180 >> 2] + 15 & -16) | 0;
     __stack_pointer = $2;
     HEAP32[$0 + 176 >> 2] = $2;
     jshFlashRead(HEAP32[$0 + 176 >> 2], HEAP32[$0 + 212 >> 2], HEAP32[$0 + 180 >> 2]);
     HEAP32[$0 + 172 >> 2] = jsvNewNativeString(HEAP32[$0 + 176 >> 2], HEAP32[$0 + 180 >> 2]);
     while (1) {
      if (jsiFreeMoreMemory() & 1) {
       continue;
      }
      break;
     }
     jsvGarbageCollect();
     HEAP32[$0 + 168 >> 2] = jswrap_tensorflow_create(4e3, HEAP32[$0 + 172 >> 2]);
     jsvUnLock(HEAP32[$0 + 172 >> 2]);
     if (HEAP32[$0 + 168 >> 2]) {
      HEAP32[$0 + 164 >> 2] = jswrap_tfmicrointerpreter_getInput(HEAP32[$0 + 168 >> 2]);
      jsvArrayBufferIteratorNew($0 + 104 | 0, HEAP32[$0 + 164 >> 2], 0);
      HEAP32[$0 + 100 >> 2] = HEAPU8[373822] - Math_imul(HEAPU8[373821], 3);
      while (1) {
       if (HEAP32[$0 + 100 >> 2] < 0) {
        HEAP32[$0 + 100 >> 2] = HEAP32[$0 + 100 >> 2] + 150;
        continue;
       }
       break;
      }
      HEAP32[$0 + 96 >> 2] = 0;
      while (1) {
       if (HEAP32[$0 + 96 >> 2] < (Math_imul(HEAPU8[373821], 3) | 0)) {
        $1 = HEAP32[$0 + 100 >> 2];
        HEAP32[$0 + 100 >> 2] = $1 + 1;
        jsvArrayBufferIteratorSetIntegerValue($0 + 104 | 0, HEAP8[$1 + 373824 | 0]);
        jsvArrayBufferIteratorNext($0 + 104 | 0);
        if (HEAP32[$0 + 100 >> 2] >= 150) {
         HEAP32[$0 + 100 >> 2] = HEAP32[$0 + 100 >> 2] - 150;
        }
        HEAP32[$0 + 96 >> 2] = HEAP32[$0 + 96 >> 2] + 1;
        continue;
       }
       break;
      }
      jsvArrayBufferIteratorFree($0 + 104 | 0);
      jsvUnLock(HEAP32[$0 + 164 >> 2]);
      jswrap_tfmicrointerpreter_invoke(HEAP32[$0 + 168 >> 2]);
      HEAP32[$0 + 164 >> 2] = jswrap_tfmicrointerpreter_getOutput(HEAP32[$0 + 168 >> 2]);
      HEAP32[$0 + 92 >> 2] = jswrap_array_slice(HEAP32[$0 + 164 >> 2], 0, 0);
      jsvUnLock2(HEAP32[$0 + 164 >> 2], HEAP32[$0 + 168 >> 2]);
      HEAP32[$0 + 88 >> 2] = jspExecuteJSFunction(138212, 0, 1, $0 + 92 | 0);
      HEAP32[$0 + 80 >> 2] = HEAP32[$0 + 88 >> 2];
      HEAP32[$0 + 84 >> 2] = HEAP32[$0 + 92 >> 2];
      jsiQueueObjectCallbacks(HEAP32[$0 + 348 >> 2], 119765, $0 + 80 | 0, 2);
      jsvUnLock2(HEAP32[$0 + 88 >> 2], HEAP32[$0 + 92 >> 2]);
     }
    }
   }
  }
  if (HEAP32[93416] & 131072) {
   HEAP32[$0 + 76 >> 2] = jsvNewFromBool(HEAP8[373974] & 1);
   jsiQueueObjectCallbacks(HEAP32[$0 + 348 >> 2], 119013, $0 + 76 | 0, 1);
   jsvUnLock(HEAP32[$0 + 76 >> 2]);
  }
  if (HEAP32[93416] & 262144) {
   HEAP32[$0 + 72 >> 2] = jsvNewFromInteger(HEAP32[93431]);
   jsiQueueObjectCallbacks(HEAP32[$0 + 348 >> 2], 116986, $0 + 72 | 0, 1);
   jsvUnLock(HEAP32[$0 + 72 >> 2]);
  }
  if (HEAP32[93416] & 16777216) {
   jsiQueueObjectCallbacks(HEAP32[$0 + 348 >> 2], 112667, 0, 0);
  }
  if (HEAP32[93416] & 33554432) {
   HEAP32[$0 + 68 >> 2] = jsvNewFromBool(HEAP8[373975] & 1);
   jsiQueueObjectCallbacks(HEAP32[$0 + 348 >> 2], 117036, $0 + 68 | 0, 1);
   jsvUnLock(HEAP32[$0 + 68 >> 2]);
  }
  if (HEAP32[93416] & 524288) {
   $1 = $0 + 60 | 0;
   HEAP32[$1 >> 2] = jsvNewFromInteger(HEAP32[93427] == 1 ? -1 : HEAP32[93427] == 2);
   HEAP32[$1 + 4 >> 2] = jsvNewFromInteger(HEAP32[93427] == 3 ? -1 : HEAP32[93427] == 4);
   HEAP32[93427] = 0;
   jsiQueueObjectCallbacks(HEAP32[$0 + 348 >> 2], 119994, $0 + 60 | 0, 2);
   jsvUnLockMany(2, $0 + 60 | 0);
  }
  if (HEAP32[93416] & 3145728) {
   HEAP32[$0 + 52 >> 2] = jsvNewFromInteger(!!(HEAP32[93416] & 1048576) | (HEAP32[93416] & 2097152 ? 2 : 0));
   HEAP32[$0 + 56 >> 2] = jsvNewObject();
   HEAP32[$0 + 48 >> 2] = HEAP16[186849];
   HEAP32[$0 + 44 >> 2] = HEAP16[186850];
   if (HEAP32[$0 + 48 >> 2] < 0) {
    HEAP32[$0 + 48 >> 2] = 0;
   }
   if (HEAP32[$0 + 44 >> 2] < 0) {
    HEAP32[$0 + 44 >> 2] = 0;
   }
   if (HEAP32[$0 + 48 >> 2] >= 176) {
    HEAP32[$0 + 48 >> 2] = 175;
   }
   if (HEAP32[$0 + 44 >> 2] >= 176) {
    HEAP32[$0 + 44 >> 2] = 175;
   }
   jsvObjectSetChildAndUnLock(HEAP32[$0 + 56 >> 2], 111928, jsvNewFromInteger(HEAP32[$0 + 48 >> 2]));
   jsvObjectSetChildAndUnLock(HEAP32[$0 + 56 >> 2], 111841, jsvNewFromInteger(HEAP32[$0 + 44 >> 2]));
   jsvObjectSetChildAndUnLock(HEAP32[$0 + 56 >> 2], 119989, jsvNewFromInteger(HEAPU8[373712]));
   jsiQueueObjectCallbacks(HEAP32[$0 + 348 >> 2], 118519, $0 + 52 | 0, 2);
   jsvUnLockMany(2, $0 + 52 | 0);
  }
 }
 if (HEAP32[93416] & 4194304) {
  HEAP32[$0 + 40 >> 2] = jsvNewObject();
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 40 >> 2], 111928, jsvNewFromInteger(HEAP16[186849]));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 40 >> 2], 111841, jsvNewFromInteger(HEAP16[186850]));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 40 >> 2], 122906, jsvNewFromInteger(HEAP8[373702] & 1));
  $1 = HEAP32[$0 + 40 >> 2];
  if (HEAP8[373713] & 1) {
   $2 = HEAP16[186849] - HEAP16[186857] | 0;
  } else {
   $2 = 0;
  }
  jsvObjectSetChildAndUnLock($1, 111893, jsvNewFromInteger($2));
  $1 = HEAP32[$0 + 40 >> 2];
  if (HEAP8[373713] & 1) {
   $2 = HEAP16[186850] - HEAP16[186858] | 0;
  } else {
   $2 = 0;
  }
  jsvObjectSetChildAndUnLock($1, 111668, jsvNewFromInteger($2));
  jsiQueueObjectCallbacks(HEAP32[$0 + 348 >> 2], 119048, $0 + 40 | 0, 1);
  jsvUnLock(HEAP32[$0 + 40 >> 2]);
  HEAP16[186857] = HEAPU16[186849];
  HEAP16[186858] = HEAPU16[186850];
  HEAP8[373713] = HEAP8[373702] & 1;
 }
 jsvUnLock(HEAP32[$0 + 348 >> 2]);
 HEAP32[93416] = 0;
 if ((HEAPU8[349504] | HEAPU8[349505] << 8) << 16 >> 16 >= (HEAPU8[349500] | HEAPU8[349501] << 8) << 16 >> 16) {
  graphicsInternalFlip();
 }
 if (!(HEAPU8[373792] | !HEAP32[93454])) {
  jspromise_resolve(HEAP32[93454], 0);
  jsvUnLock(HEAP32[93454]);
  HEAP32[93454] = 0;
 }
 if (!(HEAPU16[186897] | !HEAP32[93453])) {
  jspromise_resolve(HEAP32[93453], 0);
  jsvUnLock(HEAP32[93453]);
  HEAP32[93453] = 0;
 }
 __stack_pointer = $0 + 352 | 0;
 return 0;
}

function mbedtls_sha512_finish($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 $1 = HEAP32[$3 + 44 >> 2];
 $0 = HEAP32[$1 + 8 >> 2];
 $2 = HEAP32[$1 + 12 >> 2];
 $4 = $0 << 3;
 $0 = $2 << 3 | $0 >>> 29;
 $5 = $0;
 $2 = HEAP32[$3 + 44 >> 2];
 $0 = HEAP32[$2 >> 2];
 $1 = HEAP32[$2 + 4 >> 2];
 $0 = 0;
 $2 = $0;
 $0 = $1 >>> 29 | 0;
 $1 = $4;
 $0 = $0 | $1;
 HEAP32[$3 + 24 >> 2] = $0;
 $0 = $5;
 $2 = $0 | $2;
 HEAP32[$3 + 28 >> 2] = $2;
 $0 = HEAP32[$3 + 44 >> 2];
 $2 = HEAP32[$0 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $0 = $2;
 $2 = $1 << 3 | $2 >>> 29;
 $0 = $0 << 3;
 HEAP32[$3 + 16 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $2;
 $2 = HEAP32[$3 + 24 >> 2];
 $0 = HEAP32[$3 + 28 >> 2];
 HEAP8[$3 | 0] = $0 >>> 24;
 $2 = HEAP32[$3 + 24 >> 2];
 $1 = HEAP32[$3 + 28 >> 2];
 HEAP8[$3 + 1 | 0] = $1 >>> 16;
 $2 = HEAP32[$3 + 24 >> 2];
 $0 = HEAP32[$3 + 28 >> 2];
 HEAP8[$3 + 2 | 0] = $0 >>> 8;
 $2 = HEAP32[$3 + 24 >> 2];
 $1 = HEAP32[$3 + 28 >> 2];
 HEAP8[$3 + 3 | 0] = $1;
 $2 = HEAP32[$3 + 24 >> 2];
 $1 = $2;
 $0 = HEAP32[$3 + 28 >> 2];
 HEAP8[$3 + 4 | 0] = ($0 & 16777215) << 8 | $1 >>> 24;
 $2 = HEAP32[$3 + 24 >> 2];
 $0 = $2;
 $1 = HEAP32[$3 + 28 >> 2];
 HEAP8[$3 + 5 | 0] = ($1 & 65535) << 16 | $0 >>> 16;
 $2 = HEAP32[$3 + 24 >> 2];
 $1 = $2;
 $0 = HEAP32[$3 + 28 >> 2];
 HEAP8[$3 + 6 | 0] = ($0 & 255) << 24 | $1 >>> 8;
 $2 = HEAP32[$3 + 24 >> 2];
 HEAP8[$3 + 7 | 0] = $2;
 $1 = HEAP32[$3 + 16 >> 2];
 $2 = HEAP32[$3 + 20 >> 2];
 HEAP8[$3 + 8 | 0] = $2 >>> 24;
 $1 = HEAP32[$3 + 16 >> 2];
 $0 = HEAP32[$3 + 20 >> 2];
 HEAP8[$3 + 9 | 0] = $0 >>> 16;
 $1 = HEAP32[$3 + 16 >> 2];
 $2 = HEAP32[$3 + 20 >> 2];
 HEAP8[$3 + 10 | 0] = $2 >>> 8;
 $1 = HEAP32[$3 + 16 >> 2];
 $0 = HEAP32[$3 + 20 >> 2];
 HEAP8[$3 + 11 | 0] = $0;
 $1 = HEAP32[$3 + 16 >> 2];
 $0 = $1;
 $2 = HEAP32[$3 + 20 >> 2];
 HEAP8[$3 + 12 | 0] = ($2 & 16777215) << 8 | $0 >>> 24;
 $1 = HEAP32[$3 + 16 >> 2];
 $2 = $1;
 $0 = HEAP32[$3 + 20 >> 2];
 HEAP8[$3 + 13 | 0] = ($0 & 65535) << 16 | $2 >>> 16;
 $1 = HEAP32[$3 + 16 >> 2];
 $0 = $1;
 $2 = HEAP32[$3 + 20 >> 2];
 HEAP8[$3 + 14 | 0] = ($2 & 255) << 24 | $0 >>> 8;
 $1 = HEAP32[$3 + 16 >> 2];
 HEAP8[$3 + 15 | 0] = $1;
 $2 = HEAP32[$3 + 44 >> 2];
 $0 = HEAP32[$2 >> 2];
 $2 = $0;
 HEAP32[$3 + 36 >> 2] = $2 & 127;
 if (HEAPU32[$3 + 36 >> 2] < 112) {
  $0 = 112 - HEAP32[$3 + 36 >> 2] | 0;
 } else {
  $0 = 240 - HEAP32[$3 + 36 >> 2] | 0;
 }
 HEAP32[$3 + 32 >> 2] = $0;
 mbedtls_sha512_update(HEAP32[$3 + 44 >> 2], 163584, HEAP32[$3 + 32 >> 2]);
 mbedtls_sha512_update(HEAP32[$3 + 44 >> 2], $3, 16);
 $1 = HEAP32[$3 + 44 >> 2];
 $0 = HEAP32[$1 + 16 >> 2];
 $2 = HEAP32[$1 + 20 >> 2];
 HEAP8[HEAP32[$3 + 40 >> 2]] = $2 >>> 24;
 $2 = HEAP32[$3 + 44 >> 2];
 $0 = HEAP32[$2 + 16 >> 2];
 $1 = HEAP32[$2 + 20 >> 2];
 HEAP8[HEAP32[$3 + 40 >> 2] + 1 | 0] = $1 >>> 16;
 $1 = HEAP32[$3 + 44 >> 2];
 $0 = HEAP32[$1 + 16 >> 2];
 $2 = HEAP32[$1 + 20 >> 2];
 HEAP8[HEAP32[$3 + 40 >> 2] + 2 | 0] = $2 >>> 8;
 $2 = HEAP32[$3 + 44 >> 2];
 $0 = HEAP32[$2 + 16 >> 2];
 $1 = HEAP32[$2 + 20 >> 2];
 HEAP8[HEAP32[$3 + 40 >> 2] + 3 | 0] = $1;
 $1 = HEAP32[$3 + 44 >> 2];
 $0 = HEAP32[$1 + 16 >> 2];
 $2 = HEAP32[$1 + 20 >> 2];
 $1 = $0;
 HEAP8[HEAP32[$3 + 40 >> 2] + 4 | 0] = ($2 & 16777215) << 8 | $1 >>> 24;
 $2 = HEAP32[$3 + 44 >> 2];
 $0 = HEAP32[$2 + 16 >> 2];
 $1 = HEAP32[$2 + 20 >> 2];
 $2 = $0;
 HEAP8[HEAP32[$3 + 40 >> 2] + 5 | 0] = ($1 & 65535) << 16 | $2 >>> 16;
 $1 = HEAP32[$3 + 44 >> 2];
 $0 = HEAP32[$1 + 16 >> 2];
 $2 = HEAP32[$1 + 20 >> 2];
 $1 = $0;
 HEAP8[HEAP32[$3 + 40 >> 2] + 6 | 0] = ($2 & 255) << 24 | $1 >>> 8;
 $2 = HEAP32[$3 + 44 >> 2];
 $0 = HEAP32[$2 + 16 >> 2];
 HEAP8[HEAP32[$3 + 40 >> 2] + 7 | 0] = $0;
 $2 = HEAP32[$3 + 44 >> 2];
 $1 = HEAP32[$2 + 24 >> 2];
 $0 = HEAP32[$2 + 28 >> 2];
 HEAP8[HEAP32[$3 + 40 >> 2] + 8 | 0] = $0 >>> 24;
 $0 = HEAP32[$3 + 44 >> 2];
 $1 = HEAP32[$0 + 24 >> 2];
 $2 = HEAP32[$0 + 28 >> 2];
 HEAP8[HEAP32[$3 + 40 >> 2] + 9 | 0] = $2 >>> 16;
 $2 = HEAP32[$3 + 44 >> 2];
 $1 = HEAP32[$2 + 24 >> 2];
 $0 = HEAP32[$2 + 28 >> 2];
 HEAP8[HEAP32[$3 + 40 >> 2] + 10 | 0] = $0 >>> 8;
 $0 = HEAP32[$3 + 44 >> 2];
 $1 = HEAP32[$0 + 24 >> 2];
 $2 = HEAP32[$0 + 28 >> 2];
 HEAP8[HEAP32[$3 + 40 >> 2] + 11 | 0] = $2;
 $2 = HEAP32[$3 + 44 >> 2];
 $1 = HEAP32[$2 + 24 >> 2];
 $0 = HEAP32[$2 + 28 >> 2];
 $2 = $1;
 HEAP8[HEAP32[$3 + 40 >> 2] + 12 | 0] = ($0 & 16777215) << 8 | $2 >>> 24;
 $0 = HEAP32[$3 + 44 >> 2];
 $1 = HEAP32[$0 + 24 >> 2];
 $2 = HEAP32[$0 + 28 >> 2];
 $0 = $1;
 HEAP8[HEAP32[$3 + 40 >> 2] + 13 | 0] = ($2 & 65535) << 16 | $0 >>> 16;
 $2 = HEAP32[$3 + 44 >> 2];
 $1 = HEAP32[$2 + 24 >> 2];
 $0 = HEAP32[$2 + 28 >> 2];
 $2 = $1;
 HEAP8[HEAP32[$3 + 40 >> 2] + 14 | 0] = ($0 & 255) << 24 | $2 >>> 8;
 $0 = HEAP32[$3 + 44 >> 2];
 $1 = HEAP32[$0 + 24 >> 2];
 HEAP8[HEAP32[$3 + 40 >> 2] + 15 | 0] = $1;
 $0 = HEAP32[$3 + 44 >> 2];
 $2 = HEAP32[$0 + 32 >> 2];
 $1 = HEAP32[$0 + 36 >> 2];
 HEAP8[HEAP32[$3 + 40 >> 2] + 16 | 0] = $1 >>> 24;
 $1 = HEAP32[$3 + 44 >> 2];
 $2 = HEAP32[$1 + 32 >> 2];
 $0 = HEAP32[$1 + 36 >> 2];
 HEAP8[HEAP32[$3 + 40 >> 2] + 17 | 0] = $0 >>> 16;
 $0 = HEAP32[$3 + 44 >> 2];
 $2 = HEAP32[$0 + 32 >> 2];
 $1 = HEAP32[$0 + 36 >> 2];
 HEAP8[HEAP32[$3 + 40 >> 2] + 18 | 0] = $1 >>> 8;
 $1 = HEAP32[$3 + 44 >> 2];
 $2 = HEAP32[$1 + 32 >> 2];
 $0 = HEAP32[$1 + 36 >> 2];
 HEAP8[HEAP32[$3 + 40 >> 2] + 19 | 0] = $0;
 $0 = HEAP32[$3 + 44 >> 2];
 $2 = HEAP32[$0 + 32 >> 2];
 $1 = HEAP32[$0 + 36 >> 2];
 $0 = $2;
 HEAP8[HEAP32[$3 + 40 >> 2] + 20 | 0] = ($1 & 16777215) << 8 | $0 >>> 24;
 $1 = HEAP32[$3 + 44 >> 2];
 $2 = HEAP32[$1 + 32 >> 2];
 $0 = HEAP32[$1 + 36 >> 2];
 $1 = $2;
 HEAP8[HEAP32[$3 + 40 >> 2] + 21 | 0] = ($0 & 65535) << 16 | $1 >>> 16;
 $0 = HEAP32[$3 + 44 >> 2];
 $2 = HEAP32[$0 + 32 >> 2];
 $1 = HEAP32[$0 + 36 >> 2];
 $0 = $2;
 HEAP8[HEAP32[$3 + 40 >> 2] + 22 | 0] = ($1 & 255) << 24 | $0 >>> 8;
 $1 = HEAP32[$3 + 44 >> 2];
 $2 = HEAP32[$1 + 32 >> 2];
 HEAP8[HEAP32[$3 + 40 >> 2] + 23 | 0] = $2;
 $1 = HEAP32[$3 + 44 >> 2];
 $0 = HEAP32[$1 + 40 >> 2];
 $2 = HEAP32[$1 + 44 >> 2];
 HEAP8[HEAP32[$3 + 40 >> 2] + 24 | 0] = $2 >>> 24;
 $2 = HEAP32[$3 + 44 >> 2];
 $0 = HEAP32[$2 + 40 >> 2];
 $1 = HEAP32[$2 + 44 >> 2];
 HEAP8[HEAP32[$3 + 40 >> 2] + 25 | 0] = $1 >>> 16;
 $1 = HEAP32[$3 + 44 >> 2];
 $0 = HEAP32[$1 + 40 >> 2];
 $2 = HEAP32[$1 + 44 >> 2];
 HEAP8[HEAP32[$3 + 40 >> 2] + 26 | 0] = $2 >>> 8;
 $2 = HEAP32[$3 + 44 >> 2];
 $0 = HEAP32[$2 + 40 >> 2];
 $1 = HEAP32[$2 + 44 >> 2];
 HEAP8[HEAP32[$3 + 40 >> 2] + 27 | 0] = $1;
 $1 = HEAP32[$3 + 44 >> 2];
 $0 = HEAP32[$1 + 40 >> 2];
 $2 = HEAP32[$1 + 44 >> 2];
 $1 = $0;
 HEAP8[HEAP32[$3 + 40 >> 2] + 28 | 0] = ($2 & 16777215) << 8 | $1 >>> 24;
 $2 = HEAP32[$3 + 44 >> 2];
 $0 = HEAP32[$2 + 40 >> 2];
 $1 = HEAP32[$2 + 44 >> 2];
 $2 = $0;
 HEAP8[HEAP32[$3 + 40 >> 2] + 29 | 0] = ($1 & 65535) << 16 | $2 >>> 16;
 $1 = HEAP32[$3 + 44 >> 2];
 $0 = HEAP32[$1 + 40 >> 2];
 $2 = HEAP32[$1 + 44 >> 2];
 $1 = $0;
 HEAP8[HEAP32[$3 + 40 >> 2] + 30 | 0] = ($2 & 255) << 24 | $1 >>> 8;
 $2 = HEAP32[$3 + 44 >> 2];
 $0 = HEAP32[$2 + 40 >> 2];
 HEAP8[HEAP32[$3 + 40 >> 2] + 31 | 0] = $0;
 $2 = HEAP32[$3 + 44 >> 2];
 $1 = HEAP32[$2 + 48 >> 2];
 $0 = HEAP32[$2 + 52 >> 2];
 HEAP8[HEAP32[$3 + 40 >> 2] + 32 | 0] = $0 >>> 24;
 $0 = HEAP32[$3 + 44 >> 2];
 $1 = HEAP32[$0 + 48 >> 2];
 $2 = HEAP32[$0 + 52 >> 2];
 HEAP8[HEAP32[$3 + 40 >> 2] + 33 | 0] = $2 >>> 16;
 $2 = HEAP32[$3 + 44 >> 2];
 $1 = HEAP32[$2 + 48 >> 2];
 $0 = HEAP32[$2 + 52 >> 2];
 HEAP8[HEAP32[$3 + 40 >> 2] + 34 | 0] = $0 >>> 8;
 $0 = HEAP32[$3 + 44 >> 2];
 $1 = HEAP32[$0 + 48 >> 2];
 $2 = HEAP32[$0 + 52 >> 2];
 HEAP8[HEAP32[$3 + 40 >> 2] + 35 | 0] = $2;
 $2 = HEAP32[$3 + 44 >> 2];
 $1 = HEAP32[$2 + 48 >> 2];
 $0 = HEAP32[$2 + 52 >> 2];
 $2 = $1;
 HEAP8[HEAP32[$3 + 40 >> 2] + 36 | 0] = ($0 & 16777215) << 8 | $2 >>> 24;
 $0 = HEAP32[$3 + 44 >> 2];
 $1 = HEAP32[$0 + 48 >> 2];
 $2 = HEAP32[$0 + 52 >> 2];
 $0 = $1;
 HEAP8[HEAP32[$3 + 40 >> 2] + 37 | 0] = ($2 & 65535) << 16 | $0 >>> 16;
 $2 = HEAP32[$3 + 44 >> 2];
 $1 = HEAP32[$2 + 48 >> 2];
 $0 = HEAP32[$2 + 52 >> 2];
 $2 = $1;
 HEAP8[HEAP32[$3 + 40 >> 2] + 38 | 0] = ($0 & 255) << 24 | $2 >>> 8;
 $0 = HEAP32[$3 + 44 >> 2];
 $1 = HEAP32[$0 + 48 >> 2];
 HEAP8[HEAP32[$3 + 40 >> 2] + 39 | 0] = $1;
 $0 = HEAP32[$3 + 44 >> 2];
 $2 = HEAP32[$0 + 56 >> 2];
 $1 = HEAP32[$0 + 60 >> 2];
 HEAP8[HEAP32[$3 + 40 >> 2] + 40 | 0] = $1 >>> 24;
 $1 = HEAP32[$3 + 44 >> 2];
 $2 = HEAP32[$1 + 56 >> 2];
 $0 = HEAP32[$1 + 60 >> 2];
 HEAP8[HEAP32[$3 + 40 >> 2] + 41 | 0] = $0 >>> 16;
 $0 = HEAP32[$3 + 44 >> 2];
 $2 = HEAP32[$0 + 56 >> 2];
 $1 = HEAP32[$0 + 60 >> 2];
 HEAP8[HEAP32[$3 + 40 >> 2] + 42 | 0] = $1 >>> 8;
 $1 = HEAP32[$3 + 44 >> 2];
 $2 = HEAP32[$1 + 56 >> 2];
 $0 = HEAP32[$1 + 60 >> 2];
 HEAP8[HEAP32[$3 + 40 >> 2] + 43 | 0] = $0;
 $0 = HEAP32[$3 + 44 >> 2];
 $2 = HEAP32[$0 + 56 >> 2];
 $1 = HEAP32[$0 + 60 >> 2];
 $0 = $2;
 HEAP8[HEAP32[$3 + 40 >> 2] + 44 | 0] = ($1 & 16777215) << 8 | $0 >>> 24;
 $1 = HEAP32[$3 + 44 >> 2];
 $2 = HEAP32[$1 + 56 >> 2];
 $0 = HEAP32[$1 + 60 >> 2];
 $1 = $2;
 HEAP8[HEAP32[$3 + 40 >> 2] + 45 | 0] = ($0 & 65535) << 16 | $1 >>> 16;
 $0 = HEAP32[$3 + 44 >> 2];
 $2 = HEAP32[$0 + 56 >> 2];
 $1 = HEAP32[$0 + 60 >> 2];
 $0 = $2;
 HEAP8[HEAP32[$3 + 40 >> 2] + 46 | 0] = ($1 & 255) << 24 | $0 >>> 8;
 $1 = HEAP32[$3 + 44 >> 2];
 $2 = HEAP32[$1 + 56 >> 2];
 HEAP8[HEAP32[$3 + 40 >> 2] + 47 | 0] = $2;
 if (!HEAP32[HEAP32[$3 + 44 >> 2] + 208 >> 2]) {
  $1 = HEAP32[$3 + 44 >> 2];
  $0 = HEAP32[$1 + 64 >> 2];
  $2 = HEAP32[$1 + 68 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 48 | 0] = $2 >>> 24;
  $2 = HEAP32[$3 + 44 >> 2];
  $0 = HEAP32[$2 + 64 >> 2];
  $1 = HEAP32[$2 + 68 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 49 | 0] = $1 >>> 16;
  $1 = HEAP32[$3 + 44 >> 2];
  $0 = HEAP32[$1 + 64 >> 2];
  $2 = HEAP32[$1 + 68 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 50 | 0] = $2 >>> 8;
  $2 = HEAP32[$3 + 44 >> 2];
  $0 = HEAP32[$2 + 64 >> 2];
  $1 = HEAP32[$2 + 68 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 51 | 0] = $1;
  $1 = HEAP32[$3 + 44 >> 2];
  $0 = HEAP32[$1 + 64 >> 2];
  $2 = HEAP32[$1 + 68 >> 2];
  $1 = $0;
  HEAP8[HEAP32[$3 + 40 >> 2] + 52 | 0] = ($2 & 16777215) << 8 | $1 >>> 24;
  $2 = HEAP32[$3 + 44 >> 2];
  $0 = HEAP32[$2 + 64 >> 2];
  $1 = HEAP32[$2 + 68 >> 2];
  $2 = $0;
  HEAP8[HEAP32[$3 + 40 >> 2] + 53 | 0] = ($1 & 65535) << 16 | $2 >>> 16;
  $1 = HEAP32[$3 + 44 >> 2];
  $0 = HEAP32[$1 + 64 >> 2];
  $2 = HEAP32[$1 + 68 >> 2];
  $1 = $0;
  HEAP8[HEAP32[$3 + 40 >> 2] + 54 | 0] = ($2 & 255) << 24 | $1 >>> 8;
  $2 = HEAP32[$3 + 44 >> 2];
  $0 = HEAP32[$2 + 64 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 55 | 0] = $0;
  $2 = HEAP32[$3 + 44 >> 2];
  $1 = HEAP32[$2 + 72 >> 2];
  $0 = HEAP32[$2 + 76 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 56 | 0] = $0 >>> 24;
  $0 = HEAP32[$3 + 44 >> 2];
  $1 = HEAP32[$0 + 72 >> 2];
  $2 = HEAP32[$0 + 76 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 57 | 0] = $2 >>> 16;
  $2 = HEAP32[$3 + 44 >> 2];
  $1 = HEAP32[$2 + 72 >> 2];
  $0 = HEAP32[$2 + 76 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 58 | 0] = $0 >>> 8;
  $0 = HEAP32[$3 + 44 >> 2];
  $1 = HEAP32[$0 + 72 >> 2];
  $2 = HEAP32[$0 + 76 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 59 | 0] = $2;
  $2 = HEAP32[$3 + 44 >> 2];
  $1 = HEAP32[$2 + 72 >> 2];
  $0 = HEAP32[$2 + 76 >> 2];
  $2 = $1;
  HEAP8[HEAP32[$3 + 40 >> 2] + 60 | 0] = ($0 & 16777215) << 8 | $2 >>> 24;
  $0 = HEAP32[$3 + 44 >> 2];
  $1 = HEAP32[$0 + 72 >> 2];
  $2 = HEAP32[$0 + 76 >> 2];
  $0 = $1;
  HEAP8[HEAP32[$3 + 40 >> 2] + 61 | 0] = ($2 & 65535) << 16 | $0 >>> 16;
  $2 = HEAP32[$3 + 44 >> 2];
  $1 = HEAP32[$2 + 72 >> 2];
  $0 = HEAP32[$2 + 76 >> 2];
  $2 = $1;
  HEAP8[HEAP32[$3 + 40 >> 2] + 62 | 0] = ($0 & 255) << 24 | $2 >>> 8;
  $0 = HEAP32[$3 + 44 >> 2];
  $1 = HEAP32[$0 + 72 >> 2];
  HEAP8[HEAP32[$3 + 40 >> 2] + 63 | 0] = $1;
 }
 __stack_pointer = $3 + 48 | 0;
}

function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__exp_on_negative_values_int_2c_205__28gemmlowp__FixedPoint_int_2c_205__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 496 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 480 >> 2] = $0;
 HEAP32[$1 + 472 >> 2] = gemmlowp__FixedPoint_int_2c_205__20gemmlowp__FixedPoint_int_2c_205___ConstantPOT__2__28_29();
 HEAP32[$1 + 456 >> 2] = HEAP32[$1 + 472 >> 2];
 HEAP32[$1 + 448 >> 2] = gemmlowp__FixedPoint_int_2c_205___FromScalarRaw_28int_29(1);
 HEAP32[$1 + 464 >> 2] = gemmlowp__FixedPoint_int_2c_205__20gemmlowp__operator__int_2c_205__28gemmlowp__FixedPoint_int_2c_205__2c_20gemmlowp__FixedPoint_int_2c_205__29(HEAP32[$1 + 456 >> 2], HEAP32[$1 + 448 >> 2]);
 HEAP32[$1 + 424 >> 2] = HEAP32[$1 + 480 >> 2];
 HEAP32[$1 + 416 >> 2] = HEAP32[$1 + 464 >> 2];
 HEAP32[$1 + 432 >> 2] = gemmlowp__FixedPoint_int_2c_205__20gemmlowp__operator__int_2c_205__28gemmlowp__FixedPoint_int_2c_205__2c_20gemmlowp__FixedPoint_int_2c_205__29_1(HEAP32[$1 + 424 >> 2], HEAP32[$1 + 416 >> 2]);
 HEAP32[$1 + 408 >> 2] = HEAP32[$1 + 472 >> 2];
 HEAP32[$1 + 440 >> 2] = gemmlowp__FixedPoint_int_2c_205__20gemmlowp__operator__int_2c_205__28gemmlowp__FixedPoint_int_2c_205__2c_20gemmlowp__FixedPoint_int_2c_205__29(HEAP32[$1 + 432 >> 2], HEAP32[$1 + 408 >> 2]);
 HEAP32[$1 + 392 >> 2] = HEAP32[$1 + 440 >> 2];
 HEAP32[$1 + 400 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__Rescale_0_2c_20int_2c_205__28gemmlowp__FixedPoint_int_2c_205__29(HEAP32[$1 + 392 >> 2]);
 HEAP32[$1 + 488 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__exp_on_interval_between_negative_one_quarter_and_0_excl_int__28gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 400 >> 2]);
 HEAP32[$1 + 376 >> 2] = HEAP32[$1 + 440 >> 2];
 HEAP32[$1 + 368 >> 2] = HEAP32[$1 + 480 >> 2];
 HEAP32[$1 + 384 >> 2] = gemmlowp__FixedPoint_int_2c_205__20gemmlowp__operator__int_2c_205__28gemmlowp__FixedPoint_int_2c_205__2c_20gemmlowp__FixedPoint_int_2c_205__29(HEAP32[$1 + 376 >> 2], HEAP32[$1 + 368 >> 2]);
 HEAP32[$1 + 388 >> 2] = HEAP32[gemmlowp__FixedPoint_int_2c_205___raw_28_29($1 + 384 | 0) >> 2];
 HEAP32[$1 + 360 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_200___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_200___28int_29(1672461947));
 $0 = int_20gemmlowp__MaskIfNonZero_int__28int_29(int_20gemmlowp__BitAnd_int__28int_2c_20int_29(HEAP32[$1 + 388 >> 2], int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(16777216)));
 HEAP32[$1 + 336 >> 2] = HEAP32[$1 + 488 >> 2];
 HEAP32[$1 + 328 >> 2] = HEAP32[$1 + 360 >> 2];
 HEAP32[$1 + 344 >> 2] = gemmlowp__FixedPoint_int_2c_200_20__200__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 336 >> 2], HEAP32[$1 + 328 >> 2]);
 HEAP32[$1 + 320 >> 2] = HEAP32[$1 + 488 >> 2];
 HEAP32[$1 + 352 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SelectUsingMask_int_2c_200__28int_2c_20gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, HEAP32[$1 + 344 >> 2], HEAP32[$1 + 320 >> 2]);
 HEAP32[$1 + 488 >> 2] = HEAP32[$1 + 352 >> 2];
 HEAP32[$1 + 312 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_200___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_200___28int_29(1302514674));
 $0 = int_20gemmlowp__MaskIfNonZero_int__28int_29(int_20gemmlowp__BitAnd_int__28int_2c_20int_29(HEAP32[$1 + 388 >> 2], int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(33554432)));
 HEAP32[$1 + 288 >> 2] = HEAP32[$1 + 488 >> 2];
 HEAP32[$1 + 280 >> 2] = HEAP32[$1 + 312 >> 2];
 HEAP32[$1 + 296 >> 2] = gemmlowp__FixedPoint_int_2c_200_20__200__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 288 >> 2], HEAP32[$1 + 280 >> 2]);
 HEAP32[$1 + 272 >> 2] = HEAP32[$1 + 488 >> 2];
 HEAP32[$1 + 304 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SelectUsingMask_int_2c_200__28int_2c_20gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, HEAP32[$1 + 296 >> 2], HEAP32[$1 + 272 >> 2]);
 HEAP32[$1 + 488 >> 2] = HEAP32[$1 + 304 >> 2];
 HEAP32[$1 + 264 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_200___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_200___28int_29(790015084));
 $0 = int_20gemmlowp__MaskIfNonZero_int__28int_29(int_20gemmlowp__BitAnd_int__28int_2c_20int_29(HEAP32[$1 + 388 >> 2], int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(67108864)));
 HEAP32[$1 + 240 >> 2] = HEAP32[$1 + 488 >> 2];
 HEAP32[$1 + 232 >> 2] = HEAP32[$1 + 264 >> 2];
 HEAP32[$1 + 248 >> 2] = gemmlowp__FixedPoint_int_2c_200_20__200__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 240 >> 2], HEAP32[$1 + 232 >> 2]);
 HEAP32[$1 + 224 >> 2] = HEAP32[$1 + 488 >> 2];
 HEAP32[$1 + 256 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SelectUsingMask_int_2c_200__28int_2c_20gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, HEAP32[$1 + 248 >> 2], HEAP32[$1 + 224 >> 2]);
 HEAP32[$1 + 488 >> 2] = HEAP32[$1 + 256 >> 2];
 HEAP32[$1 + 216 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_200___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_200___28int_29(290630308));
 $0 = int_20gemmlowp__MaskIfNonZero_int__28int_29(int_20gemmlowp__BitAnd_int__28int_2c_20int_29(HEAP32[$1 + 388 >> 2], int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(134217728)));
 HEAP32[$1 + 192 >> 2] = HEAP32[$1 + 488 >> 2];
 HEAP32[$1 + 184 >> 2] = HEAP32[$1 + 216 >> 2];
 HEAP32[$1 + 200 >> 2] = gemmlowp__FixedPoint_int_2c_200_20__200__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 192 >> 2], HEAP32[$1 + 184 >> 2]);
 HEAP32[$1 + 176 >> 2] = HEAP32[$1 + 488 >> 2];
 HEAP32[$1 + 208 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SelectUsingMask_int_2c_200__28int_2c_20gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, HEAP32[$1 + 200 >> 2], HEAP32[$1 + 176 >> 2]);
 HEAP32[$1 + 488 >> 2] = HEAP32[$1 + 208 >> 2];
 HEAP32[$1 + 168 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_200___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_200___28int_29(39332535));
 $0 = int_20gemmlowp__MaskIfNonZero_int__28int_29(int_20gemmlowp__BitAnd_int__28int_2c_20int_29(HEAP32[$1 + 388 >> 2], int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(268435456)));
 HEAP32[$1 + 144 >> 2] = HEAP32[$1 + 488 >> 2];
 HEAP32[$1 + 136 >> 2] = HEAP32[$1 + 168 >> 2];
 HEAP32[$1 + 152 >> 2] = gemmlowp__FixedPoint_int_2c_200_20__200__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 144 >> 2], HEAP32[$1 + 136 >> 2]);
 HEAP32[$1 + 128 >> 2] = HEAP32[$1 + 488 >> 2];
 HEAP32[$1 + 160 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SelectUsingMask_int_2c_200__28int_2c_20gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, HEAP32[$1 + 152 >> 2], HEAP32[$1 + 128 >> 2]);
 HEAP32[$1 + 488 >> 2] = HEAP32[$1 + 160 >> 2];
 HEAP32[$1 + 120 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_200___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_200___28int_29(720401));
 $0 = int_20gemmlowp__MaskIfNonZero_int__28int_29(int_20gemmlowp__BitAnd_int__28int_2c_20int_29(HEAP32[$1 + 388 >> 2], int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(536870912)));
 HEAP32[$1 + 96 >> 2] = HEAP32[$1 + 488 >> 2];
 HEAP32[$1 + 88 >> 2] = HEAP32[$1 + 120 >> 2];
 HEAP32[$1 + 104 >> 2] = gemmlowp__FixedPoint_int_2c_200_20__200__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 96 >> 2], HEAP32[$1 + 88 >> 2]);
 HEAP32[$1 + 80 >> 2] = HEAP32[$1 + 488 >> 2];
 HEAP32[$1 + 112 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SelectUsingMask_int_2c_200__28int_2c_20gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, HEAP32[$1 + 104 >> 2], HEAP32[$1 + 80 >> 2]);
 HEAP32[$1 + 488 >> 2] = HEAP32[$1 + 112 >> 2];
 HEAP32[$1 + 72 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_200___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_200___28int_29(242));
 $0 = int_20gemmlowp__MaskIfNonZero_int__28int_29(int_20gemmlowp__BitAnd_int__28int_2c_20int_29(HEAP32[$1 + 388 >> 2], int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(1073741824)));
 HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 488 >> 2];
 HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 72 >> 2];
 HEAP32[$1 + 56 >> 2] = gemmlowp__FixedPoint_int_2c_200_20__200__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 48 >> 2], HEAP32[$1 + 40 >> 2]);
 HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 488 >> 2];
 HEAP32[$1 + 64 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SelectUsingMask_int_2c_200__28int_2c_20gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, HEAP32[$1 + 56 >> 2], HEAP32[$1 + 32 >> 2]);
 HEAP32[$1 + 488 >> 2] = HEAP32[$1 + 64 >> 2];
 HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 480 >> 2];
 $0 = int_20gemmlowp__MaskIfZero_int_2c_205__28gemmlowp__FixedPoint_int_2c_205__29(HEAP32[$1 + 16 >> 2]);
 HEAP32[$1 + 8 >> 2] = gemmlowp__FixedPoint_int_2c_200___One_28_29();
 HEAP32[$1 >> 2] = HEAP32[$1 + 488 >> 2];
 HEAP32[$1 + 24 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SelectUsingMask_int_2c_200__28int_2c_20gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, HEAP32[$1 + 8 >> 2], HEAP32[$1 >> 2]);
 HEAP32[$1 + 488 >> 2] = HEAP32[$1 + 24 >> 2];
 __stack_pointer = $1 + 496 | 0;
 return HEAP32[$1 + 488 >> 2];
}

function jsiHandleChar($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 31 | 0] = $0;
 label$1: {
  if (jsiPasswordProtected() & 1) {
   if (!(HEAP8[$1 + 31 | 0] != 13 & HEAP8[$1 + 31 | 0] != 10)) {
    HEAP32[$1 + 24 >> 2] = jsvObjectGetChildIfExists(HEAP32[86751], 120564);
    label$5: {
     if (!HEAP32[$1 + 24 >> 2]) {
      break label$5;
     }
     if (jsvCompareString(HEAP32[86768], HEAP32[$1 + 24 >> 2], 0, 0, 0)) {
      break label$5;
     }
     HEAP16[173534] = HEAPU16[173534] & -1025;
    }
    jsvUnLock(HEAP32[$1 + 24 >> 2]);
    jsiClearInputLine(0);
    label$6: {
     if (jsiPasswordProtected() & 1) {
      jsiConsolePrintString(125364);
      break label$6;
     }
     jsiConsolePrintString(146242);
     HEAP8[347076] = 1;
     jsiConsoleReturnInputLine();
    }
    break label$1;
   }
   HEAP8[$1 + 22 | 0] = HEAPU8[$1 + 31 | 0];
   HEAP8[$1 + 23 | 0] = 0;
   if (jsvGetStringLength(HEAP32[86768]) >>> 0 < 20) {
    jsiAppendToInputLine($1 + 22 | 0);
   }
   break label$1;
  }
  if (!HEAP8[$1 + 31 | 0]) {
   HEAP8[347084] = 0;
   break label$1;
  }
  label$10: {
   if (HEAP8[$1 + 31 | 0] == 1) {
    jsiHandleHome();
    break label$10;
   }
   label$12: {
    if (HEAP8[$1 + 31 | 0] == 4) {
     jsiHandleDelete(0);
     break label$12;
    }
    label$14: {
     if (HEAP8[$1 + 31 | 0] == 5) {
      jsiHandleEnd();
      break label$14;
     }
     label$16: {
      if (!(HEAP8[$1 + 31 | 0] != 21 & HEAP8[$1 + 31 | 0] != 23)) {
       jsiClearInputLine(1);
       break label$16;
      }
      label$19: {
       if (HEAP8[$1 + 31 | 0] == 27) {
        HEAP8[347084] = 2;
        break label$19;
       }
       label$21: {
        if (HEAPU8[347084] == 2) {
         HEAP8[347084] = 0;
         label$23: {
          if (HEAP8[$1 + 31 | 0] == 79) {
           HEAP8[347084] = 3;
           break label$23;
          }
          label$25: {
           if (HEAP8[$1 + 31 | 0] == 91) {
            HEAP8[347084] = 4;
            break label$25;
           }
           if (HEAP8[$1 + 31 | 0] == 10) {
            jsiHandleNewLine(0);
           }
          }
         }
         break label$21;
        }
        label$28: {
         if (HEAPU8[347084] == 3) {
          HEAP8[347084] = 0;
          label$30: {
           if (HEAP8[$1 + 31 | 0] == 70) {
            jsiHandleEnd();
            break label$30;
           }
           label$32: {
            if (HEAP8[$1 + 31 | 0] == 72) {
             jsiHandleHome();
             break label$32;
            }
            label$34: {
             if (HEAP8[$1 + 31 | 0] == 111) {
              jsiHandleChar(47);
              break label$34;
             }
             label$36: {
              if (HEAP8[$1 + 31 | 0] == 106) {
               jsiHandleChar(42);
               break label$36;
              }
              label$38: {
               if (HEAP8[$1 + 31 | 0] == 109) {
                jsiHandleChar(45);
                break label$38;
               }
               label$40: {
                if (HEAP8[$1 + 31 | 0] == 107) {
                 jsiHandleChar(43);
                 break label$40;
                }
                if (HEAP8[$1 + 31 | 0] == 77) {
                 jsiHandleChar(13);
                }
               }
              }
             }
            }
           }
          }
          break label$28;
         }
         label$43: {
          if (HEAPU8[347084] == 4) {
           HEAP8[347084] = 0;
           label$45: {
            if (!(HEAP8[$1 + 31 | 0] < 48 | HEAP8[$1 + 31 | 0] > 57)) {
             HEAP16[173572] = HEAP8[$1 + 31 | 0] - 48;
             HEAP8[347084] = 5;
             break label$45;
            }
            label$47: {
             if (HEAP8[$1 + 31 | 0] == 68) {
              if (!HEAP32[86770]) {
               break label$47;
              }
              if ((jsvGetCharInString(HEAP32[86768], HEAP32[86770] - 1 | 0) | 0) == 10) {
               break label$47;
              }
              HEAP32[86770] = HEAP32[86770] - 1;
              if (jsiShowInputLine() & 1) {
               jsiConsolePrintString(124966);
              }
              break label$47;
             }
             label$50: {
              if (HEAP8[$1 + 31 | 0] == 67) {
               if (HEAPU32[86770] >= jsvGetStringLength(HEAP32[86768]) >>> 0) {
                break label$50;
               }
               if ((jsvGetCharInString(HEAP32[86768], HEAP32[86770]) | 0) == 10) {
                break label$50;
               }
               HEAP32[86770] = HEAP32[86770] + 1;
               if (jsiShowInputLine() & 1) {
                jsiConsolePrintString(125164);
               }
               break label$50;
              }
              label$53: {
               if (HEAP8[$1 + 31 | 0] == 65) {
                HEAP32[$1 + 16 >> 2] = jsvGetStringLength(HEAP32[86768]);
                label$55: {
                 label$56: {
                  if (HEAP32[$1 + 16 >> 2]) {
                   if (!(jsiIsInHistory(HEAP32[86768]) & 1)) {
                    break label$56;
                   }
                  }
                  if (HEAP32[86770] != HEAP32[$1 + 16 >> 2]) {
                   break label$56;
                  }
                  jsiChangeToHistory(1);
                  break label$55;
                 }
                 jsiHandleMoveUpDown(-1);
                }
                break label$53;
               }
               label$58: {
                if (HEAP8[$1 + 31 | 0] == 66) {
                 HEAP32[$1 + 12 >> 2] = jsvGetStringLength(HEAP32[86768]);
                 label$60: {
                  label$61: {
                   if (HEAP32[$1 + 12 >> 2]) {
                    if (!(jsiIsInHistory(HEAP32[86768]) & 1)) {
                     break label$61;
                    }
                   }
                   if (HEAP32[86770] != HEAP32[$1 + 12 >> 2]) {
                    break label$61;
                   }
                   jsiChangeToHistory(0);
                   break label$60;
                  }
                  jsiHandleMoveUpDown(1);
                 }
                 break label$58;
                }
                label$63: {
                 if (HEAP8[$1 + 31 | 0] == 70) {
                  jsiHandleEnd();
                  break label$63;
                 }
                 if (HEAP8[$1 + 31 | 0] == 72) {
                  jsiHandleHome();
                 }
                }
               }
              }
             }
            }
           }
           break label$43;
          }
          label$66: {
           if (HEAPU8[347084] == 5) {
            if (!(HEAP8[$1 + 31 | 0] < 48 | HEAP8[$1 + 31 | 0] > 57)) {
             HEAP16[173572] = (HEAP8[$1 + 31 | 0] + Math_imul(HEAPU16[173572], 10) | 0) - 48;
             break label$66;
            }
            label$69: {
             if (HEAP8[$1 + 31 | 0] == 100) {
              HEAP16[173546] = HEAPU16[173572];
              break label$69;
             }
             label$71: {
              if (HEAP8[$1 + 31 | 0] == 72) {
               if (HEAPU16[173572] == 2) {
                jsiClearInputLine(1);
               }
               break label$71;
              }
              if (HEAP8[$1 + 31 | 0] == 126) {
               label$75: {
                if (HEAPU16[173572] == 1) {
                 jsiHandleHome();
                 break label$75;
                }
                label$77: {
                 if (HEAPU16[173572] == 3) {
                  jsiHandleDelete(0);
                  break label$77;
                 }
                 label$79: {
                  if (HEAPU16[173572] == 4) {
                   jsiHandleEnd();
                   break label$79;
                  }
                  label$81: {
                   if (HEAPU16[173572] == 5) {
                    jsiHandlePageUpDown(0);
                    break label$81;
                   }
                   if (HEAPU16[173572] == 6) {
                    jsiHandlePageUpDown(1);
                   }
                  }
                 }
                }
               }
              }
             }
            }
            HEAP8[347084] = 0;
            break label$66;
           }
           label$84: {
            label$85: {
             if (HEAP8[$1 + 31 | 0] != 16) {
              break label$85;
             }
             if (jsvGetStringLength(HEAP32[86768])) {
              break label$85;
             }
             HEAP16[173534] = HEAPU16[173534] | 2;
             break label$84;
            }
            HEAP8[347084] = 0;
            label$86: {
             if (!(HEAP8[$1 + 31 | 0] != 8 & HEAP8[$1 + 31 | 0] != 127)) {
              jsiHandleDelete(1);
              break label$86;
             }
             label$89: {
              if (!(HEAP8[$1 + 31 | 0] != 10 | HEAPU8[347084] != 1)) {
               HEAP8[347084] = 0;
               break label$89;
              }
              label$91: {
               if (!(HEAP8[$1 + 31 | 0] != 13 & HEAP8[$1 + 31 | 0] != 10)) {
                if (HEAP8[$1 + 31 | 0] == 13) {
                 HEAP8[347084] = 1;
                }
                jsiHandleNewLine(1);
                break label$91;
               }
               label$95: {
                label$96: {
                 if (HEAP8[$1 + 31 | 0] != 9) {
                  break label$96;
                 }
                 if (!(jsiEcho() & 1)) {
                  break label$96;
                 }
                 jsiTabComplete();
                 break label$95;
                }
                if (!(HEAP8[$1 + 31 | 0] != 9 & HEAPU8[$1 + 31 | 0] < 32)) {
                 HEAP8[$1 + 10 | 0] = HEAPU8[$1 + 31 | 0];
                 HEAP8[$1 + 11 | 0] = 0;
                 HEAP32[$1 + 4 >> 2] = HEAP8[$1 + 31 | 0] == 9 ? 144365 : $1 + 10 | 0;
                 jsiAppendStringToInputLine(HEAP32[$1 + 4 >> 2]);
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 __stack_pointer = $1 + 32 | 0;
}

function __rem_pio2_large($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 $8 = __stack_pointer - 560 | 0;
 __stack_pointer = $8;
 $7 = ($2 - 3 | 0) / 24 | 0;
 $18 = ($7 | 0) > 0 ? $7 : 0;
 $13 = Math_imul($18, -24) + $2 | 0;
 $12 = HEAP32[($4 << 2) + 175680 >> 2];
 $15 = $3 - 1 | 0;
 if (($12 + $15 | 0) >= 0) {
  $6 = $3 + $12 | 0;
  $2 = $18 - $15 | 0;
  $7 = 0;
  while (1) {
   $5 = ($2 | 0) < 0 ? 0 : +HEAP32[($2 << 2) + 175696 >> 2];
   HEAPF64[($8 + 320 | 0) + ($7 << 3) >> 3] = $5;
   $2 = $2 + 1 | 0;
   $7 = $7 + 1 | 0;
   if (($7 | 0) != ($6 | 0)) {
    continue;
   }
   break;
  }
 }
 $17 = $13 - 24 | 0;
 $6 = 0;
 $10 = ($12 | 0) > 0 ? $12 : 0;
 $11 = ($3 | 0) <= 0;
 while (1) {
  label$6: {
   if ($11) {
    $5 = 0;
    break label$6;
   }
   $7 = $6 + $15 | 0;
   $2 = 0;
   $5 = 0;
   while (1) {
    $5 = HEAPF64[($2 << 3) + $0 >> 3] * HEAPF64[($8 + 320 | 0) + ($7 - $2 << 3) >> 3] + $5;
    $2 = $2 + 1 | 0;
    if (($3 | 0) != ($2 | 0)) {
     continue;
    }
    break;
   }
  }
  HEAPF64[($6 << 3) + $8 >> 3] = $5;
  $2 = ($6 | 0) == ($10 | 0);
  $6 = $6 + 1 | 0;
  if (!$2) {
   continue;
  }
  break;
 }
 $23 = 47 - $13 | 0;
 $21 = 48 - $13 | 0;
 $24 = $13 - 25 | 0;
 $6 = $12;
 label$9: {
  while (1) {
   $5 = HEAPF64[($6 << 3) + $8 >> 3];
   $2 = 0;
   $7 = $6;
   $15 = ($6 | 0) <= 0;
   if (!$15) {
    while (1) {
     $10 = $2 << 2;
     $10 = $10 + ($8 + 480 | 0) | 0;
     $9 = $5 * 5.960464477539063e-8;
     label$14: {
      if (Math_abs($9) < 2147483648) {
       $11 = ~~$9;
       break label$14;
      }
      $11 = -2147483648;
     }
     $9 = +($11 | 0);
     $5 = $9 * -16777216 + $5;
     label$13: {
      if (Math_abs($5) < 2147483648) {
       $11 = ~~$5;
       break label$13;
      }
      $11 = -2147483648;
     }
     HEAP32[$10 >> 2] = $11;
     $7 = $7 - 1 | 0;
     $5 = HEAPF64[($7 << 3) + $8 >> 3] + $9;
     $2 = $2 + 1 | 0;
     if (($6 | 0) != ($2 | 0)) {
      continue;
     }
     break;
    }
   }
   $5 = scalbn($5, $17);
   $5 = $5 + floor($5 * .125) * -8;
   label$17: {
    if (Math_abs($5) < 2147483648) {
     $16 = ~~$5;
     break label$17;
    }
    $16 = -2147483648;
   }
   $5 = $5 - +($16 | 0);
   label$19: {
    label$20: {
     label$21: {
      $22 = ($17 | 0) <= 0;
      label$22: {
       if (!$22) {
        $7 = ($6 << 2) + $8 | 0;
        $2 = $7 + 476 | 0;
        $11 = $2;
        $2 = HEAP32[$7 + 476 >> 2];
        $7 = $2;
        $2 = $2 >> $21;
        $7 = $7 - ($2 << $21) | 0;
        HEAP32[$11 >> 2] = $7;
        $16 = $2 + $16 | 0;
        $14 = $7 >> $23;
        break label$22;
       }
       if ($17) {
        break label$21;
       }
       $14 = HEAP32[(($6 << 2) + $8 | 0) + 476 >> 2] >> 23;
      }
      if (($14 | 0) <= 0) {
       break label$19;
      }
      break label$20;
     }
     $14 = 2;
     if ($5 >= .5) {
      break label$20;
     }
     $14 = 0;
     break label$19;
    }
    $2 = 0;
    $11 = 0;
    if (!$15) {
     while (1) {
      $15 = ($8 + 480 | 0) + ($2 << 2) | 0;
      $7 = HEAP32[$15 >> 2];
      $10 = 16777215;
      label$26: {
       label$27: {
        if ($11) {
         break label$27;
        }
        $10 = 16777216;
        if ($7) {
         break label$27;
        }
        $11 = 0;
        break label$26;
       }
       HEAP32[$15 >> 2] = $10 - $7;
       $11 = 1;
      }
      $2 = $2 + 1 | 0;
      if (($6 | 0) != ($2 | 0)) {
       continue;
      }
      break;
     }
    }
    label$28: {
     if ($22) {
      break label$28;
     }
     $2 = 8388607;
     label$29: {
      switch ($24 | 0) {
      case 1:
       $2 = 4194303;
       break;

      case 0:
       break label$29;

      default:
       break label$28;
      }
     }
     $10 = ($6 << 2) + $8 | 0;
     $7 = $10 + 476 | 0;
     HEAP32[$7 >> 2] = HEAP32[$10 + 476 >> 2] & $2;
    }
    $16 = $16 + 1 | 0;
    if (($14 | 0) != 2) {
     break label$19;
    }
    $5 = 1 - $5;
    $14 = 2;
    if (!$11) {
     break label$19;
    }
    $5 = $5 - scalbn(1, $17);
   }
   if ($5 == 0) {
    $7 = 0;
    label$32: {
     $2 = $6;
     if (($12 | 0) >= ($2 | 0)) {
      break label$32;
     }
     while (1) {
      $2 = $2 - 1 | 0;
      $7 = HEAP32[($8 + 480 | 0) + ($2 << 2) >> 2] | $7;
      if (($2 | 0) > ($12 | 0)) {
       continue;
      }
      break;
     }
     if (!$7) {
      break label$32;
     }
     $13 = $17;
     while (1) {
      $13 = $13 - 24 | 0;
      $6 = $6 - 1 | 0;
      if (!HEAP32[($8 + 480 | 0) + ($6 << 2) >> 2]) {
       continue;
      }
      break;
     }
     break label$9;
    }
    $2 = 1;
    while (1) {
     $7 = $2;
     $2 = $2 + 1 | 0;
     if (!HEAP32[($8 + 480 | 0) + ($12 - $7 << 2) >> 2]) {
      continue;
     }
     break;
    }
    $10 = $6 + $7 | 0;
    while (1) {
     $7 = $3 + $6 | 0;
     $6 = $6 + 1 | 0;
     HEAPF64[($8 + 320 | 0) + ($7 << 3) >> 3] = HEAP32[($18 + $6 << 2) + 175696 >> 2];
     $2 = 0;
     $5 = 0;
     if (($3 | 0) > 0) {
      while (1) {
       $5 = HEAPF64[($2 << 3) + $0 >> 3] * HEAPF64[($8 + 320 | 0) + ($7 - $2 << 3) >> 3] + $5;
       $2 = $2 + 1 | 0;
       if (($3 | 0) != ($2 | 0)) {
        continue;
       }
       break;
      }
     }
     HEAPF64[($6 << 3) + $8 >> 3] = $5;
     if (($6 | 0) < ($10 | 0)) {
      continue;
     }
     break;
    }
    $6 = $10;
    continue;
   }
   break;
  }
  $5 = scalbn($5, 24 - $13 | 0);
  label$39: {
   if ($5 >= 16777216) {
    $3 = $6 << 2;
    $3 = $3 + ($8 + 480 | 0) | 0;
    $9 = $5 * 5.960464477539063e-8;
    label$42: {
     if (Math_abs($9) < 2147483648) {
      $2 = ~~$9;
      break label$42;
     }
     $2 = -2147483648;
    }
    $5 = +($2 | 0) * -16777216 + $5;
    label$41: {
     if (Math_abs($5) < 2147483648) {
      $7 = ~~$5;
      break label$41;
     }
     $7 = -2147483648;
    }
    HEAP32[$3 >> 2] = $7;
    $6 = $6 + 1 | 0;
    break label$39;
   }
   if (Math_abs($5) < 2147483648) {
    $2 = ~~$5;
   } else {
    $2 = -2147483648;
   }
   $13 = $17;
  }
  HEAP32[($8 + 480 | 0) + ($6 << 2) >> 2] = $2;
 }
 $5 = scalbn(1, $13);
 label$47: {
  if (($6 | 0) < 0) {
   break label$47;
  }
  $3 = $6;
  while (1) {
   $2 = $3;
   HEAPF64[($2 << 3) + $8 >> 3] = $5 * +HEAP32[($8 + 480 | 0) + ($2 << 2) >> 2];
   $3 = $2 - 1 | 0;
   $5 = $5 * 5.960464477539063e-8;
   if ($2) {
    continue;
   }
   break;
  }
  $10 = 0;
  if (($6 | 0) < 0) {
   break label$47;
  }
  $12 = ($12 | 0) > 0 ? $12 : 0;
  $7 = $6;
  while (1) {
   $0 = $10 >>> 0 > $12 >>> 0 ? $12 : $10;
   $11 = $6 - $7 | 0;
   $2 = 0;
   $5 = 0;
   while (1) {
    $5 = HEAPF64[($2 << 3) + 178464 >> 3] * HEAPF64[($2 + $7 << 3) + $8 >> 3] + $5;
    $3 = ($0 | 0) != ($2 | 0);
    $2 = $2 + 1 | 0;
    if ($3) {
     continue;
    }
    break;
   }
   HEAPF64[($8 + 160 | 0) + ($11 << 3) >> 3] = $5;
   $7 = $7 - 1 | 0;
   $2 = ($6 | 0) != ($10 | 0);
   $10 = $10 + 1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
 label$51: {
  label$52: {
   label$53: {
    switch ($4 | 0) {
    case 3:
     label$56: {
      if (($6 | 0) <= 0) {
       break label$56;
      }
      $5 = HEAPF64[($8 + 160 | 0) + ($6 << 3) >> 3];
      $2 = $6;
      while (1) {
       $3 = $2 - 1 | 0;
       $7 = ($8 + 160 | 0) + ($3 << 3) | 0;
       $9 = HEAPF64[$7 >> 3];
       $19 = $9;
       $9 = $9 + $5;
       HEAPF64[($8 + 160 | 0) + ($2 << 3) >> 3] = $5 + ($19 - $9);
       HEAPF64[$7 >> 3] = $9;
       $7 = $2 >>> 0 > 1;
       $5 = $9;
       $2 = $3;
       if ($7) {
        continue;
       }
       break;
      }
      if (($6 | 0) < 2) {
       break label$56;
      }
      $5 = HEAPF64[($8 + 160 | 0) + ($6 << 3) >> 3];
      $2 = $6;
      while (1) {
       $3 = $2 - 1 | 0;
       $7 = ($8 + 160 | 0) + ($3 << 3) | 0;
       $9 = HEAPF64[$7 >> 3];
       $19 = $9;
       $9 = $9 + $5;
       HEAPF64[($8 + 160 | 0) + ($2 << 3) >> 3] = $5 + ($19 - $9);
       HEAPF64[$7 >> 3] = $9;
       $7 = $2 >>> 0 > 2;
       $5 = $9;
       $2 = $3;
       if ($7) {
        continue;
       }
       break;
      }
      if (($6 | 0) <= 1) {
       break label$56;
      }
      while (1) {
       $20 = $20 + HEAPF64[($8 + 160 | 0) + ($6 << 3) >> 3];
       $2 = ($6 | 0) > 2;
       $6 = $6 - 1 | 0;
       if ($2) {
        continue;
       }
       break;
      }
     }
     $5 = HEAPF64[$8 + 160 >> 3];
     if ($14) {
      break label$52;
     }
     HEAPF64[$1 >> 3] = $5;
     $5 = HEAPF64[$8 + 168 >> 3];
     HEAPF64[$1 + 16 >> 3] = $20;
     HEAPF64[$1 + 8 >> 3] = $5;
     break label$51;

    case 0:
     $5 = 0;
     if (($6 | 0) >= 0) {
      while (1) {
       $2 = $6;
       $6 = $2 - 1 | 0;
       $5 = $5 + HEAPF64[($8 + 160 | 0) + ($2 << 3) >> 3];
       if ($2) {
        continue;
       }
       break;
      }
     }
     HEAPF64[$1 >> 3] = $14 ? -$5 : $5;
     break label$51;

    case 1:
    case 2:
     break label$53;

    default:
     break label$51;
    }
   }
   $5 = 0;
   if (($6 | 0) >= 0) {
    $3 = $6;
    while (1) {
     $2 = $3;
     $3 = $2 - 1 | 0;
     $5 = $5 + HEAPF64[($8 + 160 | 0) + ($2 << 3) >> 3];
     if ($2) {
      continue;
     }
     break;
    }
   }
   HEAPF64[$1 >> 3] = $14 ? -$5 : $5;
   $5 = HEAPF64[$8 + 160 >> 3] - $5;
   $2 = 1;
   if (($6 | 0) > 0) {
    while (1) {
     $5 = $5 + HEAPF64[($8 + 160 | 0) + ($2 << 3) >> 3];
     $3 = ($2 | 0) != ($6 | 0);
     $2 = $2 + 1 | 0;
     if ($3) {
      continue;
     }
     break;
    }
   }
   HEAPF64[$1 + 8 >> 3] = $14 ? -$5 : $5;
   break label$51;
  }
  HEAPF64[$1 >> 3] = -$5;
  $5 = HEAPF64[$8 + 168 >> 3];
  HEAPF64[$1 + 16 >> 3] = -$20;
  HEAPF64[$1 + 8 >> 3] = -$5;
 }
 __stack_pointer = $8 + 560 | 0;
 return $16 & 7;
}

function jspeStatementFor() {
 var $0 = 0, $1 = 0, $2 = 0;
 $0 = __stack_pointer - 432 | 0;
 __stack_pointer = $0;
 jslGetNextToken();
 label$1: {
  if (!(jslMatch(40) & 1)) {
   break label$1;
  }
  HEAP8[$0 + 427 | 0] = (HEAP32[86758] & 512) != 0;
  HEAP32[86758] = HEAP32[86758] | 256;
  HEAP32[$0 + 420 >> 2] = jspeBlockStart();
  HEAP32[$0 + 416 >> 2] = 0;
  HEAP8[$0 + 415 | 0] = HEAP16[HEAP32[44743] + 2 >> 1] == 174;
  if (HEAP16[HEAP32[44743] + 2 >> 1] != 59) {
   HEAP32[$0 + 416 >> 2] = jspeStatement();
  }
  if (jspIsInterrupted() & 1) {
   jsvUnLock(HEAP32[$0 + 416 >> 2]);
   jspeBlockEnd(HEAP32[$0 + 420 >> 2]);
   break label$1;
  }
  HEAP32[86758] = HEAP32[86758] & -257;
  label$5: {
   if (!(HEAP16[HEAP32[44743] + 2 >> 1] != 185 & HEAP16[HEAP32[44743] + 2 >> 1] != 198)) {
    HEAP8[$0 + 414 | 0] = HEAP16[HEAP32[44743] + 2 >> 1] == 198;
    label$8: {
     if ((HEAP32[86758] & 63) != 1) {
      break label$8;
     }
     if (jsvIsName(HEAP32[$0 + 416 >> 2]) & 1) {
      break label$8;
     }
     jsvUnLock(HEAP32[$0 + 416 >> 2]);
     $1 = HEAP8[$0 + 414 | 0] & 1;
     HEAP32[$0 + 20 >> 2] = HEAP32[$0 + 416 >> 2];
     HEAP32[$0 + 16 >> 2] = $1 ? 119097 : 117576;
     jsExceptionHere(1, 113464, $0 + 16 | 0);
     jspeBlockEnd(HEAP32[$0 + 420 >> 2]);
     break label$1;
    }
    jslGetNextToken();
    HEAP32[$0 + 408 >> 2] = jsvSkipNameAndUnLock(jspeExpression());
    jslCharPosFromLex($0 + 368 | 0);
    if (!(jslMatch(41) & 1)) {
     jsvUnLock2(HEAP32[$0 + 416 >> 2], HEAP32[$0 + 408 >> 2]);
     jslCharPosFree($0 + 368 | 0);
     jspeBlockEnd(HEAP32[$0 + 420 >> 2]);
     break label$1;
    }
    HEAP32[$0 + 364 >> 2] = HEAP32[86758];
    jspSetNoExecute();
    HEAP32[86758] = HEAP32[86758] | 512;
    jsvUnLock(jspeBlockOrStatement());
    jslCharPosNew($0 + 320 | 0, HEAP32[HEAP32[44743] + 84 >> 2], HEAP32[HEAP32[44743] + 4 >> 2]);
    if (!(HEAP8[$0 + 427 | 0] & 1)) {
     HEAP32[86758] = HEAP32[86758] & -513;
    }
    HEAP32[86758] = HEAP32[86758] & -1664 | HEAP32[$0 + 364 >> 2] & 1663;
    if ((HEAP32[86758] & 63) == 1) {
     label$12: {
      if (jsvIsIterable(HEAP32[$0 + 408 >> 2]) & 1) {
       HEAP32[$0 + 316 >> 2] = jsvGetInternalFunctionCheckerFor(HEAP32[$0 + 408 >> 2]);
       HEAP32[$0 + 312 >> 2] = 0;
       if (!(HEAP8[$0 + 414 | 0] & 1)) {
        HEAP32[$0 + 312 >> 2] = jspGetBuiltinPrototype(HEAP32[$0 + 408 >> 2]);
       }
       jsvIteratorNew($0 + 248 | 0, HEAP32[$0 + 408 >> 2], HEAP8[$0 + 414 | 0] & 1);
       HEAP8[$0 + 247 | 0] = 0;
       while (1) {
        $1 = 0;
        label$16: {
         if ((HEAP32[86758] & 63) != 1) {
          break label$16;
         }
         $1 = 0;
         if (!(jsvIteratorHasElement($0 + 248 | 0) & 1)) {
          break label$16;
         }
         $1 = HEAPU8[$0 + 247 | 0] ^ -1;
        }
        if ($1 & 1) {
         HEAP32[$0 + 240 >> 2] = jsvIteratorGetKey($0 + 248 | 0);
         HEAP8[$0 + 239 | 0] = 0;
         label$18: {
          if (!HEAP32[$0 + 316 >> 2]) {
           break label$18;
          }
          if (!(FUNCTION_TABLE[HEAP32[$0 + 316 >> 2]](HEAP32[$0 + 240 >> 2]) & 1)) {
           break label$18;
          }
          HEAP8[$0 + 239 | 0] = 1;
          label$19: {
           if (HEAP8[$0 + 414 | 0] & 1) {
            break label$19;
           }
           if (!(jsvIsString(HEAP32[$0 + 240 >> 2]) & 1)) {
            break label$19;
           }
           if (!(jsvIsStringEqual(HEAP32[$0 + 240 >> 2], 123007) & 1)) {
            break label$19;
           }
           HEAP32[$0 + 312 >> 2] = jsvSkipName(HEAP32[$0 + 240 >> 2]);
          }
         }
         if (!(HEAP8[$0 + 239 | 0] & 1)) {
          label$21: {
           if (HEAP8[$0 + 414 | 0] & 1) {
            HEAP32[$0 + 232 >> 2] = jsvIteratorGetValue($0 + 248 | 0);
            break label$21;
           }
           HEAP32[$0 + 232 >> 2] = jsvAsString(HEAP32[$0 + 240 >> 2]);
          }
          if (HEAP32[$0 + 232 >> 2] ? 1 : HEAP8[$0 + 414 | 0] & 1) {
           if (HEAP8[$0 + 415 | 0] & 1) {
            $1 = HEAP32[$0 + 416 >> 2];
            $2 = (HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & -65;
            HEAP8[$1 + 12 | 0] = $2;
            HEAP8[$1 + 13 | 0] = $2 >>> 8;
           }
           jsvReplaceWithOrAddToRoot(HEAP32[$0 + 416 >> 2], HEAP32[$0 + 232 >> 2]);
           if (HEAP8[$0 + 415 | 0] & 1) {
            $1 = HEAP32[$0 + 416 >> 2];
            $2 = HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8 | 64;
            HEAP8[$1 + 12 | 0] = $2;
            HEAP8[$1 + 13 | 0] = $2 >>> 8;
           }
           jsvUnLock(HEAP32[$0 + 232 >> 2]);
           jslSeekToP($0 + 368 | 0);
           HEAP32[86758] = HEAP32[86758] | 512;
           jspDebuggerLoopIfCtrlC();
           jsvUnLock(jspeBlockOrStatement());
           if (!(HEAP8[$0 + 427 | 0] & 1)) {
            HEAP32[86758] = HEAP32[86758] & -513;
           }
           HEAP8[$0 + 247 | 0] = jspeCheckBreakContinue() & 1 | HEAP8[$0 + 247 | 0] & 1;
          }
         }
         jsvIteratorNext($0 + 248 | 0);
         jsvUnLock(HEAP32[$0 + 240 >> 2]);
         if (!(jsvIteratorHasElement($0 + 248 | 0) & 1 | HEAP8[$0 + 414 | 0] & 1 | !HEAP32[$0 + 312 >> 2])) {
          jsvIteratorFree($0 + 248 | 0);
          HEAP32[$0 + 228 >> 2] = HEAP32[$0 + 312 >> 2];
          jsvIteratorNew($0 + 248 | 0, HEAP32[$0 + 228 >> 2], 0);
          HEAP32[$0 + 316 >> 2] = jsvGetInternalFunctionCheckerFor(HEAP32[$0 + 228 >> 2]);
          HEAP32[$0 + 312 >> 2] = jspGetBuiltinPrototype(HEAP32[$0 + 228 >> 2]);
          jsvUnLock(HEAP32[$0 + 228 >> 2]);
         }
         continue;
        }
        break;
       }
       jsvUnLock(HEAP32[$0 + 312 >> 2]);
       jsvIteratorFree($0 + 248 | 0);
       break label$12;
      }
      if (!(jsvIsUndefined(HEAP32[$0 + 408 >> 2]) & 1)) {
       HEAP32[$0 >> 2] = HEAP32[$0 + 408 >> 2];
       jsExceptionHere(1, 113398, $0);
      }
     }
    }
    jslSeekToP($0 + 320 | 0);
    jslCharPosFree($0 + 368 | 0);
    jslCharPosFree($0 + 320 | 0);
    jsvUnLock2(HEAP32[$0 + 416 >> 2], HEAP32[$0 + 408 >> 2]);
    break label$5;
   }
   HEAP8[$0 + 227 | 0] = 1;
   HEAP8[$0 + 226 | 0] = 0;
   jsvUnLock(HEAP32[$0 + 416 >> 2]);
   jslCharPosFromLex($0 + 184 | 0);
   if (!(jslMatch(59) & 1)) {
    jslCharPosFree($0 + 184 | 0);
    jspeBlockEnd(HEAP32[$0 + 420 >> 2]);
    jspeBlockEnd(HEAP32[$0 + 420 >> 2]);
    break label$1;
   }
   if (HEAP16[HEAP32[44743] + 2 >> 1] != 59) {
    HEAP32[$0 + 180 >> 2] = jspeExpression();
    if ((HEAP32[86758] & 63) == 1) {
     $1 = jsvGetBoolAndUnLock(jsvSkipName(HEAP32[$0 + 180 >> 2]));
    }
    HEAP8[$0 + 227 | 0] = $1 & 1;
    jsvUnLock(HEAP32[$0 + 180 >> 2]);
   }
   jslCharPosFromLex($0 + 136 | 0);
   if (!(jslMatch(59) & 1)) {
    jslCharPosFree($0 + 184 | 0);
    jslCharPosFree($0 + 136 | 0);
    jspeBlockEnd(HEAP32[$0 + 420 >> 2]);
    break label$1;
   }
   if (HEAP16[HEAP32[44743] + 2 >> 1] != 41) {
    HEAP32[$0 + 132 >> 2] = HEAP32[86758];
    jspSetNoExecute();
    jsvUnLock(jspeExpression());
    HEAP32[86758] = HEAP32[86758] & -1664 | HEAP32[$0 + 132 >> 2] & 1663;
   }
   jslSkipWhiteSpace();
   jslCharPosFromLex($0 + 88 | 0);
   if (!(jslMatch(41) & 1)) {
    jslCharPosFree($0 + 184 | 0);
    jslCharPosFree($0 + 136 | 0);
    jslCharPosFree($0 + 88 | 0);
    jspeBlockEnd(HEAP32[$0 + 420 >> 2]);
    break label$1;
   }
   HEAP32[$0 + 84 >> 2] = HEAP32[86758];
   if (!(HEAP8[$0 + 227 | 0] & 1)) {
    jspSetNoExecute();
   }
   HEAP32[86758] = HEAP32[86758] | 512;
   jsvUnLock(jspeBlockOrStatement());
   jslSkipWhiteSpace();
   jslCharPosNew($0 + 40 | 0, HEAP32[HEAP32[44743] + 84 >> 2], HEAP32[HEAP32[44743] + 4 >> 2]);
   if (!(HEAP8[$0 + 427 | 0] & 1)) {
    HEAP32[86758] = HEAP32[86758] & -513;
   }
   if (!(!(HEAP8[$0 + 227 | 0] & 1) & (HEAP32[86758] & 63) == 1)) {
    HEAP8[$0 + 226 | 0] = jspeCheckBreakContinue() & 1 | HEAP8[$0 + 226 | 0] & 1;
    if (HEAP8[$0 + 226 | 0] & 1) {
     HEAP8[$0 + 227 | 0] = 0;
    }
   }
   if (!(HEAP8[$0 + 227 | 0] & 1)) {
    HEAP32[86758] = HEAP32[86758] & -1664 | HEAP32[$0 + 84 >> 2] & 1663;
   }
   if (HEAP8[$0 + 227 | 0] & 1) {
    jslSeekToP($0 + 136 | 0);
    if (HEAP16[HEAP32[44743] + 2 >> 1] != 41) {
     jsvUnLock(jspeExpression());
    }
   }
   while (1) {
    $1 = 0;
    label$45: {
     if (HEAP8[$0 + 226 | 0] & 1) {
      break label$45;
     }
     $1 = 0;
     if ((HEAP32[86758] & 63) != 1) {
      break label$45;
     }
     $1 = HEAPU8[$0 + 227 | 0];
    }
    if ($1 & 1) {
     jslSeekToP($0 + 184 | 0);
     label$47: {
      if (HEAP16[HEAP32[44743] + 2 >> 1] == 59) {
       HEAP8[$0 + 227 | 0] = 1;
       break label$47;
      }
      HEAP32[$0 + 36 >> 2] = jspeExpression();
      HEAP8[$0 + 227 | 0] = jsvGetBoolAndUnLock(jsvSkipName(HEAP32[$0 + 36 >> 2])) & 1;
      jsvUnLock(HEAP32[$0 + 36 >> 2]);
     }
     if (!(!(HEAP8[$0 + 227 | 0] & 1) | (HEAP32[86758] & 63) != 1)) {
      jslSeekToP($0 + 88 | 0);
      HEAP32[86758] = HEAP32[86758] | 512;
      jspDebuggerLoopIfCtrlC();
      jsvUnLock(jspeBlockOrStatement());
      if (!(HEAP8[$0 + 427 | 0] & 1)) {
       HEAP32[86758] = HEAP32[86758] & -513;
      }
      HEAP8[$0 + 226 | 0] = jspeCheckBreakContinue() & 1 | HEAP8[$0 + 226 | 0] & 1;
     }
     if (!(HEAP8[$0 + 226 | 0] & 1 | (!(HEAP8[$0 + 227 | 0] & 1) | (HEAP32[86758] & 63) != 1))) {
      jslSeekToP($0 + 136 | 0);
      if (HEAP16[HEAP32[44743] + 2 >> 1] != 41) {
       jsvUnLock(jspeExpression());
      }
     }
     continue;
    }
    break;
   }
   jslSeekToP($0 + 40 | 0);
   jslCharPosFree($0 + 184 | 0);
   jslCharPosFree($0 + 136 | 0);
   jslCharPosFree($0 + 88 | 0);
   jslCharPosFree($0 + 40 | 0);
  }
  jspeBlockEnd(HEAP32[$0 + 420 >> 2]);
 }
 HEAP32[$0 + 428 >> 2] = 0;
 __stack_pointer = $0 + 432 | 0;
 return HEAP32[$0 + 428 >> 2];
}

function jswrap_graphics_asBMP_X($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 240 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 232 >> 2] = $0;
 HEAP8[$2 + 231 | 0] = $1;
 label$1: {
  if (!(graphicsGetFromVar($2 + 152 | 0, HEAP32[$2 + 232 >> 2]) & 1)) {
   HEAP32[$2 + 236 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 148 >> 2] = graphicsGetWidth($2 + 152 | 0) & 65535;
  HEAP32[$2 + 144 >> 2] = graphicsGetHeight($2 + 152 | 0) & 65535;
  HEAP32[$2 + 140 >> 2] = HEAPU8[$2 + 168 | 0];
  if ((HEAPU8[$2 + 156 | 0] | HEAPU8[$2 + 157 | 0] << 8 | (HEAPU8[$2 + 158 | 0] << 16 | HEAPU8[$2 + 159 | 0] << 24)) == 6) {
   HEAP32[$2 + 140 >> 2] = 3;
  }
  HEAP32[$2 + 136 >> 2] = HEAP32[$2 + 140 >> 2];
  label$4: {
   if (!(HEAP32[$2 + 136 >> 2] <= 1 | HEAP32[$2 + 136 >> 2] >= 4)) {
    HEAP32[$2 + 136 >> 2] = 4;
    break label$4;
   }
   if (!(HEAP32[$2 + 136 >> 2] <= 4 | HEAP32[$2 + 136 >> 2] >= 8)) {
    HEAP32[$2 + 136 >> 2] = 8;
   }
  }
  HEAP8[$2 + 135 | 0] = HEAP32[$2 + 136 >> 2] <= 8;
  HEAP32[$2 + 128 >> 2] = Math_imul(HEAP32[$2 + 148 >> 2], HEAP32[$2 + 136 >> 2]) + 31 >> 5 << 2;
  if (HEAP8[$2 + 135 | 0] & 1) {
   $0 = 1 << HEAP32[$2 + 136 >> 2];
  } else {
   $0 = 0;
  }
  HEAP32[$2 + 124 >> 2] = $0;
  HEAP32[$2 + 120 >> 2] = Math_imul(HEAP32[$2 + 124 >> 2], 3) + 26;
  HEAP32[$2 + 116 >> 2] = HEAP32[$2 + 120 >> 2] + Math_imul(HEAP32[$2 + 144 >> 2], HEAP32[$2 + 128 >> 2]);
  if (HEAP8[$2 + 231 | 0] & 1) {
   $0 = HEAP32[$2 + 120 >> 2] + HEAP32[$2 + 128 >> 2] | 0;
  } else {
   $0 = HEAP32[$2 + 116 >> 2];
  }
  HEAP32[$2 + 112 >> 2] = $0;
  HEAP32[$2 + 108 >> 2] = jsvNewFlatStringOfLength(HEAP32[$2 + 112 >> 2]);
  if (!HEAP32[$2 + 108 >> 2]) {
   HEAP32[$2 + 236 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 104 >> 2] = jsvGetFlatStringPointer(HEAP32[$2 + 108 >> 2]);
  HEAP8[HEAP32[$2 + 104 >> 2]] = 66;
  HEAP8[HEAP32[$2 + 104 >> 2] + 1 | 0] = 77;
  HEAP8[HEAP32[$2 + 104 >> 2] + 2 | 0] = HEAP32[$2 + 116 >> 2];
  HEAP8[HEAP32[$2 + 104 >> 2] + 3 | 0] = HEAP32[$2 + 116 >> 2] >> 8;
  HEAP8[HEAP32[$2 + 104 >> 2] + 10 | 0] = HEAP32[$2 + 120 >> 2];
  HEAP8[HEAP32[$2 + 104 >> 2] + 14 | 0] = 12;
  HEAP8[HEAP32[$2 + 104 >> 2] + 18 | 0] = HEAP32[$2 + 148 >> 2];
  HEAP8[HEAP32[$2 + 104 >> 2] + 19 | 0] = HEAP32[$2 + 148 >> 2] >> 8;
  HEAP8[HEAP32[$2 + 104 >> 2] + 20 | 0] = HEAP32[$2 + 144 >> 2];
  HEAP8[HEAP32[$2 + 104 >> 2] + 21 | 0] = HEAP32[$2 + 144 >> 2] >> 8;
  HEAP8[HEAP32[$2 + 104 >> 2] + 22 | 0] = 1;
  HEAP8[HEAP32[$2 + 104 >> 2] + 24 | 0] = HEAP32[$2 + 136 >> 2];
  if (HEAP8[$2 + 135 | 0] & 1) {
   label$13: {
    if (HEAP32[$2 + 136 >> 2] == 1) {
     HEAP8[HEAP32[$2 + 104 >> 2] + 26 | 0] = 255;
     HEAP8[HEAP32[$2 + 104 >> 2] + 27 | 0] = 255;
     HEAP8[HEAP32[$2 + 104 >> 2] + 28 | 0] = 255;
     break label$13;
    }
    label$15: {
     if (HEAP32[$2 + 140 >> 2] == 3) {
      HEAP32[$2 + 100 >> 2] = 0;
      while (1) {
       if (HEAP32[$2 + 100 >> 2] < HEAP32[$2 + 124 >> 2]) {
        HEAP8[HEAP32[$2 + 104 >> 2] + (Math_imul(HEAP32[$2 + 100 >> 2], 3) + 26 | 0) | 0] = HEAP32[$2 + 100 >> 2] & 1 ? 255 : 0;
        HEAP8[HEAP32[$2 + 104 >> 2] + (Math_imul(HEAP32[$2 + 100 >> 2], 3) + 27 | 0) | 0] = HEAP32[$2 + 100 >> 2] & 2 ? 255 : 0;
        HEAP8[HEAP32[$2 + 104 >> 2] + (Math_imul(HEAP32[$2 + 100 >> 2], 3) + 28 | 0) | 0] = HEAP32[$2 + 100 >> 2] & 4 ? 255 : 0;
        HEAP32[$2 + 100 >> 2] = HEAP32[$2 + 100 >> 2] + 1;
        continue;
       }
       break;
      }
      break label$15;
     }
     label$19: {
      if (HEAP32[$2 + 140 >> 2] == 4) {
       HEAP32[$2 + 96 >> 2] = 0;
       while (1) {
        if (HEAP32[$2 + 96 >> 2] < 16) {
         HEAP32[$2 + 92 >> 2] = HEAPU16[(HEAP32[$2 + 96 >> 2] << 1) + 171488 >> 1];
         HEAP8[HEAP32[$2 + 104 >> 2] + (Math_imul(HEAP32[$2 + 96 >> 2], 3) + 26 | 0) | 0] = HEAP32[$2 + 92 >> 2] << 3 & 248;
         HEAP8[HEAP32[$2 + 104 >> 2] + (Math_imul(HEAP32[$2 + 96 >> 2], 3) + 27 | 0) | 0] = HEAP32[$2 + 92 >> 2] >> 3 & 252;
         HEAP8[HEAP32[$2 + 104 >> 2] + (Math_imul(HEAP32[$2 + 96 >> 2], 3) + 28 | 0) | 0] = HEAP32[$2 + 92 >> 2] >> 8 & 248;
         HEAP32[$2 + 96 >> 2] = HEAP32[$2 + 96 >> 2] + 1;
         continue;
        }
        break;
       }
       break label$19;
      }
      label$23: {
       if (HEAP32[$2 + 140 >> 2] == 8) {
        HEAP32[$2 + 88 >> 2] = 0;
        while (1) {
         if (HEAP32[$2 + 88 >> 2] < 255) {
          HEAP32[$2 + 84 >> 2] = HEAPU16[(HEAP32[$2 + 88 >> 2] << 1) + 171520 >> 1];
          HEAP8[HEAP32[$2 + 104 >> 2] + (Math_imul(HEAP32[$2 + 88 >> 2], 3) + 26 | 0) | 0] = HEAP32[$2 + 84 >> 2] << 3 & 248;
          HEAP8[HEAP32[$2 + 104 >> 2] + (Math_imul(HEAP32[$2 + 88 >> 2], 3) + 27 | 0) | 0] = HEAP32[$2 + 84 >> 2] >> 3 & 252;
          HEAP8[HEAP32[$2 + 104 >> 2] + (Math_imul(HEAP32[$2 + 88 >> 2], 3) + 28 | 0) | 0] = HEAP32[$2 + 84 >> 2] >> 8 & 248;
          HEAP32[$2 + 88 >> 2] = HEAP32[$2 + 88 >> 2] + 1;
          continue;
         }
         break;
        }
        break label$23;
       }
       HEAP32[$2 + 80 >> 2] = 0;
       while (1) {
        if (HEAP32[$2 + 80 >> 2] < 1 << HEAP32[$2 + 140 >> 2]) {
         HEAP8[$2 + 79 | 0] = (Math_imul(HEAP32[$2 + 80 >> 2], 255) | 0) / (1 << HEAP32[$2 + 140 >> 2]);
         HEAP8[HEAP32[$2 + 104 >> 2] + (Math_imul(HEAP32[$2 + 80 >> 2], 3) + 26 | 0) | 0] = HEAPU8[$2 + 79 | 0];
         HEAP8[HEAP32[$2 + 104 >> 2] + (Math_imul(HEAP32[$2 + 80 >> 2], 3) + 27 | 0) | 0] = HEAPU8[$2 + 79 | 0];
         HEAP8[HEAP32[$2 + 104 >> 2] + (Math_imul(HEAP32[$2 + 80 >> 2], 3) + 28 | 0) | 0] = HEAPU8[$2 + 79 | 0];
         HEAP32[$2 + 80 >> 2] = HEAP32[$2 + 80 >> 2] + 1;
         continue;
        }
        break;
       }
      }
     }
    }
   }
  }
  HEAP32[$2 + 72 >> 2] = (1 << HEAP32[$2 + 136 >> 2]) - 1;
  HEAP32[$2 + 68 >> 2] = 8 / HEAP32[$2 + 136 >> 2];
  HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 120 >> 2];
  HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 144 >> 2] - 1;
  while (1) {
   if (HEAP32[$2 + 60 >> 2] >= 0) {
    HEAP32[$2 + 56 >> 2] = 0;
    label$31: {
     if (HEAP32[$2 + 136 >> 2] < 8) {
      HEAP32[$2 + 52 >> 2] = 0;
      while (1) {
       if (HEAP32[$2 + 52 >> 2] < HEAP32[$2 + 148 >> 2]) {
        HEAP32[$2 + 48 >> 2] = 0;
        HEAP32[$2 + 44 >> 2] = 0;
        while (1) {
         if (HEAP32[$2 + 44 >> 2] < HEAP32[$2 + 68 >> 2]) {
          $0 = HEAP32[$2 + 52 >> 2];
          HEAP32[$2 + 52 >> 2] = $0 + 1;
          HEAP32[$2 + 40 >> 2] = graphicsGetPixel($2 + 152 | 0, $0, HEAP32[$2 + 60 >> 2]);
          if ((HEAPU8[$2 + 156 | 0] | HEAPU8[$2 + 157 | 0] << 8 | (HEAPU8[$2 + 158 | 0] << 16 | HEAPU8[$2 + 159 | 0] << 24)) == 6) {
           HEAP32[$2 + 40 >> 2] = !!(HEAP32[$2 + 40 >> 2] & 16) | ((HEAP32[$2 + 40 >> 2] & 32768 ? 4 : 0) | (HEAP32[$2 + 40 >> 2] & 1024 ? 2 : 0));
          }
          HEAP32[$2 + 48 >> 2] = HEAP32[$2 + 40 >> 2] & HEAP32[$2 + 72 >> 2] | HEAP32[$2 + 48 >> 2] << HEAP32[$2 + 136 >> 2];
          HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 44 >> 2] + 1;
          continue;
         }
         break;
        }
        $1 = HEAP32[$2 + 48 >> 2];
        $3 = HEAP32[$2 + 104 >> 2];
        $0 = HEAP32[$2 + 64 >> 2];
        HEAP32[$2 + 64 >> 2] = $0 + 1;
        HEAP8[$3 + $0 | 0] = $1;
        HEAP32[$2 + 56 >> 2] = HEAP32[$2 + 56 >> 2] + 1;
        continue;
       }
       break;
      }
      break label$31;
     }
     HEAP32[$2 + 36 >> 2] = 0;
     while (1) {
      if (HEAP32[$2 + 36 >> 2] < HEAP32[$2 + 148 >> 2]) {
       HEAP32[$2 + 32 >> 2] = graphicsGetPixel($2 + 152 | 0, HEAP32[$2 + 36 >> 2], HEAP32[$2 + 60 >> 2]);
       if (HEAP32[$2 + 136 >> 2] == 16) {
        HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 32 >> 2] & 31 | HEAP32[$2 + 32 >> 2] >>> 1 & -32;
       }
       HEAP32[$2 + 28 >> 2] = 0;
       while (1) {
        if (HEAP32[$2 + 28 >> 2] < HEAP32[$2 + 136 >> 2]) {
         $1 = HEAP32[$2 + 32 >> 2];
         $3 = HEAP32[$2 + 104 >> 2];
         $0 = HEAP32[$2 + 64 >> 2];
         HEAP32[$2 + 64 >> 2] = $0 + 1;
         HEAP8[$3 + $0 | 0] = $1;
         HEAP32[$2 + 56 >> 2] = HEAP32[$2 + 56 >> 2] + 1;
         HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 32 >> 2] >>> 8;
         HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 28 >> 2] + 8;
         continue;
        }
        break;
       }
       HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 36 >> 2] + 1;
       continue;
      }
      break;
     }
    }
    if (HEAP32[$2 + 56 >> 2] < HEAP32[$2 + 128 >> 2]) {
     HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 64 >> 2] + (HEAP32[$2 + 128 >> 2] - HEAP32[$2 + 56 >> 2] | 0);
    }
    if (!(!(HEAP8[$2 + 231 | 0] & 1) | HEAP32[$2 + 64 >> 2] <= 2)) {
     HEAP8[$2 + 27 | 0] = !HEAP32[$2 + 60 >> 2];
     if (HEAP8[$2 + 27 | 0] & 1) {
      $0 = HEAP32[$2 + 64 >> 2];
     } else {
      $0 = HEAP32[$2 + 64 >> 2] - (HEAP32[$2 + 64 >> 2] % 3 | 0) | 0;
     }
     HEAP32[$2 + 20 >> 2] = $0;
     HEAP32[$2 + 16 >> 2] = jsvNewArrayBufferFromString(HEAP32[$2 + 108 >> 2], HEAP32[$2 + 20 >> 2]);
     HEAP32[$2 + 12 >> 2] = jswrap_btoa(HEAP32[$2 + 16 >> 2]);
     jsvUnLock(HEAP32[$2 + 16 >> 2]);
     if (HEAP32[$2 + 12 >> 2]) {
      HEAP32[$2 >> 2] = HEAP32[$2 + 12 >> 2];
      jsiConsolePrintf(112309, $2);
     }
     jsvUnLock(HEAP32[$2 + 12 >> 2]);
     if (HEAP32[$2 + 20 >> 2] < HEAP32[$2 + 64 >> 2]) {
      memmove(HEAP32[$2 + 104 >> 2], HEAP32[$2 + 104 >> 2] + HEAP32[$2 + 20 >> 2] | 0, HEAP32[$2 + 64 >> 2] - HEAP32[$2 + 20 >> 2] | 0);
     }
     HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 64 >> 2] - HEAP32[$2 + 20 >> 2];
    }
    HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 60 >> 2] - 1;
    continue;
   }
   break;
  }
  if (HEAP8[$2 + 231 | 0] & 1) {
   jsiConsolePrintf(146977, 0);
   jsvUnLock(HEAP32[$2 + 108 >> 2]);
   HEAP32[$2 + 236 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 236 >> 2] = HEAP32[$2 + 108 >> 2];
 }
 __stack_pointer = $2 + 240 | 0;
 return HEAP32[$2 + 236 >> 2];
}

function jswrap_banglejs_init() {
 var $0 = 0, $1 = 0, $2 = 0;
 $0 = __stack_pointer - 272 | 0;
 __stack_pointer = $0;
 HEAP8[$0 + 270 | 0] = (HEAPU16[173534] & 4096) != 0;
 HEAP8[$0 + 269 | 0] = 0;
 if (HEAP8[$0 + 270 | 0] & 1) {
  HEAP32[93413] = 196686;
  HEAP8[373718] = 255;
  HEAP32[93435] = 0;
  healthStateClear(373744);
  healthStateClear(373760);
  healthStateClear(373776);
  if (jshPinGetValue(17) & 1) {
   HEAP8[$0 + 269 | 0] = 1;
  }
 }
 HEAP32[93413] = HEAP32[93413] | 2048;
 HEAP16[186838] = 0;
 HEAP32[93430] = 1500;
 HEAP32[93415] = 0;
 HEAP32[93417] = 3e3;
 HEAP32[93418] = 5e3;
 HEAP8[373682] = 0;
 if (jshPinGetValue(17) & 1) {
  HEAP8[373682] = 1;
 }
 HEAP8[373792] = 0;
 HEAP16[186897] = 0;
 if (!(HEAP8[$0 + 269 | 0] & 1)) {
  HEAP32[$0 + 264 >> 2] = jsvNewFromString(117129);
  HEAP32[$0 + 260 >> 2] = jswrap_storage_readJSON(HEAP32[$0 + 264 >> 2], 1);
  jsvUnLock(HEAP32[$0 + 264 >> 2]);
  label$5: {
   if (jsvIsObject(HEAP32[$0 + 260 >> 2]) & 1) {
    $1 = jsvObjectGetChildIfExists(HEAP32[$0 + 260 >> 2], 116994);
    break label$5;
   }
   $1 = 0;
  }
  HEAP32[$0 + 256 >> 2] = $1;
  label$7: {
   label$8: {
    if (!HEAP32[$0 + 256 >> 2]) {
     break label$8;
    }
    if (jsvGetBool(HEAP32[$0 + 256 >> 2]) & 1) {
     break label$8;
    }
    HEAP32[93413] = HEAP32[93413] & -257;
    break label$7;
   }
   HEAP32[93413] = HEAP32[93413] | 256;
   HEAP32[93413] = HEAP32[93413] | 128;
  }
  jsvUnLock(HEAP32[$0 + 256 >> 2]);
  label$9: {
   if (jsvIsObject(HEAP32[$0 + 260 >> 2]) & 1) {
    $1 = jsvObjectGetChildIfExists(HEAP32[$0 + 260 >> 2], 119695);
    break label$9;
   }
   $1 = 0;
  }
  HEAP32[$0 + 256 >> 2] = $1;
  label$11: {
   label$12: {
    if (!HEAP32[$0 + 256 >> 2]) {
     break label$12;
    }
    if (jsvGetBool(HEAP32[$0 + 256 >> 2]) & 1) {
     break label$12;
    }
    HEAP32[93413] = HEAP32[93413] & -513;
    break label$11;
   }
   HEAP32[93413] = HEAP32[93413] | 512;
  }
  jsvUnLock(HEAP32[$0 + 256 >> 2]);
  jswrap_banglejs_setTheme();
  label$13: {
   if (jsvIsObject(HEAP32[$0 + 260 >> 2]) & 1) {
    $1 = jsvObjectGetChildIfExists(HEAP32[$0 + 260 >> 2], 120037);
    break label$13;
   }
   $1 = 0;
  }
  HEAP32[$0 + 256 >> 2] = $1;
  if (jsvIsObject(HEAP32[$0 + 256 >> 2]) & 1) {
   $1 = jsvObjectGetIntegerChild(HEAP32[$0 + 256 >> 2], 119034);
   HEAP8[349444] = $1;
   HEAP8[349445] = $1 >>> 8;
   $1 = jsvObjectGetIntegerChild(HEAP32[$0 + 256 >> 2], 119038);
   HEAP8[349446] = $1;
   HEAP8[349447] = $1 >>> 8;
   $1 = jsvObjectGetIntegerChild(HEAP32[$0 + 256 >> 2], 126283);
   HEAP8[349448] = $1;
   HEAP8[349449] = $1 >>> 8;
   $1 = jsvObjectGetIntegerChild(HEAP32[$0 + 256 >> 2], 126287);
   HEAP8[349450] = $1;
   HEAP8[349451] = $1 >>> 8;
   $1 = jsvObjectGetIntegerChild(HEAP32[$0 + 256 >> 2], 124630);
   HEAP8[349452] = $1;
   HEAP8[349453] = $1 >>> 8;
   $1 = jsvObjectGetIntegerChild(HEAP32[$0 + 256 >> 2], 124634);
   HEAP8[349454] = $1;
   HEAP8[349455] = $1 >>> 8;
   HEAP8[349456] = jsvObjectGetBoolChild(HEAP32[$0 + 256 >> 2], 118129) & 1;
  }
  jsvUnLock(HEAP32[$0 + 256 >> 2]);
  label$16: {
   if (jsvIsObject(HEAP32[$0 + 260 >> 2]) & 1) {
    $1 = jsvObjectGetChildIfExists(HEAP32[$0 + 260 >> 2], 118522);
    break label$16;
   }
   $1 = 0;
  }
  HEAP32[$0 + 256 >> 2] = $1;
  if (jsvIsObject(HEAP32[$0 + 256 >> 2]) & 1) {
   HEAP16[186824] = jsvObjectGetIntegerChild(HEAP32[$0 + 256 >> 2], 126579);
   HEAP16[186825] = jsvObjectGetIntegerChild(HEAP32[$0 + 256 >> 2], 126576);
   HEAP16[89279] = jsvObjectGetIntegerChild(HEAP32[$0 + 256 >> 2], 126272);
   HEAP16[89280] = jsvObjectGetIntegerChild(HEAP32[$0 + 256 >> 2], 126269);
  }
  jsvUnLock(HEAP32[$0 + 256 >> 2]);
  jsvUnLock(HEAP32[$0 + 260 >> 2]);
 }
 jswrap_banglejs_setLCDOffset(0);
 graphicsStructResetState(349460);
 HEAP32[$0 + 252 >> 2] = jspNewObject(0, 115743);
 label$19: {
  if (!HEAP32[$0 + 252 >> 2]) {
   break label$19;
  }
  jsvObjectSetChild(HEAP32[86750], 119074, HEAP32[$0 + 252 >> 2]);
  jsvObjectSetChild(HEAP32[86751], 111850, HEAP32[$0 + 252 >> 2]);
  $1 = HEAP32[$0 + 252 >> 2];
  HEAP8[349460] = $1;
  HEAP8[349461] = $1 >>> 8;
  HEAP8[349462] = $1 >>> 16;
  HEAP8[349463] = $1 >>> 24;
  HEAP32[$0 + 248 >> 2] = jsvNewNativeFunction(590, 32792);
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 252 >> 2], 116981, HEAP32[$0 + 248 >> 2]);
  label$20: {
   if (HEAP8[$0 + 270 | 0] & 1) {
    break label$20;
   }
  }
  HEAP8[$0 + 247 | 0] = 1;
  if (HEAPU16[173534] & 64) {
   HEAP8[$0 + 247 | 0] = 0;
   if (!(HEAP8[$0 + 270 | 0] & 1 | HEAP8[$0 + 269 | 0] & 1)) {
    jsfNameFromString($0 + 208 | 0, 119025);
    HEAP32[$0 + 64 >> 2] = HEAP32[$0 + 232 >> 2];
    $1 = HEAP32[$0 + 228 >> 2];
    $2 = HEAP32[$0 + 224 >> 2];
    HEAP32[$0 + 56 >> 2] = $2;
    HEAP32[$0 + 60 >> 2] = $1;
    $2 = HEAP32[$0 + 220 >> 2];
    $1 = HEAP32[$0 + 216 >> 2];
    HEAP32[$0 + 48 >> 2] = $1;
    HEAP32[$0 + 52 >> 2] = $2;
    $1 = HEAP32[$0 + 212 >> 2];
    $2 = HEAP32[$0 + 208 >> 2];
    HEAP32[$0 + 40 >> 2] = $2;
    HEAP32[$0 + 44 >> 2] = $1;
    HEAP32[$0 + 240 >> 2] = jsfReadFile($0 + 40 | 0, 0, 0);
    label$23: {
     if (jsvIsString(HEAP32[$0 + 240 >> 2]) & 1) {
      if (jsvGetStringLength(HEAP32[$0 + 240 >> 2]) >>> 0 > 3) {
       HEAP32[$0 + 204 >> 2] = jsvGetCharInString(HEAP32[$0 + 240 >> 2], 0) & 255;
       HEAP32[$0 + 200 >> 2] = jsvGetCharInString(HEAP32[$0 + 240 >> 2], 1) & 255;
       jsvUnLock2(jswrap_graphics_drawImage(HEAP32[$0 + 252 >> 2], HEAP32[$0 + 240 >> 2], (176 - HEAP32[$0 + 204 >> 2] | 0) / 2 | 0, (176 - HEAP32[$0 + 200 >> 2] | 0) / 2 | 0, 0), HEAP32[$0 + 240 >> 2]);
       graphicsInternalFlip();
      }
      break label$23;
     }
     HEAP32[$0 + 196 >> 2] = 88;
     HEAP32[$0 + 192 >> 2] = 88;
     graphicsFillRect(349460, HEAP32[$0 + 196 >> 2] - 49 | 0, HEAP32[$0 + 192 >> 2] - 19 | 0, HEAP32[$0 + 196 >> 2] + 49 | 0, HEAP32[$0 + 192 >> 2] + 19 | 0, HEAPU8[349446] | HEAPU8[349447] << 8);
     $1 = HEAPU8[349444] | HEAPU8[349445] << 8;
     HEAP8[349477] = $1;
     HEAP8[349478] = $1 >>> 8;
     HEAP8[349479] = $1 >>> 16;
     HEAP8[349480] = $1 >>> 24;
     graphicsDrawRect(349460, HEAP32[$0 + 196 >> 2] - 50 | 0, HEAP32[$0 + 192 >> 2] - 20 | 0, HEAP32[$0 + 196 >> 2] + 50 | 0, HEAP32[$0 + 192 >> 2] + 20 | 0);
     HEAP32[$0 + 192 >> 2] = HEAP32[$0 + 192 >> 2] - 4;
     HEAP32[$0 + 196 >> 2] = HEAP32[$0 + 196 >> 2] - 24;
     HEAP32[$0 + 188 >> 2] = 127742;
     while (1) {
      if (HEAPU8[HEAP32[$0 + 188 >> 2]]) {
       graphicsDrawChar6x8(349460, HEAP32[$0 + 196 >> 2], HEAP32[$0 + 192 >> 2], HEAP8[HEAP32[$0 + 188 >> 2]], 1, 1, 0);
       HEAP32[$0 + 196 >> 2] = HEAP32[$0 + 196 >> 2] + 6;
       HEAP32[$0 + 188 >> 2] = HEAP32[$0 + 188 >> 2] + 1;
       continue;
      }
      break;
     }
     graphicsInternalFlip();
    }
   }
  }
  if (HEAP8[$0 + 269 | 0] & 1) {
   HEAP8[$0 + 247 | 0] = 0;
  }
  if (HEAP8[$0 + 247 | 0] & 1) {
   HEAP8[349485] = 1;
   HEAP8[349486] = 64;
   graphicsClear(349460);
   HEAP8[$0 + 187 | 0] = 0;
   jsfNameFromString($0 + 152 | 0, 118480);
   HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 176 >> 2];
   $2 = HEAP32[$0 + 172 >> 2];
   $1 = HEAP32[$0 + 168 >> 2];
   HEAP32[$0 + 24 >> 2] = $1;
   HEAP32[$0 + 28 >> 2] = $2;
   $1 = HEAP32[$0 + 164 >> 2];
   $2 = HEAP32[$0 + 160 >> 2];
   HEAP32[$0 + 16 >> 2] = $2;
   HEAP32[$0 + 20 >> 2] = $1;
   $2 = HEAP32[$0 + 156 >> 2];
   $1 = HEAP32[$0 + 152 >> 2];
   HEAP32[$0 + 8 >> 2] = $1;
   HEAP32[$0 + 12 >> 2] = $2;
   HEAP32[$0 + 180 >> 2] = jsfReadFile($0 + 8 | 0, 0, 0);
   label$30: {
    if (jsvIsString(HEAP32[$0 + 180 >> 2]) & 1) {
     if (jsvGetStringLength(HEAP32[$0 + 180 >> 2])) {
      break label$30;
     }
    }
    jsvUnLock(HEAP32[$0 + 180 >> 2]);
    HEAP8[$0 + 187 | 0] = 1;
    HEAP32[$0 + 180 >> 2] = jswrap_banglejs_getLogo();
   }
   HEAP32[$0 + 148 >> 2] = jsvGetCharInString(HEAP32[$0 + 180 >> 2], 0) & 255;
   HEAP32[$0 + 144 >> 2] = jsvGetCharInString(HEAP32[$0 + 180 >> 2], 1) & 255;
   HEAP32[$0 + 108 >> 2] = jsvNewFromString(121337);
   jsvGetString(HEAP32[$0 + 108 >> 2], $0 + 112 | 0, 20);
   jsvUnLock(HEAP32[$0 + 108 >> 2]);
   HEAP32[$0 + 104 >> 2] = (176 - HEAP32[$0 + 144 >> 2] | 0) / 2;
   jsvUnLock2(jswrap_graphics_drawImage(HEAP32[$0 + 252 >> 2], HEAP32[$0 + 180 >> 2], (176 - HEAP32[$0 + 148 >> 2] | 0) / 2 | 0, HEAP32[$0 + 104 >> 2], 0), HEAP32[$0 + 180 >> 2]);
   if (HEAP8[$0 + 187 | 0] & 1) {
    label$33: {
     if (HEAP32[$0 + 144 >> 2] > 56) {
      HEAP32[$0 + 104 >> 2] = HEAP32[$0 + 104 >> 2] + (HEAP32[$0 + 144 >> 2] - 28 | 0);
      break label$33;
     }
     HEAP32[$0 + 104 >> 2] = HEAP32[$0 + 104 >> 2] + (HEAP32[$0 + 144 >> 2] - 15 | 0);
    }
    HEAP32[$0 + 76 >> 2] = jsvNewFromString(121337);
    jsvGetString(HEAP32[$0 + 76 >> 2], $0 + 80 | 0, 20);
    jsvUnLock(HEAP32[$0 + 76 >> 2]);
    jswrap_graphics_drawCString(349460, 8, HEAP32[$0 + 104 >> 2], 125894);
    jswrap_graphics_drawCString(349460, 8, HEAP32[$0 + 104 >> 2] + 10 | 0, $0 + 80 | 0);
    jswrap_graphics_drawCString(349460, 8, HEAP32[$0 + 104 >> 2] + 20 | 0, 115374);
   }
  }
  graphicsInternalFlip();
  graphicsStructResetState(349460);
  if (HEAP8[$0 + 270 | 0] & 1) {
   stepcount_init();
   HEAP32[93431] = 0;
  }
  HEAP8[373796] = 0;
  jshPinSetState(23, 5);
  HEAP32[93450] = 0;
  HEAP32[93451] = 0;
  HEAP32[93452] = 0;
  jshSetPinShouldStayWatched(17, 1);
  HEAP8[$0 + 271 | 0] = jshPinWatch(17, 1, 0);
  if (HEAPU8[$0 + 271 | 0]) {
   jshSetEventCallback(HEAPU8[$0 + 271 | 0], 591);
  }
  if (!(HEAP8[$0 + 270 | 0] & 1)) {
   jsvUnLock(jsiSetTimeout(592, 500));
  }
  if (!(HEAP8[$0 + 269 | 0] & 1)) {
   break label$19;
  }
  jsvUnLock(jspEvaluate(143092, 1));
 }
 __stack_pointer = $0 + 272 | 0;
}

function jswrap_graphics_toColor($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 304 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 296 >> 2] = $0;
 HEAP32[$4 + 292 >> 2] = $1;
 HEAP32[$4 + 288 >> 2] = $2;
 HEAP32[$4 + 284 >> 2] = $3;
 label$1: {
  if (!(graphicsGetFromVar($4 + 208 | 0, HEAP32[$4 + 296 >> 2]) & 1)) {
   HEAP32[$4 + 300 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 204 >> 2] = 0;
  label$3: {
   if (jsvIsString(HEAP32[$4 + 292 >> 2]) & 1) {
    $1 = $4 + 167 | 0;
    HEAP8[$1 | 0] = 0;
    HEAP8[$1 + 1 | 0] = 0;
    HEAP8[$1 + 2 | 0] = 0;
    HEAP8[$1 + 3 | 0] = 0;
    HEAP8[$1 + 4 | 0] = 0;
    HEAP8[$1 + 5 | 0] = 0;
    HEAP8[$1 + 6 | 0] = 0;
    HEAP8[$1 + 7 | 0] = 0;
    HEAP8[$1 + 8 | 0] = 0;
    jsvGetString(HEAP32[$4 + 292 >> 2], $4 + 167 | 0, 9);
    label$5: {
     if (!HEAP8[$4 + 171 | 0]) {
      HEAPF64[$4 + 192 >> 3] = +(chtod(HEAP8[$4 + 168 | 0]) | 0) / 15;
      HEAPF64[$4 + 184 >> 3] = +(chtod(HEAP8[$4 + 169 | 0]) | 0) / 15;
      HEAPF64[$4 + 176 >> 3] = +(chtod(HEAP8[$4 + 170 | 0]) | 0) / 15;
      break label$5;
     }
     HEAPF64[$4 + 192 >> 3] = +(hexToByte(HEAP8[$4 + 168 | 0], HEAP8[$4 + 169 | 0]) | 0) / 255;
     HEAPF64[$4 + 184 >> 3] = +(hexToByte(HEAP8[$4 + 170 | 0], HEAP8[$4 + 171 | 0]) | 0) / 255;
     HEAPF64[$4 + 176 >> 3] = +(hexToByte(HEAP8[$4 + 172 | 0], HEAP8[$4 + 173 | 0]) | 0) / 255;
    }
    label$7: {
     if (!(HEAPF64[$4 + 192 >> 3] < 0 | HEAPF64[$4 + 184 >> 3] < 0 | HEAPF64[$4 + 176 >> 3] < 0)) {
      if (!HEAP8[$4 + 174 | 0]) {
       break label$7;
      }
     }
     jsExceptionHere(1, 143439, 0);
     HEAP32[$4 + 300 >> 2] = 0;
     break label$1;
    }
    break label$3;
   }
   HEAPF64[$4 + 192 >> 3] = jsvGetFloat(HEAP32[$4 + 292 >> 2]);
   HEAPF64[$4 + 184 >> 3] = jsvGetFloat(HEAP32[$4 + 288 >> 2]);
   HEAPF64[$4 + 176 >> 3] = jsvGetFloat(HEAP32[$4 + 284 >> 2]);
  }
  $1 = __DOUBLE_BITS_11(HEAPF64[$4 + 192 >> 3]);
  $0 = $1;
  $1 = i64toi32_i32$HIGH_BITS;
  $1 = $1 & 2147483647;
  label$9: {
   label$10: {
    if (($1 | 0) == 2146435072 | $1 >>> 0 > 2146435072) {
     break label$10;
    }
    $1 = __DOUBLE_BITS_11(HEAPF64[$4 + 184 >> 3]);
    $0 = $1;
    $1 = i64toi32_i32$HIGH_BITS;
    $1 = $1 & 2147483647;
    if (($1 | 0) == 2146435072 | $1 >>> 0 > 2146435072) {
     break label$10;
    }
    $1 = __DOUBLE_BITS_11(HEAPF64[$4 + 176 >> 3]);
    $0 = $1;
    $1 = i64toi32_i32$HIGH_BITS;
    $1 = $1 & 2147483647;
    if (($1 | 0) == 2146435072 | $1 >>> 0 > 2146435072) {
     break label$10;
    }
    $5 = HEAPF64[$4 + 192 >> 3] * 256;
    label$14: {
     if (Math_abs($5) < 2147483648) {
      $0 = ~~$5;
      break label$14;
     }
     $0 = -2147483648;
    }
    HEAP32[$4 + 160 >> 2] = $0;
    $5 = HEAPF64[$4 + 184 >> 3] * 256;
    label$16: {
     if (Math_abs($5) < 2147483648) {
      $0 = ~~$5;
      break label$16;
     }
     $0 = -2147483648;
    }
    HEAP32[$4 + 156 >> 2] = $0;
    $5 = HEAPF64[$4 + 176 >> 3] * 256;
    label$18: {
     if (Math_abs($5) < 2147483648) {
      $0 = ~~$5;
      break label$18;
     }
     $0 = -2147483648;
    }
    HEAP32[$4 + 152 >> 2] = $0;
    if (HEAP32[$4 + 160 >> 2] > 255) {
     HEAP32[$4 + 160 >> 2] = 255;
    }
    if (HEAP32[$4 + 156 >> 2] > 255) {
     HEAP32[$4 + 156 >> 2] = 255;
    }
    if (HEAP32[$4 + 152 >> 2] > 255) {
     HEAP32[$4 + 152 >> 2] = 255;
    }
    if (HEAP32[$4 + 160 >> 2] < 0) {
     HEAP32[$4 + 160 >> 2] = 0;
    }
    if (HEAP32[$4 + 156 >> 2] < 0) {
     HEAP32[$4 + 156 >> 2] = 0;
    }
    if (HEAP32[$4 + 152 >> 2] < 0) {
     HEAP32[$4 + 152 >> 2] = 0;
    }
    HEAP32[$4 + 148 >> 2] = (HEAPU8[$4 + 216 | 0] | HEAPU8[$4 + 217 | 0] << 8 | (HEAPU8[$4 + 218 | 0] << 16 | HEAPU8[$4 + 219 | 0] << 24)) & 896;
    if (HEAP32[$4 + 148 >> 2]) {
     HEAP32[$4 + 144 >> 2] = HEAP32[$4 + 160 >> 2];
     HEAP32[$4 + 140 >> 2] = HEAP32[$4 + 156 >> 2];
     HEAP32[$4 + 136 >> 2] = HEAP32[$4 + 152 >> 2];
     label$27: {
      label$28: {
       label$29: {
        label$30: {
         label$31: {
          $0 = HEAP32[$4 + 148 >> 2];
          if (($0 | 0) != 128) {
           if (($0 | 0) == 256) {
            break label$31;
           }
           if (($0 | 0) == 384) {
            break label$30;
           }
           if (($0 | 0) == 512) {
            break label$29;
           }
           if (($0 | 0) == 640) {
            break label$28;
           }
           break label$27;
          }
          HEAP32[$4 + 160 >> 2] = HEAP32[$4 + 136 >> 2];
          HEAP32[$4 + 156 >> 2] = HEAP32[$4 + 144 >> 2];
          HEAP32[$4 + 152 >> 2] = HEAP32[$4 + 140 >> 2];
          break label$27;
         }
         HEAP32[$4 + 160 >> 2] = HEAP32[$4 + 136 >> 2];
         HEAP32[$4 + 152 >> 2] = HEAP32[$4 + 144 >> 2];
         break label$27;
        }
        HEAP32[$4 + 160 >> 2] = HEAP32[$4 + 140 >> 2];
        HEAP32[$4 + 156 >> 2] = HEAP32[$4 + 136 >> 2];
        HEAP32[$4 + 152 >> 2] = HEAP32[$4 + 144 >> 2];
        break label$27;
       }
       HEAP32[$4 + 160 >> 2] = HEAP32[$4 + 140 >> 2];
       HEAP32[$4 + 156 >> 2] = HEAP32[$4 + 144 >> 2];
       break label$27;
      }
      HEAP32[$4 + 156 >> 2] = HEAP32[$4 + 136 >> 2];
      HEAP32[$4 + 152 >> 2] = HEAP32[$4 + 140 >> 2];
     }
    }
    label$33: {
     if (HEAPU8[$4 + 224 | 0] == 16) {
      HEAP32[$4 + 204 >> 2] = HEAP32[$4 + 156 >> 2] >> 2 << 5 | HEAP32[$4 + 152 >> 2] >> 3 | HEAP32[$4 + 160 >> 2] >> 3 << 11;
      break label$33;
     }
     label$35: {
      if (HEAPU8[$4 + 224 | 0] == 32) {
       HEAP32[$4 + 204 >> 2] = HEAP32[$4 + 152 >> 2] | HEAP32[$4 + 156 >> 2] << 8 | HEAP32[$4 + 160 >> 2] << 16 | -16777216;
       break label$35;
      }
      label$37: {
       if (HEAPU8[$4 + 224 | 0] == 24) {
        HEAP32[$4 + 204 >> 2] = HEAP32[$4 + 152 >> 2] | HEAP32[$4 + 156 >> 2] << 8 | HEAP32[$4 + 160 >> 2] << 16;
        break label$37;
       }
       label$39: {
        if (HEAPU8[$4 + 224 | 0] == 4) {
         HEAP32[$4 + 132 >> 2] = 2147483647;
         HEAP32[$4 + 204 >> 2] = 0;
         HEAP32[$4 + 128 >> 2] = 0;
         while (1) {
          if (HEAPU32[$4 + 128 >> 2] < 16) {
           HEAP32[$4 + 124 >> 2] = HEAPU16[(HEAP32[$4 + 128 >> 2] << 1) + 171488 >> 1];
           HEAP32[$4 + 120 >> 2] = HEAP32[$4 + 124 >> 2] >> 8 & 248;
           HEAP32[$4 + 116 >> 2] = HEAP32[$4 + 124 >> 2] >> 3 & 252;
           HEAP32[$4 + 112 >> 2] = HEAP32[$4 + 124 >> 2] << 3 & 248;
           HEAP32[$4 + 120 >> 2] = HEAP32[$4 + 120 >> 2] | HEAP32[$4 + 120 >> 2] >> 5;
           HEAP32[$4 + 116 >> 2] = HEAP32[$4 + 116 >> 2] | HEAP32[$4 + 112 >> 2] >> 6;
           HEAP32[$4 + 112 >> 2] = HEAP32[$4 + 112 >> 2] | HEAP32[$4 + 112 >> 2] >> 5;
           HEAP32[$4 + 108 >> 2] = HEAP32[$4 + 120 >> 2] - HEAP32[$4 + 160 >> 2];
           HEAP32[$4 + 104 >> 2] = HEAP32[$4 + 116 >> 2] - HEAP32[$4 + 156 >> 2];
           HEAP32[$4 + 100 >> 2] = HEAP32[$4 + 112 >> 2] - HEAP32[$4 + 152 >> 2];
           HEAP32[$4 + 96 >> 2] = (Math_imul(HEAP32[$4 + 108 >> 2], HEAP32[$4 + 108 >> 2]) + Math_imul(HEAP32[$4 + 104 >> 2], HEAP32[$4 + 104 >> 2]) | 0) + Math_imul(HEAP32[$4 + 100 >> 2], HEAP32[$4 + 100 >> 2]);
           if (HEAP32[$4 + 96 >> 2] < HEAP32[$4 + 132 >> 2]) {
            HEAP32[$4 + 132 >> 2] = HEAP32[$4 + 96 >> 2];
            HEAP32[$4 + 204 >> 2] = HEAP32[$4 + 128 >> 2];
           }
           HEAP32[$4 + 128 >> 2] = HEAP32[$4 + 128 >> 2] + 1;
           continue;
          }
          break;
         }
         break label$39;
        }
        label$44: {
         if (HEAPU8[$4 + 224 | 0] == 8) {
          HEAP32[$4 + 92 >> 2] = 2147483647;
          HEAP32[$4 + 204 >> 2] = 0;
          HEAP32[$4 + 88 >> 2] = 0;
          while (1) {
           if (HEAP32[$4 + 88 >> 2] < 255) {
            HEAP32[$4 + 84 >> 2] = HEAPU16[(HEAP32[$4 + 88 >> 2] << 1) + 171520 >> 1];
            HEAP32[$4 + 80 >> 2] = HEAP32[$4 + 84 >> 2] >> 8 & 248;
            HEAP32[$4 + 76 >> 2] = HEAP32[$4 + 84 >> 2] >> 3 & 252;
            HEAP32[$4 + 72 >> 2] = HEAP32[$4 + 84 >> 2] << 3 & 248;
            HEAP32[$4 + 80 >> 2] = HEAP32[$4 + 80 >> 2] | HEAP32[$4 + 80 >> 2] >> 5;
            HEAP32[$4 + 76 >> 2] = HEAP32[$4 + 76 >> 2] | HEAP32[$4 + 72 >> 2] >> 6;
            HEAP32[$4 + 72 >> 2] = HEAP32[$4 + 72 >> 2] | HEAP32[$4 + 72 >> 2] >> 5;
            HEAP32[$4 + 68 >> 2] = HEAP32[$4 + 80 >> 2] - HEAP32[$4 + 160 >> 2];
            HEAP32[$4 + 64 >> 2] = HEAP32[$4 + 76 >> 2] - HEAP32[$4 + 156 >> 2];
            HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 72 >> 2] - HEAP32[$4 + 152 >> 2];
            HEAP32[$4 + 56 >> 2] = (Math_imul(HEAP32[$4 + 68 >> 2], HEAP32[$4 + 68 >> 2]) + Math_imul(HEAP32[$4 + 64 >> 2], HEAP32[$4 + 64 >> 2]) | 0) + Math_imul(HEAP32[$4 + 60 >> 2], HEAP32[$4 + 60 >> 2]);
            if (HEAP32[$4 + 56 >> 2] < HEAP32[$4 + 92 >> 2]) {
             HEAP32[$4 + 92 >> 2] = HEAP32[$4 + 56 >> 2];
             HEAP32[$4 + 204 >> 2] = HEAP32[$4 + 88 >> 2];
            }
            HEAP32[$4 + 88 >> 2] = HEAP32[$4 + 88 >> 2] + 1;
            continue;
           }
           break;
          }
          break label$44;
         }
         HEAP32[$4 + 204 >> 2] = (HEAP32[$4 + 152 >> 2] + (HEAP32[$4 + 160 >> 2] + HEAP32[$4 + 156 >> 2] | 0) | 0) >= 384 ? -1 : 0;
        }
       }
      }
     }
    }
    break label$9;
   }
   HEAP32[$4 + 204 >> 2] = jsvGetInteger(HEAP32[$4 + 292 >> 2]);
  }
  HEAP32[$4 + 300 >> 2] = HEAP32[$4 + 204 >> 2];
 }
 __stack_pointer = $4 + 304 | 0;
 return HEAP32[$4 + 300 >> 2];
}

function _jsvTrace($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 336 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 332 >> 2] = $0;
 HEAP32[$4 + 328 >> 2] = $1;
 HEAP32[$4 + 324 >> 2] = $2;
 HEAP32[$4 + 320 >> 2] = $3;
 HEAP32[$4 + 316 >> 2] = 0;
 while (1) {
  if (HEAP32[$4 + 316 >> 2] < HEAP32[$4 + 328 >> 2]) {
   jsiConsolePrintString(144421);
   HEAP32[$4 + 316 >> 2] = HEAP32[$4 + 316 >> 2] + 1;
   continue;
  }
  break;
 }
 label$3: {
  if (!HEAP32[$4 + 332 >> 2]) {
   jsiConsolePrintString(121670);
   break label$3;
  }
  if (!(HEAP32[$4 + 332 >> 2] != HEAP32[86750] | HEAP32[$4 + 320 >> 2] <= 0)) {
   jsiConsolePrintString(123726);
   break label$3;
  }
  jsvTraceLockInfo(HEAP32[$4 + 332 >> 2]);
  HEAP32[$4 + 312 >> 2] = _jsvTraceGetLowestLevel(HEAP32[$4 + 324 >> 2], HEAP32[$4 + 332 >> 2]);
  if (!((HEAP32[$4 + 312 >> 2] < 0 | HEAP32[$4 + 312 >> 2] >= HEAP32[$4 + 320 >> 2]) & HEAP32[$4 + 320 >> 2] <= 16)) {
   jsiConsolePrintString(146562);
   break label$3;
  }
  label$8: {
   if (jsvIsNewChild(HEAP32[$4 + 332 >> 2]) & 1) {
    jsiConsolePrintString(125737);
    HEAP32[$4 + 308 >> 2] = jsvGetAddressOf(jsvGetNextSibling(HEAP32[$4 + 332 >> 2]) & 65535);
    _jsvTrace(HEAP32[$4 + 308 >> 2], HEAP32[$4 + 328 >> 2] + 2 | 0, HEAP32[$4 + 324 >> 2], HEAP32[$4 + 320 >> 2] + 1 | 0);
    jsiConsolePrintString(144281);
    break label$8;
   }
   if (jsvIsName(HEAP32[$4 + 332 >> 2]) & 1) {
    jsiConsolePrintString(144172);
   }
  }
  HEAP8[$4 + 307 | 0] = 32;
  label$11: {
   if (jsvIsObject(HEAP32[$4 + 332 >> 2]) & 1) {
    jsiConsolePrintString(144012);
    HEAP8[$4 + 307 | 0] = 125;
    break label$11;
   }
   label$13: {
    if (jsvIsGetterOrSetter(HEAP32[$4 + 332 >> 2]) & 1) {
     jsiConsolePrintString(144022);
     HEAP8[$4 + 307 | 0] = 125;
     break label$13;
    }
    label$15: {
     if (jsvIsArray(HEAP32[$4 + 332 >> 2]) & 1) {
      $0 = HEAP32[$4 + 332 >> 2];
      HEAP32[$4 + 48 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
      jsiConsolePrintf(144213, $4 + 48 | 0);
      HEAP8[$4 + 307 | 0] = 93;
      break label$15;
     }
     label$17: {
      if (jsvIsNativeFunction(HEAP32[$4 + 332 >> 2]) & 1) {
       $0 = HEAP32[$4 + 332 >> 2];
       $1 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
       $0 = HEAP32[$4 + 332 >> 2];
       HEAP32[$4 + 68 >> 2] = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8;
       HEAP32[$4 + 64 >> 2] = $1;
       jsiConsolePrintf(144051, $4 - -64 | 0);
       HEAP8[$4 + 307 | 0] = 125;
       break label$17;
      }
      label$19: {
       if (jsvIsFunction(HEAP32[$4 + 332 >> 2]) & 1) {
        jsiConsolePrintString(144039);
        if (jsvIsFunctionReturn(HEAP32[$4 + 332 >> 2]) & 1) {
         jsiConsolePrintString(144094);
        }
        HEAP8[$4 + 307 | 0] = 125;
        break label$19;
       }
       label$22: {
        if (jsvIsPin(HEAP32[$4 + 332 >> 2]) & 1) {
         HEAP32[$4 + 80 >> 2] = jsvGetInteger(HEAP32[$4 + 332 >> 2]);
         jsiConsolePrintf(122592, $4 + 80 | 0);
         break label$22;
        }
        label$24: {
         if (jsvIsInt(HEAP32[$4 + 332 >> 2]) & 1) {
          HEAP32[$4 + 96 >> 2] = jsvGetInteger(HEAP32[$4 + 332 >> 2]);
          jsiConsolePrintf(122483, $4 + 96 | 0);
          break label$24;
         }
         label$26: {
          if (jsvIsBoolean(HEAP32[$4 + 332 >> 2]) & 1) {
           HEAP32[$4 + 112 >> 2] = jsvGetBool(HEAP32[$4 + 332 >> 2]) & 1 ? 119419 : 119736;
           jsiConsolePrintf(115837, $4 + 112 | 0);
           break label$26;
          }
          label$28: {
           if (jsvIsFloat(HEAP32[$4 + 332 >> 2]) & 1) {
            HEAPF64[$4 + 128 >> 3] = jsvGetFloat(HEAP32[$4 + 332 >> 2]);
            jsiConsolePrintf(119143, $4 + 128 | 0);
            break label$28;
           }
           label$30: {
            if (jsvIsFunctionParameter(HEAP32[$4 + 332 >> 2]) & 1) {
             HEAP32[$4 + 144 >> 2] = HEAP32[$4 + 332 >> 2];
             jsiConsolePrintf(144084, $4 + 144 | 0);
             break label$30;
            }
            label$32: {
             if (jsvIsArrayBufferName(HEAP32[$4 + 332 >> 2]) & 1) {
              HEAP32[$4 + 160 >> 2] = jsvGetInteger(HEAP32[$4 + 332 >> 2]);
              jsiConsolePrintf(144192, $4 + 160 | 0);
              break label$32;
             }
             label$34: {
              if (jsvIsArrayBuffer(HEAP32[$4 + 332 >> 2]) & 1) {
               label$36: {
                if (jswGetBasicObjectName(HEAP32[$4 + 332 >> 2])) {
                 $1 = jswGetBasicObjectName(HEAP32[$4 + 332 >> 2]);
                 break label$36;
                }
                $1 = 116480;
               }
               $0 = HEAP32[$4 + 332 >> 2];
               $2 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8;
               HEAP32[$4 + 184 >> 2] = HEAPU8[$0 + 2 | 0] | HEAPU8[$0 + 3 | 0] << 8 | HEAPU8[$0 + 4 | 0] << 16;
               HEAP32[$4 + 180 >> 2] = $2;
               HEAP32[$4 + 176 >> 2] = $1;
               jsiConsolePrintf(143048, $4 + 176 | 0);
               break label$34;
              }
              label$38: {
               if (jsvIsString(HEAP32[$4 + 332 >> 2]) & 1) {
                HEAP32[$4 + 300 >> 2] = 1;
                if (jsvGetLastChild(HEAP32[$4 + 332 >> 2]) & 65535) {
                 HEAP32[$4 + 296 >> 2] = jsvGetAddressOf(jsvGetLastChild(HEAP32[$4 + 332 >> 2]) & 65535);
                 HEAP32[$4 + 300 >> 2] = jsvCountJsVarsUsed(HEAP32[$4 + 296 >> 2]) + HEAP32[$4 + 300 >> 2];
                }
                if (jsvIsFlatString(HEAP32[$4 + 332 >> 2]) & 1) {
                 HEAP32[$4 + 300 >> 2] = jsvGetFlatStringBlocks(HEAP32[$4 + 332 >> 2]) + HEAP32[$4 + 300 >> 2];
                }
                HEAP32[$4 + 292 >> 2] = 146978;
                if (jsvIsFlatString(HEAP32[$4 + 332 >> 2]) & 1) {
                 HEAP32[$4 + 292 >> 2] = 113286;
                }
                if (jsvIsNativeString(HEAP32[$4 + 332 >> 2]) & 1) {
                 HEAP32[$4 + 292 >> 2] = 119360;
                }
                if (jsvIsFlashString(HEAP32[$4 + 332 >> 2]) & 1) {
                 HEAP32[$4 + 292 >> 2] = 118488;
                }
                $0 = HEAP32[$4 + 292 >> 2];
                $1 = HEAP32[$4 + 300 >> 2];
                HEAP32[$4 + 200 >> 2] = HEAP32[$4 + 332 >> 2];
                HEAP32[$4 + 196 >> 2] = $1;
                HEAP32[$4 + 192 >> 2] = $0;
                jsiConsolePrintf(116780, $4 + 192 | 0);
                break label$38;
               }
               $0 = HEAP32[$4 + 332 >> 2];
               HEAP32[$4 + 208 >> 2] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 50175;
               jsiConsolePrintf(122581, $4 + 208 | 0);
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
  if (jsvIsConstant(HEAP32[$4 + 332 >> 2]) & 1) {
   jsiConsolePrintf(144226, 0);
  }
  if (jsvIsNameInt(HEAP32[$4 + 332 >> 2]) & 1) {
   HEAP32[$4 >> 2] = jsvGetFirstChildSigned(HEAP32[$4 + 332 >> 2]) << 16 >> 16;
   jsiConsolePrintf(145687, $4);
   break label$3;
  }
  if (jsvIsNameIntBool(HEAP32[$4 + 332 >> 2]) & 1) {
   HEAP32[$4 + 16 >> 2] = jsvGetFirstChild(HEAP32[$4 + 332 >> 2]) & 65535 ? 119419 : 119736;
   jsiConsolePrintf(145313, $4 + 16 | 0);
   break label$3;
  }
  label$48: {
   if (jsvHasSingleChild(HEAP32[$4 + 332 >> 2]) & 1) {
    label$50: {
     if (jsvGetFirstChild(HEAP32[$4 + 332 >> 2]) & 65535) {
      $0 = jsvGetAddressOf(jsvGetFirstChild(HEAP32[$4 + 332 >> 2]) & 65535);
      break label$50;
     }
     $0 = 0;
    }
    HEAP32[$4 + 288 >> 2] = $0;
    _jsvTrace(HEAP32[$4 + 288 >> 2], HEAP32[$4 + 328 >> 2] + 2 | 0, HEAP32[$4 + 324 >> 2], HEAP32[$4 + 320 >> 2] + 1 | 0);
    break label$48;
   }
   if (jsvHasChildren(HEAP32[$4 + 332 >> 2]) & 1) {
    jsvIteratorNew($4 + 224 | 0, HEAP32[$4 + 332 >> 2], 0);
    HEAP8[$4 + 223 | 0] = 1;
    while (1) {
     $0 = 0;
     if (jsvIteratorHasElement($4 + 224 | 0) & 1) {
      $0 = jspIsInterrupted() ^ -1;
     }
     if ($0 & 1) {
      if (HEAP8[$4 + 223 | 0] & 1) {
       jsiConsolePrintf(146977, 0);
      }
      HEAP8[$4 + 223 | 0] = 0;
      HEAP32[$4 + 216 >> 2] = jsvIteratorGetKey($4 + 224 | 0);
      _jsvTrace(HEAP32[$4 + 216 >> 2], HEAP32[$4 + 328 >> 2] + 2 | 0, HEAP32[$4 + 324 >> 2], HEAP32[$4 + 320 >> 2] + 1 | 0);
      jsvUnLock(HEAP32[$4 + 216 >> 2]);
      jsiConsolePrintf(146977, 0);
      jsvIteratorNext($4 + 224 | 0);
      continue;
     }
     break;
    }
    jsvIteratorFree($4 + 224 | 0);
    if (!(HEAP8[$4 + 223 | 0] & 1)) {
     HEAP32[$4 + 316 >> 2] = 0;
     while (1) {
      if (HEAP32[$4 + 316 >> 2] < HEAP32[$4 + 328 >> 2]) {
       jsiConsolePrintString(144421);
       HEAP32[$4 + 316 >> 2] = HEAP32[$4 + 316 >> 2] + 1;
       continue;
      }
      break;
     }
    }
   }
  }
  HEAP32[$4 + 32 >> 2] = HEAP8[$4 + 307 | 0];
  jsiConsolePrintf(122863, $4 + 32 | 0);
 }
 __stack_pointer = $4 + 336 | 0;
}

function jswrap_graphics_drawImages($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 256 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 248 >> 2] = $0;
 HEAP32[$3 + 244 >> 2] = $1;
 HEAP32[$3 + 240 >> 2] = $2;
 HEAP32[$3 + 236 >> 2] = 4;
 label$1: {
  if (!(graphicsGetFromVar($3 + 160 | 0, HEAP32[$3 + 248 >> 2]) & 1)) {
   HEAP32[$3 + 252 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 156 >> 2] = $3;
  $2 = $3 - 768 | 0;
  __stack_pointer = $2;
  label$3: {
   label$4: {
    if (jsvIsArray(HEAP32[$3 + 244 >> 2]) & 1) {
     $0 = jsvGetArrayLength(HEAP32[$3 + 244 >> 2]);
     HEAP32[$3 + 148 >> 2] = $0;
     if (($0 | 0) <= 4) {
      break label$4;
     }
    }
    HEAP32[$3 + 32 >> 2] = 4;
    jsExceptionHere(3, 115512, $3 + 32 | 0);
    HEAP32[$3 + 252 >> 2] = 0;
    break label$3;
   }
   HEAP32[$3 + 140 >> 2] = 1e4;
   HEAP32[$3 + 136 >> 2] = 1e4;
   HEAP32[$3 + 132 >> 2] = 1e4;
   HEAP32[$3 + 128 >> 2] = 1e4;
   HEAP8[$3 + 127 | 0] = 1;
   HEAP32[$3 + 152 >> 2] = 0;
   while (1) {
    if (HEAP32[$3 + 152 >> 2] < HEAP32[$3 + 148 >> 2]) {
     HEAP32[$3 + 120 >> 2] = jsvGetArrayItem(HEAP32[$3 + 244 >> 2], HEAP32[$3 + 152 >> 2]);
     label$8: {
      if (jsvIsObject(HEAP32[$3 + 120 >> 2]) & 1) {
       HEAP32[$3 + 116 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 120 >> 2], 120362);
       label$10: {
        if (_jswrap_graphics_parseImage($3 + 160 | 0, HEAP32[$3 + 116 >> 2], 0, (Math_imul(HEAP32[$3 + 152 >> 2], 192) + $2 | 0) + 36 | 0) & 1) {
         $0 = jsvObjectGetIntegerChild(HEAP32[$3 + 120 >> 2], 111928);
         HEAP32[Math_imul(HEAP32[$3 + 152 >> 2], 192) + $2 >> 2] = $0;
         $0 = jsvObjectGetIntegerChild(HEAP32[$3 + 120 >> 2], 111841);
         HEAP32[(Math_imul(HEAP32[$3 + 152 >> 2], 192) + $2 | 0) + 4 >> 2] = $0;
         $4 = jsvObjectGetFloatChild(HEAP32[$3 + 120 >> 2], 120250);
         HEAPF64[(Math_imul(HEAP32[$3 + 152 >> 2], 192) + $2 | 0) + 24 >> 3] = $4;
         $0 = __DOUBLE_BITS_11(HEAPF64[(Math_imul(HEAP32[$3 + 152 >> 2], 192) + $2 | 0) + 24 >> 3]);
         $1 = $0;
         $0 = i64toi32_i32$HIGH_BITS;
         $0 = $0 & 2147483647;
         if (HEAPF64[(Math_imul(HEAP32[$3 + 152 >> 2], 192) + $2 | 0) + 24 >> 3] <= 0 ? 1 : ($0 | 0) == 2146435072 | $0 >>> 0 > 2146435072) {
          HEAPF64[(Math_imul(HEAP32[$3 + 152 >> 2], 192) + $2 | 0) + 24 >> 3] = 1;
         }
         $4 = jsvObjectGetFloatChild(HEAP32[$3 + 120 >> 2], 119658);
         HEAPF64[(Math_imul(HEAP32[$3 + 152 >> 2], 192) + $2 | 0) + 16 >> 3] = $4;
         $0 = __DOUBLE_BITS_11(HEAPF64[(Math_imul(HEAP32[$3 + 152 >> 2], 192) + $2 | 0) + 16 >> 3]);
         $1 = $0;
         $0 = i64toi32_i32$HIGH_BITS;
         $0 = $0 & 2147483647;
         if (($0 | 0) == 2146435072 | $0 >>> 0 > 2146435072) {
          HEAPF64[(Math_imul(HEAP32[$3 + 152 >> 2], 192) + $2 | 0) + 16 >> 3] = 0;
         }
         $0 = jsvObjectGetBoolChild(HEAP32[$3 + 120 >> 2], 116215);
         HEAP8[(Math_imul(HEAP32[$3 + 152 >> 2], 192) + $2 | 0) + 32 | 0] = $0 & 1;
         $0 = jsvObjectGetBoolChild(HEAP32[$3 + 120 >> 2], 113291);
         HEAP8[(Math_imul(HEAP32[$3 + 152 >> 2], 192) + $2 | 0) + 33 | 0] = $0 & 1;
         _jswrap_drawImageLayerInit(Math_imul(HEAP32[$3 + 152 >> 2], 192) + $2 | 0);
         if (!(jsvObjectGetBoolChild(HEAP32[$3 + 120 >> 2], 115708) & 1)) {
          if (HEAP32[Math_imul(HEAP32[$3 + 152 >> 2], 192) + $2 >> 2] < HEAP32[$3 + 140 >> 2]) {
           HEAP32[$3 + 140 >> 2] = HEAP32[Math_imul(HEAP32[$3 + 152 >> 2], 192) + $2 >> 2];
          }
          if (HEAP32[(Math_imul(HEAP32[$3 + 152 >> 2], 192) + $2 | 0) + 4 >> 2] < HEAP32[$3 + 136 >> 2]) {
           HEAP32[$3 + 136 >> 2] = HEAP32[(Math_imul(HEAP32[$3 + 152 >> 2], 192) + $2 | 0) + 4 >> 2];
          }
          if (HEAP32[(Math_imul(HEAP32[$3 + 152 >> 2], 192) + $2 | 0) + 8 >> 2] > (HEAP32[$3 + 140 >> 2] + HEAP32[$3 + 132 >> 2] | 0)) {
           HEAP32[$3 + 132 >> 2] = HEAP32[(Math_imul(HEAP32[$3 + 152 >> 2], 192) + $2 | 0) + 8 >> 2] - HEAP32[$3 + 140 >> 2];
          }
          if (HEAP32[(Math_imul(HEAP32[$3 + 152 >> 2], 192) + $2 | 0) + 12 >> 2] > (HEAP32[$3 + 136 >> 2] + HEAP32[$3 + 128 >> 2] | 0)) {
           HEAP32[$3 + 128 >> 2] = HEAP32[(Math_imul(HEAP32[$3 + 152 >> 2], 192) + $2 | 0) + 12 >> 2] - HEAP32[$3 + 136 >> 2];
          }
         }
         break label$10;
        }
        HEAP8[$3 + 127 | 0] = 0;
       }
       jsvUnLock(HEAP32[$3 + 116 >> 2]);
       break label$8;
      }
      HEAP8[$3 + 127 | 0] = 0;
     }
     jsvUnLock(HEAP32[$3 + 120 >> 2]);
     HEAP32[$3 + 152 >> 2] = HEAP32[$3 + 152 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$3 + 64 >> 2] = 111928;
   HEAP16[$3 + 68 >> 1] = 10;
   HEAP32[$3 + 72 >> 2] = $3 + 140;
   HEAP32[$3 + 76 >> 2] = 111841;
   HEAP16[$3 + 80 >> 1] = 10;
   HEAP32[$3 + 84 >> 2] = $3 + 136;
   HEAP32[$3 + 88 >> 2] = 118428;
   HEAP16[$3 + 92 >> 1] = 10;
   HEAP32[$3 + 96 >> 2] = $3 + 132;
   HEAP32[$3 + 100 >> 2] = 113099;
   HEAP16[$3 + 104 >> 1] = 10;
   HEAP32[$3 + 108 >> 2] = $3 + 128;
   if (!(jsvReadConfigObject(HEAP32[$3 + 240 >> 2], $3 - -64 | 0, 4) & 1)) {
    HEAP8[$3 + 127 | 0] = 0;
   }
   HEAP32[$3 + 60 >> 2] = (HEAP32[$3 + 140 >> 2] + HEAP32[$3 + 132 >> 2] | 0) - 1;
   HEAP32[$3 + 56 >> 2] = (HEAP32[$3 + 136 >> 2] + HEAP32[$3 + 128 >> 2] | 0) - 1;
   graphicsSetModifiedAndClip($3 + 160 | 0, $3 + 140 | 0, $3 + 136 | 0, $3 + 60 | 0, $3 + 56 | 0, 0);
   HEAP32[$3 + 52 >> 2] = graphicsGetSetPixelFn($3 + 160 | 0);
   if (HEAP8[$3 + 127 | 0] & 1) {
    HEAP32[$3 + 152 >> 2] = 0;
    while (1) {
     if (HEAP32[$3 + 152 >> 2] < HEAP32[$3 + 148 >> 2]) {
      jsvStringIteratorNew((Math_imul(HEAP32[$3 + 152 >> 2], 192) + $2 | 0) + 120 | 0, HEAP32[(Math_imul(HEAP32[$3 + 152 >> 2], 192) + $2 | 0) + 56 >> 2], HEAP32[(Math_imul(HEAP32[$3 + 152 >> 2], 192) + $2 | 0) + 60 >> 2]);
      _jswrap_drawImageLayerSetStart(Math_imul(HEAP32[$3 + 152 >> 2], 192) + $2 | 0, HEAP32[$3 + 140 >> 2], HEAP32[$3 + 136 >> 2]);
      HEAP32[$3 + 152 >> 2] = HEAP32[$3 + 152 >> 2] + 1;
      continue;
     }
     break;
    }
    HEAP32[$3 + 48 >> 2] = HEAP32[$3 + 136 >> 2];
    while (1) {
     if (HEAP32[$3 + 48 >> 2] <= HEAP32[$3 + 56 >> 2]) {
      HEAP32[$3 + 152 >> 2] = 0;
      while (1) {
       if (HEAP32[$3 + 152 >> 2] < HEAP32[$3 + 148 >> 2]) {
        _jswrap_drawImageLayerStartX(Math_imul(HEAP32[$3 + 152 >> 2], 192) + $2 | 0);
        HEAP32[$3 + 152 >> 2] = HEAP32[$3 + 152 >> 2] + 1;
        continue;
       }
       break;
      }
      HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 140 >> 2];
      while (1) {
       if (HEAP32[$3 + 44 >> 2] <= HEAP32[$3 + 60 >> 2]) {
        HEAP8[$3 + 43 | 0] = 0;
        HEAP32[$3 + 36 >> 2] = 0;
        HEAP32[$3 + 152 >> 2] = HEAP32[$3 + 148 >> 2] - 1;
        while (1) {
         if (HEAP32[$3 + 152 >> 2] >= 0) {
          if (_jswrap_drawImageLayerGetPixel(Math_imul(HEAP32[$3 + 152 >> 2], 192) + $2 | 0, $3 + 36 | 0) & 1) {
           HEAP8[$3 + 43 | 0] = 1;
          } else {
           HEAP32[$3 + 152 >> 2] = HEAP32[$3 + 152 >> 2] - 1;
           continue;
          }
         }
         break;
        }
        if (HEAP8[$3 + 43 | 0] & 1) {
         FUNCTION_TABLE[HEAP32[$3 + 52 >> 2]]($3 + 160 | 0, HEAP32[$3 + 44 >> 2], HEAP32[$3 + 48 >> 2], HEAP32[$3 + 36 >> 2]);
        }
        HEAP32[$3 + 152 >> 2] = 0;
        while (1) {
         if (HEAP32[$3 + 152 >> 2] < HEAP32[$3 + 148 >> 2]) {
          _jswrap_drawImageLayerNextX(Math_imul(HEAP32[$3 + 152 >> 2], 192) + $2 | 0);
          _jswrap_drawImageLayerNextXRepeat(Math_imul(HEAP32[$3 + 152 >> 2], 192) + $2 | 0);
          HEAP32[$3 + 152 >> 2] = HEAP32[$3 + 152 >> 2] + 1;
          continue;
         }
         break;
        }
        HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 44 >> 2] + 1;
        continue;
       }
       break;
      }
      HEAP32[$3 + 152 >> 2] = 0;
      while (1) {
       if (HEAP32[$3 + 152 >> 2] < HEAP32[$3 + 148 >> 2]) {
        _jswrap_drawImageLayerNextY(Math_imul(HEAP32[$3 + 152 >> 2], 192) + $2 | 0);
        HEAP32[$3 + 152 >> 2] = HEAP32[$3 + 152 >> 2] + 1;
        continue;
       }
       break;
      }
      HEAP32[$3 + 48 >> 2] = HEAP32[$3 + 48 >> 2] + 1;
      continue;
     }
     break;
    }
    HEAP32[$3 + 152 >> 2] = 0;
    while (1) {
     if (HEAP32[$3 + 152 >> 2] < HEAP32[$3 + 148 >> 2]) {
      jsvStringIteratorFree_16((Math_imul(HEAP32[$3 + 152 >> 2], 192) + $2 | 0) + 120 | 0);
      HEAP32[$3 + 152 >> 2] = HEAP32[$3 + 152 >> 2] + 1;
      continue;
     }
     break;
    }
   }
   HEAP32[$3 + 152 >> 2] = 0;
   while (1) {
    if (HEAP32[$3 + 152 >> 2] < HEAP32[$3 + 148 >> 2]) {
     jsvUnLock(HEAP32[(Math_imul(HEAP32[$3 + 152 >> 2], 192) + $2 | 0) + 56 >> 2]);
     HEAP32[$3 + 152 >> 2] = HEAP32[$3 + 152 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$3 + 252 >> 2] = jsvLockAgain(HEAP32[$3 + 248 >> 2]);
  }
  HEAP32[$3 + 144 >> 2] = 1;
 }
 __stack_pointer = $3 + 256 | 0;
 return HEAP32[$3 + 252 >> 2];
}

function mbedtls_sha1_process($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 160 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 156 >> 2] = $0;
 HEAP32[$2 + 152 >> 2] = $1;
 HEAP32[$2 + 64 >> 2] = HEAPU8[HEAP32[$2 + 152 >> 2] + 3 | 0] | (HEAPU8[HEAP32[$2 + 152 >> 2]] << 24 | HEAPU8[HEAP32[$2 + 152 >> 2] + 1 | 0] << 16 | HEAPU8[HEAP32[$2 + 152 >> 2] + 2 | 0] << 8);
 HEAP32[$2 + 68 >> 2] = HEAPU8[HEAP32[$2 + 152 >> 2] + 7 | 0] | (HEAPU8[HEAP32[$2 + 152 >> 2] + 4 | 0] << 24 | HEAPU8[HEAP32[$2 + 152 >> 2] + 5 | 0] << 16 | HEAPU8[HEAP32[$2 + 152 >> 2] + 6 | 0] << 8);
 HEAP32[$2 + 72 >> 2] = HEAPU8[HEAP32[$2 + 152 >> 2] + 11 | 0] | (HEAPU8[HEAP32[$2 + 152 >> 2] + 8 | 0] << 24 | HEAPU8[HEAP32[$2 + 152 >> 2] + 9 | 0] << 16 | HEAPU8[HEAP32[$2 + 152 >> 2] + 10 | 0] << 8);
 HEAP32[$2 + 76 >> 2] = HEAPU8[HEAP32[$2 + 152 >> 2] + 15 | 0] | (HEAPU8[HEAP32[$2 + 152 >> 2] + 12 | 0] << 24 | HEAPU8[HEAP32[$2 + 152 >> 2] + 13 | 0] << 16 | HEAPU8[HEAP32[$2 + 152 >> 2] + 14 | 0] << 8);
 HEAP32[$2 + 80 >> 2] = HEAPU8[HEAP32[$2 + 152 >> 2] + 19 | 0] | (HEAPU8[HEAP32[$2 + 152 >> 2] + 16 | 0] << 24 | HEAPU8[HEAP32[$2 + 152 >> 2] + 17 | 0] << 16 | HEAPU8[HEAP32[$2 + 152 >> 2] + 18 | 0] << 8);
 HEAP32[$2 + 84 >> 2] = HEAPU8[HEAP32[$2 + 152 >> 2] + 23 | 0] | (HEAPU8[HEAP32[$2 + 152 >> 2] + 20 | 0] << 24 | HEAPU8[HEAP32[$2 + 152 >> 2] + 21 | 0] << 16 | HEAPU8[HEAP32[$2 + 152 >> 2] + 22 | 0] << 8);
 HEAP32[$2 + 88 >> 2] = HEAPU8[HEAP32[$2 + 152 >> 2] + 27 | 0] | (HEAPU8[HEAP32[$2 + 152 >> 2] + 24 | 0] << 24 | HEAPU8[HEAP32[$2 + 152 >> 2] + 25 | 0] << 16 | HEAPU8[HEAP32[$2 + 152 >> 2] + 26 | 0] << 8);
 HEAP32[$2 + 92 >> 2] = HEAPU8[HEAP32[$2 + 152 >> 2] + 31 | 0] | (HEAPU8[HEAP32[$2 + 152 >> 2] + 28 | 0] << 24 | HEAPU8[HEAP32[$2 + 152 >> 2] + 29 | 0] << 16 | HEAPU8[HEAP32[$2 + 152 >> 2] + 30 | 0] << 8);
 HEAP32[$2 + 96 >> 2] = HEAPU8[HEAP32[$2 + 152 >> 2] + 35 | 0] | (HEAPU8[HEAP32[$2 + 152 >> 2] + 32 | 0] << 24 | HEAPU8[HEAP32[$2 + 152 >> 2] + 33 | 0] << 16 | HEAPU8[HEAP32[$2 + 152 >> 2] + 34 | 0] << 8);
 HEAP32[$2 + 100 >> 2] = HEAPU8[HEAP32[$2 + 152 >> 2] + 39 | 0] | (HEAPU8[HEAP32[$2 + 152 >> 2] + 36 | 0] << 24 | HEAPU8[HEAP32[$2 + 152 >> 2] + 37 | 0] << 16 | HEAPU8[HEAP32[$2 + 152 >> 2] + 38 | 0] << 8);
 HEAP32[$2 + 104 >> 2] = HEAPU8[HEAP32[$2 + 152 >> 2] + 43 | 0] | (HEAPU8[HEAP32[$2 + 152 >> 2] + 40 | 0] << 24 | HEAPU8[HEAP32[$2 + 152 >> 2] + 41 | 0] << 16 | HEAPU8[HEAP32[$2 + 152 >> 2] + 42 | 0] << 8);
 HEAP32[$2 + 108 >> 2] = HEAPU8[HEAP32[$2 + 152 >> 2] + 47 | 0] | (HEAPU8[HEAP32[$2 + 152 >> 2] + 44 | 0] << 24 | HEAPU8[HEAP32[$2 + 152 >> 2] + 45 | 0] << 16 | HEAPU8[HEAP32[$2 + 152 >> 2] + 46 | 0] << 8);
 HEAP32[$2 + 112 >> 2] = HEAPU8[HEAP32[$2 + 152 >> 2] + 51 | 0] | (HEAPU8[HEAP32[$2 + 152 >> 2] + 48 | 0] << 24 | HEAPU8[HEAP32[$2 + 152 >> 2] + 49 | 0] << 16 | HEAPU8[HEAP32[$2 + 152 >> 2] + 50 | 0] << 8);
 HEAP32[$2 + 116 >> 2] = HEAPU8[HEAP32[$2 + 152 >> 2] + 55 | 0] | (HEAPU8[HEAP32[$2 + 152 >> 2] + 52 | 0] << 24 | HEAPU8[HEAP32[$2 + 152 >> 2] + 53 | 0] << 16 | HEAPU8[HEAP32[$2 + 152 >> 2] + 54 | 0] << 8);
 HEAP32[$2 + 120 >> 2] = HEAPU8[HEAP32[$2 + 152 >> 2] + 59 | 0] | (HEAPU8[HEAP32[$2 + 152 >> 2] + 56 | 0] << 24 | HEAPU8[HEAP32[$2 + 152 >> 2] + 57 | 0] << 16 | HEAPU8[HEAP32[$2 + 152 >> 2] + 58 | 0] << 8);
 HEAP32[$2 + 124 >> 2] = HEAPU8[HEAP32[$2 + 152 >> 2] + 63 | 0] | (HEAPU8[HEAP32[$2 + 152 >> 2] + 60 | 0] << 24 | HEAPU8[HEAP32[$2 + 152 >> 2] + 61 | 0] << 16 | HEAPU8[HEAP32[$2 + 152 >> 2] + 62 | 0] << 8);
 HEAP32[$2 + 148 >> 2] = 0;
 while (1) {
  if (HEAPU32[$2 + 148 >> 2] < 5) {
   HEAP32[($2 + 32 | 0) + (HEAP32[$2 + 148 >> 2] << 2) >> 2] = HEAP32[(HEAP32[$2 + 156 >> 2] + 8 | 0) + (HEAP32[$2 + 148 >> 2] << 2) >> 2];
   HEAP32[$2 + 148 >> 2] = HEAP32[$2 + 148 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$2 + 148 >> 2] = 0;
 while (1) {
  if (HEAPU32[$2 + 148 >> 2] < 20) {
   HEAP32[$2 + 28 >> 2] = HEAPU32[$2 + 148 >> 2] % 5;
   label$5: {
    if (HEAPU32[$2 + 148 >> 2] < 16) {
     HEAP32[$2 + 24 >> 2] = HEAP32[($2 - -64 | 0) + (HEAP32[$2 + 148 >> 2] << 2) >> 2];
     break label$5;
    }
    HEAP32[$2 + 24 >> 2] = mbedtls_sha1_processR($2 - -64 | 0, HEAP32[$2 + 148 >> 2]);
   }
   $0 = ((0 - HEAP32[$2 + 28 >> 2] << 2) + $2 | 0) + 48 | 0;
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + (HEAP32[$2 + 24 >> 2] + (((HEAP32[($2 + 32 | 0) + ((5 - HEAP32[$2 + 28 >> 2] >>> 0) % 5 << 2) >> 2] << 5 | HEAP32[($2 + 32 | 0) + ((5 - HEAP32[$2 + 28 >> 2] >>> 0) % 5 << 2) >> 2] >>> 27) + (HEAP32[($2 + 32 | 0) + ((8 - HEAP32[$2 + 28 >> 2] >>> 0) % 5 << 2) >> 2] ^ HEAP32[($2 + 32 | 0) + ((6 - HEAP32[$2 + 28 >> 2] >>> 0) % 5 << 2) >> 2] & (HEAP32[($2 + 32 | 0) + ((7 - HEAP32[$2 + 28 >> 2] >>> 0) % 5 << 2) >> 2] ^ HEAP32[($2 + 32 | 0) + ((8 - HEAP32[$2 + 28 >> 2] >>> 0) % 5 << 2) >> 2])) | 0) + 1518500249 | 0) | 0);
   HEAP32[($2 + 32 | 0) + ((6 - HEAP32[$2 + 28 >> 2] >>> 0) % 5 << 2) >> 2] = HEAP32[($2 + 32 | 0) + ((6 - HEAP32[$2 + 28 >> 2] >>> 0) % 5 << 2) >> 2] << 30 | HEAP32[($2 + 32 | 0) + ((6 - HEAP32[$2 + 28 >> 2] >>> 0) % 5 << 2) >> 2] >>> 2;
   HEAP32[$2 + 148 >> 2] = HEAP32[$2 + 148 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$2 + 148 >> 2] = 20;
 while (1) {
  if (HEAPU32[$2 + 148 >> 2] < 40) {
   HEAP32[$2 + 20 >> 2] = HEAPU32[$2 + 148 >> 2] % 5;
   $1 = ((HEAP32[($2 + 32 | 0) + ((5 - HEAP32[$2 + 20 >> 2] >>> 0) % 5 << 2) >> 2] << 5 | HEAP32[($2 + 32 | 0) + ((5 - HEAP32[$2 + 20 >> 2] >>> 0) % 5 << 2) >> 2] >>> 27) + (HEAP32[($2 + 32 | 0) + ((8 - HEAP32[$2 + 20 >> 2] >>> 0) % 5 << 2) >> 2] ^ (HEAP32[($2 + 32 | 0) + ((6 - HEAP32[$2 + 20 >> 2] >>> 0) % 5 << 2) >> 2] ^ HEAP32[($2 + 32 | 0) + ((7 - HEAP32[$2 + 20 >> 2] >>> 0) % 5 << 2) >> 2])) | 0) + 1859775393 | 0;
   $3 = mbedtls_sha1_processR($2 - -64 | 0, HEAP32[$2 + 148 >> 2]);
   $0 = ((0 - HEAP32[$2 + 20 >> 2] << 2) + $2 | 0) + 48 | 0;
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + ($1 + $3 | 0);
   HEAP32[($2 + 32 | 0) + ((6 - HEAP32[$2 + 20 >> 2] >>> 0) % 5 << 2) >> 2] = HEAP32[($2 + 32 | 0) + ((6 - HEAP32[$2 + 20 >> 2] >>> 0) % 5 << 2) >> 2] << 30 | HEAP32[($2 + 32 | 0) + ((6 - HEAP32[$2 + 20 >> 2] >>> 0) % 5 << 2) >> 2] >>> 2;
   HEAP32[$2 + 148 >> 2] = HEAP32[$2 + 148 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$2 + 148 >> 2] = 40;
 while (1) {
  if (HEAPU32[$2 + 148 >> 2] < 60) {
   HEAP32[$2 + 16 >> 2] = HEAPU32[$2 + 148 >> 2] % 5;
   $1 = ((HEAP32[($2 + 32 | 0) + ((5 - HEAP32[$2 + 16 >> 2] >>> 0) % 5 << 2) >> 2] << 5 | HEAP32[($2 + 32 | 0) + ((5 - HEAP32[$2 + 16 >> 2] >>> 0) % 5 << 2) >> 2] >>> 27) + (HEAP32[($2 + 32 | 0) + ((6 - HEAP32[$2 + 16 >> 2] >>> 0) % 5 << 2) >> 2] & HEAP32[($2 + 32 | 0) + ((7 - HEAP32[$2 + 16 >> 2] >>> 0) % 5 << 2) >> 2] | HEAP32[($2 + 32 | 0) + ((8 - HEAP32[$2 + 16 >> 2] >>> 0) % 5 << 2) >> 2] & (HEAP32[($2 + 32 | 0) + ((6 - HEAP32[$2 + 16 >> 2] >>> 0) % 5 << 2) >> 2] | HEAP32[($2 + 32 | 0) + ((7 - HEAP32[$2 + 16 >> 2] >>> 0) % 5 << 2) >> 2])) | 0) - 1894007588 | 0;
   $3 = mbedtls_sha1_processR($2 - -64 | 0, HEAP32[$2 + 148 >> 2]);
   $0 = ((0 - HEAP32[$2 + 16 >> 2] << 2) + $2 | 0) + 48 | 0;
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + ($1 + $3 | 0);
   HEAP32[($2 + 32 | 0) + ((6 - HEAP32[$2 + 16 >> 2] >>> 0) % 5 << 2) >> 2] = HEAP32[($2 + 32 | 0) + ((6 - HEAP32[$2 + 16 >> 2] >>> 0) % 5 << 2) >> 2] << 30 | HEAP32[($2 + 32 | 0) + ((6 - HEAP32[$2 + 16 >> 2] >>> 0) % 5 << 2) >> 2] >>> 2;
   HEAP32[$2 + 148 >> 2] = HEAP32[$2 + 148 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$2 + 148 >> 2] = 60;
 while (1) {
  if (HEAPU32[$2 + 148 >> 2] < 80) {
   HEAP32[$2 + 12 >> 2] = HEAPU32[$2 + 148 >> 2] % 5;
   $1 = ((HEAP32[($2 + 32 | 0) + ((5 - HEAP32[$2 + 12 >> 2] >>> 0) % 5 << 2) >> 2] << 5 | HEAP32[($2 + 32 | 0) + ((5 - HEAP32[$2 + 12 >> 2] >>> 0) % 5 << 2) >> 2] >>> 27) + (HEAP32[($2 + 32 | 0) + ((8 - HEAP32[$2 + 12 >> 2] >>> 0) % 5 << 2) >> 2] ^ (HEAP32[($2 + 32 | 0) + ((6 - HEAP32[$2 + 12 >> 2] >>> 0) % 5 << 2) >> 2] ^ HEAP32[($2 + 32 | 0) + ((7 - HEAP32[$2 + 12 >> 2] >>> 0) % 5 << 2) >> 2])) | 0) - 899497514 | 0;
   $3 = mbedtls_sha1_processR($2 - -64 | 0, HEAP32[$2 + 148 >> 2]);
   $0 = ((0 - HEAP32[$2 + 12 >> 2] << 2) + $2 | 0) + 48 | 0;
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + ($1 + $3 | 0);
   HEAP32[($2 + 32 | 0) + ((6 - HEAP32[$2 + 12 >> 2] >>> 0) % 5 << 2) >> 2] = HEAP32[($2 + 32 | 0) + ((6 - HEAP32[$2 + 12 >> 2] >>> 0) % 5 << 2) >> 2] << 30 | HEAP32[($2 + 32 | 0) + ((6 - HEAP32[$2 + 12 >> 2] >>> 0) % 5 << 2) >> 2] >>> 2;
   HEAP32[$2 + 148 >> 2] = HEAP32[$2 + 148 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$2 + 148 >> 2] = 0;
 while (1) {
  if (HEAPU32[$2 + 148 >> 2] < 5) {
   $0 = (HEAP32[$2 + 156 >> 2] + 8 | 0) + (HEAP32[$2 + 148 >> 2] << 2) | 0;
   HEAP32[$0 >> 2] = HEAP32[($2 + 32 | 0) + (HEAP32[$2 + 148 >> 2] << 2) >> 2] + HEAP32[$0 >> 2];
   HEAP32[$2 + 148 >> 2] = HEAP32[$2 + 148 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $2 + 160 | 0;
}

function tflite__reference_integer_ops__DepthwiseConvPerChannel_28tflite__DepthwiseParams_20const__2c_20int_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 var $11 = 0;
 $11 = __stack_pointer - 192 | 0;
 __stack_pointer = $11;
 HEAP32[$11 + 188 >> 2] = $0;
 HEAP32[$11 + 184 >> 2] = $1;
 HEAP32[$11 + 180 >> 2] = $2;
 HEAP32[$11 + 176 >> 2] = $3;
 HEAP32[$11 + 172 >> 2] = $4;
 HEAP32[$11 + 168 >> 2] = $5;
 HEAP32[$11 + 164 >> 2] = $6;
 HEAP32[$11 + 160 >> 2] = $7;
 HEAP32[$11 + 156 >> 2] = $8;
 HEAP32[$11 + 152 >> 2] = $9;
 HEAP32[$11 + 148 >> 2] = $10;
 HEAP32[$11 + 144 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 10 >> 1];
 HEAP32[$11 + 140 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 12 >> 1];
 HEAP32[$11 + 136 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 14 >> 1];
 HEAP32[$11 + 132 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 16 >> 1];
 HEAP32[$11 + 128 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 2 >> 1];
 HEAP32[$11 + 124 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 4 >> 1];
 HEAP32[$11 + 120 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 18 >> 1];
 HEAP32[$11 + 116 >> 2] = HEAP32[HEAP32[$11 + 188 >> 2] + 20 >> 2];
 HEAP32[$11 + 112 >> 2] = HEAP32[HEAP32[$11 + 188 >> 2] + 28 >> 2];
 HEAP32[$11 + 108 >> 2] = HEAP32[HEAP32[$11 + 188 >> 2] + 40 >> 2];
 HEAP32[$11 + 104 >> 2] = HEAP32[HEAP32[$11 + 188 >> 2] + 44 >> 2];
 label$1: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$11 + 176 >> 2]) | 0) != 4) {
   break label$1;
  }
 }
 label$2: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$11 + 168 >> 2]) | 0) != 4) {
   break label$2;
  }
 }
 label$3: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$11 + 152 >> 2]) | 0) != 4) {
   break label$3;
  }
 }
 label$4: {
  if (HEAP32[$11 + 108 >> 2] > HEAP32[$11 + 104 >> 2]) {
   break label$4;
  }
 }
 HEAP32[$11 + 100 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$11 + 176 >> 2], 0, HEAP32[$11 + 152 >> 2], 0);
 HEAP32[$11 + 96 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$11 + 168 >> 2], 3, HEAP32[$11 + 152 >> 2], 3);
 HEAP32[$11 + 92 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 176 >> 2], 1);
 HEAP32[$11 + 88 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 176 >> 2], 2);
 HEAP32[$11 + 84 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 176 >> 2], 3);
 HEAP32[$11 + 80 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 168 >> 2], 1);
 HEAP32[$11 + 76 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 168 >> 2], 2);
 HEAP32[$11 + 72 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 152 >> 2], 1);
 HEAP32[$11 + 68 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 152 >> 2], 2);
 label$5: {
  if (HEAP32[$11 + 96 >> 2] != (Math_imul(HEAP32[$11 + 84 >> 2], HEAP32[$11 + 120 >> 2]) | 0)) {
   break label$5;
  }
 }
 label$6: {
  if ((tflite__RuntimeShape__FlatSize_28_29_20const(HEAP32[$11 + 160 >> 2]) | 0) != HEAP32[$11 + 96 >> 2]) {
   break label$6;
  }
 }
 HEAP32[$11 + 64 >> 2] = 0;
 while (1) {
  if (HEAP32[$11 + 64 >> 2] < HEAP32[$11 + 100 >> 2]) {
   HEAP32[$11 + 60 >> 2] = 0;
   while (1) {
    if (HEAP32[$11 + 60 >> 2] < HEAP32[$11 + 72 >> 2]) {
     HEAP32[$11 + 56 >> 2] = 0;
     while (1) {
      if (HEAP32[$11 + 56 >> 2] < HEAP32[$11 + 68 >> 2]) {
       HEAP32[$11 + 52 >> 2] = 0;
       while (1) {
        if (HEAP32[$11 + 52 >> 2] < HEAP32[$11 + 84 >> 2]) {
         HEAP32[$11 + 48 >> 2] = 0;
         while (1) {
          if (HEAP32[$11 + 48 >> 2] < HEAP32[$11 + 120 >> 2]) {
           HEAP32[$11 + 44 >> 2] = HEAP32[$11 + 48 >> 2] + Math_imul(HEAP32[$11 + 52 >> 2], HEAP32[$11 + 120 >> 2]);
           HEAP32[$11 + 40 >> 2] = Math_imul(HEAP32[$11 + 56 >> 2], HEAP32[$11 + 144 >> 2]) - HEAP32[$11 + 128 >> 2];
           HEAP32[$11 + 36 >> 2] = Math_imul(HEAP32[$11 + 60 >> 2], HEAP32[$11 + 140 >> 2]) - HEAP32[$11 + 124 >> 2];
           HEAP32[$11 + 32 >> 2] = 0;
           HEAP32[$11 + 28 >> 2] = 0;
           while (1) {
            if (HEAP32[$11 + 28 >> 2] < HEAP32[$11 + 80 >> 2]) {
             HEAP32[$11 + 24 >> 2] = 0;
             while (1) {
              if (HEAP32[$11 + 24 >> 2] < HEAP32[$11 + 76 >> 2]) {
               HEAP32[$11 + 20 >> 2] = HEAP32[$11 + 40 >> 2] + Math_imul(HEAP32[$11 + 136 >> 2], HEAP32[$11 + 24 >> 2]);
               HEAP32[$11 + 16 >> 2] = HEAP32[$11 + 36 >> 2] + Math_imul(HEAP32[$11 + 132 >> 2], HEAP32[$11 + 28 >> 2]);
               $0 = 0;
               label$21: {
                if (HEAP32[$11 + 20 >> 2] < 0) {
                 break label$21;
                }
                $0 = 0;
                if (HEAP32[$11 + 20 >> 2] >= HEAP32[$11 + 88 >> 2]) {
                 break label$21;
                }
                $0 = 0;
                if (HEAP32[$11 + 16 >> 2] < 0) {
                 break label$21;
                }
                $0 = HEAP32[$11 + 16 >> 2] < HEAP32[$11 + 92 >> 2];
               }
               HEAP8[$11 + 15 | 0] = $0;
               if (HEAP8[$11 + 15 | 0] & 1) {
                HEAP32[$11 + 8 >> 2] = HEAP8[HEAP32[$11 + 172 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$11 + 176 >> 2], HEAP32[$11 + 64 >> 2], HEAP32[$11 + 16 >> 2], HEAP32[$11 + 20 >> 2], HEAP32[$11 + 52 >> 2]) | 0];
                HEAP32[$11 + 4 >> 2] = HEAP8[HEAP32[$11 + 164 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$11 + 168 >> 2], 0, HEAP32[$11 + 28 >> 2], HEAP32[$11 + 24 >> 2], HEAP32[$11 + 44 >> 2]) | 0];
                HEAP32[$11 + 32 >> 2] = HEAP32[$11 + 32 >> 2] + Math_imul(HEAP32[$11 + 4 >> 2], HEAP32[$11 + 8 >> 2] + HEAP32[$11 + 116 >> 2] | 0);
               }
               HEAP32[$11 + 24 >> 2] = HEAP32[$11 + 24 >> 2] + 1;
               continue;
              }
              break;
             }
             HEAP32[$11 + 28 >> 2] = HEAP32[$11 + 28 >> 2] + 1;
             continue;
            }
            break;
           }
           if (HEAP32[$11 + 156 >> 2]) {
            HEAP32[$11 + 32 >> 2] = HEAP32[HEAP32[$11 + 156 >> 2] + (HEAP32[$11 + 44 >> 2] << 2) >> 2] + HEAP32[$11 + 32 >> 2];
           }
           HEAP32[$11 + 32 >> 2] = tflite__MultiplyByQuantizedMultiplier_28int_2c_20int_2c_20int_29(HEAP32[$11 + 32 >> 2], HEAP32[HEAP32[$11 + 184 >> 2] + (HEAP32[$11 + 44 >> 2] << 2) >> 2], HEAP32[HEAP32[$11 + 180 >> 2] + (HEAP32[$11 + 44 >> 2] << 2) >> 2]);
           HEAP32[$11 + 32 >> 2] = HEAP32[$11 + 112 >> 2] + HEAP32[$11 + 32 >> 2];
           HEAP32[$11 + 32 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($11 + 32 | 0, $11 + 108 | 0) >> 2];
           HEAP32[$11 + 32 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($11 + 32 | 0, $11 + 104 | 0) >> 2];
           $0 = HEAP32[$11 + 32 >> 2];
           HEAP8[HEAP32[$11 + 148 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$11 + 152 >> 2], HEAP32[$11 + 64 >> 2], HEAP32[$11 + 60 >> 2], HEAP32[$11 + 56 >> 2], HEAP32[$11 + 44 >> 2]) | 0] = $0;
           HEAP32[$11 + 48 >> 2] = HEAP32[$11 + 48 >> 2] + 1;
           continue;
          }
          break;
         }
         HEAP32[$11 + 52 >> 2] = HEAP32[$11 + 52 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$11 + 56 >> 2] = HEAP32[$11 + 56 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$11 + 60 >> 2] = HEAP32[$11 + 60 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$11 + 64 >> 2] = HEAP32[$11 + 64 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $11 + 192 | 0;
}

function tflite__reference_integer_ops__ConvPerChannel_28tflite__ConvParams_20const__2c_20int_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 var $11 = 0;
 $11 = __stack_pointer - 192 | 0;
 __stack_pointer = $11;
 HEAP32[$11 + 188 >> 2] = $0;
 HEAP32[$11 + 184 >> 2] = $1;
 HEAP32[$11 + 180 >> 2] = $2;
 HEAP32[$11 + 176 >> 2] = $3;
 HEAP32[$11 + 172 >> 2] = $4;
 HEAP32[$11 + 168 >> 2] = $5;
 HEAP32[$11 + 164 >> 2] = $6;
 HEAP32[$11 + 160 >> 2] = $7;
 HEAP32[$11 + 156 >> 2] = $8;
 HEAP32[$11 + 152 >> 2] = $9;
 HEAP32[$11 + 148 >> 2] = $10;
 HEAP32[$11 + 144 >> 2] = HEAP32[HEAP32[$11 + 188 >> 2] + 20 >> 2];
 HEAP32[$11 + 140 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 10 >> 1];
 HEAP32[$11 + 136 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 12 >> 1];
 HEAP32[$11 + 132 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 14 >> 1];
 HEAP32[$11 + 128 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 16 >> 1];
 HEAP32[$11 + 124 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 2 >> 1];
 HEAP32[$11 + 120 >> 2] = HEAP16[HEAP32[$11 + 188 >> 2] + 4 >> 1];
 HEAP32[$11 + 116 >> 2] = HEAP32[HEAP32[$11 + 188 >> 2] + 28 >> 2];
 HEAP32[$11 + 112 >> 2] = HEAP32[HEAP32[$11 + 188 >> 2] + 40 >> 2];
 HEAP32[$11 + 108 >> 2] = HEAP32[HEAP32[$11 + 188 >> 2] + 44 >> 2];
 label$1: {
  if (HEAP32[$11 + 112 >> 2] > HEAP32[$11 + 108 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$11 + 176 >> 2]) | 0) != 4) {
   break label$2;
  }
 }
 label$3: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$11 + 168 >> 2]) | 0) != 4) {
   break label$3;
  }
 }
 label$4: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$11 + 152 >> 2]) | 0) != 4) {
   break label$4;
  }
 }
 HEAP32[$11 + 104 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$11 + 176 >> 2], 0, HEAP32[$11 + 152 >> 2], 0);
 HEAP32[$11 + 100 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$11 + 176 >> 2], 3, HEAP32[$11 + 168 >> 2], 3);
 HEAP32[$11 + 96 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$11 + 168 >> 2], 0, HEAP32[$11 + 152 >> 2], 3);
 if (HEAP32[$11 + 156 >> 2]) {
  label$6: {
   if ((tflite__RuntimeShape__FlatSize_28_29_20const(HEAP32[$11 + 160 >> 2]) | 0) != HEAP32[$11 + 96 >> 2]) {
    break label$6;
   }
  }
 }
 HEAP32[$11 + 92 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 176 >> 2], 1);
 HEAP32[$11 + 88 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 176 >> 2], 2);
 HEAP32[$11 + 84 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 168 >> 2], 1);
 HEAP32[$11 + 80 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 168 >> 2], 2);
 HEAP32[$11 + 76 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 152 >> 2], 1);
 HEAP32[$11 + 72 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 152 >> 2], 2);
 HEAP32[$11 + 68 >> 2] = 0;
 while (1) {
  if (HEAP32[$11 + 68 >> 2] < HEAP32[$11 + 104 >> 2]) {
   HEAP32[$11 + 64 >> 2] = 0;
   while (1) {
    if (HEAP32[$11 + 64 >> 2] < HEAP32[$11 + 76 >> 2]) {
     HEAP32[$11 + 60 >> 2] = 0;
     while (1) {
      if (HEAP32[$11 + 60 >> 2] < HEAP32[$11 + 72 >> 2]) {
       HEAP32[$11 + 56 >> 2] = 0;
       while (1) {
        if (HEAP32[$11 + 56 >> 2] < HEAP32[$11 + 96 >> 2]) {
         HEAP32[$11 + 52 >> 2] = Math_imul(HEAP32[$11 + 60 >> 2], HEAP32[$11 + 140 >> 2]) - HEAP32[$11 + 124 >> 2];
         HEAP32[$11 + 48 >> 2] = Math_imul(HEAP32[$11 + 64 >> 2], HEAP32[$11 + 136 >> 2]) - HEAP32[$11 + 120 >> 2];
         HEAP32[$11 + 44 >> 2] = 0;
         HEAP32[$11 + 40 >> 2] = 0;
         while (1) {
          if (HEAP32[$11 + 40 >> 2] < HEAP32[$11 + 84 >> 2]) {
           HEAP32[$11 + 36 >> 2] = 0;
           while (1) {
            if (HEAP32[$11 + 36 >> 2] < HEAP32[$11 + 80 >> 2]) {
             HEAP32[$11 + 32 >> 2] = 0;
             while (1) {
              if (HEAP32[$11 + 32 >> 2] < HEAP32[$11 + 100 >> 2]) {
               HEAP32[$11 + 28 >> 2] = HEAP32[$11 + 52 >> 2] + Math_imul(HEAP32[$11 + 132 >> 2], HEAP32[$11 + 36 >> 2]);
               HEAP32[$11 + 24 >> 2] = HEAP32[$11 + 48 >> 2] + Math_imul(HEAP32[$11 + 128 >> 2], HEAP32[$11 + 40 >> 2]);
               $0 = 0;
               label$21: {
                if (HEAP32[$11 + 28 >> 2] < 0) {
                 break label$21;
                }
                $0 = 0;
                if (HEAP32[$11 + 28 >> 2] >= HEAP32[$11 + 88 >> 2]) {
                 break label$21;
                }
                $0 = 0;
                if (HEAP32[$11 + 24 >> 2] < 0) {
                 break label$21;
                }
                $0 = HEAP32[$11 + 24 >> 2] < HEAP32[$11 + 92 >> 2];
               }
               HEAP8[$11 + 23 | 0] = $0;
               if (HEAP8[$11 + 23 | 0] & 1) {
                HEAP32[$11 + 16 >> 2] = HEAP8[HEAP32[$11 + 172 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$11 + 176 >> 2], HEAP32[$11 + 68 >> 2], HEAP32[$11 + 24 >> 2], HEAP32[$11 + 28 >> 2], HEAP32[$11 + 32 >> 2]) | 0];
                HEAP32[$11 + 12 >> 2] = HEAP8[HEAP32[$11 + 164 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$11 + 168 >> 2], HEAP32[$11 + 56 >> 2], HEAP32[$11 + 40 >> 2], HEAP32[$11 + 36 >> 2], HEAP32[$11 + 32 >> 2]) | 0];
                HEAP32[$11 + 44 >> 2] = HEAP32[$11 + 44 >> 2] + Math_imul(HEAP32[$11 + 12 >> 2], HEAP32[$11 + 16 >> 2] + HEAP32[$11 + 144 >> 2] | 0);
               }
               HEAP32[$11 + 32 >> 2] = HEAP32[$11 + 32 >> 2] + 1;
               continue;
              }
              break;
             }
             HEAP32[$11 + 36 >> 2] = HEAP32[$11 + 36 >> 2] + 1;
             continue;
            }
            break;
           }
           HEAP32[$11 + 40 >> 2] = HEAP32[$11 + 40 >> 2] + 1;
           continue;
          }
          break;
         }
         if (HEAP32[$11 + 156 >> 2]) {
          HEAP32[$11 + 44 >> 2] = HEAP32[HEAP32[$11 + 156 >> 2] + (HEAP32[$11 + 56 >> 2] << 2) >> 2] + HEAP32[$11 + 44 >> 2];
         }
         HEAP32[$11 + 44 >> 2] = tflite__MultiplyByQuantizedMultiplier_28int_2c_20int_2c_20int_29(HEAP32[$11 + 44 >> 2], HEAP32[HEAP32[$11 + 184 >> 2] + (HEAP32[$11 + 56 >> 2] << 2) >> 2], HEAP32[HEAP32[$11 + 180 >> 2] + (HEAP32[$11 + 56 >> 2] << 2) >> 2]);
         HEAP32[$11 + 44 >> 2] = HEAP32[$11 + 116 >> 2] + HEAP32[$11 + 44 >> 2];
         HEAP32[$11 + 44 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($11 + 44 | 0, $11 + 112 | 0) >> 2];
         HEAP32[$11 + 44 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($11 + 44 | 0, $11 + 108 | 0) >> 2];
         $0 = HEAP32[$11 + 44 >> 2];
         HEAP8[HEAP32[$11 + 148 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$11 + 152 >> 2], HEAP32[$11 + 68 >> 2], HEAP32[$11 + 64 >> 2], HEAP32[$11 + 60 >> 2], HEAP32[$11 + 56 >> 2]) | 0] = $0;
         HEAP32[$11 + 56 >> 2] = HEAP32[$11 + 56 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$11 + 60 >> 2] = HEAP32[$11 + 60 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$11 + 64 >> 2] = HEAP32[$11 + 64 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$11 + 68 >> 2] = HEAP32[$11 + 68 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $11 + 192 | 0;
}

function tflite__internal__InitializeTfLiteTensorFromFlatbuffer_28tflite__SimpleMemoryAllocator__2c_20bool_2c_20tflite__Tensor_20const__2c_20flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer___20const__2c_20tflite__ErrorReporter__2c_20TfLiteTensor__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0;
 $6 = __stack_pointer - 128 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 120 >> 2] = $0;
 HEAP8[$6 + 119 | 0] = $1;
 HEAP32[$6 + 112 >> 2] = $2;
 HEAP32[$6 + 108 >> 2] = $3;
 HEAP32[$6 + 104 >> 2] = $4;
 HEAP32[$6 + 100 >> 2] = $5;
 label$1: {
  if (!HEAP32[$6 + 100 >> 2]) {
   break label$1;
  }
 }
 HEAP32[$6 + 88 >> 2] = 0;
 HEAP32[$6 + 92 >> 2] = 0;
 HEAP32[$6 + 80 >> 2] = 0;
 HEAP32[$6 + 84 >> 2] = 0;
 HEAP32[$6 + 72 >> 2] = 0;
 HEAP32[$6 + 76 >> 2] = 0;
 HEAP32[$6 + 64 >> 2] = 0;
 HEAP32[$6 + 68 >> 2] = 0;
 HEAP32[$6 + 56 >> 2] = 0;
 HEAP32[$6 + 60 >> 2] = 0;
 $1 = HEAP32[$6 + 60 >> 2];
 $0 = HEAP32[$6 + 56 >> 2];
 $3 = $0;
 $2 = HEAP32[$6 + 100 >> 2];
 $0 = $2;
 HEAP32[$0 >> 2] = $3;
 HEAP32[$0 + 4 >> 2] = $1;
 $0 = HEAP32[$6 + 92 >> 2];
 $1 = HEAP32[$6 + 88 >> 2];
 $3 = $1;
 $1 = $2;
 HEAP32[$1 + 32 >> 2] = $3;
 HEAP32[$1 + 36 >> 2] = $0;
 $1 = HEAP32[$6 + 84 >> 2];
 $0 = HEAP32[$6 + 80 >> 2];
 $3 = $0;
 $0 = $2;
 HEAP32[$0 + 24 >> 2] = $3;
 HEAP32[$0 + 28 >> 2] = $1;
 $0 = HEAP32[$6 + 76 >> 2];
 $1 = HEAP32[$6 + 72 >> 2];
 $3 = $1;
 $1 = $2;
 HEAP32[$1 + 16 >> 2] = $3;
 HEAP32[$1 + 20 >> 2] = $0;
 $1 = HEAP32[$6 + 68 >> 2];
 $0 = HEAP32[$6 + 64 >> 2];
 $3 = $0;
 $0 = $2;
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $1;
 HEAP32[$6 + 52 >> 2] = tflite__ConvertTensorType_28tflite__TensorType_2c_20TfLiteType__2c_20tflite__ErrorReporter__29(tflite__Tensor__type_28_29_20const(HEAP32[$6 + 112 >> 2]), HEAP32[$6 + 100 >> 2] + 28 | 0, HEAP32[$6 + 104 >> 2]);
 label$2: {
  if (HEAP32[$6 + 52 >> 2]) {
   HEAP32[$6 + 124 >> 2] = HEAP32[$6 + 52 >> 2];
   break label$2;
  }
  $0 = tflite__Tensor__is_variable_28_29_20const(HEAP32[$6 + 112 >> 2]);
  HEAP8[HEAP32[$6 + 100 >> 2] + 36 | 0] = $0 & 1;
  $0 = tflite__internal__GetFlatbufferTensorBuffer_28tflite__Tensor_20const__2c_20flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer___20const__29(HEAP32[$6 + 112 >> 2], HEAP32[$6 + 108 >> 2]);
  HEAP32[HEAP32[$6 + 100 >> 2] + 16 >> 2] = $0;
  label$4: {
   if (!HEAP32[HEAP32[$6 + 100 >> 2] + 16 >> 2]) {
    HEAP32[HEAP32[$6 + 100 >> 2] + 32 >> 2] = 2;
    break label$4;
   }
   HEAP32[HEAP32[$6 + 100 >> 2] + 32 >> 2] = 1;
  }
  HEAP32[$6 + 44 >> 2] = tflite__BytesRequiredForTensor_28tflite__Tensor_20const__2c_20unsigned_20long__2c_20unsigned_20long__2c_20tflite__ErrorReporter__29(HEAP32[$6 + 112 >> 2], HEAP32[$6 + 100 >> 2] + 24 | 0, $6 + 48 | 0, HEAP32[$6 + 104 >> 2]);
  if (HEAP32[$6 + 44 >> 2]) {
   HEAP32[$6 + 124 >> 2] = HEAP32[$6 + 44 >> 2];
   break label$2;
  }
  label$7: {
   if (!tflite__Tensor__shape_28_29_20const(HEAP32[$6 + 112 >> 2])) {
    HEAP32[HEAP32[$6 + 100 >> 2] + 20 >> 2] = 172640;
    break label$7;
   }
   HEAP32[$6 + 40 >> 2] = TfLiteStatus_20tflite__internal__FlatBufferVectorToTfLiteTypeArray_int_2c_20TfLiteIntArray__28tflite__SimpleMemoryAllocator__2c_20tflite__ErrorReporter__2c_20flatbuffers__Vector_int__20const__2c_20TfLiteIntArray___29(HEAP32[$6 + 120 >> 2], HEAP32[$6 + 104 >> 2], tflite__Tensor__shape_28_29_20const(HEAP32[$6 + 112 >> 2]), HEAP32[$6 + 100 >> 2] + 20 | 0);
   if (HEAP32[$6 + 40 >> 2]) {
    HEAP32[$6 + 124 >> 2] = HEAP32[$6 + 40 >> 2];
    break label$2;
   }
  }
  HEAP32[$6 + 36 >> 2] = tflite__Tensor__quantization_28_29_20const(HEAP32[$6 + 112 >> 2]);
  label$10: {
   if (!HEAP32[$6 + 36 >> 2]) {
    break label$10;
   }
   if (!tflite__QuantizationParameters__scale_28_29_20const(HEAP32[$6 + 36 >> 2])) {
    break label$10;
   }
   if (!flatbuffers__Vector_float___size_28_29_20const(tflite__QuantizationParameters__scale_28_29_20const(HEAP32[$6 + 36 >> 2]))) {
    break label$10;
   }
   if (!tflite__QuantizationParameters__zero_point_28_29_20const(HEAP32[$6 + 36 >> 2])) {
    break label$10;
   }
   if (!flatbuffers__Vector_long_20long___size_28_29_20const(tflite__QuantizationParameters__zero_point_28_29_20const(HEAP32[$6 + 36 >> 2]))) {
    break label$10;
   }
   $7 = flatbuffers__Vector_float___Get_28unsigned_20int_29_20const(tflite__QuantizationParameters__scale_28_29_20const(HEAP32[$6 + 36 >> 2]), 0);
   HEAPF32[HEAP32[$6 + 100 >> 2] + 8 >> 2] = $7;
   $1 = flatbuffers__Vector_long_20long___Get_28unsigned_20int_29_20const(tflite__QuantizationParameters__zero_point_28_29_20const(HEAP32[$6 + 36 >> 2]), 0);
   HEAP32[HEAP32[$6 + 100 >> 2] + 12 >> 2] = $1;
   HEAP32[$6 + 32 >> 2] = flatbuffers__Vector_float___size_28_29_20const(tflite__QuantizationParameters__scale_28_29_20const(HEAP32[$6 + 36 >> 2]));
   label$11: {
    if (HEAP8[$6 + 119 | 0] & 1) {
     $0 = HEAP32[$6 + 120 >> 2];
     $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, 12, 4) | 0;
     break label$11;
    }
    $0 = HEAP32[$6 + 120 >> 2];
    $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, 12, 4) | 0;
   }
   HEAP32[$6 + 28 >> 2] = $0;
   if (!HEAP32[$6 + 28 >> 2]) {
    tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$6 + 104 >> 2], 146161, 0);
    HEAP32[$6 + 124 >> 2] = 1;
    break label$2;
   }
   label$14: {
    if (HEAP8[$6 + 119 | 0] & 1) {
     $0 = HEAP32[$6 + 120 >> 2];
     $0 = (wasm2js_i32$1 = $0, wasm2js_i32$2 = TfLiteIntArrayGetSizeInBytes(HEAP32[$6 + 32 >> 2]), 
     wasm2js_i32$3 = 4, wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] + 16 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
     break label$14;
    }
    $0 = HEAP32[$6 + 120 >> 2];
    $0 = (wasm2js_i32$3 = $0, wasm2js_i32$2 = TfLiteIntArrayGetSizeInBytes(HEAP32[$6 + 32 >> 2]), 
    wasm2js_i32$1 = 4, wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] + 12 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0) | 0);
   }
   HEAP32[HEAP32[$6 + 28 >> 2] + 4 >> 2] = $0;
   if (!HEAP32[HEAP32[$6 + 28 >> 2] + 4 >> 2]) {
    tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$6 + 104 >> 2], 145980, 0);
    HEAP32[$6 + 124 >> 2] = 1;
    break label$2;
   }
   HEAP32[$6 + 24 >> 2] = TfLiteStatus_20tflite__internal__FlatBufferVectorToTfLiteTypeArray_float_2c_20TfLiteFloatArray__28tflite__SimpleMemoryAllocator__2c_20tflite__ErrorReporter__2c_20flatbuffers__Vector_float__20const__2c_20TfLiteFloatArray___29(HEAP32[$6 + 120 >> 2], HEAP32[$6 + 104 >> 2], tflite__QuantizationParameters__scale_28_29_20const(HEAP32[$6 + 36 >> 2]), HEAP32[$6 + 28 >> 2]);
   if (HEAP32[$6 + 24 >> 2]) {
    HEAP32[$6 + 124 >> 2] = HEAP32[$6 + 24 >> 2];
    break label$2;
   }
   HEAP32[HEAP32[HEAP32[$6 + 28 >> 2] + 4 >> 2] >> 2] = HEAP32[$6 + 32 >> 2];
   HEAP32[$6 + 20 >> 2] = HEAP32[HEAP32[$6 + 28 >> 2] + 4 >> 2] + 4;
   HEAP32[$6 + 16 >> 2] = 0;
   while (1) {
    if (HEAP32[$6 + 16 >> 2] < HEAP32[$6 + 32 >> 2]) {
     $0 = flatbuffers__Vector_long_20long___Get_28unsigned_20int_29_20const(tflite__QuantizationParameters__zero_point_28_29_20const(HEAP32[$6 + 36 >> 2]), HEAP32[$6 + 16 >> 2]);
     HEAP32[HEAP32[$6 + 20 >> 2] + (HEAP32[$6 + 16 >> 2] << 2) >> 2] = $0;
     HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 16 >> 2] + 1;
     continue;
    }
    break;
   }
   $0 = tflite__QuantizationParameters__quantized_dimension_28_29_20const(HEAP32[$6 + 36 >> 2]);
   HEAP32[HEAP32[$6 + 28 >> 2] + 8 >> 2] = $0;
   HEAP32[$6 + 8 >> 2] = 1;
   HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 28 >> 2];
   $0 = HEAP32[$6 + 12 >> 2];
   $1 = HEAP32[$6 + 8 >> 2];
   $2 = $1;
   $1 = HEAP32[$6 + 100 >> 2];
   HEAP32[$1 >> 2] = $2;
   HEAP32[$1 + 4 >> 2] = $0;
  }
  HEAP32[$6 + 124 >> 2] = 0;
 }
 __stack_pointer = $6 + 128 | 0;
 return HEAP32[$6 + 124 >> 2];
}

function tflite__ops__micro__quantize__Eval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 240 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 232 >> 2] = $0;
 HEAP32[$2 + 228 >> 2] = $1;
 label$1: {
  if (!HEAP32[HEAP32[$2 + 228 >> 2] + 8 >> 2]) {
   break label$1;
  }
 }
 HEAP32[$2 + 224 >> 2] = HEAP32[HEAP32[$2 + 228 >> 2] + 8 >> 2];
 HEAP32[$2 + 220 >> 2] = tflite__micro__GetEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 232 >> 2], HEAP32[$2 + 228 >> 2], 0);
 HEAP32[$2 + 216 >> 2] = tflite__micro__GetEvalOutput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 232 >> 2], HEAP32[$2 + 228 >> 2], 0);
 label$2: {
  label$3: {
   if (HEAP32[HEAP32[$2 + 220 >> 2] + 8 >> 2] == 1) {
    label$5: {
     switch (HEAP32[HEAP32[$2 + 216 >> 2] + 8 >> 2] - 3 | 0) {
     case 6:
      $0 = HEAP32[$2 + 224 >> 2];
      tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($2 + 192 | 0, HEAP32[$2 + 220 >> 2]);
      $1 = float_20const__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor_20const__29(HEAP32[$2 + 220 >> 2]);
      tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($2 + 168 | 0, HEAP32[$2 + 216 >> 2]);
      void_20tflite__reference_ops__AffineQuantize_float_2c_20signed_20char__28tflite__QuantizationParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($0, $2 + 192 | 0, $1, $2 + 168 | 0, signed_20char__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor__29(HEAP32[$2 + 216 >> 2]));
      tflite__RuntimeShape___RuntimeShape_28_29($2 + 168 | 0);
      tflite__RuntimeShape___RuntimeShape_28_29($2 + 192 | 0);
      break label$3;

     case 0:
      $0 = HEAP32[$2 + 224 >> 2];
      tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($2 + 144 | 0, HEAP32[$2 + 220 >> 2]);
      $1 = float_20const__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor_20const__29(HEAP32[$2 + 220 >> 2]);
      tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($2 + 120 | 0, HEAP32[$2 + 216 >> 2]);
      void_20tflite__reference_ops__AffineQuantize_float_2c_20unsigned_20char__28tflite__QuantizationParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($0, $2 + 144 | 0, $1, $2 + 120 | 0, unsigned_20char__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor__29(HEAP32[$2 + 216 >> 2]));
      tflite__RuntimeShape___RuntimeShape_28_29($2 + 120 | 0);
      tflite__RuntimeShape___RuntimeShape_28_29($2 + 144 | 0);
      break label$3;

     case 4:
      $0 = HEAP32[$2 + 224 >> 2];
      tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($2 + 96 | 0, HEAP32[$2 + 220 >> 2]);
      $1 = float_20const__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor_20const__29(HEAP32[$2 + 220 >> 2]);
      tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($2 + 72 | 0, HEAP32[$2 + 216 >> 2]);
      void_20tflite__reference_ops__AffineQuantize_float_2c_20short__28tflite__QuantizationParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20short__29($0, $2 + 96 | 0, $1, $2 + 72 | 0, short__20tflite__micro__GetTensorData_short__28TfLiteEvalTensor__29(HEAP32[$2 + 216 >> 2]));
      tflite__RuntimeShape___RuntimeShape_28_29($2 + 72 | 0);
      tflite__RuntimeShape___RuntimeShape_28_29($2 + 96 | 0);
      HEAP32[$2 + 236 >> 2] = 0;
      break label$2;

     default:
      break label$5;
     }
    }
    $0 = HEAP32[HEAP32[$2 + 232 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 232 >> 2];
    $3 = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 220 >> 2] + 8 >> 2]);
    HEAP32[$2 + 4 >> 2] = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 216 >> 2] + 8 >> 2]);
    HEAP32[$2 >> 2] = $3;
    FUNCTION_TABLE[$0 | 0]($1, 127501, $2);
    HEAP32[$2 + 236 >> 2] = 1;
    break label$2;
   }
   label$9: {
    if (HEAP32[HEAP32[$2 + 220 >> 2] + 8 >> 2] == 7) {
     HEAP32[$2 + 68 >> 2] = tflite__ElementCount_28TfLiteIntArray_20const__29(HEAP32[HEAP32[$2 + 220 >> 2] + 4 >> 2]);
     label$11: {
      label$12: {
       switch (HEAP32[HEAP32[$2 + 216 >> 2] + 8 >> 2] - 7 | 0) {
       case 2:
        void_20tflite__reference_ops__Requantize_short_2c_20signed_20char__28short_20const__2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20signed_20char__29(short_20const__20tflite__micro__GetTensorData_short__28TfLiteEvalTensor_20const__29(HEAP32[$2 + 220 >> 2]), HEAP32[$2 + 68 >> 2], HEAP32[HEAP32[$2 + 224 >> 2] + 16 >> 2], HEAP32[HEAP32[$2 + 224 >> 2] + 20 >> 2], HEAP32[HEAP32[$2 + 224 >> 2] + 24 >> 2], HEAP32[HEAP32[$2 + 224 >> 2] >> 2], signed_20char__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor__29(HEAP32[$2 + 216 >> 2]));
        break label$11;

       case 0:
        void_20tflite__reference_ops__Requantize_short_2c_20short__28short_20const__2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20short__29(short_20const__20tflite__micro__GetTensorData_short__28TfLiteEvalTensor_20const__29(HEAP32[$2 + 220 >> 2]), HEAP32[$2 + 68 >> 2], HEAP32[HEAP32[$2 + 224 >> 2] + 16 >> 2], HEAP32[HEAP32[$2 + 224 >> 2] + 20 >> 2], HEAP32[HEAP32[$2 + 224 >> 2] + 24 >> 2], HEAP32[HEAP32[$2 + 224 >> 2] >> 2], short__20tflite__micro__GetTensorData_short__28TfLiteEvalTensor__29(HEAP32[$2 + 216 >> 2]));
        HEAP32[$2 + 236 >> 2] = 0;
        break label$2;

       default:
        break label$12;
       }
      }
      $0 = HEAP32[HEAP32[$2 + 232 >> 2] + 20 >> 2];
      $1 = HEAP32[$2 + 232 >> 2];
      $3 = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 220 >> 2] + 8 >> 2]);
      HEAP32[$2 + 20 >> 2] = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 216 >> 2] + 8 >> 2]);
      HEAP32[$2 + 16 >> 2] = $3;
      FUNCTION_TABLE[$0 | 0]($1, 127501, $2 + 16 | 0);
      HEAP32[$2 + 236 >> 2] = 1;
      break label$2;
     }
     break label$9;
    }
    label$15: {
     if (HEAP32[HEAP32[$2 + 220 >> 2] + 8 >> 2] == 9) {
      HEAP32[$2 + 64 >> 2] = tflite__ElementCount_28TfLiteIntArray_20const__29(HEAP32[HEAP32[$2 + 220 >> 2] + 4 >> 2]);
      label$17: {
       if (HEAP32[HEAP32[$2 + 216 >> 2] + 8 >> 2] == 9) {
        void_20tflite__reference_ops__Requantize_signed_20char_2c_20signed_20char__28signed_20char_20const__2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20signed_20char__29(signed_20char_20const__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor_20const__29(HEAP32[$2 + 220 >> 2]), HEAP32[$2 + 64 >> 2], HEAP32[HEAP32[$2 + 224 >> 2] + 16 >> 2], HEAP32[HEAP32[$2 + 224 >> 2] + 20 >> 2], HEAP32[HEAP32[$2 + 224 >> 2] + 24 >> 2], HEAP32[HEAP32[$2 + 224 >> 2] >> 2], signed_20char__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor__29(HEAP32[$2 + 216 >> 2]));
        break label$17;
       }
       $0 = HEAP32[HEAP32[$2 + 232 >> 2] + 20 >> 2];
       $1 = HEAP32[$2 + 232 >> 2];
       $3 = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 220 >> 2] + 8 >> 2]);
       HEAP32[$2 + 36 >> 2] = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 216 >> 2] + 8 >> 2]);
       HEAP32[$2 + 32 >> 2] = $3;
       FUNCTION_TABLE[$0 | 0]($1, 127501, $2 + 32 | 0);
       HEAP32[$2 + 236 >> 2] = 1;
       break label$2;
      }
      break label$15;
     }
     $0 = HEAP32[HEAP32[$2 + 232 >> 2] + 20 >> 2];
     $1 = HEAP32[$2 + 232 >> 2];
     $3 = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 220 >> 2] + 8 >> 2]);
     HEAP32[$2 + 52 >> 2] = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 216 >> 2] + 8 >> 2]);
     HEAP32[$2 + 48 >> 2] = $3;
     FUNCTION_TABLE[$0 | 0]($1, 127501, $2 + 48 | 0);
     HEAP32[$2 + 236 >> 2] = 1;
     break label$2;
    }
   }
  }
  HEAP32[$2 + 236 >> 2] = 0;
 }
 __stack_pointer = $2 + 240 | 0;
 return HEAP32[$2 + 236 >> 2];
}

function vcbprintf($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 144 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 140 >> 2] = $0;
 HEAP32[$4 + 136 >> 2] = $1;
 HEAP32[$4 + 132 >> 2] = $2;
 HEAP32[$4 + 128 >> 2] = $3;
 while (1) {
  label$2: {
   if (!HEAPU8[HEAP32[$4 + 132 >> 2]]) {
    break label$2;
   }
   label$3: {
    if (HEAP8[HEAP32[$4 + 132 >> 2]] == 37) {
     HEAP32[$4 + 132 >> 2] = HEAP32[$4 + 132 >> 2] + 1;
     $0 = HEAP32[$4 + 132 >> 2];
     HEAP32[$4 + 132 >> 2] = $0 + 1;
     HEAP8[$4 + 95 | 0] = HEAPU8[$0 | 0];
     label$5: {
      label$6: {
       switch (HEAP8[$4 + 95 | 0] - 32 | 0) {
       case 0:
       case 16:
       case 17:
       case 18:
       case 19:
       case 20:
       case 21:
       case 22:
       case 23:
       case 24:
       case 25:
        HEAP32[$4 + 88 >> 2] = 144421;
        if (!HEAPU8[HEAP32[$4 + 132 >> 2]]) {
         break label$5;
        }
        if (HEAP8[$4 + 95 | 0] == 48) {
         HEAP32[$4 + 88 >> 2] = 126803;
         $0 = HEAP32[$4 + 132 >> 2];
         HEAP32[$4 + 132 >> 2] = $0 + 1;
         HEAP8[$4 + 95 | 0] = HEAPU8[$0 | 0];
         if (!HEAPU8[HEAP32[$4 + 132 >> 2]]) {
          break label$5;
         }
        }
        HEAP32[$4 + 84 >> 2] = HEAP8[$4 + 95 | 0] - 48;
        $0 = HEAP32[$4 + 128 >> 2];
        HEAP32[$4 + 128 >> 2] = $0 + 4;
        HEAP32[$4 + 80 >> 2] = HEAP32[$0 >> 2];
        label$18: {
         if (HEAP8[HEAP32[$4 + 132 >> 2]] == 120) {
          itostr_extra(HEAP32[$4 + 80 >> 2], $4 + 96 | 0, 0, 16);
          break label$18;
         }
         itostr_1(HEAP32[$4 + 80 >> 2], $4 + 96 | 0, 10);
        }
        HEAP32[$4 + 132 >> 2] = HEAP32[$4 + 132 >> 2] + 1;
        HEAP32[$4 + 76 >> 2] = strlen($4 + 96 | 0);
        while (1) {
         if (HEAP32[$4 + 76 >> 2] < HEAP32[$4 + 84 >> 2]) {
          FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]](HEAP32[$4 + 88 >> 2], HEAP32[$4 + 136 >> 2]);
          HEAP32[$4 + 76 >> 2] = HEAP32[$4 + 76 >> 2] + 1;
          continue;
         }
         break;
        }
        ;
        FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]]($4 + 96 | 0, HEAP32[$4 + 136 >> 2]);
        break label$5;

       case 68:
       case 73:
        $0 = HEAP32[$4 + 128 >> 2];
        HEAP32[$4 + 128 >> 2] = $0 + 4;
        itostr_1(HEAP32[$0 >> 2], $4 + 96 | 0, 10);
        FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]]($4 + 96 | 0, HEAP32[$4 + 136 >> 2]);
        break label$5;

       case 88:
        $0 = HEAP32[$4 + 128 >> 2];
        HEAP32[$4 + 128 >> 2] = $0 + 4;
        itostr_extra(HEAP32[$0 >> 2], $4 + 96 | 0, 0, 16);
        FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]]($4 + 96 | 0, HEAP32[$4 + 136 >> 2]);
        break label$5;

       case 44:
        HEAP32[$4 + 72 >> 2] = 10;
        HEAP8[$4 + 71 | 0] = 1;
        if (HEAP8[HEAP32[$4 + 132 >> 2]] == 120) {
         HEAP32[$4 + 72 >> 2] = 16;
         HEAP32[$4 + 132 >> 2] = HEAP32[$4 + 132 >> 2] + 1;
         HEAP8[$4 + 71 | 0] = 0;
        }
        $0 = HEAP32[$4 + 128 >> 2];
        HEAP32[$4 + 128 >> 2] = $0 + 4;
        itostr_extra(HEAP32[$0 >> 2], $4 + 96 | 0, HEAP8[$4 + 71 | 0] & 1, HEAP32[$4 + 72 >> 2]);
        FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]]($4 + 96 | 0, HEAP32[$4 + 136 >> 2]);
        break label$5;

       case 70:
        $0 = HEAP32[$4 + 128 >> 2] + 7 & -8;
        HEAP32[$4 + 128 >> 2] = $0 + 8;
        ftoa_bounded(HEAPF64[$0 >> 3], $4 + 96 | 0, 32);
        FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]]($4 + 96 | 0, HEAP32[$4 + 136 >> 2]);
        break label$5;

       case 83:
        $1 = HEAP32[$4 + 140 >> 2];
        $0 = HEAP32[$4 + 128 >> 2];
        HEAP32[$4 + 128 >> 2] = $0 + 4;
        FUNCTION_TABLE[$1 | 0](HEAP32[$0 >> 2], HEAP32[$4 + 136 >> 2]);
        break label$5;

       case 67:
        $0 = HEAP32[$4 + 128 >> 2];
        HEAP32[$4 + 128 >> 2] = $0 + 4;
        HEAP8[$4 + 96 | 0] = HEAP32[$0 >> 2];
        HEAP8[$4 + 97 | 0] = 0;
        FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]]($4 + 96 | 0, HEAP32[$4 + 136 >> 2]);
        break label$5;

       case 49:
       case 81:
       case 86:
        HEAP8[$4 + 70 | 0] = HEAP8[$4 + 95 | 0] != 118;
        HEAP8[$4 + 69 | 0] = HEAP8[$4 + 95 | 0] == 81;
        if (HEAP8[$4 + 70 | 0] & 1) {
         FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]](143507, HEAP32[$4 + 136 >> 2]);
        }
        $0 = HEAP32[$4 + 128 >> 2];
        HEAP32[$4 + 128 >> 2] = $0 + 4;
        HEAP32[$4 + 64 >> 2] = jsvAsString(HEAP32[$0 >> 2]);
        if (jsvIsUTF8String(HEAP32[$4 + 64 >> 2]) & 1) {
         HEAP8[$4 + 69 | 0] = 1;
        }
        HEAP8[$4 + 97 | 0] = 0;
        if (jsvIsString(HEAP32[$4 + 64 >> 2]) & 1) {
         jsvStringIteratorNewUTF8($4 + 24 | 0, HEAP32[$4 + 64 >> 2], 0);
         label$26: {
          if (HEAP8[$4 + 70 | 0] & 1) {
           HEAP32[$4 + 20 >> 2] = jsvStringIteratorGetUTF8CharAndNext($4 + 24 | 0);
           while (1) {
            $0 = 1;
            if (!(jsvStringIteratorHasChar_3($4 + 24 | 0) & 1)) {
             $0 = HEAP32[$4 + 20 >> 2] >= 0;
            }
            if ($0) {
             HEAP32[$4 + 16 >> 2] = jsvStringIteratorGetUTF8CharAndNext($4 + 24 | 0);
             label$31: {
              if (HEAP8[$4 + 70 | 0] & 1) {
               $0 = HEAP32[$4 + 140 >> 2];
               FUNCTION_TABLE[$0 | 0](escapeCharacter(HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2], HEAP8[$4 + 69 | 0] & 1), HEAP32[$4 + 136 >> 2]);
               break label$31;
              }
              FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]]($4 + 96 | 0, HEAP32[$4 + 136 >> 2]);
             }
             HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 16 >> 2];
             continue;
            }
            break;
           }
           break label$26;
          }
          while (1) {
           if (jsvStringIteratorHasChar_3($4 + 24 | 0) & 1) {
            HEAP8[$4 + 96 | 0] = jsvStringIteratorGetCharAndNext($4 + 24 | 0);
            FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]]($4 + 96 | 0, HEAP32[$4 + 136 >> 2]);
            continue;
           }
           break;
          }
         }
         jsvStringIteratorFree_3($4 + 24 | 0);
         jsvUnLock(HEAP32[$4 + 64 >> 2]);
        }
        if (HEAP8[$4 + 70 | 0] & 1) {
         FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]](143507, HEAP32[$4 + 136 >> 2]);
        }
        break label$5;

       case 74:
        $0 = HEAP32[$4 + 128 >> 2];
        HEAP32[$4 + 128 >> 2] = $0 + 4;
        HEAP32[$4 + 12 >> 2] = HEAP32[$0 >> 2];
        jsfGetJSONWithCallback(HEAP32[$4 + 12 >> 2], 0, 8229, 0, HEAP32[$4 + 140 >> 2], HEAP32[$4 + 136 >> 2]);
        break label$5;

       case 84:
        $0 = HEAP32[$4 + 128 >> 2];
        HEAP32[$4 + 128 >> 2] = $0 + 4;
        HEAP32[$4 + 8 >> 2] = HEAP32[$0 >> 2];
        if (jsvIsNull(HEAP32[$4 + 8 >> 2]) & 1) {
         $0 = 117780;
        } else {
         $0 = jswGetBasicObjectName(HEAP32[$4 + 8 >> 2]);
        }
        HEAP32[$4 + 4 >> 2] = $0;
        if (!HEAP32[$4 + 4 >> 2]) {
         HEAP32[$4 + 4 >> 2] = jsvGetTypeOf(HEAP32[$4 + 8 >> 2]);
        }
        FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]](HEAP32[$4 + 4 >> 2], HEAP32[$4 + 136 >> 2]);
        break label$5;

       case 80:
        break label$6;

       default:
        break label$2;
       }
      }
      $0 = HEAP32[$4 + 128 >> 2];
      HEAP32[$4 + 128 >> 2] = $0 + 4;
      jshGetPinString($4 + 96 | 0, HEAP32[$0 >> 2] & 255);
      FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]]($4 + 96 | 0, HEAP32[$4 + 136 >> 2]);
     }
     break label$3;
    }
    $0 = HEAP32[$4 + 132 >> 2];
    HEAP32[$4 + 132 >> 2] = $0 + 1;
    HEAP8[$4 + 96 | 0] = HEAPU8[$0 | 0];
    HEAP8[$4 + 97 | 0] = 0;
    FUNCTION_TABLE[HEAP32[$4 + 140 >> 2]]($4 + 96 | 0, HEAP32[$4 + 136 >> 2]);
   }
   continue;
  }
  break;
 }
 __stack_pointer = $4 + 144 | 0;
}

function tflite__reference_ops__depthwise_conv__DepthwiseConvBasicKernel__28tflite__DepthwiseConvOutputRounding_291___Run_28tflite__DepthwiseParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0;
 $9 = __stack_pointer - 192 | 0;
 __stack_pointer = $9;
 HEAP32[$9 + 188 >> 2] = $0;
 HEAP32[$9 + 184 >> 2] = $1;
 HEAP32[$9 + 180 >> 2] = $2;
 HEAP32[$9 + 176 >> 2] = $3;
 HEAP32[$9 + 172 >> 2] = $4;
 HEAP32[$9 + 168 >> 2] = $5;
 HEAP32[$9 + 164 >> 2] = $6;
 HEAP32[$9 + 160 >> 2] = $7;
 HEAP32[$9 + 156 >> 2] = $8;
 HEAP32[$9 + 152 >> 2] = HEAP16[HEAP32[$9 + 188 >> 2] + 10 >> 1];
 HEAP32[$9 + 148 >> 2] = HEAP16[HEAP32[$9 + 188 >> 2] + 12 >> 1];
 HEAP32[$9 + 144 >> 2] = HEAP16[HEAP32[$9 + 188 >> 2] + 14 >> 1];
 HEAP32[$9 + 140 >> 2] = HEAP16[HEAP32[$9 + 188 >> 2] + 16 >> 1];
 HEAP32[$9 + 136 >> 2] = HEAP16[HEAP32[$9 + 188 >> 2] + 2 >> 1];
 HEAP32[$9 + 132 >> 2] = HEAP16[HEAP32[$9 + 188 >> 2] + 4 >> 1];
 HEAP32[$9 + 128 >> 2] = HEAP16[HEAP32[$9 + 188 >> 2] + 18 >> 1];
 HEAP32[$9 + 124 >> 2] = HEAP32[HEAP32[$9 + 188 >> 2] + 40 >> 2];
 HEAP32[$9 + 120 >> 2] = HEAP32[HEAP32[$9 + 188 >> 2] + 44 >> 2];
 HEAP32[$9 + 116 >> 2] = HEAP32[HEAP32[$9 + 188 >> 2] + 20 >> 2];
 HEAP32[$9 + 112 >> 2] = HEAP32[HEAP32[$9 + 188 >> 2] + 24 >> 2];
 HEAP32[$9 + 108 >> 2] = HEAP32[HEAP32[$9 + 188 >> 2] + 28 >> 2];
 HEAP32[$9 + 104 >> 2] = HEAP32[HEAP32[$9 + 188 >> 2] + 32 >> 2];
 HEAP32[$9 + 100 >> 2] = HEAP32[HEAP32[$9 + 188 >> 2] + 36 >> 2];
 label$1: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$9 + 184 >> 2]) | 0) != 4) {
   break label$1;
  }
 }
 label$2: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$9 + 176 >> 2]) | 0) != 4) {
   break label$2;
  }
 }
 label$3: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$9 + 160 >> 2]) | 0) != 4) {
   break label$3;
  }
 }
 label$4: {
  if (HEAP32[$9 + 124 >> 2] > HEAP32[$9 + 120 >> 2]) {
   break label$4;
  }
 }
 HEAP32[$9 + 96 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$9 + 184 >> 2], 0, HEAP32[$9 + 160 >> 2], 0);
 HEAP32[$9 + 92 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$9 + 176 >> 2], 3, HEAP32[$9 + 160 >> 2], 3);
 HEAP32[$9 + 88 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 184 >> 2], 1);
 HEAP32[$9 + 84 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 184 >> 2], 2);
 HEAP32[$9 + 80 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 184 >> 2], 3);
 HEAP32[$9 + 76 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 176 >> 2], 1);
 HEAP32[$9 + 72 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 176 >> 2], 2);
 HEAP32[$9 + 68 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 160 >> 2], 1);
 HEAP32[$9 + 64 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 160 >> 2], 2);
 label$5: {
  if (HEAP32[$9 + 92 >> 2] != (Math_imul(HEAP32[$9 + 80 >> 2], HEAP32[$9 + 128 >> 2]) | 0)) {
   break label$5;
  }
 }
 label$6: {
  if ((tflite__RuntimeShape__FlatSize_28_29_20const(HEAP32[$9 + 168 >> 2]) | 0) != HEAP32[$9 + 92 >> 2]) {
   break label$6;
  }
 }
 HEAP32[$9 + 60 >> 2] = 0;
 while (1) {
  if (HEAP32[$9 + 60 >> 2] < HEAP32[$9 + 96 >> 2]) {
   HEAP32[$9 + 56 >> 2] = 0;
   while (1) {
    if (HEAP32[$9 + 56 >> 2] < HEAP32[$9 + 68 >> 2]) {
     HEAP32[$9 + 52 >> 2] = 0;
     while (1) {
      if (HEAP32[$9 + 52 >> 2] < HEAP32[$9 + 64 >> 2]) {
       HEAP32[$9 + 48 >> 2] = 0;
       while (1) {
        if (HEAP32[$9 + 48 >> 2] < HEAP32[$9 + 80 >> 2]) {
         HEAP32[$9 + 44 >> 2] = 0;
         while (1) {
          if (HEAP32[$9 + 44 >> 2] < HEAP32[$9 + 128 >> 2]) {
           HEAP32[$9 + 40 >> 2] = HEAP32[$9 + 44 >> 2] + Math_imul(HEAP32[$9 + 48 >> 2], HEAP32[$9 + 128 >> 2]);
           HEAP32[$9 + 36 >> 2] = Math_imul(HEAP32[$9 + 52 >> 2], HEAP32[$9 + 152 >> 2]) - HEAP32[$9 + 136 >> 2];
           HEAP32[$9 + 32 >> 2] = Math_imul(HEAP32[$9 + 56 >> 2], HEAP32[$9 + 148 >> 2]) - HEAP32[$9 + 132 >> 2];
           HEAP32[$9 + 28 >> 2] = 0;
           HEAP32[$9 + 24 >> 2] = 0;
           while (1) {
            if (HEAP32[$9 + 24 >> 2] < HEAP32[$9 + 76 >> 2]) {
             HEAP32[$9 + 20 >> 2] = 0;
             while (1) {
              if (HEAP32[$9 + 20 >> 2] < HEAP32[$9 + 72 >> 2]) {
               HEAP32[$9 + 16 >> 2] = HEAP32[$9 + 36 >> 2] + Math_imul(HEAP32[$9 + 144 >> 2], HEAP32[$9 + 20 >> 2]);
               HEAP32[$9 + 12 >> 2] = HEAP32[$9 + 32 >> 2] + Math_imul(HEAP32[$9 + 140 >> 2], HEAP32[$9 + 24 >> 2]);
               if (!(HEAP32[$9 + 16 >> 2] < 0 | HEAP32[$9 + 16 >> 2] >= HEAP32[$9 + 84 >> 2] | (HEAP32[$9 + 12 >> 2] < 0 | HEAP32[$9 + 12 >> 2] >= HEAP32[$9 + 88 >> 2]))) {
                HEAP32[$9 + 8 >> 2] = HEAPU8[HEAP32[$9 + 180 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$9 + 184 >> 2], HEAP32[$9 + 60 >> 2], HEAP32[$9 + 12 >> 2], HEAP32[$9 + 16 >> 2], HEAP32[$9 + 48 >> 2]) | 0];
                HEAP32[$9 + 4 >> 2] = HEAPU8[HEAP32[$9 + 172 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$9 + 176 >> 2], 0, HEAP32[$9 + 24 >> 2], HEAP32[$9 + 20 >> 2], HEAP32[$9 + 40 >> 2]) | 0];
                HEAP32[$9 + 28 >> 2] = HEAP32[$9 + 28 >> 2] + Math_imul(HEAP32[$9 + 4 >> 2] + HEAP32[$9 + 112 >> 2] | 0, HEAP32[$9 + 8 >> 2] + HEAP32[$9 + 116 >> 2] | 0);
               }
               HEAP32[$9 + 20 >> 2] = HEAP32[$9 + 20 >> 2] + 1;
               continue;
              }
              break;
             }
             HEAP32[$9 + 24 >> 2] = HEAP32[$9 + 24 >> 2] + 1;
             continue;
            }
            break;
           }
           if (HEAP32[$9 + 164 >> 2]) {
            HEAP32[$9 + 28 >> 2] = HEAP32[HEAP32[$9 + 164 >> 2] + (HEAP32[$9 + 40 >> 2] << 2) >> 2] + HEAP32[$9 + 28 >> 2];
           }
           HEAP32[$9 + 28 >> 2] = int_20tflite__reference_ops__depthwise_conv__DepthwiseConvRound__28tflite__DepthwiseConvOutputRounding_291__28int_2c_20int_2c_20int_29(HEAP32[$9 + 28 >> 2], HEAP32[$9 + 104 >> 2], HEAP32[$9 + 100 >> 2]);
           HEAP32[$9 + 28 >> 2] = HEAP32[$9 + 108 >> 2] + HEAP32[$9 + 28 >> 2];
           HEAP32[$9 + 28 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($9 + 28 | 0, $9 + 124 | 0) >> 2];
           HEAP32[$9 + 28 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($9 + 28 | 0, $9 + 120 | 0) >> 2];
           $0 = HEAP32[$9 + 28 >> 2];
           HEAP8[HEAP32[$9 + 156 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$9 + 160 >> 2], HEAP32[$9 + 60 >> 2], HEAP32[$9 + 56 >> 2], HEAP32[$9 + 52 >> 2], HEAP32[$9 + 40 >> 2]) | 0] = $0;
           HEAP32[$9 + 44 >> 2] = HEAP32[$9 + 44 >> 2] + 1;
           continue;
          }
          break;
         }
         HEAP32[$9 + 48 >> 2] = HEAP32[$9 + 48 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$9 + 52 >> 2] = HEAP32[$9 + 52 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$9 + 56 >> 2] = HEAP32[$9 + 56 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$9 + 60 >> 2] = HEAP32[$9 + 60 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $9 + 192 | 0;
}

function tflite__reference_ops__Conv_28tflite__ConvParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__2c_20void__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
 var $12 = 0;
 $12 = __stack_pointer - 192 | 0;
 __stack_pointer = $12;
 HEAP32[$12 + 188 >> 2] = $0;
 HEAP32[$12 + 184 >> 2] = $1;
 HEAP32[$12 + 180 >> 2] = $2;
 HEAP32[$12 + 176 >> 2] = $3;
 HEAP32[$12 + 172 >> 2] = $4;
 HEAP32[$12 + 168 >> 2] = $5;
 HEAP32[$12 + 164 >> 2] = $6;
 HEAP32[$12 + 160 >> 2] = $7;
 HEAP32[$12 + 156 >> 2] = $8;
 HEAP32[$12 + 152 >> 2] = $9;
 HEAP32[$12 + 148 >> 2] = $10;
 HEAP32[$12 + 144 >> 2] = $11;
 HEAP32[$12 + 140 >> 2] = HEAP16[HEAP32[$12 + 188 >> 2] + 10 >> 1];
 HEAP32[$12 + 136 >> 2] = HEAP16[HEAP32[$12 + 188 >> 2] + 12 >> 1];
 HEAP32[$12 + 132 >> 2] = HEAP16[HEAP32[$12 + 188 >> 2] + 14 >> 1];
 HEAP32[$12 + 128 >> 2] = HEAP16[HEAP32[$12 + 188 >> 2] + 16 >> 1];
 HEAP32[$12 + 124 >> 2] = HEAP16[HEAP32[$12 + 188 >> 2] + 2 >> 1];
 HEAP32[$12 + 120 >> 2] = HEAP16[HEAP32[$12 + 188 >> 2] + 4 >> 1];
 HEAP32[$12 + 116 >> 2] = HEAP32[HEAP32[$12 + 188 >> 2] + 20 >> 2];
 HEAP32[$12 + 112 >> 2] = HEAP32[HEAP32[$12 + 188 >> 2] + 24 >> 2];
 HEAP32[$12 + 108 >> 2] = HEAP32[HEAP32[$12 + 188 >> 2] + 28 >> 2];
 HEAP32[$12 + 104 >> 2] = HEAP32[HEAP32[$12 + 188 >> 2] + 32 >> 2];
 HEAP32[$12 + 100 >> 2] = HEAP32[HEAP32[$12 + 188 >> 2] + 36 >> 2];
 HEAP32[$12 + 96 >> 2] = HEAP32[HEAP32[$12 + 188 >> 2] + 40 >> 2];
 HEAP32[$12 + 92 >> 2] = HEAP32[HEAP32[$12 + 188 >> 2] + 44 >> 2];
 label$1: {
  if (HEAP32[$12 + 96 >> 2] > HEAP32[$12 + 92 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$12 + 184 >> 2]) | 0) != 4) {
   break label$2;
  }
 }
 label$3: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$12 + 176 >> 2]) | 0) != 4) {
   break label$3;
  }
 }
 label$4: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$12 + 160 >> 2]) | 0) != 4) {
   break label$4;
  }
 }
 HEAP32[$12 + 88 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$12 + 184 >> 2], 0, HEAP32[$12 + 160 >> 2], 0);
 HEAP32[$12 + 84 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$12 + 184 >> 2], 3, HEAP32[$12 + 176 >> 2], 3);
 HEAP32[$12 + 80 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$12 + 176 >> 2], 0, HEAP32[$12 + 160 >> 2], 3);
 if (HEAP32[$12 + 164 >> 2]) {
  label$6: {
   if ((tflite__RuntimeShape__FlatSize_28_29_20const(HEAP32[$12 + 168 >> 2]) | 0) != HEAP32[$12 + 80 >> 2]) {
    break label$6;
   }
  }
 }
 HEAP32[$12 + 76 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$12 + 184 >> 2], 1);
 HEAP32[$12 + 72 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$12 + 184 >> 2], 2);
 HEAP32[$12 + 68 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$12 + 176 >> 2], 1);
 HEAP32[$12 + 64 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$12 + 176 >> 2], 2);
 HEAP32[$12 + 60 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$12 + 160 >> 2], 1);
 HEAP32[$12 + 56 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$12 + 160 >> 2], 2);
 HEAP32[$12 + 52 >> 2] = 0;
 while (1) {
  if (HEAP32[$12 + 52 >> 2] < HEAP32[$12 + 88 >> 2]) {
   HEAP32[$12 + 48 >> 2] = 0;
   while (1) {
    if (HEAP32[$12 + 48 >> 2] < HEAP32[$12 + 60 >> 2]) {
     HEAP32[$12 + 44 >> 2] = 0;
     while (1) {
      if (HEAP32[$12 + 44 >> 2] < HEAP32[$12 + 56 >> 2]) {
       HEAP32[$12 + 40 >> 2] = 0;
       while (1) {
        if (HEAP32[$12 + 40 >> 2] < HEAP32[$12 + 80 >> 2]) {
         HEAP32[$12 + 36 >> 2] = Math_imul(HEAP32[$12 + 44 >> 2], HEAP32[$12 + 140 >> 2]) - HEAP32[$12 + 124 >> 2];
         HEAP32[$12 + 32 >> 2] = Math_imul(HEAP32[$12 + 48 >> 2], HEAP32[$12 + 136 >> 2]) - HEAP32[$12 + 120 >> 2];
         HEAP32[$12 + 28 >> 2] = 0;
         HEAP32[$12 + 24 >> 2] = 0;
         while (1) {
          if (HEAP32[$12 + 24 >> 2] < HEAP32[$12 + 68 >> 2]) {
           HEAP32[$12 + 20 >> 2] = 0;
           while (1) {
            if (HEAP32[$12 + 20 >> 2] < HEAP32[$12 + 64 >> 2]) {
             HEAP32[$12 + 16 >> 2] = 0;
             while (1) {
              if (HEAP32[$12 + 16 >> 2] < HEAP32[$12 + 84 >> 2]) {
               HEAP32[$12 + 12 >> 2] = HEAP32[$12 + 36 >> 2] + Math_imul(HEAP32[$12 + 132 >> 2], HEAP32[$12 + 20 >> 2]);
               HEAP32[$12 + 8 >> 2] = HEAP32[$12 + 32 >> 2] + Math_imul(HEAP32[$12 + 128 >> 2], HEAP32[$12 + 24 >> 2]);
               if (!(HEAP32[$12 + 12 >> 2] < 0 | HEAP32[$12 + 12 >> 2] >= HEAP32[$12 + 72 >> 2] | (HEAP32[$12 + 8 >> 2] < 0 | HEAP32[$12 + 8 >> 2] >= HEAP32[$12 + 76 >> 2]))) {
                HEAP32[$12 + 4 >> 2] = HEAPU8[HEAP32[$12 + 180 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$12 + 184 >> 2], HEAP32[$12 + 52 >> 2], HEAP32[$12 + 8 >> 2], HEAP32[$12 + 12 >> 2], HEAP32[$12 + 16 >> 2]) | 0];
                HEAP32[$12 >> 2] = HEAPU8[HEAP32[$12 + 172 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$12 + 176 >> 2], HEAP32[$12 + 40 >> 2], HEAP32[$12 + 24 >> 2], HEAP32[$12 + 20 >> 2], HEAP32[$12 + 16 >> 2]) | 0];
                HEAP32[$12 + 28 >> 2] = HEAP32[$12 + 28 >> 2] + Math_imul(HEAP32[$12 >> 2] + HEAP32[$12 + 112 >> 2] | 0, HEAP32[$12 + 4 >> 2] + HEAP32[$12 + 116 >> 2] | 0);
               }
               HEAP32[$12 + 16 >> 2] = HEAP32[$12 + 16 >> 2] + 1;
               continue;
              }
              break;
             }
             HEAP32[$12 + 20 >> 2] = HEAP32[$12 + 20 >> 2] + 1;
             continue;
            }
            break;
           }
           HEAP32[$12 + 24 >> 2] = HEAP32[$12 + 24 >> 2] + 1;
           continue;
          }
          break;
         }
         if (HEAP32[$12 + 164 >> 2]) {
          HEAP32[$12 + 28 >> 2] = HEAP32[HEAP32[$12 + 164 >> 2] + (HEAP32[$12 + 40 >> 2] << 2) >> 2] + HEAP32[$12 + 28 >> 2];
         }
         HEAP32[$12 + 28 >> 2] = tflite__MultiplyByQuantizedMultiplier_28int_2c_20int_2c_20int_29(HEAP32[$12 + 28 >> 2], HEAP32[$12 + 104 >> 2], HEAP32[$12 + 100 >> 2]);
         HEAP32[$12 + 28 >> 2] = HEAP32[$12 + 108 >> 2] + HEAP32[$12 + 28 >> 2];
         HEAP32[$12 + 28 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($12 + 28 | 0, $12 + 96 | 0) >> 2];
         HEAP32[$12 + 28 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($12 + 28 | 0, $12 + 92 | 0) >> 2];
         $0 = HEAP32[$12 + 28 >> 2];
         HEAP8[HEAP32[$12 + 156 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$12 + 160 >> 2], HEAP32[$12 + 52 >> 2], HEAP32[$12 + 48 >> 2], HEAP32[$12 + 44 >> 2], HEAP32[$12 + 40 >> 2]) | 0] = $0;
         HEAP32[$12 + 40 >> 2] = HEAP32[$12 + 40 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$12 + 44 >> 2] = HEAP32[$12 + 44 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$12 + 48 >> 2] = HEAP32[$12 + 48 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$12 + 52 >> 2] = HEAP32[$12 + 52 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $12 + 192 | 0;
}

function tflite__MicroAllocator__PrepareNodeAndRegistrationDataFromFlatbuffer_28tflite__Model_20const__2c_20tflite__MicroOpResolver_20const__2c_20tflite__NodeAndRegistration__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 208 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 200 >> 2] = $0;
 HEAP32[$4 + 196 >> 2] = $1;
 HEAP32[$4 + 192 >> 2] = $2;
 HEAP32[$4 + 188 >> 2] = $3;
 $5 = HEAP32[$4 + 200 >> 2];
 label$1: {
  if (!HEAP32[$4 + 196 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if (!HEAP32[$4 + 188 >> 2]) {
   break label$2;
  }
 }
 HEAP32[$4 + 184 >> 2] = tflite__MicroAllocator__GetSubGraphFromModel_28tflite__Model_20const__29($5, HEAP32[$4 + 196 >> 2]);
 label$3: {
  if (!HEAP32[$4 + 184 >> 2]) {
   break label$3;
  }
 }
 HEAP32[$4 + 180 >> 2] = 0;
 HEAP32[$4 + 176 >> 2] = tflite__Model__operator_codes_28_29_20const(HEAP32[$4 + 196 >> 2]);
 tflite___28anonymous_20namespace_29__MicroBuiltinDataAllocator__MicroBuiltinDataAllocator_28tflite__SimpleMemoryAllocator__29($4 + 168 | 0, HEAP32[$5 + 4 >> 2]);
 HEAP32[$4 + 164 >> 2] = 0;
 label$4: {
  while (1) {
   if (HEAPU32[$4 + 164 >> 2] < flatbuffers__Vector_flatbuffers__Offset_tflite__Operator____size_28_29_20const(tflite__SubGraph__operators_28_29_20const(HEAP32[$4 + 184 >> 2])) >>> 0) {
    HEAP32[$4 + 160 >> 2] = flatbuffers__Vector_flatbuffers__Offset_tflite__Operator____Get_28unsigned_20int_29_20const(tflite__SubGraph__operators_28_29_20const(HEAP32[$4 + 184 >> 2]), HEAP32[$4 + 164 >> 2]);
    HEAP32[$4 + 156 >> 2] = tflite__Operator__opcode_index_28_29_20const(HEAP32[$4 + 160 >> 2]);
    if (HEAPU32[$4 + 156 >> 2] >= flatbuffers__Vector_flatbuffers__Offset_tflite__OperatorCode____size_28_29_20const(HEAP32[$4 + 176 >> 2]) >>> 0) {
     $0 = HEAP32[$5 + 8 >> 2];
     HEAP32[$4 >> 2] = HEAP32[$4 + 156 >> 2];
     tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 145645, $4);
     HEAP32[$4 + 204 >> 2] = 1;
     break label$4;
    }
    HEAP32[$4 + 148 >> 2] = flatbuffers__Vector_flatbuffers__Offset_tflite__OperatorCode____operator_5b_5d_28unsigned_20int_29_20const(HEAP32[$4 + 176 >> 2], HEAP32[$4 + 156 >> 2]);
    HEAP32[$4 + 180 >> 2] = tflite__GetRegistrationFromOpCode_28tflite__OperatorCode_20const__2c_20tflite__OpResolver_20const__2c_20tflite__ErrorReporter__2c_20TfLiteRegistration_20const___29(HEAP32[$4 + 148 >> 2], HEAP32[$4 + 192 >> 2], HEAP32[$5 + 8 >> 2], (HEAP32[$4 + 188 >> 2] + Math_imul(HEAP32[$4 + 164 >> 2], 28) | 0) + 24 | 0);
    if (HEAP32[$4 + 180 >> 2]) {
     $0 = HEAP32[$5 + 8 >> 2];
     HEAP32[$4 + 16 >> 2] = tflite__EnumNameBuiltinOperator_28tflite__BuiltinOperator_29(tflite__OperatorCode__builtin_code_28_29_20const(HEAP32[$4 + 148 >> 2]));
     tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 144375, $4 + 16 | 0);
     HEAP32[$4 + 204 >> 2] = HEAP32[$4 + 180 >> 2];
     break label$4;
    }
    HEAP32[$4 + 144 >> 2] = HEAP32[(HEAP32[$4 + 188 >> 2] + Math_imul(HEAP32[$4 + 164 >> 2], 28) | 0) + 24 >> 2];
    if (!HEAP32[$4 + 144 >> 2]) {
     $0 = HEAP32[$5 + 8 >> 2];
     HEAP32[$4 + 32 >> 2] = HEAP32[$4 + 156 >> 2];
     tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 145612, $4 + 32 | 0);
     HEAP32[$4 + 204 >> 2] = 1;
     break label$4;
    }
    HEAP32[$4 + 140 >> 2] = HEAP32[HEAP32[$4 + 144 >> 2] + 20 >> 2];
    HEAP32[$4 + 136 >> 2] = 0;
    HEAP32[$4 + 132 >> 2] = 0;
    HEAP32[$4 + 128 >> 2] = 0;
    label$10: {
     if (HEAP32[$4 + 140 >> 2] == 32) {
      if (tflite__Operator__custom_options_28_29_20const(HEAP32[$4 + 160 >> 2])) {
       HEAP32[$4 + 136 >> 2] = flatbuffers__Vector_unsigned_20char___data_28_29_20const(tflite__Operator__custom_options_28_29_20const(HEAP32[$4 + 160 >> 2]));
       HEAP32[$4 + 132 >> 2] = flatbuffers__Vector_unsigned_20char___size_28_29_20const(tflite__Operator__custom_options_28_29_20const(HEAP32[$4 + 160 >> 2]));
      }
      break label$10;
     }
     if (tflite__Operator__custom_options_28_29_20const(HEAP32[$4 + 160 >> 2])) {
      $0 = HEAP32[$5 + 8 >> 2];
      HEAP32[$4 + 48 >> 2] = tflite__EnumNameBuiltinOperator_28tflite__BuiltinOperator_29(HEAP32[$4 + 140 >> 2]);
      tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 146026, $4 + 48 | 0);
      HEAP32[$4 + 204 >> 2] = 1;
      break label$4;
     }
     $0 = HEAP32[$4 + 192 >> 2];
     HEAP32[$4 + 124 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, HEAP32[$4 + 140 >> 2]);
     if (!HEAP32[$4 + 124 >> 2]) {
      $0 = HEAP32[$5 + 8 >> 2];
      HEAP32[$4 + 64 >> 2] = tflite__EnumNameBuiltinOperator_28tflite__BuiltinOperator_29(HEAP32[$4 + 140 >> 2]);
      tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 115808, $4 - -64 | 0);
      HEAP32[$4 + 204 >> 2] = 1;
      break label$4;
     }
     HEAP32[$4 + 120 >> 2] = FUNCTION_TABLE[HEAP32[$4 + 124 >> 2]](HEAP32[$4 + 160 >> 2], HEAP32[$5 + 8 >> 2], $4 + 168 | 0, $4 + 128 | 0);
     if (HEAP32[$4 + 120 >> 2]) {
      HEAP32[$4 + 204 >> 2] = HEAP32[$4 + 120 >> 2];
      break label$4;
     }
    }
    HEAP32[$4 + 112 >> 2] = TfLiteStatus_20tflite__internal__FlatBufferVectorToTfLiteTypeArray_int_2c_20TfLiteIntArray__28tflite__SimpleMemoryAllocator__2c_20tflite__ErrorReporter__2c_20flatbuffers__Vector_int__20const__2c_20TfLiteIntArray___29(HEAP32[$5 + 4 >> 2], HEAP32[$5 + 8 >> 2], tflite__Operator__inputs_28_29_20const(HEAP32[$4 + 160 >> 2]), $4 + 116 | 0);
    if (HEAP32[$4 + 112 >> 2]) {
     HEAP32[$4 + 204 >> 2] = HEAP32[$4 + 112 >> 2];
     break label$4;
    }
    HEAP32[$4 + 104 >> 2] = TfLiteStatus_20tflite__internal__FlatBufferVectorToTfLiteTypeArray_int_2c_20TfLiteIntArray__28tflite__SimpleMemoryAllocator__2c_20tflite__ErrorReporter__2c_20flatbuffers__Vector_int__20const__2c_20TfLiteIntArray___29(HEAP32[$5 + 4 >> 2], HEAP32[$5 + 8 >> 2], tflite__Operator__outputs_28_29_20const(HEAP32[$4 + 160 >> 2]), $4 + 108 | 0);
    if (HEAP32[$4 + 104 >> 2]) {
     HEAP32[$4 + 204 >> 2] = HEAP32[$4 + 104 >> 2];
     break label$4;
    } else {
     HEAP32[$4 + 100 >> 2] = HEAP32[$4 + 188 >> 2] + Math_imul(HEAP32[$4 + 164 >> 2], 28);
     HEAP32[$4 + 88 >> 2] = 0;
     HEAP32[$4 + 92 >> 2] = 0;
     HEAP32[$4 + 80 >> 2] = 0;
     HEAP32[$4 + 84 >> 2] = 0;
     HEAP32[$4 + 72 >> 2] = 0;
     HEAP32[$4 + 76 >> 2] = 0;
     $2 = HEAP32[$4 + 76 >> 2];
     $0 = HEAP32[$4 + 72 >> 2];
     $3 = $0;
     $1 = HEAP32[$4 + 100 >> 2];
     $0 = $1;
     HEAP32[$0 >> 2] = $3;
     HEAP32[$0 + 4 >> 2] = $2;
     $0 = HEAP32[$4 + 92 >> 2];
     $2 = HEAP32[$4 + 88 >> 2];
     $3 = $2;
     $2 = $1;
     HEAP32[$2 + 16 >> 2] = $3;
     HEAP32[$2 + 20 >> 2] = $0;
     $2 = HEAP32[$4 + 84 >> 2];
     $0 = HEAP32[$4 + 80 >> 2];
     $3 = $0;
     $0 = $1;
     HEAP32[$0 + 8 >> 2] = $3;
     HEAP32[$0 + 12 >> 2] = $2;
     HEAP32[HEAP32[$4 + 100 >> 2] >> 2] = HEAP32[$4 + 116 >> 2];
     HEAP32[HEAP32[$4 + 100 >> 2] + 4 >> 2] = HEAP32[$4 + 108 >> 2];
     HEAP32[HEAP32[$4 + 100 >> 2] + 12 >> 2] = HEAP32[$4 + 128 >> 2];
     HEAP32[HEAP32[$4 + 100 >> 2] + 16 >> 2] = HEAP32[$4 + 136 >> 2];
     HEAP32[HEAP32[$4 + 100 >> 2] + 20 >> 2] = HEAP32[$4 + 132 >> 2];
     HEAP32[$4 + 164 >> 2] = HEAP32[$4 + 164 >> 2] + 1;
     continue;
    }
   }
   break;
  }
  HEAP32[$4 + 204 >> 2] = 0;
 }
 HEAP32[$4 + 152 >> 2] = 1;
 tflite___28anonymous_20namespace_29__MicroBuiltinDataAllocator___MicroBuiltinDataAllocator_28_29($4 + 168 | 0);
 __stack_pointer = $4 + 208 | 0;
 return HEAP32[$4 + 204 >> 2];
}

function __jspeBinaryExpression($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 208 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 204 >> 2] = $0;
 HEAP32[$2 + 200 >> 2] = $1;
 HEAP32[$2 + 196 >> 2] = jspeGetBinaryExpressionPrecedence(HEAP16[HEAP32[44743] + 2 >> 1]);
 while (1) {
  $0 = 0;
  $0 = HEAP32[$2 + 196 >> 2] ? HEAPU32[$2 + 196 >> 2] > HEAPU32[$2 + 200 >> 2] : $0;
  if ($0) {
   HEAP32[$2 + 192 >> 2] = HEAP16[HEAP32[44743] + 2 >> 1];
   jslGetNextToken();
   label$4: {
    if (!(HEAP32[$2 + 192 >> 2] != 158 & HEAP32[$2 + 192 >> 2] != 160)) {
     HEAP32[$2 + 188 >> 2] = jsvSkipNameAndUnLock(HEAP32[$2 + 204 >> 2]);
     HEAP8[$2 + 187 | 0] = jsvGetBool(HEAP32[$2 + 188 >> 2]) & 1;
     label$7: {
      if (!(!(!(HEAP8[$2 + 187 | 0] & 1) & HEAP32[$2 + 192 >> 2] == 158) & (!(HEAP8[$2 + 187 | 0] & 1) | HEAP32[$2 + 192 >> 2] != 160))) {
       HEAP32[$2 + 204 >> 2] = HEAP32[$2 + 188 >> 2];
       HEAP32[$2 + 180 >> 2] = HEAP32[86758];
       jspSetNoExecute();
       jsvUnLock(__jspeBinaryExpression(jspeUnaryExpression(), HEAP32[$2 + 196 >> 2]));
       HEAP32[86758] = HEAP32[86758] & -1664 | HEAP32[$2 + 180 >> 2] & 1663;
       break label$7;
      }
      jsvUnLock(HEAP32[$2 + 188 >> 2]);
      HEAP32[$2 + 204 >> 2] = __jspeBinaryExpression(jspeUnaryExpression(), HEAP32[$2 + 196 >> 2]);
     }
     break label$4;
    }
    label$11: {
     if (HEAP32[$2 + 192 >> 2] == 208) {
      HEAP32[$2 + 176 >> 2] = jsvSkipNameAndUnLock(HEAP32[$2 + 204 >> 2]);
      label$13: {
       if (jsvIsNullish(HEAP32[$2 + 176 >> 2]) & 1) {
        if (!(jsvIsUndefined(HEAP32[$2 + 176 >> 2]) & 1)) {
         jsvUnLock(HEAP32[$2 + 176 >> 2]);
        }
        HEAP32[$2 + 204 >> 2] = __jspeBinaryExpression(jspeUnaryExpression(), HEAP32[$2 + 196 >> 2]);
        break label$13;
       }
       HEAP32[$2 + 204 >> 2] = HEAP32[$2 + 176 >> 2];
       HEAP32[$2 + 172 >> 2] = HEAP32[86758];
       jspSetNoExecute();
       jsvUnLock(__jspeBinaryExpression(jspeUnaryExpression(), HEAP32[$2 + 196 >> 2]));
       HEAP32[86758] = HEAP32[86758] & -1664 | HEAP32[$2 + 172 >> 2] & 1663;
      }
      break label$11;
     }
     HEAP32[$2 + 168 >> 2] = __jspeBinaryExpression(jspeUnaryExpression(), HEAP32[$2 + 196 >> 2]);
     if ((HEAP32[86758] & 63) == 1) {
      label$17: {
       if (HEAP32[$2 + 192 >> 2] == 185) {
        HEAP32[$2 + 164 >> 2] = jsvSkipName(HEAP32[$2 + 204 >> 2]);
        HEAP32[$2 + 160 >> 2] = jsvSkipName(HEAP32[$2 + 168 >> 2]);
        label$19: {
         if (jsvHasChildren(HEAP32[$2 + 160 >> 2]) & 1) {
          HEAP32[$2 + 164 >> 2] = jsvAsArrayIndexAndUnLock(HEAP32[$2 + 164 >> 2]);
          HEAP32[$2 + 156 >> 2] = jspGetVarNamedField(HEAP32[$2 + 160 >> 2], HEAP32[$2 + 164 >> 2], 1);
          jsvUnLock2(HEAP32[$2 + 204 >> 2], HEAP32[$2 + 156 >> 2]);
          HEAP32[$2 + 204 >> 2] = jsvNewFromBool(HEAP32[$2 + 156 >> 2] != 0);
          break label$19;
         }
         HEAP32[$2 + 152 >> 2] = jswGetSymbolListForObjectProto(HEAP32[$2 + 160 >> 2]);
         label$21: {
          if (HEAP32[$2 + 152 >> 2]) {
           HEAP32[$2 + 148 >> 2] = 0;
           if (jsvGetString(HEAP32[$2 + 164 >> 2], $2 + 80 | 0, 64) >>> 0 < 64) {
            HEAP32[$2 + 148 >> 2] = jswBinarySearch(HEAP32[$2 + 152 >> 2], HEAP32[$2 + 160 >> 2], $2 + 80 | 0);
           }
           HEAP8[$2 + 79 | 0] = HEAP32[$2 + 148 >> 2] != 0;
           jsvUnLock2(HEAP32[$2 + 204 >> 2], HEAP32[$2 + 148 >> 2]);
           label$24: {
            if (HEAP8[$2 + 79 | 0] & 1) {
             break label$24;
            }
            if (!(jsvIsArrayBuffer(HEAP32[$2 + 160 >> 2]) & 1)) {
             break label$24;
            }
            HEAPF64[$2 + 64 >> 3] = jsvGetFloat(HEAP32[$2 + 164 >> 2]);
            label$25: {
             if (!(HEAPF64[$2 + 64 >> 3] >= 0) | HEAPF64[$2 + 64 >> 3] != Math_floor(HEAPF64[$2 + 64 >> 3])) {
              break label$25;
             }
             if (!(HEAPF64[$2 + 64 >> 3] < +(jsvGetArrayBufferLength(HEAP32[$2 + 160 >> 2]) >>> 0))) {
              break label$25;
             }
             HEAP8[$2 + 79 | 0] = 1;
            }
           }
           HEAP32[$2 + 204 >> 2] = jsvNewFromBool(HEAP8[$2 + 79 | 0] & 1);
           break label$21;
          }
          HEAP32[$2 >> 2] = HEAP32[$2 + 160 >> 2];
          jsExceptionHere(1, 114744, $2);
          jsvUnLock(HEAP32[$2 + 204 >> 2]);
          HEAP32[$2 + 204 >> 2] = 0;
         }
        }
        jsvUnLock2(HEAP32[$2 + 164 >> 2], HEAP32[$2 + 160 >> 2]);
        break label$17;
       }
       label$26: {
        if (HEAP32[$2 + 192 >> 2] == 186) {
         HEAP8[$2 + 63 | 0] = 0;
         HEAP32[$2 + 56 >> 2] = jsvSkipName(HEAP32[$2 + 204 >> 2]);
         HEAP32[$2 + 52 >> 2] = jsvSkipName(HEAP32[$2 + 168 >> 2]);
         label$28: {
          if (!(jsvIsFunction(HEAP32[$2 + 52 >> 2]) & 1)) {
           HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 52 >> 2];
           jsExceptionHere(1, 114371, $2 + 16 | 0);
           break label$28;
          }
          label$30: {
           if (!(jsvIsObject(HEAP32[$2 + 56 >> 2]) & 1)) {
            if (!(jsvIsFunction(HEAP32[$2 + 56 >> 2]) & 1)) {
             break label$30;
            }
           }
           HEAP32[$2 + 48 >> 2] = jspGetNamedField(HEAP32[$2 + 52 >> 2], 119810, 0);
           HEAP32[$2 + 44 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 56 >> 2], 123007);
           while (1) {
            if (jsvHasChildren(HEAP32[$2 + 44 >> 2]) & 1) {
             if (HEAP32[$2 + 44 >> 2] == HEAP32[$2 + 48 >> 2]) {
              HEAP8[$2 + 63 | 0] = 1;
             }
             HEAP32[$2 + 40 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 44 >> 2], 123007);
             jsvUnLock(HEAP32[$2 + 44 >> 2]);
             HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 40 >> 2];
             continue;
            }
            break;
           }
           if (jspIsConstructor(HEAP32[$2 + 52 >> 2], 113254) & 1) {
            HEAP8[$2 + 63 | 0] = 1;
           }
           jsvUnLock2(HEAP32[$2 + 48 >> 2], HEAP32[$2 + 44 >> 2]);
          }
          if (!(HEAP8[$2 + 63 | 0] & 1)) {
           HEAP32[$2 + 36 >> 2] = jswGetBasicObjectName(HEAP32[$2 + 56 >> 2]);
           if (HEAP32[$2 + 36 >> 2]) {
            HEAP8[$2 + 63 | 0] = jspIsConstructor(HEAP32[$2 + 52 >> 2], HEAP32[$2 + 36 >> 2]) & 1;
           }
           label$38: {
            if (HEAP8[$2 + 63 | 0] & 1) {
             break label$38;
            }
            if (!(jsvIsArray(HEAP32[$2 + 56 >> 2]) & 1)) {
             if (!(jsvIsArrayBuffer(HEAP32[$2 + 56 >> 2]) & 1)) {
              break label$38;
             }
            }
            if (!(jspIsConstructor(HEAP32[$2 + 52 >> 2], 113254) & 1)) {
             break label$38;
            }
            HEAP8[$2 + 63 | 0] = 1;
           }
          }
         }
         jsvUnLock3(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], HEAP32[$2 + 204 >> 2]);
         HEAP32[$2 + 204 >> 2] = jsvNewFromBool(HEAP8[$2 + 63 | 0] & 1);
         break label$26;
        }
        HEAP32[$2 + 32 >> 2] = jsvMathsOpSkipNames(HEAP32[$2 + 204 >> 2], HEAP32[$2 + 168 >> 2], HEAP32[$2 + 192 >> 2]);
        jsvUnLock(HEAP32[$2 + 204 >> 2]);
        HEAP32[$2 + 204 >> 2] = HEAP32[$2 + 32 >> 2];
       }
      }
     }
     jsvUnLock(HEAP32[$2 + 168 >> 2]);
    }
   }
   HEAP32[$2 + 196 >> 2] = jspeGetBinaryExpressionPrecedence(HEAP16[HEAP32[44743] + 2 >> 1]);
   continue;
  }
  break;
 }
 __stack_pointer = $2 + 208 | 0;
 return HEAP32[$2 + 204 >> 2];
}
function jsiDumpState($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = __stack_pointer - 272 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 268 >> 2] = $0;
 HEAP32[$2 + 264 >> 2] = $1;
 jsvObjectIteratorNew($2 + 256 | 0, HEAP32[86750]);
 while (1) {
  if (jsvObjectIteratorHasValue_3($2 + 256 | 0) & 1) {
   HEAP32[$2 + 252 >> 2] = jsvObjectIteratorGetKey_3($2 + 256 | 0);
   HEAP32[$2 + 248 >> 2] = jsvObjectIteratorGetValue_3($2 + 256 | 0);
   jsvGetString(HEAP32[$2 + 252 >> 2], $2 + 176 | 0, 64);
   HEAP8[$2 + 175 | 0] = 0;
   HEAP32[$2 + 168 >> 2] = 158454;
   while (1) {
    if (HEAPU8[HEAP32[$2 + 168 >> 2]]) {
     if (!strcmp(HEAP32[$2 + 168 >> 2], $2 + 176 | 0)) {
      HEAP8[$2 + 175 | 0] = 1;
     }
     HEAP32[$2 + 168 >> 2] = (strlen(HEAP32[$2 + 168 >> 2]) + 1 | 0) + HEAP32[$2 + 168 >> 2];
     continue;
    }
    break;
   }
   if (!(HEAP8[$2 + 175 | 0] & 1)) {
    label$7: {
     if (jswIsBuiltInObject($2 + 176 | 0) & 1) {
      jsiDumpObjectState(HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2], HEAP32[$2 + 252 >> 2], HEAP32[$2 + 248 >> 2]);
      break label$7;
     }
     if (!(jsvIsStringEqualOrStartsWith(HEAP32[$2 + 252 >> 2], 117529, 1) & 1)) {
      if (!(jsvIsStringEqual(HEAP32[$2 + 252 >> 2], 115219) & 1)) {
       if (!(jsvIsStringEqual(HEAP32[$2 + 252 >> 2], 115564) & 1)) {
        label$12: {
         if (HEAP8[HEAP32[$2 + 252 >> 2]] == -1) {
          break label$12;
         }
         if (jshFromDeviceString($2 + 176 | 0) & 255) {
          break label$12;
         }
         if (!(jsvIsNativeFunction(HEAP32[$2 + 248 >> 2]) & 1)) {
          label$15: {
           if (jsvIsFunction(HEAP32[$2 + 248 >> 2]) & 1) {
            $0 = HEAP32[$2 + 268 >> 2];
            $1 = HEAP32[$2 + 264 >> 2];
            HEAP32[$2 >> 2] = HEAP32[$2 + 252 >> 2];
            cbprintf($0, $1, 112244, $2);
            jsfGetJSONForFunctionWithCallback(HEAP32[$2 + 248 >> 2], 32, HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2]);
            FUNCTION_TABLE[HEAP32[$2 + 268 >> 2]](146977, HEAP32[$2 + 264 >> 2]);
            jsiDumpObjectState(HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2], HEAP32[$2 + 252 >> 2], HEAP32[$2 + 248 >> 2]);
            break label$15;
           }
           $0 = HEAP32[$2 + 268 >> 2];
           $1 = HEAP32[$2 + 264 >> 2];
           HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 252 >> 2];
           cbprintf($0, $1, 144248, $2 + 32 | 0);
           HEAP8[$2 + 167 | 0] = 0;
           if (jsvIsObject(HEAP32[$2 + 248 >> 2]) & 1) {
            HEAP32[$2 + 160 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 248 >> 2], 123007);
            if (HEAP32[$2 + 160 >> 2]) {
             HEAP32[$2 + 156 >> 2] = jsvGetPathTo(HEAP32[86750], HEAP32[$2 + 160 >> 2], 4, HEAP32[$2 + 248 >> 2]);
             if (HEAP32[$2 + 156 >> 2]) {
              $0 = HEAP32[$2 + 268 >> 2];
              $1 = HEAP32[$2 + 264 >> 2];
              HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 156 >> 2];
              cbprintf($0, $1, 145853, $2 + 16 | 0);
              jsiDumpObjectState(HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2], HEAP32[$2 + 252 >> 2], HEAP32[$2 + 248 >> 2]);
              HEAP8[$2 + 167 | 0] = 1;
             }
            }
           }
           if (!(HEAP8[$2 + 167 | 0] & 1)) {
            jsiDumpJSON(HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2], HEAP32[$2 + 248 >> 2], HEAP32[$2 + 252 >> 2]);
            FUNCTION_TABLE[HEAP32[$2 + 268 >> 2]](145977, HEAP32[$2 + 264 >> 2]);
           }
          }
         }
        }
       }
      }
     }
    }
   }
   jsvUnLock2(HEAP32[$2 + 248 >> 2], HEAP32[$2 + 252 >> 2]);
   jsvObjectIteratorNext($2 + 256 | 0);
   continue;
  }
  break;
 }
 jsvObjectIteratorFree_3($2 + 256 | 0);
 HEAP32[$2 + 152 >> 2] = jsvLock(HEAPU16[173532]);
 jsvObjectIteratorNew($2 + 256 | 0, HEAP32[$2 + 152 >> 2]);
 jsvUnLock(HEAP32[$2 + 152 >> 2]);
 while (1) {
  if (jsvObjectIteratorHasValue_3($2 + 256 | 0) & 1) {
   HEAP32[$2 + 148 >> 2] = jsvObjectIteratorGetValue_3($2 + 256 | 0);
   HEAP32[$2 + 144 >> 2] = jsvObjectIteratorGetKey_3($2 + 256 | 0);
   HEAP32[$2 + 140 >> 2] = jsvSkipOneNameAndUnLock(jsvFindChildFromString(HEAP32[$2 + 148 >> 2], 118173));
   HEAP32[$2 + 136 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 148 >> 2], 118059);
   FUNCTION_TABLE[HEAP32[$2 + 268 >> 2]](HEAP32[$2 + 136 >> 2] ? 143216 : 143194, HEAP32[$2 + 264 >> 2]);
   jsiDumpJSON(HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2], HEAP32[$2 + 140 >> 2], 0);
   $4 = HEAP32[$2 + 268 >> 2];
   $5 = HEAP32[$2 + 264 >> 2];
   label$23: {
    if (HEAP32[$2 + 136 >> 2]) {
     $0 = jsvGetLongInteger(HEAP32[$2 + 136 >> 2]);
     $3 = $0;
     $1 = i64toi32_i32$HIGH_BITS;
     $0 = $1;
     break label$23;
    }
    $1 = jsvGetLongIntegerAndUnLock(jsvObjectGetChildIfExists(HEAP32[$2 + 148 >> 2], 120023));
    $3 = $1;
    $0 = i64toi32_i32$HIGH_BITS;
   }
   $6 = jshGetMillisecondsFromTime($3, $0);
   HEAP32[$2 + 56 >> 2] = HEAP32[$2 + 144 >> 2];
   HEAPF64[$2 + 48 >> 3] = $6;
   cbprintf($4, $5, 144523, $2 + 48 | 0);
   jsvUnLock3(HEAP32[$2 + 136 >> 2], HEAP32[$2 + 140 >> 2], HEAP32[$2 + 144 >> 2]);
   jsvUnLock(HEAP32[$2 + 148 >> 2]);
   jsvObjectIteratorNext($2 + 256 | 0);
   continue;
  }
  break;
 }
 jsvObjectIteratorFree_3($2 + 256 | 0);
 HEAP32[$2 + 132 >> 2] = jsvLock(HEAPU16[173533]);
 jsvObjectIteratorNew($2 + 256 | 0, HEAP32[$2 + 132 >> 2]);
 jsvUnLock(HEAP32[$2 + 132 >> 2]);
 while (1) {
  if (jsvObjectIteratorHasValue_3($2 + 256 | 0) & 1) {
   HEAP32[$2 + 128 >> 2] = jsvObjectIteratorGetValue_3($2 + 256 | 0);
   HEAP32[$2 + 124 >> 2] = jsvSkipOneNameAndUnLock(jsvFindChildFromString(HEAP32[$2 + 128 >> 2], 118173));
   HEAP8[$2 + 123 | 0] = jsvObjectGetBoolChild(HEAP32[$2 + 128 >> 2], 115962) & 1;
   HEAP32[$2 + 116 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 128 >> 2], 120335);
   HEAP32[$2 + 112 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 128 >> 2], 117541);
   HEAP32[$2 + 108 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 128 >> 2], 120483);
   FUNCTION_TABLE[HEAP32[$2 + 268 >> 2]](143243, HEAP32[$2 + 264 >> 2]);
   jsiDumpJSON(HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2], HEAP32[$2 + 124 >> 2], 0);
   $0 = HEAP32[$2 + 268 >> 2];
   $1 = HEAP32[$2 + 264 >> 2];
   $3 = HEAP32[$2 + 112 >> 2];
   $4 = HEAP8[$2 + 123 | 0] & 1 ? 119419 : 119736;
   HEAP32[$2 + 88 >> 2] = HEAP32[$2 + 116 >> 2] < 0 ? 119005 : HEAP32[$2 + 116 >> 2] > 0 ? 118719 : 118364;
   HEAP32[$2 + 84 >> 2] = $4;
   HEAP32[$2 + 80 >> 2] = $3;
   cbprintf($0, $1, 143306, $2 + 80 | 0);
   if (HEAP32[$2 + 108 >> 2] > 0) {
    $3 = HEAP32[$2 + 268 >> 2];
    $4 = HEAP32[$2 + 264 >> 2];
    $0 = HEAP32[$2 + 108 >> 2];
    $1 = $0 >> 31;
    HEAPF64[$2 + 64 >> 3] = jshGetMillisecondsFromTime($0, $1);
    cbprintf($3, $4, 119153, $2 - -64 | 0);
   }
   FUNCTION_TABLE[HEAP32[$2 + 268 >> 2]](145847, HEAP32[$2 + 264 >> 2]);
   jsvUnLock2(HEAP32[$2 + 112 >> 2], HEAP32[$2 + 124 >> 2]);
   jsvUnLock(HEAP32[$2 + 128 >> 2]);
   jsvObjectIteratorNext($2 + 256 | 0);
   continue;
  }
  break;
 }
 jsvObjectIteratorFree_3($2 + 256 | 0);
 jsiDumpHardwareInitialisation(HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2], 1);
 HEAP32[$2 + 104 >> 2] = jsfGetBootCodeFromFlash(0);
 if (HEAP32[$2 + 104 >> 2]) {
  cbprintf(HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2], 145428, 0);
  jslPrintTokenisedString(HEAP32[$2 + 104 >> 2], HEAP32[$2 + 268 >> 2], HEAP32[$2 + 264 >> 2]);
  jsvUnLock(HEAP32[$2 + 104 >> 2]);
 }
 __stack_pointer = $2 + 272 | 0;
}

function jswrap_graphics_asImage($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 272 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 264 >> 2] = $0;
 HEAP32[$2 + 260 >> 2] = $1;
 label$1: {
  if (!(graphicsGetFromVar($2 + 184 | 0, HEAP32[$2 + 264 >> 2]) & 1)) {
   HEAP32[$2 + 268 >> 2] = 0;
   break label$1;
  }
  label$3: {
   label$4: {
    if (!(jsvIsUndefined(HEAP32[$2 + 260 >> 2]) & 1)) {
     if (!(jsvIsStringEqual(HEAP32[$2 + 260 >> 2], 113247) & 1)) {
      break label$4;
     }
    }
    HEAP8[$2 + 183 | 0] = 1;
    break label$3;
   }
   label$6: {
    if (jsvIsStringEqual(HEAP32[$2 + 260 >> 2], 118763) & 1) {
     HEAP8[$2 + 183 | 0] = 0;
     break label$6;
    }
    HEAP32[$2 >> 2] = HEAP32[$2 + 260 >> 2];
    jsExceptionHere(1, 118313, $2);
    HEAP32[$2 + 268 >> 2] = 0;
    break label$1;
   }
  }
  HEAP32[$2 + 176 >> 2] = jswrap_graphics_getWidthOrHeight(HEAP32[$2 + 264 >> 2], 0);
  HEAP32[$2 + 172 >> 2] = jswrap_graphics_getWidthOrHeight(HEAP32[$2 + 264 >> 2], 1);
  HEAP32[$2 + 168 >> 2] = HEAPU8[$2 + 200 | 0];
  HEAP32[$2 + 164 >> 2] = 1 << HEAP32[$2 + 168 >> 2];
  if ((HEAPU8[$2 + 188 | 0] | HEAPU8[$2 + 189 | 0] << 8 | (HEAPU8[$2 + 190 | 0] << 16 | HEAPU8[$2 + 191 | 0] << 24)) == 6) {
   HEAP32[$2 + 168 >> 2] = 3;
  }
  HEAP32[$2 + 160 >> 2] = Math_imul(HEAP32[$2 + 168 >> 2], Math_imul(HEAP32[$2 + 176 >> 2], HEAP32[$2 + 172 >> 2])) + 7 >> 3;
  HEAP32[$2 + 156 >> 2] = -1;
  HEAP32[$2 + 152 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 264 >> 2], 112883);
  if (HEAP32[$2 + 152 >> 2]) {
   HEAP32[$2 + 156 >> 2] = jsvGetIntegerAndUnLock(HEAP32[$2 + 152 >> 2]);
  }
  HEAP32[$2 + 148 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 264 >> 2], 119591);
  label$10: {
   if (jsvIsArray(HEAP32[$2 + 148 >> 2]) & 1) {
    break label$10;
   }
   if (jsvIsArrayBuffer(HEAP32[$2 + 148 >> 2]) & 1) {
    break label$10;
   }
   jsvUnLock(HEAP32[$2 + 148 >> 2]);
   HEAP32[$2 + 148 >> 2] = 0;
  }
  HEAP32[$2 + 144 >> 2] = 0;
  label$11: {
   if (HEAP8[$2 + 183 | 0] & 1) {
    HEAP32[$2 + 144 >> 2] = jsvNewObject();
    if (!HEAP32[$2 + 144 >> 2]) {
     HEAP32[$2 + 268 >> 2] = 0;
     break label$1;
    }
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 144 >> 2], 118428, jsvNewFromInteger(HEAP32[$2 + 176 >> 2]));
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 144 >> 2], 113099, jsvNewFromInteger(HEAP32[$2 + 172 >> 2]));
    if (HEAP32[$2 + 168 >> 2] != 1) {
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 144 >> 2], 116866, jsvNewFromInteger(HEAP32[$2 + 168 >> 2]));
    }
    if (!(HEAPU8[$2 + 188 | 0] | HEAPU8[$2 + 189 | 0] << 8 | (HEAPU8[$2 + 190 | 0] << 16 | HEAPU8[$2 + 191 | 0] << 24) | (!((HEAPU8[$2 + 192 | 0] | HEAPU8[$2 + 193 | 0] << 8 | (HEAPU8[$2 + 194 | 0] << 16 | HEAPU8[$2 + 195 | 0] << 24)) & 4) | (HEAPU8[$2 + 192 | 0] | HEAPU8[$2 + 193 | 0] << 8 | (HEAPU8[$2 + 194 | 0] << 16 | HEAPU8[$2 + 195 | 0] << 24)) & 11 ? HEAP32[$2 + 168 >> 2] != 8 : 0))) {
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 144 >> 2], 116403, jsvObjectGetChildIfExists(HEAPU8[$2 + 184 | 0] | HEAPU8[$2 + 185 | 0] << 8 | (HEAPU8[$2 + 186 | 0] << 16 | HEAPU8[$2 + 187 | 0] << 24), 116403));
     HEAP32[$2 + 268 >> 2] = HEAP32[$2 + 144 >> 2];
     break label$1;
    }
    if (HEAP32[$2 + 156 >> 2] >= 0) {
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 144 >> 2], 112883, jsvNewFromInteger(HEAP32[$2 + 156 >> 2]));
    }
    if (HEAP32[$2 + 148 >> 2]) {
     jsvObjectSetChild(HEAP32[$2 + 144 >> 2], 119591, HEAP32[$2 + 148 >> 2]);
    }
    break label$11;
   }
   $1 = HEAP32[$2 + 160 >> 2];
   if (HEAP32[$2 + 148 >> 2]) {
    $0 = HEAP32[$2 + 164 >> 2] << 1;
   } else {
    $0 = 0;
   }
   HEAP32[$2 + 160 >> 2] = $1 + ($0 + ((HEAP32[$2 + 156 >> 2] >= 0) + 3 | 0) | 0);
  }
  HEAP32[$2 + 140 >> 2] = jsvNewStringOfLength(HEAP32[$2 + 160 >> 2], 0);
  if (!HEAP32[$2 + 140 >> 2]) {
   jsvUnLock(HEAP32[$2 + 144 >> 2]);
   HEAP32[$2 + 268 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 136 >> 2] = 0;
  HEAP32[$2 + 132 >> 2] = 0;
  HEAP32[$2 + 128 >> 2] = 0;
  HEAP32[$2 + 124 >> 2] = 0;
  jsvStringIteratorNew($2 + 88 | 0, HEAP32[$2 + 140 >> 2], 0);
  if (!(HEAP8[$2 + 183 | 0] & 1)) {
   jsvStringIteratorSetCharAndNext($2 + 88 | 0, HEAP32[$2 + 176 >> 2] << 24 >> 24);
   jsvStringIteratorSetCharAndNext($2 + 88 | 0, HEAP32[$2 + 172 >> 2] << 24 >> 24);
   jsvStringIteratorSetCharAndNext($2 + 88 | 0, ((HEAP32[$2 + 168 >> 2] | (HEAP32[$2 + 156 >> 2] >= 0 ? 128 : 0)) << 24 >> 24 | (HEAP32[$2 + 148 >> 2] ? 64 : 0)) << 24 >> 24);
   if (HEAP32[$2 + 156 >> 2] >= 0) {
    jsvStringIteratorSetCharAndNext($2 + 88 | 0, HEAP32[$2 + 156 >> 2] << 24 >> 24);
   }
   if (HEAP32[$2 + 148 >> 2]) {
    HEAP32[$2 + 20 >> 2] = 0;
    jsvIteratorNew($2 + 24 | 0, HEAP32[$2 + 148 >> 2], 1);
    while (1) {
     if (jsvIteratorHasElement($2 + 24 | 0) & 1) {
      HEAP32[$2 + 16 >> 2] = jsvIteratorGetIntegerValue($2 + 24 | 0);
      if (HEAP32[$2 + 20 >> 2] < HEAP32[$2 + 164 >> 2]) {
       jsvStringIteratorSetCharAndNext($2 + 88 | 0, HEAP32[$2 + 16 >> 2] >> 8 << 24 >> 24);
       jsvStringIteratorSetCharAndNext($2 + 88 | 0, HEAP32[$2 + 16 >> 2] << 24 >> 24);
      }
      jsvIteratorNext($2 + 24 | 0);
      HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 20 >> 2] + 1;
      continue;
     }
     break;
    }
    jsvIteratorFree($2 + 24 | 0);
    while (1) {
     if (HEAP32[$2 + 20 >> 2] < HEAP32[$2 + 164 >> 2]) {
      jsvStringIteratorSetCharAndNext($2 + 88 | 0, 0);
      jsvStringIteratorSetCharAndNext($2 + 88 | 0, 0);
      HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 20 >> 2] + 1;
      continue;
     }
     break;
    }
   }
  }
  while (1) {
   if (jsvStringIteratorHasChar_12($2 + 88 | 0) & 1) {
    HEAP32[$2 + 12 >> 2] = graphicsGetPixel($2 + 184 | 0, HEAP32[$2 + 136 >> 2], HEAP32[$2 + 132 >> 2]);
    if ((HEAPU8[$2 + 188 | 0] | HEAPU8[$2 + 189 | 0] << 8 | (HEAPU8[$2 + 190 | 0] << 16 | HEAPU8[$2 + 191 | 0] << 24)) == 6) {
     HEAP32[$2 + 12 >> 2] = !!(HEAP32[$2 + 12 >> 2] & 16) | ((HEAP32[$2 + 12 >> 2] & 32768 ? 4 : 0) | (HEAP32[$2 + 12 >> 2] & 1024 ? 2 : 0));
    }
    HEAP32[$2 + 128 >> 2] = HEAP32[$2 + 12 >> 2] | HEAP32[$2 + 128 >> 2] << HEAP32[$2 + 168 >> 2];
    HEAP32[$2 + 124 >> 2] = HEAP32[$2 + 168 >> 2] + HEAP32[$2 + 124 >> 2];
    HEAP32[$2 + 136 >> 2] = HEAP32[$2 + 136 >> 2] + 1;
    if (HEAP32[$2 + 136 >> 2] >= HEAP32[$2 + 176 >> 2]) {
     HEAP32[$2 + 136 >> 2] = 0;
     HEAP32[$2 + 132 >> 2] = HEAP32[$2 + 132 >> 2] + 1;
    }
    while (1) {
     if (HEAPU32[$2 + 124 >> 2] >= 8) {
      jsvStringIteratorSetCharAndNext($2 + 88 | 0, HEAP32[$2 + 128 >> 2] >>> HEAP32[$2 + 124 >> 2] - 8 << 24 >> 24);
      HEAP32[$2 + 124 >> 2] = HEAP32[$2 + 124 >> 2] - 8;
      continue;
     }
     break;
    }
    continue;
   }
   break;
  }
  jsvStringIteratorFree_16($2 + 88 | 0);
  jsvUnLock(HEAP32[$2 + 148 >> 2]);
  if (HEAP8[$2 + 183 | 0] & 1) {
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 144 >> 2], 116403, HEAP32[$2 + 140 >> 2]);
   HEAP32[$2 + 268 >> 2] = HEAP32[$2 + 144 >> 2];
   break label$1;
  }
  HEAP32[$2 + 268 >> 2] = HEAP32[$2 + 140 >> 2];
 }
 __stack_pointer = $2 + 272 | 0;
 return HEAP32[$2 + 268 >> 2];
}

function jswrap_graphics_wrapString($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $3 = __stack_pointer - 304 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 296 >> 2] = $0;
 HEAP32[$3 + 292 >> 2] = $1;
 HEAP32[$3 + 288 >> 2] = $2;
 label$1: {
  if (!HEAP32[$3 + 292 >> 2]) {
   HEAP32[$3 + 300 >> 2] = jsvNewEmptyArray();
   break label$1;
  }
  if (HEAP32[$3 + 288 >> 2] <= 0) {
   HEAP32[$3 + 300 >> 2] = 0;
   break label$1;
  }
  if (!(graphicsGetFromVar($3 + 216 | 0, HEAP32[$3 + 296 >> 2]) & 1)) {
   HEAP32[$3 + 300 >> 2] = 0;
   break label$1;
  }
  _jswrap_graphics_getFontInfo($3 + 216 | 0, $3 + 192 | 0);
  HEAP32[$3 + 292 >> 2] = jsvAsString(HEAP32[$3 + 292 >> 2]);
  HEAP32[$3 + 188 >> 2] = jsvNewEmptyArray();
  HEAP32[$3 + 184 >> 2] = jsvNewFromEmptyString_14();
  HEAP32[$3 + 180 >> 2] = _jswrap_graphics_getCharWidth($3 + 192 | 0, 32);
  HEAP32[$3 + 176 >> 2] = 0;
  HEAP32[$3 + 172 >> 2] = 0;
  HEAP8[$3 + 171 | 0] = 0;
  HEAP8[$3 + 170 | 0] = 0;
  HEAP32[$3 + 164 >> 2] = 0;
  HEAP8[$3 + 163 | 0] = 0;
  HEAP8[$3 + 162 | 0] = 0;
  jsvStringIteratorNewUTF8($3 + 120 | 0, HEAP32[$3 + 292 >> 2], 0);
  while (1) {
   $0 = 1;
   if (!(jsvStringIteratorHasChar_12($3 + 120 | 0) & 1)) {
    $0 = HEAPU8[$3 + 163 | 0];
   }
   label$7: {
    if (!($0 & 1)) {
     break label$7;
    }
    HEAP32[$3 + 116 >> 2] = jsvStringIteratorGetUTF8CharAndNext($3 + 120 | 0);
    $0 = 1;
    label$8: {
     if (HEAP8[$3 + 163 | 0] & 1) {
      break label$8;
     }
     $0 = 1;
     if (HEAP32[$3 + 116 >> 2] == 10) {
      break label$8;
     }
     $0 = HEAP32[$3 + 116 >> 2] == 32;
    }
    HEAP8[$3 + 115 | 0] = $0;
    if (HEAP8[$3 + 171 | 0] & 1 ? 1 : HEAP8[$3 + 115 | 0] & 1) {
     HEAP32[$3 + 108 >> 2] = jsvStringIteratorGetIndex_6($3 + 120 | 0);
     label$11: {
      if (!(HEAP8[$3 + 162 | 0] & 1 | HEAP32[$3 + 288 >> 2] < (HEAP32[$3 + 176 >> 2] + (HEAP32[$3 + 172 >> 2] + HEAP32[$3 + 180 >> 2] | 0) | 0))) {
       if (!(!HEAP8[$3 + 170 | 0] | !HEAP32[$3 + 172 >> 2] & HEAP8[$3 + 170 | 0] == 32)) {
        jsvAppendCharacter_2(HEAP32[$3 + 184 >> 2], HEAP8[$3 + 170 | 0]);
        HEAP32[$3 + 172 >> 2] = HEAP32[$3 + 180 >> 2] + HEAP32[$3 + 172 >> 2];
        HEAP8[$3 + 170 | 0] = 0;
       }
       jsvAppendStringVar(HEAP32[$3 + 184 >> 2], HEAP32[$3 + 292 >> 2], HEAP32[$3 + 164 >> 2], HEAP32[$3 + 108 >> 2] - (HEAP32[$3 + 164 >> 2] + 1 | 0) | 0);
       HEAP32[$3 + 172 >> 2] = HEAP32[$3 + 176 >> 2] + HEAP32[$3 + 172 >> 2];
       break label$11;
      }
      HEAP32[$3 + 172 >> 2] = HEAP32[$3 + 176 >> 2];
      if (wasm2js_i32$0 = 1, wasm2js_i32$1 = jsvGetStringLength(HEAP32[$3 + 184 >> 2]), 
      wasm2js_i32$2 = HEAP8[$3 + 162 | 0] & 1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) {
       jsvArrayPush(HEAP32[$3 + 188 >> 2], HEAP32[$3 + 184 >> 2]);
      }
      jsvUnLock(HEAP32[$3 + 184 >> 2]);
      HEAP32[$3 + 184 >> 2] = 0;
      while (1) {
       if (HEAP32[$3 + 176 >> 2] > HEAP32[$3 + 288 >> 2]) {
        HEAP32[$3 + 104 >> 2] = 0;
        HEAP32[$3 + 184 >> 2] = jsvNewFromEmptyString_14();
        while (1) {
         label$20: {
          if (HEAP32[$3 + 164 >> 2] >= HEAP32[$3 + 108 >> 2]) {
           break label$20;
          }
          HEAP8[$3 + 103 | 0] = jsvGetCharInString(HEAP32[$3 + 292 >> 2], HEAP32[$3 + 164 >> 2]);
          HEAP32[$3 + 96 >> 2] = _jswrap_graphics_getCharWidth($3 + 192 | 0, HEAP8[$3 + 103 | 0]);
          if (HEAP32[$3 + 104 >> 2] ? HEAP32[$3 + 288 >> 2] <= (HEAP32[$3 + 104 >> 2] + HEAP32[$3 + 96 >> 2] | 0) : 0) {
           break label$20;
          }
          HEAP32[$3 + 164 >> 2] = HEAP32[$3 + 164 >> 2] + 1;
          HEAP32[$3 + 176 >> 2] = HEAP32[$3 + 176 >> 2] - HEAP32[$3 + 96 >> 2];
          HEAP32[$3 + 172 >> 2] = HEAP32[$3 + 172 >> 2] - HEAP32[$3 + 96 >> 2];
          HEAP32[$3 + 104 >> 2] = HEAP32[$3 + 96 >> 2] + HEAP32[$3 + 104 >> 2];
          jsvAppendCharacter_2(HEAP32[$3 + 184 >> 2], HEAP8[$3 + 103 | 0]);
          continue;
         }
         break;
        }
        jsvArrayPush(HEAP32[$3 + 188 >> 2], HEAP32[$3 + 184 >> 2]);
        jsvUnLock(HEAP32[$3 + 184 >> 2]);
        continue;
       }
       break;
      }
      HEAP32[$3 + 184 >> 2] = jsvNewFromEmptyString_14();
      jsvAppendStringVar(HEAP32[$3 + 184 >> 2], HEAP32[$3 + 292 >> 2], HEAP32[$3 + 164 >> 2], HEAP32[$3 + 108 >> 2] - (HEAP32[$3 + 164 >> 2] + 1 | 0) | 0);
      if (HEAP8[$3 + 162 | 0] & 1) {
       HEAP8[$3 + 170 | 0] = 32;
      }
     }
     if (!(!(HEAP8[$3 + 171 | 0] & 1) | HEAP8[$3 + 115 | 0] & 1)) {
      HEAP32[$3 + 108 >> 2] = HEAP32[$3 + 108 >> 2] - 1;
     }
     if (!(!(HEAP8[$3 + 115 | 0] & 1) | HEAP32[$3 + 116 >> 2] <= 0)) {
      HEAP8[$3 + 170 | 0] = HEAP32[$3 + 116 >> 2];
     }
     HEAP32[$3 + 176 >> 2] = 0;
     HEAP32[$3 + 164 >> 2] = HEAP32[$3 + 108 >> 2];
     HEAP8[$3 + 162 | 0] = HEAP32[$3 + 116 >> 2] == 10;
     HEAP8[$3 + 171 | 0] = 0;
     if (HEAP8[$3 + 163 | 0] & 1) {
      break label$7;
     }
     if (HEAP32[$3 + 116 >> 2]) {
      continue;
     }
    }
    HEAP8[$3 + 171 | 0] = 0;
    if (!HEAP32[$3 + 116 >> 2]) {
     HEAP32[$3 + 4 >> 2] = jsvConvertToUTF8Index(HEAP32[$3 + 292 >> 2], jsvStringIteratorGetIndex_6($3 + 120 | 0));
     if (_jswrap_graphics_parseImage($3 + 216 | 0, HEAP32[$3 + 292 >> 2], HEAP32[$3 + 4 >> 2], $3 + 8 | 0) & 1) {
      jsvStringIteratorGotoUTF8($3 + 120 | 0, HEAP32[$3 + 292 >> 2], HEAPU16[$3 + 58 >> 1] + (HEAP32[$3 + 4 >> 2] + HEAPU16[$3 + 56 >> 1] | 0) | 0);
      _jswrap_graphics_freeImageInfo($3 + 8 | 0);
      HEAP32[$3 + 176 >> 2] = HEAP32[$3 + 8 >> 2] + HEAP32[$3 + 176 >> 2];
      HEAP8[$3 + 171 | 0] = 1;
      if (!(jsvStringIteratorHasChar_12($3 + 120 | 0) & 1)) {
       HEAP8[$3 + 163 | 0] = 1;
      }
     }
     continue;
    }
    HEAP32[$3 + 176 >> 2] = _jswrap_graphics_getCharWidth($3 + 192 | 0, HEAP32[$3 + 116 >> 2]) + HEAP32[$3 + 176 >> 2];
    label$28: {
     label$29: {
      if (HEAP32[$3 + 116 >> 2] == 44 | HEAP32[$3 + 116 >> 2] == 46 | (HEAP32[$3 + 116 >> 2] == 45 | HEAP32[$3 + 116 >> 2] == 47)) {
       break label$29;
      }
      if (HEAP32[$3 + 116 >> 2] == 92) {
       break label$29;
      }
      if (HEAP32[$3 + 116 >> 2] != 58) {
       break label$28;
      }
     }
     HEAP8[$3 + 171 | 0] = 1;
    }
    if (!(jsvStringIteratorHasChar_12($3 + 120 | 0) & 1)) {
     HEAP8[$3 + 163 | 0] = 1;
    }
    continue;
   }
   break;
  }
  jsvStringIteratorFree_16($3 + 120 | 0);
  if (jsvGetStringLength(HEAP32[$3 + 184 >> 2])) {
   jsvArrayPush(HEAP32[$3 + 188 >> 2], HEAP32[$3 + 184 >> 2]);
  }
  jsvUnLock2(HEAP32[$3 + 292 >> 2], HEAP32[$3 + 184 >> 2]);
  _jswrap_graphics_freeFontInfo($3 + 192 | 0);
  HEAP32[$3 + 300 >> 2] = HEAP32[$3 + 188 >> 2];
 }
 __stack_pointer = $3 + 304 | 0;
 return HEAP32[$3 + 300 >> 2];
}

function tflite__reference_ops__Conv_28tflite__ConvParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 var $11 = 0, $12 = Math_fround(0);
 $11 = __stack_pointer - 176 | 0;
 __stack_pointer = $11;
 HEAP32[$11 + 172 >> 2] = $0;
 HEAP32[$11 + 168 >> 2] = $1;
 HEAP32[$11 + 164 >> 2] = $2;
 HEAP32[$11 + 160 >> 2] = $3;
 HEAP32[$11 + 156 >> 2] = $4;
 HEAP32[$11 + 152 >> 2] = $5;
 HEAP32[$11 + 148 >> 2] = $6;
 HEAP32[$11 + 144 >> 2] = $7;
 HEAP32[$11 + 140 >> 2] = $8;
 HEAP32[$11 + 136 >> 2] = $9;
 HEAP32[$11 + 132 >> 2] = $10;
 HEAP32[$11 + 128 >> 2] = HEAP16[HEAP32[$11 + 172 >> 2] + 10 >> 1];
 HEAP32[$11 + 124 >> 2] = HEAP16[HEAP32[$11 + 172 >> 2] + 12 >> 1];
 HEAP32[$11 + 120 >> 2] = HEAP16[HEAP32[$11 + 172 >> 2] + 14 >> 1];
 HEAP32[$11 + 116 >> 2] = HEAP16[HEAP32[$11 + 172 >> 2] + 16 >> 1];
 HEAP32[$11 + 112 >> 2] = HEAP16[HEAP32[$11 + 172 >> 2] + 2 >> 1];
 HEAP32[$11 + 108 >> 2] = HEAP16[HEAP32[$11 + 172 >> 2] + 4 >> 1];
 HEAPF32[$11 + 104 >> 2] = HEAPF32[HEAP32[$11 + 172 >> 2] + 48 >> 2];
 HEAPF32[$11 + 100 >> 2] = HEAPF32[HEAP32[$11 + 172 >> 2] + 52 >> 2];
 label$1: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$11 + 168 >> 2]) | 0) != 4) {
   break label$1;
  }
 }
 label$2: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$11 + 160 >> 2]) | 0) != 4) {
   break label$2;
  }
 }
 label$3: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$11 + 144 >> 2]) | 0) != 4) {
   break label$3;
  }
 }
 HEAP32[$11 + 96 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$11 + 168 >> 2], 0, HEAP32[$11 + 144 >> 2], 0);
 HEAP32[$11 + 92 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$11 + 168 >> 2], 3, HEAP32[$11 + 160 >> 2], 3);
 HEAP32[$11 + 88 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$11 + 160 >> 2], 0, HEAP32[$11 + 144 >> 2], 3);
 if (HEAP32[$11 + 148 >> 2]) {
  label$5: {
   if ((tflite__RuntimeShape__FlatSize_28_29_20const(HEAP32[$11 + 152 >> 2]) | 0) != HEAP32[$11 + 88 >> 2]) {
    break label$5;
   }
  }
 }
 HEAP32[$11 + 84 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 168 >> 2], 1);
 HEAP32[$11 + 80 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 168 >> 2], 2);
 HEAP32[$11 + 76 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 160 >> 2], 1);
 HEAP32[$11 + 72 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 160 >> 2], 2);
 HEAP32[$11 + 68 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 144 >> 2], 1);
 HEAP32[$11 + 64 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$11 + 144 >> 2], 2);
 HEAP32[$11 + 60 >> 2] = 0;
 while (1) {
  if (HEAP32[$11 + 60 >> 2] < HEAP32[$11 + 96 >> 2]) {
   HEAP32[$11 + 56 >> 2] = 0;
   while (1) {
    if (HEAP32[$11 + 56 >> 2] < HEAP32[$11 + 68 >> 2]) {
     HEAP32[$11 + 52 >> 2] = 0;
     while (1) {
      if (HEAP32[$11 + 52 >> 2] < HEAP32[$11 + 64 >> 2]) {
       HEAP32[$11 + 48 >> 2] = 0;
       while (1) {
        if (HEAP32[$11 + 48 >> 2] < HEAP32[$11 + 88 >> 2]) {
         HEAP32[$11 + 44 >> 2] = Math_imul(HEAP32[$11 + 52 >> 2], HEAP32[$11 + 128 >> 2]) - HEAP32[$11 + 112 >> 2];
         HEAP32[$11 + 40 >> 2] = Math_imul(HEAP32[$11 + 56 >> 2], HEAP32[$11 + 124 >> 2]) - HEAP32[$11 + 108 >> 2];
         HEAPF32[$11 + 36 >> 2] = 0;
         HEAP32[$11 + 32 >> 2] = 0;
         while (1) {
          if (HEAP32[$11 + 32 >> 2] < HEAP32[$11 + 76 >> 2]) {
           HEAP32[$11 + 28 >> 2] = 0;
           while (1) {
            if (HEAP32[$11 + 28 >> 2] < HEAP32[$11 + 72 >> 2]) {
             HEAP32[$11 + 24 >> 2] = 0;
             while (1) {
              if (HEAP32[$11 + 24 >> 2] < HEAP32[$11 + 92 >> 2]) {
               HEAP32[$11 + 20 >> 2] = HEAP32[$11 + 44 >> 2] + Math_imul(HEAP32[$11 + 120 >> 2], HEAP32[$11 + 28 >> 2]);
               HEAP32[$11 + 16 >> 2] = HEAP32[$11 + 40 >> 2] + Math_imul(HEAP32[$11 + 116 >> 2], HEAP32[$11 + 32 >> 2]);
               if (!(HEAP32[$11 + 20 >> 2] < 0 | HEAP32[$11 + 20 >> 2] >= HEAP32[$11 + 80 >> 2] | (HEAP32[$11 + 16 >> 2] < 0 | HEAP32[$11 + 16 >> 2] >= HEAP32[$11 + 84 >> 2]))) {
                HEAPF32[$11 + 12 >> 2] = HEAPF32[HEAP32[$11 + 164 >> 2] + (tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$11 + 168 >> 2], HEAP32[$11 + 60 >> 2], HEAP32[$11 + 16 >> 2], HEAP32[$11 + 20 >> 2], HEAP32[$11 + 24 >> 2]) << 2) >> 2];
                HEAPF32[$11 + 8 >> 2] = HEAPF32[HEAP32[$11 + 156 >> 2] + (tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$11 + 160 >> 2], HEAP32[$11 + 48 >> 2], HEAP32[$11 + 32 >> 2], HEAP32[$11 + 28 >> 2], HEAP32[$11 + 24 >> 2]) << 2) >> 2];
                HEAPF32[$11 + 36 >> 2] = Math_fround(HEAPF32[$11 + 12 >> 2] * HEAPF32[$11 + 8 >> 2]) + HEAPF32[$11 + 36 >> 2];
               }
               HEAP32[$11 + 24 >> 2] = HEAP32[$11 + 24 >> 2] + 1;
               continue;
              }
              break;
             }
             HEAP32[$11 + 28 >> 2] = HEAP32[$11 + 28 >> 2] + 1;
             continue;
            }
            break;
           }
           HEAP32[$11 + 32 >> 2] = HEAP32[$11 + 32 >> 2] + 1;
           continue;
          }
          break;
         }
         HEAPF32[$11 + 4 >> 2] = 0;
         if (HEAP32[$11 + 148 >> 2]) {
          HEAPF32[$11 + 4 >> 2] = HEAPF32[HEAP32[$11 + 148 >> 2] + (HEAP32[$11 + 48 >> 2] << 2) >> 2];
         }
         $12 = float_20tflite__ActivationFunctionWithMinMax_float__28float_2c_20float_2c_20float_29(Math_fround(HEAPF32[$11 + 36 >> 2] + HEAPF32[$11 + 4 >> 2]), HEAPF32[$11 + 104 >> 2], HEAPF32[$11 + 100 >> 2]);
         HEAPF32[HEAP32[$11 + 140 >> 2] + (tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$11 + 144 >> 2], HEAP32[$11 + 60 >> 2], HEAP32[$11 + 56 >> 2], HEAP32[$11 + 52 >> 2], HEAP32[$11 + 48 >> 2]) << 2) >> 2] = $12;
         HEAP32[$11 + 48 >> 2] = HEAP32[$11 + 48 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$11 + 52 >> 2] = HEAP32[$11 + 52 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$11 + 56 >> 2] = HEAP32[$11 + 56 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$11 + 60 >> 2] = HEAP32[$11 + 60 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $11 + 176 | 0;
}

function tflite__PopulateConvolutionQuantizationParams_28TfLiteContext__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20TfLiteFusedActivation_20const__2c_20int__2c_20int__2c_20int__2c_20int__2c_20int__2c_20int__2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12) {
 var $13 = 0, $14 = Math_fround(0);
 $13 = __stack_pointer - 256 | 0;
 __stack_pointer = $13;
 HEAP32[$13 + 248 >> 2] = $0;
 HEAP32[$13 + 244 >> 2] = $1;
 HEAP32[$13 + 240 >> 2] = $2;
 HEAP32[$13 + 236 >> 2] = $3;
 HEAP32[$13 + 232 >> 2] = $4;
 HEAP32[$13 + 228 >> 2] = $5;
 HEAP32[$13 + 224 >> 2] = $6;
 HEAP32[$13 + 220 >> 2] = $7;
 HEAP32[$13 + 216 >> 2] = $8;
 HEAP32[$13 + 212 >> 2] = $9;
 HEAP32[$13 + 208 >> 2] = $10;
 HEAP32[$13 + 204 >> 2] = $11;
 HEAP32[$13 + 200 >> 2] = $12;
 label$1: {
  if (HEAP32[HEAP32[$13 + 244 >> 2] >> 2] != 1) {
   $0 = HEAP32[HEAP32[$13 + 248 >> 2] + 20 >> 2];
   $1 = HEAP32[$13 + 248 >> 2];
   $2 = HEAP32[HEAP32[$13 + 244 >> 2] >> 2];
   HEAP32[$13 + 12 >> 2] = 1;
   HEAP32[$13 + 8 >> 2] = $2;
   HEAP32[$13 + 4 >> 2] = 117441;
   HEAP32[$13 >> 2] = 119930;
   FUNCTION_TABLE[$0 | 0]($1, 143069, $13);
   HEAP32[$13 + 252 >> 2] = 1;
   break label$1;
  }
  if (HEAP32[HEAP32[$13 + 240 >> 2] >> 2] != 1) {
   $0 = HEAP32[HEAP32[$13 + 248 >> 2] + 20 >> 2];
   $1 = HEAP32[$13 + 248 >> 2];
   $2 = HEAP32[HEAP32[$13 + 240 >> 2] >> 2];
   HEAP32[$13 + 28 >> 2] = 1;
   HEAP32[$13 + 24 >> 2] = $2;
   HEAP32[$13 + 20 >> 2] = 117441;
   HEAP32[$13 + 16 >> 2] = 119955;
   FUNCTION_TABLE[$0 | 0]($1, 143069, $13 + 16 | 0);
   HEAP32[$13 + 252 >> 2] = 1;
   break label$1;
  }
  HEAP32[$13 + 196 >> 2] = HEAP32[HEAP32[$13 + 240 >> 2] + 4 >> 2];
  if (!HEAP32[$13 + 196 >> 2]) {
   $0 = HEAP32[HEAP32[$13 + 248 >> 2] + 20 >> 2];
   $1 = HEAP32[$13 + 248 >> 2];
   HEAP32[$13 + 112 >> 2] = 117421;
   FUNCTION_TABLE[$0 | 0]($1, 127303, $13 + 112 | 0);
   HEAP32[$13 + 252 >> 2] = 1;
   break label$1;
  }
  if (!HEAP32[HEAP32[$13 + 196 >> 2] >> 2]) {
   $0 = HEAP32[HEAP32[$13 + 248 >> 2] + 20 >> 2];
   $1 = HEAP32[$13 + 248 >> 2];
   HEAP32[$13 + 96 >> 2] = 120229;
   FUNCTION_TABLE[$0 | 0]($1, 127303, $13 + 96 | 0);
   HEAP32[$13 + 252 >> 2] = 1;
   break label$1;
  }
  HEAP8[$13 + 195 | 0] = HEAP32[HEAP32[HEAP32[$13 + 196 >> 2] >> 2] >> 2] > 1;
  if (HEAP8[$13 + 195 | 0] & 1) {
   if (!(HEAP32[HEAP32[$13 + 244 >> 2] + 28 >> 2] == 9 | HEAP32[HEAP32[$13 + 244 >> 2] + 28 >> 2] == 7)) {
    $0 = HEAP32[HEAP32[$13 + 248 >> 2] + 20 >> 2];
    $1 = HEAP32[$13 + 248 >> 2];
    HEAP32[$13 + 80 >> 2] = 126068;
    FUNCTION_TABLE[$0 | 0]($1, 127303, $13 + 80 | 0);
    HEAP32[$13 + 252 >> 2] = 1;
    break label$1;
   }
   if (HEAP32[HEAP32[$13 + 240 >> 2] + 28 >> 2] != 9) {
    $0 = HEAP32[HEAP32[$13 + 248 >> 2] + 20 >> 2];
    $1 = HEAP32[$13 + 248 >> 2];
    $2 = HEAP32[HEAP32[$13 + 240 >> 2] + 28 >> 2];
    HEAP32[$13 + 44 >> 2] = 9;
    HEAP32[$13 + 40 >> 2] = $2;
    HEAP32[$13 + 36 >> 2] = 125840;
    HEAP32[$13 + 32 >> 2] = 119891;
    FUNCTION_TABLE[$0 | 0]($1, 143069, $13 + 32 | 0);
    HEAP32[$13 + 252 >> 2] = 1;
    break label$1;
   }
   if (HEAP32[HEAP32[HEAP32[$13 + 196 >> 2] >> 2] >> 2] != HEAP32[$13 + 200 >> 2]) {
    $0 = HEAP32[HEAP32[$13 + 248 >> 2] + 20 >> 2];
    $1 = HEAP32[$13 + 248 >> 2];
    $2 = HEAP32[HEAP32[HEAP32[$13 + 196 >> 2] >> 2] >> 2];
    HEAP32[$13 + 60 >> 2] = HEAP32[$13 + 200 >> 2];
    HEAP32[$13 + 56 >> 2] = $2;
    HEAP32[$13 + 52 >> 2] = 115400;
    HEAP32[$13 + 48 >> 2] = 119257;
    FUNCTION_TABLE[$0 | 0]($1, 143069, $13 + 48 | 0);
    HEAP32[$13 + 252 >> 2] = 1;
    break label$1;
   }
   if (HEAP32[$13 + 200 >> 2] != HEAP32[(HEAP32[HEAP32[$13 + 240 >> 2] + 20 >> 2] + 4 | 0) + (HEAP32[HEAP32[$13 + 196 >> 2] + 8 >> 2] << 2) >> 2]) {
    $0 = HEAP32[HEAP32[$13 + 248 >> 2] + 20 >> 2];
    $1 = HEAP32[$13 + 248 >> 2];
    $2 = HEAP32[$13 + 200 >> 2];
    HEAP32[$13 + 76 >> 2] = HEAP32[(HEAP32[HEAP32[$13 + 240 >> 2] + 20 >> 2] + 4 | 0) + (HEAP32[HEAP32[$13 + 196 >> 2] + 8 >> 2] << 2) >> 2];
    HEAP32[$13 + 72 >> 2] = $2;
    HEAP32[$13 + 68 >> 2] = 123049;
    HEAP32[$13 + 64 >> 2] = 115400;
    FUNCTION_TABLE[$0 | 0]($1, 143069, $13 - -64 | 0);
    HEAP32[$13 + 252 >> 2] = 1;
    break label$1;
   }
  }
  HEAPF32[$13 + 188 >> 2] = HEAPF32[HEAP32[$13 + 244 >> 2] + 8 >> 2];
  HEAPF32[$13 + 184 >> 2] = HEAPF32[HEAP32[$13 + 232 >> 2] + 8 >> 2];
  HEAP32[$13 + 180 >> 2] = HEAP32[HEAP32[$13 + 196 >> 2] >> 2] + 4;
  HEAP32[$13 + 176 >> 2] = 0;
  while (1) {
   if (HEAP32[$13 + 176 >> 2] < HEAP32[$13 + 200 >> 2]) {
    if (HEAP8[$13 + 195 | 0] & 1) {
     $14 = HEAPF32[HEAP32[$13 + 180 >> 2] + (HEAP32[$13 + 176 >> 2] << 2) >> 2];
    } else {
     $14 = HEAPF32[HEAP32[$13 + 180 >> 2] >> 2];
    }
    HEAPF32[$13 + 172 >> 2] = $14;
    HEAPF64[$13 + 160 >> 3] = HEAPF32[$13 + 172 >> 2];
    HEAPF64[$13 + 152 >> 3] = +HEAPF32[$13 + 188 >> 2] * HEAPF64[$13 + 160 >> 3] / +HEAPF32[$13 + 184 >> 2];
    tflite__QuantizeMultiplier_28double_2c_20int__2c_20int__29(HEAPF64[$13 + 152 >> 3], $13 + 148 | 0, $13 + 144 | 0);
    HEAP32[HEAP32[$13 + 208 >> 2] + (HEAP32[$13 + 176 >> 2] << 2) >> 2] = HEAP32[$13 + 148 >> 2];
    HEAP32[HEAP32[$13 + 204 >> 2] + (HEAP32[$13 + 176 >> 2] << 2) >> 2] = HEAP32[$13 + 144 >> 2];
    HEAP32[$13 + 176 >> 2] = HEAP32[$13 + 176 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP32[HEAP32[$13 + 244 >> 2] + 28 >> 2] == 3) {
   HEAPF64[$13 + 136 >> 3] = 0;
   HEAP32[$13 + 132 >> 2] = tflite__GetQuantizedConvolutionMultipler_28TfLiteContext__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20double__29(HEAP32[$13 + 248 >> 2], HEAP32[$13 + 244 >> 2], HEAP32[$13 + 240 >> 2], HEAP32[$13 + 236 >> 2], HEAP32[$13 + 232 >> 2], $13 + 136 | 0);
   if (HEAP32[$13 + 132 >> 2]) {
    HEAP32[$13 + 252 >> 2] = HEAP32[$13 + 132 >> 2];
    break label$1;
   }
   tflite__QuantizeMultiplier_28double_2c_20int__2c_20int__29(HEAPF64[$13 + 136 >> 3], HEAP32[$13 + 224 >> 2], $13 + 128 | 0);
   HEAP32[HEAP32[$13 + 220 >> 2] >> 2] = 0 - HEAP32[$13 + 128 >> 2];
  }
  if (!(!(HEAP32[HEAP32[$13 + 244 >> 2] + 28 >> 2] == 9 | HEAP32[HEAP32[$13 + 244 >> 2] + 28 >> 2] == 3) & HEAP32[HEAP32[$13 + 244 >> 2] + 28 >> 2] != 7)) {
   HEAP32[$13 + 124 >> 2] = tflite__CalculateActivationRangeQuantized_28TfLiteContext__2c_20TfLiteFusedActivation_2c_20TfLiteTensor__2c_20int__2c_20int__29(HEAP32[$13 + 248 >> 2], HEAP32[HEAP32[$13 + 228 >> 2] >> 2], HEAP32[$13 + 232 >> 2], HEAP32[$13 + 216 >> 2], HEAP32[$13 + 212 >> 2]);
   if (HEAP32[$13 + 124 >> 2]) {
    HEAP32[$13 + 252 >> 2] = HEAP32[$13 + 124 >> 2];
    break label$1;
   }
  }
  HEAP32[$13 + 252 >> 2] = 0;
 }
 __stack_pointer = $13 + 256 | 0;
 return HEAP32[$13 + 252 >> 2];
}

function tflite__ops__micro__dequantize__Eval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 272 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 264 >> 2] = $0;
 HEAP32[$2 + 260 >> 2] = $1;
 label$1: {
  if (!HEAP32[HEAP32[$2 + 260 >> 2] + 8 >> 2]) {
   break label$1;
  }
 }
 HEAP32[$2 + 256 >> 2] = HEAP32[HEAP32[$2 + 260 >> 2] + 8 >> 2];
 HEAP32[$2 + 252 >> 2] = tflite__micro__GetEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 264 >> 2], HEAP32[$2 + 260 >> 2], 0);
 HEAP32[$2 + 248 >> 2] = tflite__micro__GetEvalOutput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 264 >> 2], HEAP32[$2 + 260 >> 2], 0);
 label$2: {
  label$3: {
   if (HEAP32[HEAP32[$2 + 248 >> 2] + 8 >> 2] == 1) {
    label$5: {
     switch (HEAP32[HEAP32[$2 + 252 >> 2] + 8 >> 2] - 3 | 0) {
     case 0:
      $0 = HEAP32[$2 + 256 >> 2];
      tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($2 + 224 | 0, HEAP32[$2 + 252 >> 2]);
      $1 = unsigned_20char_20const__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor_20const__29(HEAP32[$2 + 252 >> 2]);
      tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($2 + 200 | 0, HEAP32[$2 + 248 >> 2]);
      void_20tflite__reference_ops__Dequantize_unsigned_20char_2c_20float__28tflite__DequantizationParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $2 + 224 | 0, $1, $2 + 200 | 0, float__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor__29(HEAP32[$2 + 248 >> 2]));
      tflite__RuntimeShape___RuntimeShape_28_29($2 + 200 | 0);
      tflite__RuntimeShape___RuntimeShape_28_29($2 + 224 | 0);
      break label$3;

     case 6:
      $0 = HEAP32[$2 + 256 >> 2];
      tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($2 + 176 | 0, HEAP32[$2 + 252 >> 2]);
      $1 = signed_20char_20const__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor_20const__29(HEAP32[$2 + 252 >> 2]);
      tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($2 + 152 | 0, HEAP32[$2 + 248 >> 2]);
      void_20tflite__reference_ops__Dequantize_signed_20char_2c_20float__28tflite__DequantizationParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $2 + 176 | 0, $1, $2 + 152 | 0, float__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor__29(HEAP32[$2 + 248 >> 2]));
      tflite__RuntimeShape___RuntimeShape_28_29($2 + 152 | 0);
      tflite__RuntimeShape___RuntimeShape_28_29($2 + 176 | 0);
      break label$3;

     case 4:
      $0 = HEAP32[$2 + 256 >> 2];
      tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($2 + 128 | 0, HEAP32[$2 + 252 >> 2]);
      $1 = short_20const__20tflite__micro__GetTensorData_short__28TfLiteEvalTensor_20const__29(HEAP32[$2 + 252 >> 2]);
      tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($2 + 104 | 0, HEAP32[$2 + 248 >> 2]);
      void_20tflite__reference_ops__Dequantize_short_2c_20float__28tflite__DequantizationParams_20const__2c_20tflite__RuntimeShape_20const__2c_20short_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $2 + 128 | 0, $1, $2 + 104 | 0, float__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor__29(HEAP32[$2 + 248 >> 2]));
      tflite__RuntimeShape___RuntimeShape_28_29($2 + 104 | 0);
      tflite__RuntimeShape___RuntimeShape_28_29($2 + 128 | 0);
      break label$3;

     default:
      break label$5;
     }
    }
    $0 = HEAP32[HEAP32[$2 + 264 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 264 >> 2];
    $3 = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 252 >> 2] + 8 >> 2]);
    HEAP32[$2 + 4 >> 2] = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 248 >> 2] + 8 >> 2]);
    HEAP32[$2 >> 2] = $3;
    FUNCTION_TABLE[$0 | 0]($1, 127501, $2);
    HEAP32[$2 + 268 >> 2] = 1;
    break label$2;
   }
   label$9: {
    if (HEAP32[HEAP32[$2 + 248 >> 2] + 8 >> 2] == 2) {
     tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($2 + 72 | 0, HEAP32[$2 + 252 >> 2]);
     tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($2 + 48 | 0, HEAP32[$2 + 248 >> 2]);
     $0 = tflite__MatchingFlatSize_28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__29($2 + 72 | 0, $2 + 48 | 0);
     tflite__RuntimeShape___RuntimeShape_28_29($2 + 48 | 0);
     tflite__RuntimeShape___RuntimeShape_28_29($2 + 72 | 0);
     HEAP32[$2 + 100 >> 2] = $0;
     label$11: {
      label$12: {
       switch (HEAP32[HEAP32[$2 + 252 >> 2] + 8 >> 2] - 7 | 0) {
       case 0:
        void_20tflite__reference_ops__Requantize_short_2c_20int__28short_20const__2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__29(short_20const__20tflite__micro__GetTensorData_short__28TfLiteEvalTensor_20const__29(HEAP32[$2 + 252 >> 2]), HEAP32[$2 + 100 >> 2], HEAP32[HEAP32[$2 + 256 >> 2] + 16 >> 2], HEAP32[HEAP32[$2 + 256 >> 2] + 20 >> 2], HEAP32[HEAP32[$2 + 256 >> 2] + 8 >> 2], HEAP32[HEAP32[$2 + 256 >> 2] + 24 >> 2], int__20tflite__micro__GetTensorData_int__28TfLiteEvalTensor__29(HEAP32[$2 + 248 >> 2]));
        break label$11;

       case 2:
        void_20tflite__reference_ops__Requantize_signed_20char_2c_20int__28signed_20char_20const__2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__29(signed_20char_20const__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor_20const__29(HEAP32[$2 + 252 >> 2]), HEAP32[$2 + 100 >> 2], HEAP32[HEAP32[$2 + 256 >> 2] + 16 >> 2], HEAP32[HEAP32[$2 + 256 >> 2] + 20 >> 2], HEAP32[HEAP32[$2 + 256 >> 2] + 8 >> 2], HEAP32[HEAP32[$2 + 256 >> 2] + 24 >> 2], int__20tflite__micro__GetTensorData_int__28TfLiteEvalTensor__29(HEAP32[$2 + 248 >> 2]));
        break label$11;

       default:
        break label$12;
       }
      }
      $0 = HEAP32[HEAP32[$2 + 264 >> 2] + 20 >> 2];
      $1 = HEAP32[$2 + 264 >> 2];
      $3 = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 252 >> 2] + 8 >> 2]);
      HEAP32[$2 + 20 >> 2] = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 248 >> 2] + 8 >> 2]);
      HEAP32[$2 + 16 >> 2] = $3;
      FUNCTION_TABLE[$0 | 0]($1, 127501, $2 + 16 | 0);
      HEAP32[$2 + 268 >> 2] = 1;
      break label$2;
     }
     break label$9;
    }
    $0 = HEAP32[HEAP32[$2 + 264 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 264 >> 2];
    $3 = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 252 >> 2] + 8 >> 2]);
    HEAP32[$2 + 36 >> 2] = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 248 >> 2] + 8 >> 2]);
    HEAP32[$2 + 32 >> 2] = $3;
    FUNCTION_TABLE[$0 | 0]($1, 127501, $2 + 32 | 0);
    HEAP32[$2 + 268 >> 2] = 1;
    break label$2;
   }
  }
  HEAP32[$2 + 268 >> 2] = 0;
 }
 __stack_pointer = $2 + 272 | 0;
 return HEAP32[$2 + 268 >> 2];
}

function tflite__reference_ops__DepthwiseConv_28tflite__DepthwiseParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = Math_fround(0);
 $9 = __stack_pointer - 176 | 0;
 __stack_pointer = $9;
 HEAP32[$9 + 172 >> 2] = $0;
 HEAP32[$9 + 168 >> 2] = $1;
 HEAP32[$9 + 164 >> 2] = $2;
 HEAP32[$9 + 160 >> 2] = $3;
 HEAP32[$9 + 156 >> 2] = $4;
 HEAP32[$9 + 152 >> 2] = $5;
 HEAP32[$9 + 148 >> 2] = $6;
 HEAP32[$9 + 144 >> 2] = $7;
 HEAP32[$9 + 140 >> 2] = $8;
 HEAP32[$9 + 136 >> 2] = HEAP16[HEAP32[$9 + 172 >> 2] + 10 >> 1];
 HEAP32[$9 + 132 >> 2] = HEAP16[HEAP32[$9 + 172 >> 2] + 12 >> 1];
 HEAP32[$9 + 128 >> 2] = HEAP16[HEAP32[$9 + 172 >> 2] + 14 >> 1];
 HEAP32[$9 + 124 >> 2] = HEAP16[HEAP32[$9 + 172 >> 2] + 16 >> 1];
 HEAP32[$9 + 120 >> 2] = HEAP16[HEAP32[$9 + 172 >> 2] + 2 >> 1];
 HEAP32[$9 + 116 >> 2] = HEAP16[HEAP32[$9 + 172 >> 2] + 4 >> 1];
 HEAP32[$9 + 112 >> 2] = HEAP16[HEAP32[$9 + 172 >> 2] + 18 >> 1];
 HEAPF32[$9 + 108 >> 2] = HEAPF32[HEAP32[$9 + 172 >> 2] + 48 >> 2];
 HEAPF32[$9 + 104 >> 2] = HEAPF32[HEAP32[$9 + 172 >> 2] + 52 >> 2];
 label$1: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$9 + 168 >> 2]) | 0) != 4) {
   break label$1;
  }
 }
 label$2: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$9 + 160 >> 2]) | 0) != 4) {
   break label$2;
  }
 }
 label$3: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$9 + 144 >> 2]) | 0) != 4) {
   break label$3;
  }
 }
 HEAP32[$9 + 100 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$9 + 168 >> 2], 0, HEAP32[$9 + 144 >> 2], 0);
 HEAP32[$9 + 96 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$9 + 160 >> 2], 3, HEAP32[$9 + 144 >> 2], 3);
 HEAP32[$9 + 92 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 168 >> 2], 1);
 HEAP32[$9 + 88 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 168 >> 2], 2);
 HEAP32[$9 + 84 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 168 >> 2], 3);
 HEAP32[$9 + 80 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 160 >> 2], 1);
 HEAP32[$9 + 76 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 160 >> 2], 2);
 HEAP32[$9 + 72 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 144 >> 2], 1);
 HEAP32[$9 + 68 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 144 >> 2], 2);
 label$4: {
  if (HEAP32[$9 + 96 >> 2] != (Math_imul(HEAP32[$9 + 84 >> 2], HEAP32[$9 + 112 >> 2]) | 0)) {
   break label$4;
  }
 }
 label$5: {
  if ((tflite__RuntimeShape__FlatSize_28_29_20const(HEAP32[$9 + 152 >> 2]) | 0) != HEAP32[$9 + 96 >> 2]) {
   break label$5;
  }
 }
 HEAP32[$9 + 64 >> 2] = 0;
 while (1) {
  if (HEAP32[$9 + 64 >> 2] < HEAP32[$9 + 100 >> 2]) {
   HEAP32[$9 + 60 >> 2] = 0;
   while (1) {
    if (HEAP32[$9 + 60 >> 2] < HEAP32[$9 + 72 >> 2]) {
     HEAP32[$9 + 56 >> 2] = 0;
     while (1) {
      if (HEAP32[$9 + 56 >> 2] < HEAP32[$9 + 68 >> 2]) {
       HEAP32[$9 + 52 >> 2] = 0;
       while (1) {
        if (HEAP32[$9 + 52 >> 2] < HEAP32[$9 + 84 >> 2]) {
         HEAP32[$9 + 48 >> 2] = 0;
         while (1) {
          if (HEAP32[$9 + 48 >> 2] < HEAP32[$9 + 112 >> 2]) {
           HEAP32[$9 + 44 >> 2] = HEAP32[$9 + 48 >> 2] + Math_imul(HEAP32[$9 + 52 >> 2], HEAP32[$9 + 112 >> 2]);
           HEAP32[$9 + 40 >> 2] = Math_imul(HEAP32[$9 + 56 >> 2], HEAP32[$9 + 136 >> 2]) - HEAP32[$9 + 120 >> 2];
           HEAP32[$9 + 36 >> 2] = Math_imul(HEAP32[$9 + 60 >> 2], HEAP32[$9 + 132 >> 2]) - HEAP32[$9 + 116 >> 2];
           HEAPF32[$9 + 32 >> 2] = 0;
           HEAP32[$9 + 28 >> 2] = 0;
           while (1) {
            if (HEAP32[$9 + 28 >> 2] < HEAP32[$9 + 80 >> 2]) {
             HEAP32[$9 + 24 >> 2] = 0;
             while (1) {
              if (HEAP32[$9 + 24 >> 2] < HEAP32[$9 + 76 >> 2]) {
               HEAP32[$9 + 20 >> 2] = HEAP32[$9 + 40 >> 2] + Math_imul(HEAP32[$9 + 128 >> 2], HEAP32[$9 + 24 >> 2]);
               HEAP32[$9 + 16 >> 2] = HEAP32[$9 + 36 >> 2] + Math_imul(HEAP32[$9 + 124 >> 2], HEAP32[$9 + 28 >> 2]);
               if (!(HEAP32[$9 + 20 >> 2] < 0 | HEAP32[$9 + 20 >> 2] >= HEAP32[$9 + 88 >> 2] | (HEAP32[$9 + 16 >> 2] < 0 | HEAP32[$9 + 16 >> 2] >= HEAP32[$9 + 92 >> 2]))) {
                HEAPF32[$9 + 12 >> 2] = HEAPF32[HEAP32[$9 + 164 >> 2] + (tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$9 + 168 >> 2], HEAP32[$9 + 64 >> 2], HEAP32[$9 + 16 >> 2], HEAP32[$9 + 20 >> 2], HEAP32[$9 + 52 >> 2]) << 2) >> 2];
                HEAPF32[$9 + 8 >> 2] = HEAPF32[HEAP32[$9 + 156 >> 2] + (tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$9 + 160 >> 2], 0, HEAP32[$9 + 28 >> 2], HEAP32[$9 + 24 >> 2], HEAP32[$9 + 44 >> 2]) << 2) >> 2];
                HEAPF32[$9 + 32 >> 2] = Math_fround(HEAPF32[$9 + 12 >> 2] * HEAPF32[$9 + 8 >> 2]) + HEAPF32[$9 + 32 >> 2];
               }
               HEAP32[$9 + 24 >> 2] = HEAP32[$9 + 24 >> 2] + 1;
               continue;
              }
              break;
             }
             HEAP32[$9 + 28 >> 2] = HEAP32[$9 + 28 >> 2] + 1;
             continue;
            }
            break;
           }
           HEAPF32[$9 + 4 >> 2] = 0;
           if (HEAP32[$9 + 148 >> 2]) {
            HEAPF32[$9 + 4 >> 2] = HEAPF32[HEAP32[$9 + 148 >> 2] + (HEAP32[$9 + 44 >> 2] << 2) >> 2];
           }
           $10 = float_20tflite__ActivationFunctionWithMinMax_float__28float_2c_20float_2c_20float_29(Math_fround(HEAPF32[$9 + 32 >> 2] + HEAPF32[$9 + 4 >> 2]), HEAPF32[$9 + 108 >> 2], HEAPF32[$9 + 104 >> 2]);
           HEAPF32[HEAP32[$9 + 140 >> 2] + (tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$9 + 144 >> 2], HEAP32[$9 + 64 >> 2], HEAP32[$9 + 60 >> 2], HEAP32[$9 + 56 >> 2], HEAP32[$9 + 44 >> 2]) << 2) >> 2] = $10;
           HEAP32[$9 + 48 >> 2] = HEAP32[$9 + 48 >> 2] + 1;
           continue;
          }
          break;
         }
         HEAP32[$9 + 52 >> 2] = HEAP32[$9 + 52 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$9 + 56 >> 2] = HEAP32[$9 + 56 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$9 + 60 >> 2] = HEAP32[$9 + 60 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$9 + 64 >> 2] = HEAP32[$9 + 64 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $9 + 176 | 0;
}

function jsiDebuggerLine($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 208 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 204 >> 2] = $0;
 HEAP32[$1 + 76 >> 2] = jslSetLex($1 + 80 | 0);
 jslInit(HEAP32[$1 + 204 >> 2]);
 HEAP8[$1 + 75 | 0] = 0;
 if (!(HEAP16[$1 + 82 >> 1] != 128 & HEAP16[$1 + 82 >> 1] != 169)) {
  HEAP8[$1 + 75 | 0] = 1;
  HEAP32[$1 + 68 >> 2] = jslGetTokenValueAsString();
  label$3: {
   label$4: {
    if (strcmp(HEAP32[$1 + 68 >> 2], 116976)) {
     if (strcmp(HEAP32[$1 + 68 >> 2], 118679)) {
      break label$4;
     }
    }
    jsiConsolePrintString(144779);
    break label$3;
   }
   label$6: {
    label$7: {
     if (strcmp(HEAP32[$1 + 68 >> 2], 113038)) {
      if (strcmp(HEAP32[$1 + 68 >> 2], 116827)) {
       break label$7;
      }
     }
     HEAP16[173534] = HEAPU16[173534] | 16;
     HEAP32[86758] = HEAP32[86758] | 16;
     break label$6;
    }
    label$9: {
     if (!strcmp(HEAP32[$1 + 68 >> 2], 113237)) {
      HEAP16[173534] = HEAPU16[173534] & -225 | 144;
      HEAP32[86758] = HEAP32[86758] | 16;
      break label$9;
     }
     label$11: {
      label$12: {
       if (strcmp(HEAP32[$1 + 68 >> 2], 119424)) {
        if (strcmp(HEAP32[$1 + 68 >> 2], 122864)) {
         break label$12;
        }
       }
       HEAP16[173534] = HEAPU16[173534] | 16;
       break label$11;
      }
      label$14: {
       label$15: {
        if (strcmp(HEAP32[$1 + 68 >> 2], 112527)) {
         if (strcmp(HEAP32[$1 + 68 >> 2], 117629)) {
          break label$15;
         }
        }
        HEAP16[173534] = HEAPU16[173534] | 16;
        HEAP32[86758] = HEAP32[86758] | 8192;
        break label$14;
       }
       label$17: {
        label$18: {
         if (strcmp(HEAP32[$1 + 68 >> 2], 116989)) {
          if (strcmp(HEAP32[$1 + 68 >> 2], 115960)) {
           break label$18;
          }
         }
         HEAP16[173534] = HEAPU16[173534] | 16;
         HEAP32[86758] = HEAP32[86758] | 24576;
         break label$17;
        }
        label$20: {
         label$21: {
          if (strcmp(HEAP32[$1 + 68 >> 2], 118437)) {
           if (strcmp(HEAP32[$1 + 68 >> 2], 119167)) {
            break label$21;
           }
          }
          HEAP16[173534] = HEAPU16[173534] | 16;
          HEAP32[86758] = HEAP32[86758] | 32768;
          break label$20;
         }
         label$23: {
          label$24: {
           if (strcmp(HEAP32[$1 + 68 >> 2], 112819)) {
            if (strcmp(HEAP32[$1 + 68 >> 2], 117057)) {
             break label$24;
            }
           }
           jslGetNextToken();
           HEAP32[$1 + 64 >> 2] = HEAP32[86758];
           $0 = HEAP32[86757];
           $2 = HEAP32[86756];
           HEAP32[$1 + 56 >> 2] = $2;
           HEAP32[$1 + 60 >> 2] = $0;
           $2 = HEAP32[86755];
           $0 = HEAP32[86754];
           HEAP32[$1 + 48 >> 2] = $0;
           HEAP32[$1 + 52 >> 2] = $2;
           $0 = HEAP32[86753];
           $2 = HEAP32[86752];
           HEAP32[$1 + 40 >> 2] = $2;
           HEAP32[$1 + 44 >> 2] = $0;
           $2 = HEAP32[86751];
           $0 = HEAP32[86750];
           HEAP32[$1 + 32 >> 2] = $0;
           HEAP32[$1 + 36 >> 2] = $2;
           HEAP32[86758] = 1;
           HEAP32[$1 + 28 >> 2] = jsvSkipNameAndUnLock(jspParse());
           $0 = HEAP32[$1 + 36 >> 2];
           $2 = HEAP32[$1 + 32 >> 2];
           HEAP32[86750] = $2;
           HEAP32[86751] = $0;
           HEAP32[86758] = HEAP32[$1 + 64 >> 2];
           $2 = HEAP32[$1 + 60 >> 2];
           $0 = HEAP32[$1 + 56 >> 2];
           HEAP32[86756] = $0;
           HEAP32[86757] = $2;
           $0 = HEAP32[$1 + 52 >> 2];
           $2 = HEAP32[$1 + 48 >> 2];
           HEAP32[86754] = $2;
           HEAP32[86755] = $0;
           $2 = HEAP32[$1 + 44 >> 2];
           $0 = HEAP32[$1 + 40 >> 2];
           HEAP32[86752] = $0;
           HEAP32[86753] = $2;
           jsiConsolePrintChar(61);
           jsfPrintJSON(HEAP32[$1 + 28 >> 2], 301);
           jsiConsolePrintString(146977);
           jsvUnLock(HEAP32[$1 + 28 >> 2]);
           break label$23;
          }
          label$26: {
           label$27: {
            if (strcmp(HEAP32[$1 + 68 >> 2], 117076)) {
             if (strcmp(HEAP32[$1 + 68 >> 2], 118362)) {
              break label$27;
             }
            }
            jslGetNextToken();
            HEAP32[$1 + 68 >> 2] = jslGetTokenValueAsString();
            label$29: {
             label$30: {
              if (strcmp(HEAP32[$1 + 68 >> 2], 115413)) {
               if (strcmp(HEAP32[$1 + 68 >> 2], 118127)) {
                break label$30;
               }
              }
              HEAP32[$1 + 24 >> 2] = jspeiGetTopScope();
              label$32: {
               if (HEAP32[$1 + 24 >> 2] == HEAP32[86750]) {
                jsiConsolePrintString(145462);
                break label$32;
               }
               jsiConsolePrintf(146678, 0);
               jsiDebuggerPrintScope(HEAP32[$1 + 24 >> 2]);
               jsiConsolePrintString(146976);
              }
              jsvUnLock(HEAP32[$1 + 24 >> 2]);
              break label$29;
             }
             label$34: {
              label$35: {
               if (strcmp(HEAP32[$1 + 68 >> 2], 117564)) {
                if (strcmp(HEAP32[$1 + 68 >> 2], 115960)) {
                 break label$35;
                }
               }
               HEAP32[$1 + 20 >> 2] = jspeiGetTopScope();
               if (HEAP32[$1 + 20 >> 2] == HEAP32[86750]) {
                jsiConsolePrintString(145479);
               }
               jsvUnLock(HEAP32[$1 + 20 >> 2]);
               HEAP32[$1 + 12 >> 2] = jsvGetArrayLength(HEAP32[86752]);
               HEAP32[$1 + 16 >> 2] = 0;
               while (1) {
                if (HEAP32[$1 + 16 >> 2] < HEAP32[$1 + 12 >> 2]) {
                 HEAP32[$1 + 20 >> 2] = jsvGetArrayItem(HEAP32[86752], HEAP32[$1 + 16 >> 2]);
                 HEAP32[$1 >> 2] = HEAP32[$1 + 16 >> 2];
                 jsiConsolePrintf(146720, $1);
                 jsiDebuggerPrintScope(HEAP32[$1 + 20 >> 2]);
                 jsiConsolePrintString(146976);
                 jsvUnLock(HEAP32[$1 + 20 >> 2]);
                 HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 16 >> 2] + 1;
                 continue;
                }
                break;
               }
               break label$34;
              }
              jsiConsolePrintString(145496);
             }
            }
            break label$26;
           }
           HEAP8[$1 + 75 | 0] = 0;
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 if (!(HEAP8[$1 + 75 | 0] & 1)) {
  jsiConsolePrintString(146096);
 }
 jslKill();
 jslSetLex(HEAP32[$1 + 76 >> 2]);
 __stack_pointer = $1 + 208 | 0;
}

function tflite___28anonymous_20namespace_29__AllocationInfoBuilder__AddTensors_28tflite__SubGraph_20const__2c_20int_20const__2c_20TfLiteEvalTensor__29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 112 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 104 >> 2] = $0;
 HEAP32[$4 + 100 >> 2] = $1;
 HEAP32[$4 + 96 >> 2] = $2;
 HEAP32[$4 + 92 >> 2] = $3;
 $1 = HEAP32[$4 + 104 >> 2];
 label$1: {
  if (!HEAP32[$4 + 92 >> 2]) {
   break label$1;
  }
 }
 HEAP32[$4 + 88 >> 2] = 0;
 label$2: {
  while (1) {
   if (HEAPU32[$4 + 88 >> 2] < HEAPU32[$1 + 8 >> 2]) {
    HEAP32[$4 + 84 >> 2] = HEAP32[$1 + 16 >> 2] + Math_imul(HEAP32[$4 + 88 >> 2], 24);
    HEAP32[HEAP32[$4 + 84 >> 2] + 4 >> 2] = HEAP32[$4 + 92 >> 2] + Math_imul(HEAP32[$4 + 88 >> 2], 12);
    HEAP32[$4 + 80 >> 2] = tflite__TfLiteEvalTensorByteLength_28TfLiteEvalTensor_20const__2c_20unsigned_20long__29(HEAP32[$4 + 92 >> 2] + Math_imul(HEAP32[$4 + 88 >> 2], 12) | 0, HEAP32[$4 + 84 >> 2]);
    if (HEAP32[$4 + 80 >> 2]) {
     HEAP32[$4 + 108 >> 2] = HEAP32[$4 + 80 >> 2];
     break label$2;
    } else {
     HEAP32[HEAP32[$4 + 84 >> 2] + 8 >> 2] = -1;
     HEAP32[HEAP32[$4 + 84 >> 2] + 12 >> 2] = -1;
     $0 = 0;
     if (!HEAP32[HEAP32[$4 + 92 >> 2] + Math_imul(HEAP32[$4 + 88 >> 2], 12) >> 2]) {
      $0 = tflite__Tensor__is_variable_28_29_20const(flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor____Get_28unsigned_20int_29_20const(tflite__SubGraph__tensors_28_29_20const(HEAP32[$4 + 100 >> 2]), HEAP32[$4 + 88 >> 2])) ^ -1;
     }
     HEAP8[HEAP32[$4 + 84 >> 2] + 20 | 0] = $0 & 1;
     label$8: {
      if (HEAP32[$4 + 96 >> 2]) {
       HEAP32[HEAP32[$4 + 84 >> 2] + 16 >> 2] = HEAP32[HEAP32[$4 + 96 >> 2] + (HEAP32[$4 + 88 >> 2] << 2) >> 2];
       break label$8;
      }
      HEAP32[HEAP32[$4 + 84 >> 2] + 16 >> 2] = -1;
     }
     HEAP32[$4 + 88 >> 2] = HEAP32[$4 + 88 >> 2] + 1;
     continue;
    }
   }
   break;
  }
  HEAP32[$4 + 76 >> 2] = 0;
  while (1) {
   if (HEAPU32[$4 + 76 >> 2] < flatbuffers__Vector_int___size_28_29_20const(tflite__SubGraph__inputs_28_29_20const(HEAP32[$4 + 100 >> 2])) >>> 0) {
    HEAP32[$4 + 72 >> 2] = flatbuffers__Vector_int___Get_28unsigned_20int_29_20const(tflite__SubGraph__inputs_28_29_20const(HEAP32[$4 + 100 >> 2]), HEAP32[$4 + 76 >> 2]);
    HEAP32[$4 + 68 >> 2] = HEAP32[$1 + 16 >> 2] + Math_imul(HEAP32[$4 + 72 >> 2], 24);
    HEAP32[HEAP32[$4 + 68 >> 2] + 8 >> 2] = 0;
    HEAP32[$4 + 76 >> 2] = HEAP32[$4 + 76 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$4 + 64 >> 2] = 0;
  while (1) {
   if (HEAPU32[$4 + 64 >> 2] < flatbuffers__Vector_int___size_28_29_20const(tflite__SubGraph__outputs_28_29_20const(HEAP32[$4 + 100 >> 2])) >>> 0) {
    HEAP32[$4 + 60 >> 2] = flatbuffers__Vector_int___Get_28unsigned_20int_29_20const(tflite__SubGraph__outputs_28_29_20const(HEAP32[$4 + 100 >> 2]), HEAP32[$4 + 64 >> 2]);
    HEAP32[$4 + 56 >> 2] = HEAP32[$1 + 16 >> 2] + Math_imul(HEAP32[$4 + 60 >> 2], 24);
    $0 = flatbuffers__Vector_flatbuffers__Offset_tflite__Operator____size_28_29_20const(tflite__SubGraph__operators_28_29_20const(HEAP32[$4 + 100 >> 2]));
    HEAP32[HEAP32[$4 + 56 >> 2] + 12 >> 2] = $0 - 1;
    HEAP32[$4 + 64 >> 2] = HEAP32[$4 + 64 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$4 + 52 >> 2] = flatbuffers__Vector_flatbuffers__Offset_tflite__Operator____size_28_29_20const(tflite__SubGraph__operators_28_29_20const(HEAP32[$4 + 100 >> 2])) - 1;
  while (1) {
   if (HEAP32[$4 + 52 >> 2] >= 0) {
    HEAP32[$4 + 48 >> 2] = flatbuffers__Vector_flatbuffers__Offset_tflite__Operator____Get_28unsigned_20int_29_20const(tflite__SubGraph__operators_28_29_20const(HEAP32[$4 + 100 >> 2]), HEAP32[$4 + 52 >> 2]);
    HEAP32[$4 + 44 >> 2] = 0;
    while (1) {
     if (HEAPU32[$4 + 44 >> 2] < flatbuffers__Vector_int___size_28_29_20const(tflite__Operator__inputs_28_29_20const(HEAP32[$4 + 48 >> 2])) >>> 0) {
      HEAP32[$4 + 40 >> 2] = flatbuffers__Vector_int___Get_28unsigned_20int_29_20const(tflite__Operator__inputs_28_29_20const(HEAP32[$4 + 48 >> 2]), HEAP32[$4 + 44 >> 2]);
      HEAP32[$4 + 36 >> 2] = HEAP32[$1 + 16 >> 2] + Math_imul(HEAP32[$4 + 40 >> 2], 24);
      if (!(HEAP32[HEAP32[$4 + 36 >> 2] + 12 >> 2] != -1 & HEAP32[HEAP32[$4 + 36 >> 2] + 12 >> 2] >= HEAP32[$4 + 52 >> 2])) {
       HEAP32[HEAP32[$4 + 36 >> 2] + 12 >> 2] = HEAP32[$4 + 52 >> 2];
      }
      HEAP32[$4 + 44 >> 2] = HEAP32[$4 + 44 >> 2] + 1;
      continue;
     }
     break;
    }
    HEAP32[$4 + 32 >> 2] = 0;
    while (1) {
     if (HEAPU32[$4 + 32 >> 2] < flatbuffers__Vector_int___size_28_29_20const(tflite__Operator__outputs_28_29_20const(HEAP32[$4 + 48 >> 2])) >>> 0) {
      HEAP32[$4 + 28 >> 2] = flatbuffers__Vector_int___Get_28unsigned_20int_29_20const(tflite__Operator__outputs_28_29_20const(HEAP32[$4 + 48 >> 2]), HEAP32[$4 + 32 >> 2]);
      HEAP32[$4 + 24 >> 2] = HEAP32[$1 + 16 >> 2] + Math_imul(HEAP32[$4 + 28 >> 2], 24);
      if (!(HEAP32[HEAP32[$4 + 24 >> 2] + 8 >> 2] != -1 & HEAP32[HEAP32[$4 + 24 >> 2] + 8 >> 2] <= HEAP32[$4 + 52 >> 2])) {
       HEAP32[HEAP32[$4 + 24 >> 2] + 8 >> 2] = HEAP32[$4 + 52 >> 2];
      }
      HEAP32[$4 + 32 >> 2] = HEAP32[$4 + 32 >> 2] + 1;
      continue;
     }
     break;
    }
    HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 52 >> 2] - 1;
    continue;
   }
   break;
  }
  HEAP32[$4 + 20 >> 2] = 0;
  while (1) {
   if (HEAPU32[$4 + 20 >> 2] < HEAPU32[$1 + 8 >> 2]) {
    HEAP32[$4 + 16 >> 2] = HEAP32[$1 + 16 >> 2] + Math_imul(HEAP32[$4 + 20 >> 2], 24);
    $0 = 0;
    $0 = HEAP32[HEAP32[$4 + 16 >> 2] + 8 >> 2] == -1 ? HEAP32[HEAP32[$4 + 16 >> 2] + 12 >> 2] != -1 : $0;
    HEAP8[$4 + 15 | 0] = $0;
    if (HEAP8[$4 + 15 | 0] & 1) {
     HEAP8[HEAP32[$4 + 16 >> 2] + 20 | 0] = 0;
    }
    $0 = 0;
    if (!(HEAP8[$4 + 15 | 0] & 1)) {
     $0 = 1;
     $0 = HEAP32[HEAP32[$4 + 16 >> 2] + 8 >> 2] != -1 ? HEAP32[HEAP32[$4 + 16 >> 2] + 12 >> 2] == -1 : $0;
    }
    HEAP8[$4 + 14 | 0] = $0 & 1;
    if (!(!(HEAP8[$4 + 14 | 0] & 1) | !(HEAP8[HEAP32[$4 + 16 >> 2] + 20 | 0] & 1))) {
     $0 = HEAP32[$1 >> 2];
     $1 = HEAP32[$4 + 20 >> 2];
     $2 = HEAP32[HEAP32[$4 + 16 >> 2] + 8 >> 2];
     HEAP32[$4 + 8 >> 2] = HEAP32[HEAP32[$4 + 16 >> 2] + 12 >> 2];
     HEAP32[$4 + 4 >> 2] = $2;
     HEAP32[$4 >> 2] = $1;
     tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 122685, $4);
     HEAP32[$4 + 108 >> 2] = 1;
     break label$2;
    }
    HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 20 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$4 + 108 >> 2] = 0;
 }
 __stack_pointer = $4 + 112 | 0;
 return HEAP32[$4 + 108 >> 2];
}

function jspeFactor() {
 var $0 = 0, $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $0 = __stack_pointer - 96 | 0;
 __stack_pointer = $0;
 label$1: {
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 128) {
   HEAP32[$0 + 88 >> 2] = jspGetNamedVariable(jslGetTokenValueAsString());
   jslGetNextToken();
   label$3: {
    if (HEAP16[HEAP32[44743] + 2 >> 1] == 133) {
     jsExceptionHere(2, 121192, 0);
     break label$3;
    }
    label$5: {
     if (HEAP16[HEAP32[44743] + 2 >> 1] != 162) {
      break label$5;
     }
     if (!(wasm2js_i32$0 = jsvIsName(HEAP32[$0 + 88 >> 2]) & 1, wasm2js_i32$1 = 1, wasm2js_i32$2 = HEAP32[$0 + 88 >> 2] | (HEAP32[86758] & 63) == 1, 
     wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1)) {
      break label$5;
     }
     HEAP32[$0 + 84 >> 2] = jspeArrowFunction(0, HEAP32[$0 + 88 >> 2]);
     jsvUnLock(HEAP32[$0 + 88 >> 2]);
     HEAP32[$0 + 88 >> 2] = HEAP32[$0 + 84 >> 2];
    }
   }
   HEAP32[$0 + 92 >> 2] = HEAP32[$0 + 88 >> 2];
   break label$1;
  }
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 129) {
   HEAP32[$0 + 80 >> 2] = 0;
   if ((HEAP32[86758] & 63) == 1) {
    HEAP32[$0 + 80 >> 2] = jsvNewFromLongInteger(stringToInt(jslGetTokenValueAsString()), i64toi32_i32$HIGH_BITS);
   }
   jslGetNextToken();
   HEAP32[$0 + 92 >> 2] = HEAP32[$0 + 80 >> 2];
   break label$1;
  }
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 130) {
   HEAP32[$0 + 76 >> 2] = 0;
   if ((HEAP32[86758] & 63) == 1) {
    HEAP32[$0 + 76 >> 2] = jsvNewFromFloat(stringToFloat(jslGetTokenValueAsString()));
   }
   jslGetNextToken();
   HEAP32[$0 + 92 >> 2] = HEAP32[$0 + 76 >> 2];
   break label$1;
  }
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 40) {
   jslGetNextToken();
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$0 + 92 >> 2] = 0;
    break label$1;
   }
   HEAP32[$0 + 92 >> 2] = jspeExpressionOrArrowFunction();
   break label$1;
  }
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 180) {
   jslGetNextToken();
   label$14: {
    if ((HEAP32[86758] & 63) == 1) {
     $1 = jsvNewFromBool(1);
     break label$14;
    }
    $1 = 0;
   }
   HEAP32[$0 + 92 >> 2] = $1;
   break label$1;
  }
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 181) {
   jslGetNextToken();
   label$17: {
    if ((HEAP32[86758] & 63) == 1) {
     $1 = jsvNewFromBool(0);
     break label$17;
    }
    $1 = 0;
   }
   HEAP32[$0 + 92 >> 2] = $1;
   break label$1;
  }
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 182) {
   jslGetNextToken();
   label$20: {
    if ((HEAP32[86758] & 63) == 1) {
     $1 = jsvNewWithFlags(2);
     break label$20;
    }
    $1 = 0;
   }
   HEAP32[$0 + 92 >> 2] = $1;
   break label$1;
  }
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 183) {
   jslGetNextToken();
   HEAP32[$0 + 92 >> 2] = 0;
   break label$1;
  }
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 131) {
   HEAP32[$0 + 72 >> 2] = 0;
   if ((HEAP32[86758] & 63) == 1) {
    HEAP32[$0 + 72 >> 2] = jslGetTokenValueAsVar();
   }
   jslGetNextToken();
   HEAP32[$0 + 92 >> 2] = HEAP32[$0 + 72 >> 2];
   break label$1;
  }
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 133) {
   HEAP32[$0 + 92 >> 2] = jspeTemplateLiteral();
   break label$1;
  }
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 135) {
   HEAP32[$0 + 68 >> 2] = 0;
   if ((HEAP32[86758] & 63) == 1) {
    HEAP32[$0 + 64 >> 2] = jslGetTokenValueAsVar();
    HEAP32[$0 + 60 >> 2] = 0;
    HEAP32[$0 + 56 >> 2] = 0;
    jsvStringIteratorNew($0 + 16 | 0, HEAP32[$0 + 64 >> 2], 0);
    while (1) {
     if (jsvStringIteratorHasChar_4($0 + 16 | 0) & 1) {
      HEAP32[$0 + 56 >> 2] = HEAP32[$0 + 56 >> 2] + 1;
      if ((jsvStringIteratorGetCharAndNext($0 + 16 | 0) & 255) == 47) {
       HEAP32[$0 + 60 >> 2] = HEAP32[$0 + 56 >> 2];
      }
      continue;
     }
     break;
    }
    jsvStringIteratorFree_4($0 + 16 | 0);
    HEAP32[$0 + 12 >> 2] = 0;
    if (HEAPU32[$0 + 60 >> 2] < HEAPU32[$0 + 56 >> 2]) {
     HEAP32[$0 + 12 >> 2] = jsvNewFromStringVar(HEAP32[$0 + 64 >> 2], HEAP32[$0 + 60 >> 2], 2147483647);
    }
    HEAP32[$0 + 8 >> 2] = jsvNewFromStringVar(HEAP32[$0 + 64 >> 2], 1, HEAP32[$0 + 60 >> 2] - 2 | 0);
    HEAP32[$0 + 68 >> 2] = jswrap_regexp_constructor(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2]);
    jsvUnLock3(HEAP32[$0 + 64 >> 2], HEAP32[$0 + 12 >> 2], HEAP32[$0 + 8 >> 2]);
   }
   jslGetNextToken();
   HEAP32[$0 + 92 >> 2] = HEAP32[$0 + 68 >> 2];
   break label$1;
  }
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 123) {
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$0 + 92 >> 2] = 0;
    break label$1;
   }
   HEAP32[$0 + 92 >> 2] = jspeFactorObject();
   break label$1;
  }
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 91) {
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$0 + 92 >> 2] = 0;
    break label$1;
   }
   HEAP32[$0 + 92 >> 2] = jspeFactorArray();
   break label$1;
  }
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 170) {
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$0 + 92 >> 2] = 0;
    break label$1;
   }
   jslGetNextToken();
   HEAP32[$0 + 92 >> 2] = jspeFunctionDefinition(1);
   break label$1;
  }
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 194) {
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$0 + 92 >> 2] = 0;
    break label$1;
   }
   jslGetNextToken();
   HEAP32[$0 + 92 >> 2] = jspeClassDefinition(1);
   break label$1;
  }
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 175) {
   jslGetNextToken();
   if (HEAP32[86756]) {
    $1 = HEAP32[86756];
   } else {
    $1 = HEAP32[86750];
   }
   HEAP32[$0 + 92 >> 2] = jsvLockAgain($1);
   break label$1;
  }
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 190) {
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$0 + 92 >> 2] = 0;
    break label$1;
   }
   HEAP32[$0 + 92 >> 2] = jspeFactorDelete();
   break label$1;
  }
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 191) {
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$0 + 92 >> 2] = 0;
    break label$1;
   }
   HEAP32[$0 + 92 >> 2] = jspeFactorTypeOf();
   break label$1;
  }
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 192) {
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$0 + 92 >> 2] = 0;
    break label$1;
   }
   jslGetNextToken();
   jsvUnLock(jspeUnaryExpression());
   HEAP32[$0 + 92 >> 2] = 0;
   break label$1;
  }
  if (!(jslMatch(0) & 1)) {
   HEAP32[$0 + 92 >> 2] = 0;
   break label$1;
  }
  jsExceptionHere(2, 112548, 0);
  HEAP32[$0 + 92 >> 2] = 0;
 }
 __stack_pointer = $0 + 96 | 0;
 return HEAP32[$0 + 92 >> 2];
}

function ftoa_bounded_extra($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 96 | 0;
 __stack_pointer = $5;
 HEAPF64[$5 + 88 >> 3] = $0;
 HEAP32[$5 + 84 >> 2] = $1;
 HEAP32[$5 + 80 >> 2] = $2;
 HEAP32[$5 + 76 >> 2] = $3;
 HEAP32[$5 + 72 >> 2] = $4;
 HEAPF64[$5 + 64 >> 3] = 1e-7;
 $2 = __DOUBLE_BITS_1(HEAPF64[$5 + 88 >> 3]);
 $3 = $2;
 $1 = i64toi32_i32$HIGH_BITS;
 $2 = $1 & 2147483647;
 $1 = $3;
 label$1: {
  if (!(!$1 & ($2 | 0) == 2146435072 | $2 >>> 0 < 2146435072)) {
   strcpy(HEAP32[$5 + 84 >> 2], 124079);
   break label$1;
  }
  $1 = __DOUBLE_BITS_1(HEAPF64[$5 + 88 >> 3]);
  $3 = $1;
  $2 = i64toi32_i32$HIGH_BITS;
  $1 = $2 & 2147483647;
  label$4: {
   if (($1 | 0) == 2146435072 | $1 >>> 0 > 2146435072) {
    if (HEAPF64[$5 + 88 >> 3] < 0) {
     strcpy(HEAP32[$5 + 84 >> 2], 111580);
     break label$4;
    }
    strcpy(HEAP32[$5 + 84 >> 2], 111581);
    break label$4;
   }
   if (HEAPF64[$5 + 88 >> 3] < 0) {
    $1 = HEAP32[$5 + 80 >> 2] - 1 | 0;
    HEAP32[$5 + 80 >> 2] = $1;
    if (!$1) {
     HEAP8[HEAP32[$5 + 84 >> 2]] = 0;
     break label$1;
    }
    $1 = HEAP32[$5 + 84 >> 2];
    HEAP32[$5 + 84 >> 2] = $1 + 1;
    HEAP8[$1 | 0] = 45;
    HEAPF64[$5 + 88 >> 3] = -HEAPF64[$5 + 88 >> 3];
   }
   HEAP32[$5 + 60 >> 2] = 0;
   if (!(!(HEAPF64[$5 + 88 >> 3] > 0) | HEAP32[$5 + 76 >> 2] != 10 | HEAP32[$5 + 72 >> 2] >= 0)) {
    label$11: {
     if (HEAPF64[$5 + 88 >> 3] >= 1e21) {
      while (1) {
       if (HEAPF64[$5 + 88 >> 3] > 1e5) {
        HEAPF64[$5 + 88 >> 3] = HEAPF64[$5 + 88 >> 3] / 1e5;
        HEAP32[$5 + 60 >> 2] = HEAP32[$5 + 60 >> 2] + 5;
        continue;
       }
       break;
      }
      while (1) {
       if (HEAPF64[$5 + 88 >> 3] > 10) {
        HEAPF64[$5 + 88 >> 3] = HEAPF64[$5 + 88 >> 3] / 10;
        HEAP32[$5 + 60 >> 2] = HEAP32[$5 + 60 >> 2] + 1;
        continue;
       }
       break;
      }
      break label$11;
     }
     if (HEAPF64[$5 + 88 >> 3] < 1e-6) {
      while (1) {
       if (HEAPF64[$5 + 88 >> 3] < 1e-5) {
        HEAPF64[$5 + 88 >> 3] = HEAPF64[$5 + 88 >> 3] * 1e5;
        HEAP32[$5 + 60 >> 2] = HEAP32[$5 + 60 >> 2] - 5;
        continue;
       }
       break;
      }
      while (1) {
       if (HEAPF64[$5 + 88 >> 3] < 1) {
        HEAPF64[$5 + 88 >> 3] = HEAPF64[$5 + 88 >> 3] * 10;
        HEAP32[$5 + 60 >> 2] = HEAP32[$5 + 60 >> 2] - 1;
        continue;
       }
       break;
      }
     }
    }
   }
   $0 = HEAPF64[$5 + 88 >> 3] + 1e-7;
   label$22: {
    if (Math_abs($0) < 2147483648) {
     $1 = ~~$0;
     break label$22;
    }
    $1 = -2147483648;
   }
   $0 = HEAPF64[$5 + 88 >> 3];
   label$24: {
    if (Math_abs($0) < 2147483648) {
     $2 = ~~$0;
     break label$24;
    }
    $2 = -2147483648;
   }
   if (($1 | 0) == ($2 + 1 | 0)) {
    $0 = HEAPF64[$5 + 88 >> 3];
    label$27: {
     if (Math_abs($0) < 2147483648) {
      $1 = ~~$0;
      break label$27;
     }
     $1 = -2147483648;
    }
    HEAPF64[$5 + 88 >> 3] = $1 + 1 | 0;
   }
   HEAPF64[$5 + 48 >> 3] = 1;
   while (1) {
    if (HEAPF64[$5 + 88 >> 3] >= HEAPF64[$5 + 48 >> 3] * +HEAP32[$5 + 76 >> 2]) {
     HEAPF64[$5 + 48 >> 3] = HEAPF64[$5 + 48 >> 3] * +HEAP32[$5 + 76 >> 2];
     continue;
    }
    break;
   }
   while (1) {
    if (HEAPF64[$5 + 48 >> 3] >= 1) {
     $0 = HEAPF64[$5 + 88 >> 3] / HEAPF64[$5 + 48 >> 3];
     label$33: {
      if (Math_abs($0) < 2147483648) {
       $1 = ~~$0;
       break label$33;
      }
      $1 = -2147483648;
     }
     HEAP32[$5 + 44 >> 2] = $1;
     HEAPF64[$5 + 88 >> 3] = - +HEAP32[$5 + 44 >> 2] * HEAPF64[$5 + 48 >> 3] + HEAPF64[$5 + 88 >> 3];
     $1 = HEAP32[$5 + 80 >> 2] - 1 | 0;
     HEAP32[$5 + 80 >> 2] = $1;
     if ($1) {
      $2 = itoch(HEAP32[$5 + 44 >> 2]);
      $1 = HEAP32[$5 + 84 >> 2];
      HEAP32[$5 + 84 >> 2] = $1 + 1;
      HEAP8[$1 | 0] = $2;
      HEAPF64[$5 + 48 >> 3] = HEAPF64[$5 + 48 >> 3] / +HEAP32[$5 + 76 >> 2];
      continue;
     } else {
      HEAP8[HEAP32[$5 + 84 >> 2]] = 0;
      break label$1;
     }
    }
    break;
   }
   if (!(!(HEAP32[$5 + 72 >> 2] < 0 & HEAPF64[$5 + 88 >> 3] > 0) & HEAP32[$5 + 72 >> 2] <= 0)) {
    HEAP8[$5 + 43 | 0] = 0;
    HEAPF64[$5 + 88 >> 3] = HEAPF64[$5 + 88 >> 3] * +HEAP32[$5 + 76 >> 2];
    while (1) {
     label$41: {
      if (!(HEAP32[$5 + 72 >> 2] <= -12 | HEAP32[$5 + 72 >> 2] >= 0)) {
       $1 = 1;
       if (HEAPF64[$5 + 88 >> 3] > 1e-7) {
        break label$41;
       }
      }
      $1 = HEAP32[$5 + 72 >> 2] > 0;
     }
     if ($1) {
      $0 = HEAPF64[$5 + 88 >> 3] + (HEAP32[$5 + 72 >> 2] == 1 ? .5 : 1e-8);
      label$44: {
       if (Math_abs($0) < 2147483648) {
        $1 = ~~$0;
        break label$44;
       }
       $1 = -2147483648;
      }
      HEAP32[$5 + 36 >> 2] = $1;
      HEAPF64[$5 + 88 >> 3] = (HEAPF64[$5 + 88 >> 3] - +HEAP32[$5 + 36 >> 2]) * +HEAP32[$5 + 76 >> 2];
      if (HEAP32[$5 + 36 >> 2] == HEAP32[$5 + 76 >> 2]) {
       HEAP32[$5 + 36 >> 2] = HEAP32[$5 + 76 >> 2] - 1;
      }
      if (!(HEAP8[$5 + 43 | 0] & 1)) {
       HEAP8[$5 + 43 | 0] = 1;
       $1 = HEAP32[$5 + 80 >> 2] - 1 | 0;
       HEAP32[$5 + 80 >> 2] = $1;
       if (!$1) {
        HEAP8[HEAP32[$5 + 84 >> 2]] = 0;
        break label$1;
       }
       $1 = HEAP32[$5 + 84 >> 2];
       HEAP32[$5 + 84 >> 2] = $1 + 1;
       HEAP8[$1 | 0] = 46;
      }
      $1 = HEAP32[$5 + 80 >> 2] - 1 | 0;
      HEAP32[$5 + 80 >> 2] = $1;
      if (!$1) {
       HEAP8[HEAP32[$5 + 84 >> 2]] = 0;
       break label$1;
      }
      $2 = itoch(HEAP32[$5 + 36 >> 2]);
      $1 = HEAP32[$5 + 84 >> 2];
      HEAP32[$5 + 84 >> 2] = $1 + 1;
      HEAP8[$1 | 0] = $2;
      HEAP32[$5 + 72 >> 2] = HEAP32[$5 + 72 >> 2] - 1;
      continue;
     }
     break;
    }
   }
   if (!(!HEAP32[$5 + 60 >> 2] | HEAPU32[$5 + 80 >> 2] <= 5)) {
    $1 = HEAP32[$5 + 84 >> 2];
    HEAP32[$5 + 84 >> 2] = $1 + 1;
    HEAP8[$1 | 0] = 101;
    if (HEAP32[$5 + 60 >> 2] > 0) {
     $1 = HEAP32[$5 + 84 >> 2];
     HEAP32[$5 + 84 >> 2] = $1 + 1;
     HEAP8[$1 | 0] = 43;
    }
    itostr_1(HEAP32[$5 + 60 >> 2], HEAP32[$5 + 84 >> 2], 10);
    break label$1;
   }
   $1 = HEAP32[$5 + 84 >> 2];
   HEAP32[$5 + 84 >> 2] = $1 + 1;
   HEAP8[$1 | 0] = 0;
  }
 }
 __stack_pointer = $5 + 96 | 0;
}

function jsfBankFindFile($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 480 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 472 >> 2] = $0;
 HEAP32[$4 + 468 >> 2] = $1;
 HEAP32[$4 + 464 >> 2] = $3;
 HEAP32[$4 + 460 >> 2] = HEAP32[$4 + 472 >> 2];
 label$1: {
  label$2: {
   if (!(!HEAP32[86759] | HEAP32[$4 + 460 >> 2] != 134217728)) {
    HEAP32[$4 + 156 >> 2] = HEAP32[$4 + 460 >> 2];
    HEAP32[$4 + 152 >> 2] = HEAP32[86759];
    HEAP32[$4 + 148 >> 2] = HEAP32[$4 + 152 >> 2] + HEAP32[86760];
    HEAP32[$4 + 144 >> 2] = HEAP32[$4 + 148 >> 2] - HEAP32[$4 + 152 >> 2] >>> 5;
    while (1) {
     if (HEAP32[$4 + 144 >> 2]) {
      HEAP32[$4 + 140 >> 2] = HEAP32[$4 + 144 >> 2];
      if (HEAP32[$4 + 140 >> 2] > 8) {
       HEAP32[$4 + 140 >> 2] = 8;
      }
      jshFlashRead($4 + 160 | 0, HEAP32[$4 + 152 >> 2], HEAP32[$4 + 140 >> 2] << 5);
      HEAP32[$4 + 152 >> 2] = HEAP32[$4 + 152 >> 2] + (HEAP32[$4 + 140 >> 2] << 5);
      HEAP32[$4 + 144 >> 2] = HEAP32[$4 + 144 >> 2] - HEAP32[$4 + 140 >> 2];
      HEAP32[$4 + 136 >> 2] = 0;
      while (1) {
       if (HEAP32[$4 + 136 >> 2] < HEAP32[$4 + 140 >> 2]) {
        $3 = ($4 + 160 | 0) + (HEAP32[$4 + 136 >> 2] << 5) | 0;
        HEAP32[$4 + 64 >> 2] = HEAP32[$3 + 28 >> 2];
        $1 = HEAP32[$3 + 20 >> 2];
        $0 = HEAP32[$3 + 24 >> 2];
        HEAP32[$4 + 56 >> 2] = $1;
        HEAP32[$4 + 60 >> 2] = $0;
        $1 = HEAP32[$3 + 16 >> 2];
        $0 = HEAP32[$3 + 12 >> 2];
        HEAP32[$4 + 48 >> 2] = $0;
        HEAP32[$4 + 52 >> 2] = $1;
        $0 = HEAP32[$3 + 8 >> 2];
        $1 = HEAP32[$3 + 4 >> 2];
        HEAP32[$4 + 40 >> 2] = $1;
        HEAP32[$4 + 44 >> 2] = $0;
        HEAP32[$4 + 32 >> 2] = HEAP32[$2 + 24 >> 2];
        $3 = $2;
        $0 = HEAP32[$3 + 16 >> 2];
        $1 = HEAP32[$3 + 20 >> 2];
        HEAP32[$4 + 24 >> 2] = $0;
        HEAP32[$4 + 28 >> 2] = $1;
        $0 = HEAP32[$3 + 12 >> 2];
        $1 = HEAP32[$3 + 8 >> 2];
        HEAP32[$4 + 16 >> 2] = $1;
        HEAP32[$4 + 20 >> 2] = $0;
        $1 = HEAP32[$3 + 4 >> 2];
        $0 = HEAP32[$3 >> 2];
        HEAP32[$4 + 8 >> 2] = $0;
        HEAP32[$4 + 12 >> 2] = $1;
        if (jsfIsNameEqual($4 + 40 | 0, $4 + 8 | 0) & 1) {
         HEAP32[$4 + 132 >> 2] = HEAP32[$4 + 156 >> 2] + HEAP32[($4 + 160 | 0) + (HEAP32[$4 + 136 >> 2] << 5) >> 2];
         if (!(!(jsfGetFileHeader(HEAP32[$4 + 132 >> 2], ($4 + 160 | 0) + (HEAP32[$4 + 136 >> 2] << 5) | 0, 1) & 1) | !HEAP32[(($4 + 160 | 0) + (HEAP32[$4 + 136 >> 2] << 5) | 0) + 4 >> 2])) {
          if (HEAP32[$4 + 464 >> 2]) {
           $3 = ($4 + 160 | 0) + (HEAP32[$4 + 136 >> 2] << 5) | 0;
           $1 = HEAP32[$3 >> 2];
           $0 = HEAP32[$3 + 4 >> 2];
           $5 = $1;
           $2 = HEAP32[$4 + 464 >> 2];
           $1 = $2;
           HEAP32[$1 >> 2] = $5;
           HEAP32[$1 + 4 >> 2] = $0;
           $1 = HEAP32[$3 + 28 >> 2];
           $0 = HEAP32[$3 + 24 >> 2];
           $5 = $0;
           $0 = $2;
           HEAP32[$0 + 24 >> 2] = $5;
           HEAP32[$0 + 28 >> 2] = $1;
           $0 = HEAP32[$3 + 20 >> 2];
           $1 = HEAP32[$3 + 16 >> 2];
           $5 = $1;
           $1 = $2;
           HEAP32[$1 + 16 >> 2] = $5;
           HEAP32[$1 + 20 >> 2] = $0;
           $1 = HEAP32[$3 + 12 >> 2];
           $0 = HEAP32[$3 + 8 >> 2];
           $3 = $0;
           $0 = $2;
           HEAP32[$0 + 8 >> 2] = $3;
           HEAP32[$0 + 12 >> 2] = $1;
          }
          HEAP32[$4 + 476 >> 2] = HEAP32[$4 + 132 >> 2] + 32;
          break label$1;
         }
        }
        HEAP32[$4 + 136 >> 2] = HEAP32[$4 + 136 >> 2] + 1;
        continue;
       }
       break;
      }
      continue;
     }
     break;
    }
    HEAP32[$4 + 460 >> 2] = HEAP32[86759] - 32;
    HEAP32[$4 + 428 >> 2] = 0;
    HEAP32[$4 + 424 >> 2] = HEAP32[86760];
    break label$2;
   }
   if (!(jsfGetFileHeader(HEAP32[$4 + 460 >> 2], $4 + 424 | 0, 0) & 1)) {
    HEAP32[$4 + 476 >> 2] = 0;
    break label$1;
   }
  }
  while (1) {
   if (HEAP32[$4 + 428 >> 2] == HEAP32[$2 >> 2]) {
    label$15: {
     if (!(jsfGetFileHeader(HEAP32[$4 + 460 >> 2], $4 + 424 | 0, 1) & 1)) {
      break label$15;
     }
     $3 = $4 + 424 | 0;
     HEAP32[$4 + 128 >> 2] = HEAP32[$3 + 28 >> 2];
     $1 = HEAP32[$3 + 20 >> 2];
     $0 = HEAP32[$3 + 24 >> 2];
     HEAP32[$4 + 120 >> 2] = $1;
     HEAP32[$4 + 124 >> 2] = $0;
     $1 = HEAP32[$3 + 16 >> 2];
     $0 = HEAP32[$3 + 12 >> 2];
     HEAP32[$4 + 112 >> 2] = $0;
     HEAP32[$4 + 116 >> 2] = $1;
     $0 = HEAP32[$3 + 8 >> 2];
     $1 = HEAP32[$3 + 4 >> 2];
     HEAP32[$4 + 104 >> 2] = $1;
     HEAP32[$4 + 108 >> 2] = $0;
     HEAP32[$4 + 96 >> 2] = HEAP32[$2 + 24 >> 2];
     $3 = $2;
     $0 = HEAP32[$3 + 16 >> 2];
     $1 = HEAP32[$3 + 20 >> 2];
     HEAP32[$4 + 88 >> 2] = $0;
     HEAP32[$4 + 92 >> 2] = $1;
     $0 = HEAP32[$3 + 12 >> 2];
     $1 = HEAP32[$3 + 8 >> 2];
     HEAP32[$4 + 80 >> 2] = $1;
     HEAP32[$4 + 84 >> 2] = $0;
     $1 = HEAP32[$3 + 4 >> 2];
     $0 = HEAP32[$3 >> 2];
     HEAP32[$4 + 72 >> 2] = $0;
     HEAP32[$4 + 76 >> 2] = $1;
     if (!(jsfIsNameEqual($4 + 104 | 0, $4 + 72 | 0) & 1)) {
      break label$15;
     }
     if (HEAP32[$4 + 464 >> 2]) {
      $0 = HEAP32[$4 + 428 >> 2];
      $1 = HEAP32[$4 + 424 >> 2];
      $3 = $1;
      $2 = HEAP32[$4 + 464 >> 2];
      $1 = $2;
      HEAP32[$1 >> 2] = $3;
      HEAP32[$1 + 4 >> 2] = $0;
      $1 = HEAP32[$4 + 452 >> 2];
      $0 = HEAP32[$4 + 448 >> 2];
      $3 = $0;
      $0 = $2;
      HEAP32[$0 + 24 >> 2] = $3;
      HEAP32[$0 + 28 >> 2] = $1;
      $0 = HEAP32[$4 + 444 >> 2];
      $1 = HEAP32[$4 + 440 >> 2];
      $3 = $1;
      $1 = $2;
      HEAP32[$1 + 16 >> 2] = $3;
      HEAP32[$1 + 20 >> 2] = $0;
      $1 = HEAP32[$4 + 436 >> 2];
      $0 = HEAP32[$4 + 432 >> 2];
      $3 = $0;
      $0 = $2;
      HEAP32[$0 + 8 >> 2] = $3;
      HEAP32[$0 + 12 >> 2] = $1;
     }
     HEAP32[$4 + 476 >> 2] = HEAP32[$4 + 460 >> 2] + 32;
     break label$1;
    }
   }
   if (jsfGetNextFileHeader($4 + 460 | 0, $4 + 424 | 0, 3) & 1) {
    continue;
   }
   break;
  }
  HEAP32[$4 + 476 >> 2] = 0;
 }
 __stack_pointer = $4 + 480 | 0;
 return HEAP32[$4 + 476 >> 2];
}

function void_20tflite__reference_ops__Softmax_unsigned_20char_2c_20unsigned_20char__28tflite__SoftmaxParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 208 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 204 >> 2] = $0;
 HEAP32[$5 + 200 >> 2] = $1;
 HEAP32[$5 + 196 >> 2] = $2;
 HEAP32[$5 + 192 >> 2] = $3;
 HEAP32[$5 + 188 >> 2] = $4;
 HEAP32[$5 + 184 >> 2] = HEAP32[HEAP32[$5 + 204 >> 2] + 8 >> 2];
 HEAP32[$5 + 180 >> 2] = HEAP32[HEAP32[$5 + 204 >> 2] + 12 >> 2];
 HEAP32[$5 + 176 >> 2] = HEAP32[HEAP32[$5 + 204 >> 2] + 24 >> 2];
 HEAP32[$5 + 172 >> 2] = tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$5 + 200 >> 2]) - 1;
 HEAP32[$5 + 168 >> 2] = tflite__MatchingFlatSizeSkipDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__29(HEAP32[$5 + 200 >> 2], HEAP32[$5 + 172 >> 2], HEAP32[$5 + 192 >> 2]);
 HEAP32[$5 + 164 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 200 >> 2], HEAP32[$5 + 172 >> 2], HEAP32[$5 + 192 >> 2], HEAP32[$5 + 172 >> 2]);
 HEAP32[$5 + 160 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 160 >> 2] < HEAP32[$5 + 168 >> 2]) {
   HEAP8[$5 + 159 | 0] = std____2__numeric_limits_unsigned_20char___min_28_29();
   HEAP32[$5 + 152 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 152 >> 2] < HEAP32[$5 + 164 >> 2]) {
     HEAP8[$5 + 159 | 0] = HEAPU8[unsigned_20char_20const__20std____2__max_unsigned_20char__28unsigned_20char_20const__2c_20unsigned_20char_20const__29($5 + 159 | 0, HEAP32[$5 + 196 >> 2] + (HEAP32[$5 + 152 >> 2] + Math_imul(HEAP32[$5 + 160 >> 2], HEAP32[$5 + 164 >> 2]) | 0) | 0) | 0];
     HEAP32[$5 + 152 >> 2] = HEAP32[$5 + 152 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 144 >> 2] = gemmlowp__FixedPoint_int_2c_2012___Zero_28_29();
   HEAP32[$5 + 140 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 140 >> 2] < HEAP32[$5 + 164 >> 2]) {
     HEAP32[$5 + 136 >> 2] = HEAPU8[HEAP32[$5 + 196 >> 2] + (HEAP32[$5 + 140 >> 2] + Math_imul(HEAP32[$5 + 160 >> 2], HEAP32[$5 + 164 >> 2]) | 0) | 0] - HEAPU8[$5 + 159 | 0];
     if (HEAP32[$5 + 136 >> 2] >= HEAP32[$5 + 176 >> 2]) {
      HEAP32[$5 + 132 >> 2] = tflite__MultiplyByQuantizedMultiplierGreaterThanOne_28int_2c_20int_2c_20int_29(HEAP32[$5 + 136 >> 2], HEAP32[$5 + 184 >> 2], HEAP32[$5 + 180 >> 2]);
      HEAP32[$5 + 128 >> 2] = gemmlowp__FixedPoint_int_2c_205___FromRaw_28int_29(HEAP32[$5 + 132 >> 2]);
      HEAP32[$5 + 112 >> 2] = HEAP32[$5 + 144 >> 2];
      HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 128 >> 2];
      HEAP32[$5 + 96 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__exp_on_negative_values_int_2c_205__28gemmlowp__FixedPoint_int_2c_205__29(HEAP32[$5 + 88 >> 2]);
      HEAP32[$5 + 104 >> 2] = gemmlowp__FixedPoint_int_2c_2012__20gemmlowp__Rescale_12_2c_20int_2c_200__28gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$5 + 96 >> 2]);
      HEAP32[$5 + 120 >> 2] = gemmlowp__FixedPoint_int_2c_2012__20gemmlowp__operator__int_2c_2012__28gemmlowp__FixedPoint_int_2c_2012__2c_20gemmlowp__FixedPoint_int_2c_2012__29(HEAP32[$5 + 112 >> 2], HEAP32[$5 + 104 >> 2]);
      HEAP32[$5 + 144 >> 2] = HEAP32[$5 + 120 >> 2];
     }
     HEAP32[$5 + 140 >> 2] = HEAP32[$5 + 140 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 80 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromRaw_28int_29(tflite__GetReciprocal_28int_2c_20int_2c_20int__29(HEAP32[gemmlowp__FixedPoint_int_2c_2012___raw_28_29($5 + 144 | 0) >> 2], 12, $5 + 84 | 0));
   HEAP32[$5 + 76 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 76 >> 2] < HEAP32[$5 + 164 >> 2]) {
     HEAP32[$5 + 72 >> 2] = HEAPU8[HEAP32[$5 + 196 >> 2] + (HEAP32[$5 + 76 >> 2] + Math_imul(HEAP32[$5 + 160 >> 2], HEAP32[$5 + 164 >> 2]) | 0) | 0] - HEAPU8[$5 + 159 | 0];
     label$10: {
      if (HEAP32[$5 + 72 >> 2] >= HEAP32[$5 + 176 >> 2]) {
       HEAP32[$5 + 68 >> 2] = tflite__MultiplyByQuantizedMultiplierGreaterThanOne_28int_2c_20int_2c_20int_29(HEAP32[$5 + 72 >> 2], HEAP32[$5 + 184 >> 2], HEAP32[$5 + 180 >> 2]);
       HEAP32[$5 + 64 >> 2] = gemmlowp__FixedPoint_int_2c_205___FromRaw_28int_29(HEAP32[$5 + 68 >> 2]);
       HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 64 >> 2];
       HEAP32[$5 + 56 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__exp_on_negative_values_int_2c_205__28gemmlowp__FixedPoint_int_2c_205__29(HEAP32[$5 + 48 >> 2]);
       HEAP32[$5 + 32 >> 2] = HEAP32[$5 + 80 >> 2];
       HEAP32[$5 + 24 >> 2] = HEAP32[$5 + 56 >> 2];
       HEAP32[$5 + 40 >> 2] = gemmlowp__FixedPoint_int_2c_200_20__200__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$5 + 32 >> 2], HEAP32[$5 + 24 >> 2]);
       HEAP32[$5 + 44 >> 2] = int_20gemmlowp__RoundingDivideByPOT_int__28int_2c_20int_29(HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($5 + 40 | 0) >> 2], HEAP32[$5 + 84 >> 2] + 23 | 0);
       HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 44 >> 2] + (std____2__numeric_limits_unsigned_20char___min_28_29() & 255);
       HEAP32[$5 + 16 >> 2] = std____2__numeric_limits_unsigned_20char___max_28_29() & 255;
       $0 = int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($5 + 20 | 0, $5 + 16 | 0);
       HEAP32[$5 + 12 >> 2] = std____2__numeric_limits_unsigned_20char___min_28_29() & 255;
       $0 = int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($0, $5 + 12 | 0);
       HEAP8[HEAP32[$5 + 188 >> 2] + (HEAP32[$5 + 76 >> 2] + Math_imul(HEAP32[$5 + 160 >> 2], HEAP32[$5 + 164 >> 2]) | 0) | 0] = HEAP32[$0 >> 2];
       break label$10;
      }
      $0 = std____2__numeric_limits_unsigned_20char___min_28_29();
      HEAP8[HEAP32[$5 + 188 >> 2] + (HEAP32[$5 + 76 >> 2] + Math_imul(HEAP32[$5 + 160 >> 2], HEAP32[$5 + 164 >> 2]) | 0) | 0] = $0;
     }
     HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 76 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 160 >> 2] = HEAP32[$5 + 160 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 + 208 | 0;
}

function graphicsFillPoly($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $4 = __stack_pointer - 96 | 0;
 $3 = $4;
 __stack_pointer = $3;
 HEAP32[$3 + 92 >> 2] = $0;
 HEAP32[$3 + 88 >> 2] = $1;
 HEAP32[$3 + 84 >> 2] = $2;
 HEAP32[$3 + 80 >> 2] = HEAP32[$3 + 84 >> 2];
 $0 = HEAP32[$3 + 92 >> 2];
 HEAP32[$3 + 64 >> 2] = (HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8) - 1;
 HEAP32[$3 + 60 >> 2] = 0;
 HEAP32[$3 + 76 >> 2] = 0;
 while (1) {
  if (HEAP32[$3 + 76 >> 2] < HEAP32[$3 + 88 >> 2]) {
   HEAP32[$3 + 56 >> 2] = HEAP16[HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 76 >> 2] << 2) >> 1];
   HEAP32[$3 + 52 >> 2] = HEAP16[(HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 76 >> 2] << 2) | 0) + 2 >> 1];
   graphicsToDeviceCoordinates16x(HEAP32[$3 + 92 >> 2], $3 + 56 | 0, $3 + 52 | 0);
   HEAP16[HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 76 >> 2] << 2) >> 1] = HEAP32[$3 + 56 >> 2];
   HEAP16[(HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 76 >> 2] << 2) | 0) + 2 >> 1] = HEAP32[$3 + 52 >> 2];
   HEAP16[$3 + 50 >> 1] = HEAP16[(HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 76 >> 2] << 2) | 0) + 2 >> 1] >> 4;
   if (HEAP16[$3 + 50 >> 1] < HEAP32[$3 + 64 >> 2]) {
    HEAP32[$3 + 64 >> 2] = HEAP16[$3 + 50 >> 1];
   }
   if (HEAP16[$3 + 50 >> 1] > HEAP32[$3 + 60 >> 2]) {
    HEAP32[$3 + 60 >> 2] = HEAP16[$3 + 50 >> 1];
   }
   HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
   continue;
  }
  break;
 }
 $0 = HEAP32[$3 + 92 >> 2];
 if (HEAP32[$3 + 64 >> 2] < (HEAPU8[$0 + 34 | 0] | HEAPU8[$0 + 35 | 0] << 8)) {
  $0 = HEAP32[$3 + 92 >> 2];
  HEAP32[$3 + 64 >> 2] = HEAPU8[$0 + 34 | 0] | HEAPU8[$0 + 35 | 0] << 8;
 }
 $0 = HEAP32[$3 + 92 >> 2];
 if (HEAP32[$3 + 60 >> 2] > (HEAPU8[$0 + 38 | 0] | HEAPU8[$0 + 39 | 0] << 8)) {
  $0 = HEAP32[$3 + 92 >> 2];
  HEAP32[$3 + 60 >> 2] = HEAPU8[$0 + 38 | 0] | HEAPU8[$0 + 39 | 0] << 8;
 }
 HEAP32[$3 + 44 >> 2] = 64;
 HEAP32[$3 + 68 >> 2] = HEAP32[$3 + 64 >> 2] << 4;
 while (1) {
  if (HEAP32[$3 + 68 >> 2] <= HEAP32[$3 + 60 >> 2] << 4) {
   HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 68 >> 2] >> 4;
   HEAP32[$3 + 36 >> 2] = $4;
   $4 = $4 - 128 | 0;
   __stack_pointer = $4;
   $0 = $4 + -64 | 0;
   __stack_pointer = $0;
   HEAP32[$3 + 32 >> 2] = 0;
   HEAP32[$3 + 72 >> 2] = HEAP32[$3 + 88 >> 2] - 1;
   HEAP32[$3 + 76 >> 2] = 0;
   while (1) {
    if (HEAP32[$3 + 76 >> 2] < HEAP32[$3 + 88 >> 2]) {
     if (!(!(HEAP16[(HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 76 >> 2] << 2) | 0) + 2 >> 1] <= HEAP32[$3 + 68 >> 2] & HEAP16[(HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 72 >> 2] << 2) | 0) + 2 >> 1] > HEAP32[$3 + 68 >> 2]) & (HEAP16[(HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 76 >> 2] << 2) | 0) + 2 >> 1] <= HEAP32[$3 + 68 >> 2] | HEAP16[(HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 72 >> 2] << 2) | 0) + 2 >> 1] > HEAP32[$3 + 68 >> 2]))) {
      if (HEAP32[$3 + 32 >> 2] < 64) {
       HEAP32[$3 + 28 >> 2] = HEAP16[(HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 72 >> 2] << 2) | 0) + 2 >> 1] - HEAP16[(HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 76 >> 2] << 2) | 0) + 2 >> 1];
       if (HEAP32[$3 + 28 >> 2]) {
        HEAP16[(HEAP32[$3 + 32 >> 2] << 1) + $4 >> 1] = HEAP16[HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 76 >> 2] << 2) >> 1] + ((Math_imul(HEAP32[$3 + 68 >> 2] - HEAP16[(HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 76 >> 2] << 2) | 0) + 2 >> 1] | 0, HEAP16[HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 72 >> 2] << 2) >> 1] - HEAP16[HEAP32[$3 + 80 >> 2] + (HEAP32[$3 + 76 >> 2] << 2) >> 1] | 0) | 0) / HEAP32[$3 + 28 >> 2] | 0);
        HEAP8[HEAP32[$3 + 32 >> 2] + $0 | 0] = HEAP32[$3 + 28 >> 2] > 1;
        HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 32 >> 2] + 1;
       }
      }
     }
     HEAP32[$3 + 72 >> 2] = HEAP32[$3 + 76 >> 2];
     HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$3 + 76 >> 2] = 0;
   while (1) {
    if (HEAP32[$3 + 76 >> 2] < (HEAP32[$3 + 32 >> 2] - 1 | 0)) {
     if (HEAP16[(HEAP32[$3 + 76 >> 2] << 1) + $4 >> 1] > HEAP16[(HEAP32[$3 + 76 >> 2] + 1 << 1) + $4 >> 1]) {
      HEAP16[$3 + 26 >> 1] = HEAPU16[(HEAP32[$3 + 76 >> 2] << 1) + $4 >> 1];
      HEAP16[(HEAP32[$3 + 76 >> 2] << 1) + $4 >> 1] = HEAPU16[(HEAP32[$3 + 76 >> 2] + 1 << 1) + $4 >> 1];
      HEAP16[(HEAP32[$3 + 76 >> 2] + 1 << 1) + $4 >> 1] = HEAPU16[$3 + 26 >> 1];
      HEAP8[$3 + 25 | 0] = HEAP8[HEAP32[$3 + 76 >> 2] + $0 | 0] & 1;
      HEAP8[HEAP32[$3 + 76 >> 2] + $0 | 0] = HEAP8[(HEAP32[$3 + 76 >> 2] + 1 | 0) + $0 | 0] & 1;
      HEAP8[(HEAP32[$3 + 76 >> 2] + 1 | 0) + $0 | 0] = HEAP8[$3 + 25 | 0] & 1;
      if (HEAP32[$3 + 76 >> 2]) {
       HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] - 1;
      }
      continue;
     }
     HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$3 + 20 >> 2] = 0;
   HEAP32[$3 + 16 >> 2] = 0;
   HEAP32[$3 + 76 >> 2] = 0;
   while (1) {
    label$21: {
     if (HEAP32[$3 + 76 >> 2] >= HEAP32[$3 + 32 >> 2]) {
      break label$21;
     }
     if (!HEAP32[$3 + 16 >> 2]) {
      HEAP32[$3 + 20 >> 2] = HEAP16[(HEAP32[$3 + 76 >> 2] << 1) + $4 >> 1];
     }
     label$23: {
      if (HEAP8[HEAP32[$3 + 76 >> 2] + $0 | 0] & 1) {
       HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] + 1;
       break label$23;
      }
      HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] - 1;
     }
     if (!(HEAP32[$3 + 76 >> 2] != (HEAP32[$3 + 32 >> 2] - 1 | 0) ? HEAP32[$3 + 16 >> 2] : 0)) {
      HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 20 >> 2] + 15 >> 4;
      HEAP32[$3 + 8 >> 2] = HEAP16[(HEAP32[$3 + 76 >> 2] << 1) + $4 >> 1] + 15 >> 4;
      if (HEAP32[$3 + 8 >> 2] > HEAP32[$3 + 12 >> 2]) {
       $1 = HEAP32[$3 + 92 >> 2];
       graphicsFillRectDevice(HEAP32[$3 + 92 >> 2], HEAP32[$3 + 12 >> 2], HEAP32[$3 + 40 >> 2], HEAP32[$3 + 8 >> 2] - 1 | 0, HEAP32[$3 + 40 >> 2], HEAPU8[$1 + 17 | 0] | HEAPU8[$1 + 18 | 0] << 8 | (HEAPU8[$1 + 19 | 0] << 16 | HEAPU8[$1 + 20 | 0] << 24));
      }
     }
     if (jspIsInterrupted() & 1) {
      break label$21;
     }
     HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
     continue;
    }
    break;
   }
   $4 = HEAP32[$3 + 36 >> 2];
   HEAP32[$3 + 68 >> 2] = HEAP32[$3 + 68 >> 2] + 16;
   continue;
  }
  break;
 }
 __stack_pointer = $3 + 96 | 0;
}

function void_20tflite__reference_ops__Softmax_signed_20char_2c_20signed_20char__28tflite__SoftmaxParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 208 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 204 >> 2] = $0;
 HEAP32[$5 + 200 >> 2] = $1;
 HEAP32[$5 + 196 >> 2] = $2;
 HEAP32[$5 + 192 >> 2] = $3;
 HEAP32[$5 + 188 >> 2] = $4;
 HEAP32[$5 + 184 >> 2] = HEAP32[HEAP32[$5 + 204 >> 2] + 8 >> 2];
 HEAP32[$5 + 180 >> 2] = HEAP32[HEAP32[$5 + 204 >> 2] + 12 >> 2];
 HEAP32[$5 + 176 >> 2] = HEAP32[HEAP32[$5 + 204 >> 2] + 24 >> 2];
 HEAP32[$5 + 172 >> 2] = tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$5 + 200 >> 2]) - 1;
 HEAP32[$5 + 168 >> 2] = tflite__MatchingFlatSizeSkipDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__29(HEAP32[$5 + 200 >> 2], HEAP32[$5 + 172 >> 2], HEAP32[$5 + 192 >> 2]);
 HEAP32[$5 + 164 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 200 >> 2], HEAP32[$5 + 172 >> 2], HEAP32[$5 + 192 >> 2], HEAP32[$5 + 172 >> 2]);
 HEAP32[$5 + 160 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 160 >> 2] < HEAP32[$5 + 168 >> 2]) {
   HEAP8[$5 + 159 | 0] = std____2__numeric_limits_signed_20char___min_28_29();
   HEAP32[$5 + 152 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 152 >> 2] < HEAP32[$5 + 164 >> 2]) {
     HEAP8[$5 + 159 | 0] = HEAPU8[signed_20char_20const__20std____2__max_signed_20char__28signed_20char_20const__2c_20signed_20char_20const__29($5 + 159 | 0, HEAP32[$5 + 196 >> 2] + (HEAP32[$5 + 152 >> 2] + Math_imul(HEAP32[$5 + 160 >> 2], HEAP32[$5 + 164 >> 2]) | 0) | 0) | 0];
     HEAP32[$5 + 152 >> 2] = HEAP32[$5 + 152 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 144 >> 2] = gemmlowp__FixedPoint_int_2c_2012___Zero_28_29();
   HEAP32[$5 + 140 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 140 >> 2] < HEAP32[$5 + 164 >> 2]) {
     HEAP32[$5 + 136 >> 2] = HEAP8[HEAP32[$5 + 196 >> 2] + (HEAP32[$5 + 140 >> 2] + Math_imul(HEAP32[$5 + 160 >> 2], HEAP32[$5 + 164 >> 2]) | 0) | 0] - HEAP8[$5 + 159 | 0];
     if (HEAP32[$5 + 136 >> 2] >= HEAP32[$5 + 176 >> 2]) {
      HEAP32[$5 + 132 >> 2] = tflite__MultiplyByQuantizedMultiplierGreaterThanOne_28int_2c_20int_2c_20int_29(HEAP32[$5 + 136 >> 2], HEAP32[$5 + 184 >> 2], HEAP32[$5 + 180 >> 2]);
      HEAP32[$5 + 128 >> 2] = gemmlowp__FixedPoint_int_2c_205___FromRaw_28int_29(HEAP32[$5 + 132 >> 2]);
      HEAP32[$5 + 112 >> 2] = HEAP32[$5 + 144 >> 2];
      HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 128 >> 2];
      HEAP32[$5 + 96 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__exp_on_negative_values_int_2c_205__28gemmlowp__FixedPoint_int_2c_205__29(HEAP32[$5 + 88 >> 2]);
      HEAP32[$5 + 104 >> 2] = gemmlowp__FixedPoint_int_2c_2012__20gemmlowp__Rescale_12_2c_20int_2c_200__28gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$5 + 96 >> 2]);
      HEAP32[$5 + 120 >> 2] = gemmlowp__FixedPoint_int_2c_2012__20gemmlowp__operator__int_2c_2012__28gemmlowp__FixedPoint_int_2c_2012__2c_20gemmlowp__FixedPoint_int_2c_2012__29(HEAP32[$5 + 112 >> 2], HEAP32[$5 + 104 >> 2]);
      HEAP32[$5 + 144 >> 2] = HEAP32[$5 + 120 >> 2];
     }
     HEAP32[$5 + 140 >> 2] = HEAP32[$5 + 140 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 80 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromRaw_28int_29(tflite__GetReciprocal_28int_2c_20int_2c_20int__29(HEAP32[gemmlowp__FixedPoint_int_2c_2012___raw_28_29($5 + 144 | 0) >> 2], 12, $5 + 84 | 0));
   HEAP32[$5 + 76 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 76 >> 2] < HEAP32[$5 + 164 >> 2]) {
     HEAP32[$5 + 72 >> 2] = HEAP8[HEAP32[$5 + 196 >> 2] + (HEAP32[$5 + 76 >> 2] + Math_imul(HEAP32[$5 + 160 >> 2], HEAP32[$5 + 164 >> 2]) | 0) | 0] - HEAP8[$5 + 159 | 0];
     label$10: {
      if (HEAP32[$5 + 72 >> 2] >= HEAP32[$5 + 176 >> 2]) {
       HEAP32[$5 + 68 >> 2] = tflite__MultiplyByQuantizedMultiplierGreaterThanOne_28int_2c_20int_2c_20int_29(HEAP32[$5 + 72 >> 2], HEAP32[$5 + 184 >> 2], HEAP32[$5 + 180 >> 2]);
       HEAP32[$5 + 64 >> 2] = gemmlowp__FixedPoint_int_2c_205___FromRaw_28int_29(HEAP32[$5 + 68 >> 2]);
       HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 64 >> 2];
       HEAP32[$5 + 56 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__exp_on_negative_values_int_2c_205__28gemmlowp__FixedPoint_int_2c_205__29(HEAP32[$5 + 48 >> 2]);
       HEAP32[$5 + 32 >> 2] = HEAP32[$5 + 80 >> 2];
       HEAP32[$5 + 24 >> 2] = HEAP32[$5 + 56 >> 2];
       HEAP32[$5 + 40 >> 2] = gemmlowp__FixedPoint_int_2c_200_20__200__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$5 + 32 >> 2], HEAP32[$5 + 24 >> 2]);
       HEAP32[$5 + 44 >> 2] = int_20gemmlowp__RoundingDivideByPOT_int__28int_2c_20int_29(HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($5 + 40 | 0) >> 2], HEAP32[$5 + 84 >> 2] + 23 | 0);
       HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 44 >> 2] + (std____2__numeric_limits_signed_20char___min_28_29() << 24 >> 24);
       HEAP32[$5 + 16 >> 2] = std____2__numeric_limits_signed_20char___max_28_29() << 24 >> 24;
       $0 = int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($5 + 20 | 0, $5 + 16 | 0);
       HEAP32[$5 + 12 >> 2] = std____2__numeric_limits_signed_20char___min_28_29() << 24 >> 24;
       $0 = int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($0, $5 + 12 | 0);
       HEAP8[HEAP32[$5 + 188 >> 2] + (HEAP32[$5 + 76 >> 2] + Math_imul(HEAP32[$5 + 160 >> 2], HEAP32[$5 + 164 >> 2]) | 0) | 0] = HEAP32[$0 >> 2];
       break label$10;
      }
      $0 = std____2__numeric_limits_signed_20char___min_28_29();
      HEAP8[HEAP32[$5 + 188 >> 2] + (HEAP32[$5 + 76 >> 2] + Math_imul(HEAP32[$5 + 160 >> 2], HEAP32[$5 + 164 >> 2]) | 0) | 0] = $0;
     }
     HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 76 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 160 >> 2] = HEAP32[$5 + 160 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 + 208 | 0;
}

function jswrap_string_replace($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 224 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 216 >> 2] = $0;
 HEAP32[$3 + 212 >> 2] = $1;
 HEAP32[$3 + 208 >> 2] = $2;
 HEAP32[$3 + 204 >> 2] = jsvAsString(HEAP32[$3 + 216 >> 2]);
 label$1: {
  if (jsvIsInstanceOf(HEAP32[$3 + 212 >> 2], 116829) & 1) {
   label$3: {
    label$4: {
     if (!(jsvIsFunction(HEAP32[$3 + 208 >> 2]) & 1)) {
      if (!(jsvIsString(HEAP32[$3 + 208 >> 2]) & 1)) {
       break label$4;
      }
     }
     HEAP32[$3 + 200 >> 2] = jsvLockAgain(HEAP32[$3 + 208 >> 2]);
     break label$3;
    }
    HEAP32[$3 + 200 >> 2] = jsvAsString(HEAP32[$3 + 208 >> 2]);
   }
   jsvObjectSetChildAndUnLock(HEAP32[$3 + 212 >> 2], 111872, jsvNewFromInteger(0));
   HEAP8[$3 + 199 | 0] = jswrap_regexp_hasFlag(HEAP32[$3 + 212 >> 2], 103) & 1;
   HEAP32[$3 + 192 >> 2] = jsvNewFromEmptyString_8();
   jsvStringIteratorNew($3 + 152 | 0, HEAP32[$3 + 192 >> 2], 0);
   HEAP32[$3 + 148 >> 2] = 0;
   HEAP32[$3 + 144 >> 2] = jswrap_regexp_exec(HEAP32[$3 + 212 >> 2], HEAP32[$3 + 204 >> 2]);
   while (1) {
    $0 = 0;
    label$7: {
     if (!HEAP32[$3 + 144 >> 2]) {
      break label$7;
     }
     $0 = 0;
     if (jsvIsNull(HEAP32[$3 + 144 >> 2]) & 1) {
      break label$7;
     }
     $0 = jspIsInterrupted() ^ -1;
    }
    if ($0 & 1) {
     HEAP32[$3 + 140 >> 2] = jsvGetArrayItem(HEAP32[$3 + 144 >> 2], 0);
     HEAP32[$3 + 136 >> 2] = jsvObjectGetIntegerChild(HEAP32[$3 + 144 >> 2], 111866);
     HEAP32[$3 + 132 >> 2] = jsvGetStringLength(HEAP32[$3 + 140 >> 2]);
     jsvStringIteratorAppendString($3 + 152 | 0, HEAP32[$3 + 204 >> 2], HEAP32[$3 + 148 >> 2], HEAP32[$3 + 136 >> 2] - HEAP32[$3 + 148 >> 2] | 0);
     label$9: {
      if (jsvIsFunction(HEAP32[$3 + 200 >> 2]) & 1) {
       HEAP32[$3 + 128 >> 2] = 0;
       $1 = jsvLockAgain(HEAP32[$3 + 140 >> 2]);
       $0 = HEAP32[$3 + 128 >> 2];
       HEAP32[$3 + 128 >> 2] = $0 + 1;
       HEAP32[($3 - -64 | 0) + ($0 << 2) >> 2] = $1;
       while (1) {
        $0 = jsvGetArrayItem(HEAP32[$3 + 144 >> 2], HEAP32[$3 + 128 >> 2]);
        HEAP32[$3 + 60 >> 2] = $0;
        if ($0) {
         $1 = HEAP32[$3 + 60 >> 2];
         $0 = HEAP32[$3 + 128 >> 2];
         HEAP32[$3 + 128 >> 2] = $0 + 1;
         HEAP32[($3 - -64 | 0) + ($0 << 2) >> 2] = $1;
         continue;
        }
        break;
       }
       $1 = jsvObjectGetChildIfExists(HEAP32[$3 + 144 >> 2], 111866);
       $0 = HEAP32[$3 + 128 >> 2];
       HEAP32[$3 + 128 >> 2] = $0 + 1;
       HEAP32[($3 - -64 | 0) + ($0 << 2) >> 2] = $1;
       $1 = jsvObjectGetChildIfExists(HEAP32[$3 + 144 >> 2], 112542);
       $0 = HEAP32[$3 + 128 >> 2];
       HEAP32[$3 + 128 >> 2] = $0 + 1;
       HEAP32[($3 - -64 | 0) + ($0 << 2) >> 2] = $1;
       HEAP32[$3 + 56 >> 2] = jsvAsStringAndUnLock(jspeFunctionCall(HEAP32[$3 + 200 >> 2], 0, 0, 0, HEAP32[$3 + 128 >> 2], $3 - -64 | 0));
       jsvUnLockMany(HEAP32[$3 + 128 >> 2], $3 - -64 | 0);
       jsvStringIteratorAppendString($3 + 152 | 0, HEAP32[$3 + 56 >> 2], 0, 2147483647);
       jsvUnLock(HEAP32[$3 + 56 >> 2]);
       break label$9;
      }
      jsvStringIteratorNew($3 + 16 | 0, HEAP32[$3 + 200 >> 2], 0);
      while (1) {
       if (jsvStringIteratorHasChar_8($3 + 16 | 0) & 1) {
        HEAP8[$3 + 15 | 0] = jsvStringIteratorGetCharAndNext($3 + 16 | 0);
        label$15: {
         if (HEAP8[$3 + 15 | 0] == 36) {
          HEAP8[$3 + 15 | 0] = jsvStringIteratorGetCharAndNext($3 + 16 | 0);
          HEAP32[$3 + 8 >> 2] = 0;
          if (!(HEAP8[$3 + 15 | 0] <= 48 | HEAP8[$3 + 15 | 0] > 57)) {
           HEAP32[$3 + 8 >> 2] = jsvGetArrayItem(HEAP32[$3 + 144 >> 2], HEAP8[$3 + 15 | 0] - 48 | 0);
          }
          label$18: {
           if (HEAP32[$3 + 8 >> 2]) {
            jsvStringIteratorAppendString($3 + 152 | 0, HEAP32[$3 + 8 >> 2], 0, 2147483647);
            jsvUnLock(HEAP32[$3 + 8 >> 2]);
            break label$18;
           }
           jsvStringIteratorAppend($3 + 152 | 0, 36);
           jsvStringIteratorAppend($3 + 152 | 0, HEAP8[$3 + 15 | 0]);
          }
          break label$15;
         }
         jsvStringIteratorAppend($3 + 152 | 0, HEAP8[$3 + 15 | 0]);
        }
        continue;
       }
       break;
      }
      jsvStringIteratorFree_10($3 + 16 | 0);
     }
     HEAP32[$3 + 148 >> 2] = HEAP32[$3 + 136 >> 2] + HEAP32[$3 + 132 >> 2];
     jsvUnLock(HEAP32[$3 + 140 >> 2]);
     jsvUnLock(HEAP32[$3 + 144 >> 2]);
     HEAP32[$3 + 144 >> 2] = 0;
     if (HEAP8[$3 + 199 | 0] & 1) {
      jsvObjectSetChildAndUnLock(HEAP32[$3 + 212 >> 2], 111872, jsvNewFromInteger(HEAP32[$3 + 148 >> 2] + !HEAP32[$3 + 132 >> 2] | 0));
      HEAP32[$3 + 144 >> 2] = jswrap_regexp_exec(HEAP32[$3 + 212 >> 2], HEAP32[$3 + 204 >> 2]);
     }
     continue;
    }
    break;
   }
   jsvStringIteratorAppendString($3 + 152 | 0, HEAP32[$3 + 204 >> 2], HEAP32[$3 + 148 >> 2], 2147483647);
   jsvStringIteratorFree_10($3 + 152 | 0);
   jsvUnLock3(HEAP32[$3 + 144 >> 2], HEAP32[$3 + 200 >> 2], HEAP32[$3 + 204 >> 2]);
   if (HEAP8[$3 + 199 | 0] & 1) {
    jsvObjectSetChildAndUnLock(HEAP32[$3 + 212 >> 2], 111872, jsvNewFromInteger(0));
   }
   HEAP32[$3 + 220 >> 2] = HEAP32[$3 + 192 >> 2];
   break label$1;
  }
  HEAP32[$3 + 208 >> 2] = jsvAsString(HEAP32[$3 + 208 >> 2]);
  HEAP32[$3 + 212 >> 2] = jsvAsString(HEAP32[$3 + 212 >> 2]);
  HEAP32[$3 + 4 >> 2] = jswrap_string_indexOf(HEAP32[$3 + 216 >> 2], HEAP32[$3 + 212 >> 2], 0, 0);
  if (HEAP32[$3 + 4 >> 2] >= 0) {
   HEAP32[$3 >> 2] = jsvNewFromStringVar(HEAP32[$3 + 204 >> 2], 0, HEAP32[$3 + 4 >> 2]);
   jsvAppendStringVarComplete(HEAP32[$3 >> 2], HEAP32[$3 + 208 >> 2]);
   jsvAppendStringVar(HEAP32[$3 >> 2], HEAP32[$3 + 204 >> 2], HEAP32[$3 + 4 >> 2] + jsvGetStringLength(HEAP32[$3 + 212 >> 2]) | 0, 2147483647);
   jsvUnLock(HEAP32[$3 + 204 >> 2]);
   HEAP32[$3 + 204 >> 2] = HEAP32[$3 >> 2];
  }
  jsvUnLock2(HEAP32[$3 + 212 >> 2], HEAP32[$3 + 208 >> 2]);
  HEAP32[$3 + 220 >> 2] = HEAP32[$3 + 204 >> 2];
 }
 __stack_pointer = $3 + 224 | 0;
 return HEAP32[$3 + 220 >> 2];
}

function tflite__reference_integer_ops__MaxPool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 144 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 140 >> 2] = $0;
 HEAP32[$5 + 136 >> 2] = $1;
 HEAP32[$5 + 132 >> 2] = $2;
 HEAP32[$5 + 128 >> 2] = $3;
 HEAP32[$5 + 124 >> 2] = $4;
 label$1: {
  if (HEAP32[HEAP32[$5 + 140 >> 2] + 28 >> 2] > HEAP32[HEAP32[$5 + 140 >> 2] + 32 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if (HEAP32[HEAP32[$5 + 140 >> 2] + 28 >> 2] < std____2__numeric_limits_signed_20char___min_28_29() << 24 >> 24) {
   break label$2;
  }
 }
 label$3: {
  if (HEAP32[HEAP32[$5 + 140 >> 2] + 32 >> 2] > std____2__numeric_limits_signed_20char___max_28_29() << 24 >> 24) {
   break label$3;
  }
 }
 label$4: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$5 + 136 >> 2]) | 0) != 4) {
   break label$4;
  }
 }
 label$5: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$5 + 128 >> 2]) | 0) != 4) {
   break label$5;
  }
 }
 HEAP32[$5 + 120 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 0, HEAP32[$5 + 128 >> 2], 0);
 HEAP32[$5 + 116 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 3, HEAP32[$5 + 128 >> 2], 3);
 HEAP32[$5 + 112 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 1);
 HEAP32[$5 + 108 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 2);
 HEAP32[$5 + 104 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 1);
 HEAP32[$5 + 100 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 2);
 HEAP32[$5 + 96 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 12 >> 2];
 HEAP32[$5 + 92 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 16 >> 2];
 HEAP32[$5 + 88 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 88 >> 2] < HEAP32[$5 + 120 >> 2]) {
   HEAP32[$5 + 84 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 84 >> 2] < HEAP32[$5 + 104 >> 2]) {
     HEAP32[$5 + 80 >> 2] = 0;
     while (1) {
      if (HEAP32[$5 + 80 >> 2] < HEAP32[$5 + 100 >> 2]) {
       HEAP32[$5 + 76 >> 2] = 0;
       while (1) {
        if (HEAP32[$5 + 76 >> 2] < HEAP32[$5 + 116 >> 2]) {
         HEAP32[$5 + 72 >> 2] = Math_imul(HEAP32[$5 + 80 >> 2], HEAP32[$5 + 92 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 2 >> 1];
         HEAP32[$5 + 68 >> 2] = Math_imul(HEAP32[$5 + 84 >> 2], HEAP32[$5 + 96 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 4 >> 1];
         HEAP32[$5 + 60 >> 2] = 0;
         HEAP32[$5 + 56 >> 2] = 0 - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 64 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 60 | 0, $5 + 56 | 0) >> 2];
         $0 = HEAP32[$5 + 140 >> 2];
         HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 108 >> 2] - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 52 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0 + 24 | 0, $5 + 48 | 0) >> 2];
         HEAP32[$5 + 40 >> 2] = 0;
         HEAP32[$5 + 36 >> 2] = 0 - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 44 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 40 | 0, $5 + 36 | 0) >> 2];
         $0 = HEAP32[$5 + 140 >> 2];
         HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 112 >> 2] - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 32 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0 + 20 | 0, $5 + 28 | 0) >> 2];
         HEAP8[$5 + 27 | 0] = std____2__numeric_limits_signed_20char___lowest_28_29();
         HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 44 >> 2];
         while (1) {
          if (HEAP32[$5 + 20 >> 2] < HEAP32[$5 + 32 >> 2]) {
           HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 64 >> 2];
           while (1) {
            if (HEAP32[$5 + 16 >> 2] < HEAP32[$5 + 52 >> 2]) {
             HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 72 >> 2] + HEAP32[$5 + 16 >> 2];
             HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 68 >> 2] + HEAP32[$5 + 20 >> 2];
             HEAP8[$5 + 27 | 0] = HEAPU8[signed_20char_20const__20std____2__max_signed_20char__28signed_20char_20const__2c_20signed_20char_20const__29($5 + 27 | 0, HEAP32[$5 + 132 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 136 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 8 >> 2], HEAP32[$5 + 12 >> 2], HEAP32[$5 + 76 >> 2]) | 0) | 0];
             HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 1;
             continue;
            }
            break;
           }
           HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 20 >> 2] + 1;
           continue;
          }
          break;
         }
         HEAP8[$5 + 7 | 0] = HEAP32[HEAP32[$5 + 140 >> 2] + 28 >> 2];
         HEAP8[$5 + 27 | 0] = HEAPU8[signed_20char_20const__20std____2__max_signed_20char__28signed_20char_20const__2c_20signed_20char_20const__29($5 + 27 | 0, $5 + 7 | 0) | 0];
         HEAP8[$5 + 6 | 0] = HEAP32[HEAP32[$5 + 140 >> 2] + 32 >> 2];
         HEAP8[$5 + 27 | 0] = HEAPU8[signed_20char_20const__20std____2__min_signed_20char__28signed_20char_20const__2c_20signed_20char_20const__29($5 + 27 | 0, $5 + 6 | 0) | 0];
         $0 = HEAPU8[$5 + 27 | 0];
         HEAP8[HEAP32[$5 + 124 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 128 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2], HEAP32[$5 + 76 >> 2]) | 0] = $0;
         HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 76 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$5 + 80 >> 2] = HEAP32[$5 + 80 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$5 + 84 >> 2] = HEAP32[$5 + 84 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 88 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 + 144 | 0;
}

function void_20tflite__reference_ops__Softmax_signed_20char_2c_20short__28tflite__SoftmaxParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20short__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 208 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 204 >> 2] = $0;
 HEAP32[$5 + 200 >> 2] = $1;
 HEAP32[$5 + 196 >> 2] = $2;
 HEAP32[$5 + 192 >> 2] = $3;
 HEAP32[$5 + 188 >> 2] = $4;
 HEAP32[$5 + 184 >> 2] = HEAP32[HEAP32[$5 + 204 >> 2] + 8 >> 2];
 HEAP32[$5 + 180 >> 2] = HEAP32[HEAP32[$5 + 204 >> 2] + 12 >> 2];
 HEAP32[$5 + 176 >> 2] = HEAP32[HEAP32[$5 + 204 >> 2] + 24 >> 2];
 HEAP32[$5 + 172 >> 2] = tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$5 + 200 >> 2]) - 1;
 HEAP32[$5 + 168 >> 2] = tflite__MatchingFlatSizeSkipDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__29(HEAP32[$5 + 200 >> 2], HEAP32[$5 + 172 >> 2], HEAP32[$5 + 192 >> 2]);
 HEAP32[$5 + 164 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 200 >> 2], HEAP32[$5 + 172 >> 2], HEAP32[$5 + 192 >> 2], HEAP32[$5 + 172 >> 2]);
 HEAP32[$5 + 160 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 160 >> 2] < HEAP32[$5 + 168 >> 2]) {
   HEAP8[$5 + 159 | 0] = std____2__numeric_limits_signed_20char___min_28_29();
   HEAP32[$5 + 152 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 152 >> 2] < HEAP32[$5 + 164 >> 2]) {
     HEAP8[$5 + 159 | 0] = HEAPU8[signed_20char_20const__20std____2__max_signed_20char__28signed_20char_20const__2c_20signed_20char_20const__29($5 + 159 | 0, HEAP32[$5 + 196 >> 2] + (HEAP32[$5 + 152 >> 2] + Math_imul(HEAP32[$5 + 160 >> 2], HEAP32[$5 + 164 >> 2]) | 0) | 0) | 0];
     HEAP32[$5 + 152 >> 2] = HEAP32[$5 + 152 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 144 >> 2] = gemmlowp__FixedPoint_int_2c_2012___Zero_28_29();
   HEAP32[$5 + 140 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 140 >> 2] < HEAP32[$5 + 164 >> 2]) {
     HEAP32[$5 + 136 >> 2] = HEAP8[HEAP32[$5 + 196 >> 2] + (HEAP32[$5 + 140 >> 2] + Math_imul(HEAP32[$5 + 160 >> 2], HEAP32[$5 + 164 >> 2]) | 0) | 0] - HEAP8[$5 + 159 | 0];
     if (HEAP32[$5 + 136 >> 2] >= HEAP32[$5 + 176 >> 2]) {
      HEAP32[$5 + 132 >> 2] = tflite__MultiplyByQuantizedMultiplierGreaterThanOne_28int_2c_20int_2c_20int_29(HEAP32[$5 + 136 >> 2], HEAP32[$5 + 184 >> 2], HEAP32[$5 + 180 >> 2]);
      HEAP32[$5 + 128 >> 2] = gemmlowp__FixedPoint_int_2c_205___FromRaw_28int_29(HEAP32[$5 + 132 >> 2]);
      HEAP32[$5 + 112 >> 2] = HEAP32[$5 + 144 >> 2];
      HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 128 >> 2];
      HEAP32[$5 + 96 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__exp_on_negative_values_int_2c_205__28gemmlowp__FixedPoint_int_2c_205__29(HEAP32[$5 + 88 >> 2]);
      HEAP32[$5 + 104 >> 2] = gemmlowp__FixedPoint_int_2c_2012__20gemmlowp__Rescale_12_2c_20int_2c_200__28gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$5 + 96 >> 2]);
      HEAP32[$5 + 120 >> 2] = gemmlowp__FixedPoint_int_2c_2012__20gemmlowp__operator__int_2c_2012__28gemmlowp__FixedPoint_int_2c_2012__2c_20gemmlowp__FixedPoint_int_2c_2012__29(HEAP32[$5 + 112 >> 2], HEAP32[$5 + 104 >> 2]);
      HEAP32[$5 + 144 >> 2] = HEAP32[$5 + 120 >> 2];
     }
     HEAP32[$5 + 140 >> 2] = HEAP32[$5 + 140 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 80 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromRaw_28int_29(tflite__GetReciprocal_28int_2c_20int_2c_20int__29(HEAP32[gemmlowp__FixedPoint_int_2c_2012___raw_28_29($5 + 144 | 0) >> 2], 12, $5 + 84 | 0));
   HEAP32[$5 + 76 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 76 >> 2] < HEAP32[$5 + 164 >> 2]) {
     HEAP32[$5 + 72 >> 2] = HEAP8[HEAP32[$5 + 196 >> 2] + (HEAP32[$5 + 76 >> 2] + Math_imul(HEAP32[$5 + 160 >> 2], HEAP32[$5 + 164 >> 2]) | 0) | 0] - HEAP8[$5 + 159 | 0];
     label$10: {
      if (HEAP32[$5 + 72 >> 2] >= HEAP32[$5 + 176 >> 2]) {
       HEAP32[$5 + 68 >> 2] = tflite__MultiplyByQuantizedMultiplierGreaterThanOne_28int_2c_20int_2c_20int_29(HEAP32[$5 + 72 >> 2], HEAP32[$5 + 184 >> 2], HEAP32[$5 + 180 >> 2]);
       HEAP32[$5 + 64 >> 2] = gemmlowp__FixedPoint_int_2c_205___FromRaw_28int_29(HEAP32[$5 + 68 >> 2]);
       HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 64 >> 2];
       HEAP32[$5 + 56 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__exp_on_negative_values_int_2c_205__28gemmlowp__FixedPoint_int_2c_205__29(HEAP32[$5 + 48 >> 2]);
       HEAP32[$5 + 32 >> 2] = HEAP32[$5 + 80 >> 2];
       HEAP32[$5 + 24 >> 2] = HEAP32[$5 + 56 >> 2];
       HEAP32[$5 + 40 >> 2] = gemmlowp__FixedPoint_int_2c_200_20__200__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$5 + 32 >> 2], HEAP32[$5 + 24 >> 2]);
       HEAP32[$5 + 44 >> 2] = int_20gemmlowp__RoundingDivideByPOT_int__28int_2c_20int_29(HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($5 + 40 | 0) >> 2], HEAP32[$5 + 84 >> 2] + 15 | 0);
       HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 44 >> 2] + (std____2__numeric_limits_short___min_28_29() << 16 >> 16);
       HEAP32[$5 + 16 >> 2] = std____2__numeric_limits_short___max_28_29() << 16 >> 16;
       $0 = int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($5 + 20 | 0, $5 + 16 | 0);
       HEAP32[$5 + 12 >> 2] = std____2__numeric_limits_short___min_28_29() << 16 >> 16;
       $0 = int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($0, $5 + 12 | 0);
       HEAP16[HEAP32[$5 + 188 >> 2] + (HEAP32[$5 + 76 >> 2] + Math_imul(HEAP32[$5 + 160 >> 2], HEAP32[$5 + 164 >> 2]) << 1) >> 1] = HEAP32[$0 >> 2];
       break label$10;
      }
      $0 = std____2__numeric_limits_short___min_28_29();
      HEAP16[HEAP32[$5 + 188 >> 2] + (HEAP32[$5 + 76 >> 2] + Math_imul(HEAP32[$5 + 160 >> 2], HEAP32[$5 + 164 >> 2]) << 1) >> 1] = $0;
     }
     HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 76 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 160 >> 2] = HEAP32[$5 + 160 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 + 208 | 0;
}

function matchcharacter($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 40 >> 2] = $0;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP32[$4 + 28 >> 2] = $3;
 HEAP32[HEAP32[$4 + 32 >> 2] >> 2] = 1;
 HEAP8[$4 + 27 | 0] = jsvStringIteratorGetChar_5(HEAP32[$4 + 36 >> 2]);
 label$1: {
  if (HEAP8[HEAP32[$4 + 40 >> 2]] == 46) {
   HEAP8[$4 + 47 | 0] = 1;
   break label$1;
  }
  if (HEAP8[HEAP32[$4 + 40 >> 2]] == 91) {
   HEAP8[HEAP32[$4 + 28 >> 2] + 9 | 0] = 1;
   HEAP8[$4 + 26 | 0] = HEAP8[HEAP32[$4 + 40 >> 2] + 1 | 0] == 94;
   if (HEAP8[$4 + 26 | 0] & 1) {
    $0 = HEAP32[$4 + 32 >> 2];
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
   }
   HEAP8[$4 + 25 | 0] = 0;
   while (1) {
    $0 = 0;
    $0 = HEAP8[HEAP32[$4 + 40 >> 2] + HEAP32[HEAP32[$4 + 32 >> 2] >> 2] | 0] ? HEAP8[HEAP32[$4 + 40 >> 2] + HEAP32[HEAP32[$4 + 32 >> 2] >> 2] | 0] != 93 : $0;
    if ($0) {
     if (HEAP8[HEAP32[$4 + 40 >> 2] + HEAP32[HEAP32[$4 + 32 >> 2] >> 2] | 0] == 46) {
      HEAP8[$4 + 25 | 0] = HEAP8[$4 + 25 | 0] & 1 | HEAP8[$4 + 27 | 0] == 46;
      $0 = HEAP32[$4 + 32 >> 2];
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
      continue;
     }
     HEAP8[$4 + 25 | 0] = matchcharacter(HEAP32[$4 + 40 >> 2] + HEAP32[HEAP32[$4 + 32 >> 2] >> 2] | 0, HEAP32[$4 + 36 >> 2], $4 + 20 | 0, HEAP32[$4 + 28 >> 2]) & 1 | HEAP8[$4 + 25 | 0] & 1;
     $0 = HEAP32[$4 + 32 >> 2];
     HEAP32[$0 >> 2] = HEAP32[$4 + 20 >> 2] + HEAP32[$0 >> 2];
     continue;
    }
    break;
   }
   label$9: {
    if (HEAP8[HEAP32[$4 + 40 >> 2] + HEAP32[HEAP32[$4 + 32 >> 2] >> 2] | 0] == 93) {
     $0 = HEAP32[$4 + 32 >> 2];
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     break label$9;
    }
    jsExceptionHere(1, 111896, 0);
    HEAP8[$4 + 47 | 0] = 0;
    break label$1;
   }
   HEAP8[HEAP32[$4 + 28 >> 2] + 9 | 0] = 0;
   HEAP8[$4 + 47 | 0] = (HEAP8[$4 + 25 | 0] & 1) != (HEAP8[$4 + 26 | 0] & 1);
   break label$1;
  }
  HEAP8[$4 + 19 | 0] = HEAPU8[HEAP32[$4 + 40 >> 2]];
  label$11: {
   if (HEAP8[$4 + 19 | 0] != 92) {
    break label$11;
   }
   HEAP32[HEAP32[$4 + 32 >> 2] >> 2] = 2;
   HEAP8[$4 + 19 | 0] = HEAPU8[HEAP32[$4 + 40 >> 2] + 1 | 0];
   if (HEAP8[$4 + 19 | 0] == 100) {
    HEAP8[$4 + 47 | 0] = isNumeric(HEAP8[$4 + 27 | 0]) & 1;
    break label$1;
   }
   if (HEAP8[$4 + 19 | 0] == 68) {
    HEAP8[$4 + 47 | 0] = (isNumeric(HEAP8[$4 + 27 | 0]) ^ -1) & 1;
    break label$1;
   }
   if (HEAP8[$4 + 19 | 0] == 102) {
    HEAP8[$4 + 19 | 0] = 12;
    break label$11;
   }
   if (HEAP8[$4 + 19 | 0] == 98) {
    HEAP8[$4 + 19 | 0] = 8;
    break label$11;
   }
   if (HEAP8[$4 + 19 | 0] == 110) {
    HEAP8[$4 + 19 | 0] = 10;
    break label$11;
   }
   if (HEAP8[$4 + 19 | 0] == 114) {
    HEAP8[$4 + 19 | 0] = 13;
    break label$11;
   }
   if (HEAP8[$4 + 19 | 0] == 115) {
    HEAP8[$4 + 47 | 0] = isWhitespace(HEAP8[$4 + 27 | 0]) & 1;
    break label$1;
   }
   if (HEAP8[$4 + 19 | 0] == 83) {
    HEAP8[$4 + 47 | 0] = (isWhitespace(HEAP8[$4 + 27 | 0]) ^ -1) & 1;
    break label$1;
   }
   if (HEAP8[$4 + 19 | 0] == 116) {
    HEAP8[$4 + 19 | 0] = 9;
    break label$11;
   }
   if (HEAP8[$4 + 19 | 0] == 118) {
    HEAP8[$4 + 19 | 0] = 11;
    break label$11;
   }
   if (HEAP8[$4 + 19 | 0] == 119) {
    $0 = 1;
    label$23: {
     if (isNumeric(HEAP8[$4 + 27 | 0]) & 1) {
      break label$23;
     }
     $0 = 1;
     if (isAlpha(HEAP8[$4 + 27 | 0]) & 1) {
      break label$23;
     }
     $0 = HEAP8[$4 + 27 | 0] == 95;
    }
    HEAP8[$4 + 47 | 0] = $0;
    break label$1;
   }
   if (HEAP8[$4 + 19 | 0] == 87) {
    $0 = 1;
    label$25: {
     if (isNumeric(HEAP8[$4 + 27 | 0]) & 1) {
      break label$25;
     }
     $0 = 1;
     if (isAlpha(HEAP8[$4 + 27 | 0]) & 1) {
      break label$25;
     }
     $0 = HEAP8[$4 + 27 | 0] == 95;
    }
    HEAP8[$4 + 47 | 0] = ($0 ^ -1) & 1;
    break label$1;
   }
   if (HEAP8[$4 + 19 | 0] == 48) {
    HEAP8[$4 + 19 | 0] = 0;
    break label$11;
   }
   if (!(HEAP8[$4 + 19 | 0] < 49 | HEAP8[$4 + 19 | 0] > 57)) {
    jsExceptionHere(1, 121231, 0);
    HEAP8[$4 + 47 | 0] = 0;
    break label$1;
   }
   if (!(!HEAP8[HEAP32[$4 + 40 >> 2] + 3 | 0] | (!HEAP8[HEAP32[$4 + 40 >> 2] + 2 | 0] | HEAP8[$4 + 19 | 0] != 120))) {
    HEAP32[HEAP32[$4 + 32 >> 2] >> 2] = 4;
    HEAP8[$4 + 19 | 0] = hexToByte(HEAP8[HEAP32[$4 + 40 >> 2] + 2 | 0], HEAP8[HEAP32[$4 + 40 >> 2] + 3 | 0]);
   }
  }
  if (!(!(HEAP8[HEAP32[$4 + 28 >> 2] + 9 | 0] & 1) | HEAP8[HEAP32[$4 + 40 >> 2] + HEAP32[HEAP32[$4 + 32 >> 2] >> 2] | 0] != 45 | HEAP8[HEAP32[$4 + 40 >> 2] + (HEAP32[HEAP32[$4 + 32 >> 2] >> 2] + 1 | 0) | 0] == 93)) {
   HEAP16[HEAP32[$4 + 28 >> 2] + 10 >> 1] = HEAP8[$4 + 19 | 0];
   $0 = HEAP32[$4 + 32 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
   HEAP8[$4 + 11 | 0] = matchcharacter(HEAP32[$4 + 40 >> 2] + HEAP32[HEAP32[$4 + 32 >> 2] >> 2] | 0, HEAP32[$4 + 36 >> 2], $4 + 12 | 0, HEAP32[$4 + 28 >> 2]) & 1;
   $0 = HEAP32[$4 + 32 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$4 + 12 >> 2] + HEAP32[$0 >> 2];
   HEAP8[$4 + 47 | 0] = HEAP8[$4 + 11 | 0] & 1;
   break label$1;
  }
  if (HEAP8[HEAP32[$4 + 28 >> 2] + 8 | 0] & 1) {
   HEAP8[$4 + 27 | 0] = charToLowerCase(HEAP8[$4 + 27 | 0]);
   HEAP8[$4 + 19 | 0] = charToLowerCase(HEAP8[$4 + 19 | 0]);
  }
  if (HEAP16[HEAP32[$4 + 28 >> 2] + 10 >> 1] != 256) {
   HEAP8[$4 + 10 | 0] = HEAPU16[HEAP32[$4 + 28 >> 2] + 10 >> 1];
   if (HEAP8[HEAP32[$4 + 28 >> 2] + 8 | 0] & 1) {
    HEAP8[$4 + 10 | 0] = charToLowerCase(HEAP8[$4 + 10 | 0]);
   }
   HEAP16[HEAP32[$4 + 28 >> 2] + 10 >> 1] = 256;
   $0 = 0;
   label$33: {
    if (HEAP8[$4 + 27 | 0] < HEAP8[$4 + 10 | 0]) {
     break label$33;
    }
    $0 = 0;
    if (HEAP8[$4 + 27 | 0] > HEAP8[$4 + 19 | 0]) {
     break label$33;
    }
    $0 = HEAP8[$4 + 10 | 0] < HEAP8[$4 + 19 | 0];
   }
   HEAP8[$4 + 47 | 0] = $0;
   break label$1;
  }
  HEAP8[$4 + 47 | 0] = HEAP8[$4 + 19 | 0] == HEAP8[$4 + 27 | 0];
 }
 __stack_pointer = $4 + 48 | 0;
 return HEAP8[$4 + 47 | 0] & 1;
}

function tflite__reference_ops__MaxPool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 144 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 140 >> 2] = $0;
 HEAP32[$5 + 136 >> 2] = $1;
 HEAP32[$5 + 132 >> 2] = $2;
 HEAP32[$5 + 128 >> 2] = $3;
 HEAP32[$5 + 124 >> 2] = $4;
 label$1: {
  if (HEAP32[HEAP32[$5 + 140 >> 2] + 28 >> 2] > HEAP32[HEAP32[$5 + 140 >> 2] + 32 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if (HEAP32[HEAP32[$5 + 140 >> 2] + 28 >> 2] < 0) {
   break label$2;
  }
 }
 label$3: {
  if (HEAP32[HEAP32[$5 + 140 >> 2] + 32 >> 2] > 255) {
   break label$3;
  }
 }
 label$4: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$5 + 136 >> 2]) | 0) != 4) {
   break label$4;
  }
 }
 label$5: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$5 + 128 >> 2]) | 0) != 4) {
   break label$5;
  }
 }
 HEAP32[$5 + 120 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 0, HEAP32[$5 + 128 >> 2], 0);
 HEAP32[$5 + 116 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 3, HEAP32[$5 + 128 >> 2], 3);
 HEAP32[$5 + 112 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 1);
 HEAP32[$5 + 108 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 2);
 HEAP32[$5 + 104 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 1);
 HEAP32[$5 + 100 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 2);
 HEAP32[$5 + 96 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 12 >> 2];
 HEAP32[$5 + 92 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 16 >> 2];
 HEAP32[$5 + 88 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 88 >> 2] < HEAP32[$5 + 120 >> 2]) {
   HEAP32[$5 + 84 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 84 >> 2] < HEAP32[$5 + 104 >> 2]) {
     HEAP32[$5 + 80 >> 2] = 0;
     while (1) {
      if (HEAP32[$5 + 80 >> 2] < HEAP32[$5 + 100 >> 2]) {
       HEAP32[$5 + 76 >> 2] = 0;
       while (1) {
        if (HEAP32[$5 + 76 >> 2] < HEAP32[$5 + 116 >> 2]) {
         HEAP32[$5 + 72 >> 2] = Math_imul(HEAP32[$5 + 80 >> 2], HEAP32[$5 + 92 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 2 >> 1];
         HEAP32[$5 + 68 >> 2] = Math_imul(HEAP32[$5 + 84 >> 2], HEAP32[$5 + 96 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 4 >> 1];
         HEAP32[$5 + 60 >> 2] = 0;
         HEAP32[$5 + 56 >> 2] = 0 - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 64 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 60 | 0, $5 + 56 | 0) >> 2];
         $0 = HEAP32[$5 + 140 >> 2];
         HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 108 >> 2] - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 52 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0 + 24 | 0, $5 + 48 | 0) >> 2];
         HEAP32[$5 + 40 >> 2] = 0;
         HEAP32[$5 + 36 >> 2] = 0 - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 44 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 40 | 0, $5 + 36 | 0) >> 2];
         $0 = HEAP32[$5 + 140 >> 2];
         HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 112 >> 2] - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 32 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0 + 20 | 0, $5 + 28 | 0) >> 2];
         HEAP8[$5 + 27 | 0] = 0;
         HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 44 >> 2];
         while (1) {
          if (HEAP32[$5 + 20 >> 2] < HEAP32[$5 + 32 >> 2]) {
           HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 64 >> 2];
           while (1) {
            if (HEAP32[$5 + 16 >> 2] < HEAP32[$5 + 52 >> 2]) {
             HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 72 >> 2] + HEAP32[$5 + 16 >> 2];
             HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 68 >> 2] + HEAP32[$5 + 20 >> 2];
             HEAP8[$5 + 27 | 0] = HEAPU8[unsigned_20char_20const__20std____2__max_unsigned_20char__28unsigned_20char_20const__2c_20unsigned_20char_20const__29($5 + 27 | 0, HEAP32[$5 + 132 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 136 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 8 >> 2], HEAP32[$5 + 12 >> 2], HEAP32[$5 + 76 >> 2]) | 0) | 0];
             HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 1;
             continue;
            }
            break;
           }
           HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 20 >> 2] + 1;
           continue;
          }
          break;
         }
         HEAP8[$5 + 7 | 0] = HEAP32[HEAP32[$5 + 140 >> 2] + 28 >> 2];
         HEAP8[$5 + 27 | 0] = HEAPU8[unsigned_20char_20const__20std____2__max_unsigned_20char__28unsigned_20char_20const__2c_20unsigned_20char_20const__29($5 + 27 | 0, $5 + 7 | 0) | 0];
         HEAP8[$5 + 6 | 0] = HEAP32[HEAP32[$5 + 140 >> 2] + 32 >> 2];
         HEAP8[$5 + 27 | 0] = HEAPU8[unsigned_20char_20const__20std____2__min_unsigned_20char__28unsigned_20char_20const__2c_20unsigned_20char_20const__29($5 + 27 | 0, $5 + 6 | 0) | 0];
         $0 = HEAPU8[$5 + 27 | 0];
         HEAP8[HEAP32[$5 + 124 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 128 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2], HEAP32[$5 + 76 >> 2]) | 0] = $0;
         HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 76 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$5 + 80 >> 2] = HEAP32[$5 + 80 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$5 + 84 >> 2] = HEAP32[$5 + 84 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 88 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 + 144 | 0;
}

function jstDumpUtilityTimers() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $0 = __stack_pointer - 544 | 0;
 __stack_pointer = $0;
 jshInterruptOff();
 HEAP32[$0 + 540 >> 2] = 0;
 while (1) {
  if (HEAP32[$0 + 540 >> 2] < 16) {
   $1 = Math_imul(HEAP32[$0 + 540 >> 2], 25) + 349040 | 0;
   $2 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
   $3 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
   $4 = $2;
   $6 = ($0 + 128 | 0) + Math_imul(HEAP32[$0 + 540 >> 2], 25) | 0;
   $2 = $6;
   HEAP8[$2 | 0] = $4;
   HEAP8[$2 + 1 | 0] = $4 >>> 8;
   HEAP8[$2 + 2 | 0] = $4 >>> 16;
   HEAP8[$2 + 3 | 0] = $4 >>> 24;
   HEAP8[$2 + 4 | 0] = $3;
   HEAP8[$2 + 5 | 0] = $3 >>> 8;
   HEAP8[$2 + 6 | 0] = $3 >>> 16;
   HEAP8[$2 + 7 | 0] = $3 >>> 24;
   HEAP8[$2 + 24 | 0] = HEAPU8[$1 + 24 | 0];
   $2 = HEAPU8[$1 + 20 | 0] | HEAPU8[$1 + 21 | 0] << 8 | (HEAPU8[$1 + 22 | 0] << 16 | HEAPU8[$1 + 23 | 0] << 24);
   $3 = HEAPU8[$1 + 16 | 0] | HEAPU8[$1 + 17 | 0] << 8 | (HEAPU8[$1 + 18 | 0] << 16 | HEAPU8[$1 + 19 | 0] << 24);
   $4 = $3;
   $3 = $6;
   HEAP8[$3 + 16 | 0] = $4;
   HEAP8[$3 + 17 | 0] = $4 >>> 8;
   HEAP8[$3 + 18 | 0] = $4 >>> 16;
   HEAP8[$3 + 19 | 0] = $4 >>> 24;
   HEAP8[$3 + 20 | 0] = $2;
   HEAP8[$3 + 21 | 0] = $2 >>> 8;
   HEAP8[$3 + 22 | 0] = $2 >>> 16;
   HEAP8[$3 + 23 | 0] = $2 >>> 24;
   $3 = HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8 | (HEAPU8[$1 + 14 | 0] << 16 | HEAPU8[$1 + 15 | 0] << 24);
   $2 = HEAPU8[$1 + 8 | 0] | HEAPU8[$1 + 9 | 0] << 8 | (HEAPU8[$1 + 10 | 0] << 16 | HEAPU8[$1 + 11 | 0] << 24);
   $4 = $2;
   $2 = $6;
   HEAP8[$2 + 8 | 0] = $4;
   HEAP8[$2 + 9 | 0] = $4 >>> 8;
   HEAP8[$2 + 10 | 0] = $4 >>> 16;
   HEAP8[$2 + 11 | 0] = $4 >>> 24;
   HEAP8[$2 + 12 | 0] = $3;
   HEAP8[$2 + 13 | 0] = $3 >>> 8;
   HEAP8[$2 + 14 | 0] = $3 >>> 16;
   HEAP8[$2 + 15 | 0] = $3 >>> 24;
   HEAP32[$0 + 540 >> 2] = HEAP32[$0 + 540 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP8[$0 + 127 | 0] = HEAPU8[349025];
 HEAP8[$0 + 126 | 0] = HEAPU8[349026];
 jshInterruptOn();
 HEAP32[$0 + 80 >> 2] = HEAP8[349027] & 1 ? 117530 : 119100;
 jsiConsolePrintf(145298, $0 + 80 | 0);
 HEAP8[$0 + 125 | 0] = HEAPU8[$0 + 126 | 0];
 HEAP8[$0 + 124 | 0] = 0;
 while (1) {
  if (HEAPU8[$0 + 125 | 0] != HEAPU8[$0 + 127 | 0]) {
   HEAP8[$0 + 124 | 0] = 1;
   $1 = ($0 + 128 | 0) + Math_imul(HEAPU8[$0 + 125 | 0], 25) | 0;
   HEAP8[$0 + 120 | 0] = HEAPU8[$1 + 24 | 0];
   $3 = HEAPU8[$1 + 16 | 0] | HEAPU8[$1 + 17 | 0] << 8 | (HEAPU8[$1 + 18 | 0] << 16 | HEAPU8[$1 + 19 | 0] << 24);
   $2 = HEAPU8[$1 + 20 | 0] | HEAPU8[$1 + 21 | 0] << 8 | (HEAPU8[$1 + 22 | 0] << 16 | HEAPU8[$1 + 23 | 0] << 24);
   HEAP32[$0 + 112 >> 2] = $3;
   HEAP32[$0 + 116 >> 2] = $2;
   $3 = HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8 | (HEAPU8[$1 + 14 | 0] << 16 | HEAPU8[$1 + 15 | 0] << 24);
   $2 = HEAPU8[$1 + 8 | 0] | HEAPU8[$1 + 9 | 0] << 8 | (HEAPU8[$1 + 10 | 0] << 16 | HEAPU8[$1 + 11 | 0] << 24);
   HEAP32[$0 + 104 >> 2] = $2;
   HEAP32[$0 + 108 >> 2] = $3;
   $2 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
   $3 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
   HEAP32[$0 + 96 >> 2] = $3;
   HEAP32[$0 + 100 >> 2] = $2;
   $2 = HEAPU8[$0 + 96 | 0] | HEAPU8[$0 + 97 | 0] << 8 | (HEAPU8[$0 + 98 | 0] << 16 | HEAPU8[$0 + 99 | 0] << 24);
   $3 = $2 >> 31;
   $5 = jshGetMillisecondsFromTime($2, $3) * 1e3;
   label$5: {
    if (Math_abs($5) < 2147483648) {
     $2 = ~~$5;
     break label$5;
    }
    $2 = -2147483648;
   }
   HEAP32[$0 + 64 >> 2] = $2;
   jsiConsolePrintf(114843, $0 - -64 | 0);
   $3 = HEAPU8[$0 + 100 | 0] | HEAPU8[$0 + 101 | 0] << 8 | (HEAPU8[$0 + 102 | 0] << 16 | HEAPU8[$0 + 103 | 0] << 24);
   $5 = jshGetMillisecondsFromTime($3, 0) * 1e3;
   label$7: {
    if (Math_abs($5) < 2147483648) {
     $2 = ~~$5;
     break label$7;
    }
    $2 = -2147483648;
   }
   HEAP32[$0 + 48 >> 2] = $2;
   jsiConsolePrintf(114834, $0 + 48 | 0);
   jsiConsolePrintf(144289, 0);
   label$9: {
    label$10: {
     switch (HEAPU8[$0 + 120 | 0] - 1 | 0) {
     case 0:
      jsiConsolePrintf(145816, 0);
      break label$9;

     case 1:
      jsiConsolePrintf(144234, 0);
      HEAP32[$0 + 540 >> 2] = 0;
      while (1) {
       if (HEAP32[$0 + 540 >> 2] < 4) {
        if (HEAPU8[HEAP32[$0 + 540 >> 2] + ($0 + 104 | 0) | 0] != 255) {
         $2 = HEAPU8[HEAP32[$0 + 540 >> 2] + ($0 + 104 | 0) | 0];
         HEAP32[$0 + 20 >> 2] = HEAPU8[$0 + 108 | 0] >> HEAP32[$0 + 540 >> 2] & 1;
         HEAP32[$0 + 16 >> 2] = $2;
         jsiConsolePrintf(128023, $0 + 16 | 0);
        }
        HEAP32[$0 + 540 >> 2] = HEAP32[$0 + 540 >> 2] + 1;
        continue;
       }
       break;
      }
      ;
      jsiConsolePrintf(146977, 0);
      break label$9;

     case 3:
      jsiConsolePrintf(145824, 0);
      break label$9;

     case 4:
      jsiConsolePrintf(145836, 0);
      break label$9;

     case 5:
      jsiConsolePrintf(145791, 0);
      break label$9;

     case 6:
      jsiConsolePrintf(145804, 0);
      break label$9;

     case 2:
      $2 = HEAPU8[$0 + 104 | 0] | HEAPU8[$0 + 105 | 0] << 8 | (HEAPU8[$0 + 106 | 0] << 16 | HEAPU8[$0 + 107 | 0] << 24);
      HEAP32[$0 + 36 >> 2] = HEAPU8[$0 + 108 | 0] | HEAPU8[$0 + 109 | 0] << 8 | (HEAPU8[$0 + 110 | 0] << 16 | HEAPU8[$0 + 111 | 0] << 24);
      HEAP32[$0 + 32 >> 2] = $2;
      jsiConsolePrintf(146764, $0 + 32 | 0);
      break label$9;

     default:
      break label$10;
     }
    }
    HEAP32[$0 >> 2] = HEAPU8[$0 + 120 | 0];
    jsiConsolePrintf(145748, $0);
   }
   HEAP8[$0 + 125 | 0] = HEAPU8[$0 + 125 | 0] + 1 & 15;
   continue;
  }
  break;
 }
 if (!(HEAP8[$0 + 124 | 0] & 1)) {
  jsiConsolePrintf(146395, 0);
 }
 __stack_pointer = $0 + 544 | 0;
}

function tflite__reference_integer_ops__AveragePool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 144 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 140 >> 2] = $0;
 HEAP32[$5 + 136 >> 2] = $1;
 HEAP32[$5 + 132 >> 2] = $2;
 HEAP32[$5 + 128 >> 2] = $3;
 HEAP32[$5 + 124 >> 2] = $4;
 label$1: {
  if (HEAP32[HEAP32[$5 + 140 >> 2] + 28 >> 2] > HEAP32[HEAP32[$5 + 140 >> 2] + 32 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$5 + 136 >> 2]) | 0) != 4) {
   break label$2;
  }
 }
 label$3: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$5 + 128 >> 2]) | 0) != 4) {
   break label$3;
  }
 }
 HEAP32[$5 + 120 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 0, HEAP32[$5 + 128 >> 2], 0);
 HEAP32[$5 + 116 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 3, HEAP32[$5 + 128 >> 2], 3);
 HEAP32[$5 + 112 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 1);
 HEAP32[$5 + 108 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 2);
 HEAP32[$5 + 104 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 1);
 HEAP32[$5 + 100 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 2);
 HEAP32[$5 + 96 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 12 >> 2];
 HEAP32[$5 + 92 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 16 >> 2];
 HEAP32[$5 + 88 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 88 >> 2] < HEAP32[$5 + 120 >> 2]) {
   HEAP32[$5 + 84 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 84 >> 2] < HEAP32[$5 + 104 >> 2]) {
     HEAP32[$5 + 80 >> 2] = 0;
     while (1) {
      if (HEAP32[$5 + 80 >> 2] < HEAP32[$5 + 100 >> 2]) {
       HEAP32[$5 + 76 >> 2] = 0;
       while (1) {
        if (HEAP32[$5 + 76 >> 2] < HEAP32[$5 + 116 >> 2]) {
         HEAP32[$5 + 72 >> 2] = Math_imul(HEAP32[$5 + 80 >> 2], HEAP32[$5 + 92 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 2 >> 1];
         HEAP32[$5 + 68 >> 2] = Math_imul(HEAP32[$5 + 84 >> 2], HEAP32[$5 + 96 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 4 >> 1];
         HEAP32[$5 + 60 >> 2] = 0;
         HEAP32[$5 + 56 >> 2] = 0 - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 64 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 60 | 0, $5 + 56 | 0) >> 2];
         $0 = HEAP32[$5 + 140 >> 2];
         HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 108 >> 2] - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 52 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0 + 24 | 0, $5 + 48 | 0) >> 2];
         HEAP32[$5 + 40 >> 2] = 0;
         HEAP32[$5 + 36 >> 2] = 0 - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 44 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 40 | 0, $5 + 36 | 0) >> 2];
         $0 = HEAP32[$5 + 140 >> 2];
         HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 112 >> 2] - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 32 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0 + 20 | 0, $5 + 28 | 0) >> 2];
         HEAP32[$5 + 24 >> 2] = 0;
         HEAP32[$5 + 20 >> 2] = 0;
         HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 44 >> 2];
         while (1) {
          if (HEAP32[$5 + 16 >> 2] < HEAP32[$5 + 32 >> 2]) {
           HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 64 >> 2];
           while (1) {
            if (HEAP32[$5 + 12 >> 2] < HEAP32[$5 + 52 >> 2]) {
             HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 72 >> 2] + HEAP32[$5 + 12 >> 2];
             HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 68 >> 2] + HEAP32[$5 + 16 >> 2];
             HEAP32[$5 + 24 >> 2] = HEAP8[HEAP32[$5 + 132 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 136 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 4 >> 2], HEAP32[$5 + 8 >> 2], HEAP32[$5 + 76 >> 2]) | 0] + HEAP32[$5 + 24 >> 2];
             HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 20 >> 2] + 1;
             HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 12 >> 2] + 1;
             continue;
            }
            break;
           }
           HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 1;
           continue;
          }
          break;
         }
         if (HEAP32[$5 + 24 >> 2] > 0) {
          $0 = (HEAP32[$5 + 24 >> 2] + (HEAP32[$5 + 20 >> 2] / 2 | 0) | 0) / HEAP32[$5 + 20 >> 2] | 0;
         } else {
          $0 = (HEAP32[$5 + 24 >> 2] - (HEAP32[$5 + 20 >> 2] / 2 | 0) | 0) / HEAP32[$5 + 20 >> 2] | 0;
         }
         HEAP32[$5 + 24 >> 2] = $0;
         HEAP32[$5 + 24 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 24 | 0, HEAP32[$5 + 140 >> 2] + 28 | 0) >> 2];
         HEAP32[$5 + 24 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($5 + 24 | 0, HEAP32[$5 + 140 >> 2] + 32 | 0) >> 2];
         $0 = HEAP32[$5 + 24 >> 2];
         HEAP8[HEAP32[$5 + 124 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 128 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2], HEAP32[$5 + 76 >> 2]) | 0] = $0;
         HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 76 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$5 + 80 >> 2] = HEAP32[$5 + 80 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$5 + 84 >> 2] = HEAP32[$5 + 84 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 88 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 + 144 | 0;
}

function jswrap_interface_setWatch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 80 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 72 >> 2] = $0;
 HEAP8[$3 + 71 | 0] = $1;
 HEAP32[$3 + 64 >> 2] = $2;
 label$1: {
  if (!(jshIsPinValid(HEAPU8[$3 + 71 | 0]) & 1)) {
   jsError(117533, 0);
   HEAP32[$3 + 76 >> 2] = 0;
   break label$1;
  }
  label$3: {
   if (jsiIsWatchingPin(HEAPU8[$3 + 71 | 0]) & 1) {
    break label$3;
   }
   if (jshCanWatch(HEAPU8[$3 + 71 | 0]) & 1) {
    break label$3;
   }
   jsWarn(118546, 0);
   HEAP32[$3 + 76 >> 2] = 0;
   break label$1;
  }
  HEAP8[$3 + 63 | 0] = 0;
  HEAPF64[$3 + 48 >> 3] = 0;
  HEAP32[$3 + 44 >> 2] = 0;
  HEAP8[$3 + 43 | 0] = 0;
  HEAP8[$3 + 42 | 0] = 0;
  HEAP8[$3 + 41 | 0] = 255;
  if (HEAPU8[$3 + 71 | 0] == 17) {
   HEAP32[$3 + 44 >> 2] = 1;
   HEAPF64[$3 + 48 >> 3] = 25;
  }
  label$5: {
   if (jsvIsObject(HEAP32[$3 + 64 >> 2]) & 1) {
    HEAP32[$3 + 36 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 64 >> 2], 113291);
    if (HEAP32[$3 + 36 >> 2]) {
     HEAP8[$3 + 63 | 0] = jsvGetBoolAndUnLock(HEAP32[$3 + 36 >> 2]) & 1;
    }
    HEAP32[$3 + 36 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 64 >> 2], 120483);
    if (HEAP32[$3 + 36 >> 2]) {
     HEAPF64[$3 + 48 >> 3] = jsvGetFloatAndUnLock(HEAP32[$3 + 36 >> 2]);
    }
    $1 = __DOUBLE_BITS_9(HEAPF64[$3 + 48 >> 3]);
    $0 = $1;
    $2 = i64toi32_i32$HIGH_BITS;
    $1 = $2 & 2147483647;
    $2 = $0;
    if (!(HEAPF64[$3 + 48 >> 3] < 0 ? 0 : !$2 & ($1 | 0) == 2146435072 | $1 >>> 0 < 2146435072)) {
     HEAPF64[$3 + 48 >> 3] = 0;
    }
    HEAP32[$3 + 36 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 64 >> 2], 120335);
    if (!(jsvIsUndefined(HEAP32[$3 + 36 >> 2]) & 1)) {
     label$12: {
      if (jsvIsNumeric(HEAP32[$3 + 36 >> 2]) & 1) {
       HEAP32[$3 + 32 >> 2] = jsvGetInteger(HEAP32[$3 + 36 >> 2]);
       HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 32 >> 2] > 0 ? 1 : HEAP32[$3 + 32 >> 2] < 0 ? -1 : 0;
       break label$12;
      }
      HEAP32[$3 + 44 >> 2] = -1e3;
      if (jsvIsString(HEAP32[$3 + 36 >> 2]) & 1) {
       label$17: {
        if (jsvIsStringEqual(HEAP32[$3 + 36 >> 2], 118719) & 1) {
         HEAP32[$3 + 44 >> 2] = 1;
         break label$17;
        }
        label$19: {
         if (jsvIsStringEqual(HEAP32[$3 + 36 >> 2], 119005) & 1) {
          HEAP32[$3 + 44 >> 2] = -1;
          break label$19;
         }
         if (jsvIsStringEqual(HEAP32[$3 + 36 >> 2], 118364) & 1) {
          HEAP32[$3 + 44 >> 2] = 0;
         }
        }
       }
      }
     }
    }
    jsvUnLock(HEAP32[$3 + 36 >> 2]);
    if (!(HEAP32[$3 + 44 >> 2] <= 1 & HEAP32[$3 + 44 >> 2] >= -1)) {
     jsExceptionHere(3, 143335, 0);
     HEAP32[$3 + 76 >> 2] = 0;
     break label$1;
    }
    HEAP8[$3 + 43 | 0] = jsvObjectGetBoolChild(HEAP32[$3 + 64 >> 2], 116642) & 1;
    HEAP8[$3 + 42 | 0] = jsvObjectGetBoolChild(HEAP32[$3 + 64 >> 2], 121819) & 1;
    HEAP8[$3 + 41 | 0] = jshGetPinFromVarAndUnLock(jsvObjectGetChildIfExists(HEAP32[$3 + 64 >> 2], 122985));
    break label$5;
   }
   HEAP8[$3 + 63 | 0] = jsvGetBool(HEAP32[$3 + 64 >> 2]) & 1;
  }
  HEAP32[$3 + 28 >> 2] = -1;
  label$24: {
   label$25: {
    if (jsvIsFunction(HEAP32[$3 + 72 >> 2]) & 1) {
     break label$25;
    }
    if (jsvIsString(HEAP32[$3 + 72 >> 2]) & 1) {
     break label$25;
    }
    jsExceptionHere(1, 143837, 0);
    break label$24;
   }
   HEAP32[$3 + 24 >> 2] = jsvNewObject();
   if (HEAP32[$3 + 24 >> 2]) {
    jsvObjectSetChildAndUnLock(HEAP32[$3 + 24 >> 2], 117541, jsvNewFromPin(HEAPU8[$3 + 71 | 0]));
    if (HEAP8[$3 + 63 | 0] & 1) {
     jsvObjectSetChildAndUnLock(HEAP32[$3 + 24 >> 2], 115962, jsvNewFromBool(HEAP8[$3 + 63 | 0] & 1));
    }
    if (HEAPF64[$3 + 48 >> 3] > 0) {
     $0 = HEAP32[$3 + 24 >> 2];
     $2 = jshGetTimeFromMilliseconds(HEAPF64[$3 + 48 >> 3]);
     jsvObjectSetChildAndUnLock($0, 120483, jsvNewFromInteger($2));
    }
    if (HEAP32[$3 + 44 >> 2]) {
     jsvObjectSetChildAndUnLock(HEAP32[$3 + 24 >> 2], 120335, jsvNewFromInteger(HEAP32[$3 + 44 >> 2]));
    }
    jsvObjectSetChild(HEAP32[$3 + 24 >> 2], 118173, HEAP32[$3 + 72 >> 2]);
    jsvObjectSetChildAndUnLock(HEAP32[$3 + 24 >> 2], 119652, jsvNewFromBool(jshPinInput(HEAPU8[$3 + 71 | 0]) & 1));
    if (HEAP8[$3 + 42 | 0] & 1) {
     jsvObjectSetChildAndUnLock(HEAP32[$3 + 24 >> 2], 121819, jsvNewFromBool(1));
    }
   }
   HEAP8[$3 + 23 | 0] = 0;
   if (!(jsiIsWatchingPin(HEAPU8[$3 + 71 | 0]) & 1)) {
    HEAP8[$3 + 23 | 0] = jshPinWatch(HEAPU8[$3 + 71 | 0], 1, HEAP8[$3 + 42 | 0] & 1);
   }
   label$32: {
    if (HEAPU8[$3 + 23 | 0]) {
     jshSetEventCallback(HEAPU8[$3 + 23 | 0], 0);
     if (jshIsPinValid(HEAPU8[$3 + 41 | 0]) & 1) {
      jshSetEventDataPin(HEAPU8[$3 + 23 | 0], HEAPU8[$3 + 41 | 0]);
     }
     if (HEAP8[$3 + 43 | 0] & 1) {
      label$36: {
       if (jsvIsNativeFunction(HEAP32[$3 + 72 >> 2]) & 1) {
        jshSetEventCallback(HEAPU8[$3 + 23 | 0], jsvGetNativeFunctionPtr(HEAP32[$3 + 72 >> 2]));
        break label$36;
       }
       label$38: {
        if (jshIsPinValid(HEAPU8[$3 + 41 | 0]) & 1) {
         jsExceptionHere(1, 119382, 0);
         break label$38;
        }
        jsExceptionHere(1, 117167, 0);
       }
      }
     }
     break label$32;
    }
    if (HEAP8[$3 + 43 | 0] & 1) {
     jsExceptionHere(1, 121346, 0);
    }
   }
   HEAP32[$3 + 16 >> 2] = jsvLock(HEAPU16[173533]);
   HEAP32[$3 + 28 >> 2] = jsvArrayAddToEnd(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 24 >> 2], 1) - 1;
   jsvUnLock2(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 24 >> 2]);
  }
  label$41: {
   if (HEAP32[$3 + 28 >> 2] >= 0) {
    $0 = jsvNewFromInteger(HEAP32[$3 + 28 >> 2]);
    break label$41;
   }
   $0 = 0;
  }
  HEAP32[$3 + 76 >> 2] = $0;
 }
 __stack_pointer = $3 + 80 | 0;
 return HEAP32[$3 + 76 >> 2];
}

function tflite__ops__micro__activations___28anonymous_20namespace_29__CalculateSoftmaxParams_28TfLiteContext__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20TfLiteSoftmaxParams_20const__2c_20tflite__SoftmaxParams__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $5 = __stack_pointer - 176 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 168 >> 2] = $0;
 HEAP32[$5 + 164 >> 2] = $1;
 HEAP32[$5 + 160 >> 2] = $2;
 HEAP32[$5 + 156 >> 2] = $3;
 HEAP32[$5 + 152 >> 2] = $4;
 label$1: {
  label$2: {
   if (!(HEAP32[HEAP32[$5 + 164 >> 2] + 28 >> 2] != 3 & HEAP32[HEAP32[$5 + 164 >> 2] + 28 >> 2] != 9)) {
    label$5: {
     if (HEAP32[HEAP32[$5 + 164 >> 2] + 28 >> 2] == 3) {
      if (HEAP32[HEAP32[$5 + 160 >> 2] + 28 >> 2] != 3) {
       $0 = HEAP32[HEAP32[$5 + 168 >> 2] + 20 >> 2];
       $1 = HEAP32[$5 + 168 >> 2];
       $2 = TfLiteTypeGetName(HEAP32[HEAP32[$5 + 160 >> 2] + 28 >> 2]);
       HEAP32[$5 + 12 >> 2] = TfLiteTypeGetName(3);
       HEAP32[$5 + 8 >> 2] = $2;
       HEAP32[$5 + 4 >> 2] = 125852;
       HEAP32[$5 >> 2] = 119866;
       FUNCTION_TABLE[$0 | 0]($1, 142671, $5);
       HEAP32[$5 + 172 >> 2] = 1;
       break label$1;
      }
      if (HEAP32[HEAP32[$5 + 160 >> 2] + 12 >> 2]) {
       $0 = HEAP32[HEAP32[$5 + 168 >> 2] + 20 >> 2];
       $1 = HEAP32[$5 + 168 >> 2];
       $2 = HEAP32[HEAP32[$5 + 160 >> 2] + 12 >> 2];
       HEAP32[$5 + 28 >> 2] = 0;
       HEAP32[$5 + 24 >> 2] = $2;
       HEAP32[$5 + 20 >> 2] = 126803;
       HEAP32[$5 + 16 >> 2] = 112857;
       FUNCTION_TABLE[$0 | 0]($1, 143069, $5 + 16 | 0);
       HEAP32[$5 + 172 >> 2] = 1;
       break label$1;
      }
      break label$5;
     }
     if (HEAP32[HEAP32[$5 + 164 >> 2] + 28 >> 2] != 9) {
      $0 = HEAP32[HEAP32[$5 + 168 >> 2] + 20 >> 2];
      $1 = HEAP32[$5 + 168 >> 2];
      $2 = TfLiteTypeGetName(HEAP32[HEAP32[$5 + 164 >> 2] + 28 >> 2]);
      HEAP32[$5 + 44 >> 2] = TfLiteTypeGetName(9);
      HEAP32[$5 + 40 >> 2] = $2;
      HEAP32[$5 + 36 >> 2] = 125840;
      HEAP32[$5 + 32 >> 2] = 119879;
      FUNCTION_TABLE[$0 | 0]($1, 142671, $5 + 32 | 0);
      HEAP32[$5 + 172 >> 2] = 1;
      break label$1;
     }
     label$10: {
      if (HEAP32[HEAP32[$5 + 160 >> 2] + 28 >> 2] == 7) {
       if (HEAP32[HEAP32[$5 + 160 >> 2] + 12 >> 2] != -32768) {
        $0 = HEAP32[HEAP32[$5 + 168 >> 2] + 20 >> 2];
        $1 = HEAP32[$5 + 168 >> 2];
        $2 = HEAP32[HEAP32[$5 + 160 >> 2] + 12 >> 2];
        HEAP32[$5 + 60 >> 2] = -32768;
        HEAP32[$5 + 56 >> 2] = $2;
        HEAP32[$5 + 52 >> 2] = 125871;
        HEAP32[$5 + 48 >> 2] = 112857;
        FUNCTION_TABLE[$0 | 0]($1, 143069, $5 + 48 | 0);
        HEAP32[$5 + 172 >> 2] = 1;
        break label$1;
       }
       break label$10;
      }
      if (HEAP32[HEAP32[$5 + 160 >> 2] + 28 >> 2] != 9) {
       $0 = HEAP32[HEAP32[$5 + 168 >> 2] + 20 >> 2];
       $1 = HEAP32[$5 + 168 >> 2];
       $2 = TfLiteTypeGetName(HEAP32[HEAP32[$5 + 160 >> 2] + 28 >> 2]);
       HEAP32[$5 + 76 >> 2] = TfLiteTypeGetName(9);
       HEAP32[$5 + 72 >> 2] = $2;
       HEAP32[$5 + 68 >> 2] = 125840;
       HEAP32[$5 + 64 >> 2] = 119866;
       FUNCTION_TABLE[$0 | 0]($1, 142671, $5 - -64 | 0);
       HEAP32[$5 + 172 >> 2] = 1;
       break label$1;
      }
      if (HEAP32[HEAP32[$5 + 160 >> 2] + 12 >> 2] != -128) {
       $0 = HEAP32[HEAP32[$5 + 168 >> 2] + 20 >> 2];
       $1 = HEAP32[$5 + 168 >> 2];
       $2 = HEAP32[HEAP32[$5 + 160 >> 2] + 12 >> 2];
       HEAP32[$5 + 92 >> 2] = -128;
       HEAP32[$5 + 88 >> 2] = $2;
       HEAP32[$5 + 84 >> 2] = 125889;
       HEAP32[$5 + 80 >> 2] = 112857;
       FUNCTION_TABLE[$0 | 0]($1, 143069, $5 + 80 | 0);
       HEAP32[$5 + 172 >> 2] = 1;
       break label$1;
      }
      if (HEAPF32[HEAP32[$5 + 160 >> 2] + 8 >> 2] != Math_fround(.00390625)) {
       $0 = HEAP32[HEAP32[$5 + 168 >> 2] + 20 >> 2];
       $1 = HEAP32[$5 + 168 >> 2];
       HEAP32[$5 + 96 >> 2] = 125911;
       FUNCTION_TABLE[$0 | 0]($1, 127303, $5 + 96 | 0);
       HEAP32[$5 + 172 >> 2] = 1;
       break label$1;
      }
     }
    }
    tflite__PreprocessSoftmaxScaling_28double_2c_20double_2c_20int_2c_20int__2c_20int__29(+HEAPF32[HEAP32[$5 + 156 >> 2] >> 2], +HEAPF32[HEAP32[$5 + 164 >> 2] + 8 >> 2], 5, HEAP32[$5 + 152 >> 2] + 8 | 0, $5 + 148 | 0);
    HEAP32[HEAP32[$5 + 152 >> 2] + 12 >> 2] = HEAP32[$5 + 148 >> 2];
    $6 = -0 - +(tflite__CalculateInputRadius_28int_2c_20int_2c_20int_29(5, HEAP32[HEAP32[$5 + 152 >> 2] + 12 >> 2], 31) | 0);
    label$16: {
     if (Math_abs($6) < 2147483648) {
      $0 = ~~$6;
      break label$16;
     }
     $0 = -2147483648;
    }
    HEAP32[HEAP32[$5 + 152 >> 2] + 24 >> 2] = $0;
    break label$2;
   }
   if (HEAP32[HEAP32[$5 + 164 >> 2] + 28 >> 2] != 1) {
    $0 = HEAP32[HEAP32[$5 + 168 >> 2] + 20 >> 2];
    $1 = HEAP32[$5 + 168 >> 2];
    $2 = TfLiteTypeGetName(HEAP32[HEAP32[$5 + 164 >> 2] + 28 >> 2]);
    HEAP32[$5 + 124 >> 2] = TfLiteTypeGetName(1);
    HEAP32[$5 + 120 >> 2] = $2;
    HEAP32[$5 + 116 >> 2] = 126432;
    HEAP32[$5 + 112 >> 2] = 119879;
    FUNCTION_TABLE[$0 | 0]($1, 142671, $5 + 112 | 0);
    HEAP32[$5 + 172 >> 2] = 1;
    break label$1;
   }
   if (HEAP32[HEAP32[$5 + 160 >> 2] + 28 >> 2] != 1) {
    $0 = HEAP32[HEAP32[$5 + 168 >> 2] + 20 >> 2];
    $1 = HEAP32[$5 + 168 >> 2];
    $2 = TfLiteTypeGetName(HEAP32[HEAP32[$5 + 160 >> 2] + 28 >> 2]);
    HEAP32[$5 + 140 >> 2] = TfLiteTypeGetName(1);
    HEAP32[$5 + 136 >> 2] = $2;
    HEAP32[$5 + 132 >> 2] = 126432;
    HEAP32[$5 + 128 >> 2] = 119866;
    FUNCTION_TABLE[$0 | 0]($1, 142671, $5 + 128 | 0);
    HEAP32[$5 + 172 >> 2] = 1;
    break label$1;
   }
   HEAPF64[HEAP32[$5 + 152 >> 2] >> 3] = HEAPF32[HEAP32[$5 + 156 >> 2] >> 2];
  }
  HEAP32[$5 + 172 >> 2] = 0;
 }
 __stack_pointer = $5 + 176 | 0;
 return HEAP32[$5 + 172 >> 2];
}

function tflite__MicroAllocator__CommitStaticMemoryPlan_28tflite__Model_20const__2c_20tflite__SubGraph_20const__2c_20TfLiteEvalTensor__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 208 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 200 >> 2] = $0;
 HEAP32[$4 + 196 >> 2] = $1;
 HEAP32[$4 + 192 >> 2] = $2;
 HEAP32[$4 + 188 >> 2] = $3;
 $0 = HEAP32[$4 + 200 >> 2];
 HEAP32[$4 + 184 >> 2] = 0;
 tflite__SimpleMemoryAllocator__SimpleMemoryAllocator_28tflite__ErrorReporter__2c_20unsigned_20char__2c_20unsigned_20char__29($4 + 152 | 0, HEAP32[$0 + 8 >> 2], tflite__SimpleMemoryAllocator__GetBufferHead_28_29_20const(HEAP32[$0 + 4 >> 2]), tflite__SimpleMemoryAllocator__GetTail_28_29_20const(HEAP32[$0 + 4 >> 2]));
 tflite___28anonymous_20namespace_29__AllocationInfoBuilder__AllocationInfoBuilder_28tflite__ErrorReporter__2c_20tflite__SimpleMemoryAllocator__29($4 + 128 | 0, HEAP32[$0 + 8 >> 2], $4 + 152 | 0);
 HEAP32[$4 + 124 >> 2] = tflite___28anonymous_20namespace_29__AllocationInfoBuilder__Init_28unsigned_20long_2c_20unsigned_20long_29($4 + 128 | 0, flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor____size_28_29_20const(tflite__SubGraph__tensors_28_29_20const(HEAP32[$4 + 192 >> 2])), HEAP32[$0 + 20 >> 2]);
 label$1: {
  if (HEAP32[$4 + 124 >> 2]) {
   HEAP32[$4 + 204 >> 2] = HEAP32[$4 + 124 >> 2];
   HEAP32[$4 + 120 >> 2] = 1;
   break label$1;
  }
  HEAP32[$4 + 116 >> 2] = 0;
  HEAP32[$4 + 112 >> 2] = tflite___28anonymous_20namespace_29__AllocationInfoBuilder__GetOfflinePlannedOffsets_28tflite__Model_20const__2c_20int_20const___29($4 + 128 | 0, HEAP32[$4 + 196 >> 2], $4 + 116 | 0);
  if (HEAP32[$4 + 112 >> 2]) {
   HEAP32[$4 + 204 >> 2] = HEAP32[$4 + 112 >> 2];
   HEAP32[$4 + 120 >> 2] = 1;
   break label$1;
  }
  HEAP32[$4 + 108 >> 2] = tflite___28anonymous_20namespace_29__AllocationInfoBuilder__AddTensors_28tflite__SubGraph_20const__2c_20int_20const__2c_20TfLiteEvalTensor__29($4 + 128 | 0, HEAP32[$4 + 192 >> 2], HEAP32[$4 + 116 >> 2], HEAP32[$4 + 188 >> 2]);
  if (HEAP32[$4 + 108 >> 2]) {
   HEAP32[$4 + 204 >> 2] = HEAP32[$4 + 108 >> 2];
   HEAP32[$4 + 120 >> 2] = 1;
   break label$1;
  }
  HEAP32[$4 + 104 >> 2] = tflite___28anonymous_20namespace_29__AllocationInfoBuilder__AddScratchBuffers_28tflite__internal__ScratchBufferHandle__29($4 + 128 | 0, HEAP32[$0 + 16 >> 2]);
  if (HEAP32[$4 + 104 >> 2]) {
   HEAP32[$4 + 204 >> 2] = HEAP32[$4 + 104 >> 2];
   HEAP32[$4 + 120 >> 2] = 1;
   break label$1;
  }
  HEAP32[$4 + 100 >> 2] = tflite___28anonymous_20namespace_29__AllocationInfoBuilder__Finish_28_29_20const($4 + 128 | 0);
  HEAP32[$4 + 96 >> 2] = tflite__SimpleMemoryAllocator__GetAvailableMemory_28unsigned_20long_29_20const($4 + 152 | 0, 16);
  HEAP32[$4 + 92 >> 2] = tflite__SimpleMemoryAllocator__AllocateTemp_28unsigned_20long_2c_20unsigned_20long_29($4 + 152 | 0, HEAP32[$4 + 96 >> 2], 16);
  if (!HEAP32[$4 + 92 >> 2]) {
   $1 = HEAP32[$0 + 8 >> 2];
   $2 = HEAP32[$0 + 8 >> 2];
   HEAP32[$4 + 16 >> 2] = 115986;
   tflite__ErrorReporter__ReportError_28void__2c_20char_20const__2c_20____29($1, $2, 127303, $4 + 16 | 0);
   HEAP32[$4 + 204 >> 2] = 1;
   HEAP32[$4 + 120 >> 2] = 1;
   break label$1;
  }
  tflite__GreedyMemoryPlanner__GreedyMemoryPlanner_28unsigned_20char__2c_20int_29($4 + 48 | 0, HEAP32[$4 + 92 >> 2], HEAP32[$4 + 96 >> 2]);
  HEAP32[$4 + 44 >> 2] = tflite___28anonymous_20namespace_29__CreatePlan_28tflite__ErrorReporter__2c_20tflite__GreedyMemoryPlanner__2c_20tflite___28anonymous_20namespace_29__AllocationInfo_20const__2c_20unsigned_20long_29(HEAP32[$0 + 8 >> 2], $4 + 48 | 0, HEAP32[$4 + 100 >> 2], tflite___28anonymous_20namespace_29__AllocationInfoBuilder__Size_28_29_20const($4 + 128 | 0));
  label$7: {
   if (HEAP32[$4 + 44 >> 2]) {
    HEAP32[$4 + 204 >> 2] = HEAP32[$4 + 44 >> 2];
    HEAP32[$4 + 120 >> 2] = 1;
    break label$7;
   }
   HEAP32[$4 + 40 >> 2] = tflite__SimpleMemoryAllocator__GetAvailableMemory_28unsigned_20long_29_20const(HEAP32[$0 + 4 >> 2], 16);
   if (tflite__GreedyMemoryPlanner__GetMaximumMemorySize_28_29($4 + 48 | 0) >>> 0 > HEAPU32[$4 + 40 >> 2]) {
    $1 = HEAP32[$0 + 8 >> 2];
    $2 = tflite__GreedyMemoryPlanner__GetMaximumMemorySize_28_29($4 + 48 | 0);
    HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 40 >> 2];
    HEAP32[$4 >> 2] = $2;
    tflite__ErrorReporter__Report_28char_20const__2c_20____29($1, 127363, $4);
    HEAP32[$4 + 204 >> 2] = 1;
    HEAP32[$4 + 120 >> 2] = 1;
    break label$7;
   }
   HEAP32[$4 + 36 >> 2] = tflite___28anonymous_20namespace_29__CommitPlan_28tflite__ErrorReporter__2c_20tflite__MemoryPlanner__2c_20unsigned_20char__2c_20tflite___28anonymous_20namespace_29__AllocationInfo_20const__2c_20unsigned_20long_29(HEAP32[$0 + 8 >> 2], $4 + 48 | 0, tflite__SimpleMemoryAllocator__GetBufferHead_28_29_20const(HEAP32[$0 + 4 >> 2]), HEAP32[$4 + 100 >> 2], tflite___28anonymous_20namespace_29__AllocationInfoBuilder__Size_28_29_20const($4 + 128 | 0));
   if (HEAP32[$4 + 36 >> 2]) {
    HEAP32[$4 + 204 >> 2] = HEAP32[$4 + 36 >> 2];
    HEAP32[$4 + 120 >> 2] = 1;
    break label$7;
   }
   HEAP32[$4 + 184 >> 2] = tflite__GreedyMemoryPlanner__GetMaximumMemorySize_28_29($4 + 48 | 0);
   HEAP32[$4 + 120 >> 2] = 0;
  }
  tflite__GreedyMemoryPlanner___GreedyMemoryPlanner_28_29($4 + 48 | 0);
 }
 tflite__SimpleMemoryAllocator___SimpleMemoryAllocator_28_29($4 + 152 | 0);
 label$11: {
  if (HEAP32[$4 + 120 >> 2] == 1) {
   break label$11;
  }
  $0 = HEAP32[$0 + 4 >> 2];
  HEAP32[$4 + 32 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$4 + 184 >> 2], 16);
  if (HEAP32[$4 + 32 >> 2]) {
   HEAP32[$4 + 204 >> 2] = HEAP32[$4 + 32 >> 2];
   break label$11;
  }
  HEAP32[$4 + 204 >> 2] = 0;
 }
 __stack_pointer = $4 + 208 | 0;
 return HEAP32[$4 + 204 >> 2];
}

function jswGetSymbolListForObject($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (jsvIsNativeFunction(HEAP32[$1 + 8 >> 2]) & 1) {
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 27) {
    HEAP32[$1 + 12 >> 2] = 157568;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 28) {
    HEAP32[$1 + 12 >> 2] = 157595;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 29) {
    HEAP32[$1 + 12 >> 2] = 157604;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 30) {
    HEAP32[$1 + 12 >> 2] = 157622;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 31) {
    HEAP32[$1 + 12 >> 2] = 157631;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 32) {
    HEAP32[$1 + 12 >> 2] = 157649;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 12) {
    HEAP32[$1 + 12 >> 2] = 157685;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 33) {
    HEAP32[$1 + 12 >> 2] = 157748;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 34) {
    HEAP32[$1 + 12 >> 2] = 157757;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 35) {
    HEAP32[$1 + 12 >> 2] = 157766;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 36) {
    HEAP32[$1 + 12 >> 2] = 157793;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 37) {
    HEAP32[$1 + 12 >> 2] = 157829;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 38) {
    HEAP32[$1 + 12 >> 2] = 157838;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 39) {
    HEAP32[$1 + 12 >> 2] = 157847;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 40) {
    HEAP32[$1 + 12 >> 2] = 157856;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 41) {
    HEAP32[$1 + 12 >> 2] = 157865;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 42) {
    HEAP32[$1 + 12 >> 2] = 157874;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 20) {
    HEAP32[$1 + 12 >> 2] = 157892;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 21) {
    HEAP32[$1 + 12 >> 2] = 157910;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 43) {
    HEAP32[$1 + 12 >> 2] = 157928;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 23) {
    HEAP32[$1 + 12 >> 2] = 157946;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 24) {
    HEAP32[$1 + 12 >> 2] = 157964;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 44) {
    HEAP32[$1 + 12 >> 2] = 157991;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 10) {
    HEAP32[$1 + 12 >> 2] = 158e3;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 45) {
    HEAP32[$1 + 12 >> 2] = 158009;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 46) {
    HEAP32[$1 + 12 >> 2] = 158018;
    break label$1;
   }
  }
  if (HEAP32[$1 + 8 >> 2] == HEAP32[86750]) {
   HEAP32[$1 + 12 >> 2] = 157586;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvCopy($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 56 >> 2] = $0;
 HEAP8[$2 + 55 | 0] = $1;
 label$1: {
  if (jsvIsFlatString(HEAP32[$2 + 56 >> 2]) & 1) {
   HEAP32[$2 + 60 >> 2] = jsvNewFromStringVarComplete(HEAP32[$2 + 56 >> 2]);
   break label$1;
  }
  $0 = HEAP32[$2 + 56 >> 2];
  HEAP32[$2 + 48 >> 2] = jsvNewWithFlags((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 255);
  if (!HEAP32[$2 + 48 >> 2]) {
   HEAP32[$2 + 60 >> 2] = 0;
   break label$1;
  }
  label$4: {
   if (!(jsvIsStringExt(HEAP32[$2 + 56 >> 2]) & 1)) {
    $0 = 1;
    label$6: {
     if (jsvIsBasicString(HEAP32[$2 + 56 >> 2]) & 1) {
      break label$6;
     }
     $0 = 1;
     if (jsvIsNativeString(HEAP32[$2 + 56 >> 2]) & 1) {
      break label$6;
     }
     $0 = 1;
     if (jsvIsFlashString(HEAP32[$2 + 56 >> 2]) & 1) {
      break label$6;
     }
     $0 = jsvIsNativeFunction(HEAP32[$2 + 56 >> 2]);
    }
    HEAP8[$2 + 47 | 0] = $0 & 1;
    __memcpy(HEAP32[$2 + 48 >> 2], HEAP32[$2 + 56 >> 2], HEAP8[$2 + 47 | 0] & 1 ? 9 : 4);
    if (jsvIsNativeFunction(HEAP32[$2 + 56 >> 2]) & 1) {
     jsvSetFirstChild(HEAP32[$2 + 48 >> 2], 0);
    }
    label$8: {
     if (HEAP8[$2 + 47 | 0] & 1) {
      break label$8;
     }
    }
    break label$4;
   }
   $3 = HEAP32[$2 + 56 >> 2];
   $1 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
   $4 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
   $0 = $1;
   $1 = HEAP32[$2 + 48 >> 2];
   HEAP8[$1 | 0] = $0;
   HEAP8[$1 + 1 | 0] = $0 >>> 8;
   HEAP8[$1 + 2 | 0] = $0 >>> 16;
   HEAP8[$1 + 3 | 0] = $0 >>> 24;
   HEAP8[$1 + 4 | 0] = $4;
   HEAP8[$1 + 5 | 0] = $4 >>> 8;
   HEAP8[$1 + 6 | 0] = $4 >>> 16;
   HEAP8[$1 + 7 | 0] = $4 >>> 24;
   $0 = HEAPU8[$3 + 8 | 0] | HEAPU8[$3 + 9 | 0] << 8;
   HEAP8[$1 + 8 | 0] = $0;
   HEAP8[$1 + 9 | 0] = $0 >>> 8;
  }
  label$9: {
   if (!(HEAP8[$2 + 55 | 0] & 1)) {
    break label$9;
   }
   if (!(jsvIsName(HEAP32[$2 + 56 >> 2]) & 1)) {
    break label$9;
   }
   if (jsvGetFirstChild(HEAP32[$2 + 56 >> 2]) & 65535) {
    label$11: {
     if (jsvIsNameWithValue(HEAP32[$2 + 56 >> 2]) & 1) {
      jsvSetFirstChild(HEAP32[$2 + 48 >> 2], jsvGetFirstChild(HEAP32[$2 + 56 >> 2]) & 65535);
      break label$11;
     }
     HEAP32[$2 + 40 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$2 + 56 >> 2]) & 65535);
     HEAP32[$2 + 36 >> 2] = jsvRef(jsvCopy(HEAP32[$2 + 40 >> 2], 1));
     jsvUnLock(HEAP32[$2 + 40 >> 2]);
     if (HEAP32[$2 + 36 >> 2]) {
      jsvSetFirstChild(HEAP32[$2 + 48 >> 2], jsvGetRef(HEAP32[$2 + 36 >> 2]) & 65535);
      jsvUnLock(HEAP32[$2 + 36 >> 2]);
     }
    }
   }
  }
  label$14: {
   if (jsvHasStringExt(HEAP32[$2 + 56 >> 2]) & 1) {
    HEAP32[$2 + 56 >> 2] = jsvLockAgain(HEAP32[$2 + 56 >> 2]);
    HEAP32[$2 + 32 >> 2] = jsvLockAgain(HEAP32[$2 + 48 >> 2]);
    while (1) {
     if (jsvGetLastChild(HEAP32[$2 + 56 >> 2]) & 65535) {
      HEAP32[$2 + 28 >> 2] = jsvLock(jsvGetLastChild(HEAP32[$2 + 56 >> 2]) & 65535);
      label$18: {
       if (jsvIsStringExt(HEAP32[$2 + 28 >> 2]) & 1) {
        $0 = HEAP32[$2 + 28 >> 2];
        HEAP32[$2 + 24 >> 2] = jsvNewWithFlags((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 255);
        if (HEAP32[$2 + 24 >> 2]) {
         $3 = HEAP32[$2 + 28 >> 2];
         $4 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
         $1 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
         $0 = $4;
         $4 = HEAP32[$2 + 24 >> 2];
         HEAP8[$4 | 0] = $0;
         HEAP8[$4 + 1 | 0] = $0 >>> 8;
         HEAP8[$4 + 2 | 0] = $0 >>> 16;
         HEAP8[$4 + 3 | 0] = $0 >>> 24;
         HEAP8[$4 + 4 | 0] = $1;
         HEAP8[$4 + 5 | 0] = $1 >>> 8;
         HEAP8[$4 + 6 | 0] = $1 >>> 16;
         HEAP8[$4 + 7 | 0] = $1 >>> 24;
         $0 = HEAPU8[$3 + 8 | 0] | HEAPU8[$3 + 9 | 0] << 8;
         HEAP8[$4 + 8 | 0] = $0;
         HEAP8[$4 + 9 | 0] = $0 >>> 8;
         jsvSetLastChild(HEAP32[$2 + 32 >> 2], jsvGetRef(HEAP32[$2 + 24 >> 2]) & 65535);
        }
        jsvUnLock2(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 32 >> 2]);
        HEAP32[$2 + 56 >> 2] = HEAP32[$2 + 28 >> 2];
        HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 24 >> 2];
        break label$18;
       }
       HEAP32[$2 + 20 >> 2] = jsvCopy(HEAP32[$2 + 28 >> 2], 1);
       if (HEAP32[$2 + 20 >> 2]) {
        jsvSetLastChild(HEAP32[$2 + 32 >> 2], jsvGetRef(jsvRef(HEAP32[$2 + 20 >> 2])) & 65535);
        jsvUnLock(HEAP32[$2 + 20 >> 2]);
       }
       jsvUnLock3(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 32 >> 2], HEAP32[$2 + 28 >> 2]);
       HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 48 >> 2];
       break label$1;
      }
      continue;
     }
     break;
    }
    jsvUnLock2(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 32 >> 2]);
    break label$14;
   }
   if (jsvHasChildren(HEAP32[$2 + 56 >> 2]) & 1 & (HEAP8[$2 + 55 | 0] & 1)) {
    HEAP16[$2 + 18 >> 1] = jsvGetFirstChild(HEAP32[$2 + 56 >> 2]);
    while (1) {
     if (HEAPU16[$2 + 18 >> 1]) {
      HEAP32[$2 + 12 >> 2] = jsvLock(HEAPU16[$2 + 18 >> 1]);
      HEAP32[$2 + 8 >> 2] = jsvCopyNameOnly(HEAP32[$2 + 12 >> 2], 1, 1);
      if (HEAP32[$2 + 8 >> 2]) {
       jsvAddName(HEAP32[$2 + 48 >> 2], HEAP32[$2 + 8 >> 2]);
       jsvUnLock(HEAP32[$2 + 8 >> 2]);
      }
      HEAP16[$2 + 18 >> 1] = jsvGetNextSibling(HEAP32[$2 + 12 >> 2]);
      jsvUnLock(HEAP32[$2 + 12 >> 2]);
      continue;
     }
     break;
    }
   }
  }
  HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 48 >> 2];
 }
 __stack_pointer = $2 - -64 | 0;
 return HEAP32[$2 + 60 >> 2];
}

function jsvMakeIntoVariableName($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 112 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 104 >> 2] = $0;
 HEAP32[$2 + 100 >> 2] = $1;
 label$1: {
  if (!HEAP32[$2 + 104 >> 2]) {
   HEAP32[$2 + 108 >> 2] = 0;
   break label$1;
  }
  $0 = HEAP32[$2 + 104 >> 2];
  HEAP16[$2 + 98 >> 1] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
  label$3: {
   if (HEAPU16[$2 + 98 >> 1] == 10) {
    HEAP32[$2 + 92 >> 2] = 15;
    label$5: {
     if (!(jsvIsInt(HEAP32[$2 + 100 >> 2]) & 1)) {
      if (!(jsvIsBoolean(HEAP32[$2 + 100 >> 2]) & 1)) {
       break label$5;
      }
     }
     if (jsvIsPin(HEAP32[$2 + 100 >> 2]) & 1) {
      break label$5;
     }
     $0 = HEAP32[$2 + 100 >> 2];
     HEAP32[$2 + 88 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
     if (!(HEAP32[$2 + 88 >> 2] < -8192 | HEAP32[$2 + 88 >> 2] > 8191)) {
      HEAP32[$2 + 92 >> 2] = jsvIsInt(HEAP32[$2 + 100 >> 2]) & 1 ? 16 : 17;
      jsvSetFirstChild(HEAP32[$2 + 104 >> 2], HEAP32[$2 + 88 >> 2] & 65535);
      HEAP32[$2 + 100 >> 2] = 0;
     }
    }
    $0 = HEAP32[$2 + 104 >> 2];
    $1 = HEAP32[$2 + 104 >> 2];
    $1 = HEAP32[$2 + 92 >> 2] | (HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & -64;
    HEAP8[$0 + 12 | 0] = $1;
    HEAP8[$0 + 13 | 0] = $1 >>> 8;
    break label$3;
   }
   if (!(HEAPU16[$2 + 98 >> 1] < 18 | HEAPU16[$2 + 98 >> 1] > 40)) {
    label$9: {
     if (!(!(HEAPU16[$2 + 98 >> 1] == 38 | HEAPU16[$2 + 98 >> 1] == 39) & HEAPU16[$2 + 98 >> 1] != 40)) {
      HEAP32[$2 + 84 >> 2] = jsvNewWithFlags(23);
      jsvAppendStringVarComplete(HEAP32[$2 + 84 >> 2], HEAP32[$2 + 104 >> 2]);
      jsvUnLock(HEAP32[$2 + 104 >> 2]);
      HEAP32[$2 + 104 >> 2] = HEAP32[$2 + 84 >> 2];
      break label$9;
     }
     if (jsvGetCharactersInVar(HEAP32[$2 + 104 >> 2]) >>> 0 > 4) {
      jsvStringIteratorNew($2 + 48 | 0, HEAP32[$2 + 104 >> 2], 4);
      HEAP32[$2 + 36 >> 2] = 0;
      while (1) {
       $0 = 0;
       if (HEAP32[$2 + 36 >> 2] < 5) {
        $0 = jsvStringIteratorHasChar_1($2 + 48 | 0);
       }
       if ($0 & 1) {
        $0 = jsvStringIteratorGetCharAndNext($2 + 48 | 0);
        HEAP8[HEAP32[$2 + 36 >> 2] + ($2 + 43 | 0) | 0] = $0;
        HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 36 >> 2] + 1;
        continue;
       }
       break;
      }
      jsvStringIteratorFree_1($2 + 48 | 0);
      HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 104 >> 2];
      while (1) {
       if (jsvGetLastChild(HEAP32[$2 + 32 >> 2]) & 65535) {
        HEAP32[$2 + 32 >> 2] = jsvGetAddressOf(jsvGetLastChild(HEAP32[$2 + 32 >> 2]) & 65535);
        continue;
       }
       break;
      }
      if (HEAP32[$2 + 32 >> 2] != HEAP32[$2 + 104 >> 2]) {
       HEAP32[$2 + 28 >> 2] = jsvGetCharactersInVar(HEAP32[$2 + 32 >> 2]) + HEAP32[$2 + 36 >> 2];
       label$19: {
        if (HEAP32[$2 + 28 >> 2] <= 10) {
         jsvSetCharactersInVar(HEAP32[$2 + 32 >> 2], HEAP32[$2 + 28 >> 2]);
         HEAP32[$2 + 32 >> 2] = 0;
         break label$19;
        }
        HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 28 >> 2] - 10;
       }
      }
      if (HEAP32[$2 + 32 >> 2]) {
       jsvSetCharactersInVar(HEAP32[$2 + 32 >> 2], jsvGetMaxCharactersInVar(HEAP32[$2 + 32 >> 2]));
       HEAP32[$2 + 24 >> 2] = jsvNewWithFlags(41);
       if (HEAP32[$2 + 24 >> 2]) {
        jsvSetCharactersInVar(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 36 >> 2]);
        jsvSetLastChild(HEAP32[$2 + 32 >> 2], jsvGetRef(HEAP32[$2 + 24 >> 2]) & 65535);
        jsvUnLock(HEAP32[$2 + 24 >> 2]);
       }
      }
      jsvStringIteratorNew($2 + 48 | 0, HEAP32[$2 + 104 >> 2], 9);
      HEAP32[$2 + 36 >> 2] = 0;
      while (1) {
       if (jsvStringIteratorHasChar_1($2 + 48 | 0) & 1) {
        HEAP8[$2 + 23 | 0] = jsvStringIteratorGetChar_1($2 + 48 | 0);
        jsvStringIteratorSetChar($2 + 48 | 0, HEAP8[HEAP32[$2 + 36 >> 2] + ($2 + 43 | 0) | 0]);
        HEAP8[HEAP32[$2 + 36 >> 2] + ($2 + 43 | 0) | 0] = HEAPU8[$2 + 23 | 0];
        jsvStringIteratorNext($2 + 48 | 0);
        HEAP32[$2 + 36 >> 2] = (HEAP32[$2 + 36 >> 2] + 1 | 0) % 5;
        continue;
       }
       break;
      }
      jsvStringIteratorFree_1($2 + 48 | 0);
      jsvSetCharactersInVar(HEAP32[$2 + 104 >> 2], 4);
      jsvSetNextSibling(HEAP32[$2 + 104 >> 2], 0);
      jsvSetPrevSibling(HEAP32[$2 + 104 >> 2], 0);
      jsvSetFirstChild(HEAP32[$2 + 104 >> 2], 0);
     }
    }
    HEAP32[$2 + 16 >> 2] = 23;
    label$25: {
     label$26: {
      if (!(jsvIsInt(HEAP32[$2 + 100 >> 2]) & 1)) {
       break label$26;
      }
      if (jsvIsPin(HEAP32[$2 + 100 >> 2]) & 1) {
       break label$26;
      }
      $0 = HEAP32[$2 + 100 >> 2];
      HEAP32[$2 + 12 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
      if (!(HEAP32[$2 + 12 >> 2] < -8192 | HEAP32[$2 + 12 >> 2] > 8191)) {
       HEAP32[$2 + 16 >> 2] = 18;
       jsvSetFirstChild(HEAP32[$2 + 104 >> 2], HEAP32[$2 + 12 >> 2] & 65535);
       HEAP32[$2 + 100 >> 2] = 0;
      }
      break label$25;
     }
     jsvSetFirstChild(HEAP32[$2 + 104 >> 2], 0);
    }
    $0 = HEAP32[$2 + 104 >> 2];
    $1 = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 65472;
    $3 = HEAP32[$2 + 16 >> 2] + jsvGetCharactersInVar(HEAP32[$2 + 104 >> 2]) | 0;
    $0 = HEAP32[$2 + 104 >> 2];
    $1 = $1 | $3;
    HEAP8[$0 + 12 | 0] = $1;
    HEAP8[$0 + 13 | 0] = $1 >>> 8;
   }
  }
  if (HEAP32[$2 + 100 >> 2]) {
   jsvSetFirstChild(HEAP32[$2 + 104 >> 2], jsvGetRef(jsvRef(HEAP32[$2 + 100 >> 2])) & 65535);
  }
  HEAP32[$2 + 108 >> 2] = HEAP32[$2 + 104 >> 2];
 }
 __stack_pointer = $2 + 112 | 0;
 return HEAP32[$2 + 108 >> 2];
}

function tflite__reference_ops__AveragePool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 144 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 140 >> 2] = $0;
 HEAP32[$5 + 136 >> 2] = $1;
 HEAP32[$5 + 132 >> 2] = $2;
 HEAP32[$5 + 128 >> 2] = $3;
 HEAP32[$5 + 124 >> 2] = $4;
 label$1: {
  if (HEAP32[HEAP32[$5 + 140 >> 2] + 28 >> 2] > HEAP32[HEAP32[$5 + 140 >> 2] + 32 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$5 + 136 >> 2]) | 0) != 4) {
   break label$2;
  }
 }
 label$3: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$5 + 128 >> 2]) | 0) != 4) {
   break label$3;
  }
 }
 HEAP32[$5 + 120 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 0, HEAP32[$5 + 128 >> 2], 0);
 HEAP32[$5 + 116 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 3, HEAP32[$5 + 128 >> 2], 3);
 HEAP32[$5 + 112 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 1);
 HEAP32[$5 + 108 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 2);
 HEAP32[$5 + 104 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 1);
 HEAP32[$5 + 100 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 2);
 HEAP32[$5 + 96 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 12 >> 2];
 HEAP32[$5 + 92 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 16 >> 2];
 HEAP32[$5 + 88 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 88 >> 2] < HEAP32[$5 + 120 >> 2]) {
   HEAP32[$5 + 84 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 84 >> 2] < HEAP32[$5 + 104 >> 2]) {
     HEAP32[$5 + 80 >> 2] = 0;
     while (1) {
      if (HEAP32[$5 + 80 >> 2] < HEAP32[$5 + 100 >> 2]) {
       HEAP32[$5 + 76 >> 2] = 0;
       while (1) {
        if (HEAP32[$5 + 76 >> 2] < HEAP32[$5 + 116 >> 2]) {
         HEAP32[$5 + 72 >> 2] = Math_imul(HEAP32[$5 + 80 >> 2], HEAP32[$5 + 92 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 2 >> 1];
         HEAP32[$5 + 68 >> 2] = Math_imul(HEAP32[$5 + 84 >> 2], HEAP32[$5 + 96 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 4 >> 1];
         HEAP32[$5 + 60 >> 2] = 0;
         HEAP32[$5 + 56 >> 2] = 0 - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 64 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 60 | 0, $5 + 56 | 0) >> 2];
         $0 = HEAP32[$5 + 140 >> 2];
         HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 108 >> 2] - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 52 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0 + 24 | 0, $5 + 48 | 0) >> 2];
         HEAP32[$5 + 40 >> 2] = 0;
         HEAP32[$5 + 36 >> 2] = 0 - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 44 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 40 | 0, $5 + 36 | 0) >> 2];
         $0 = HEAP32[$5 + 140 >> 2];
         HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 112 >> 2] - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 32 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0 + 20 | 0, $5 + 28 | 0) >> 2];
         HEAP32[$5 + 24 >> 2] = 0;
         HEAP32[$5 + 20 >> 2] = 0;
         HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 44 >> 2];
         while (1) {
          if (HEAP32[$5 + 16 >> 2] < HEAP32[$5 + 32 >> 2]) {
           HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 64 >> 2];
           while (1) {
            if (HEAP32[$5 + 12 >> 2] < HEAP32[$5 + 52 >> 2]) {
             HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 72 >> 2] + HEAP32[$5 + 12 >> 2];
             HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 68 >> 2] + HEAP32[$5 + 16 >> 2];
             HEAP32[$5 + 24 >> 2] = HEAPU8[HEAP32[$5 + 132 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 136 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 4 >> 2], HEAP32[$5 + 8 >> 2], HEAP32[$5 + 76 >> 2]) | 0] + HEAP32[$5 + 24 >> 2];
             HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 20 >> 2] + 1;
             HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 12 >> 2] + 1;
             continue;
            }
            break;
           }
           HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 1;
           continue;
          }
          break;
         }
         HEAP32[$5 + 24 >> 2] = (HEAP32[$5 + 24 >> 2] + (HEAP32[$5 + 20 >> 2] / 2 | 0) | 0) / HEAP32[$5 + 20 >> 2];
         HEAP32[$5 + 24 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 24 | 0, HEAP32[$5 + 140 >> 2] + 28 | 0) >> 2];
         HEAP32[$5 + 24 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($5 + 24 | 0, HEAP32[$5 + 140 >> 2] + 32 | 0) >> 2];
         $0 = HEAP32[$5 + 24 >> 2];
         HEAP8[HEAP32[$5 + 124 >> 2] + tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 128 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2], HEAP32[$5 + 76 >> 2]) | 0] = $0;
         HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 76 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$5 + 80 >> 2] = HEAP32[$5 + 80 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$5 + 84 >> 2] = HEAP32[$5 + 84 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 88 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 + 144 | 0;
}

function jswrap_storagefile_write($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 240 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 236 >> 2] = $0;
 HEAP32[$2 + 232 >> 2] = $1;
 HEAP8[$2 + 231 | 0] = jsvObjectGetIntegerChild(HEAP32[$2 + 236 >> 2], 120456);
 label$1: {
  if (!(HEAP8[$2 + 231 | 0] == 119 | HEAP8[$2 + 231 | 0] == 97)) {
   jsExceptionHere(1, 120395, 0);
   break label$1;
  }
  HEAP32[$2 + 224 >> 2] = jsvAsString(HEAP32[$2 + 232 >> 2]);
  if (!HEAP32[$2 + 224 >> 2]) {
   break label$1;
  }
  HEAP32[$2 + 220 >> 2] = jsvGetStringLength(HEAP32[$2 + 224 >> 2]);
  if (!HEAP32[$2 + 220 >> 2]) {
   jsvUnLock(HEAP32[$2 + 224 >> 2]);
   break label$1;
  }
  HEAP32[$2 + 216 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 236 >> 2], 113219);
  HEAP32[$2 + 212 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 236 >> 2], 118134);
  jsfNameFromVarAndUnLock($2 + 184 | 0, jsvObjectGetChildIfExists(HEAP32[$2 + 236 >> 2], 120049));
  HEAP32[$2 + 180 >> 2] = 27;
  while (1) {
   $0 = 0;
   $0 = HEAP32[$2 + 180 >> 2] ? !HEAP8[(HEAP32[$2 + 180 >> 2] + $2 | 0) + 183 | 0] : $0;
   if ($0) {
    HEAP32[$2 + 180 >> 2] = HEAP32[$2 + 180 >> 2] - 1;
    continue;
   }
   break;
  }
  HEAP8[HEAP32[$2 + 180 >> 2] + ($2 + 184 | 0) | 0] = HEAP32[$2 + 212 >> 2];
  HEAP32[$2 + 120 >> 2] = HEAP32[$2 + 208 >> 2];
  $0 = HEAP32[$2 + 204 >> 2];
  $1 = HEAP32[$2 + 200 >> 2];
  HEAP32[$2 + 112 >> 2] = $1;
  HEAP32[$2 + 116 >> 2] = $0;
  $1 = HEAP32[$2 + 196 >> 2];
  $0 = HEAP32[$2 + 192 >> 2];
  HEAP32[$2 + 104 >> 2] = $0;
  HEAP32[$2 + 108 >> 2] = $1;
  $0 = HEAP32[$2 + 188 >> 2];
  $1 = HEAP32[$2 + 184 >> 2];
  HEAP32[$2 + 96 >> 2] = $1;
  HEAP32[$2 + 100 >> 2] = $0;
  HEAP32[$2 + 140 >> 2] = jsfFindFile($2 + 96 | 0, $2 + 144 | 0);
  label$7: {
   if (HEAP32[$2 + 140 >> 2]) {
    $0 = jsfGetFileSize($2 + 144 | 0);
    break label$7;
   }
   $0 = 0;
  }
  HEAP32[$2 + 136 >> 2] = $0;
  if (!HEAP32[$2 + 140 >> 2]) {
   $3 = HEAP32[$2 + 224 >> 2];
   HEAP32[$2 + 88 >> 2] = HEAP32[$2 + 208 >> 2];
   $1 = HEAP32[$2 + 204 >> 2];
   $0 = HEAP32[$2 + 200 >> 2];
   HEAP32[$2 + 80 >> 2] = $0;
   HEAP32[$2 + 84 >> 2] = $1;
   $0 = HEAP32[$2 + 196 >> 2];
   $1 = HEAP32[$2 + 192 >> 2];
   HEAP32[$2 + 72 >> 2] = $1;
   HEAP32[$2 + 76 >> 2] = $0;
   $1 = HEAP32[$2 + 188 >> 2];
   $0 = HEAP32[$2 + 184 >> 2];
   HEAP32[$2 + 64 >> 2] = $0;
   HEAP32[$2 + 68 >> 2] = $1;
   label$10: {
    if (jsfWriteFile($2 - -64 | 0, $3, 64, 0, 40928) & 1) {
     HEAP32[$2 + 56 >> 2] = HEAP32[$2 + 208 >> 2];
     $0 = HEAP32[$2 + 204 >> 2];
     $1 = HEAP32[$2 + 200 >> 2];
     HEAP32[$2 + 48 >> 2] = $1;
     HEAP32[$2 + 52 >> 2] = $0;
     $1 = HEAP32[$2 + 196 >> 2];
     $0 = HEAP32[$2 + 192 >> 2];
     HEAP32[$2 + 40 >> 2] = $0;
     HEAP32[$2 + 44 >> 2] = $1;
     $0 = HEAP32[$2 + 188 >> 2];
     $1 = HEAP32[$2 + 184 >> 2];
     HEAP32[$2 + 32 >> 2] = $1;
     HEAP32[$2 + 36 >> 2] = $0;
     HEAP32[$2 + 140 >> 2] = jsfFindFile($2 + 32 | 0, $2 + 144 | 0);
     HEAP32[$2 + 136 >> 2] = jsfGetFileSize($2 + 144 | 0);
     HEAP32[$2 + 216 >> 2] = HEAP32[$2 + 220 >> 2];
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 113219, jsvNewFromInteger(HEAP32[$2 + 216 >> 2]));
     break label$10;
    }
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 120456, jsvNewFromInteger(0));
   }
   jsvUnLock(HEAP32[$2 + 224 >> 2]);
   break label$1;
  }
  HEAP32[$2 + 132 >> 2] = HEAP32[$2 + 136 >> 2] - HEAP32[$2 + 216 >> 2];
  label$12: {
   if (HEAP32[$2 + 220 >> 2] < HEAP32[$2 + 132 >> 2]) {
    jswrap_flash_write(HEAP32[$2 + 224 >> 2], HEAP32[$2 + 140 >> 2] + HEAP32[$2 + 216 >> 2] | 0);
    HEAP32[$2 + 216 >> 2] = HEAP32[$2 + 220 >> 2] + HEAP32[$2 + 216 >> 2];
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 113219, jsvNewFromInteger(HEAP32[$2 + 216 >> 2]));
    break label$12;
   }
   HEAP32[$2 + 128 >> 2] = jsvNewFromStringVar(HEAP32[$2 + 224 >> 2], 0, HEAP32[$2 + 132 >> 2]);
   jswrap_flash_write(HEAP32[$2 + 128 >> 2], HEAP32[$2 + 140 >> 2] + HEAP32[$2 + 216 >> 2] | 0);
   HEAP32[$2 + 216 >> 2] = HEAP32[$2 + 132 >> 2] + HEAP32[$2 + 216 >> 2];
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 113219, jsvNewFromInteger(HEAP32[$2 + 216 >> 2]));
   jsvUnLock(HEAP32[$2 + 128 >> 2]);
   if (HEAP32[$2 + 212 >> 2] == 255) {
    jsExceptionHere(1, 143750, 0);
    jsvUnLock(HEAP32[$2 + 224 >> 2]);
    break label$1;
   }
   HEAP32[$2 + 212 >> 2] = HEAP32[$2 + 212 >> 2] + 1;
   HEAP8[HEAP32[$2 + 180 >> 2] + ($2 + 184 | 0) | 0] = HEAP32[$2 + 212 >> 2];
   HEAP32[$2 + 128 >> 2] = jsvNewFromStringVar(HEAP32[$2 + 224 >> 2], HEAP32[$2 + 132 >> 2], 2147483647);
   $3 = HEAP32[$2 + 128 >> 2];
   HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 208 >> 2];
   $1 = HEAP32[$2 + 204 >> 2];
   $0 = HEAP32[$2 + 200 >> 2];
   HEAP32[$2 + 16 >> 2] = $0;
   HEAP32[$2 + 20 >> 2] = $1;
   $0 = HEAP32[$2 + 196 >> 2];
   $1 = HEAP32[$2 + 192 >> 2];
   HEAP32[$2 + 8 >> 2] = $1;
   HEAP32[$2 + 12 >> 2] = $0;
   $1 = HEAP32[$2 + 188 >> 2];
   $0 = HEAP32[$2 + 184 >> 2];
   HEAP32[$2 >> 2] = $0;
   HEAP32[$2 + 4 >> 2] = $1;
   label$15: {
    if (jsfWriteFile($2, $3, 64, 0, 40928) & 1) {
     HEAP32[$2 + 216 >> 2] = jsvGetStringLength(HEAP32[$2 + 128 >> 2]);
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 118134, jsvNewFromInteger(HEAP32[$2 + 212 >> 2]));
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 113219, jsvNewFromInteger(HEAP32[$2 + 216 >> 2]));
     break label$15;
    }
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 120456, jsvNewFromInteger(0));
   }
   jsvUnLock(HEAP32[$2 + 128 >> 2]);
  }
  jsvUnLock(HEAP32[$2 + 224 >> 2]);
 }
 __stack_pointer = $2 + 240 | 0;
}

function tflite__GreedyMemoryPlanner__CalculateOffsetsIfNeeded_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 96 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 92 >> 2] = $0;
 label$1: {
  $0 = HEAP32[$1 + 92 >> 2];
  if (!(HEAP8[$0 + 40 | 0] & 1) | !HEAP32[$0 + 8 >> 2]) {
   break label$1;
  }
  HEAP8[$0 + 40 | 0] = 0;
  HEAP32[$1 + 88 >> 2] = HEAP32[$0 + 8 >> 2];
  HEAP32[$1 + 84 >> 2] = 0;
  HEAP32[$1 + 80 >> 2] = 0;
  while (1) {
   if (HEAP32[$1 + 80 >> 2] < HEAP32[$0 + 8 >> 2]) {
    label$5: {
     if (HEAP32[(HEAP32[$0 + 12 >> 2] + (HEAP32[$1 + 80 >> 2] << 4) | 0) + 4 >> 2] == -1) {
      HEAP32[$1 + 88 >> 2] = HEAP32[$1 + 88 >> 2] - 1;
      HEAP32[HEAP32[$0 + 16 >> 2] + (HEAP32[$1 + 88 >> 2] << 2) >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] + (HEAP32[$1 + 80 >> 2] << 4) >> 2];
      HEAP32[HEAP32[$0 + 20 >> 2] + (HEAP32[$1 + 88 >> 2] << 2) >> 2] = HEAP32[$1 + 80 >> 2];
      HEAP32[HEAP32[$0 + 36 >> 2] + (HEAP32[$1 + 80 >> 2] << 2) >> 2] = -1;
      break label$5;
     }
     HEAP32[HEAP32[$0 + 16 >> 2] + (HEAP32[$1 + 84 >> 2] << 2) >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] + (HEAP32[$1 + 80 >> 2] << 4) >> 2];
     HEAP32[HEAP32[$0 + 20 >> 2] + (HEAP32[$1 + 84 >> 2] << 2) >> 2] = HEAP32[$1 + 80 >> 2];
     HEAP32[HEAP32[$0 + 36 >> 2] + (HEAP32[$1 + 80 >> 2] << 2) >> 2] = HEAP32[(HEAP32[$0 + 12 >> 2] + (HEAP32[$1 + 80 >> 2] << 4) | 0) + 4 >> 2];
     HEAP32[$1 + 84 >> 2] = HEAP32[$1 + 84 >> 2] + 1;
    }
    HEAP32[$1 + 80 >> 2] = HEAP32[$1 + 80 >> 2] + 1;
    continue;
   }
   break;
  }
  tflite__ReverseSortInPlace_28int__2c_20int__2c_20int_29(HEAP32[$0 + 16 >> 2] + (HEAP32[$1 + 84 >> 2] << 2) | 0, HEAP32[$0 + 20 >> 2] + (HEAP32[$1 + 84 >> 2] << 2) | 0, HEAP32[$0 + 8 >> 2] - HEAP32[$1 + 84 >> 2] | 0);
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 1;
  HEAP32[$1 + 76 >> 2] = HEAP32[$0 + 24 >> 2] + Math_imul(HEAP32[$0 + 32 >> 2], 12);
  HEAP32[HEAP32[$1 + 76 >> 2] + 8 >> 2] = -1;
  HEAP32[$1 + 72 >> 2] = HEAP32[HEAP32[$0 + 20 >> 2] >> 2];
  HEAP32[HEAP32[$1 + 76 >> 2] + 4 >> 2] = HEAP32[$1 + 72 >> 2];
  if (HEAP32[(HEAP32[$0 + 12 >> 2] + (HEAP32[$1 + 72 >> 2] << 4) | 0) + 4 >> 2] == -1) {
   HEAP32[HEAP32[$0 + 36 >> 2] + (HEAP32[$1 + 72 >> 2] << 2) >> 2] = 0;
  }
  HEAP32[HEAP32[$1 + 76 >> 2] >> 2] = HEAP32[HEAP32[$0 + 36 >> 2] + (HEAP32[$1 + 72 >> 2] << 2) >> 2];
  HEAP32[$1 + 68 >> 2] = 1;
  while (1) {
   if (HEAP32[$1 + 68 >> 2] >= HEAP32[$0 + 8 >> 2]) {
    break label$1;
   }
   HEAP32[$1 + 72 >> 2] = HEAP32[HEAP32[$0 + 20 >> 2] + (HEAP32[$1 + 68 >> 2] << 2) >> 2];
   HEAP32[$1 + 64 >> 2] = HEAP32[$0 + 12 >> 2] + (HEAP32[$1 + 72 >> 2] << 4);
   HEAP32[$1 + 60 >> 2] = HEAP32[HEAP32[$1 + 64 >> 2] >> 2];
   HEAP32[$1 + 56 >> 2] = HEAP32[HEAP32[$1 + 64 >> 2] + 8 >> 2];
   HEAP32[$1 + 52 >> 2] = HEAP32[HEAP32[$1 + 64 >> 2] + 12 >> 2];
   HEAP32[$1 + 48 >> 2] = 0;
   label$9: {
    if (HEAP32[HEAP32[$1 + 64 >> 2] + 4 >> 2] == -1) {
     HEAP32[$1 + 44 >> 2] = 0;
     while (1) {
      HEAP32[$1 + 40 >> 2] = tflite__GreedyMemoryPlanner__NextSimultaneouslyActiveBuffer_28tflite__GreedyMemoryPlanner__ListEntry_20const__2c_20int_2c_20int_29($0, HEAP32[$1 + 44 >> 2], HEAP32[$1 + 56 >> 2], HEAP32[$1 + 52 >> 2]);
      if (HEAP32[$1 + 44 >> 2]) {
       HEAP32[$1 + 36 >> 2] = HEAP32[$0 + 12 >> 2] + (HEAP32[HEAP32[$1 + 44 >> 2] + 4 >> 2] << 4);
       HEAP32[$1 + 32 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] >> 2] + HEAP32[HEAP32[$1 + 36 >> 2] >> 2];
       if (HEAP32[$1 + 32 >> 2] > HEAP32[$1 + 48 >> 2]) {
        HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 32 >> 2];
       }
      }
      label$14: {
       if (!HEAP32[$1 + 40 >> 2]) {
        break label$14;
       }
       HEAP32[$1 + 28 >> 2] = HEAP32[HEAP32[$1 + 40 >> 2] >> 2] - HEAP32[$1 + 48 >> 2];
       if (HEAP32[$1 + 28 >> 2] >= HEAP32[$1 + 60 >> 2]) {
        break label$14;
       }
       HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 40 >> 2];
       continue;
      }
      break;
     }
     break label$9;
    }
    HEAP32[$1 + 48 >> 2] = HEAP32[HEAP32[$1 + 64 >> 2] + 4 >> 2];
   }
   HEAP32[HEAP32[$0 + 36 >> 2] + (HEAP32[$1 + 72 >> 2] << 2) >> 2] = HEAP32[$1 + 48 >> 2];
   HEAP32[$1 + 24 >> 2] = HEAP32[$0 + 24 >> 2] + Math_imul(HEAP32[$0 + 28 >> 2], 12);
   HEAP32[HEAP32[$1 + 24 >> 2] >> 2] = HEAP32[$1 + 48 >> 2];
   HEAP32[HEAP32[$1 + 24 >> 2] + 4 >> 2] = HEAP32[$1 + 72 >> 2];
   HEAP32[$1 + 20 >> 2] = HEAP32[$0 + 28 >> 2];
   HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 28 >> 2] + 1;
   label$15: {
    if (HEAP32[HEAP32[$1 + 76 >> 2] >> 2] > HEAP32[$1 + 48 >> 2]) {
     HEAP32[$1 + 76 >> 2] = HEAP32[$1 + 24 >> 2];
     HEAP32[HEAP32[$1 + 76 >> 2] + 8 >> 2] = HEAP32[$0 + 32 >> 2];
     HEAP32[$0 + 32 >> 2] = HEAP32[$1 + 20 >> 2];
     break label$15;
    }
    HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 76 >> 2];
    while (1) {
     label$18: {
      HEAP32[$1 + 12 >> 2] = HEAP32[HEAP32[$1 + 16 >> 2] + 8 >> 2];
      if (HEAP32[$1 + 12 >> 2] == -1) {
       HEAP32[HEAP32[$1 + 16 >> 2] + 8 >> 2] = HEAP32[$1 + 20 >> 2];
       HEAP32[HEAP32[$1 + 24 >> 2] + 8 >> 2] = -1;
       break label$18;
      }
      HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 24 >> 2] + Math_imul(HEAP32[$1 + 12 >> 2], 12);
      if (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] > HEAP32[$1 + 48 >> 2]) {
       HEAP32[HEAP32[$1 + 24 >> 2] + 8 >> 2] = HEAP32[HEAP32[$1 + 16 >> 2] + 8 >> 2];
       HEAP32[HEAP32[$1 + 16 >> 2] + 8 >> 2] = HEAP32[$1 + 20 >> 2];
      } else {
       HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 8 >> 2];
       continue;
      }
     }
     break;
    }
   }
   HEAP32[$1 + 68 >> 2] = HEAP32[$1 + 68 >> 2] + 1;
   continue;
  }
 }
 __stack_pointer = $1 + 96 | 0;
}

function jswrap_graphics_createArrayBuffer($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 112 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 104 >> 2] = $0;
 HEAP32[$4 + 100 >> 2] = $1;
 HEAP32[$4 + 96 >> 2] = $2;
 HEAP32[$4 + 92 >> 2] = $3;
 label$1: {
  label$2: {
   if (!(HEAP32[$4 + 104 >> 2] <= 0 | HEAP32[$4 + 100 >> 2] <= 0 | HEAP32[$4 + 104 >> 2] > 32767)) {
    if (HEAP32[$4 + 100 >> 2] <= 32767) {
     break label$2;
    }
   }
   jsExceptionHere(1, 119328, 0);
   HEAP32[$4 + 108 >> 2] = 0;
   break label$1;
  }
  if (!(isValidBPP(HEAP32[$4 + 96 >> 2]) & 1)) {
   jsExceptionHere(1, 124062, 0);
   HEAP32[$4 + 108 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 88 >> 2] = jspNewObject(0, 115743);
  if (!HEAP32[$4 + 88 >> 2]) {
   HEAP32[$4 + 108 >> 2] = 0;
   break label$1;
  }
  HEAP8[$4 + 20 | 0] = 0;
  HEAP8[$4 + 21 | 0] = 0;
  HEAP8[$4 + 22 | 0] = 0;
  HEAP8[$4 + 23 | 0] = 0;
  graphicsStructInit($4 + 16 | 0, HEAP32[$4 + 104 >> 2], HEAP32[$4 + 100 >> 2], HEAP32[$4 + 96 >> 2]);
  HEAP8[$4 + 24 | 0] = 0;
  HEAP8[$4 + 25 | 0] = 0;
  HEAP8[$4 + 26 | 0] = 0;
  HEAP8[$4 + 27 | 0] = 0;
  $0 = HEAP32[$4 + 88 >> 2];
  HEAP8[$4 + 16 | 0] = $0;
  HEAP8[$4 + 17 | 0] = $0 >>> 8;
  HEAP8[$4 + 18 | 0] = $0 >>> 16;
  HEAP8[$4 + 19 | 0] = $0 >>> 24;
  if (jsvIsObject(HEAP32[$4 + 92 >> 2]) & 1) {
   if (jsvObjectGetBoolChild(HEAP32[$4 + 92 >> 2], 119041) & 1) {
    $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 1;
    HEAP8[$4 + 24 | 0] = $0;
    HEAP8[$4 + 25 | 0] = $0 >>> 8;
    HEAP8[$4 + 26 | 0] = $0 >>> 16;
    HEAP8[$4 + 27 | 0] = $0 >>> 24;
   }
   if (jsvObjectGetBoolChild(HEAP32[$4 + 92 >> 2], 122866) & 1) {
    $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 4;
    HEAP8[$4 + 24 | 0] = $0;
    HEAP8[$4 + 25 | 0] = $0 >>> 8;
    HEAP8[$4 + 26 | 0] = $0 >>> 16;
    HEAP8[$4 + 27 | 0] = $0 >>> 24;
   }
   if (jsvObjectGetBoolChild(HEAP32[$4 + 92 >> 2], 111854) & 1) {
    $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 8;
    HEAP8[$4 + 24 | 0] = $0;
    HEAP8[$4 + 25 | 0] = $0 >>> 8;
    HEAP8[$4 + 26 | 0] = $0 >>> 16;
    HEAP8[$4 + 27 | 0] = $0 >>> 24;
   }
   if (jsvObjectGetBoolChild(HEAP32[$4 + 92 >> 2], 119577) & 1) {
    label$11: {
     if (HEAPU8[$4 + 32 | 0] == 1) {
      $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 2;
      HEAP8[$4 + 24 | 0] = $0;
      HEAP8[$4 + 25 | 0] = $0 >>> 8;
      HEAP8[$4 + 26 | 0] = $0 >>> 16;
      HEAP8[$4 + 27 | 0] = $0 >>> 24;
      break label$11;
     }
     jsExceptionHere(1, 115268, 0);
     HEAP32[$4 + 108 >> 2] = 0;
     break label$1;
    }
    if ((HEAPU8[$4 + 30 | 0] | HEAPU8[$4 + 31 | 0] << 8) & 7) {
     jsExceptionHere(1, 119535, 0);
     HEAP32[$4 + 108 >> 2] = 0;
     break label$1;
    }
   }
   HEAP32[$4 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 92 >> 2], 116527);
   if (HEAP32[$4 + 12 >> 2]) {
    if (!(jsvIsStringEqual(HEAP32[$4 + 12 >> 2], 122883) & 1)) {
     label$16: {
      if (!(jsvIsStringEqual(HEAP32[$4 + 12 >> 2], 118687) & 1)) {
       $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 128;
       HEAP8[$4 + 24 | 0] = $0;
       HEAP8[$4 + 25 | 0] = $0 >>> 8;
       HEAP8[$4 + 26 | 0] = $0 >>> 16;
       HEAP8[$4 + 27 | 0] = $0 >>> 24;
       break label$16;
      }
      label$18: {
       if (!(jsvIsStringEqual(HEAP32[$4 + 12 >> 2], 116199) & 1)) {
        $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 256;
        HEAP8[$4 + 24 | 0] = $0;
        HEAP8[$4 + 25 | 0] = $0 >>> 8;
        HEAP8[$4 + 26 | 0] = $0 >>> 16;
        HEAP8[$4 + 27 | 0] = $0 >>> 24;
        break label$18;
       }
       label$20: {
        if (!(jsvIsStringEqual(HEAP32[$4 + 12 >> 2], 116629) & 1)) {
         $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 384;
         HEAP8[$4 + 24 | 0] = $0;
         HEAP8[$4 + 25 | 0] = $0 >>> 8;
         HEAP8[$4 + 26 | 0] = $0 >>> 16;
         HEAP8[$4 + 27 | 0] = $0 >>> 24;
         break label$20;
        }
        label$22: {
         if (!(jsvIsStringEqual(HEAP32[$4 + 12 >> 2], 122874) & 1)) {
          $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 512;
          HEAP8[$4 + 24 | 0] = $0;
          HEAP8[$4 + 25 | 0] = $0 >>> 8;
          HEAP8[$4 + 26 | 0] = $0 >>> 16;
          HEAP8[$4 + 27 | 0] = $0 >>> 24;
          break label$22;
         }
         label$24: {
          if (!(jsvIsStringEqual(HEAP32[$4 + 12 >> 2], 119037) & 1)) {
           $0 = HEAPU8[$4 + 24 | 0] | HEAPU8[$4 + 25 | 0] << 8 | (HEAPU8[$4 + 26 | 0] << 16 | HEAPU8[$4 + 27 | 0] << 24) | 640;
           HEAP8[$4 + 24 | 0] = $0;
           HEAP8[$4 + 25 | 0] = $0 >>> 8;
           HEAP8[$4 + 26 | 0] = $0 >>> 16;
           HEAP8[$4 + 27 | 0] = $0 >>> 24;
           break label$24;
          }
          jsWarn(115186, 0);
         }
        }
       }
      }
     }
    }
    jsvUnLock(HEAP32[$4 + 12 >> 2]);
   }
  }
  lcdInit_ArrayBuffer($4 + 16 | 0);
  graphicsSetVarInitial($4 + 16 | 0);
  HEAP32[$4 + 108 >> 2] = HEAP32[$4 + 88 >> 2];
 }
 __stack_pointer = $4 + 112 | 0;
 return HEAP32[$4 + 108 >> 2];
}

function jswrap_json_parse_internal($0) {
 var $1 = 0;
 $1 = __stack_pointer - 112 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 104 >> 2] = $0;
 label$1: {
  label$2: {
   label$3: {
    label$4: {
     label$5: {
      label$6: {
       label$7: {
        $0 = HEAP16[HEAP32[44743] + 2 >> 1];
        if (($0 | 0) != 45) {
         if (($0 | 0) == 91) {
          break label$4;
         }
         if (($0 | 0) == 123) {
          break label$3;
         }
         if (($0 | 0) == 129) {
          break label$7;
         }
         if (($0 | 0) == 130) {
          break label$6;
         }
         if (($0 | 0) == 131) {
          break label$5;
         }
         label$9: {
          label$10: {
           if (($0 | 0) != 180) {
            if (($0 | 0) == 181) {
             break label$10;
            }
            if (($0 | 0) == 182) {
             break label$9;
            }
            break label$2;
           }
           jslGetNextToken();
           HEAP32[$1 + 108 >> 2] = jsvNewFromBool(1);
           break label$1;
          }
          jslGetNextToken();
          HEAP32[$1 + 108 >> 2] = jsvNewFromBool(0);
          break label$1;
         }
         jslGetNextToken();
         HEAP32[$1 + 108 >> 2] = jsvNewWithFlags(2);
         break label$1;
        }
        jslGetNextToken();
        if (!(HEAP16[HEAP32[44743] + 2 >> 1] == 129 | HEAP16[HEAP32[44743] + 2 >> 1] == 130)) {
         HEAP32[$1 + 108 >> 2] = 0;
         break label$1;
        }
        HEAP32[$1 + 100 >> 2] = jswrap_json_parse_internal(HEAP32[$1 + 104 >> 2]);
        HEAP32[$1 + 96 >> 2] = jsvNewFromInteger(0);
        HEAP32[$1 + 92 >> 2] = jsvMathsOp(HEAP32[$1 + 96 >> 2], HEAP32[$1 + 100 >> 2], 45);
        jsvUnLock2(HEAP32[$1 + 100 >> 2], HEAP32[$1 + 96 >> 2]);
        HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 92 >> 2];
        break label$1;
       }
       HEAP32[$1 + 80 >> 2] = stringToInt(jslGetTokenValueAsString());
       HEAP32[$1 + 84 >> 2] = i64toi32_i32$HIGH_BITS;
       jslGetNextToken();
       HEAP32[$1 + 108 >> 2] = jsvNewFromLongInteger(HEAP32[$1 + 80 >> 2], HEAP32[$1 + 84 >> 2]);
       break label$1;
      }
      HEAPF64[$1 + 72 >> 3] = stringToFloat(jslGetTokenValueAsString());
      jslGetNextToken();
      HEAP32[$1 + 108 >> 2] = jsvNewFromFloat(HEAPF64[$1 + 72 >> 3]);
      break label$1;
     }
     HEAP32[$1 + 68 >> 2] = jslGetTokenValueAsVar();
     jslGetNextToken();
     HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 68 >> 2];
     break label$1;
    }
    HEAP32[$1 + 64 >> 2] = jsvNewEmptyArray();
    if (!HEAP32[$1 + 64 >> 2]) {
     HEAP32[$1 + 108 >> 2] = 0;
     break label$1;
    }
    jslGetNextToken();
    while (1) {
     $0 = 0;
     if (HEAP16[HEAP32[44743] + 2 >> 1] != 93) {
      $0 = jspHasError() ^ -1;
     }
     if ($0 & 1) {
      HEAP32[$1 + 60 >> 2] = jswrap_json_parse_internal(HEAP32[$1 + 104 >> 2]);
      label$17: {
       if (HEAP32[$1 + 60 >> 2]) {
        if (HEAP16[HEAP32[44743] + 2 >> 1] == 93) {
         break label$17;
        }
        if (jslMatch(44) & 1) {
         break label$17;
        }
       }
       jsvUnLock2(HEAP32[$1 + 60 >> 2], HEAP32[$1 + 64 >> 2]);
       HEAP32[$1 + 108 >> 2] = 0;
       break label$1;
      }
      jsvArrayPush(HEAP32[$1 + 64 >> 2], HEAP32[$1 + 60 >> 2]);
      jsvUnLock(HEAP32[$1 + 60 >> 2]);
      continue;
     }
     break;
    }
    if (!(jslMatch(93) & 1)) {
     jsvUnLock(HEAP32[$1 + 64 >> 2]);
     HEAP32[$1 + 108 >> 2] = 0;
     break label$1;
    }
    HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 64 >> 2];
    break label$1;
   }
   HEAP32[$1 + 56 >> 2] = jsvNewObject();
   if (!HEAP32[$1 + 56 >> 2]) {
    HEAP32[$1 + 108 >> 2] = 0;
    break label$1;
   }
   jslGetNextToken();
   while (1) {
    label$22: {
     if (HEAP16[HEAP32[44743] + 2 >> 1] != 131) {
      $0 = 0;
      if (!(jslIsIDOrReservedWord() & 1)) {
       break label$22;
      }
     }
     $0 = jspHasError() ^ -1;
    }
    if ($0 & 1) {
     label$25: {
      if (HEAP32[$1 + 104 >> 2] & 512) {
       break label$25;
      }
      if (!(jslIsIDOrReservedWord() & 1)) {
       break label$25;
      }
      jslMatch(131);
      HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 56 >> 2];
      break label$1;
     }
     HEAP32[$1 + 52 >> 2] = jsvAsArrayIndexAndUnLock(jslGetTokenValueAsVar());
     jslGetNextToken();
     HEAP32[$1 + 48 >> 2] = 0;
     label$26: {
      label$27: {
       if (!(jslMatch(58) & 1)) {
        break label$27;
       }
       $0 = jswrap_json_parse_internal(HEAP32[$1 + 104 >> 2]);
       HEAP32[$1 + 48 >> 2] = $0;
       if (!$0) {
        break label$27;
       }
       if (HEAP16[HEAP32[44743] + 2 >> 1] == 125) {
        break label$26;
       }
       if (jslMatch(44) & 1) {
        break label$26;
       }
      }
      jsvUnLock3(HEAP32[$1 + 52 >> 2], HEAP32[$1 + 48 >> 2], HEAP32[$1 + 56 >> 2]);
      HEAP32[$1 + 108 >> 2] = 0;
      break label$1;
     }
     jsvAddName(HEAP32[$1 + 56 >> 2], jsvMakeIntoVariableName(HEAP32[$1 + 52 >> 2], HEAP32[$1 + 48 >> 2]));
     jsvUnLock2(HEAP32[$1 + 48 >> 2], HEAP32[$1 + 52 >> 2]);
     continue;
    }
    break;
   }
   if (!(jslMatch(125) & 1)) {
    jsvUnLock(HEAP32[$1 + 56 >> 2]);
    HEAP32[$1 + 108 >> 2] = 0;
    break label$1;
   }
   HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 56 >> 2];
   break label$1;
  }
  jslTokenAsString(HEAP16[HEAP32[44743] + 2 >> 1], $1 + 16 | 0, 32);
  HEAP32[$1 >> 2] = $1 + 16;
  jsExceptionHere(2, 115778, $1);
  HEAP32[$1 + 108 >> 2] = 0;
 }
 __stack_pointer = $1 + 112 | 0;
 return HEAP32[$1 + 108 >> 2];
}

function tflite__reference_ops__AveragePool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = Math_fround(0);
 $5 = __stack_pointer - 144 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 140 >> 2] = $0;
 HEAP32[$5 + 136 >> 2] = $1;
 HEAP32[$5 + 132 >> 2] = $2;
 HEAP32[$5 + 128 >> 2] = $3;
 HEAP32[$5 + 124 >> 2] = $4;
 label$1: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$5 + 136 >> 2]) | 0) != 4) {
   break label$1;
  }
 }
 label$2: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$5 + 128 >> 2]) | 0) != 4) {
   break label$2;
  }
 }
 HEAP32[$5 + 120 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 0, HEAP32[$5 + 128 >> 2], 0);
 HEAP32[$5 + 116 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 3, HEAP32[$5 + 128 >> 2], 3);
 HEAP32[$5 + 112 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 1);
 HEAP32[$5 + 108 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 2);
 HEAP32[$5 + 104 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 1);
 HEAP32[$5 + 100 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 2);
 HEAP32[$5 + 96 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 12 >> 2];
 HEAP32[$5 + 92 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 16 >> 2];
 HEAP32[$5 + 88 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 88 >> 2] < HEAP32[$5 + 120 >> 2]) {
   HEAP32[$5 + 84 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 84 >> 2] < HEAP32[$5 + 104 >> 2]) {
     HEAP32[$5 + 80 >> 2] = 0;
     while (1) {
      if (HEAP32[$5 + 80 >> 2] < HEAP32[$5 + 100 >> 2]) {
       HEAP32[$5 + 76 >> 2] = 0;
       while (1) {
        if (HEAP32[$5 + 76 >> 2] < HEAP32[$5 + 116 >> 2]) {
         HEAP32[$5 + 72 >> 2] = Math_imul(HEAP32[$5 + 80 >> 2], HEAP32[$5 + 92 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 2 >> 1];
         HEAP32[$5 + 68 >> 2] = Math_imul(HEAP32[$5 + 84 >> 2], HEAP32[$5 + 96 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 4 >> 1];
         HEAP32[$5 + 60 >> 2] = 0;
         HEAP32[$5 + 56 >> 2] = 0 - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 64 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 60 | 0, $5 + 56 | 0) >> 2];
         $0 = HEAP32[$5 + 140 >> 2];
         HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 108 >> 2] - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 52 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0 + 24 | 0, $5 + 48 | 0) >> 2];
         HEAP32[$5 + 40 >> 2] = 0;
         HEAP32[$5 + 36 >> 2] = 0 - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 44 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 40 | 0, $5 + 36 | 0) >> 2];
         $0 = HEAP32[$5 + 140 >> 2];
         HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 112 >> 2] - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 32 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0 + 20 | 0, $5 + 28 | 0) >> 2];
         HEAPF32[$5 + 24 >> 2] = 0;
         HEAPF32[$5 + 20 >> 2] = 0;
         HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 44 >> 2];
         while (1) {
          if (HEAP32[$5 + 16 >> 2] < HEAP32[$5 + 32 >> 2]) {
           HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 64 >> 2];
           while (1) {
            if (HEAP32[$5 + 12 >> 2] < HEAP32[$5 + 52 >> 2]) {
             HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 72 >> 2] + HEAP32[$5 + 12 >> 2];
             HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 68 >> 2] + HEAP32[$5 + 16 >> 2];
             $0 = HEAP32[$5 + 132 >> 2] + (tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 136 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 4 >> 2], HEAP32[$5 + 8 >> 2], HEAP32[$5 + 76 >> 2]) << 2) | 0;
             HEAPF32[$5 + 24 >> 2] = HEAPF32[$5 + 24 >> 2] + HEAPF32[$0 >> 2];
             HEAPF32[$5 + 20 >> 2] = HEAPF32[$5 + 20 >> 2] + Math_fround(1);
             HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 12 >> 2] + 1;
             continue;
            }
            break;
           }
           HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 1;
           continue;
          }
          break;
         }
         HEAPF32[$5 >> 2] = HEAPF32[$5 + 24 >> 2] / HEAPF32[$5 + 20 >> 2];
         $6 = float_20tflite__ActivationFunctionWithMinMax_float__28float_2c_20float_2c_20float_29(HEAPF32[$5 >> 2], HEAPF32[HEAP32[$5 + 140 >> 2] + 36 >> 2], HEAPF32[HEAP32[$5 + 140 >> 2] + 40 >> 2]);
         HEAPF32[HEAP32[$5 + 124 >> 2] + (tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 128 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2], HEAP32[$5 + 76 >> 2]) << 2) >> 2] = $6;
         HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 76 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$5 + 80 >> 2] = HEAP32[$5 + 80 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$5 + 84 >> 2] = HEAP32[$5 + 84 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 88 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 + 144 | 0;
}

function jsvIterateBufferCallback($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 256 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 248 >> 2] = $0;
 HEAP32[$3 + 244 >> 2] = $1;
 HEAP32[$3 + 240 >> 2] = $2;
 HEAP8[$3 + 239 | 0] = 1;
 label$1: {
  label$2: {
   if (jsvIsNumeric(HEAP32[$3 + 248 >> 2]) & 1) {
    HEAP8[$3 + 238 | 0] = jsvGetInteger(HEAP32[$3 + 248 >> 2]);
    FUNCTION_TABLE[HEAP32[$3 + 244 >> 2]]($3 + 238 | 0, 1, HEAP32[$3 + 240 >> 2]);
    break label$2;
   }
   label$4: {
    if (jsvIsObject(HEAP32[$3 + 248 >> 2]) & 1) {
     HEAP32[$3 + 232 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 248 >> 2], 118173);
     if (jsvIsFunction(HEAP32[$3 + 232 >> 2]) & 1) {
      HEAP32[$3 + 228 >> 2] = jspExecuteFunction(HEAP32[$3 + 232 >> 2], 0, 0, 0);
      jsvUnLock(HEAP32[$3 + 232 >> 2]);
      if (HEAP32[$3 + 228 >> 2]) {
       HEAP8[$3 + 227 | 0] = jsvIterateBufferCallback(HEAP32[$3 + 228 >> 2], HEAP32[$3 + 244 >> 2], HEAP32[$3 + 240 >> 2]) & 1;
       jsvUnLock(HEAP32[$3 + 228 >> 2]);
       HEAP8[$3 + 255 | 0] = HEAP8[$3 + 227 | 0] & 1;
       break label$1;
      }
      HEAP8[$3 + 255 | 0] = 1;
      break label$1;
     }
     jsvUnLock(HEAP32[$3 + 232 >> 2]);
     HEAP32[$3 + 220 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 248 >> 2], 112717);
     HEAP32[$3 + 216 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 248 >> 2], 122985);
     label$8: {
      label$9: {
       if (!HEAP32[$3 + 220 >> 2] | !HEAP32[$3 + 216 >> 2]) {
        break label$9;
       }
       if (!(jsvIsNumeric(HEAP32[$3 + 220 >> 2]) & 1)) {
        break label$9;
       }
       HEAP32[$3 + 212 >> 2] = jsvGetInteger(HEAP32[$3 + 220 >> 2]);
       while (1) {
        $0 = 0;
        if (HEAP8[$3 + 239 | 0] & 1) {
         $0 = HEAP32[$3 + 212 >> 2];
         HEAP32[$3 + 212 >> 2] = $0 - 1;
         $0 = ($0 | 0) > 0;
        }
        if ($0) {
         HEAP8[$3 + 239 | 0] = jsvIterateBufferCallback(HEAP32[$3 + 216 >> 2], HEAP32[$3 + 244 >> 2], HEAP32[$3 + 240 >> 2]) & 1;
         continue;
        }
        break;
       }
       break label$8;
      }
      HEAP32[$3 >> 2] = HEAP32[$3 + 248 >> 2];
      jsExceptionHere(3, 118197, $3);
      HEAP8[$3 + 239 | 0] = 0;
     }
     jsvUnLock2(HEAP32[$3 + 220 >> 2], HEAP32[$3 + 216 >> 2]);
     break label$4;
    }
    label$13: {
     if (jsvIsString(HEAP32[$3 + 248 >> 2]) & 1) {
      jsvStringIteratorNew($3 + 176 | 0, HEAP32[$3 + 248 >> 2], 0);
      while (1) {
       $0 = 0;
       if (jsvStringIteratorHasChar_2($3 + 176 | 0) & 1) {
        $0 = HEAPU8[$3 + 239 | 0];
       }
       if ($0 & 1) {
        jsvStringIteratorGetPtrAndNext($3 + 176 | 0, $3 + 172 | 0, $3 + 168 | 0);
        FUNCTION_TABLE[HEAP32[$3 + 244 >> 2]](HEAP32[$3 + 172 >> 2], HEAP32[$3 + 168 >> 2], HEAP32[$3 + 240 >> 2]);
        continue;
       }
       break;
      }
      jsvStringIteratorFree_2($3 + 176 | 0);
      break label$13;
     }
     label$18: {
      if (jsvIsArrayBuffer(HEAP32[$3 + 248 >> 2]) & 1) {
       jsvArrayBufferIteratorNew($3 + 112 | 0, HEAP32[$3 + 248 >> 2], 0);
       label$20: {
        if (!(HEAPU8[$3 + 148 | 0] & 16 | (HEAPU8[$3 + 148 | 0] & 15) != 1)) {
         HEAP32[$3 + 108 >> 2] = $3 + 112;
         HEAP32[$3 + 104 >> 2] = jsvGetArrayBufferLength(HEAP32[$3 + 248 >> 2]);
         while (1) {
          if (HEAP32[$3 + 104 >> 2]) {
           jsvStringIteratorGetPtrAndNext(HEAP32[$3 + 108 >> 2], $3 + 100 | 0, $3 + 96 | 0);
           if (HEAPU32[$3 + 96 >> 2] > HEAPU32[$3 + 104 >> 2]) {
            HEAP32[$3 + 96 >> 2] = HEAP32[$3 + 104 >> 2];
           }
           FUNCTION_TABLE[HEAP32[$3 + 244 >> 2]](HEAP32[$3 + 100 >> 2], HEAP32[$3 + 96 >> 2], HEAP32[$3 + 240 >> 2]);
           HEAP32[$3 + 104 >> 2] = HEAP32[$3 + 104 >> 2] - HEAP32[$3 + 96 >> 2];
           continue;
          }
          break;
         }
         break label$20;
        }
        while (1) {
         if (jsvArrayBufferIteratorHasElement($3 + 112 | 0) & 1) {
          HEAP8[$3 + 95 | 0] = jsvArrayBufferIteratorGetIntegerValue($3 + 112 | 0);
          FUNCTION_TABLE[HEAP32[$3 + 244 >> 2]]($3 + 95 | 0, 1, HEAP32[$3 + 240 >> 2]);
          jsvArrayBufferIteratorNext($3 + 112 | 0);
          continue;
         }
         break;
        }
       }
       jsvArrayBufferIteratorFree($3 + 112 | 0);
       break label$18;
      }
      label$27: {
       if (jsvIsIterable(HEAP32[$3 + 248 >> 2]) & 1) {
        jsvIteratorNew($3 + 32 | 0, HEAP32[$3 + 248 >> 2], 1);
        while (1) {
         $0 = 0;
         if (jsvIteratorHasElement($3 + 32 | 0) & 1) {
          $0 = HEAPU8[$3 + 239 | 0];
         }
         if ($0 & 1) {
          HEAP32[$3 + 28 >> 2] = jsvIteratorGetValue($3 + 32 | 0);
          HEAP8[$3 + 239 | 0] = jsvIterateBufferCallback(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 244 >> 2], HEAP32[$3 + 240 >> 2]) & 1;
          jsvUnLock(HEAP32[$3 + 28 >> 2]);
          jsvIteratorNext($3 + 32 | 0);
          continue;
         }
         break;
        }
        jsvIteratorFree($3 + 32 | 0);
        break label$27;
       }
       HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 248 >> 2];
       jsExceptionHere(3, 114200, $3 + 16 | 0);
       HEAP8[$3 + 239 | 0] = 0;
      }
     }
    }
   }
  }
  HEAP8[$3 + 255 | 0] = HEAP8[$3 + 239 | 0] & 1;
 }
 __stack_pointer = $3 + 256 | 0;
 return HEAP8[$3 + 255 | 0] & 1;
}

function __rem_pio2($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $7 = __stack_pointer - 48 | 0;
 __stack_pointer = $7;
 wasm2js_scratch_store_f64(+$0);
 $4 = wasm2js_scratch_load_i32(1) | 0;
 $11 = wasm2js_scratch_load_i32(0) | 0;
 label$1: {
  label$2: {
   $3 = $4;
   $8 = $4 & 2147483647;
   label$3: {
    if ($8 >>> 0 <= 1074752122) {
     if (($3 & 1048575) == 598523) {
      break label$3;
     }
     if ($8 >>> 0 <= 1073928572) {
      if (($4 | 0) > 0 | ($4 | 0) >= 0) {
       $0 = $0 + -1.5707963267341256;
       $2 = $0 + -6077100506506192e-26;
       HEAPF64[$1 >> 3] = $2;
       HEAPF64[$1 + 8 >> 3] = $0 - $2 + -6077100506506192e-26;
       $3 = 1;
       break label$1;
      }
      $0 = $0 + 1.5707963267341256;
      $2 = $0 + 6077100506506192e-26;
      HEAPF64[$1 >> 3] = $2;
      HEAPF64[$1 + 8 >> 3] = $0 - $2 + 6077100506506192e-26;
      $3 = -1;
      break label$1;
     }
     if (($4 | 0) > 0 | ($4 | 0) >= 0) {
      $0 = $0 + -3.1415926534682512;
      $2 = $0 + -1.2154201013012384e-10;
      HEAPF64[$1 >> 3] = $2;
      HEAPF64[$1 + 8 >> 3] = $0 - $2 + -1.2154201013012384e-10;
      $3 = 2;
      break label$1;
     }
     $0 = $0 + 3.1415926534682512;
     $2 = $0 + 1.2154201013012384e-10;
     HEAPF64[$1 >> 3] = $2;
     HEAPF64[$1 + 8 >> 3] = $0 - $2 + 1.2154201013012384e-10;
     $3 = -2;
     break label$1;
    }
    if ($8 >>> 0 <= 1075594811) {
     if ($8 >>> 0 <= 1075183036) {
      if (($8 | 0) == 1074977148) {
       break label$3;
      }
      if (($4 | 0) > 0 | ($4 | 0) >= 0) {
       $0 = $0 + -4.712388980202377;
       $2 = $0 + -1.8231301519518578e-10;
       HEAPF64[$1 >> 3] = $2;
       HEAPF64[$1 + 8 >> 3] = $0 - $2 + -1.8231301519518578e-10;
       $3 = 3;
       break label$1;
      }
      $0 = $0 + 4.712388980202377;
      $2 = $0 + 1.8231301519518578e-10;
      HEAPF64[$1 >> 3] = $2;
      HEAPF64[$1 + 8 >> 3] = $0 - $2 + 1.8231301519518578e-10;
      $3 = -3;
      break label$1;
     }
     if (($8 | 0) == 1075388923) {
      break label$3;
     }
     if (($4 | 0) > 0 | ($4 | 0) >= 0) {
      $0 = $0 + -6.2831853069365025;
      $2 = $0 + -2.430840202602477e-10;
      HEAPF64[$1 >> 3] = $2;
      HEAPF64[$1 + 8 >> 3] = $0 - $2 + -2.430840202602477e-10;
      $3 = 4;
      break label$1;
     }
     $0 = $0 + 6.2831853069365025;
     $2 = $0 + 2.430840202602477e-10;
     HEAPF64[$1 >> 3] = $2;
     HEAPF64[$1 + 8 >> 3] = $0 - $2 + 2.430840202602477e-10;
     $3 = -4;
     break label$1;
    }
    if ($8 >>> 0 > 1094263290) {
     break label$2;
    }
   }
   $2 = $0 * .6366197723675814 + 6755399441055744 + -6755399441055744;
   $6 = $0 + $2 * -1.5707963267341256;
   $10 = $2 * 6077100506506192e-26;
   $12 = $6 - $10;
   $9 = $12 < -.7853981633974483;
   if (Math_abs($2) < 2147483648) {
    $3 = ~~$2;
   } else {
    $3 = -2147483648;
   }
   label$14: {
    if ($9) {
     $3 = $3 - 1 | 0;
     $2 = $2 + -1;
     $10 = $2 * 6077100506506192e-26;
     $6 = $0 + $2 * -1.5707963267341256;
     break label$14;
    }
    if (!($12 > .7853981633974483)) {
     break label$14;
    }
    $3 = $3 + 1 | 0;
    $2 = $2 + 1;
    $10 = $2 * 6077100506506192e-26;
    $6 = $0 + $2 * -1.5707963267341256;
   }
   $0 = $6 - $10;
   HEAPF64[$1 >> 3] = $0;
   wasm2js_scratch_store_f64(+$0);
   $5 = wasm2js_scratch_load_i32(1) | 0;
   wasm2js_scratch_load_i32(0) | 0;
   $9 = $8 >>> 20 | 0;
   label$16: {
    if (($9 - ($5 >>> 20 & 2047) | 0) < 17) {
     break label$16;
    }
    $0 = $2 * 6077100506303966e-26;
    $12 = $6 - $0;
    $10 = $2 * 20222662487959506e-37 - ($6 - $12 - $0);
    $0 = $12 - $10;
    HEAPF64[$1 >> 3] = $0;
    wasm2js_scratch_store_f64(+$0);
    $5 = wasm2js_scratch_load_i32(1) | 0;
    wasm2js_scratch_load_i32(0) | 0;
    if (($9 - ($5 >>> 20 & 2047) | 0) < 50) {
     $6 = $12;
     break label$16;
    }
    $0 = $2 * 20222662487111665e-37;
    $6 = $12 - $0;
    $10 = $2 * 84784276603689e-45 - ($12 - $6 - $0);
    $0 = $6 - $10;
    HEAPF64[$1 >> 3] = $0;
   }
   HEAPF64[$1 + 8 >> 3] = $6 - $0 - $10;
   break label$1;
  }
  if ($8 >>> 0 >= 2146435072) {
   $0 = $0 - $0;
   HEAPF64[$1 >> 3] = $0;
   HEAPF64[$1 + 8 >> 3] = $0;
   $3 = 0;
   break label$1;
  }
  $5 = $4 & 1048575;
  wasm2js_scratch_store_i32(0, $11 | 0);
  $5 = $5 | 1096810496;
  wasm2js_scratch_store_i32(1, $5 | 0);
  $0 = +wasm2js_scratch_load_f64();
  $3 = 0;
  $9 = 1;
  while (1) {
   $3 = ($7 + 16 | 0) + ($3 << 3) | 0;
   if (Math_abs($0) < 2147483648) {
    $5 = ~~$0;
   } else {
    $5 = -2147483648;
   }
   $2 = +($5 | 0);
   HEAPF64[$3 >> 3] = $2;
   $0 = ($0 - $2) * 16777216;
   $3 = 1;
   $5 = $9 & 1;
   $9 = 0;
   if ($5) {
    continue;
   }
   break;
  }
  HEAPF64[$7 + 32 >> 3] = $0;
  $3 = 2;
  while (1) {
   $9 = $3;
   $3 = $3 - 1 | 0;
   if (HEAPF64[($7 + 16 | 0) + ($9 << 3) >> 3] == 0) {
    continue;
   }
   break;
  }
  $3 = __rem_pio2_large($7 + 16 | 0, $7, ($8 >>> 20 | 0) - 1046 | 0, $9 + 1 | 0, 1);
  $0 = HEAPF64[$7 >> 3];
  if (($4 | 0) < 0) {
   HEAPF64[$1 >> 3] = -$0;
   HEAPF64[$1 + 8 >> 3] = -HEAPF64[$7 + 8 >> 3];
   $3 = 0 - $3 | 0;
   break label$1;
  }
  HEAPF64[$1 >> 3] = $0;
  HEAPF64[$1 + 8 >> 3] = HEAPF64[$7 + 8 >> 3];
 }
 __stack_pointer = $7 + 48 | 0;
 return $3;
}

function terminalSendChar($0) {
 var $1 = 0;
 $1 = __stack_pointer - 176 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 175 | 0] = $0;
 label$1: {
  if (!HEAP8[373980]) {
   if (HEAP8[$1 + 175 | 0] == 8) {
    if (HEAPU8[373978]) {
     HEAP8[373978] = HEAPU8[373978] - 1;
    }
    break label$1;
   }
   label$5: {
    if (HEAP8[$1 + 175 | 0] == 10) {
     HEAP8[373978] = 0;
     HEAP8[178600] = HEAPU8[178600] + 1;
     while (1) {
      if (HEAPU8[178600] >= 22) {
       terminalScroll();
       continue;
      }
      break;
     }
     break label$5;
    }
    label$9: {
     if (HEAP8[$1 + 175 | 0] == 13) {
      HEAP8[373978] = 0;
      break label$9;
     }
     label$11: {
      if (HEAP8[$1 + 175 | 0] == 27) {
       HEAP8[373980] = 27;
       break label$11;
      }
      if (!(HEAP8[$1 + 175 | 0] == 19 | HEAP8[$1 + 175 | 0] == 17)) {
       if (terminalGetGFX($1 + 96 | 0) & 1) {
        HEAP16[$1 + 94 >> 1] = Math_imul(HEAPU8[373978], 6);
        HEAP16[$1 + 92 >> 1] = ((HEAPU8[$1 + 110 | 0] | HEAPU8[$1 + 111 | 0] << 8) + (HEAPU8[178600] << 3) | 0) - 176;
        HEAP32[$1 + 88 >> 2] = HEAPU8[$1 + 113 | 0] | HEAPU8[$1 + 114 | 0] << 8 | (HEAPU8[$1 + 115 | 0] << 16 | HEAPU8[$1 + 116 | 0] << 24);
        HEAP32[$1 + 84 >> 2] = HEAPU8[$1 + 117 | 0] | HEAPU8[$1 + 118 | 0] << 8 | (HEAPU8[$1 + 119 | 0] << 16 | HEAPU8[$1 + 120 | 0] << 24);
        $0 = HEAPU8[349444] | HEAPU8[349445] << 8;
        HEAP8[$1 + 113 | 0] = $0;
        HEAP8[$1 + 114 | 0] = $0 >>> 8;
        HEAP8[$1 + 115 | 0] = $0 >>> 16;
        HEAP8[$1 + 116 | 0] = $0 >>> 24;
        $0 = HEAPU8[349446] | HEAPU8[349447] << 8;
        HEAP8[$1 + 117 | 0] = $0;
        HEAP8[$1 + 118 | 0] = $0 >>> 8;
        HEAP8[$1 + 119 | 0] = $0 >>> 16;
        HEAP8[$1 + 120 | 0] = $0 >>> 24;
        graphicsDrawChar6x8($1 + 96 | 0, HEAP16[$1 + 94 >> 1], HEAP16[$1 + 92 >> 1], HEAP8[$1 + 175 | 0], 1, 1, 1);
        $0 = HEAP32[$1 + 88 >> 2];
        HEAP8[$1 + 113 | 0] = $0;
        HEAP8[$1 + 114 | 0] = $0 >>> 8;
        HEAP8[$1 + 115 | 0] = $0 >>> 16;
        HEAP8[$1 + 116 | 0] = $0 >>> 24;
        $0 = HEAP32[$1 + 84 >> 2];
        HEAP8[$1 + 117 | 0] = $0;
        HEAP8[$1 + 118 | 0] = $0 >>> 8;
        HEAP8[$1 + 119 | 0] = $0 >>> 16;
        HEAP8[$1 + 120 | 0] = $0 >>> 24;
        terminalSetGFX($1 + 96 | 0);
       }
       if (HEAPU8[373978] < 255) {
        HEAP8[373978] = HEAPU8[373978] + 1;
       }
      }
     }
    }
   }
   break label$1;
  }
  label$17: {
   if (HEAP8[373980] == 27) {
    if (HEAP8[373981] == 91) {
     if (HEAP8[373982] == 63) {
      if (HEAP8[373983] == 55) {
       terminalControlCharsReset();
       break label$17;
      }
      label$22: {
       if (HEAP8[$1 + 175 | 0] == 55) {
        HEAP8[373983] = 55;
        break label$22;
       }
       terminalControlCharsReset();
      }
      break label$17;
     }
     label$24: {
      if (HEAP8[$1 + 175 | 0] == 63) {
       HEAP8[373982] = 63;
       break label$24;
      }
      terminalControlCharsReset();
      label$26: {
       label$27: {
        switch (HEAP8[$1 + 175 | 0] - 65 | 0) {
        case 0:
         if (HEAPU8[178600]) {
          HEAP8[178600] = HEAPU8[178600] - 1;
         }
         break label$26;

        case 1:
         HEAP8[178600] = HEAPU8[178600] + 1;
         while (1) {
          if (HEAPU8[178600] >= 22) {
           terminalScroll();
           continue;
          }
          break;
         }
         ;
         break label$26;

        case 2:
         if (HEAPU8[373978] < 255) {
          HEAP8[373978] = HEAPU8[373978] + 1;
         }
         break label$26;

        case 3:
         if (HEAPU8[373978]) {
          HEAP8[373978] = HEAPU8[373978] - 1;
         }
         break label$26;

        case 9:
         break label$27;

        default:
         break label$26;
        }
       }
       if (terminalGetGFX($1 + 8 | 0) & 1) {
        HEAP16[$1 + 6 >> 1] = Math_imul(HEAPU8[373978], 6);
        HEAP16[$1 + 4 >> 1] = ((HEAPU8[$1 + 22 | 0] | HEAPU8[$1 + 23 | 0] << 8) + (HEAPU8[178600] << 3) | 0) - 176;
        if ((HEAPU8[$1 + 16 | 0] | HEAPU8[$1 + 17 | 0] << 8 | (HEAPU8[$1 + 18 | 0] << 16 | HEAPU8[$1 + 19 | 0] << 24)) & 16) {
         $0 = HEAPU8[$1 + 22 | 0] | HEAPU8[$1 + 23 | 0] << 8;
        } else {
         $0 = HEAPU8[$1 + 20 | 0] | HEAPU8[$1 + 21 | 0] << 8;
        }
        HEAP16[$1 + 2 >> 1] = $0;
        if ((HEAPU8[$1 + 16 | 0] | HEAPU8[$1 + 17 | 0] << 8 | (HEAPU8[$1 + 18 | 0] << 16 | HEAPU8[$1 + 19 | 0] << 24)) & 16) {
         $0 = HEAPU8[$1 + 20 | 0] | HEAPU8[$1 + 21 | 0] << 8;
        } else {
         $0 = HEAPU8[$1 + 22 | 0] | HEAPU8[$1 + 23 | 0] << 8;
        }
        HEAP16[$1 >> 1] = $0;
        graphicsFillRect($1 + 8 | 0, HEAP16[$1 + 6 >> 1], HEAP16[$1 + 4 >> 1], HEAP16[$1 + 2 >> 1] - 1 | 0, HEAP16[$1 + 4 >> 1] + 7 | 0, 0);
        graphicsFillRect($1 + 8 | 0, 0, HEAP16[$1 + 4 >> 1] + 8 | 0, HEAP16[$1 + 2 >> 1] - 1 | 0, HEAP16[$1 >> 1] - 1 | 0, 0);
        terminalSetGFX($1 + 8 | 0);
       }
      }
     }
     break label$17;
    }
    label$42: {
     if (HEAP8[$1 + 175 | 0] == 91) {
      HEAP8[373981] = 91;
      break label$42;
     }
     terminalControlCharsReset();
    }
    break label$17;
   }
   terminalControlCharsReset();
  }
 }
 __stack_pointer = $1 + 176 | 0;
}

function jswrap_storage_open($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 256 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 248 >> 2] = $0;
 HEAP32[$2 + 244 >> 2] = $1;
 HEAP8[$2 + 243 | 0] = 0;
 label$1: {
  label$2: {
   if (jsvIsStringEqual(HEAP32[$2 + 244 >> 2], 116640) & 1) {
    HEAP8[$2 + 243 | 0] = 114;
    break label$2;
   }
   label$4: {
    if (jsvIsStringEqual(HEAP32[$2 + 244 >> 2], 112181) & 1) {
     HEAP8[$2 + 243 | 0] = 119;
     break label$4;
    }
    label$6: {
     if (jsvIsStringEqual(HEAP32[$2 + 244 >> 2], 123005) & 1) {
      HEAP8[$2 + 243 | 0] = 97;
      break label$6;
     }
     HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 244 >> 2];
     jsExceptionHere(1, 118335, $2 - -64 | 0);
     HEAP32[$2 + 252 >> 2] = 0;
     break label$1;
    }
   }
  }
  HEAP32[$2 + 236 >> 2] = jspNewObject(0, 120126);
  if (!HEAP32[$2 + 236 >> 2]) {
   HEAP32[$2 + 252 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 232 >> 2] = 1;
  HEAP32[$2 + 228 >> 2] = jsvNewFromStringVar(HEAP32[$2 + 248 >> 2], 0, 28);
  jsfNameFromVar($2 + 200 | 0, HEAP32[$2 + 228 >> 2]);
  HEAP32[$2 + 196 >> 2] = 27;
  while (1) {
   $0 = 0;
   $0 = HEAP32[$2 + 196 >> 2] ? !HEAP8[(HEAP32[$2 + 196 >> 2] + $2 | 0) + 199 | 0] : $0;
   if ($0) {
    HEAP32[$2 + 196 >> 2] = HEAP32[$2 + 196 >> 2] - 1;
    continue;
   }
   break;
  }
  HEAP8[HEAP32[$2 + 196 >> 2] + ($2 + 200 | 0) | 0] = HEAP32[$2 + 232 >> 2];
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 120049, HEAP32[$2 + 228 >> 2]);
  HEAP32[$2 + 192 >> 2] = 0;
  HEAP32[$2 + 56 >> 2] = HEAP32[$2 + 224 >> 2];
  $0 = HEAP32[$2 + 220 >> 2];
  $1 = HEAP32[$2 + 216 >> 2];
  HEAP32[$2 + 48 >> 2] = $1;
  HEAP32[$2 + 52 >> 2] = $0;
  $1 = HEAP32[$2 + 212 >> 2];
  $0 = HEAP32[$2 + 208 >> 2];
  HEAP32[$2 + 40 >> 2] = $0;
  HEAP32[$2 + 44 >> 2] = $1;
  $0 = HEAP32[$2 + 204 >> 2];
  $1 = HEAP32[$2 + 200 >> 2];
  HEAP32[$2 + 32 >> 2] = $1;
  HEAP32[$2 + 36 >> 2] = $0;
  HEAP32[$2 + 156 >> 2] = jsfFindFile($2 + 32 | 0, $2 + 160 | 0);
  if (HEAP32[$2 + 156 >> 2] ? HEAP8[$2 + 243 | 0] == 119 : 0) {
   jswrap_storagefile_erase(HEAP32[$2 + 236 >> 2]);
   HEAP32[$2 + 156 >> 2] = 0;
  }
  label$14: {
   if (HEAP32[$2 + 156 >> 2]) {
    $0 = jsfGetFileSize($2 + 160 | 0);
    break label$14;
   }
   $0 = 0;
  }
  HEAP32[$2 + 152 >> 2] = $0;
  if (HEAP8[$2 + 243 | 0] == 97) {
   HEAP8[$2 + 151 | 0] = 255;
   if (HEAP32[$2 + 156 >> 2]) {
    jshFlashRead($2 + 151 | 0, (HEAP32[$2 + 156 >> 2] + jsfGetFileSize($2 + 160 | 0) | 0) - 1 | 0, 1);
   }
   while (1) {
    $0 = 0;
    label$19: {
     if (!HEAP32[$2 + 156 >> 2]) {
      break label$19;
     }
     $0 = 0;
     if (HEAPU8[$2 + 151 | 0] == 255) {
      break label$19;
     }
     $0 = HEAP32[$2 + 232 >> 2] < 255;
    }
    if ($0) {
     HEAP32[$2 + 232 >> 2] = HEAP32[$2 + 232 >> 2] + 1;
     HEAP8[HEAP32[$2 + 196 >> 2] + ($2 + 200 | 0) | 0] = HEAP32[$2 + 232 >> 2];
     HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 224 >> 2];
     $1 = HEAP32[$2 + 220 >> 2];
     $0 = HEAP32[$2 + 216 >> 2];
     HEAP32[$2 + 16 >> 2] = $0;
     HEAP32[$2 + 20 >> 2] = $1;
     $0 = HEAP32[$2 + 212 >> 2];
     $1 = HEAP32[$2 + 208 >> 2];
     HEAP32[$2 + 8 >> 2] = $1;
     HEAP32[$2 + 12 >> 2] = $0;
     $1 = HEAP32[$2 + 204 >> 2];
     $0 = HEAP32[$2 + 200 >> 2];
     HEAP32[$2 >> 2] = $0;
     HEAP32[$2 + 4 >> 2] = $1;
     HEAP32[$2 + 156 >> 2] = jsfFindFile($2, $2 + 160 | 0);
     label$21: {
      if (HEAP32[$2 + 156 >> 2]) {
       HEAP32[$2 + 152 >> 2] = jsfGetFileSize($2 + 160 | 0);
       jshFlashRead($2 + 151 | 0, (HEAP32[$2 + 156 >> 2] + HEAP32[$2 + 152 >> 2] | 0) - 1 | 0, 1);
       break label$21;
      }
      HEAP32[$2 + 152 >> 2] = 0;
     }
     continue;
    }
    break;
   }
   if (HEAP32[$2 + 156 >> 2]) {
    HEAP8[$2 + 79 | 0] = 0;
    while (1) {
     label$25: {
      if (!((HEAPU8[$2 + 79 | 0] ^ -1) & 1)) {
       break label$25;
      }
      HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 152 >> 2] - HEAP32[$2 + 192 >> 2];
      if (HEAP32[$2 + 72 >> 2] <= 0) {
       HEAP8[$2 + 79 | 0] = 1;
       break label$25;
      }
      if (HEAP32[$2 + 72 >> 2] > 64) {
       HEAP32[$2 + 72 >> 2] = 64;
      }
      jshFlashRead($2 + 80 | 0, HEAP32[$2 + 156 >> 2] + HEAP32[$2 + 192 >> 2] | 0, HEAP32[$2 + 72 >> 2]);
      HEAP32[$2 + 68 >> 2] = 0;
      while (1) {
       if (HEAP32[$2 + 68 >> 2] < HEAP32[$2 + 72 >> 2]) {
        if (HEAP8[HEAP32[$2 + 68 >> 2] + ($2 + 80 | 0) | 0] == -1) {
         HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 68 >> 2];
         HEAP8[$2 + 79 | 0] = 1;
        } else {
         HEAP32[$2 + 68 >> 2] = HEAP32[$2 + 68 >> 2] + 1;
         continue;
        }
       }
       break;
      }
      HEAP32[$2 + 192 >> 2] = HEAP32[$2 + 72 >> 2] + HEAP32[$2 + 192 >> 2];
      continue;
     }
     break;
    }
   }
  }
  label$32: {
   if (HEAP8[$2 + 243 | 0] != 114) {
    break label$32;
   }
  }
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 118134, jsvNewFromInteger(HEAP32[$2 + 232 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 113219, jsvNewFromInteger(HEAP32[$2 + 192 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 236 >> 2], 120456, jsvNewFromInteger(HEAP8[$2 + 243 | 0]));
  HEAP32[$2 + 252 >> 2] = HEAP32[$2 + 236 >> 2];
 }
 __stack_pointer = $2 + 256 | 0;
 return HEAP32[$2 + 252 >> 2];
}

function tflite__reference_ops__MaxPool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = Math_fround(0);
 $5 = __stack_pointer - 144 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 140 >> 2] = $0;
 HEAP32[$5 + 136 >> 2] = $1;
 HEAP32[$5 + 132 >> 2] = $2;
 HEAP32[$5 + 128 >> 2] = $3;
 HEAP32[$5 + 124 >> 2] = $4;
 label$1: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$5 + 136 >> 2]) | 0) != 4) {
   break label$1;
  }
 }
 label$2: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$5 + 128 >> 2]) | 0) != 4) {
   break label$2;
  }
 }
 HEAP32[$5 + 120 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 0, HEAP32[$5 + 128 >> 2], 0);
 HEAP32[$5 + 116 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 136 >> 2], 3, HEAP32[$5 + 128 >> 2], 3);
 HEAP32[$5 + 112 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 1);
 HEAP32[$5 + 108 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 136 >> 2], 2);
 HEAP32[$5 + 104 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 1);
 HEAP32[$5 + 100 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$5 + 128 >> 2], 2);
 HEAP32[$5 + 96 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 12 >> 2];
 HEAP32[$5 + 92 >> 2] = HEAP32[HEAP32[$5 + 140 >> 2] + 16 >> 2];
 HEAP32[$5 + 88 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 88 >> 2] < HEAP32[$5 + 120 >> 2]) {
   HEAP32[$5 + 84 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 84 >> 2] < HEAP32[$5 + 104 >> 2]) {
     HEAP32[$5 + 80 >> 2] = 0;
     while (1) {
      if (HEAP32[$5 + 80 >> 2] < HEAP32[$5 + 100 >> 2]) {
       HEAP32[$5 + 76 >> 2] = 0;
       while (1) {
        if (HEAP32[$5 + 76 >> 2] < HEAP32[$5 + 116 >> 2]) {
         HEAP32[$5 + 72 >> 2] = Math_imul(HEAP32[$5 + 80 >> 2], HEAP32[$5 + 92 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 2 >> 1];
         HEAP32[$5 + 68 >> 2] = Math_imul(HEAP32[$5 + 84 >> 2], HEAP32[$5 + 96 >> 2]) - HEAP16[HEAP32[$5 + 140 >> 2] + 4 >> 1];
         HEAP32[$5 + 60 >> 2] = 0;
         HEAP32[$5 + 56 >> 2] = 0 - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 64 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 60 | 0, $5 + 56 | 0) >> 2];
         $0 = HEAP32[$5 + 140 >> 2];
         HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 108 >> 2] - HEAP32[$5 + 72 >> 2];
         HEAP32[$5 + 52 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0 + 24 | 0, $5 + 48 | 0) >> 2];
         HEAP32[$5 + 40 >> 2] = 0;
         HEAP32[$5 + 36 >> 2] = 0 - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 44 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 40 | 0, $5 + 36 | 0) >> 2];
         $0 = HEAP32[$5 + 140 >> 2];
         HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 112 >> 2] - HEAP32[$5 + 68 >> 2];
         HEAP32[$5 + 32 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0 + 20 | 0, $5 + 28 | 0) >> 2];
         HEAPF32[$5 + 24 >> 2] = std____2__numeric_limits_float___lowest_28_29();
         HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 44 >> 2];
         while (1) {
          if (HEAP32[$5 + 20 >> 2] < HEAP32[$5 + 32 >> 2]) {
           HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 64 >> 2];
           while (1) {
            if (HEAP32[$5 + 16 >> 2] < HEAP32[$5 + 52 >> 2]) {
             HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 72 >> 2] + HEAP32[$5 + 16 >> 2];
             HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 68 >> 2] + HEAP32[$5 + 20 >> 2];
             HEAPF32[$5 + 24 >> 2] = HEAPF32[float_20const__20std____2__max_float__28float_20const__2c_20float_20const__29($5 + 24 | 0, HEAP32[$5 + 132 >> 2] + (tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 136 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 8 >> 2], HEAP32[$5 + 12 >> 2], HEAP32[$5 + 76 >> 2]) << 2) | 0) >> 2];
             HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 1;
             continue;
            }
            break;
           }
           HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 20 >> 2] + 1;
           continue;
          }
          break;
         }
         $6 = float_20tflite__ActivationFunctionWithMinMax_float__28float_2c_20float_2c_20float_29(HEAPF32[$5 + 24 >> 2], HEAPF32[HEAP32[$5 + 140 >> 2] + 36 >> 2], HEAPF32[HEAP32[$5 + 140 >> 2] + 40 >> 2]);
         HEAPF32[HEAP32[$5 + 124 >> 2] + (tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$5 + 128 >> 2], HEAP32[$5 + 88 >> 2], HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2], HEAP32[$5 + 76 >> 2]) << 2) >> 2] = $6;
         HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 76 >> 2] + 1;
         continue;
        }
        break;
       }
       HEAP32[$5 + 80 >> 2] = HEAP32[$5 + 80 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$5 + 84 >> 2] = HEAP32[$5 + 84 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 88 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 + 144 | 0;
}

function jsvGarbageCollect() {
 var $0 = 0, $1 = 0, $2 = 0;
 $0 = __stack_pointer - 48 | 0;
 __stack_pointer = $0;
 label$1: {
  if (HEAPU8[178978]) {
   HEAP32[$0 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP8[178978] = 2;
  HEAP16[$0 + 42 >> 1] = 1;
  while (1) {
   if (HEAPU16[$0 + 42 >> 1] <= 12e3) {
    HEAP32[$0 + 36 >> 2] = jsvGetAddressOf(HEAPU16[$0 + 42 >> 1]);
    $1 = HEAP32[$0 + 36 >> 2];
    if ((HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & 63) {
     $1 = HEAP32[$0 + 36 >> 2];
     $2 = HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8 | 256;
     HEAP8[$1 + 12 | 0] = $2;
     HEAP8[$1 + 13 | 0] = $2 >>> 8;
     if (jsvIsFlatString(HEAP32[$0 + 36 >> 2]) & 1) {
      HEAP16[$0 + 42 >> 1] = HEAPU16[$0 + 42 >> 1] + jsvGetFlatStringBlocks(HEAP32[$0 + 36 >> 2]);
     }
    }
    HEAP16[$0 + 42 >> 1] = HEAPU16[$0 + 42 >> 1] + 1;
    continue;
   }
   break;
  }
  HEAP16[$0 + 42 >> 1] = 1;
  while (1) {
   if (HEAPU16[$0 + 42 >> 1] <= 12e3) {
    HEAP32[$0 + 32 >> 2] = jsvGetAddressOf(HEAPU16[$0 + 42 >> 1]);
    $1 = HEAP32[$0 + 32 >> 2];
    label$9: {
     if (!((HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & 256)) {
      break label$9;
     }
     if (!(jsvGetLocks(HEAP32[$0 + 32 >> 2]) & 255)) {
      break label$9;
     }
     if (!(jsvGarbageCollectMarkUsed(HEAP32[$0 + 32 >> 2]) & 1)) {
      HEAP8[178978] = 0;
      HEAP32[$0 + 44 >> 2] = 0;
      break label$1;
     }
    }
    if (jsvIsFlatString(HEAP32[$0 + 32 >> 2]) & 1) {
     HEAP16[$0 + 42 >> 1] = HEAPU16[$0 + 42 >> 1] + jsvGetFlatStringBlocks(HEAP32[$0 + 32 >> 2]);
    }
    HEAP16[$0 + 42 >> 1] = HEAPU16[$0 + 42 >> 1] + 1;
    continue;
   }
   break;
  }
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP16[89490] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP16[$0 + 42 >> 1] = 1;
  while (1) {
   if (HEAPU16[$0 + 42 >> 1] <= 12e3) {
    HEAP32[$0 + 20 >> 2] = jsvGetAddressOf(HEAPU16[$0 + 42 >> 1]);
    $1 = HEAP32[$0 + 20 >> 2];
    label$14: {
     if ((HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & 256) {
      if (jsvIsFlatString(HEAP32[$0 + 20 >> 2]) & 1) {
       HEAP32[$0 + 16 >> 2] = jsvGetFlatStringBlocks(HEAP32[$0 + 20 >> 2]);
       HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 16 >> 2] + HEAP32[$0 + 28 >> 2];
       $1 = HEAP32[$0 + 20 >> 2];
       HEAP8[$1 + 12 | 0] = 0;
       HEAP8[$1 + 13 | 0] = 0;
       label$17: {
        if (HEAP32[$0 + 24 >> 2]) {
         jsvSetNextSibling(HEAP32[$0 + 24 >> 2], HEAPU16[$0 + 42 >> 1]);
         break label$17;
        }
        HEAP16[89490] = HEAPU16[$0 + 42 >> 1];
       }
       HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 20 >> 2];
       while (1) {
        $1 = HEAP32[$0 + 16 >> 2];
        HEAP32[$0 + 16 >> 2] = $1 - 1;
        if ($1) {
         HEAP16[$0 + 42 >> 1] = HEAPU16[$0 + 42 >> 1] + 1;
         HEAP32[$0 + 20 >> 2] = jsvGetAddressOf(HEAPU16[$0 + 42 >> 1]);
         $1 = HEAP32[$0 + 20 >> 2];
         HEAP8[$1 + 12 | 0] = 0;
         HEAP8[$1 + 13 | 0] = 0;
         label$21: {
          if (HEAP32[$0 + 24 >> 2]) {
           jsvSetNextSibling(HEAP32[$0 + 24 >> 2], HEAPU16[$0 + 42 >> 1]);
           break label$21;
          }
          HEAP16[89490] = HEAPU16[$0 + 42 >> 1];
         }
         HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 20 >> 2];
         continue;
        }
        break;
       }
       break label$14;
      }
      if (jsvHasSingleChild(HEAP32[$0 + 20 >> 2]) & 1) {
       HEAP16[$0 + 14 >> 1] = jsvGetFirstChild(HEAP32[$0 + 20 >> 2]);
       if (HEAPU16[$0 + 14 >> 1]) {
        HEAP32[$0 + 8 >> 2] = jsvGetAddressOf(HEAPU16[$0 + 14 >> 1]);
        $1 = HEAP32[$0 + 8 >> 2];
        label$25: {
         if (!(HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8)) {
          break label$25;
         }
         $1 = HEAP32[$0 + 8 >> 2];
         if ((HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & 256) {
          break label$25;
         }
         jsvUnRef(HEAP32[$0 + 8 >> 2]);
        }
       }
      }
      $1 = HEAP32[$0 + 20 >> 2];
      HEAP8[$1 + 12 | 0] = 0;
      HEAP8[$1 + 13 | 0] = 0;
      label$26: {
       if (HEAP32[$0 + 24 >> 2]) {
        jsvSetNextSibling(HEAP32[$0 + 24 >> 2], HEAPU16[$0 + 42 >> 1]);
        break label$26;
       }
       HEAP16[89490] = HEAPU16[$0 + 42 >> 1];
      }
      HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 20 >> 2];
      HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 28 >> 2] + 1;
      break label$14;
     }
     label$28: {
      if (jsvIsFlatString(HEAP32[$0 + 20 >> 2]) & 1) {
       HEAP16[$0 + 42 >> 1] = HEAPU16[$0 + 42 >> 1] + jsvGetFlatStringBlocks(HEAP32[$0 + 20 >> 2]);
       break label$28;
      }
      $1 = HEAP32[$0 + 20 >> 2];
      if (!(HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8)) {
       label$31: {
        if (HEAP32[$0 + 24 >> 2]) {
         jsvSetNextSibling(HEAP32[$0 + 24 >> 2], HEAPU16[$0 + 42 >> 1]);
         break label$31;
        }
        HEAP16[89490] = HEAPU16[$0 + 42 >> 1];
       }
       HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 20 >> 2];
      }
     }
    }
    HEAP16[$0 + 42 >> 1] = HEAPU16[$0 + 42 >> 1] + 1;
    continue;
   }
   break;
  }
  if (HEAP32[$0 + 24 >> 2]) {
   jsvSetNextSibling(HEAP32[$0 + 24 >> 2], 0);
  }
  HEAP8[178978] = 0;
  HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 28 >> 2];
 }
 __stack_pointer = $0 + 48 | 0;
 return HEAP32[$0 + 44 >> 2];
}

function tflite__ops__micro__depthwise_conv__Prepare_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 160 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 152 >> 2] = $0;
 HEAP32[$2 + 148 >> 2] = $1;
 label$1: {
  if (!HEAP32[HEAP32[$2 + 148 >> 2] + 8 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if (!HEAP32[HEAP32[$2 + 148 >> 2] + 12 >> 2]) {
   break label$2;
  }
 }
 HEAP32[$2 + 144 >> 2] = HEAP32[HEAP32[$2 + 148 >> 2] + 12 >> 2];
 HEAP32[$2 + 140 >> 2] = HEAP32[HEAP32[$2 + 148 >> 2] + 8 >> 2];
 HEAP32[$2 + 136 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 152 >> 2], HEAP32[$2 + 148 >> 2], 0);
 HEAP32[$2 + 132 >> 2] = tflite__GetInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 152 >> 2], HEAP32[$2 + 148 >> 2], 0);
 HEAP32[$2 + 128 >> 2] = tflite__GetInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 152 >> 2], HEAP32[$2 + 148 >> 2], 1);
 HEAP32[$2 + 124 >> 2] = HEAP32[HEAP32[$2 + 132 >> 2] + 28 >> 2];
 HEAP32[$2 + 120 >> 2] = tflite__SizeOfDimension_28TfLiteTensor_20const__2c_20int_29(HEAP32[$2 + 132 >> 2], 2);
 HEAP32[$2 + 116 >> 2] = tflite__SizeOfDimension_28TfLiteTensor_20const__2c_20int_29(HEAP32[$2 + 132 >> 2], 1);
 HEAP32[$2 + 112 >> 2] = tflite__SizeOfDimension_28TfLiteTensor_20const__2c_20int_29(HEAP32[$2 + 128 >> 2], 2);
 HEAP32[$2 + 108 >> 2] = tflite__SizeOfDimension_28TfLiteTensor_20const__2c_20int_29(HEAP32[$2 + 128 >> 2], 1);
 HEAP32[$2 + 104 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 128 >> 2] + 20 >> 2] + 16 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$2 + 152 >> 2] + 56 >> 2]](HEAP32[$2 + 152 >> 2], HEAP32[$2 + 104 >> 2] << 2) | 0;
 HEAP32[HEAP32[$2 + 140 >> 2] + 36 >> 2] = $0;
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$2 + 152 >> 2] + 56 >> 2]](HEAP32[$2 + 152 >> 2], HEAP32[$2 + 104 >> 2] << 2) | 0;
 HEAP32[HEAP32[$2 + 140 >> 2] + 40 >> 2] = $0;
 label$3: {
  if (HEAP32[HEAP32[$2 + 132 >> 2] + 28 >> 2] == 9) {
   if (HEAP32[HEAP32[$2 + 128 >> 2] >> 2] != 1) {
    $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 152 >> 2];
    $3 = HEAP32[HEAP32[$2 + 128 >> 2] >> 2];
    HEAP32[$2 + 12 >> 2] = 1;
    HEAP32[$2 + 8 >> 2] = $3;
    HEAP32[$2 + 4 >> 2] = 117441;
    HEAP32[$2 >> 2] = 119955;
    FUNCTION_TABLE[$0 | 0]($1, 143069, $2);
    HEAP32[$2 + 156 >> 2] = 1;
    break label$3;
   }
   HEAP32[$2 + 100 >> 2] = HEAP32[HEAP32[$2 + 128 >> 2] + 4 >> 2];
   if (!HEAP32[$2 + 100 >> 2]) {
    $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 152 >> 2];
    HEAP32[$2 + 80 >> 2] = 117421;
    FUNCTION_TABLE[$0 | 0]($1, 127303, $2 + 80 | 0);
    HEAP32[$2 + 156 >> 2] = 1;
    break label$3;
   }
   if (!HEAP32[HEAP32[$2 + 100 >> 2] >> 2]) {
    $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 152 >> 2];
    HEAP32[$2 + 64 >> 2] = 120229;
    FUNCTION_TABLE[$0 | 0]($1, 127303, $2 - -64 | 0);
    HEAP32[$2 + 156 >> 2] = 1;
    break label$3;
   }
   if (!HEAP32[HEAP32[$2 + 100 >> 2] + 4 >> 2]) {
    $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 152 >> 2];
    HEAP32[$2 + 48 >> 2] = 112825;
    FUNCTION_TABLE[$0 | 0]($1, 127303, $2 + 48 | 0);
    HEAP32[$2 + 156 >> 2] = 1;
    break label$3;
   }
   if (!(HEAP32[HEAP32[HEAP32[$2 + 100 >> 2] >> 2] >> 2] == 1 | HEAP32[HEAP32[HEAP32[$2 + 100 >> 2] >> 2] >> 2] == HEAP32[HEAP32[HEAP32[$2 + 128 >> 2] + 20 >> 2] + 16 >> 2])) {
    $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 152 >> 2];
    HEAP32[$2 + 32 >> 2] = 123231;
    FUNCTION_TABLE[$0 | 0]($1, 127303, $2 + 32 | 0);
    HEAP32[$2 + 156 >> 2] = 1;
    break label$3;
   }
   if (HEAP32[HEAP32[HEAP32[$2 + 100 >> 2] >> 2] >> 2] != HEAP32[HEAP32[HEAP32[$2 + 100 >> 2] + 4 >> 2] >> 2]) {
    $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 152 >> 2];
    $3 = HEAP32[HEAP32[HEAP32[$2 + 100 >> 2] >> 2] >> 2];
    HEAP32[$2 + 28 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 100 >> 2] + 4 >> 2] >> 2];
    HEAP32[$2 + 24 >> 2] = $3;
    HEAP32[$2 + 20 >> 2] = 119199;
    HEAP32[$2 + 16 >> 2] = 119257;
    FUNCTION_TABLE[$0 | 0]($1, 143069, $2 + 16 | 0);
    HEAP32[$2 + 156 >> 2] = 1;
    break label$3;
   }
  }
  HEAP32[$2 + 96 >> 2] = tflite__ops__micro__depthwise_conv___28anonymous_20namespace_29__CalculateOpData_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteDepthwiseConvParams__2c_20int_2c_20int_2c_20int_2c_20int_2c_20TfLiteType_2c_20tflite__ops__micro__depthwise_conv___28anonymous_20namespace_29__OpData__29(HEAP32[$2 + 152 >> 2], HEAP32[$2 + 148 >> 2], HEAP32[$2 + 144 >> 2], HEAP32[$2 + 120 >> 2], HEAP32[$2 + 116 >> 2], HEAP32[$2 + 112 >> 2], HEAP32[$2 + 108 >> 2], HEAP32[$2 + 124 >> 2], HEAP32[$2 + 140 >> 2]);
  if (HEAP32[$2 + 96 >> 2]) {
   HEAP32[$2 + 156 >> 2] = HEAP32[$2 + 96 >> 2];
   break label$3;
  }
  HEAP32[HEAP32[$2 + 140 >> 2] + 16 >> 2] = HEAP32[HEAP32[$2 + 132 >> 2] + 12 >> 2];
  HEAP32[HEAP32[$2 + 140 >> 2] + 20 >> 2] = HEAP32[HEAP32[$2 + 128 >> 2] + 12 >> 2];
  HEAP32[HEAP32[$2 + 140 >> 2] + 24 >> 2] = HEAP32[HEAP32[$2 + 136 >> 2] + 12 >> 2];
  HEAP32[$2 + 156 >> 2] = 0;
 }
 __stack_pointer = $2 + 160 | 0;
 return HEAP32[$2 + 156 >> 2];
}

function graphicsDrawLineAA($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 112 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 108 >> 2] = $0;
 HEAP32[$5 + 104 >> 2] = $1;
 HEAP32[$5 + 100 >> 2] = $2;
 HEAP32[$5 + 96 >> 2] = $3;
 HEAP32[$5 + 92 >> 2] = $4;
 graphicsToDeviceCoordinates16x(HEAP32[$5 + 108 >> 2], $5 + 104 | 0, $5 + 100 | 0);
 graphicsToDeviceCoordinates16x(HEAP32[$5 + 108 >> 2], $5 + 96 | 0, $5 + 92 | 0);
 HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 104 >> 2] << 4;
 HEAP32[$5 + 84 >> 2] = HEAP32[$5 + 100 >> 2] << 4;
 HEAP32[$5 + 80 >> 2] = HEAP32[$5 + 96 >> 2] << 4;
 HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 92 >> 2] << 4;
 HEAP8[$5 + 75 | 0] = (abs(HEAP32[$5 + 76 >> 2] - HEAP32[$5 + 84 >> 2] | 0) | 0) > (abs(HEAP32[$5 + 80 >> 2] - HEAP32[$5 + 88 >> 2] | 0) | 0);
 if (HEAP8[$5 + 75 | 0] & 1) {
  HEAP32[$5 + 68 >> 2] = HEAP32[$5 + 88 >> 2];
  HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 84 >> 2];
  HEAP32[$5 + 84 >> 2] = HEAP32[$5 + 68 >> 2];
  HEAP32[$5 + 68 >> 2] = HEAP32[$5 + 80 >> 2];
  HEAP32[$5 + 80 >> 2] = HEAP32[$5 + 76 >> 2];
  HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 68 >> 2];
 }
 if (HEAP32[$5 + 88 >> 2] > HEAP32[$5 + 80 >> 2]) {
  HEAP32[$5 + 64 >> 2] = HEAP32[$5 + 88 >> 2];
  HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 80 >> 2];
  HEAP32[$5 + 80 >> 2] = HEAP32[$5 + 64 >> 2];
  HEAP32[$5 + 64 >> 2] = HEAP32[$5 + 84 >> 2];
  HEAP32[$5 + 84 >> 2] = HEAP32[$5 + 76 >> 2];
  HEAP32[$5 + 76 >> 2] = HEAP32[$5 + 64 >> 2];
 }
 HEAP32[$5 + 60 >> 2] = HEAP32[$5 + 80 >> 2] - HEAP32[$5 + 88 >> 2];
 HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 76 >> 2] - HEAP32[$5 + 84 >> 2];
 if (HEAP32[$5 + 60 >> 2]) {
  $0 = (HEAP32[$5 + 56 >> 2] << 8) / HEAP32[$5 + 60 >> 2] | 0;
 } else {
  $0 = 256;
 }
 HEAP32[$5 + 52 >> 2] = $0;
 HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 88 >> 2] & -256;
 HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 84 >> 2] + (Math_imul(HEAP32[$5 + 52 >> 2], HEAP32[$5 + 48 >> 2] - HEAP32[$5 + 88 >> 2] | 0) >> 8);
 HEAP32[$5 + 40 >> 2] = 255 - (HEAP32[$5 + 88 >> 2] & 255);
 HEAP32[$5 + 36 >> 2] = HEAP32[$5 + 48 >> 2] >> 8;
 HEAP32[$5 + 32 >> 2] = HEAP32[$5 + 44 >> 2] >> 8;
 HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 44 >> 2] & 255;
 label$5: {
  if (HEAP8[$5 + 75 | 0] & 1) {
   graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 32 >> 2], HEAP32[$5 + 36 >> 2], Math_imul(HEAP32[$5 + 40 >> 2], 256 - HEAP32[$5 + 28 >> 2] | 0) >> 8);
   graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 32 >> 2] + 1 | 0, HEAP32[$5 + 36 >> 2], Math_imul(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 40 >> 2]) >> 8);
   break label$5;
  }
  graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 36 >> 2], HEAP32[$5 + 32 >> 2], Math_imul(HEAP32[$5 + 40 >> 2], 256 - HEAP32[$5 + 28 >> 2] | 0) >> 8);
  graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 36 >> 2], HEAP32[$5 + 32 >> 2] + 1 | 0, Math_imul(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 40 >> 2]) >> 8);
 }
 HEAP32[$5 + 24 >> 2] = HEAP32[$5 + 44 >> 2] + HEAP32[$5 + 52 >> 2];
 HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 80 >> 2] + 256 & -256;
 HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 76 >> 2] + (Math_imul(HEAP32[$5 + 52 >> 2], HEAP32[$5 + 48 >> 2] - HEAP32[$5 + 80 >> 2] | 0) >> 8);
 HEAP32[$5 + 40 >> 2] = HEAP32[$5 + 80 >> 2] + 256 & 255;
 HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 48 >> 2] >> 8;
 HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 44 >> 2] >> 8;
 HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 44 >> 2] & 255;
 label$7: {
  if (HEAP8[$5 + 75 | 0] & 1) {
   graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 20 >> 2], Math_imul(HEAP32[$5 + 40 >> 2], 256 - HEAP32[$5 + 28 >> 2] | 0) >> 8);
   graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 16 >> 2] + 1 | 0, HEAP32[$5 + 20 >> 2], Math_imul(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 40 >> 2]) >> 8);
   break label$7;
  }
  graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], Math_imul(HEAP32[$5 + 40 >> 2], 256 - HEAP32[$5 + 28 >> 2] | 0) >> 8);
  graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2] + 1 | 0, Math_imul(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 40 >> 2]) >> 8);
 }
 HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 36 >> 2] + 1;
 while (1) {
  if (HEAP32[$5 + 12 >> 2] < HEAP32[$5 + 20 >> 2]) {
   HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 24 >> 2] >> 8;
   HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 24 >> 2] & 255;
   label$11: {
    if (HEAP8[$5 + 75 | 0] & 1) {
     graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 8 >> 2], HEAP32[$5 + 12 >> 2], 256 - HEAP32[$5 + 28 >> 2] | 0);
     graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 8 >> 2] + 1 | 0, HEAP32[$5 + 12 >> 2], HEAP32[$5 + 28 >> 2]);
     break label$11;
    }
    graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 12 >> 2], HEAP32[$5 + 8 >> 2], 256 - HEAP32[$5 + 28 >> 2] | 0);
    graphicsSetPixelDeviceBlended(HEAP32[$5 + 108 >> 2], HEAP32[$5 + 12 >> 2], HEAP32[$5 + 8 >> 2] + 1 | 0, HEAP32[$5 + 28 >> 2]);
   }
   HEAP32[$5 + 24 >> 2] = HEAP32[$5 + 52 >> 2] + HEAP32[$5 + 24 >> 2];
   HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 + 112 | 0;
}

function tflite__ops__micro__conv__Prepare_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 160 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 152 >> 2] = $0;
 HEAP32[$2 + 148 >> 2] = $1;
 label$1: {
  if (!HEAP32[HEAP32[$2 + 148 >> 2] + 8 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if (!HEAP32[HEAP32[$2 + 148 >> 2] + 12 >> 2]) {
   break label$2;
  }
 }
 HEAP32[$2 + 144 >> 2] = HEAP32[HEAP32[$2 + 148 >> 2] + 8 >> 2];
 HEAP32[$2 + 140 >> 2] = HEAP32[HEAP32[$2 + 148 >> 2] + 12 >> 2];
 HEAP32[$2 + 136 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 152 >> 2], HEAP32[$2 + 148 >> 2], 0);
 HEAP32[$2 + 132 >> 2] = tflite__GetInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 152 >> 2], HEAP32[$2 + 148 >> 2], 0);
 HEAP32[$2 + 128 >> 2] = tflite__GetInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 152 >> 2], HEAP32[$2 + 148 >> 2], 1);
 HEAP32[$2 + 124 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 132 >> 2] + 20 >> 2] + 12 >> 2];
 HEAP32[$2 + 120 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 132 >> 2] + 20 >> 2] + 8 >> 2];
 HEAP32[$2 + 116 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 128 >> 2] + 20 >> 2] + 12 >> 2];
 HEAP32[$2 + 112 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 128 >> 2] + 20 >> 2] + 8 >> 2];
 HEAP32[$2 + 108 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 136 >> 2] + 20 >> 2] + 12 >> 2];
 HEAP32[$2 + 104 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 136 >> 2] + 20 >> 2] + 8 >> 2];
 HEAP32[$2 + 100 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 128 >> 2] + 20 >> 2] + 4 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$2 + 152 >> 2] + 56 >> 2]](HEAP32[$2 + 152 >> 2], HEAP32[$2 + 100 >> 2] << 2) | 0;
 HEAP32[HEAP32[$2 + 144 >> 2] + 36 >> 2] = $0;
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$2 + 152 >> 2] + 56 >> 2]](HEAP32[$2 + 152 >> 2], HEAP32[$2 + 100 >> 2] << 2) | 0;
 HEAP32[HEAP32[$2 + 144 >> 2] + 40 >> 2] = $0;
 label$3: {
  if (HEAP32[HEAP32[$2 + 132 >> 2] + 28 >> 2] == 9) {
   if (HEAP32[HEAP32[$2 + 128 >> 2] >> 2] != 1) {
    $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 152 >> 2];
    $3 = HEAP32[HEAP32[$2 + 128 >> 2] >> 2];
    HEAP32[$2 + 12 >> 2] = 1;
    HEAP32[$2 + 8 >> 2] = $3;
    HEAP32[$2 + 4 >> 2] = 117441;
    HEAP32[$2 >> 2] = 119955;
    FUNCTION_TABLE[$0 | 0]($1, 143069, $2);
    HEAP32[$2 + 156 >> 2] = 1;
    break label$3;
   }
   HEAP32[$2 + 96 >> 2] = HEAP32[HEAP32[$2 + 128 >> 2] + 4 >> 2];
   if (!HEAP32[$2 + 96 >> 2]) {
    $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 152 >> 2];
    HEAP32[$2 + 80 >> 2] = 117421;
    FUNCTION_TABLE[$0 | 0]($1, 127303, $2 + 80 | 0);
    HEAP32[$2 + 156 >> 2] = 1;
    break label$3;
   }
   if (!HEAP32[HEAP32[$2 + 96 >> 2] >> 2]) {
    $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 152 >> 2];
    HEAP32[$2 + 64 >> 2] = 120229;
    FUNCTION_TABLE[$0 | 0]($1, 127303, $2 - -64 | 0);
    HEAP32[$2 + 156 >> 2] = 1;
    break label$3;
   }
   if (!HEAP32[HEAP32[$2 + 96 >> 2] + 4 >> 2]) {
    $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 152 >> 2];
    HEAP32[$2 + 48 >> 2] = 112825;
    FUNCTION_TABLE[$0 | 0]($1, 127303, $2 + 48 | 0);
    HEAP32[$2 + 156 >> 2] = 1;
    break label$3;
   }
   if (!(HEAP32[HEAP32[HEAP32[$2 + 96 >> 2] >> 2] >> 2] == 1 | HEAP32[HEAP32[HEAP32[$2 + 96 >> 2] >> 2] >> 2] == HEAP32[HEAP32[HEAP32[$2 + 128 >> 2] + 20 >> 2] + 4 >> 2])) {
    $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 152 >> 2];
    HEAP32[$2 + 32 >> 2] = 123110;
    FUNCTION_TABLE[$0 | 0]($1, 127303, $2 + 32 | 0);
    HEAP32[$2 + 156 >> 2] = 1;
    break label$3;
   }
   if (HEAP32[HEAP32[HEAP32[$2 + 96 >> 2] >> 2] >> 2] != HEAP32[HEAP32[HEAP32[$2 + 96 >> 2] + 4 >> 2] >> 2]) {
    $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
    $1 = HEAP32[$2 + 152 >> 2];
    $3 = HEAP32[HEAP32[HEAP32[$2 + 96 >> 2] >> 2] >> 2];
    HEAP32[$2 + 28 >> 2] = HEAP32[HEAP32[HEAP32[$2 + 96 >> 2] + 4 >> 2] >> 2];
    HEAP32[$2 + 24 >> 2] = $3;
    HEAP32[$2 + 20 >> 2] = 119199;
    HEAP32[$2 + 16 >> 2] = 119257;
    FUNCTION_TABLE[$0 | 0]($1, 143069, $2 + 16 | 0);
    HEAP32[$2 + 156 >> 2] = 1;
    break label$3;
   }
  }
  HEAP32[$2 + 92 >> 2] = tflite__ops__micro__conv__CalculateOpData_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteConvParams_20const__2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20TfLiteType_2c_20tflite__ops__micro__conv__OpData__29(HEAP32[$2 + 152 >> 2], HEAP32[$2 + 148 >> 2], HEAP32[$2 + 140 >> 2], HEAP32[$2 + 124 >> 2], HEAP32[$2 + 120 >> 2], HEAP32[$2 + 116 >> 2], HEAP32[$2 + 112 >> 2], HEAP32[$2 + 108 >> 2], HEAP32[$2 + 104 >> 2], HEAP32[HEAP32[$2 + 132 >> 2] + 28 >> 2], HEAP32[$2 + 144 >> 2]);
  if (HEAP32[$2 + 92 >> 2]) {
   HEAP32[$2 + 156 >> 2] = HEAP32[$2 + 92 >> 2];
   break label$3;
  }
  HEAP32[HEAP32[$2 + 144 >> 2] + 16 >> 2] = HEAP32[HEAP32[$2 + 132 >> 2] + 12 >> 2];
  HEAP32[HEAP32[$2 + 144 >> 2] + 20 >> 2] = HEAP32[HEAP32[$2 + 128 >> 2] + 12 >> 2];
  HEAP32[HEAP32[$2 + 144 >> 2] + 24 >> 2] = HEAP32[HEAP32[$2 + 136 >> 2] + 12 >> 2];
  HEAP32[$2 + 156 >> 2] = 0;
 }
 __stack_pointer = $2 + 160 | 0;
 return HEAP32[$2 + 156 >> 2];
}

function utilTimerInsertTask($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 label$1: {
  if (utilTimerIsFull() & 1) {
   HEAP8[$3 + 31 | 0] = 0;
   break label$1;
  }
  if (!(HEAP8[349028] & 1)) {
   jshInterruptOff();
  }
  if (HEAP32[$3 + 20 >> 2]) {
   $0 = HEAP32[$3 + 24 >> 2];
   $1 = (HEAP32[HEAP32[$3 + 20 >> 2] >> 2] - HEAP32[87360] | 0) + (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) | 0;
   HEAP8[$0 | 0] = $1;
   HEAP8[$0 + 1 | 0] = $1 >>> 8;
   HEAP8[$0 + 2 | 0] = $1 >>> 16;
   HEAP8[$0 + 3 | 0] = $1 >>> 24;
  }
  HEAP8[$3 + 19 | 0] = HEAPU8[349026];
  while (1) {
   $0 = 0;
   if (HEAPU8[$3 + 19 | 0] != HEAPU8[349025]) {
    $0 = Math_imul(HEAPU8[$3 + 19 | 0], 25) + 349040 | 0;
    $1 = HEAP32[$3 + 24 >> 2];
    $0 = (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) < (HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24));
   }
   if ($0) {
    HEAP8[$3 + 19 | 0] = HEAPU8[$3 + 19 | 0] + 1 & 15;
    continue;
   }
   break;
  }
  HEAP8[$3 + 18 | 0] = HEAPU8[$3 + 19 | 0] == HEAPU8[349026];
  HEAP32[$3 + 12 >> 2] = HEAPU8[349025];
  while (1) {
   if (HEAP32[$3 + 12 >> 2] != HEAPU8[$3 + 19 | 0]) {
    HEAP8[$3 + 11 | 0] = HEAP32[$3 + 12 >> 2] + 15 & 15;
    $2 = Math_imul(HEAPU8[$3 + 11 | 0], 25) + 349040 | 0;
    $0 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
    $1 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
    $4 = $0;
    $5 = Math_imul(HEAP32[$3 + 12 >> 2], 25) + 349040 | 0;
    $0 = $5;
    HEAP8[$0 | 0] = $4;
    HEAP8[$0 + 1 | 0] = $4 >>> 8;
    HEAP8[$0 + 2 | 0] = $4 >>> 16;
    HEAP8[$0 + 3 | 0] = $4 >>> 24;
    HEAP8[$0 + 4 | 0] = $1;
    HEAP8[$0 + 5 | 0] = $1 >>> 8;
    HEAP8[$0 + 6 | 0] = $1 >>> 16;
    HEAP8[$0 + 7 | 0] = $1 >>> 24;
    HEAP8[$0 + 24 | 0] = HEAPU8[$2 + 24 | 0];
    $0 = HEAPU8[$2 + 20 | 0] | HEAPU8[$2 + 21 | 0] << 8 | (HEAPU8[$2 + 22 | 0] << 16 | HEAPU8[$2 + 23 | 0] << 24);
    $1 = HEAPU8[$2 + 16 | 0] | HEAPU8[$2 + 17 | 0] << 8 | (HEAPU8[$2 + 18 | 0] << 16 | HEAPU8[$2 + 19 | 0] << 24);
    $4 = $1;
    $1 = $5;
    HEAP8[$1 + 16 | 0] = $4;
    HEAP8[$1 + 17 | 0] = $4 >>> 8;
    HEAP8[$1 + 18 | 0] = $4 >>> 16;
    HEAP8[$1 + 19 | 0] = $4 >>> 24;
    HEAP8[$1 + 20 | 0] = $0;
    HEAP8[$1 + 21 | 0] = $0 >>> 8;
    HEAP8[$1 + 22 | 0] = $0 >>> 16;
    HEAP8[$1 + 23 | 0] = $0 >>> 24;
    $1 = HEAPU8[$2 + 12 | 0] | HEAPU8[$2 + 13 | 0] << 8 | (HEAPU8[$2 + 14 | 0] << 16 | HEAPU8[$2 + 15 | 0] << 24);
    $0 = HEAPU8[$2 + 8 | 0] | HEAPU8[$2 + 9 | 0] << 8 | (HEAPU8[$2 + 10 | 0] << 16 | HEAPU8[$2 + 11 | 0] << 24);
    $4 = $0;
    $0 = $5;
    HEAP8[$0 + 8 | 0] = $4;
    HEAP8[$0 + 9 | 0] = $4 >>> 8;
    HEAP8[$0 + 10 | 0] = $4 >>> 16;
    HEAP8[$0 + 11 | 0] = $4 >>> 24;
    HEAP8[$0 + 12 | 0] = $1;
    HEAP8[$0 + 13 | 0] = $1 >>> 8;
    HEAP8[$0 + 14 | 0] = $1 >>> 16;
    HEAP8[$0 + 15 | 0] = $1 >>> 24;
    HEAP32[$3 + 12 >> 2] = HEAPU8[$3 + 11 | 0];
    continue;
   }
   break;
  }
  $2 = HEAP32[$3 + 24 >> 2];
  $1 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
  $0 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
  $4 = $1;
  $5 = Math_imul(HEAPU8[$3 + 19 | 0], 25) + 349040 | 0;
  $1 = $5;
  HEAP8[$1 | 0] = $4;
  HEAP8[$1 + 1 | 0] = $4 >>> 8;
  HEAP8[$1 + 2 | 0] = $4 >>> 16;
  HEAP8[$1 + 3 | 0] = $4 >>> 24;
  HEAP8[$1 + 4 | 0] = $0;
  HEAP8[$1 + 5 | 0] = $0 >>> 8;
  HEAP8[$1 + 6 | 0] = $0 >>> 16;
  HEAP8[$1 + 7 | 0] = $0 >>> 24;
  HEAP8[$1 + 24 | 0] = HEAPU8[$2 + 24 | 0];
  $1 = HEAPU8[$2 + 20 | 0] | HEAPU8[$2 + 21 | 0] << 8 | (HEAPU8[$2 + 22 | 0] << 16 | HEAPU8[$2 + 23 | 0] << 24);
  $0 = HEAPU8[$2 + 16 | 0] | HEAPU8[$2 + 17 | 0] << 8 | (HEAPU8[$2 + 18 | 0] << 16 | HEAPU8[$2 + 19 | 0] << 24);
  $4 = $0;
  $0 = $5;
  HEAP8[$0 + 16 | 0] = $4;
  HEAP8[$0 + 17 | 0] = $4 >>> 8;
  HEAP8[$0 + 18 | 0] = $4 >>> 16;
  HEAP8[$0 + 19 | 0] = $4 >>> 24;
  HEAP8[$0 + 20 | 0] = $1;
  HEAP8[$0 + 21 | 0] = $1 >>> 8;
  HEAP8[$0 + 22 | 0] = $1 >>> 16;
  HEAP8[$0 + 23 | 0] = $1 >>> 24;
  $0 = HEAPU8[$2 + 12 | 0] | HEAPU8[$2 + 13 | 0] << 8 | (HEAPU8[$2 + 14 | 0] << 16 | HEAPU8[$2 + 15 | 0] << 24);
  $1 = HEAPU8[$2 + 8 | 0] | HEAPU8[$2 + 9 | 0] << 8 | (HEAPU8[$2 + 10 | 0] << 16 | HEAPU8[$2 + 11 | 0] << 24);
  $4 = $1;
  $1 = $5;
  HEAP8[$1 + 8 | 0] = $4;
  HEAP8[$1 + 9 | 0] = $4 >>> 8;
  HEAP8[$1 + 10 | 0] = $4 >>> 16;
  HEAP8[$1 + 11 | 0] = $4 >>> 24;
  HEAP8[$1 + 12 | 0] = $0;
  HEAP8[$1 + 13 | 0] = $0 >>> 8;
  HEAP8[$1 + 14 | 0] = $0 >>> 16;
  HEAP8[$1 + 15 | 0] = $0 >>> 24;
  HEAP8[349025] = HEAPU8[349025] + 1 & 15;
  if (!(HEAP8[$3 + 18 | 0] & 1 ? 0 : HEAP8[349027] & 1)) {
   HEAP8[349027] = 1;
   jstRestartUtilTimer();
  }
  if (!(HEAP8[349028] & 1)) {
   jshInterruptOn();
  }
  HEAP8[$3 + 31 | 0] = 1;
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP8[$3 + 31 | 0] & 1;
}

function _jslNewTokenisedStringFromLexer($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 128 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 124 >> 2] = $0;
 HEAP32[$4 + 120 >> 2] = $1;
 HEAP32[$4 + 116 >> 2] = $2;
 HEAP32[$4 + 112 >> 2] = $3;
 jslSeekToP(HEAP32[$4 + 116 >> 2]);
 HEAP8[$4 + 71 | 0] = HEAPU8[HEAP32[$4 + 116 >> 2] + 36 | 0];
 if (HEAP32[$4 + 124 >> 2]) {
  jsvStringIteratorClone($4 + 72 | 0, HEAP32[$4 + 116 >> 2]);
 }
 HEAP32[$4 + 64 >> 2] = 0;
 HEAP32[$4 + 60 >> 2] = 0;
 HEAP32[$4 + 56 >> 2] = 0;
 while (1) {
  $0 = 0;
  if (HEAP16[HEAP32[44743] + 2 >> 1]) {
   $0 = jsvStringIteratorGetIndex(HEAP32[44743] + 88 | 0) >>> 0 <= HEAP32[$4 + 112 >> 2] + 1 >>> 0;
  }
  if ($0) {
   if (jslPreserveSpaceBetweenTokens(HEAP32[$4 + 60 >> 2], HEAP16[HEAP32[44743] + 2 >> 1]) & 1) {
    HEAP32[$4 + 64 >> 2] = HEAP32[$4 + 64 >> 2] + 1;
    if (HEAP32[$4 + 124 >> 2]) {
     jsvStringIteratorSetCharAndNext(HEAP32[$4 + 124 >> 2], 32);
    }
   }
   label$7: {
    label$8: {
     if (HEAP16[HEAP32[44743] + 2 >> 1] != 131) {
      break label$8;
     }
     $0 = jslGetTokenLength();
     HEAP32[$4 + 52 >> 2] = $0;
     if (!$0) {
      break label$8;
     }
     HEAP32[$4 + 48 >> 2] = 0;
     jslSkipWhiteSpace();
     if (!(HEAP32[$4 + 56 >> 2] != 2 | HEAP8[HEAP32[44743]] != 41)) {
      HEAP32[$4 + 44 >> 2] = jslGetTokenValueAsVar();
      HEAP32[$4 + 48 >> 2] = jswrap_atob(HEAP32[$4 + 44 >> 2]);
      jsvUnLock(HEAP32[$4 + 44 >> 2]);
      HEAP32[$4 + 52 >> 2] = jsvGetStringLength(HEAP32[$4 + 48 >> 2]);
      HEAP32[$4 + 64 >> 2] = HEAP32[$4 + 64 >> 2] - 5;
      if (HEAP32[$4 + 124 >> 2]) {
       jsvStringIteratorGoto(HEAP32[$4 + 124 >> 2], HEAP32[$4 + 120 >> 2], HEAP32[$4 + 64 >> 2]);
      }
      HEAP8[$4 + 71 | 0] = HEAPU8[HEAP32[44743]];
      jslGetNextToken();
     }
     HEAP32[$4 + 56 >> 2] = 0;
     if (HEAP32[$4 + 124 >> 2]) {
      jsvStringIteratorSetCharAndNext(HEAP32[$4 + 124 >> 2], (HEAPU32[$4 + 52 >> 2] < 256 ? 209 : 210) << 24 >> 24);
      jsvStringIteratorSetCharAndNext(HEAP32[$4 + 124 >> 2], (HEAP32[$4 + 52 >> 2] & 255) << 24 >> 24);
      if (HEAPU32[$4 + 52 >> 2] >= 256) {
       jsvStringIteratorSetCharAndNext(HEAP32[$4 + 124 >> 2], HEAP32[$4 + 52 >> 2] >>> 8 << 24 >> 24);
      }
      if (!HEAP32[$4 + 48 >> 2]) {
       HEAP32[$4 + 48 >> 2] = jslGetTokenValueAsVar();
      }
      jsvStringIteratorNew($4 + 8 | 0, HEAP32[$4 + 48 >> 2], 0);
      while (1) {
       if (jsvStringIteratorHasChar($4 + 8 | 0) & 1) {
        jsvStringIteratorSetCharAndNext(HEAP32[$4 + 124 >> 2], jsvStringIteratorGetCharAndNext($4 + 8 | 0) << 24 >> 24);
        continue;
       }
       break;
      }
      jsvStringIteratorFree($4 + 8 | 0);
     }
     jsvUnLock(HEAP32[$4 + 48 >> 2]);
     HEAP32[$4 + 64 >> 2] = HEAP32[$4 + 64 >> 2] + (HEAP32[$4 + 52 >> 2] + (HEAPU32[$4 + 52 >> 2] < 256 ? 2 : 3) | 0);
     break label$7;
    }
    label$16: {
     label$17: {
      label$18: {
       if (HEAP16[HEAP32[44743] + 2 >> 1] == 128 | HEAP16[HEAP32[44743] + 2 >> 1] == 129 | (HEAP16[HEAP32[44743] + 2 >> 1] == 130 | HEAP16[HEAP32[44743] + 2 >> 1] == 131)) {
        break label$18;
       }
       if (HEAP16[HEAP32[44743] + 2 >> 1] == 133) {
        break label$18;
       }
       if (HEAP16[HEAP32[44743] + 2 >> 1] != 135) {
        break label$17;
       }
      }
      label$19: {
       label$20: {
        if (HEAP16[HEAP32[44743] + 2 >> 1] != 128) {
         break label$20;
        }
        if (strcmp(jslGetTokenValueAsString(), 122878)) {
         break label$20;
        }
        HEAP32[$4 + 56 >> 2] = 1;
        break label$19;
       }
       HEAP32[$4 + 56 >> 2] = 0;
      }
      HEAP32[$4 + 64 >> 2] = (jsvStringIteratorGetIndex(HEAP32[44743] + 88 | 0) - (HEAP32[HEAP32[44743] + 4 >> 2] + 1 | 0) | 0) + HEAP32[$4 + 64 >> 2];
      if (HEAP32[$4 + 124 >> 2]) {
       jsvStringIteratorSetCharAndNext(HEAP32[$4 + 124 >> 2], HEAP8[$4 + 71 | 0]);
       while (1) {
        if (jsvStringIteratorGetIndex($4 + 72 | 0) + 1 >>> 0 < jsvStringIteratorGetIndex(HEAP32[44743] + 88 | 0) >>> 0) {
         jsvStringIteratorSetCharAndNext(HEAP32[$4 + 124 >> 2], jsvStringIteratorGetCharAndNext($4 + 72 | 0) << 24 >> 24);
         continue;
        }
        break;
       }
      }
      break label$16;
     }
     label$24: {
      if (!(HEAP32[$4 + 56 >> 2] != 1 | HEAP16[HEAP32[44743] + 2 >> 1] != 40)) {
       HEAP32[$4 + 56 >> 2] = 2;
       break label$24;
      }
      HEAP32[$4 + 56 >> 2] = 0;
     }
     if (HEAP32[$4 + 124 >> 2]) {
      jsvStringIteratorSetCharAndNext(HEAP32[$4 + 124 >> 2], HEAPU16[HEAP32[44743] + 2 >> 1] << 24 >> 24);
     }
     HEAP32[$4 + 64 >> 2] = HEAP32[$4 + 64 >> 2] + 1;
    }
   }
   HEAP32[$4 + 60 >> 2] = HEAP16[HEAP32[44743] + 2 >> 1];
   jslSkipWhiteSpace();
   if (HEAP32[$4 + 124 >> 2]) {
    jsvStringIteratorFree($4 + 72 | 0);
    jsvStringIteratorClone($4 + 72 | 0, HEAP32[44743] + 88 | 0);
   }
   HEAP8[$4 + 71 | 0] = HEAPU8[HEAP32[44743]];
   jslGetNextToken();
   continue;
  }
  break;
 }
 if (HEAP32[$4 + 124 >> 2]) {
  jsvStringIteratorFree($4 + 72 | 0);
 }
 __stack_pointer = $4 + 128 | 0;
 return HEAP32[$4 + 64 >> 2];
}

function jsvDefragment() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $0 = __stack_pointer - 560 | 0;
 __stack_pointer = $0;
 jsvGarbageCollect();
 jshInterruptOff();
 HEAP32[$0 + 556 >> 2] = 256;
 HEAP32[$0 + 552 >> 2] = $0;
 memset($0, 0, 512);
 HEAP32[$0 + 548 >> 2] = 0;
 HEAP32[$0 + 544 >> 2] = 0;
 while (1) {
  if (HEAPU32[$0 + 544 >> 2] < jsvGetMemoryTotal() >>> 0) {
   HEAP16[$0 + 542 >> 1] = HEAP32[$0 + 544 >> 2] + 1;
   HEAP32[$0 + 536 >> 2] = _jsvGetAddressOf(HEAPU16[$0 + 542 >> 1]);
   $1 = HEAP32[$0 + 536 >> 2];
   if ((HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & 63) {
    label$4: {
     if (jsvIsFlatString(HEAP32[$0 + 536 >> 2]) & 1) {
      HEAP32[$0 + 544 >> 2] = jsvGetFlatStringBlocks(HEAP32[$0 + 536 >> 2]) + HEAP32[$0 + 544 >> 2];
      break label$4;
     }
     if (!(jsvGetLocks(HEAP32[$0 + 536 >> 2]) & 255)) {
      HEAP16[(HEAP32[$0 + 548 >> 2] << 1) + $0 >> 1] = HEAPU16[$0 + 542 >> 1];
      HEAP32[$0 + 548 >> 2] = HEAP32[$0 + 548 >> 2] + 1 & 255;
     }
    }
   }
   HEAP32[$0 + 544 >> 2] = HEAP32[$0 + 544 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$0 + 548 >> 2] = HEAP32[$0 + 548 >> 2] - 1;
 if (HEAP32[$0 + 548 >> 2] < 0) {
  HEAP32[$0 + 548 >> 2] = HEAP32[$0 + 548 >> 2] + 256;
 }
 while (1) {
  label$9: {
   if (!HEAPU16[(HEAP32[$0 + 548 >> 2] << 1) + $0 >> 1]) {
    break label$9;
   }
   HEAP16[$0 + 534 >> 1] = HEAPU16[(HEAP32[$0 + 548 >> 2] << 1) + $0 >> 1];
   HEAP16[$0 + 532 >> 1] = HEAPU16[89490];
   if (!HEAPU16[$0 + 532 >> 1] | HEAPU16[$0 + 534 >> 1] < HEAPU16[$0 + 532 >> 1]) {
    break label$9;
   }
   HEAP32[$0 + 528 >> 2] = _jsvGetAddressOf(HEAPU16[$0 + 534 >> 1]);
   HEAP32[$0 + 524 >> 2] = _jsvGetAddressOf(HEAPU16[$0 + 532 >> 1]);
   HEAP16[89490] = jsvGetNextSibling(HEAP32[$0 + 524 >> 2]);
   $2 = HEAP32[$0 + 528 >> 2];
   $1 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
   $3 = HEAP32[$0 + 524 >> 2];
   $4 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
   HEAP8[$3 | 0] = $4;
   HEAP8[$3 + 1 | 0] = $4 >>> 8;
   HEAP8[$3 + 2 | 0] = $4 >>> 16;
   HEAP8[$3 + 3 | 0] = $4 >>> 24;
   HEAP8[$3 + 4 | 0] = $1;
   HEAP8[$3 + 5 | 0] = $1 >>> 8;
   HEAP8[$3 + 6 | 0] = $1 >>> 16;
   HEAP8[$3 + 7 | 0] = $1 >>> 24;
   $1 = HEAPU8[$2 + 12 | 0] | HEAPU8[$2 + 13 | 0] << 8;
   HEAP8[$3 + 12 | 0] = $1;
   HEAP8[$3 + 13 | 0] = $1 >>> 8;
   $1 = HEAPU8[$2 + 8 | 0] | HEAPU8[$2 + 9 | 0] << 8 | (HEAPU8[$2 + 10 | 0] << 16 | HEAPU8[$2 + 11 | 0] << 24);
   HEAP8[$3 + 8 | 0] = $1;
   HEAP8[$3 + 9 | 0] = $1 >>> 8;
   HEAP8[$3 + 10 | 0] = $1 >>> 16;
   HEAP8[$3 + 11 | 0] = $1 >>> 24;
   $1 = HEAP32[$0 + 528 >> 2];
   HEAP8[$1 + 12 | 0] = 0;
   HEAP8[$1 + 13 | 0] = 0;
   HEAP32[$0 + 520 >> 2] = 0;
   while (1) {
    if (HEAPU32[$0 + 520 >> 2] < jsvGetMemoryTotal() >>> 0) {
     HEAP16[$0 + 518 >> 1] = HEAP32[$0 + 520 >> 2] + 1;
     HEAP32[$0 + 512 >> 2] = _jsvGetAddressOf(HEAPU16[$0 + 518 >> 1]);
     $1 = HEAP32[$0 + 512 >> 2];
     if ((HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & 63) {
      label$14: {
       if (jsvIsFlatString(HEAP32[$0 + 512 >> 2]) & 1) {
        HEAP32[$0 + 520 >> 2] = jsvGetFlatStringBlocks(HEAP32[$0 + 512 >> 2]) + HEAP32[$0 + 520 >> 2];
        break label$14;
       }
       if (jsvHasSingleChild(HEAP32[$0 + 512 >> 2]) & 1) {
        if ((jsvGetFirstChild(HEAP32[$0 + 512 >> 2]) & 65535) == HEAPU16[$0 + 534 >> 1]) {
         jsvSetFirstChild(HEAP32[$0 + 512 >> 2], HEAPU16[$0 + 532 >> 1]);
        }
       }
       if (jsvHasStringExt(HEAP32[$0 + 512 >> 2]) & 1) {
        if ((jsvGetLastChild(HEAP32[$0 + 512 >> 2]) & 65535) == HEAPU16[$0 + 534 >> 1]) {
         jsvSetLastChild(HEAP32[$0 + 512 >> 2], HEAPU16[$0 + 532 >> 1]);
        }
       }
       if (jsvHasChildren(HEAP32[$0 + 512 >> 2]) & 1) {
        if ((jsvGetFirstChild(HEAP32[$0 + 512 >> 2]) & 65535) == HEAPU16[$0 + 534 >> 1]) {
         jsvSetFirstChild(HEAP32[$0 + 512 >> 2], HEAPU16[$0 + 532 >> 1]);
        }
        if ((jsvGetLastChild(HEAP32[$0 + 512 >> 2]) & 65535) == HEAPU16[$0 + 534 >> 1]) {
         jsvSetLastChild(HEAP32[$0 + 512 >> 2], HEAPU16[$0 + 532 >> 1]);
        }
       }
       if (jsvIsName(HEAP32[$0 + 512 >> 2]) & 1) {
        if ((jsvGetNextSibling(HEAP32[$0 + 512 >> 2]) & 65535) == HEAPU16[$0 + 534 >> 1]) {
         jsvSetNextSibling(HEAP32[$0 + 512 >> 2], HEAPU16[$0 + 532 >> 1]);
        }
        if ((jsvGetPrevSibling(HEAP32[$0 + 512 >> 2]) & 65535) == HEAPU16[$0 + 534 >> 1]) {
         jsvSetPrevSibling(HEAP32[$0 + 512 >> 2], HEAPU16[$0 + 532 >> 1]);
        }
       }
      }
     }
     HEAP32[$0 + 520 >> 2] = HEAP32[$0 + 520 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP16[(HEAP32[$0 + 548 >> 2] << 1) + $0 >> 1] = 0;
   HEAP32[$0 + 548 >> 2] = HEAP32[$0 + 548 >> 2] - 1;
   if (HEAP32[$0 + 548 >> 2] < 0) {
    HEAP32[$0 + 548 >> 2] = HEAP32[$0 + 548 >> 2] + 256;
   }
   jshKickWatchDog();
   jshKickSoftWatchDog();
   continue;
  }
  break;
 }
 jsvCreateEmptyVarList();
 jshInterruptOn();
 $0 = HEAP32[$0 + 552 >> 2];
 __stack_pointer = $0 + 560 | 0;
}

function jslLexString() {
 var $0 = 0, $1 = 0, $2 = 0;
 $0 = __stack_pointer - 80 | 0;
 __stack_pointer = $0;
 HEAP8[$0 + 79 | 0] = HEAPU8[HEAP32[44743]];
 HEAP32[$0 + 52 >> 2] = 0;
 label$1: {
  if ((HEAP32[86758] & 63) == 1) {
   $1 = jsvNewFromEmptyString();
   HEAP32[HEAP32[44743] + 76 >> 2] = $1;
   if (!HEAP32[HEAP32[44743] + 76 >> 2]) {
    HEAP16[HEAP32[44743] + 2 >> 1] = 0;
    break label$1;
   }
   jsvStringIteratorNew($0 + 40 | 0, HEAP32[HEAP32[44743] + 76 >> 2], 0);
  }
  jslGetNextCh();
  HEAP8[$0 + 39 | 0] = HEAPU8[$0 + 79 | 0];
  HEAP32[$0 + 32 >> 2] = 0;
  while (1) {
   $1 = 0;
   if (HEAP8[HEAP32[44743]]) {
    $1 = 1;
    $1 = HEAP8[HEAP32[44743]] == HEAP8[$0 + 79 | 0] ? HEAP32[$0 + 32 >> 2] != 0 : $1;
   }
   label$7: {
    if (!($1 & 1)) {
     break label$7;
    }
    if (HEAP8[$0 + 79 | 0] == 96) {
     if (!(HEAP8[HEAP32[44743]] != 123 | (HEAP32[$0 + 32 >> 2] ? 0 : HEAP8[$0 + 39 | 0] != 36))) {
      HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 32 >> 2] + 1;
     }
     if (!(!HEAP32[$0 + 32 >> 2] | HEAP8[HEAP32[44743]] != 125)) {
      HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 32 >> 2] - 1;
     }
    }
    label$12: {
     if (HEAP8[HEAP32[44743]] == 92) {
      jslGetNextCh();
      HEAP8[$0 + 31 | 0] = HEAPU8[HEAP32[44743]];
      label$14: {
       label$15: {
        switch (HEAP8[HEAP32[44743]] - 98 | 0) {
        case 12:
         HEAP8[$0 + 31 | 0] = 10;
         jslGetNextCh();
         break label$14;

        case 0:
         HEAP8[$0 + 31 | 0] = 8;
         jslGetNextCh();
         break label$14;

        case 4:
         HEAP8[$0 + 31 | 0] = 12;
         jslGetNextCh();
         break label$14;

        case 16:
         HEAP8[$0 + 31 | 0] = 13;
         jslGetNextCh();
         break label$14;

        case 18:
         HEAP8[$0 + 31 | 0] = 9;
         jslGetNextCh();
         break label$14;

        case 20:
         HEAP8[$0 + 31 | 0] = 11;
         jslGetNextCh();
         break label$14;

        case 19:
        case 22:
         HEAP8[$0 + 25 | 0] = HEAP8[HEAP32[44743]] == 117;
         jslGetNextCh();
         HEAP32[$0 + 20 >> 2] = HEAP8[$0 + 25 | 0] & 1 ? 4 : 2;
         HEAP32[$0 + 16 >> 2] = 0;
         while (1) {
          label$24: {
           $1 = HEAP32[$0 + 20 >> 2];
           HEAP32[$0 + 20 >> 2] = $1 - 1;
           if (!$1) {
            break label$24;
           }
           label$25: {
            if (HEAPU8[HEAP32[44743]]) {
             if (isHexadecimal(HEAP8[HEAP32[44743]]) & 1) {
              break label$25;
             }
            }
            jsExceptionHere(1, 120492, 0);
            break label$24;
           }
           $2 = HEAPU8[HEAP32[44743]];
           $1 = HEAP32[$0 + 16 >> 2];
           HEAP32[$0 + 16 >> 2] = $1 + 1;
           HEAP8[($0 + 26 | 0) + $1 | 0] = $2;
           jslGetNextCh();
           continue;
          }
          break;
         }
         ;
         HEAP8[HEAP32[$0 + 16 >> 2] + ($0 + 26 | 0) | 0] = 0;
         $1 = stringToIntWithRadix($0 + 26 | 0, 16, 0, 0);
         HEAP32[$0 + 12 >> 2] = $1;
         HEAP8[$0 + 31 | 0] = HEAP32[$0 + 12 >> 2];
         break label$14;

        default:
         break label$15;
        }
       }
       label$27: {
        if (!(HEAP8[HEAP32[44743]] < 48 | HEAP8[HEAP32[44743]] > 55)) {
         HEAP8[$0 + 8 | 0] = HEAPU8[147308];
         HEAP32[$0 + 4 >> 2] = HEAPU8[147304] | HEAPU8[147305] << 8 | (HEAPU8[147306] << 16 | HEAPU8[147307] << 24);
         HEAP8[$0 + 5 | 0] = HEAPU8[HEAP32[44743]];
         HEAP32[$0 >> 2] = 2;
         jslGetNextCh();
         if (!(HEAP8[HEAP32[44743]] < 48 | HEAP8[HEAP32[44743]] > 55)) {
          $2 = HEAPU8[HEAP32[44743]];
          $1 = HEAP32[$0 >> 2];
          HEAP32[$0 >> 2] = $1 + 1;
          HEAP8[($0 + 4 | 0) + $1 | 0] = $2;
          jslGetNextCh();
          if (!(HEAP8[HEAP32[44743]] < 48 | HEAP8[HEAP32[44743]] > 55)) {
           $2 = HEAPU8[HEAP32[44743]];
           $1 = HEAP32[$0 >> 2];
           HEAP32[$0 >> 2] = $1 + 1;
           HEAP8[($0 + 4 | 0) + $1 | 0] = $2;
           jslGetNextCh();
          }
         }
         HEAP8[HEAP32[$0 >> 2] + ($0 + 4 | 0) | 0] = 0;
         $1 = stringToInt($0 + 4 | 0);
         HEAP8[$0 + 31 | 0] = $1;
         break label$27;
        }
        jslGetNextCh();
       }
      }
      HEAP8[$0 + 39 | 0] = HEAPU8[$0 + 31 | 0];
      jsvStringIteratorAppend($0 + 40 | 0, HEAP8[$0 + 31 | 0]);
      break label$12;
     }
     if (!(HEAP8[$0 + 79 | 0] == 96 | HEAP8[HEAP32[44743]] != 10)) {
      break label$7;
     }
     jsvStringIteratorAppend($0 + 40 | 0, HEAP8[HEAP32[44743]]);
     HEAP8[$0 + 39 | 0] = HEAPU8[HEAP32[44743]];
     jslGetNextCh();
    }
    continue;
   }
   break;
  }
  jsvStringIteratorFree($0 + 40 | 0);
  label$32: {
   if (HEAP8[$0 + 79 | 0] == 96) {
    HEAP16[HEAP32[44743] + 2 >> 1] = 133;
    break label$32;
   }
   HEAP16[HEAP32[44743] + 2 >> 1] = 131;
  }
  if (HEAP8[HEAP32[44743]] != HEAP8[$0 + 79 | 0]) {
   $1 = HEAP32[44743];
   HEAP16[$1 + 2 >> 1] = HEAPU16[$1 + 2 >> 1] + 1;
  }
  jslGetNextCh();
 }
 __stack_pointer = $0 + 80 | 0;
}

function jspeFactorFunctionCall() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 80 | 0;
 __stack_pointer = $0;
 HEAP8[$0 + 75 | 0] = 0;
 label$1: {
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 184) {
   jslGetNextToken();
   HEAP8[$0 + 75 | 0] = 1;
   if (HEAP16[HEAP32[44743] + 2 >> 1] == 184) {
    jsExceptionHere(1, 121003, 0);
    jspSetError(0);
    HEAP32[$0 + 76 >> 2] = 0;
    break label$1;
   }
  }
  HEAP32[$0 + 68 >> 2] = 0;
  HEAP32[$0 + 64 >> 2] = 0;
  HEAP8[$0 + 63 | 0] = 0;
  label$4: {
   if (HEAP16[HEAP32[44743] + 2 >> 1] == 196) {
    jslGetNextToken();
    label$6: {
     if (jsvIsObject(HEAP32[86756]) & 1) {
      label$8: {
       if (!(!HEAP32[86757] | HEAP16[HEAP32[44743] + 2 >> 1] != 40)) {
        HEAP32[$0 + 56 >> 2] = jsvObjectGetChildIfExists(HEAP32[86757], 119810);
        break label$8;
       }
       HEAP32[$0 + 56 >> 2] = jsvObjectGetChildIfExists(HEAP32[86756], 123007);
      }
      label$10: {
       if (jsvIsObject(HEAP32[$0 + 56 >> 2]) & 1) {
        $1 = jsvObjectGetChildIfExists(HEAP32[$0 + 56 >> 2], 123007);
        break label$10;
       }
       $1 = 0;
      }
      HEAP32[$0 + 52 >> 2] = $1;
      jsvUnLock(HEAP32[$0 + 56 >> 2]);
      if (!HEAP32[$0 + 52 >> 2]) {
       jsExceptionHere(2, 115146, 0);
       HEAP32[$0 + 76 >> 2] = 0;
       break label$1;
      }
      label$13: {
       if (HEAP16[HEAP32[44743] + 2 >> 1] == 40) {
        HEAP32[$0 + 48 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 52 >> 2], 116071);
        jsvUnLock(HEAP32[$0 + 52 >> 2]);
        HEAP32[86757] = HEAP32[$0 + 48 >> 2];
        HEAP8[$0 + 63 | 0] = 1;
        HEAP32[$0 + 64 >> 2] = HEAP32[$0 + 48 >> 2];
        break label$13;
       }
       HEAP32[$0 + 64 >> 2] = HEAP32[$0 + 52 >> 2];
      }
      break label$6;
     }
     label$15: {
      if (jsvIsFunction(HEAP32[86756]) & 1) {
       HEAP32[$0 + 44 >> 2] = jsvObjectGetChildIfExists(HEAP32[86756], 119810);
       label$17: {
        if (jsvIsObject(HEAP32[$0 + 44 >> 2]) & 1) {
         $1 = jsvObjectGetChildIfExists(HEAP32[$0 + 44 >> 2], 123007);
         break label$17;
        }
        $1 = 0;
       }
       HEAP32[$0 + 40 >> 2] = $1;
       jsvUnLock(HEAP32[$0 + 44 >> 2]);
       if (!HEAP32[$0 + 40 >> 2]) {
        jsExceptionHere(2, 115146, 0);
        HEAP32[$0 + 76 >> 2] = 0;
        break label$1;
       }
       HEAP32[$0 + 36 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 40 >> 2], 116071);
       jsvUnLock(HEAP32[$0 + 40 >> 2]);
       HEAP32[$0 + 64 >> 2] = HEAP32[$0 + 36 >> 2];
       break label$15;
      }
      jsExceptionHere(2, 115146, 0);
      HEAP32[$0 + 76 >> 2] = 0;
      break label$1;
     }
    }
    HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 64 >> 2];
    HEAP32[$0 + 64 >> 2] = jspeFactorMember(HEAP32[$0 + 64 >> 2], $0 + 68 | 0);
    if (!(HEAP32[$0 + 68 >> 2] != HEAP32[$0 + 32 >> 2] ? HEAP32[$0 + 68 >> 2] : 0)) {
     jsvUnLock(HEAP32[$0 + 68 >> 2]);
     HEAP32[$0 + 68 >> 2] = jsvLockAgain(HEAP32[86756]);
    }
    break label$4;
   }
   HEAP32[$0 + 64 >> 2] = jspeFactorMember(jspeFactor(), $0 + 68 | 0);
  }
  while (1) {
   label$23: {
    if (HEAP16[HEAP32[44743] + 2 >> 1] != 40) {
     $1 = 0;
     if (!(HEAP8[$0 + 75 | 0] & 1)) {
      break label$23;
     }
     $1 = 0;
     if ((HEAP32[86758] & 63) != 1) {
      break label$23;
     }
    }
    $1 = jspIsInterrupted() ^ -1;
   }
   if ($1 & 1) {
    HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 64 >> 2];
    HEAP32[$0 + 24 >> 2] = jsvSkipName(HEAP32[$0 + 28 >> 2]);
    label$26: {
     if (!(!(HEAP8[$0 + 75 | 0] & 1) | (HEAP32[86758] & 63) != 1)) {
      HEAP8[$0 + 23 | 0] = HEAP16[HEAP32[44743] + 2 >> 1] == 40;
      HEAP32[$0 + 64 >> 2] = jspeConstruct(HEAP32[$0 + 24 >> 2], HEAP32[$0 + 28 >> 2], HEAP8[$0 + 23 | 0] & 1);
      HEAP8[$0 + 75 | 0] = 0;
      break label$26;
     }
     HEAP32[$0 + 64 >> 2] = jspeFunctionCall(HEAP32[$0 + 24 >> 2], HEAP32[$0 + 28 >> 2], HEAP32[$0 + 68 >> 2], 1, 0, 0);
    }
    jsvUnLock3(HEAP32[$0 + 28 >> 2], HEAP32[$0 + 24 >> 2], HEAP32[$0 + 68 >> 2]);
    HEAP32[$0 + 68 >> 2] = 0;
    HEAP32[$0 + 64 >> 2] = jspeFactorMember(HEAP32[$0 + 64 >> 2], $0 + 68 | 0);
    continue;
   }
   break;
  }
  if (HEAP8[$0 + 63 | 0] & 1) {
   HEAP32[86757] = 0;
  }
  label$29: {
   if (!HEAP32[$0 + 68 >> 2]) {
    break label$29;
   }
   if (!(jsvIsBasicName(HEAP32[$0 + 64 >> 2]) & 1)) {
    break label$29;
   }
   if (jsvIsNewChild(HEAP32[$0 + 64 >> 2]) & 1) {
    break label$29;
   }
   HEAP32[$0 + 16 >> 2] = jsvLockSafe(jsvGetFirstChild(HEAP32[$0 + 64 >> 2]) & 65535);
   if (jsvIsGetterOrSetter(HEAP32[$0 + 16 >> 2]) & 1) {
    HEAP32[$0 + 12 >> 2] = jsvCopyNameOnly(HEAP32[$0 + 64 >> 2], 0, 1);
    HEAP32[$0 + 8 >> 2] = jsvCreateNewChild(HEAP32[$0 + 68 >> 2], HEAP32[$0 + 12 >> 2], HEAP32[$0 + 16 >> 2]);
    jsvUnLock2(HEAP32[$0 + 12 >> 2], HEAP32[$0 + 64 >> 2]);
    HEAP32[$0 + 64 >> 2] = HEAP32[$0 + 8 >> 2];
   }
   jsvUnLock(HEAP32[$0 + 16 >> 2]);
  }
  jsvUnLock(HEAP32[$0 + 68 >> 2]);
  HEAP32[$0 + 76 >> 2] = HEAP32[$0 + 64 >> 2];
 }
 __stack_pointer = $0 + 80 | 0;
 return HEAP32[$0 + 76 >> 2];
}

function matchhere($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 1040 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 1032 >> 2] = $0;
 HEAP32[$3 + 1028 >> 2] = $1;
 label$1: {
  if (jspIsInterrupted() & 1) {
   HEAP32[$3 + 1036 >> 2] = 0;
   break label$1;
  }
  if (!(HEAP8[HEAP32[$3 + 1032 >> 2]] != 124 ? HEAP8[HEAP32[$3 + 1032 >> 2]] : 0)) {
   $0 = HEAP32[$3 + 1028 >> 2];
   __memcpy($3, $2, 88);
   HEAP32[$3 + 1036 >> 2] = matchfound($0, $3);
   break label$1;
  }
  if (HEAP8[HEAP32[$3 + 1032 >> 2]] == 94) {
   if (jsvStringIteratorGetIndex_4(HEAP32[$3 + 1028 >> 2])) {
    HEAP32[$3 + 1036 >> 2] = 0;
    break label$1;
   }
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$3 + 1036 >> 2] = 0;
    break label$1;
   }
   $0 = HEAP32[$3 + 1032 >> 2];
   $1 = HEAP32[$3 + 1028 >> 2];
   __memcpy($3 + 88 | 0, $2, 88);
   HEAP32[$3 + 1036 >> 2] = matchhere($0 + 1 | 0, $1, $3 + 88 | 0);
   break label$1;
  }
  if (HEAP8[HEAP32[$3 + 1032 >> 2]] == 36) {
   if (!(jsvStringIteratorHasChar_7(HEAP32[$3 + 1028 >> 2]) & 1)) {
    $0 = HEAP32[$3 + 1032 >> 2];
    $1 = HEAP32[$3 + 1028 >> 2];
    __memcpy($3 + 264 | 0, $2, 88);
    HEAP32[$3 + 1036 >> 2] = matchhere($0 + 1 | 0, $1, $3 + 264 | 0);
    break label$1;
   }
   $0 = HEAP32[$3 + 1032 >> 2];
   __memcpy($3 + 176 | 0, $2, 88);
   HEAP32[$3 + 1036 >> 2] = nomatchfound($0 + 1 | 0, $3 + 176 | 0);
   break label$1;
  }
  if (HEAP8[HEAP32[$3 + 1032 >> 2]] == 40) {
   $0 = jsvStringIteratorGetIndex_4(HEAP32[$3 + 1028 >> 2]);
   HEAP32[($2 + 16 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2] = $0;
   HEAP32[($2 + 52 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2] = HEAP32[($2 + 16 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2];
   if (HEAP32[$2 + 12 >> 2] < 9) {
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
   }
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$3 + 1036 >> 2] = 0;
    break label$1;
   }
   $0 = HEAP32[$3 + 1032 >> 2];
   $1 = HEAP32[$3 + 1028 >> 2];
   __memcpy($3 + 352 | 0, $2, 88);
   HEAP32[$3 + 1036 >> 2] = matchhere($0 + 1 | 0, $1, $3 + 352 | 0);
   break label$1;
  }
  if (HEAP8[HEAP32[$3 + 1032 >> 2]] == 41) {
   if (HEAP32[$2 + 12 >> 2] > 0) {
    $0 = jsvStringIteratorGetIndex_4(HEAP32[$3 + 1028 >> 2]);
    HEAP32[((HEAP32[$2 + 12 >> 2] << 2) + $2 | 0) + 48 >> 2] = $0;
   }
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$3 + 1036 >> 2] = 0;
    break label$1;
   }
   $0 = HEAP32[$3 + 1032 >> 2];
   $1 = HEAP32[$3 + 1028 >> 2];
   __memcpy($3 + 440 | 0, $2, 88);
   HEAP32[$3 + 1036 >> 2] = matchhere($0 + 1 | 0, $1, $3 + 440 | 0);
   break label$1;
  }
  HEAP8[$3 + 1023 | 0] = matchcharacter(HEAP32[$3 + 1032 >> 2], HEAP32[$3 + 1028 >> 2], $3 + 1024 | 0, $2) & 1;
  if (!(HEAP8[HEAP32[$3 + 1032 >> 2] + HEAP32[$3 + 1024 >> 2] | 0] != 42 & HEAP8[HEAP32[$3 + 1032 >> 2] + HEAP32[$3 + 1024 >> 2] | 0] != 43)) {
   HEAP8[$3 + 1022 | 0] = HEAPU8[HEAP32[$3 + 1032 >> 2] + HEAP32[$3 + 1024 >> 2] | 0];
   if (!(HEAP8[$3 + 1023 | 0] & 1 | HEAP8[$3 + 1022 | 0] != 43)) {
    $0 = HEAP32[$3 + 1032 >> 2];
    $1 = HEAP32[$3 + 1024 >> 2] + 1 | 0;
    __memcpy($3 + 704 | 0, $2, 88);
    HEAP32[$3 + 1036 >> 2] = nomatchfound($0 + $1 | 0, $3 + 704 | 0);
    break label$1;
   }
   HEAP32[$3 + 1016 >> 2] = (HEAP32[$3 + 1032 >> 2] + HEAP32[$3 + 1024 >> 2] | 0) + 1;
   jsvStringIteratorClone($3 + 976 | 0, HEAP32[$3 + 1028 >> 2]);
   $0 = HEAP32[$3 + 1016 >> 2];
   __memcpy($3 + 616 | 0, $2, 88);
   HEAP32[$3 + 972 >> 2] = matchhere($0, $3 + 976 | 0, $3 + 616 | 0);
   jsvStringIteratorFree_9($3 + 976 | 0);
   while (1) {
    $0 = 0;
    if (jsvStringIteratorHasChar_7(HEAP32[$3 + 1028 >> 2]) & 1) {
     $0 = HEAPU8[$3 + 1023 | 0];
    }
    if ($0 & 1) {
     jsvStringIteratorNext(HEAP32[$3 + 1028 >> 2]);
     HEAP8[$3 + 1023 | 0] = matchcharacter(HEAP32[$3 + 1032 >> 2], HEAP32[$3 + 1028 >> 2], $3 + 1024 | 0, $2) & 1;
     jsvStringIteratorClone($3 + 976 | 0, HEAP32[$3 + 1028 >> 2]);
     $0 = HEAP32[$3 + 1016 >> 2];
     __memcpy($3 + 528 | 0, $2, 88);
     HEAP32[$3 + 968 >> 2] = matchhere($0, $3 + 976 | 0, $3 + 528 | 0);
     jsvStringIteratorFree_9($3 + 976 | 0);
     if (HEAP32[$3 + 968 >> 2]) {
      jsvUnLock(HEAP32[$3 + 972 >> 2]);
      HEAP32[$3 + 972 >> 2] = HEAP32[$3 + 968 >> 2];
     }
     continue;
    }
    break;
   }
   HEAP32[$3 + 1036 >> 2] = HEAP32[$3 + 972 >> 2];
   break label$1;
  }
  if (!(!(jsvStringIteratorHasChar_7(HEAP32[$3 + 1028 >> 2]) & 1) | !(HEAP8[$3 + 1023 | 0] & 1))) {
   jsvStringIteratorNext(HEAP32[$3 + 1028 >> 2]);
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$3 + 1036 >> 2] = 0;
    break label$1;
   }
   $0 = HEAP32[$3 + 1032 >> 2];
   $1 = HEAP32[$3 + 1024 >> 2];
   $4 = HEAP32[$3 + 1028 >> 2];
   __memcpy($3 + 792 | 0, $2, 88);
   HEAP32[$3 + 1036 >> 2] = matchhere($0 + $1 | 0, $4, $3 + 792 | 0);
   break label$1;
  }
  $0 = HEAP32[$3 + 1032 >> 2];
  $1 = HEAP32[$3 + 1024 >> 2];
  __memcpy($3 + 880 | 0, $2, 88);
  HEAP32[$3 + 1036 >> 2] = nomatchfound($0 + $1 | 0, $3 + 880 | 0);
 }
 __stack_pointer = $3 + 1040 | 0;
 return HEAP32[$3 + 1036 >> 2];
}

function jsvIterateCallback($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 240 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 232 >> 2] = $0;
 HEAP32[$3 + 228 >> 2] = $1;
 HEAP32[$3 + 224 >> 2] = $2;
 HEAP8[$3 + 223 | 0] = 1;
 label$1: {
  label$2: {
   if (jsvIsNumeric(HEAP32[$3 + 232 >> 2]) & 1) {
    $0 = HEAP32[$3 + 228 >> 2];
    FUNCTION_TABLE[$0 | 0](jsvGetInteger(HEAP32[$3 + 232 >> 2]), HEAP32[$3 + 224 >> 2]);
    break label$2;
   }
   label$4: {
    if (jsvIsObject(HEAP32[$3 + 232 >> 2]) & 1) {
     HEAP32[$3 + 216 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 232 >> 2], 118173);
     if (jsvIsFunction(HEAP32[$3 + 216 >> 2]) & 1) {
      HEAP32[$3 + 212 >> 2] = jspExecuteFunction(HEAP32[$3 + 216 >> 2], 0, 0, 0);
      jsvUnLock(HEAP32[$3 + 216 >> 2]);
      if (HEAP32[$3 + 212 >> 2]) {
       HEAP8[$3 + 211 | 0] = jsvIterateCallback(HEAP32[$3 + 212 >> 2], HEAP32[$3 + 228 >> 2], HEAP32[$3 + 224 >> 2]) & 1;
       jsvUnLock(HEAP32[$3 + 212 >> 2]);
       HEAP8[$3 + 239 | 0] = HEAP8[$3 + 211 | 0] & 1;
       break label$1;
      }
      HEAP8[$3 + 239 | 0] = 1;
      break label$1;
     }
     jsvUnLock(HEAP32[$3 + 216 >> 2]);
     HEAP32[$3 + 204 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 232 >> 2], 112717);
     HEAP32[$3 + 200 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 232 >> 2], 122985);
     label$8: {
      label$9: {
       if (!HEAP32[$3 + 204 >> 2] | !HEAP32[$3 + 200 >> 2]) {
        break label$9;
       }
       if (!(jsvIsNumeric(HEAP32[$3 + 204 >> 2]) & 1)) {
        break label$9;
       }
       HEAP32[$3 + 196 >> 2] = jsvGetInteger(HEAP32[$3 + 204 >> 2]);
       while (1) {
        $0 = 0;
        if (HEAP8[$3 + 223 | 0] & 1) {
         $0 = HEAP32[$3 + 196 >> 2];
         HEAP32[$3 + 196 >> 2] = $0 - 1;
         $0 = ($0 | 0) > 0;
        }
        if ($0) {
         HEAP8[$3 + 223 | 0] = jsvIterateCallback(HEAP32[$3 + 200 >> 2], HEAP32[$3 + 228 >> 2], HEAP32[$3 + 224 >> 2]) & 1;
         continue;
        }
        break;
       }
       break label$8;
      }
      HEAP32[$3 >> 2] = HEAP32[$3 + 232 >> 2];
      jsExceptionHere(3, 118197, $3);
      HEAP8[$3 + 223 | 0] = 0;
     }
     jsvUnLock2(HEAP32[$3 + 204 >> 2], HEAP32[$3 + 200 >> 2]);
     break label$4;
    }
    label$13: {
     if (jsvIsString(HEAP32[$3 + 232 >> 2]) & 1) {
      jsvStringIteratorNew($3 + 160 | 0, HEAP32[$3 + 232 >> 2], 0);
      while (1) {
       $0 = 0;
       if (jsvStringIteratorHasChar_2($3 + 160 | 0) & 1) {
        $0 = HEAPU8[$3 + 223 | 0];
       }
       if ($0 & 1) {
        HEAP8[$3 + 159 | 0] = jsvStringIteratorGetCharAndNext($3 + 160 | 0);
        FUNCTION_TABLE[HEAP32[$3 + 228 >> 2]](HEAP8[$3 + 159 | 0], HEAP32[$3 + 224 >> 2]);
        continue;
       }
       break;
      }
      jsvStringIteratorFree_2($3 + 160 | 0);
      break label$13;
     }
     label$18: {
      if (jsvIsArrayBuffer(HEAP32[$3 + 232 >> 2]) & 1) {
       jsvArrayBufferIteratorNew($3 + 96 | 0, HEAP32[$3 + 232 >> 2], 0);
       label$20: {
        if (!(HEAPU8[$3 + 132 | 0] & 16 | (HEAPU8[$3 + 132 | 0] & 15) != 1)) {
         HEAP32[$3 + 92 >> 2] = $3 + 96;
         HEAP32[$3 + 88 >> 2] = jsvGetArrayBufferLength(HEAP32[$3 + 232 >> 2]);
         while (1) {
          $0 = HEAP32[$3 + 88 >> 2];
          HEAP32[$3 + 88 >> 2] = $0 - 1;
          if ($0) {
           $0 = HEAP32[$3 + 228 >> 2];
           FUNCTION_TABLE[$0 | 0](jsvStringIteratorGetChar_2(HEAP32[$3 + 92 >> 2]) & 255, HEAP32[$3 + 224 >> 2]);
           jsvStringIteratorNextInline(HEAP32[$3 + 92 >> 2]);
           continue;
          }
          break;
         }
         break label$20;
        }
        while (1) {
         if (jsvArrayBufferIteratorHasElement($3 + 96 | 0) & 1) {
          $0 = HEAP32[$3 + 228 >> 2];
          FUNCTION_TABLE[$0 | 0](jsvArrayBufferIteratorGetIntegerValue($3 + 96 | 0), HEAP32[$3 + 224 >> 2]);
          jsvArrayBufferIteratorNext($3 + 96 | 0);
          continue;
         }
         break;
        }
       }
       jsvArrayBufferIteratorFree($3 + 96 | 0);
       break label$18;
      }
      label$26: {
       if (jsvIsIterable(HEAP32[$3 + 232 >> 2]) & 1) {
        jsvIteratorNew($3 + 24 | 0, HEAP32[$3 + 232 >> 2], 1);
        while (1) {
         $0 = 0;
         if (jsvIteratorHasElement($3 + 24 | 0) & 1) {
          $0 = HEAPU8[$3 + 223 | 0];
         }
         if ($0 & 1) {
          HEAP32[$3 + 20 >> 2] = jsvIteratorGetValue($3 + 24 | 0);
          HEAP8[$3 + 223 | 0] = jsvIterateCallback(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 228 >> 2], HEAP32[$3 + 224 >> 2]) & 1;
          jsvUnLock(HEAP32[$3 + 20 >> 2]);
          jsvIteratorNext($3 + 24 | 0);
          continue;
         }
         break;
        }
        jsvIteratorFree($3 + 24 | 0);
        break label$26;
       }
       HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 232 >> 2];
       jsExceptionHere(3, 114200, $3 + 16 | 0);
       HEAP8[$3 + 223 | 0] = 0;
      }
     }
    }
   }
  }
  HEAP8[$3 + 239 | 0] = HEAP8[$3 + 223 | 0] & 1;
 }
 __stack_pointer = $3 + 240 | 0;
 return HEAP8[$3 + 239 | 0] & 1;
}

function jswrap_storagefile_read_internal($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 224 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 216 >> 2] = $0;
 HEAP32[$2 + 212 >> 2] = $1;
 HEAP8[$2 + 211 | 0] = HEAP32[$2 + 212 >> 2] < 0;
 HEAP8[$2 + 210 | 0] = jsvObjectGetIntegerChild(HEAP32[$2 + 216 >> 2], 120456);
 label$1: {
  if (HEAP8[$2 + 210 | 0] != 114) {
   jsExceptionHere(1, 120420, 0);
   HEAP32[$2 + 220 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 204 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 216 >> 2], 118134);
  jsfNameFromVarAndUnLock($2 + 176 | 0, jsvObjectGetChildIfExists(HEAP32[$2 + 216 >> 2], 120049));
  HEAP32[$2 + 172 >> 2] = 27;
  while (1) {
   $0 = 0;
   $0 = HEAP32[$2 + 172 >> 2] ? !HEAP8[(HEAP32[$2 + 172 >> 2] + $2 | 0) + 175 | 0] : $0;
   if ($0) {
    HEAP32[$2 + 172 >> 2] = HEAP32[$2 + 172 >> 2] - 1;
    continue;
   }
   break;
  }
  HEAP8[HEAP32[$2 + 172 >> 2] + ($2 + 176 | 0) | 0] = HEAP32[$2 + 204 >> 2];
  HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 200 >> 2];
  $0 = HEAP32[$2 + 196 >> 2];
  $1 = HEAP32[$2 + 192 >> 2];
  HEAP32[$2 + 56 >> 2] = $1;
  HEAP32[$2 + 60 >> 2] = $0;
  $1 = HEAP32[$2 + 188 >> 2];
  $0 = HEAP32[$2 + 184 >> 2];
  HEAP32[$2 + 48 >> 2] = $0;
  HEAP32[$2 + 52 >> 2] = $1;
  $0 = HEAP32[$2 + 180 >> 2];
  $1 = HEAP32[$2 + 176 >> 2];
  HEAP32[$2 + 40 >> 2] = $1;
  HEAP32[$2 + 44 >> 2] = $0;
  HEAP32[$2 + 132 >> 2] = jsfFindFile($2 + 40 | 0, $2 + 136 | 0);
  if (!HEAP32[$2 + 132 >> 2]) {
   HEAP32[$2 + 220 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 128 >> 2] = jsfGetFileSize($2 + 136 | 0);
  HEAP32[$2 + 124 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 216 >> 2], 113219);
  HEAP32[$2 + 120 >> 2] = 0;
  if (HEAP8[$2 + 211 | 0] & 1) {
   HEAP32[$2 + 212 >> 2] = 32;
  }
  while (1) {
   label$9: {
    if (!HEAP32[$2 + 212 >> 2]) {
     break label$9;
    }
    HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 128 >> 2] - HEAP32[$2 + 124 >> 2];
    if (HEAP32[$2 + 76 >> 2] <= 0) {
     HEAP32[$2 + 124 >> 2] = 0;
     label$11: {
      if (HEAP32[$2 + 204 >> 2] == 255) {
       HEAP32[$2 + 132 >> 2] = 0;
       break label$11;
      }
      HEAP32[$2 + 204 >> 2] = HEAP32[$2 + 204 >> 2] + 1;
      HEAP8[HEAP32[$2 + 172 >> 2] + ($2 + 176 | 0) | 0] = HEAP32[$2 + 204 >> 2];
      HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 200 >> 2];
      $1 = HEAP32[$2 + 196 >> 2];
      $0 = HEAP32[$2 + 192 >> 2];
      HEAP32[$2 + 24 >> 2] = $0;
      HEAP32[$2 + 28 >> 2] = $1;
      $0 = HEAP32[$2 + 188 >> 2];
      $1 = HEAP32[$2 + 184 >> 2];
      HEAP32[$2 + 16 >> 2] = $1;
      HEAP32[$2 + 20 >> 2] = $0;
      $1 = HEAP32[$2 + 180 >> 2];
      $0 = HEAP32[$2 + 176 >> 2];
      HEAP32[$2 + 8 >> 2] = $0;
      HEAP32[$2 + 12 >> 2] = $1;
      HEAP32[$2 + 132 >> 2] = jsfFindFile($2 + 8 | 0, $2 + 136 | 0);
      HEAP32[$2 + 128 >> 2] = jsfGetFileSize($2 + 136 | 0);
     }
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 216 >> 2], 113219, jsvNewFromInteger(HEAP32[$2 + 124 >> 2]));
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 216 >> 2], 118134, jsvNewFromInteger(HEAP32[$2 + 204 >> 2]));
     HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 128 >> 2];
     if (!HEAP32[$2 + 132 >> 2]) {
      HEAP32[$2 + 220 >> 2] = HEAP32[$2 + 120 >> 2];
      break label$1;
     }
    }
    HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 212 >> 2];
    if (HEAP32[$2 + 72 >> 2] > 32) {
     HEAP32[$2 + 72 >> 2] = 32;
    }
    if (HEAP32[$2 + 72 >> 2] > HEAP32[$2 + 76 >> 2]) {
     HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 76 >> 2];
    }
    jshFlashRead($2 + 80 | 0, HEAP32[$2 + 132 >> 2] + HEAP32[$2 + 124 >> 2] | 0, HEAP32[$2 + 72 >> 2]);
    HEAP32[$2 + 68 >> 2] = 0;
    while (1) {
     label$17: {
      if (HEAP32[$2 + 68 >> 2] >= HEAP32[$2 + 72 >> 2]) {
       break label$17;
      }
      if (HEAP8[HEAP32[$2 + 68 >> 2] + ($2 + 80 | 0) | 0] == -1) {
       HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 68 >> 2];
       HEAP32[$2 + 212 >> 2] = HEAP32[$2 + 72 >> 2];
       break label$17;
      }
      if (!(HEAP8[$2 + 211 | 0] & 1) | HEAP8[HEAP32[$2 + 68 >> 2] + ($2 + 80 | 0) | 0] != 10) {
       HEAP32[$2 + 68 >> 2] = HEAP32[$2 + 68 >> 2] + 1;
       continue;
      } else {
       HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 68 >> 2] + 1;
       HEAP32[$2 + 212 >> 2] = HEAP32[$2 + 72 >> 2];
       HEAP8[$2 + 211 | 0] = 0;
      }
     }
     break;
    }
    if (!HEAP32[$2 + 72 >> 2]) {
     break label$9;
    }
    if (!HEAP32[$2 + 120 >> 2]) {
     HEAP32[$2 + 120 >> 2] = jsvNewFromEmptyString_11();
    }
    if (HEAP32[$2 + 120 >> 2]) {
     jsvAppendStringBuf(HEAP32[$2 + 120 >> 2], $2 + 80 | 0, HEAP32[$2 + 72 >> 2]);
    }
    HEAP32[$2 + 212 >> 2] = HEAP32[$2 + 212 >> 2] - HEAP32[$2 + 72 >> 2];
    HEAP32[$2 + 124 >> 2] = HEAP32[$2 + 72 >> 2] + HEAP32[$2 + 124 >> 2];
    if (HEAP8[$2 + 211 | 0] & 1) {
     HEAP32[$2 + 212 >> 2] = 32;
    }
    continue;
   }
   break;
  }
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 216 >> 2], 113219, jsvNewFromInteger(HEAP32[$2 + 124 >> 2]));
  HEAP32[$2 + 220 >> 2] = HEAP32[$2 + 120 >> 2];
 }
 __stack_pointer = $2 + 224 | 0;
 return HEAP32[$2 + 220 >> 2];
}

function jspeFunctionDefinitionInternal($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $2 = __stack_pointer - 112 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 104 >> 2] = $0;
 HEAP8[$2 + 103 | 0] = $1;
 HEAP8[$2 + 55 | 0] = 0;
 label$1: {
  label$2: {
   if (HEAP8[$2 + 103 | 0] & 1) {
    if (HEAP32[$2 + 104 >> 2]) {
     $0 = HEAP32[$2 + 104 >> 2];
     $1 = HEAP32[$2 + 104 >> 2];
     $1 = (HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & -64 | 9;
     HEAP8[$0 + 12 | 0] = $1;
     HEAP8[$0 + 13 | 0] = $1 >>> 8;
    }
    break label$2;
   }
   HEAP32[$2 + 48 >> 2] = HEAP32[86758];
   HEAP32[86758] = 1;
   if (!(jslMatch(123) & 1)) {
    HEAP8[$2 + 111 | 0] = 0;
    break label$1;
   }
   HEAP32[86758] = HEAP32[$2 + 48 >> 2];
   if (HEAP16[HEAP32[44743] + 2 >> 1] == 131) {
    HEAP32[$2 + 44 >> 2] = jslGetTokenValueAsVar();
    label$7: {
     if (jsvIsStringEqual(HEAP32[$2 + 44 >> 2], 121718) & 1) {
      jsWarn(117670, 0);
      break label$7;
     }
     if (jsvIsStringEqual(HEAP32[$2 + 44 >> 2], 117759) & 1) {
      jslGetNextToken();
      if (HEAP16[HEAP32[44743] + 2 >> 1] == 59) {
       jslGetNextToken();
      }
      HEAP8[$2 + 55 | 0] = 1;
     }
    }
    jsvUnLock(HEAP32[$2 + 44 >> 2]);
   }
   if (!(!HEAP32[$2 + 104 >> 2] | HEAP16[HEAP32[44743] + 2 >> 1] != 171)) {
    $0 = HEAP32[$2 + 104 >> 2];
    $1 = HEAP32[$2 + 104 >> 2];
    $1 = (HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & -64 | 9;
    HEAP8[$0 + 12 | 0] = $1;
    HEAP8[$0 + 13 | 0] = $1 >>> 8;
    jslGetNextToken();
   }
  }
  jslSkipWhiteSpace();
  jslCharPosNew($2 + 56 | 0, HEAP32[HEAP32[44743] + 84 >> 2], HEAP32[HEAP32[44743] + 4 >> 2]);
  HEAP32[$2 + 40 >> 2] = -1;
  HEAP8[HEAP32[44743] + 81 | 0] = HEAP16[HEAP32[44743] + 2 >> 1] == 175;
  label$12: {
   if (!(HEAP8[$2 + 103 | 0] & 1)) {
    HEAP32[$2 + 36 >> 2] = 0;
    HEAP32[$2 + 32 >> 2] = HEAP32[86758];
    HEAP32[86758] = 0;
    while (1) {
     $0 = 0;
     if (HEAP16[HEAP32[44743] + 2 >> 1]) {
      $0 = 1;
      $0 = HEAP32[$2 + 36 >> 2] ? $0 : HEAP16[HEAP32[44743] + 2 >> 1] != 125;
     }
     if ($0 & 1) {
      if (HEAP16[HEAP32[44743] + 2 >> 1] == 123) {
       HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 36 >> 2] + 1;
      }
      if (HEAP16[HEAP32[44743] + 2 >> 1] == 125) {
       HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 36 >> 2] - 1;
      }
      HEAP32[$2 + 40 >> 2] = jsvStringIteratorGetIndex_3(HEAP32[44743] + 88 | 0) - 1;
      jslGetNextToken();
      continue;
     }
     break;
    }
    HEAP32[86758] = HEAP32[$2 + 32 >> 2];
    break label$12;
   }
   HEAP32[$2 + 28 >> 2] = HEAP32[86758];
   HEAP32[86758] = 0;
   jsvUnLock(jspeAssignmentExpression());
   HEAP32[86758] = HEAP32[$2 + 28 >> 2];
   HEAP32[$2 + 40 >> 2] = HEAP32[HEAP32[44743] + 4 >> 2];
  }
  HEAP8[$2 + 27 | 0] = HEAP8[HEAP32[44743] + 81 | 0] & 1;
  if (!(!HEAP32[$2 + 104 >> 2] | HEAP32[$2 + 40 >> 2] <= 0)) {
   label$21: {
    label$22: {
     if (HEAP8[$2 + 55 | 0] & 1) {
      break label$22;
     }
     if (!(jsvIsNativeString(HEAP32[HEAP32[44743] + 84 >> 2]) & 1)) {
      break label$22;
     }
     HEAP32[$2 + 16 >> 2] = jsvStringIteratorGetIndex_3($2 + 56 | 0) - 1;
     $0 = HEAP32[HEAP32[44743] + 84 >> 2];
     HEAP32[$2 + 20 >> 2] = jsvNewNativeString(HEAP32[$2 + 16 >> 2] + (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) | 0, HEAP32[$2 + 40 >> 2] - HEAP32[$2 + 16 >> 2] | 0);
     break label$21;
    }
    label$23: {
     label$24: {
      if (HEAP8[$2 + 55 | 0] & 1) {
       break label$24;
      }
      if (!(jsvIsFlashString(HEAP32[HEAP32[44743] + 84 >> 2]) & 1)) {
       break label$24;
      }
      HEAP32[$2 + 12 >> 2] = jsvStringIteratorGetIndex_3($2 + 56 | 0) - 1;
      $0 = HEAP32[HEAP32[44743] + 84 >> 2];
      HEAP32[$2 + 20 >> 2] = jsvNewFlashString(HEAP32[$2 + 12 >> 2] + (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) | 0, HEAP32[$2 + 40 >> 2] - HEAP32[$2 + 12 >> 2] | 0);
      break label$23;
     }
     label$25: {
      if (wasm2js_i32$0 = 1, wasm2js_i32$1 = jsfGetFlag(8) & 1, wasm2js_i32$2 = HEAP8[$2 + 55 | 0] & 1, 
      wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) {
       HEAP32[$2 + 20 >> 2] = jslNewTokenisedStringFromLexer($2 + 56 | 0, HEAP32[$2 + 40 >> 2]);
       break label$25;
      }
      HEAP32[$2 + 20 >> 2] = jslNewStringFromLexer($2 + 56 | 0, HEAP32[$2 + 40 >> 2]);
     }
    }
   }
   jsvAddNamedChildAndUnLock(HEAP32[$2 + 104 >> 2], HEAP32[$2 + 20 >> 2], 120874);
   HEAP32[$2 + 8 >> 2] = jspeiGetScopesAsVar();
   if (HEAP32[$2 + 8 >> 2]) {
    jsvAddNamedChildAndUnLock(HEAP32[$2 + 104 >> 2], HEAP32[$2 + 8 >> 2], 117081);
   }
  }
  jslCharPosFree($2 + 56 | 0);
  if (!(HEAP8[$2 + 103 | 0] & 1)) {
   if (!(jslMatch(125) & 1)) {
    HEAP8[$2 + 111 | 0] = 0;
    break label$1;
   }
  }
  HEAP8[$2 + 111 | 0] = HEAP8[$2 + 27 | 0] & 1;
 }
 __stack_pointer = $2 + 112 | 0;
 return HEAP8[$2 + 111 | 0] & 1;
}

function tflite__ops__micro__fully_connected__EvalQuantized_28TfLiteContext__2c_20TfLiteNode__2c_20tflite__ops__micro__fully_connected___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0;
 $7 = __stack_pointer - 288 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 280 >> 2] = $0;
 HEAP32[$7 + 276 >> 2] = $1;
 HEAP32[$7 + 272 >> 2] = $2;
 HEAP32[$7 + 268 >> 2] = $3;
 HEAP32[$7 + 264 >> 2] = $4;
 HEAP32[$7 + 260 >> 2] = $5;
 HEAP32[$7 + 256 >> 2] = $6;
 HEAP32[$7 + 252 >> 2] = 0 - HEAP32[HEAP32[$7 + 272 >> 2] + 20 >> 2];
 HEAP32[$7 + 248 >> 2] = 0 - HEAP32[HEAP32[$7 + 272 >> 2] + 24 >> 2];
 HEAP32[$7 + 244 >> 2] = HEAP32[HEAP32[$7 + 272 >> 2] + 28 >> 2];
 HEAP32[$7 + 200 >> 2] = HEAP32[$7 + 252 >> 2];
 HEAP32[$7 + 204 >> 2] = HEAP32[$7 + 248 >> 2];
 HEAP32[$7 + 208 >> 2] = HEAP32[$7 + 244 >> 2];
 HEAP32[$7 + 212 >> 2] = HEAP32[HEAP32[$7 + 272 >> 2] >> 2];
 HEAP32[$7 + 216 >> 2] = 0 - HEAP32[HEAP32[$7 + 272 >> 2] + 4 >> 2];
 HEAP32[$7 + 220 >> 2] = HEAP32[HEAP32[$7 + 272 >> 2] + 8 >> 2];
 HEAP32[$7 + 224 >> 2] = HEAP32[HEAP32[$7 + 272 >> 2] + 12 >> 2];
 label$1: {
  label$2: {
   label$3: {
    switch (HEAP32[HEAP32[$7 + 256 >> 2] + 8 >> 2] - 3 | 0) {
    case 0:
     tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($7 + 176 | 0, HEAP32[$7 + 268 >> 2]);
     $0 = unsigned_20char_20const__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor_20const__29(HEAP32[$7 + 268 >> 2]);
     tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($7 + 152 | 0, HEAP32[$7 + 264 >> 2]);
     $1 = unsigned_20char_20const__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor_20const__29(HEAP32[$7 + 264 >> 2]);
     tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($7 + 128 | 0, HEAP32[$7 + 260 >> 2]);
     $2 = int_20const__20tflite__micro__GetTensorData_int__28TfLiteEvalTensor_20const__29(HEAP32[$7 + 260 >> 2]);
     tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($7 + 104 | 0, HEAP32[$7 + 256 >> 2]);
     tflite__reference_ops__FullyConnected_28tflite__FullyConnectedParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($7 + 200 | 0, $7 + 176 | 0, $0, $7 + 152 | 0, $1, $7 + 128 | 0, $2, $7 + 104 | 0, unsigned_20char__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor__29(HEAP32[$7 + 256 >> 2]));
     tflite__RuntimeShape___RuntimeShape_28_29($7 + 104 | 0);
     tflite__RuntimeShape___RuntimeShape_28_29($7 + 128 | 0);
     tflite__RuntimeShape___RuntimeShape_28_29($7 + 152 | 0);
     tflite__RuntimeShape___RuntimeShape_28_29($7 + 176 | 0);
     break label$2;

    case 4:
     tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($7 + 80 | 0, HEAP32[$7 + 268 >> 2]);
     $0 = unsigned_20char_20const__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor_20const__29(HEAP32[$7 + 268 >> 2]);
     tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($7 + 56 | 0, HEAP32[$7 + 264 >> 2]);
     $1 = unsigned_20char_20const__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor_20const__29(HEAP32[$7 + 264 >> 2]);
     tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($7 + 32 | 0, HEAP32[$7 + 260 >> 2]);
     $2 = int_20const__20tflite__micro__GetTensorData_int__28TfLiteEvalTensor_20const__29(HEAP32[$7 + 260 >> 2]);
     tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($7 + 8 | 0, HEAP32[$7 + 256 >> 2]);
     tflite__reference_ops__FullyConnected_28tflite__FullyConnectedParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20short__29($7 + 200 | 0, $7 + 80 | 0, $0, $7 + 56 | 0, $1, $7 + 32 | 0, $2, $7 + 8 | 0, short__20tflite__micro__GetTensorData_short__28TfLiteEvalTensor__29(HEAP32[$7 + 256 >> 2]));
     tflite__RuntimeShape___RuntimeShape_28_29($7 + 8 | 0);
     tflite__RuntimeShape___RuntimeShape_28_29($7 + 32 | 0);
     tflite__RuntimeShape___RuntimeShape_28_29($7 + 56 | 0);
     tflite__RuntimeShape___RuntimeShape_28_29($7 + 80 | 0);
     break label$2;

    default:
     break label$3;
    }
   }
   $0 = HEAP32[HEAP32[$7 + 280 >> 2] + 20 >> 2];
   $1 = HEAP32[$7 + 280 >> 2];
   $2 = TfLiteTypeGetName(HEAP32[HEAP32[$7 + 256 >> 2] + 8 >> 2]);
   HEAP32[$7 + 4 >> 2] = HEAP32[HEAP32[$7 + 256 >> 2] + 8 >> 2];
   HEAP32[$7 >> 2] = $2;
   FUNCTION_TABLE[$0 | 0]($1, 127536, $7);
   HEAP32[$7 + 284 >> 2] = 1;
   break label$1;
  }
  HEAP32[$7 + 284 >> 2] = 0;
 }
 __stack_pointer = $7 + 288 | 0;
 return HEAP32[$7 + 284 >> 2];
}

function jswrap_graphics_floodFill($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 128 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 120 >> 2] = $0;
 HEAP32[$4 + 116 >> 2] = $1;
 HEAP32[$4 + 112 >> 2] = $2;
 HEAP32[$4 + 108 >> 2] = $3;
 label$1: {
  if (!(graphicsGetFromVar($4 + 32 | 0, HEAP32[$4 + 120 >> 2]) & 1)) {
   HEAP32[$4 + 124 >> 2] = 0;
   break label$1;
  }
  if ((HEAPU8[$4 + 92 | 0] | HEAPU8[$4 + 93 | 0] << 8 | (HEAPU8[$4 + 94 | 0] << 16 | HEAPU8[$4 + 95 | 0] << 24)) == 567) {
   jsExceptionHere(1, 117802, 0);
   HEAP32[$4 + 124 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 28 >> 2] = HEAPU8[$4 + 49 | 0] | HEAPU8[$4 + 50 | 0] << 8 | (HEAPU8[$4 + 51 | 0] << 16 | HEAPU8[$4 + 52 | 0] << 24);
  if (HEAP32[$4 + 108 >> 2]) {
   HEAP32[$4 + 28 >> 2] = jswrap_graphics_toColor(HEAP32[$4 + 120 >> 2], HEAP32[$4 + 108 >> 2], 0, 0);
  }
  HEAP32[$4 + 24 >> 2] = graphicsGetPixel($4 + 32 | 0, HEAP32[$4 + 116 >> 2], HEAP32[$4 + 112 >> 2]);
  HEAP32[$4 + 20 >> 2] = 64;
  HEAP32[$4 + 16 >> 2] = $4;
  $0 = $4 - 128 | 0;
  __stack_pointer = $0;
  HEAP32[$4 + 12 >> 2] = 0;
  label$5: {
   if (HEAP32[$4 + 12 >> 2] < 64) {
    $2 = HEAP32[$4 + 116 >> 2];
    $1 = HEAP32[$4 + 12 >> 2];
    HEAP32[$4 + 12 >> 2] = $1 + 1;
    HEAP16[($1 << 1) + $0 >> 1] = $2;
    $2 = HEAP32[$4 + 112 >> 2];
    $1 = HEAP32[$4 + 12 >> 2];
    HEAP32[$4 + 12 >> 2] = $1 + 1;
    HEAP16[($1 << 1) + $0 >> 1] = $2;
    break label$5;
   }
   HEAP32[$4 + 12 >> 2] = 65;
  }
  while (1) {
   $1 = 0;
   $1 = HEAP32[$4 + 12 >> 2] > 0 ? HEAP32[$4 + 12 >> 2] <= 64 : $1;
   if ($1) {
    $1 = HEAP32[$4 + 12 >> 2] - 1 | 0;
    HEAP32[$4 + 12 >> 2] = $1;
    HEAP16[$4 + 10 >> 1] = HEAPU16[($1 << 1) + $0 >> 1];
    $1 = HEAP32[$4 + 12 >> 2] - 1 | 0;
    HEAP32[$4 + 12 >> 2] = $1;
    HEAP16[$4 + 8 >> 1] = HEAPU16[($1 << 1) + $0 >> 1];
    HEAP16[$4 + 6 >> 1] = HEAPU16[$4 + 8 >> 1];
    while (1) {
     if (_jswrap_graphics_floodFill_inside($4 + 32 | 0, HEAP16[$4 + 6 >> 1] - 1 | 0, HEAP16[$4 + 10 >> 1], HEAP32[$4 + 24 >> 2]) & 1) {
      $1 = HEAPU16[$4 + 6 >> 1] - 1 | 0;
      HEAP16[$4 + 6 >> 1] = $1;
      graphicsSetPixel($4 + 32 | 0, $1 << 16 >> 16, HEAP16[$4 + 10 >> 1], HEAP32[$4 + 28 >> 2]);
      continue;
     }
     break;
    }
    while (1) {
     if (_jswrap_graphics_floodFill_inside($4 + 32 | 0, HEAP16[$4 + 8 >> 1], HEAP16[$4 + 10 >> 1], HEAP32[$4 + 24 >> 2]) & 1) {
      $1 = HEAPU16[$4 + 8 >> 1];
      HEAP16[$4 + 8 >> 1] = $1 + 1;
      graphicsSetPixel($4 + 32 | 0, $1 << 16 >> 16, HEAP16[$4 + 10 >> 1], HEAP32[$4 + 28 >> 2]);
      continue;
     }
     break;
    }
    HEAP8[$4 + 5 | 0] = 0;
    HEAP16[$4 + 2 >> 1] = HEAPU16[$4 + 6 >> 1];
    while (1) {
     if (HEAP16[$4 + 2 >> 1] < HEAP16[$4 + 8 >> 1]) {
      label$16: {
       if (!(_jswrap_graphics_floodFill_inside($4 + 32 | 0, HEAP16[$4 + 2 >> 1], HEAP16[$4 + 10 >> 1] + 1 | 0, HEAP32[$4 + 24 >> 2]) & 1)) {
        HEAP8[$4 + 5 | 0] = 0;
        break label$16;
       }
       if (!(HEAP8[$4 + 5 | 0] & 1)) {
        label$19: {
         if (HEAP32[$4 + 12 >> 2] < 64) {
          $2 = HEAPU16[$4 + 2 >> 1];
          $1 = HEAP32[$4 + 12 >> 2];
          HEAP32[$4 + 12 >> 2] = $1 + 1;
          HEAP16[($1 << 1) + $0 >> 1] = $2;
          $2 = HEAP16[$4 + 10 >> 1];
          $1 = HEAP32[$4 + 12 >> 2];
          HEAP32[$4 + 12 >> 2] = $1 + 1;
          HEAP16[($1 << 1) + $0 >> 1] = $2 + 1;
          break label$19;
         }
         HEAP32[$4 + 12 >> 2] = 65;
        }
        HEAP8[$4 + 5 | 0] = 1;
       }
      }
      HEAP16[$4 + 2 >> 1] = HEAPU16[$4 + 2 >> 1] + 1;
      continue;
     }
     break;
    }
    HEAP8[$4 + 5 | 0] = 0;
    HEAP16[$4 >> 1] = HEAPU16[$4 + 6 >> 1];
    while (1) {
     if (HEAP16[$4 >> 1] < HEAP16[$4 + 8 >> 1]) {
      label$23: {
       if (!(_jswrap_graphics_floodFill_inside($4 + 32 | 0, HEAP16[$4 >> 1], HEAP16[$4 + 10 >> 1] - 1 | 0, HEAP32[$4 + 24 >> 2]) & 1)) {
        HEAP8[$4 + 5 | 0] = 0;
        break label$23;
       }
       if (!(HEAP8[$4 + 5 | 0] & 1)) {
        label$26: {
         if (HEAP32[$4 + 12 >> 2] < 64) {
          $2 = HEAPU16[$4 >> 1];
          $1 = HEAP32[$4 + 12 >> 2];
          HEAP32[$4 + 12 >> 2] = $1 + 1;
          HEAP16[($1 << 1) + $0 >> 1] = $2;
          $2 = HEAP16[$4 + 10 >> 1];
          $1 = HEAP32[$4 + 12 >> 2];
          HEAP32[$4 + 12 >> 2] = $1 + 1;
          HEAP16[($1 << 1) + $0 >> 1] = $2 - 1;
          break label$26;
         }
         HEAP32[$4 + 12 >> 2] = 65;
        }
        HEAP8[$4 + 5 | 0] = 1;
       }
      }
      HEAP16[$4 >> 1] = HEAPU16[$4 >> 1] + 1;
      continue;
     }
     break;
    }
    continue;
   }
   break;
  }
  if (HEAP32[$4 + 12 >> 2]) {
   jsiConsolePrintf(144423, 0);
  }
  graphicsSetVar($4 + 32 | 0);
  HEAP32[$4 + 124 >> 2] = jsvLockAgain(HEAP32[$4 + 120 >> 2]);
 }
 __stack_pointer = $4 + 128 | 0;
 return HEAP32[$4 + 124 >> 2];
}

function FFT($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 128 | 0;
 __stack_pointer = $4;
 HEAP16[$4 + 126 >> 1] = $0;
 HEAP32[$4 + 120 >> 2] = $1;
 HEAP32[$4 + 116 >> 2] = $2;
 HEAP32[$4 + 112 >> 2] = $3;
 HEAP32[$4 + 108 >> 2] = 1;
 HEAP32[$4 + 104 >> 2] = 0;
 while (1) {
  if (HEAP32[$4 + 104 >> 2] < HEAP32[$4 + 120 >> 2]) {
   HEAP32[$4 + 108 >> 2] = HEAP32[$4 + 108 >> 2] << 1;
   HEAP32[$4 + 104 >> 2] = HEAP32[$4 + 104 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$4 + 88 >> 2] = HEAP32[$4 + 108 >> 2] >> 1;
 HEAP32[$4 + 96 >> 2] = 0;
 HEAP32[$4 + 104 >> 2] = 0;
 while (1) {
  if (HEAP32[$4 + 104 >> 2] < (HEAP32[$4 + 108 >> 2] - 1 | 0)) {
   if (HEAP32[$4 + 104 >> 2] < HEAP32[$4 + 96 >> 2]) {
    HEAPF64[$4 + 48 >> 3] = HEAPF64[HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) >> 3];
    HEAPF64[$4 + 40 >> 3] = HEAPF64[HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) >> 3];
    HEAPF64[HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) >> 3] = HEAPF64[HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 96 >> 2] << 3) >> 3];
    HEAPF64[HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) >> 3] = HEAPF64[HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 96 >> 2] << 3) >> 3];
    HEAPF64[HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 96 >> 2] << 3) >> 3] = HEAPF64[$4 + 48 >> 3];
    HEAPF64[HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 96 >> 2] << 3) >> 3] = HEAPF64[$4 + 40 >> 3];
   }
   HEAP32[$4 + 92 >> 2] = HEAP32[$4 + 88 >> 2];
   while (1) {
    if (HEAP32[$4 + 92 >> 2] <= HEAP32[$4 + 96 >> 2]) {
     HEAP32[$4 + 96 >> 2] = HEAP32[$4 + 96 >> 2] - HEAP32[$4 + 92 >> 2];
     HEAP32[$4 + 92 >> 2] = HEAP32[$4 + 92 >> 2] >> 1;
     continue;
    }
    break;
   }
   HEAP32[$4 + 96 >> 2] = HEAP32[$4 + 92 >> 2] + HEAP32[$4 + 96 >> 2];
   HEAP32[$4 + 104 >> 2] = HEAP32[$4 + 104 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAPF64[$4 + 64 >> 3] = -1;
 HEAPF64[$4 + 56 >> 3] = 0;
 HEAP32[$4 + 76 >> 2] = 1;
 HEAP32[$4 + 84 >> 2] = 0;
 while (1) {
  if (HEAP32[$4 + 84 >> 2] < HEAP32[$4 + 120 >> 2]) {
   HEAP32[$4 + 80 >> 2] = HEAP32[$4 + 76 >> 2];
   HEAP32[$4 + 76 >> 2] = HEAP32[$4 + 76 >> 2] << 1;
   HEAPF64[$4 + 16 >> 3] = 1;
   HEAPF64[$4 + 8 >> 3] = 0;
   HEAP32[$4 + 96 >> 2] = 0;
   while (1) {
    if (HEAP32[$4 + 96 >> 2] < HEAP32[$4 + 80 >> 2]) {
     HEAP32[$4 + 104 >> 2] = HEAP32[$4 + 96 >> 2];
     while (1) {
      if (HEAP32[$4 + 104 >> 2] < HEAP32[$4 + 108 >> 2]) {
       HEAP32[$4 + 100 >> 2] = HEAP32[$4 + 104 >> 2] + HEAP32[$4 + 80 >> 2];
       HEAPF64[$4 + 32 >> 3] = HEAPF64[$4 + 16 >> 3] * HEAPF64[HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 100 >> 2] << 3) >> 3] + -(HEAPF64[$4 + 8 >> 3] * HEAPF64[HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 100 >> 2] << 3) >> 3]);
       HEAPF64[$4 + 24 >> 3] = HEAPF64[$4 + 16 >> 3] * HEAPF64[HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 100 >> 2] << 3) >> 3] + HEAPF64[$4 + 8 >> 3] * HEAPF64[HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 100 >> 2] << 3) >> 3];
       HEAPF64[HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 100 >> 2] << 3) >> 3] = HEAPF64[HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) >> 3] - HEAPF64[$4 + 32 >> 3];
       HEAPF64[HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 100 >> 2] << 3) >> 3] = HEAPF64[HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) >> 3] - HEAPF64[$4 + 24 >> 3];
       $0 = HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) | 0;
       HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] + HEAPF64[$4 + 32 >> 3];
       $0 = HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) | 0;
       HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] + HEAPF64[$4 + 24 >> 3];
       HEAP32[$4 + 104 >> 2] = HEAP32[$4 + 76 >> 2] + HEAP32[$4 + 104 >> 2];
       continue;
      }
      break;
     }
     HEAPF64[$4 >> 3] = HEAPF64[$4 + 16 >> 3] * HEAPF64[$4 + 64 >> 3] + -(HEAPF64[$4 + 8 >> 3] * HEAPF64[$4 + 56 >> 3]);
     HEAPF64[$4 + 8 >> 3] = HEAPF64[$4 + 16 >> 3] * HEAPF64[$4 + 56 >> 3] + HEAPF64[$4 + 8 >> 3] * HEAPF64[$4 + 64 >> 3];
     HEAPF64[$4 + 16 >> 3] = HEAPF64[$4 >> 3];
     HEAP32[$4 + 96 >> 2] = HEAP32[$4 + 96 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAPF64[$4 + 56 >> 3] = jswrap_math_sqrt((1 - HEAPF64[$4 + 64 >> 3]) * .5);
   if (HEAP16[$4 + 126 >> 1] == 1) {
    HEAPF64[$4 + 56 >> 3] = -HEAPF64[$4 + 56 >> 3];
   }
   HEAPF64[$4 + 64 >> 3] = jswrap_math_sqrt((HEAPF64[$4 + 64 >> 3] + 1) * .5);
   HEAP32[$4 + 84 >> 2] = HEAP32[$4 + 84 >> 2] + 1;
   continue;
  }
  break;
 }
 if (HEAP16[$4 + 126 >> 1] == 1) {
  HEAP32[$4 + 104 >> 2] = 0;
  while (1) {
   if (HEAP32[$4 + 104 >> 2] < HEAP32[$4 + 108 >> 2]) {
    $0 = HEAP32[$4 + 116 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) | 0;
    HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] / +HEAP32[$4 + 108 >> 2];
    $0 = HEAP32[$4 + 112 >> 2] + (HEAP32[$4 + 104 >> 2] << 3) | 0;
    HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] / +HEAP32[$4 + 108 >> 2];
    HEAP32[$4 + 104 >> 2] = HEAP32[$4 + 104 >> 2] + 1;
    continue;
   }
   break;
  }
 }
 __stack_pointer = $4 + 128 | 0;
 return 1;
}

function jspeClassDefinition($0) {
 var $1 = 0;
 $1 = __stack_pointer - 96 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 91 | 0] = $0;
 HEAP32[$1 + 84 >> 2] = 0;
 HEAP32[$1 + 80 >> 2] = 0;
 HEAP32[$1 + 76 >> 2] = 0;
 HEAP8[$1 + 75 | 0] = (HEAP32[86758] & 63) == 1;
 if (HEAP8[$1 + 75 | 0] & 1) {
  HEAP32[$1 + 84 >> 2] = jsvNewWithFlags(7);
  HEAP32[$1 + 68 >> 2] = jspeiGetScopesAsVar();
  if (HEAP32[$1 + 68 >> 2]) {
   jsvAddNamedChildAndUnLock(HEAP32[$1 + 84 >> 2], HEAP32[$1 + 68 >> 2], 117081);
  }
 }
 if (!(!(HEAP8[$1 + 91 | 0] & 1) | HEAP16[HEAP32[44743] + 2 >> 1] != 128)) {
  if (HEAP32[$1 + 84 >> 2]) {
   HEAP32[$1 + 76 >> 2] = jslGetTokenValueAsVar();
  }
  jslGetNextToken();
 }
 if (HEAP32[$1 + 84 >> 2]) {
  HEAP32[$1 + 64 >> 2] = jsvFindOrAddChildFromString(HEAP32[$1 + 84 >> 2], 119810);
  jspEnsureIsPrototype(HEAP32[$1 + 84 >> 2], HEAP32[$1 + 64 >> 2]);
  HEAP32[$1 + 80 >> 2] = jsvSkipName(HEAP32[$1 + 64 >> 2]);
  jsvUnLock(HEAP32[$1 + 64 >> 2]);
 }
 label$6: {
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 195) {
   jslGetNextToken();
   HEAP32[$1 + 60 >> 2] = 0;
   HEAP32[$1 + 56 >> 2] = 0;
   if (HEAP8[$1 + 75 | 0] & 1) {
    HEAP32[$1 + 60 >> 2] = jspGetNamedVariable(jslGetTokenValueAsString());
    HEAP32[$1 + 56 >> 2] = jsvSkipName(HEAP32[$1 + 60 >> 2]);
   }
   if (!(jslMatch(128) & 1)) {
    jsvUnLock4(HEAP32[$1 + 56 >> 2], HEAP32[$1 + 84 >> 2], HEAP32[$1 + 76 >> 2], HEAP32[$1 + 80 >> 2]);
    HEAP32[$1 + 92 >> 2] = 0;
    break label$6;
   }
   if (HEAP32[$1 + 80 >> 2]) {
    label$11: {
     if (jsvIsFunction(HEAP32[$1 + 56 >> 2]) & 1) {
      HEAP32[$1 + 52 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 56 >> 2], 119810);
      if (HEAP32[$1 + 52 >> 2]) {
       jsvObjectSetChild(HEAP32[$1 + 80 >> 2], 123007, HEAP32[$1 + 52 >> 2]);
       $0 = HEAP32[$1 + 84 >> 2];
       HEAP32[$1 >> 2] = HEAP32[$1 + 60 >> 2];
       jsvObjectSetChildAndUnLock($0, 120874, jsvVarPrintf(142536, $1));
       jsvUnLock(HEAP32[$1 + 52 >> 2]);
      }
      break label$11;
     }
     $0 = HEAP32[$1 + 60 >> 2];
     HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 56 >> 2];
     HEAP32[$1 + 16 >> 2] = $0;
     jsExceptionHere(2, 114082, $1 + 16 | 0);
    }
   }
   jsvUnLock2(HEAP32[$1 + 56 >> 2], HEAP32[$1 + 60 >> 2]);
  }
  if (!(jslMatch(123) & 1)) {
   jsvUnLock3(HEAP32[$1 + 84 >> 2], HEAP32[$1 + 76 >> 2], HEAP32[$1 + 80 >> 2]);
   HEAP32[$1 + 92 >> 2] = 0;
   break label$6;
  }
  while (1) {
   label$16: {
    if (HEAP16[HEAP32[44743] + 2 >> 1] != 128) {
     $0 = 0;
     if (HEAP16[HEAP32[44743] + 2 >> 1] != 197) {
      break label$16;
     }
    }
    $0 = jspIsInterrupted() ^ -1;
   }
   if ($0 & 1) {
    HEAP8[$1 + 51 | 0] = HEAP16[HEAP32[44743] + 2 >> 1] == 197;
    if (HEAP8[$1 + 51 | 0] & 1) {
     jslGetNextToken();
    }
    HEAP32[$1 + 44 >> 2] = jslGetTokenValueAsVar();
    if (!(jslMatch(128) & 1)) {
     jsvUnLock4(HEAP32[$1 + 44 >> 2], HEAP32[$1 + 84 >> 2], HEAP32[$1 + 76 >> 2], HEAP32[$1 + 80 >> 2]);
     HEAP32[$1 + 92 >> 2] = 0;
     break label$6;
    }
    HEAP8[$1 + 43 | 0] = 0;
    HEAP8[$1 + 42 | 0] = 0;
    if (HEAP16[HEAP32[44743] + 2 >> 1] == 128) {
     HEAP8[$1 + 43 | 0] = jsvIsStringEqual(HEAP32[$1 + 44 >> 2], 113243) & 1;
     HEAP8[$1 + 42 | 0] = jsvIsStringEqual(HEAP32[$1 + 44 >> 2], 113239) & 1;
     if (HEAP8[$1 + 42 | 0] & 1 ? 1 : HEAP8[$1 + 43 | 0] & 1) {
      jsvUnLock(HEAP32[$1 + 44 >> 2]);
      HEAP32[$1 + 44 >> 2] = jslGetTokenValueAsVar();
      jslGetNextToken();
     }
    }
    HEAP32[$1 + 36 >> 2] = jspeFunctionDefinition(0);
    if (!(!HEAP32[$1 + 84 >> 2] | !HEAP32[$1 + 80 >> 2])) {
     if (HEAP8[$1 + 51 | 0] & 1) {
      $0 = HEAP32[$1 + 84 >> 2];
     } else {
      $0 = HEAP32[$1 + 80 >> 2];
     }
     HEAP32[$1 + 32 >> 2] = $0;
     label$27: {
      if (jsvIsStringEqual(HEAP32[$1 + 44 >> 2], 116071) & 1) {
       jswrap_function_replaceWith(HEAP32[$1 + 84 >> 2], HEAP32[$1 + 36 >> 2]);
       break label$27;
      }
      label$29: {
       if (HEAP8[$1 + 42 | 0] & 1 ? 1 : HEAP8[$1 + 43 | 0] & 1) {
        jsvAddGetterOrSetter(HEAP32[$1 + 32 >> 2], HEAP32[$1 + 44 >> 2], HEAP8[$1 + 43 | 0] & 1, HEAP32[$1 + 36 >> 2]);
        break label$29;
       }
       HEAP32[$1 + 44 >> 2] = jsvMakeIntoVariableName(HEAP32[$1 + 44 >> 2], 0);
       jsvSetValueOfName(HEAP32[$1 + 44 >> 2], HEAP32[$1 + 36 >> 2]);
       jsvAddName(HEAP32[$1 + 32 >> 2], HEAP32[$1 + 44 >> 2]);
      }
     }
    }
    jsvUnLock2(HEAP32[$1 + 36 >> 2], HEAP32[$1 + 44 >> 2]);
    continue;
   }
   break;
  }
  jsvUnLock(HEAP32[$1 + 80 >> 2]);
  if (HEAP32[$1 + 76 >> 2]) {
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 84 >> 2], 117763, HEAP32[$1 + 76 >> 2]);
  }
  if (!(jslMatch(125) & 1)) {
   jsvUnLock(HEAP32[$1 + 84 >> 2]);
   HEAP32[$1 + 92 >> 2] = 0;
   break label$6;
  }
  HEAP32[$1 + 92 >> 2] = HEAP32[$1 + 84 >> 2];
 }
 __stack_pointer = $1 + 96 | 0;
 return HEAP32[$1 + 92 >> 2];
}

function lcdMemLCD_flip($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 336 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 332 >> 2] = $0;
 $0 = HEAP32[$1 + 332 >> 2];
 $2 = HEAP32[$1 + 332 >> 2];
 if ((HEAPU8[$0 + 42 | 0] | HEAPU8[$0 + 43 | 0] << 8) << 16 >> 16 <= (HEAPU8[$2 + 46 | 0] | HEAPU8[$2 + 47 | 0] << 8) << 16 >> 16) {
  HEAP8[349532] = 1;
  lcdMemLCD_waitForSendComplete();
  $0 = HEAP32[$1 + 332 >> 2];
  HEAP32[$1 + 328 >> 2] = (HEAPU8[$0 + 42 | 0] | HEAPU8[$0 + 43 | 0] << 8) << 16 >> 16;
  $0 = HEAP32[$1 + 332 >> 2];
  HEAP32[$1 + 324 >> 2] = (HEAPU8[$0 + 46 | 0] | HEAPU8[$0 + 47 | 0] << 8) << 16 >> 16;
  HEAP32[$1 + 320 >> 2] = (HEAP32[$1 + 324 >> 2] + 1 | 0) - HEAP32[$1 + 328 >> 2];
  HEAP8[$1 + 319 | 0] = 0;
  if (HEAP32[93403]) {
   HEAP8[$1 + 319 | 0] = _jswrap_graphics_parseImage(HEAP32[$1 + 332 >> 2], HEAP32[93403], 0, $1 + 232 | 0) & 1;
  }
  jshPinSetValue(5, 1);
  label$3: {
   if (HEAP8[$1 + 319 | 0] & 1) {
    HEAP8[$1 + 231 | 0] = ((HEAPU8[349468] | HEAPU8[349469] << 8 | (HEAPU8[349470] << 16 | HEAPU8[349471] << 24)) & 112) == 96;
    if (HEAP8[$1 + 231 | 0] & 1) {
     $0 = 176 - (HEAP16[186808] + HEAP32[$1 + 236 >> 2] | 0) | 0;
    } else {
     $0 = HEAP16[186808];
    }
    HEAP32[$1 + 224 >> 2] = $0;
    $0 = HEAP32[$1 + 332 >> 2];
    HEAP32[$1 + 220 >> 2] = HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24);
    $0 = HEAP32[$1 + 332 >> 2];
    HEAP32[$1 + 216 >> 2] = HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24);
    $0 = HEAP32[$1 + 332 >> 2];
    $2 = HEAPU8[349444] | HEAPU8[349445] << 8;
    HEAP8[$0 + 17 | 0] = $2;
    HEAP8[$0 + 18 | 0] = $2 >>> 8;
    HEAP8[$0 + 19 | 0] = $2 >>> 16;
    HEAP8[$0 + 20 | 0] = $2 >>> 24;
    $0 = HEAP32[$1 + 332 >> 2];
    $2 = HEAPU8[349446] | HEAPU8[349447] << 8;
    HEAP8[$0 + 21 | 0] = $2;
    HEAP8[$0 + 22 | 0] = $2 >>> 8;
    HEAP8[$0 + 23 | 0] = $2 >>> 16;
    HEAP8[$0 + 24 | 0] = $2 >>> 24;
    HEAP32[$1 + 24 >> 2] = 0;
    HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 224 >> 2];
    __memcpy($1 + 60 | 0, $1 + 232 | 0, 84);
    HEAPF64[$1 + 40 >> 3] = HEAP8[$1 + 231 | 0] & 1 ? 3.141592 : 0;
    HEAPF64[$1 + 48 >> 3] = 1;
    HEAP8[$1 + 56 | 0] = 0;
    HEAP8[$1 + 57 | 0] = 0;
    jsvStringIteratorNew($1 + 144 | 0, HEAP32[$1 + 80 >> 2], HEAP32[$1 + 84 >> 2]);
    _jswrap_drawImageLayerInit($1 + 24 | 0);
    _jswrap_drawImageLayerSetStart($1 + 24 | 0, 0, HEAP32[$1 + 328 >> 2]);
    HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 328 >> 2];
    while (1) {
     if (HEAP32[$1 + 20 >> 2] <= HEAP32[$1 + 324 >> 2]) {
      HEAP32[$1 + 16 >> 2] = (HEAP32[$1 + 20 >> 2] & 1) + 176;
      HEAP32[$1 + 12 >> 2] = Math_imul(HEAP32[$1 + 16 >> 2], 68) + 361504;
      __memcpy(HEAP32[$1 + 12 >> 2], Math_imul(HEAP32[$1 + 20 >> 2], 68) + 361504 | 0, 68);
      if (!(HEAP32[$1 + 20 >> 2] < HEAP32[$1 + 224 >> 2] | HEAP32[$1 + 20 >> 2] >= (HEAP32[$1 + 224 >> 2] + HEAP32[$1 + 236 >> 2] | 0))) {
       _jswrap_drawImageLayerStartX($1 + 24 | 0);
       HEAP32[$1 + 8 >> 2] = 0;
       while (1) {
        if (HEAP32[$1 + 8 >> 2] < HEAP32[$1 + 232 >> 2]) {
         HEAP32[$1 >> 2] = HEAP32[$1 + 8 >> 2] + HEAP16[186809];
         if (!(!(_jswrap_drawImageLayerGetPixel($1 + 24 | 0, $1 + 4 | 0) & 1) | HEAP32[$1 >> 2] >= 176 | HEAP32[$1 >> 2] < 0)) {
          lcdMemLCD_setPixel(0, HEAP32[$1 >> 2], HEAP32[$1 + 16 >> 2], HEAP32[$1 + 4 >> 2]);
         }
         _jswrap_drawImageLayerNextX($1 + 24 | 0);
         HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
         continue;
        }
        break;
       }
      }
      _jswrap_drawImageLayerNextY($1 + 24 | 0);
      __memcpy(Math_imul(HEAP32[$1 + 20 >> 2], 68) + 349536 | 0, HEAP32[$1 + 12 >> 2], 68);
      HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 20 >> 2] + 1;
      continue;
     }
     break;
    }
    jsvStringIteratorFree_6($1 + 144 | 0);
    _jswrap_graphics_freeImageInfo($1 + 232 | 0);
    $0 = HEAP32[$1 + 332 >> 2];
    $2 = HEAP32[$1 + 220 >> 2];
    HEAP8[$0 + 17 | 0] = $2;
    HEAP8[$0 + 18 | 0] = $2 >>> 8;
    HEAP8[$0 + 19 | 0] = $2 >>> 16;
    HEAP8[$0 + 20 | 0] = $2 >>> 24;
    $0 = HEAP32[$1 + 332 >> 2];
    $2 = HEAP32[$1 + 216 >> 2];
    HEAP8[$0 + 21 | 0] = $2;
    HEAP8[$0 + 22 | 0] = $2 >>> 8;
    HEAP8[$0 + 23 | 0] = $2 >>> 16;
    HEAP8[$0 + 24 | 0] = $2 >>> 24;
    break label$3;
   }
   __memcpy(349536, 361504, 11968);
  }
  $0 = HEAP32[$1 + 332 >> 2];
  HEAP8[$0 + 44 | 0] = 0;
  HEAP8[$0 + 45 | 0] = 128;
  $0 = HEAP32[$1 + 332 >> 2];
  HEAP8[$0 + 46 | 0] = 0;
  HEAP8[$0 + 47 | 0] = 128;
  $0 = HEAP32[$1 + 332 >> 2];
  HEAP8[$0 + 40 | 0] = 255;
  HEAP8[$0 + 41 | 0] = 127;
  $0 = HEAP32[$1 + 332 >> 2];
  HEAP8[$0 + 42 | 0] = 255;
  HEAP8[$0 + 43 | 0] = 127;
 }
 __stack_pointer = $1 + 336 | 0;
}

function _jswrap_banglejs_setOptions($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 368 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 360 >> 2] = $0;
 HEAP8[$2 + 359 | 0] = $1;
 HEAP8[$2 + 358 | 0] = (HEAP32[93413] & 2) != 0;
 HEAP8[$2 + 357 | 0] = (HEAP32[93413] & 4) != 0;
 HEAP8[$2 + 356 | 0] = (HEAP32[93413] & 8) != 0;
 HEAP8[$2 + 355 | 0] = HEAP32[93413] & 1;
 HEAP8[$2 + 354 | 0] = (HEAP32[93413] & 16) != 0;
 HEAP8[$2 + 353 | 0] = (HEAP32[93413] & 32) != 0;
 HEAP8[$2 + 352 | 0] = (HEAP32[93413] & 64) != 0;
 HEAP8[$2 + 351 | 0] = (HEAP32[93413] & 2048) != 0;
 HEAP32[$2 + 336 >> 2] = Math_imul(HEAPU16[89281], HEAPU16[89281]);
 HEAP32[$2 + 332 >> 2] = Math_imul(HEAPU16[89282], HEAPU16[89282]);
 HEAP32[$2 + 328 >> 2] = HEAP16[186824];
 HEAP32[$2 + 324 >> 2] = HEAP16[186825];
 HEAP32[$2 + 320 >> 2] = HEAP16[89279];
 HEAP32[$2 + 316 >> 2] = HEAP16[89280];
 HEAP32[$2 + 312 >> 2] = lcdMemLCD_getRowPtr(0);
 HEAP32[$2 >> 2] = 118444;
 HEAP16[$2 + 4 >> 1] = 10;
 HEAP32[$2 + 8 >> 2] = $2 + 336;
 HEAP32[$2 + 12 >> 2] = 118463;
 HEAP16[$2 + 16 >> 1] = 10;
 HEAP32[$2 + 20 >> 2] = $2 + 332;
 HEAP32[$2 + 24 >> 2] = 112734;
 HEAP16[$2 + 28 >> 1] = 10;
 HEAP32[$2 + 32 >> 2] = 178568;
 HEAP32[$2 + 36 >> 2] = 118400;
 HEAP16[$2 + 40 >> 1] = 10;
 HEAP32[$2 + 44 >> 2] = 178572;
 HEAP32[$2 + 48 >> 2] = 112043;
 HEAP16[$2 + 52 >> 1] = 10;
 HEAP32[$2 + 56 >> 2] = $2 + 344;
 HEAP32[$2 + 60 >> 2] = 118494;
 HEAP16[$2 + 64 >> 1] = 10;
 HEAP32[$2 + 68 >> 2] = $2 + 340;
 HEAP32[$2 + 72 >> 2] = 120903;
 HEAP16[$2 + 76 >> 1] = 10;
 HEAP32[$2 + 80 >> 2] = 178576;
 HEAP32[$2 + 84 >> 2] = 112580;
 HEAP16[$2 + 88 >> 1] = 10;
 HEAP32[$2 + 92 >> 2] = 178584;
 HEAP32[$2 + 96 >> 2] = 123442;
 HEAP16[$2 + 100 >> 1] = 10;
 HEAP32[$2 + 104 >> 2] = 178580;
 HEAP32[$2 + 108 >> 2] = 126624;
 HEAP16[$2 + 112 >> 1] = 12;
 HEAP32[$2 + 116 >> 2] = $2 + 358;
 HEAP32[$2 + 120 >> 2] = 126342;
 HEAP16[$2 + 124 >> 1] = 12;
 HEAP32[$2 + 128 >> 2] = $2 + 357;
 HEAP32[$2 + 132 >> 2] = 126258;
 HEAP16[$2 + 136 >> 1] = 12;
 HEAP32[$2 + 140 >> 2] = $2 + 356;
 HEAP32[$2 + 144 >> 2] = 117046;
 HEAP16[$2 + 148 >> 1] = 12;
 HEAP32[$2 + 152 >> 2] = $2 + 355;
 HEAP32[$2 + 156 >> 2] = 118528;
 HEAP16[$2 + 160 >> 1] = 12;
 HEAP32[$2 + 164 >> 2] = $2 + 354;
 HEAP32[$2 + 168 >> 2] = 117020;
 HEAP16[$2 + 172 >> 1] = 12;
 HEAP32[$2 + 176 >> 2] = $2 + 353;
 HEAP32[$2 + 180 >> 2] = 112676;
 HEAP16[$2 + 184 >> 1] = 12;
 HEAP32[$2 + 188 >> 2] = $2 + 352;
 HEAP32[$2 + 192 >> 2] = 119372;
 HEAP16[$2 + 196 >> 1] = 12;
 HEAP32[$2 + 200 >> 2] = $2 + 351;
 HEAP32[$2 + 204 >> 2] = 112626;
 HEAP16[$2 + 208 >> 1] = 10;
 HEAP32[$2 + 212 >> 2] = 373672;
 HEAP32[$2 + 216 >> 2] = 112610;
 HEAP16[$2 + 220 >> 1] = 10;
 HEAP32[$2 + 224 >> 2] = 373660;
 HEAP32[$2 + 228 >> 2] = 112593;
 HEAP16[$2 + 232 >> 1] = 10;
 HEAP32[$2 + 236 >> 2] = 373668;
 HEAP32[$2 + 240 >> 2] = 112638;
 HEAP16[$2 + 244 >> 1] = 10;
 HEAP32[$2 + 248 >> 2] = 373720;
 HEAP32[$2 + 252 >> 2] = 126616;
 HEAP16[$2 + 256 >> 1] = 10;
 HEAP32[$2 + 260 >> 2] = $2 + 328;
 HEAP32[$2 + 264 >> 2] = 126608;
 HEAP16[$2 + 268 >> 1] = 10;
 HEAP32[$2 + 272 >> 2] = $2 + 324;
 HEAP32[$2 + 276 >> 2] = 126299;
 HEAP16[$2 + 280 >> 1] = 10;
 HEAP32[$2 + 284 >> 2] = $2 + 320;
 HEAP32[$2 + 288 >> 2] = 126291;
 HEAP16[$2 + 292 >> 1] = 10;
 HEAP32[$2 + 296 >> 2] = $2 + 316;
 HEAP32[$2 + 300 >> 2] = 116011;
 HEAP16[$2 + 304 >> 1] = 10;
 HEAP32[$2 + 308 >> 2] = $2 + 312;
 label$1: {
  if (HEAP8[$2 + 359 | 0] & 1) {
   HEAP32[$2 + 364 >> 2] = jsvCreateConfigObject($2, 26);
   break label$1;
  }
  if (jsvReadConfigObject(HEAP32[$2 + 360 >> 2], $2, 26) & 1) {
   HEAP32[93413] = HEAP32[93413] & -3 | (HEAP8[$2 + 358 | 0] & 1 ? 2 : 0);
   HEAP32[93413] = HEAP32[93413] & -5 | (HEAP8[$2 + 357 | 0] & 1 ? 4 : 0);
   HEAP32[93413] = HEAP32[93413] & -9 | (HEAP8[$2 + 356 | 0] & 1 ? 8 : 0);
   HEAP32[93413] = HEAP32[93413] & -2 | HEAP8[$2 + 355 | 0] & 1;
   HEAP32[93413] = HEAP32[93413] & -17 | (HEAP8[$2 + 354 | 0] & 1 ? 16 : 0);
   HEAP32[93413] = HEAP32[93413] & -33 | (HEAP8[$2 + 353 | 0] & 1 ? 32 : 0);
   HEAP32[93413] = HEAP32[93413] & -65 | (HEAP8[$2 + 352 | 0] & 1 ? 64 : 0);
   HEAP32[93413] = HEAP32[93413] & -2049 | (HEAP8[$2 + 351 | 0] & 1 ? 2048 : 0);
   if (HEAP32[93418] < 0) {
    HEAP32[93418] = 0;
   }
   if (HEAP32[93415] < 0) {
    HEAP32[93415] = 0;
   }
   if (HEAP32[93417] < 0) {
    HEAP32[93417] = 0;
   }
   HEAP16[89281] = int_sqrt32(HEAP32[$2 + 336 >> 2]);
   HEAP16[89282] = int_sqrt32(HEAP32[$2 + 332 >> 2]);
   HEAP16[186824] = HEAP32[$2 + 328 >> 2];
   HEAP16[186825] = HEAP32[$2 + 324 >> 2];
   HEAP16[89279] = HEAP32[$2 + 320 >> 2];
   HEAP16[89280] = HEAP32[$2 + 316 >> 2];
  }
  HEAP32[$2 + 364 >> 2] = 0;
 }
 __stack_pointer = $2 + 368 | 0;
 return HEAP32[$2 + 364 >> 2];
}

function lcdSetPixels_ArrayBuffer($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 128 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 124 >> 2] = $0;
 HEAP32[$5 + 120 >> 2] = $1;
 HEAP32[$5 + 116 >> 2] = $2;
 HEAP32[$5 + 112 >> 2] = $3;
 HEAP32[$5 + 108 >> 2] = $4;
 $0 = HEAP32[$5 + 124 >> 2];
 HEAP32[$5 + 104 >> 2] = HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24);
 HEAP32[$5 + 100 >> 2] = lcdGetPixelIndex_ArrayBuffer(HEAP32[$5 + 124 >> 2], HEAP32[$5 + 120 >> 2], HEAP32[$5 + 116 >> 2], HEAP32[$5 + 112 >> 2]);
 jsvArrayBufferIteratorNew($5 + 40 | 0, HEAP32[$5 + 104 >> 2], HEAP32[$5 + 100 >> 2] >>> 3 | 0);
 HEAP32[$5 + 36 >> 2] = (1 << HEAPU8[HEAP32[$5 + 124 >> 2] + 16 | 0]) - 1;
 label$1: {
  if (HEAP32[$5 + 108 >> 2]) {
   $0 = 0;
   if (HEAP32[$5 + 36 >> 2] != (HEAP32[$5 + 108 >> 2] & HEAP32[$5 + 36 >> 2])) {
    break label$1;
   }
  }
  $0 = HEAP32[$5 + 124 >> 2];
  $0 = ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 2) != 0 ^ -1;
 }
 HEAP8[$5 + 35 | 0] = $0 & 1;
 HEAP32[$5 + 28 >> 2] = HEAPU8[HEAP32[$5 + 124 >> 2] + 16 | 0];
 $0 = HEAP32[$5 + 124 >> 2];
 if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 8) {
  HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 28 >> 2] << 1;
  HEAP8[$5 + 35 | 0] = 0;
 }
 while (1) {
  label$5: {
   $0 = HEAP32[$5 + 112 >> 2];
   HEAP32[$5 + 112 >> 2] = $0 - 1;
   if (!$0) {
    break label$5;
   }
   label$6: {
    if (HEAPU8[HEAP32[$5 + 124 >> 2] + 16 | 0] & 7) {
     HEAP32[$5 + 100 >> 2] = HEAP32[$5 + 100 >> 2] & 7;
     if (!(HEAP32[$5 + 100 >> 2] | !(HEAP8[$5 + 35 | 0] & 1))) {
      HEAP32[$5 + 24 >> 2] = Math_imul(HEAPU8[HEAP32[$5 + 124 >> 2] + 16 | 0], HEAP32[$5 + 112 >> 2] + 1 | 0) >> 3;
      if (HEAP32[$5 + 24 >> 2]) {
       HEAP8[$5 + 23 | 0] = HEAP32[$5 + 108 >> 2] ? 255 : 0;
       HEAP32[$5 + 112 >> 2] = (HEAP32[$5 + 112 >> 2] + 1 | 0) - ((HEAP32[$5 + 24 >> 2] << 3) / HEAPU8[HEAP32[$5 + 124 >> 2] + 16 | 0] | 0);
       while (1) {
        $0 = HEAP32[$5 + 24 >> 2];
        HEAP32[$5 + 24 >> 2] = $0 - 1;
        if ($0) {
         jsvArrayBufferIteratorSetByteValue($5 + 40 | 0, HEAP8[$5 + 23 | 0]);
         jsvArrayBufferIteratorNext($5 + 40 | 0);
         continue;
        }
        break;
       }
       continue;
      }
     }
     HEAP32[$5 + 16 >> 2] = (1 << HEAPU8[HEAP32[$5 + 124 >> 2] + 16 | 0]) - 1;
     HEAP32[$5 + 12 >> 2] = jsvArrayBufferIteratorGetIntegerValue($5 + 40 | 0);
     $0 = HEAP32[$5 + 124 >> 2];
     if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 4) {
      $0 = 8 - (HEAP32[$5 + 100 >> 2] + HEAPU8[HEAP32[$5 + 124 >> 2] + 16 | 0] | 0) | 0;
     } else {
      $0 = HEAP32[$5 + 100 >> 2];
     }
     HEAP32[$5 + 8 >> 2] = $0;
     jsvArrayBufferIteratorSetByteValue($5 + 40 | 0, (HEAP32[$5 + 12 >> 2] & (HEAP32[$5 + 16 >> 2] << HEAP32[$5 + 8 >> 2] ^ -1) | (HEAP32[$5 + 108 >> 2] & HEAP32[$5 + 16 >> 2]) << HEAP32[$5 + 8 >> 2]) << 24 >> 24);
     $0 = HEAP32[$5 + 124 >> 2];
     label$14: {
      if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 2) {
       jsvArrayBufferIteratorNext($5 + 40 | 0);
       break label$14;
      }
      HEAP32[$5 + 100 >> 2] = HEAP32[$5 + 28 >> 2] + HEAP32[$5 + 100 >> 2];
      if (HEAPU32[$5 + 100 >> 2] >= 8) {
       jsvArrayBufferIteratorNext($5 + 40 | 0);
      }
     }
     break label$6;
    }
    $0 = HEAP32[$5 + 124 >> 2];
    label$17: {
     if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 4) {
      HEAP32[$5 + 4 >> 2] = HEAPU8[HEAP32[$5 + 124 >> 2] + 16 | 0] - 8;
      while (1) {
       if (HEAP32[$5 + 4 >> 2] >= 0) {
        jsvArrayBufferIteratorSetByteValue($5 + 40 | 0, HEAP32[$5 + 108 >> 2] >>> HEAP32[$5 + 4 >> 2] << 24 >> 24);
        jsvArrayBufferIteratorNext($5 + 40 | 0);
        HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] - 8;
        continue;
       }
       break;
      }
      break label$17;
     }
     HEAP32[$5 >> 2] = 0;
     while (1) {
      if (HEAP32[$5 >> 2] < HEAPU8[HEAP32[$5 + 124 >> 2] + 16 | 0]) {
       jsvArrayBufferIteratorSetByteValue($5 + 40 | 0, HEAP32[$5 + 108 >> 2] >>> HEAP32[$5 >> 2] << 24 >> 24);
       jsvArrayBufferIteratorNext($5 + 40 | 0);
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 8;
       continue;
      }
      break;
     }
    }
   }
   continue;
  }
  break;
 }
 jsvArrayBufferIteratorFree($5 + 40 | 0);
 __stack_pointer = $5 + 128 | 0;
}

function tflite__ops__micro__quantize__Prepare_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 160 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 152 >> 2] = $0;
 HEAP32[$2 + 148 >> 2] = $1;
 label$1: {
  if (!HEAP32[HEAP32[$2 + 148 >> 2] + 8 >> 2]) {
   break label$1;
  }
 }
 HEAP32[$2 + 144 >> 2] = HEAP32[HEAP32[$2 + 148 >> 2] + 8 >> 2];
 label$2: {
  if ((tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 148 >> 2]) | 0) != 1) {
   $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 152 >> 2];
   $3 = tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 148 >> 2]);
   HEAP32[$2 + 12 >> 2] = 1;
   HEAP32[$2 + 8 >> 2] = $3;
   HEAP32[$2 + 4 >> 2] = 126714;
   HEAP32[$2 >> 2] = 142838;
   FUNCTION_TABLE[$0 | 0]($1, 143069, $2);
   HEAP32[$2 + 156 >> 2] = 1;
   break label$2;
  }
  if ((tflite__NumOutputs_28TfLiteNode_20const__29(HEAP32[$2 + 148 >> 2]) | 0) != 1) {
   $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 152 >> 2];
   $3 = tflite__NumOutputs_28TfLiteNode_20const__29(HEAP32[$2 + 148 >> 2]);
   HEAP32[$2 + 28 >> 2] = 1;
   HEAP32[$2 + 24 >> 2] = $3;
   HEAP32[$2 + 20 >> 2] = 126714;
   HEAP32[$2 + 16 >> 2] = 142821;
   FUNCTION_TABLE[$0 | 0]($1, 143069, $2 + 16 | 0);
   HEAP32[$2 + 156 >> 2] = 1;
   break label$2;
  }
  HEAP32[$2 + 140 >> 2] = tflite__GetInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 152 >> 2], HEAP32[$2 + 148 >> 2], 0);
  HEAP32[$2 + 136 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 152 >> 2], HEAP32[$2 + 148 >> 2], 0);
  if (HEAP32[HEAP32[$2 + 136 >> 2] >> 2] != 1) {
   $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 152 >> 2];
   $3 = HEAP32[HEAP32[$2 + 136 >> 2] >> 2];
   HEAP32[$2 + 44 >> 2] = 1;
   HEAP32[$2 + 40 >> 2] = $3;
   HEAP32[$2 + 36 >> 2] = 117441;
   HEAP32[$2 + 32 >> 2] = 119904;
   FUNCTION_TABLE[$0 | 0]($1, 143069, $2 + 32 | 0);
   HEAP32[$2 + 156 >> 2] = 1;
   break label$2;
  }
  HEAP32[$2 + 132 >> 2] = HEAP32[HEAP32[$2 + 136 >> 2] + 4 >> 2];
  if (!HEAP32[$2 + 132 >> 2]) {
   $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 152 >> 2];
   HEAP32[$2 + 112 >> 2] = 117421;
   FUNCTION_TABLE[$0 | 0]($1, 127303, $2 + 112 | 0);
   HEAP32[$2 + 156 >> 2] = 1;
   break label$2;
  }
  if (!HEAP32[HEAP32[$2 + 132 >> 2] >> 2]) {
   $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 152 >> 2];
   HEAP32[$2 + 96 >> 2] = 120229;
   FUNCTION_TABLE[$0 | 0]($1, 127303, $2 + 96 | 0);
   HEAP32[$2 + 156 >> 2] = 1;
   break label$2;
  }
  if (HEAP32[HEAP32[HEAP32[$2 + 132 >> 2] >> 2] >> 2] != 1) {
   $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 152 >> 2];
   HEAP32[$2 + 80 >> 2] = 126678;
   FUNCTION_TABLE[$0 | 0]($1, 127303, $2 + 80 | 0);
   HEAP32[$2 + 156 >> 2] = 1;
   break label$2;
  }
  if (!(HEAP32[HEAP32[$2 + 140 >> 2] + 28 >> 2] == 1 | HEAP32[HEAP32[$2 + 140 >> 2] + 28 >> 2] == 7 | HEAP32[HEAP32[$2 + 140 >> 2] + 28 >> 2] == 9)) {
   $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 152 >> 2];
   HEAP32[$2 + 64 >> 2] = 125761;
   FUNCTION_TABLE[$0 | 0]($1, 127303, $2 - -64 | 0);
   HEAP32[$2 + 156 >> 2] = 1;
   break label$2;
  }
  if (!(HEAP32[HEAP32[$2 + 136 >> 2] + 28 >> 2] == 3 | HEAP32[HEAP32[$2 + 136 >> 2] + 28 >> 2] == 9 | HEAP32[HEAP32[$2 + 136 >> 2] + 28 >> 2] == 7)) {
   $0 = HEAP32[HEAP32[$2 + 152 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 152 >> 2];
   HEAP32[$2 + 48 >> 2] = 125945;
   FUNCTION_TABLE[$0 | 0]($1, 127303, $2 + 48 | 0);
   HEAP32[$2 + 156 >> 2] = 1;
   break label$2;
  }
  label$11: {
   if (!(!(HEAP32[HEAP32[$2 + 140 >> 2] + 28 >> 2] != 7 & HEAP32[HEAP32[$2 + 140 >> 2] + 28 >> 2] != 9) & HEAP32[HEAP32[$2 + 136 >> 2] + 28 >> 2] == 9)) {
    if (HEAP32[HEAP32[$2 + 140 >> 2] + 28 >> 2] != 7 | HEAP32[HEAP32[$2 + 136 >> 2] + 28 >> 2] != 7) {
     break label$11;
    }
   }
   HEAPF64[$2 + 120 >> 3] = Math_fround(HEAPF32[HEAP32[$2 + 140 >> 2] + 8 >> 2] / HEAPF32[HEAP32[$2 + 136 >> 2] + 8 >> 2]);
   tflite__QuantizeMultiplier_28double_2c_20int__2c_20int__29(HEAPF64[$2 + 120 >> 3], HEAP32[$2 + 144 >> 2] + 16 | 0, HEAP32[$2 + 144 >> 2] + 20 | 0);
  }
  HEAP32[HEAP32[$2 + 144 >> 2] >> 2] = HEAP32[HEAP32[$2 + 136 >> 2] + 12 >> 2];
  HEAPF64[HEAP32[$2 + 144 >> 2] + 8 >> 3] = HEAPF32[HEAP32[$2 + 136 >> 2] + 8 >> 2];
  HEAP32[HEAP32[$2 + 144 >> 2] + 24 >> 2] = HEAP32[HEAP32[$2 + 140 >> 2] + 12 >> 2];
  HEAP32[$2 + 156 >> 2] = 0;
 }
 __stack_pointer = $2 + 160 | 0;
 return HEAP32[$2 + 156 >> 2];
}

function jspeFactorObject() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 112 | 0;
 __stack_pointer = $0;
 label$1: {
  if ((HEAP32[86758] & 63) == 1) {
   HEAP32[$0 + 104 >> 2] = jsvNewObject();
   if (!HEAP32[$0 + 104 >> 2]) {
    jspSetError(0);
    HEAP32[$0 + 108 >> 2] = 0;
    break label$1;
   }
   if (!(jslMatch(123) & 1)) {
    HEAP32[$0 + 108 >> 2] = HEAP32[$0 + 104 >> 2];
    break label$1;
   }
   while (1) {
    $1 = 0;
    $1 = HEAP32[86758] & 80 ? $1 : HEAP16[HEAP32[44743] + 2 >> 1] != 125;
    if ($1) {
     HEAP32[$0 + 100 >> 2] = 0;
     HEAP8[$0 + 99 | 0] = 0;
     label$8: {
      if (jslIsIDOrReservedWord() & 1) {
       HEAP8[$0 + 99 | 0] = HEAP16[HEAP32[44743] + 2 >> 1] == 128;
       if ((HEAP32[86758] & 63) == 1) {
        HEAP32[$0 + 100 >> 2] = jslGetTokenValueAsVar();
       }
       jslGetNextToken();
       break label$8;
      }
      label$11: {
       if (!(!(HEAP16[HEAP32[44743] + 2 >> 1] == 131 | HEAP16[HEAP32[44743] + 2 >> 1] == 130) & HEAP16[HEAP32[44743] + 2 >> 1] != 129)) {
        HEAP32[$0 + 100 >> 2] = jspeFactor();
        break label$11;
       }
       if (!(jslMatch(128) & 1)) {
        HEAP32[$0 + 108 >> 2] = HEAP32[$0 + 104 >> 2];
        break label$1;
       }
      }
     }
     label$15: {
      label$16: {
       if (HEAP16[HEAP32[44743] + 2 >> 1] != 128) {
        break label$16;
       }
       if (!(jsvIsString(HEAP32[$0 + 100 >> 2]) & 1)) {
        break label$16;
       }
       HEAP8[$0 + 98 | 0] = jsvIsStringEqual(HEAP32[$0 + 100 >> 2], 113243) & 1;
       HEAP8[$0 + 97 | 0] = jsvIsStringEqual(HEAP32[$0 + 100 >> 2], 113239) & 1;
       if (HEAP8[$0 + 97 | 0] & 1 ? 1 : HEAP8[$0 + 98 | 0] & 1) {
        jsvUnLock(HEAP32[$0 + 100 >> 2]);
        HEAP32[$0 + 100 >> 2] = jslGetTokenValueAsVar();
        jslGetNextToken();
        HEAP32[$0 + 92 >> 2] = jspeFunctionDefinition(0);
        jsvAddGetterOrSetter(HEAP32[$0 + 104 >> 2], HEAP32[$0 + 100 >> 2], HEAP8[$0 + 98 | 0] & 1, HEAP32[$0 + 92 >> 2]);
        jsvUnLock(HEAP32[$0 + 92 >> 2]);
       }
       break label$15;
      }
      label$19: {
       if (HEAP16[HEAP32[44743] + 2 >> 1] == 40) {
        HEAP32[$0 + 88 >> 2] = jsvFindChildFromVar(HEAP32[$0 + 104 >> 2], HEAP32[$0 + 100 >> 2], 1);
        if (HEAP32[$0 + 88 >> 2]) {
         HEAP32[$0 + 84 >> 2] = jspeFunctionDefinition(0);
         jsvUnLock2(jsvSetValueOfName(HEAP32[$0 + 88 >> 2], HEAP32[$0 + 84 >> 2]), HEAP32[$0 + 84 >> 2]);
        }
        break label$19;
       }
       label$22: {
        label$23: {
         if (!(HEAP8[$0 + 99 | 0] & 1) | HEAP16[HEAP32[44743] + 2 >> 1] != 44 & HEAP16[HEAP32[44743] + 2 >> 1] != 125) {
          break label$23;
         }
         if (!(jsvIsString(HEAP32[$0 + 100 >> 2]) & 1)) {
          break label$23;
         }
         if ((HEAP32[86758] & 63) == 1) {
          HEAP32[$0 + 100 >> 2] = jsvAsArrayIndexAndUnLock(HEAP32[$0 + 100 >> 2]);
          HEAP32[$0 + 80 >> 2] = jsvFindChildFromVar(HEAP32[$0 + 104 >> 2], HEAP32[$0 + 100 >> 2], 1);
          if (HEAP32[$0 + 80 >> 2]) {
           jsvGetString(HEAP32[$0 + 100 >> 2], $0 + 16 | 0, 64);
           HEAP32[$0 + 12 >> 2] = jsvSkipNameAndUnLock(jspGetNamedVariable($0 + 16 | 0));
           jsvUnLock2(jsvSetValueOfName(HEAP32[$0 + 80 >> 2], HEAP32[$0 + 12 >> 2]), HEAP32[$0 + 12 >> 2]);
          }
         }
         break label$22;
        }
        if (!(jslMatch(58) & 1)) {
         jsvUnLock(HEAP32[$0 + 100 >> 2]);
         HEAP32[$0 + 108 >> 2] = HEAP32[$0 + 104 >> 2];
         break label$1;
        }
        if ((HEAP32[86758] & 63) == 1) {
         HEAP32[$0 + 100 >> 2] = jsvAsArrayIndexAndUnLock(HEAP32[$0 + 100 >> 2]);
         HEAP32[$0 + 8 >> 2] = jsvFindChildFromVar(HEAP32[$0 + 104 >> 2], HEAP32[$0 + 100 >> 2], 1);
         if (HEAP32[$0 + 8 >> 2]) {
          HEAP32[$0 + 4 >> 2] = jsvSkipNameAndUnLock(jspeAssignmentExpression());
          jsvUnLock2(jsvSetValueOfName(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 4 >> 2]), HEAP32[$0 + 4 >> 2]);
         }
        }
       }
      }
     }
     jsvUnLock(HEAP32[$0 + 100 >> 2]);
     if (HEAP16[HEAP32[44743] + 2 >> 1] != 125) {
      if (!(jslMatch(44) & 1)) {
       HEAP32[$0 + 108 >> 2] = HEAP32[$0 + 104 >> 2];
       break label$1;
      }
     }
     continue;
    }
    break;
   }
   if (!(jslMatch(125) & 1)) {
    HEAP32[$0 + 108 >> 2] = HEAP32[$0 + 104 >> 2];
    break label$1;
   }
   HEAP32[$0 + 108 >> 2] = HEAP32[$0 + 104 >> 2];
   break label$1;
  }
  jspeBlock();
  HEAP32[$0 + 108 >> 2] = 0;
 }
 __stack_pointer = $0 + 112 | 0;
 return HEAP32[$0 + 108 >> 2];
}

function tflite__ParseDepthwiseConv2D_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 40 >> 2] = $0;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP32[$4 + 28 >> 2] = $3;
 tflite___28anonymous_20namespace_29__CheckParsePointerParams_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29(HEAP32[$4 + 40 >> 2], HEAP32[$4 + 36 >> 2], HEAP32[$4 + 32 >> 2], HEAP32[$4 + 28 >> 2]);
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__SafeBuiltinDataAllocator_28tflite__BuiltinDataAllocator__29($4 + 24 | 0, HEAP32[$4 + 32 >> 2]);
 std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteDepthwiseConvParams__28_29($4 + 16 | 0, $4 + 24 | 0);
 label$1: {
  if (!(bool_20std____2__operator___TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20const__2c_20std__nullptr_t_29($4 + 16 | 0, 0) & 1)) {
   $0 = HEAP32[$4 + 36 >> 2];
   $1 = HEAP32[$4 + 36 >> 2];
   HEAP32[$4 >> 2] = 115968;
   tflite__ErrorReporter__ReportError_28void__2c_20char_20const__2c_20____29($0, $1, 127303, $4);
   HEAP32[$4 + 44 >> 2] = 1;
   break label$1;
  }
  HEAP32[$4 + 8 >> 2] = tflite__Operator__builtin_options_as_DepthwiseConv2DOptions_28_29_20const(HEAP32[$4 + 40 >> 2]);
  if (HEAP32[$4 + 8 >> 2]) {
   $0 = tflite___28anonymous_20namespace_29__ConvertPadding_28tflite__Padding_29(tflite__DepthwiseConv2DOptions__padding_28_29_20const(HEAP32[$4 + 8 >> 2]));
   HEAP32[std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) >> 2] = $0;
   $0 = tflite__DepthwiseConv2DOptions__stride_w_28_29_20const(HEAP32[$4 + 8 >> 2]);
   HEAP32[std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 4 >> 2] = $0;
   $0 = tflite__DepthwiseConv2DOptions__stride_h_28_29_20const(HEAP32[$4 + 8 >> 2]);
   HEAP32[std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 8 >> 2] = $0;
   $0 = tflite__DepthwiseConv2DOptions__depth_multiplier_28_29_20const(HEAP32[$4 + 8 >> 2]);
   HEAP32[std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 12 >> 2] = $0;
   $0 = tflite___28anonymous_20namespace_29__ConvertActivation_28tflite__ActivationFunctionType_29(tflite__DepthwiseConv2DOptions__fused_activation_function_28_29_20const(HEAP32[$4 + 8 >> 2]));
   HEAP32[std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 16 >> 2] = $0;
   $0 = tflite__DepthwiseConv2DOptions__dilation_w_factor_28_29_20const(HEAP32[$4 + 8 >> 2]);
   HEAP32[std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 20 >> 2] = $0;
   $0 = tflite__DepthwiseConv2DOptions__dilation_h_factor_28_29_20const(HEAP32[$4 + 8 >> 2]);
   HEAP32[std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 24 >> 2] = $0;
  }
  $0 = std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($4 + 16 | 0);
  HEAP32[HEAP32[$4 + 28 >> 2] >> 2] = $0;
  HEAP32[$4 + 44 >> 2] = 0;
 }
 HEAP32[$4 + 12 >> 2] = 1;
 std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($4 + 16 | 0);
 __stack_pointer = $4 + 48 | 0;
 return HEAP32[$4 + 44 >> 2];
}

function lcdSetPixels_ArrayBuffer_flat($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 80 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 76 >> 2] = $0;
 HEAP32[$5 + 72 >> 2] = $1;
 HEAP32[$5 + 68 >> 2] = $2;
 HEAP32[$5 + 64 >> 2] = $3;
 HEAP32[$5 + 60 >> 2] = $4;
 $0 = HEAP32[$5 + 76 >> 2];
 HEAP32[$5 + 56 >> 2] = HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24);
 HEAP32[$5 + 52 >> 2] = lcdGetPixelIndex_ArrayBuffer(HEAP32[$5 + 76 >> 2], HEAP32[$5 + 72 >> 2], HEAP32[$5 + 68 >> 2], HEAP32[$5 + 64 >> 2]);
 HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 56 >> 2] + (HEAP32[$5 + 52 >> 2] >>> 3 | 0);
 HEAP32[$5 + 48 >> 2] = (1 << HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0]) - 1;
 label$1: {
  if (HEAP32[$5 + 60 >> 2]) {
   $0 = 0;
   if (HEAP32[$5 + 48 >> 2] != (HEAP32[$5 + 60 >> 2] & HEAP32[$5 + 48 >> 2])) {
    break label$1;
   }
  }
  $0 = HEAP32[$5 + 76 >> 2];
  $0 = ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 2) != 0 ^ -1;
 }
 HEAP8[$5 + 47 | 0] = $0 & 1;
 HEAP32[$5 + 40 >> 2] = HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0];
 $0 = HEAP32[$5 + 76 >> 2];
 if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 8) {
  HEAP32[$5 + 40 >> 2] = HEAP32[$5 + 40 >> 2] << 1;
  HEAP8[$5 + 47 | 0] = 0;
 }
 while (1) {
  label$5: {
   $0 = HEAP32[$5 + 64 >> 2];
   HEAP32[$5 + 64 >> 2] = $0 - 1;
   if (!$0) {
    break label$5;
   }
   label$6: {
    if (HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0] & 7) {
     HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 52 >> 2] & 7;
     if (!(HEAP32[$5 + 52 >> 2] | !(HEAP8[$5 + 47 | 0] & 1))) {
      HEAP32[$5 + 36 >> 2] = Math_imul(HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0], HEAP32[$5 + 64 >> 2] + 1 | 0) >> 3;
      if (HEAP32[$5 + 36 >> 2]) {
       HEAP8[$5 + 35 | 0] = HEAP32[$5 + 60 >> 2] ? 255 : 0;
       HEAP32[$5 + 64 >> 2] = (HEAP32[$5 + 64 >> 2] + 1 | 0) - ((HEAP32[$5 + 36 >> 2] << 3) / HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0] | 0);
       while (1) {
        $0 = HEAP32[$5 + 36 >> 2];
        HEAP32[$5 + 36 >> 2] = $0 - 1;
        if ($0) {
         HEAP8[HEAP32[$5 + 56 >> 2]] = HEAPU8[$5 + 35 | 0];
         HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 56 >> 2] + 1;
         continue;
        }
        break;
       }
       continue;
      }
     }
     HEAP32[$5 + 28 >> 2] = (1 << HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0]) - 1;
     HEAP32[$5 + 24 >> 2] = HEAPU8[HEAP32[$5 + 56 >> 2]];
     $0 = HEAP32[$5 + 76 >> 2];
     if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 4) {
      $0 = 8 - (HEAP32[$5 + 52 >> 2] + HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0] | 0) | 0;
     } else {
      $0 = HEAP32[$5 + 52 >> 2];
     }
     HEAP32[$5 + 20 >> 2] = $0;
     HEAP8[HEAP32[$5 + 56 >> 2]] = HEAP32[$5 + 24 >> 2] & (HEAP32[$5 + 28 >> 2] << HEAP32[$5 + 20 >> 2] ^ -1) | (HEAP32[$5 + 60 >> 2] & HEAP32[$5 + 28 >> 2]) << HEAP32[$5 + 20 >> 2];
     $0 = HEAP32[$5 + 76 >> 2];
     label$14: {
      if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 2) {
       HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 56 >> 2] + 1;
       break label$14;
      }
      HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 40 >> 2] + HEAP32[$5 + 52 >> 2];
      if (HEAPU32[$5 + 52 >> 2] >= 8) {
       HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 56 >> 2] + 1;
      }
     }
     break label$6;
    }
    $0 = HEAP32[$5 + 76 >> 2];
    label$17: {
     if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 4) {
      HEAP32[$5 + 16 >> 2] = HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0] - 8;
      while (1) {
       if (HEAP32[$5 + 16 >> 2] >= 0) {
        $1 = HEAP32[$5 + 60 >> 2];
        $2 = HEAP32[$5 + 16 >> 2];
        $0 = HEAP32[$5 + 56 >> 2];
        HEAP32[$5 + 56 >> 2] = $0 + 1;
        HEAP8[$0 | 0] = $1 >>> $2;
        HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] - 8;
        continue;
       }
       break;
      }
      break label$17;
     }
     HEAP32[$5 + 12 >> 2] = 0;
     while (1) {
      if (HEAP32[$5 + 12 >> 2] < HEAPU8[HEAP32[$5 + 76 >> 2] + 16 | 0]) {
       $1 = HEAP32[$5 + 60 >> 2];
       $2 = HEAP32[$5 + 12 >> 2];
       $0 = HEAP32[$5 + 56 >> 2];
       HEAP32[$5 + 56 >> 2] = $0 + 1;
       HEAP8[$0 | 0] = $1 >>> $2;
       HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 12 >> 2] + 8;
       continue;
      }
      break;
     }
    }
   }
   continue;
  }
  break;
 }
 __stack_pointer = $5 + 80 | 0;
}

function jswFindBuiltInFunction($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1: {
  label$2: {
   label$3: {
    if (!HEAP32[$2 + 40 >> 2]) {
     break label$3;
    }
    if (jsvIsRoot(HEAP32[$2 + 40 >> 2]) & 1) {
     break label$3;
    }
    if (jsvIsNativeFunction(HEAP32[$2 + 40 >> 2]) & 1) {
     HEAP32[$2 + 28 >> 2] = jswGetSymbolListForObject(HEAP32[$2 + 40 >> 2]);
     if (HEAP32[$2 + 28 >> 2]) {
      HEAP32[$2 + 32 >> 2] = jswBinarySearch(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
      if (HEAP32[$2 + 32 >> 2]) {
       HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
       break label$1;
      }
     }
    }
    if (jsvIsPin(HEAP32[$2 + 40 >> 2]) & 1) {
     HEAP32[$2 + 32 >> 2] = jswBinarySearch(157577, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
     if (HEAP32[$2 + 32 >> 2]) {
      HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
      break label$1;
     }
    }
    if (jsvIsArray(HEAP32[$2 + 40 >> 2]) & 1) {
     HEAP32[$2 + 32 >> 2] = jswBinarySearch(157640, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
     if (HEAP32[$2 + 32 >> 2]) {
      HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
      break label$1;
     }
    }
    if (!(!(jsvIsArrayBuffer(HEAP32[$2 + 40 >> 2]) & 1) | HEAPU8[HEAP32[$2 + 40 >> 2] + 5 | 0] != 129)) {
     HEAP32[$2 + 32 >> 2] = jswBinarySearch(157658, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
     if (HEAP32[$2 + 32 >> 2]) {
      HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
      break label$1;
     }
    }
    if (!(!(jsvIsArrayBuffer(HEAP32[$2 + 40 >> 2]) & 1) | HEAPU8[HEAP32[$2 + 40 >> 2] + 5 | 0] == 129)) {
     HEAP32[$2 + 32 >> 2] = jswBinarySearch(157667, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
     if (HEAP32[$2 + 32 >> 2]) {
      HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
      break label$1;
     }
    }
    if (jsvIsNumeric(HEAP32[$2 + 40 >> 2]) & 1) {
     HEAP32[$2 + 32 >> 2] = jswBinarySearch(157775, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
     if (HEAP32[$2 + 32 >> 2]) {
      HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
      break label$1;
     }
    }
    if (jsvIsFunction(HEAP32[$2 + 40 >> 2]) & 1) {
     HEAP32[$2 + 32 >> 2] = jswBinarySearch(157802, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
     if (HEAP32[$2 + 32 >> 2]) {
      HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
      break label$1;
     }
    }
    if (jsvIsString(HEAP32[$2 + 40 >> 2]) & 1) {
     HEAP32[$2 + 32 >> 2] = jswBinarySearch(157820, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
     if (HEAP32[$2 + 32 >> 2]) {
      HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
      break label$1;
     }
    }
    label$21: {
     if (jsvIsObject(HEAP32[$2 + 40 >> 2]) & 1) {
      $0 = jsvSkipNameAndUnLock(jsvFindChildFromString(HEAP32[$2 + 40 >> 2], 123007));
      break label$21;
     }
     $0 = 0;
    }
    HEAP32[$2 + 24 >> 2] = $0;
    label$23: {
     if (jsvIsObject(HEAP32[$2 + 24 >> 2]) & 1) {
      $0 = jsvSkipNameAndUnLock(jsvFindChildFromString(HEAP32[$2 + 24 >> 2], 116071));
      break label$23;
     }
     $0 = 0;
    }
    HEAP32[$2 + 20 >> 2] = $0;
    jsvUnLock(HEAP32[$2 + 24 >> 2]);
    label$25: {
     label$26: {
      if (!HEAP32[$2 + 20 >> 2]) {
       break label$26;
      }
      if (!(jsvIsNativeFunction(HEAP32[$2 + 20 >> 2]) & 1)) {
       break label$26;
      }
      HEAP32[$2 + 16 >> 2] = jswGetSymbolListForConstructorProto(HEAP32[$2 + 20 >> 2]);
      jsvUnLock(HEAP32[$2 + 20 >> 2]);
      if (HEAP32[$2 + 16 >> 2]) {
       HEAP32[$2 + 32 >> 2] = jswBinarySearch(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
       if (HEAP32[$2 + 32 >> 2]) {
        HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
        break label$1;
       }
      }
      break label$25;
     }
     jsvUnLock(HEAP32[$2 + 20 >> 2]);
    }
    HEAP32[$2 + 32 >> 2] = jswBinarySearch(157784, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
    if (HEAP32[$2 + 32 >> 2]) {
     HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
     break label$1;
    }
    break label$2;
   }
   HEAP8[$2 + 15 | 0] = jshGetPinFromString(HEAP32[$2 + 36 >> 2]);
   if (HEAPU8[$2 + 15 | 0] != 255) {
    HEAP32[$2 + 44 >> 2] = jsvNewFromPin(HEAPU8[$2 + 15 | 0]);
    break label$1;
   }
   HEAP32[$2 + 44 >> 2] = jswBinarySearch(157586, HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
   break label$1;
  }
  HEAP32[$2 + 44 >> 2] = 0;
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function _jswrap_graphics_fillRect_col($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 176 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 168 >> 2] = $0;
 HEAP32[$6 + 164 >> 2] = $1;
 HEAP32[$6 + 160 >> 2] = $2;
 HEAP32[$6 + 156 >> 2] = $3;
 HEAP32[$6 + 152 >> 2] = $4;
 HEAP8[$6 + 151 | 0] = $5;
 _jswrap_graphics_getRect(HEAP32[$6 + 164 >> 2], $6 + 144 | 0, $6 + 160 | 0, $6 + 156 | 0, $6 + 152 | 0, $6 + 140 | 0);
 label$1: {
  if (!(graphicsGetFromVar($6 - -64 | 0, HEAP32[$6 + 168 >> 2]) & 1)) {
   HEAP32[$6 + 172 >> 2] = 0;
   break label$1;
  }
  if (HEAP8[$6 + 151 | 0] & 1) {
   $0 = HEAPU8[$6 + 81 | 0] | HEAPU8[$6 + 82 | 0] << 8 | (HEAPU8[$6 + 83 | 0] << 16 | HEAPU8[$6 + 84 | 0] << 24);
  } else {
   $0 = HEAPU8[$6 + 85 | 0] | HEAPU8[$6 + 86 | 0] << 8 | (HEAPU8[$6 + 87 | 0] << 16 | HEAPU8[$6 + 88 | 0] << 24);
  }
  HEAP32[$6 + 60 >> 2] = $0;
  label$5: {
   if (HEAP32[$6 + 140 >> 2] > 0) {
    graphicsToDeviceCoordinates($6 - -64 | 0, $6 + 144 | 0, $6 + 160 | 0);
    graphicsToDeviceCoordinates($6 - -64 | 0, $6 + 156 | 0, $6 + 152 | 0);
    if (HEAP32[$6 + 144 >> 2] > HEAP32[$6 + 156 >> 2]) {
     HEAP32[$6 + 56 >> 2] = HEAP32[$6 + 144 >> 2];
     HEAP32[$6 + 144 >> 2] = HEAP32[$6 + 156 >> 2];
     HEAP32[$6 + 156 >> 2] = HEAP32[$6 + 56 >> 2];
    }
    if (HEAP32[$6 + 160 >> 2] > HEAP32[$6 + 152 >> 2]) {
     HEAP32[$6 + 52 >> 2] = HEAP32[$6 + 160 >> 2];
     HEAP32[$6 + 160 >> 2] = HEAP32[$6 + 152 >> 2];
     HEAP32[$6 + 152 >> 2] = HEAP32[$6 + 52 >> 2];
    }
    HEAP32[$6 + 56 >> 2] = (HEAP32[$6 + 156 >> 2] - HEAP32[$6 + 144 >> 2] | 0) / 2;
    HEAP32[$6 + 52 >> 2] = (HEAP32[$6 + 152 >> 2] - HEAP32[$6 + 160 >> 2] | 0) / 2;
    if (HEAP32[$6 + 56 >> 2] < HEAP32[$6 + 140 >> 2]) {
     HEAP32[$6 + 140 >> 2] = HEAP32[$6 + 56 >> 2];
    }
    if (HEAP32[$6 + 52 >> 2] < HEAP32[$6 + 140 >> 2]) {
     HEAP32[$6 + 140 >> 2] = HEAP32[$6 + 52 >> 2];
    }
    HEAP32[$6 + 48 >> 2] = HEAP32[$6 + 144 >> 2] + HEAP32[$6 + 140 >> 2];
    HEAP32[$6 + 44 >> 2] = HEAP32[$6 + 156 >> 2] - HEAP32[$6 + 140 >> 2];
    HEAP32[$6 + 40 >> 2] = HEAP32[$6 + 160 >> 2] + HEAP32[$6 + 140 >> 2];
    HEAP32[$6 + 36 >> 2] = HEAP32[$6 + 152 >> 2] - HEAP32[$6 + 140 >> 2];
    graphicsFillRectDevice($6 - -64 | 0, HEAP32[$6 + 144 >> 2], HEAP32[$6 + 40 >> 2], HEAP32[$6 + 156 >> 2], HEAP32[$6 + 36 >> 2], HEAP32[$6 + 60 >> 2]);
    HEAP32[$6 + 32 >> 2] = 0;
    HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 140 >> 2];
    HEAP32[$6 + 24 >> 2] = Math_imul(HEAP32[$6 + 140 >> 2], HEAP32[$6 + 140 >> 2]);
    HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 24 >> 2] - Math_imul(HEAP32[$6 + 24 >> 2], (HEAP32[$6 + 140 >> 2] << 1) - 1 | 0);
    HEAP8[$6 + 15 | 0] = 0;
    while (1) {
     HEAP8[$6 + 15 | 0] = 0;
     HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 20 >> 2] << 1;
     if (HEAP32[$6 + 16 >> 2] < (Math_imul(HEAP32[$6 + 24 >> 2], (HEAP32[$6 + 32 >> 2] << 1) + 1 | 0) | 0)) {
      HEAP32[$6 + 32 >> 2] = HEAP32[$6 + 32 >> 2] + 1;
      HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 20 >> 2] + Math_imul(HEAP32[$6 + 24 >> 2], (HEAP32[$6 + 32 >> 2] << 1) + 1 | 0);
      HEAP8[$6 + 15 | 0] = 1;
     }
     if (HEAP32[$6 + 16 >> 2] > (Math_imul(HEAP32[$6 + 24 >> 2], 1 - (HEAP32[$6 + 28 >> 2] << 1) | 0) | 0)) {
      graphicsFillRectDevice($6 - -64 | 0, HEAP32[$6 + 48 >> 2] - HEAP32[$6 + 32 >> 2] | 0, HEAP32[$6 + 36 >> 2] + HEAP32[$6 + 28 >> 2] | 0, HEAP32[$6 + 44 >> 2] + HEAP32[$6 + 32 >> 2] | 0, HEAP32[$6 + 36 >> 2] + HEAP32[$6 + 28 >> 2] | 0, HEAP32[$6 + 60 >> 2]);
      graphicsFillRectDevice($6 - -64 | 0, HEAP32[$6 + 48 >> 2] - HEAP32[$6 + 32 >> 2] | 0, HEAP32[$6 + 40 >> 2] - HEAP32[$6 + 28 >> 2] | 0, HEAP32[$6 + 44 >> 2] + HEAP32[$6 + 32 >> 2] | 0, HEAP32[$6 + 40 >> 2] - HEAP32[$6 + 28 >> 2] | 0, HEAP32[$6 + 60 >> 2]);
      HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 28 >> 2] - 1;
      HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 20 >> 2] - Math_imul(HEAP32[$6 + 24 >> 2], (HEAP32[$6 + 28 >> 2] << 1) - 1 | 0);
      HEAP8[$6 + 15 | 0] = 1;
     }
     $0 = 0;
     $0 = HEAP8[$6 + 15 | 0] & 1 ? HEAP32[$6 + 28 >> 2] >= 0 : $0;
     if ($0) {
      continue;
     }
     break;
    }
    break label$5;
   }
   graphicsFillRect($6 - -64 | 0, HEAP32[$6 + 144 >> 2], HEAP32[$6 + 160 >> 2], HEAP32[$6 + 156 >> 2], HEAP32[$6 + 152 >> 2], HEAP32[$6 + 60 >> 2]);
  }
  graphicsSetVar($6 - -64 | 0);
  HEAP32[$6 + 172 >> 2] = jsvLockAgain(HEAP32[$6 + 168 >> 2]);
 }
 __stack_pointer = $6 + 176 | 0;
 return HEAP32[$6 + 172 >> 2];
}

function jspeStatement() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 if (!(!(HEAP32[86758] & 8192) | HEAP16[HEAP32[44743] + 2 >> 1] == 59 | (HEAP32[86758] & 63) != 1)) {
  HEAP32[HEAP32[44743] + 8 >> 2] = HEAP32[HEAP32[44743] + 4 >> 2];
  jsiDebuggerLoop();
 }
 label$2: {
  label$3: {
   label$4: {
    if (HEAP16[HEAP32[44743] + 2 >> 1] == 128 | HEAP16[HEAP32[44743] + 2 >> 1] == 129 | (HEAP16[HEAP32[44743] + 2 >> 1] == 130 | HEAP16[HEAP32[44743] + 2 >> 1] == 131)) {
     break label$4;
    }
    if (HEAP16[HEAP32[44743] + 2 >> 1] == 133 | HEAP16[HEAP32[44743] + 2 >> 1] == 135 | (HEAP16[HEAP32[44743] + 2 >> 1] == 184 | HEAP16[HEAP32[44743] + 2 >> 1] == 182)) {
     break label$4;
    }
    if (HEAP16[HEAP32[44743] + 2 >> 1] == 183 | HEAP16[HEAP32[44743] + 2 >> 1] == 180 | (HEAP16[HEAP32[44743] + 2 >> 1] == 181 | HEAP16[HEAP32[44743] + 2 >> 1] == 175)) {
     break label$4;
    }
    if (HEAP16[HEAP32[44743] + 2 >> 1] == 190 | HEAP16[HEAP32[44743] + 2 >> 1] == 191 | (HEAP16[HEAP32[44743] + 2 >> 1] == 192 | HEAP16[HEAP32[44743] + 2 >> 1] == 196)) {
     break label$4;
    }
    if (HEAP16[HEAP32[44743] + 2 >> 1] == 152 | HEAP16[HEAP32[44743] + 2 >> 1] == 153 | (HEAP16[HEAP32[44743] + 2 >> 1] == 33 | HEAP16[HEAP32[44743] + 2 >> 1] == 45)) {
     break label$4;
    }
    if (HEAP16[HEAP32[44743] + 2 >> 1] == 43 | HEAP16[HEAP32[44743] + 2 >> 1] == 126 | HEAP16[HEAP32[44743] + 2 >> 1] == 91) {
     break label$4;
    }
    if (HEAP16[HEAP32[44743] + 2 >> 1] != 40) {
     break label$3;
    }
   }
   HEAP32[$0 + 12 >> 2] = jspeExpression();
   break label$2;
  }
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 123) {
   if (!(jspCheckStackPosition() & 1)) {
    HEAP32[$0 + 12 >> 2] = 0;
    break label$2;
   }
   jspeBlock();
   HEAP32[$0 + 12 >> 2] = 0;
   break label$2;
  }
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 59) {
   jslGetNextToken();
   HEAP32[$0 + 12 >> 2] = 0;
   break label$2;
  }
  if (!(!(HEAP16[HEAP32[44743] + 2 >> 1] == 172 | HEAP16[HEAP32[44743] + 2 >> 1] == 173) & HEAP16[HEAP32[44743] + 2 >> 1] != 174)) {
   HEAP32[$0 + 12 >> 2] = jspeStatementVar();
   break label$2;
  }
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 163) {
   HEAP32[$0 + 12 >> 2] = jspeStatementIf();
   break label$2;
  }
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 165) {
   HEAP32[$0 + 12 >> 2] = jspeStatementDoOrWhile(0);
   break label$2;
  }
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 166) {
   HEAP32[$0 + 12 >> 2] = jspeStatementDoOrWhile(1);
   break label$2;
  }
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 167) {
   HEAP32[$0 + 12 >> 2] = jspeStatementFor();
   break label$2;
  }
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 177) {
   HEAP32[$0 + 12 >> 2] = jspeStatementTry();
   break label$2;
  }
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 171) {
   HEAP32[$0 + 12 >> 2] = jspeStatementReturn();
   break label$2;
  }
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 176) {
   HEAP32[$0 + 12 >> 2] = jspeStatementThrow();
   break label$2;
  }
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 170) {
   HEAP32[$0 + 12 >> 2] = jspeStatementFunctionDecl(0);
   break label$2;
  }
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 194) {
   HEAP32[$0 + 12 >> 2] = jspeStatementFunctionDecl(1);
   break label$2;
  }
  label$19: {
   if (HEAP16[HEAP32[44743] + 2 >> 1] == 169) {
    jslGetNextToken();
    if ((HEAP32[86758] & 63) == 1) {
     label$22: {
      if (!(HEAP32[86758] & 512)) {
       jsExceptionHere(2, 116875, 0);
       break label$22;
      }
      HEAP32[86758] = HEAP32[86758] & -64 | 4;
     }
    }
    break label$19;
   }
   label$24: {
    if (HEAP16[HEAP32[44743] + 2 >> 1] == 168) {
     jslGetNextToken();
     if ((HEAP32[86758] & 63) == 1) {
      label$27: {
       if (!(HEAP32[86758] & 1536)) {
        jsExceptionHere(2, 116923, 0);
        break label$27;
       }
       HEAP32[86758] = HEAP32[86758] & -64 | 2;
      }
     }
     break label$24;
    }
    if (HEAP16[HEAP32[44743] + 2 >> 1] == 187) {
     HEAP32[$0 + 12 >> 2] = jspeStatementSwitch();
     break label$2;
    }
    label$30: {
     if (HEAP16[HEAP32[44743] + 2 >> 1] == 193) {
      jslGetNextToken();
      if ((HEAP32[86758] & 63) == 1) {
       jsiDebuggerLoop();
      }
      break label$30;
     }
     if (!(jslMatch(0) & 1)) {
      HEAP32[$0 + 12 >> 2] = 0;
      break label$2;
     }
    }
   }
  }
  HEAP32[$0 + 12 >> 2] = 0;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function graphicsScroll($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 HEAP32[$3 + 32 >> 2] = 0;
 HEAP32[$3 + 28 >> 2] = 0;
 HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 40 >> 2];
 HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 36 >> 2];
 graphicsToDeviceCoordinates(HEAP32[$3 + 44 >> 2], $3 + 32 | 0, $3 + 28 | 0);
 graphicsToDeviceCoordinates(HEAP32[$3 + 44 >> 2], $3 + 24 | 0, $3 + 20 | 0);
 HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 24 >> 2] - HEAP32[$3 + 32 >> 2];
 HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 20 >> 2] - HEAP32[$3 + 28 >> 2];
 $0 = HEAP32[$3 + 44 >> 2];
 HEAP32[$3 + 32 >> 2] = HEAPU8[$0 + 32 | 0] | HEAPU8[$0 + 33 | 0] << 8;
 $0 = HEAP32[$3 + 44 >> 2];
 HEAP32[$3 + 28 >> 2] = HEAPU8[$0 + 34 | 0] | HEAPU8[$0 + 35 | 0] << 8;
 $0 = HEAP32[$3 + 44 >> 2];
 HEAP32[$3 + 24 >> 2] = HEAPU8[$0 + 36 | 0] | HEAPU8[$0 + 37 | 0] << 8;
 $0 = HEAP32[$3 + 44 >> 2];
 HEAP32[$3 + 20 >> 2] = HEAPU8[$0 + 38 | 0] | HEAPU8[$0 + 39 | 0] << 8;
 HEAP8[$3 + 19 | 0] = 1;
 HEAP32[$3 + 12 >> 2] = (HEAP32[$3 + 24 >> 2] + 1 | 0) - HEAP32[$3 + 32 >> 2];
 HEAP32[$3 + 8 >> 2] = (HEAP32[$3 + 20 >> 2] + 1 | 0) - HEAP32[$3 + 28 >> 2];
 if (HEAP32[$3 + 40 >> 2] >= HEAP32[$3 + 12 >> 2]) {
  HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 12 >> 2];
  HEAP8[$3 + 19 | 0] = 0;
 }
 if (HEAP32[$3 + 40 >> 2] <= (0 - HEAP32[$3 + 12 >> 2] | 0)) {
  HEAP32[$3 + 40 >> 2] = 0 - HEAP32[$3 + 12 >> 2];
  HEAP8[$3 + 19 | 0] = 0;
 }
 if (HEAP32[$3 + 36 >> 2] >= HEAP32[$3 + 8 >> 2]) {
  HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 8 >> 2];
  HEAP8[$3 + 19 | 0] = 0;
 }
 if (HEAP32[$3 + 36 >> 2] <= (0 - HEAP32[$3 + 8 >> 2] | 0)) {
  HEAP32[$3 + 36 >> 2] = 0 - HEAP32[$3 + 8 >> 2];
  HEAP8[$3 + 19 | 0] = 0;
 }
 if (HEAP8[$3 + 19 | 0] & 1) {
  $0 = HEAP32[$3 + 44 >> 2];
  FUNCTION_TABLE[HEAPU8[$0 + 68 | 0] | HEAPU8[$0 + 69 | 0] << 8 | (HEAPU8[$0 + 70 | 0] << 16 | HEAPU8[$0 + 71 | 0] << 24)](HEAP32[$3 + 44 >> 2], HEAP32[$3 + 40 >> 2], HEAP32[$3 + 36 >> 2], HEAP32[$3 + 32 >> 2], HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
 }
 graphicsSetModified(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 32 >> 2], HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
 label$6: {
  if (HEAP32[$3 + 40 >> 2] > 0) {
   $0 = HEAP32[$3 + 44 >> 2];
   $1 = HEAP32[$3 + 44 >> 2];
   FUNCTION_TABLE[HEAPU8[$1 + 56 | 0] | HEAPU8[$1 + 57 | 0] << 8 | (HEAPU8[$1 + 58 | 0] << 16 | HEAPU8[$1 + 59 | 0] << 24)](HEAP32[$3 + 44 >> 2], HEAP32[$3 + 32 >> 2], HEAP32[$3 + 28 >> 2], (HEAP32[$3 + 32 >> 2] + HEAP32[$3 + 40 >> 2] | 0) - 1 | 0, HEAP32[$3 + 20 >> 2], HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24));
   break label$6;
  }
  if (HEAP32[$3 + 40 >> 2] < 0) {
   $0 = HEAP32[$3 + 44 >> 2];
   $1 = HEAP32[$3 + 44 >> 2];
   FUNCTION_TABLE[HEAPU8[$1 + 56 | 0] | HEAPU8[$1 + 57 | 0] << 8 | (HEAPU8[$1 + 58 | 0] << 16 | HEAPU8[$1 + 59 | 0] << 24)](HEAP32[$3 + 44 >> 2], HEAP32[$3 + 40 >> 2] + (HEAP32[$3 + 24 >> 2] + 1 | 0) | 0, HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24));
  }
 }
 label$9: {
  if (HEAP32[$3 + 36 >> 2] > 0) {
   $0 = HEAP32[$3 + 44 >> 2];
   $1 = HEAP32[$3 + 44 >> 2];
   FUNCTION_TABLE[HEAPU8[$1 + 56 | 0] | HEAPU8[$1 + 57 | 0] << 8 | (HEAPU8[$1 + 58 | 0] << 16 | HEAPU8[$1 + 59 | 0] << 24)](HEAP32[$3 + 44 >> 2], HEAP32[$3 + 32 >> 2], HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], (HEAP32[$3 + 28 >> 2] + HEAP32[$3 + 36 >> 2] | 0) - 1 | 0, HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24));
   break label$9;
  }
  if (HEAP32[$3 + 36 >> 2] < 0) {
   $0 = HEAP32[$3 + 44 >> 2];
   $1 = HEAP32[$3 + 44 >> 2];
   FUNCTION_TABLE[HEAPU8[$1 + 56 | 0] | HEAPU8[$1 + 57 | 0] << 8 | (HEAPU8[$1 + 58 | 0] << 16 | HEAPU8[$1 + 59 | 0] << 24)](HEAP32[$3 + 44 >> 2], HEAP32[$3 + 32 >> 2], HEAP32[$3 + 36 >> 2] + (HEAP32[$3 + 20 >> 2] + 1 | 0) | 0, HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24));
  }
 }
 __stack_pointer = $3 + 48 | 0;
}

function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__exp_on_interval_between_negative_one_quarter_and_0_excl_int__28gemmlowp__FixedPoint_int_2c_200__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 256 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 240 >> 2] = $0;
 HEAP32[$1 + 232 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_200___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_200___28int_29(1895147668));
 HEAP32[$1 + 224 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_200___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_200___28int_29(715827883));
 HEAP32[$1 + 208 >> 2] = HEAP32[$1 + 240 >> 2];
 HEAP32[$1 + 200 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__FixedPoint_int_2c_200___ConstantPOT__3__28_29();
 HEAP32[$1 + 216 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__operator__int_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 208 >> 2], HEAP32[$1 + 200 >> 2]);
 HEAP32[$1 + 184 >> 2] = HEAP32[$1 + 216 >> 2];
 HEAP32[$1 + 176 >> 2] = HEAP32[$1 + 216 >> 2];
 HEAP32[$1 + 192 >> 2] = gemmlowp__FixedPoint_int_2c_200_20__200__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 184 >> 2], HEAP32[$1 + 176 >> 2]);
 HEAP32[$1 + 160 >> 2] = HEAP32[$1 + 192 >> 2];
 HEAP32[$1 + 152 >> 2] = HEAP32[$1 + 216 >> 2];
 HEAP32[$1 + 168 >> 2] = gemmlowp__FixedPoint_int_2c_200_20__200__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 160 >> 2], HEAP32[$1 + 152 >> 2]);
 HEAP32[$1 + 136 >> 2] = HEAP32[$1 + 192 >> 2];
 HEAP32[$1 + 128 >> 2] = HEAP32[$1 + 192 >> 2];
 HEAP32[$1 + 144 >> 2] = gemmlowp__FixedPoint_int_2c_200_20__200__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 136 >> 2], HEAP32[$1 + 128 >> 2]);
 HEAP32[$1 + 112 >> 2] = HEAP32[$1 + 144 >> 2];
 HEAP32[$1 + 120 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SaturatingRoundingMultiplyByPOT__2_2c_20int_2c_200__28gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 112 >> 2]);
 HEAP32[$1 + 72 >> 2] = HEAP32[$1 + 120 >> 2];
 HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 168 >> 2];
 HEAP32[$1 + 80 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__operator__int_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 72 >> 2], HEAP32[$1 + 64 >> 2]);
 HEAP32[$1 + 56 >> 2] = HEAP32[$1 + 224 >> 2];
 HEAP32[$1 + 88 >> 2] = gemmlowp__FixedPoint_int_2c_200_20__200__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 80 >> 2], HEAP32[$1 + 56 >> 2]);
 HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 192 >> 2];
 HEAP32[$1 + 96 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__operator__int_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 88 >> 2], HEAP32[$1 + 48 >> 2]);
 HEAP32[$1 + 104 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SaturatingRoundingMultiplyByPOT__1_2c_20int_2c_200__28gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 96 >> 2]);
 HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 232 >> 2];
 HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 232 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 216 >> 2];
 HEAP32[$1 >> 2] = HEAP32[$1 + 104 >> 2];
 HEAP32[$1 + 16 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__operator__int_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 8 >> 2], HEAP32[$1 >> 2]);
 HEAP32[$1 + 32 >> 2] = gemmlowp__FixedPoint_int_2c_200_20__200__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 16 >> 2]);
 HEAP32[$1 + 248 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__AddSaturatingIf16Bit_int_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 40 >> 2], HEAP32[$1 + 32 >> 2]);
 __stack_pointer = $1 + 256 | 0;
 return HEAP32[$1 + 248 >> 2];
}

function tflite__MicroInterpreter__AllocateTensors_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer + -64 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 56 >> 2] = $0;
 $0 = HEAP32[$1 + 56 >> 2];
 label$1: {
  if (tflite__MicroAllocator__StartModelAllocation_28tflite__Model_20const__2c_20tflite__MicroOpResolver_20const__2c_20tflite__NodeAndRegistration___2c_20TfLiteEvalTensor___29(HEAP32[$0 + 104 >> 2], HEAP32[$0 + 4 >> 2], HEAP32[$0 + 8 >> 2], $0, $0 + 120 | 0)) {
   tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$0 + 12 >> 2], 146207, 0);
   HEAP32[$0 + 112 >> 2] = 1;
   HEAP32[$1 + 60 >> 2] = 1;
   break label$1;
  }
  tflite__internal__ContextHelper__SetTfLiteEvalTensors_28TfLiteEvalTensor__29($0 + 124 | 0, HEAP32[$0 + 120 >> 2]);
  HEAP32[$0 + 72 >> 2] = 651;
  HEAP32[$0 + 80 >> 2] = 0;
  HEAP32[$0 + 84 >> 2] = 0;
  HEAP32[$1 + 52 >> 2] = 0;
  while (1) {
   if (HEAPU32[$1 + 52 >> 2] < flatbuffers__Vector_flatbuffers__Offset_tflite__Operator____size_28_29_20const(tflite__SubGraph__operators_28_29_20const(HEAP32[$0 + 116 >> 2])) >>> 0) {
    tflite__internal__ContextHelper__SetNodeIndex_28int_29($0 + 124 | 0, HEAP32[$1 + 52 >> 2]);
    HEAP32[$1 + 48 >> 2] = HEAP32[$0 >> 2] + Math_imul(HEAP32[$1 + 52 >> 2], 28);
    HEAP32[$1 + 44 >> 2] = HEAP32[(HEAP32[$0 >> 2] + Math_imul(HEAP32[$1 + 52 >> 2], 28) | 0) + 24 >> 2];
    label$5: {
     if (HEAP32[HEAP32[$1 + 44 >> 2] + 20 >> 2] == 32) {
      HEAP32[$1 + 36 >> 2] = HEAP32[HEAP32[$1 + 48 >> 2] + 16 >> 2];
      HEAP32[$1 + 40 >> 2] = HEAP32[HEAP32[$1 + 48 >> 2] + 20 >> 2];
      break label$5;
     }
     HEAP32[$1 + 36 >> 2] = HEAP32[HEAP32[$1 + 48 >> 2] + 12 >> 2];
     HEAP32[$1 + 40 >> 2] = 0;
    }
    if (HEAP32[HEAP32[$1 + 44 >> 2] >> 2]) {
     $2 = FUNCTION_TABLE[HEAP32[HEAP32[$1 + 44 >> 2] >> 2]]($0 + 16 | 0, HEAP32[$1 + 36 >> 2], HEAP32[$1 + 40 >> 2]) | 0;
     HEAP32[HEAP32[$1 + 48 >> 2] + 8 >> 2] = $2;
    }
    HEAP32[$1 + 52 >> 2] = HEAP32[$1 + 52 >> 2] + 1;
    continue;
   }
   break;
  }
  tflite__internal__ContextHelper__SetNodeIndex_28int_29($0 + 124 | 0, -1);
  HEAP32[$0 + 80 >> 2] = 652;
  HEAP32[$1 + 32 >> 2] = 0;
  while (1) {
   if (HEAPU32[$1 + 32 >> 2] < flatbuffers__Vector_flatbuffers__Offset_tflite__Operator____size_28_29_20const(tflite__SubGraph__operators_28_29_20const(HEAP32[$0 + 116 >> 2])) >>> 0) {
    tflite__internal__ContextHelper__SetNodeIndex_28int_29($0 + 124 | 0, HEAP32[$1 + 32 >> 2]);
    HEAP32[$1 + 28 >> 2] = HEAP32[$0 >> 2] + Math_imul(HEAP32[$1 + 32 >> 2], 28);
    HEAP32[$1 + 24 >> 2] = HEAP32[(HEAP32[$0 >> 2] + Math_imul(HEAP32[$1 + 32 >> 2], 28) | 0) + 24 >> 2];
    if (HEAP32[HEAP32[$1 + 24 >> 2] + 8 >> 2]) {
     HEAP32[$1 + 20 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$1 + 24 >> 2] + 8 >> 2]]($0 + 16 | 0, HEAP32[$1 + 28 >> 2]);
     if (HEAP32[$1 + 20 >> 2]) {
      $0 = HEAP32[$0 + 12 >> 2];
      $2 = tflite___28anonymous_20namespace_29__OpNameFromRegistration_28TfLiteRegistration_20const__29(HEAP32[$1 + 24 >> 2]);
      $3 = HEAP32[$1 + 32 >> 2];
      HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 20 >> 2];
      HEAP32[$1 + 4 >> 2] = $3;
      HEAP32[$1 >> 2] = $2;
      tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 122346, $1);
      HEAP32[$1 + 60 >> 2] = 1;
      break label$1;
     }
    }
    $2 = HEAP32[$0 + 104 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
    HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 32 >> 2] + 1;
    continue;
   }
   break;
  }
  tflite__internal__ContextHelper__SetNodeIndex_28int_29($0 + 124 | 0, -1);
  HEAP32[$0 + 72 >> 2] = 0;
  HEAP32[$0 + 80 >> 2] = 0;
  HEAP32[$0 + 84 >> 2] = 653;
  HEAP32[$1 + 16 >> 2] = tflite__MicroAllocator__FinishModelAllocation_28tflite__Model_20const__2c_20TfLiteEvalTensor__29(HEAP32[$0 + 104 >> 2], HEAP32[$0 + 4 >> 2], HEAP32[$0 + 120 >> 2]);
  if (HEAP32[$1 + 16 >> 2]) {
   HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 16 >> 2];
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = tflite__MicroInterpreter__ResetVariableTensors_28_29($0);
  if (HEAP32[$1 + 12 >> 2]) {
   HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 12 >> 2];
   break label$1;
  }
  HEAP8[$0 + 108 | 0] = 1;
  HEAP32[$1 + 60 >> 2] = 0;
 }
 __stack_pointer = $1 - -64 | 0;
 return HEAP32[$1 + 60 >> 2];
}

function jswrap_object_keys_or_property_names_cb($0, $1, $2, $3) {
 var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $4 = __stack_pointer - 144 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 140 >> 2] = $0;
 HEAP32[$4 + 136 >> 2] = $1;
 HEAP32[$4 + 132 >> 2] = $2;
 HEAP32[$4 + 128 >> 2] = $3;
 label$1: {
  if (!(jsvIsIterable(HEAP32[$4 + 140 >> 2]) & 1)) {
   break label$1;
  }
  if (wasm2js_i32$0 = jsvIsArrayBuffer(HEAP32[$4 + 140 >> 2]) & 1, wasm2js_i32$1 = 0, 
  wasm2js_i32$2 = HEAP32[$4 + 136 >> 2] & 4, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) {
   break label$1;
  }
  HEAP32[$4 + 124 >> 2] = jsvGetInternalFunctionCheckerFor(HEAP32[$4 + 140 >> 2]);
  jsvIteratorNew($4 - -64 | 0, HEAP32[$4 + 140 >> 2], 0);
  while (1) {
   if (jsvIteratorHasElement($4 - -64 | 0) & 1) {
    HEAP32[$4 + 60 >> 2] = jsvIteratorGetKey($4 - -64 | 0);
    label$5: {
     label$6: {
      if (!HEAP32[$4 + 124 >> 2]) {
       break label$6;
      }
      if (!(FUNCTION_TABLE[HEAP32[$4 + 124 >> 2]](HEAP32[$4 + 60 >> 2]) & 1)) {
       break label$6;
      }
      if (!(jsvIsStringEqual(HEAP32[$4 + 60 >> 2], 116071) & 1)) {
       break label$5;
      }
     }
     HEAP32[$4 + 56 >> 2] = jsvAsStringAndUnLock(jsvCopyNameOnly(HEAP32[$4 + 60 >> 2], 0, 0));
     if (HEAP32[$4 + 56 >> 2]) {
      FUNCTION_TABLE[HEAP32[$4 + 132 >> 2]](HEAP32[$4 + 128 >> 2], HEAP32[$4 + 56 >> 2]);
      jsvUnLock(HEAP32[$4 + 56 >> 2]);
     }
    }
    jsvUnLock(HEAP32[$4 + 60 >> 2]);
    jsvIteratorNext($4 - -64 | 0);
    continue;
   }
   break;
  }
  jsvIteratorFree($4 - -64 | 0);
 }
 if (HEAP32[$4 + 136 >> 2] & 1) {
  HEAP32[$4 + 52 >> 2] = jswGetSymbolListForObjectProto(0);
  HEAP32[$4 + 48 >> 2] = jspGetPrototypeOwner(HEAP32[$4 + 140 >> 2]);
  label$9: {
   if (HEAP32[$4 + 48 >> 2]) {
    HEAP32[$4 + 44 >> 2] = jswGetSymbolListForObjectProto(HEAP32[$4 + 48 >> 2]);
    jsvUnLock(HEAP32[$4 + 48 >> 2]);
    _jswrap_object_keys_or_property_names_iterator(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 132 >> 2], HEAP32[$4 + 128 >> 2]);
    break label$9;
   }
   label$11: {
    if (jsvIsObject(HEAP32[$4 + 140 >> 2]) & 1) {
     if (!(jsvIsRoot(HEAP32[$4 + 140 >> 2]) & 1)) {
      break label$11;
     }
    }
    HEAP32[$4 + 40 >> 2] = jswGetSymbolListForObject(HEAP32[$4 + 140 >> 2]);
    _jswrap_object_keys_or_property_names_iterator(HEAP32[$4 + 40 >> 2], HEAP32[$4 + 132 >> 2], HEAP32[$4 + 128 >> 2]);
   }
  }
  if (HEAP32[$4 + 136 >> 2] & 2) {
   HEAP32[$4 + 36 >> 2] = 0;
   label$14: {
    if (!(jsvIsObject(HEAP32[$4 + 140 >> 2]) & 1)) {
     if (!(jsvIsFunction(HEAP32[$4 + 140 >> 2]) & 1)) {
      break label$14;
     }
    }
    HEAP32[$4 + 36 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 140 >> 2], 123007);
   }
   label$16: {
    if (jsvIsObject(HEAP32[$4 + 36 >> 2]) & 1) {
     jswrap_object_keys_or_property_names_cb(HEAP32[$4 + 36 >> 2], HEAP32[$4 + 136 >> 2], HEAP32[$4 + 132 >> 2], HEAP32[$4 + 128 >> 2]);
     break label$16;
    }
    HEAP32[$4 + 32 >> 2] = jswGetSymbolListForObjectProto(HEAP32[$4 + 140 >> 2]);
    _jswrap_object_keys_or_property_names_iterator(HEAP32[$4 + 32 >> 2], HEAP32[$4 + 132 >> 2], HEAP32[$4 + 128 >> 2]);
    if (HEAP32[$4 + 52 >> 2] != HEAP32[$4 + 32 >> 2]) {
     _jswrap_object_keys_or_property_names_iterator(HEAP32[$4 + 52 >> 2], HEAP32[$4 + 132 >> 2], HEAP32[$4 + 128 >> 2]);
    }
   }
   jsvUnLock(HEAP32[$4 + 36 >> 2]);
  }
  label$19: {
   if (!(jsvIsArray(HEAP32[$4 + 140 >> 2]) & 1)) {
    if (!(jsvIsString(HEAP32[$4 + 140 >> 2]) & 1)) {
     break label$19;
    }
   }
   HEAP32[$4 + 28 >> 2] = jsvNewFromString(118393);
   FUNCTION_TABLE[HEAP32[$4 + 132 >> 2]](HEAP32[$4 + 128 >> 2], HEAP32[$4 + 28 >> 2]);
   jsvUnLock(HEAP32[$4 + 28 >> 2]);
  }
 }
 if (jsvIsRoot(HEAP32[$4 + 140 >> 2]) & 1) {
  HEAP32[$4 + 24 >> 2] = 0;
  while (1) {
   if (HEAP32[$4 + 24 >> 2] < 48) {
    jshGetPinString($4 + 14 | 0, HEAP32[$4 + 24 >> 2] & 255);
    HEAP32[$4 + 8 >> 2] = jsvNewFromString($4 + 14 | 0);
    FUNCTION_TABLE[HEAP32[$4 + 132 >> 2]](HEAP32[$4 + 128 >> 2], HEAP32[$4 + 8 >> 2]);
    jsvUnLock(HEAP32[$4 + 8 >> 2]);
    HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 24 >> 2] + 1;
    continue;
   }
   break;
  }
 }
 __stack_pointer = $4 + 144 | 0;
}

function jsfWriteFile($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $6 = __stack_pointer - 128 | 0;
 $5 = $6;
 __stack_pointer = $5;
 HEAP32[$5 + 120 >> 2] = $1;
 HEAP32[$5 + 116 >> 2] = $2;
 HEAP32[$5 + 112 >> 2] = $3;
 HEAP32[$5 + 108 >> 2] = $4;
 label$1: {
  if ((HEAP32[$5 + 112 >> 2] | HEAP32[$5 + 108 >> 2]) < 0) {
   HEAP8[$5 + 127 | 0] = 0;
   break label$1;
  }
  HEAP32[$5 + 104 >> 2] = HEAP32[$5 + 108 >> 2];
  HEAP32[$5 + 100 >> 2] = 0;
  HEAP32[$5 + 96 >> 2] = jsvGetDataPointer(HEAP32[$5 + 120 >> 2], $5 + 100 | 0);
  if (!(HEAP32[$5 + 96 >> 2] | !HEAP32[$5 + 120 >> 2])) {
   HEAP32[$5 + 100 >> 2] = jsvIterateCallbackCount(HEAP32[$5 + 120 >> 2]);
   label$5: {
    if (HEAP32[$5 + 100 >> 2] + 256 >>> 0 > jsuGetFreeStack() >>> 0) {
     jsExceptionHere(1, 122957, 0);
     break label$5;
    }
    $6 = $6 - (HEAP32[$5 + 100 >> 2] + 15 & -16) | 0;
    __stack_pointer = $6;
    HEAP32[$5 + 96 >> 2] = $6;
    jsvIterateCallbackToBytes(HEAP32[$5 + 120 >> 2], HEAP32[$5 + 96 >> 2], HEAP32[$5 + 100 >> 2]);
   }
  }
  if (!HEAP32[$5 + 96 >> 2]) {
   jsExceptionHere(1, 119599, 0);
   HEAP8[$5 + 127 | 0] = 0;
   break label$1;
  }
  if (!HEAP32[$5 + 104 >> 2]) {
   HEAP32[$5 + 104 >> 2] = HEAP32[$5 + 100 >> 2];
  }
  if (!HEAP32[$5 + 104 >> 2]) {
   jsExceptionHere(1, 120066, 0);
   HEAP8[$5 + 127 | 0] = 0;
   break label$1;
  }
  HEAP32[$5 + 56 >> 2] = HEAP32[$0 + 24 >> 2];
  $1 = HEAP32[$0 + 16 >> 2];
  $2 = HEAP32[$0 + 20 >> 2];
  HEAP32[$5 + 48 >> 2] = $1;
  HEAP32[$5 + 52 >> 2] = $2;
  $1 = HEAP32[$0 + 12 >> 2];
  $2 = HEAP32[$0 + 8 >> 2];
  HEAP32[$5 + 40 >> 2] = $2;
  HEAP32[$5 + 44 >> 2] = $1;
  $2 = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$0 >> 2];
  HEAP32[$5 + 32 >> 2] = $1;
  HEAP32[$5 + 36 >> 2] = $2;
  HEAP32[$5 + 60 >> 2] = jsfFindFile($5 + 32 | 0, $5 - -64 | 0);
  label$10: {
   label$11: {
    if (!(HEAP32[$5 + 112 >> 2] ? 1 : HEAP32[$5 + 60 >> 2])) {
     break label$11;
    }
    if (HEAP32[$5 + 112 >> 2] | !HEAP32[$5 + 60 >> 2]) {
     break label$10;
    }
    if (HEAP32[$5 + 116 >> 2] != (jsfGetFileFlags($5 - -64 | 0) | 0)) {
     break label$11;
    }
    if (HEAP32[$5 + 104 >> 2] != (jsfGetFileSize($5 - -64 | 0) | 0)) {
     break label$11;
    }
    if (jsfIsErased(HEAP32[$5 + 60 >> 2], HEAP32[$5 + 104 >> 2]) & 1) {
     break label$10;
    }
   }
   label$13: {
    if (HEAP32[$5 + 112 >> 2] | !HEAP32[$5 + 60 >> 2]) {
     break label$13;
    }
    if (HEAP32[$5 + 104 >> 2] != (jsfGetFileSize($5 - -64 | 0) | 0)) {
     break label$13;
    }
    if (HEAP32[$5 + 116 >> 2] != (jsfGetFileFlags($5 - -64 | 0) | 0) | HEAP32[$5 + 100 >> 2] != HEAP32[$5 + 104 >> 2]) {
     break label$13;
    }
    if (!(jsfIsEqual(HEAP32[$5 + 60 >> 2], HEAP32[$5 + 96 >> 2], HEAP32[$5 + 100 >> 2]) & 1)) {
     break label$13;
    }
    HEAP8[$5 + 127 | 0] = 1;
    break label$1;
   }
   if (HEAP32[$5 + 60 >> 2]) {
    jsfEraseFileInternal(HEAP32[$5 + 60 >> 2], $5 - -64 | 0, 1);
   }
   $3 = HEAP32[$5 + 104 >> 2];
   $4 = HEAP32[$5 + 116 >> 2];
   HEAP32[$5 + 24 >> 2] = HEAP32[$0 + 24 >> 2];
   $2 = HEAP32[$0 + 16 >> 2];
   $1 = HEAP32[$0 + 20 >> 2];
   HEAP32[$5 + 16 >> 2] = $2;
   HEAP32[$5 + 20 >> 2] = $1;
   $2 = HEAP32[$0 + 12 >> 2];
   $1 = HEAP32[$0 + 8 >> 2];
   HEAP32[$5 + 8 >> 2] = $1;
   HEAP32[$5 + 12 >> 2] = $2;
   $1 = HEAP32[$0 + 4 >> 2];
   $2 = HEAP32[$0 >> 2];
   HEAP32[$5 >> 2] = $2;
   HEAP32[$5 + 4 >> 2] = $1;
   HEAP32[$5 + 60 >> 2] = jsfCreateFile($5, $3, $4, $5 - -64 | 0);
  }
  if (!HEAP32[$5 + 60 >> 2]) {
   jsExceptionHere(1, 120096, 0);
   HEAP8[$5 + 127 | 0] = 0;
   break label$1;
  }
  if (HEAP32[$5 + 112 >> 2] + HEAP32[$5 + 100 >> 2] >>> 0 > jsfGetFileSize($5 - -64 | 0) >>> 0) {
   jsExceptionHere(1, 119290, 0);
   HEAP8[$5 + 127 | 0] = 0;
   break label$1;
  }
  HEAP32[$5 + 60 >> 2] = HEAP32[$5 + 112 >> 2] + HEAP32[$5 + 60 >> 2];
  if (!(jsfIsErased(HEAP32[$5 + 60 >> 2], HEAP32[$5 + 100 >> 2]) & 1)) {
   jsExceptionHere(1, 122916, 0);
   HEAP8[$5 + 127 | 0] = 0;
   break label$1;
  }
  jshFlashWriteAligned(HEAP32[$5 + 96 >> 2], HEAP32[$5 + 60 >> 2], HEAP32[$5 + 100 >> 2]);
  HEAP8[$5 + 127 | 0] = 1;
 }
 __stack_pointer = $5 + 128 | 0;
 return HEAP8[$5 + 127 | 0] & 1;
}

function jswrap_espruino_mapInPlace($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 176 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 172 >> 2] = $0;
 HEAP32[$4 + 168 >> 2] = $1;
 HEAP32[$4 + 164 >> 2] = $2;
 HEAP32[$4 + 160 >> 2] = $3;
 label$1: {
  label$2: {
   if (jsvIsArrayBuffer(HEAP32[$4 + 172 >> 2]) & 1) {
    if (jsvIsArrayBuffer(HEAP32[$4 + 168 >> 2]) & 1) {
     break label$2;
    }
   }
   jsExceptionHere(1, 115226, 0);
   break label$1;
  }
  label$4: {
   if (!HEAP32[$4 + 164 >> 2]) {
    break label$4;
   }
   if (jsvIsArray(HEAP32[$4 + 164 >> 2]) & 1) {
    break label$4;
   }
   if (jsvIsArrayBuffer(HEAP32[$4 + 164 >> 2]) & 1) {
    break label$4;
   }
   if (jsvIsFunction(HEAP32[$4 + 164 >> 2]) & 1) {
    break label$4;
   }
   jsExceptionHere(1, 111671, 0);
   break label$1;
  }
  HEAP8[$4 + 159 | 0] = jsvIsFunction(HEAP32[$4 + 164 >> 2]) & 1;
  HEAP32[$4 + 152 >> 2] = (HEAPU8[HEAP32[$4 + 172 >> 2] + 5 | 0] & 15) << 3;
  HEAP8[$4 + 151 | 0] = 1;
  if (HEAP32[$4 + 160 >> 2] < 0) {
   HEAP32[$4 + 160 >> 2] = 0 - HEAP32[$4 + 160 >> 2];
   HEAP8[$4 + 151 | 0] = 0;
  }
  if (!HEAP32[$4 + 160 >> 2]) {
   HEAP32[$4 + 160 >> 2] = HEAP32[$4 + 152 >> 2];
  }
  jsvArrayBufferIteratorNew($4 + 88 | 0, HEAP32[$4 + 172 >> 2], 0);
  HEAP32[$4 + 28 >> 2] = 0;
  HEAP32[$4 + 24 >> 2] = 0;
  jsvArrayBufferIteratorNew($4 + 32 | 0, HEAP32[$4 + 168 >> 2], 0);
  while (1) {
   label$8: {
    if (!(jsvArrayBufferIteratorHasElement($4 + 88 | 0) & 1)) {
     $0 = 0;
     if (HEAP32[$4 + 24 >> 2] < HEAP32[$4 + 160 >> 2]) {
      break label$8;
     }
    }
    $0 = jsvArrayBufferIteratorHasElement($4 + 32 | 0);
   }
   if ($0 & 1) {
    label$11: {
     if (HEAP8[$4 + 159 | 0] & 1) {
      $0 = jsvArrayBufferIteratorGetIndex($4 + 88 | 0);
      break label$11;
     }
     $0 = 0;
    }
    HEAP32[$4 + 20 >> 2] = $0;
    while (1) {
     if (HEAP32[$4 + 24 >> 2] < HEAP32[$4 + 160 >> 2]) {
      label$15: {
       if (HEAP8[$4 + 151 | 0] & 1) {
        HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 28 >> 2] << HEAP32[$4 + 152 >> 2] | jsvArrayBufferIteratorGetIntegerValue($4 + 88 | 0);
        break label$15;
       }
       HEAP32[$4 + 28 >> 2] = jsvArrayBufferIteratorGetIntegerValue($4 + 88 | 0) << HEAP32[$4 + 24 >> 2] | HEAP32[$4 + 28 >> 2];
      }
      jsvArrayBufferIteratorNext($4 + 88 | 0);
      HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 152 >> 2] + HEAP32[$4 + 24 >> 2];
      continue;
     }
     break;
    }
    label$17: {
     if (HEAP8[$4 + 151 | 0] & 1) {
      HEAP32[$4 + 16 >> 2] = (1 << HEAP32[$4 + 160 >> 2]) - 1 & HEAP32[$4 + 28 >> 2] >> HEAP32[$4 + 24 >> 2] - HEAP32[$4 + 160 >> 2];
      break label$17;
     }
     HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 28 >> 2] & (1 << HEAP32[$4 + 160 >> 2]) - 1;
     HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 28 >> 2] >> HEAP32[$4 + 160 >> 2];
    }
    HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 24 >> 2] - HEAP32[$4 + 160 >> 2];
    label$19: {
     if (HEAP32[$4 + 164 >> 2]) {
      HEAP32[$4 + 12 >> 2] = 0;
      label$21: {
       if (HEAP8[$4 + 159 | 0] & 1) {
        HEAP32[$4 + 4 >> 2] = jsvNewFromInteger(HEAP32[$4 + 16 >> 2]);
        HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 20 >> 2];
        HEAP32[$4 + 12 >> 2] = jspeFunctionCall(HEAP32[$4 + 164 >> 2], 0, 0, 0, 2, $4 + 4 | 0);
        jsvUnLock(HEAP32[$4 + 4 >> 2]);
        break label$21;
       }
       label$23: {
        if (jsvIsArray(HEAP32[$4 + 164 >> 2]) & 1) {
         HEAP32[$4 + 12 >> 2] = jsvGetArrayItem(HEAP32[$4 + 164 >> 2], HEAP32[$4 + 16 >> 2]);
         break label$23;
        }
        HEAP32[$4 + 12 >> 2] = jsvArrayBufferGet(HEAP32[$4 + 164 >> 2], HEAP32[$4 + 16 >> 2]);
       }
      }
      jsvArrayBufferIteratorSetValue($4 + 32 | 0, HEAP32[$4 + 12 >> 2], 0);
      jsvUnLock(HEAP32[$4 + 12 >> 2]);
      break label$19;
     }
     jsvArrayBufferIteratorSetIntegerValue($4 + 32 | 0, HEAP32[$4 + 16 >> 2]);
    }
    jsvUnLock(HEAP32[$4 + 20 >> 2]);
    jsvArrayBufferIteratorNext($4 + 32 | 0);
    continue;
   }
   break;
  }
  jsvArrayBufferIteratorFree($4 + 88 | 0);
  jsvArrayBufferIteratorFree($4 + 32 | 0);
 }
 __stack_pointer = $4 + 176 | 0;
}

function graphicsDrawEllipse($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 80 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 76 >> 2] = $0;
 HEAP32[$5 + 72 >> 2] = $1;
 HEAP32[$5 + 68 >> 2] = $2;
 HEAP32[$5 + 64 >> 2] = $3;
 HEAP32[$5 + 60 >> 2] = $4;
 graphicsToDeviceCoordinates(HEAP32[$5 + 76 >> 2], $5 + 72 | 0, $5 + 68 | 0);
 graphicsToDeviceCoordinates(HEAP32[$5 + 76 >> 2], $5 - -64 | 0, $5 + 60 | 0);
 if (HEAP32[$5 + 72 >> 2] > HEAP32[$5 + 64 >> 2]) {
  HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 72 >> 2];
  HEAP32[$5 + 72 >> 2] = HEAP32[$5 + 64 >> 2];
  HEAP32[$5 + 64 >> 2] = HEAP32[$5 + 56 >> 2];
 }
 if (HEAP32[$5 + 68 >> 2] > HEAP32[$5 + 60 >> 2]) {
  HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 68 >> 2];
  HEAP32[$5 + 68 >> 2] = HEAP32[$5 + 60 >> 2];
  HEAP32[$5 + 60 >> 2] = HEAP32[$5 + 52 >> 2];
 }
 HEAP32[$5 + 48 >> 2] = (HEAP32[$5 + 72 >> 2] + HEAP32[$5 + 64 >> 2] | 0) / 2;
 HEAP32[$5 + 44 >> 2] = (HEAP32[$5 + 68 >> 2] + HEAP32[$5 + 60 >> 2] | 0) / 2;
 HEAP32[$5 + 40 >> 2] = (HEAP32[$5 + 64 >> 2] - HEAP32[$5 + 72 >> 2] | 0) / 2;
 HEAP32[$5 + 36 >> 2] = (HEAP32[$5 + 60 >> 2] - HEAP32[$5 + 68 >> 2] | 0) / 2;
 HEAP32[$5 + 32 >> 2] = 0;
 HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 36 >> 2];
 HEAP32[$5 + 24 >> 2] = Math_imul(HEAP32[$5 + 40 >> 2], HEAP32[$5 + 40 >> 2]);
 HEAP32[$5 + 20 >> 2] = Math_imul(HEAP32[$5 + 36 >> 2], HEAP32[$5 + 36 >> 2]);
 HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 20 >> 2] - Math_imul(HEAP32[$5 + 24 >> 2], (HEAP32[$5 + 36 >> 2] << 1) - 1 | 0);
 HEAP8[$5 + 11 | 0] = 0;
 while (1) {
  HEAP8[$5 + 11 | 0] = 0;
  $0 = HEAP32[$5 + 76 >> 2];
  graphicsSetPixelDevice(HEAP32[$5 + 76 >> 2], HEAP32[$5 + 48 >> 2] + HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2] + HEAP32[$5 + 28 >> 2] | 0, HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
  $0 = HEAP32[$5 + 76 >> 2];
  graphicsSetPixelDevice(HEAP32[$5 + 76 >> 2], HEAP32[$5 + 48 >> 2] - HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2] + HEAP32[$5 + 28 >> 2] | 0, HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
  $0 = HEAP32[$5 + 76 >> 2];
  graphicsSetPixelDevice(HEAP32[$5 + 76 >> 2], HEAP32[$5 + 48 >> 2] + HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2] - HEAP32[$5 + 28 >> 2] | 0, HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
  $0 = HEAP32[$5 + 76 >> 2];
  graphicsSetPixelDevice(HEAP32[$5 + 76 >> 2], HEAP32[$5 + 48 >> 2] - HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2] - HEAP32[$5 + 28 >> 2] | 0, HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
  HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 16 >> 2] << 1;
  if (HEAP32[$5 + 12 >> 2] < (Math_imul(HEAP32[$5 + 20 >> 2], (HEAP32[$5 + 32 >> 2] << 1) + 1 | 0) | 0)) {
   HEAP32[$5 + 32 >> 2] = HEAP32[$5 + 32 >> 2] + 1;
   HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + Math_imul(HEAP32[$5 + 20 >> 2], (HEAP32[$5 + 32 >> 2] << 1) + 1 | 0);
   HEAP8[$5 + 11 | 0] = 1;
  }
  if (HEAP32[$5 + 12 >> 2] > (Math_imul(HEAP32[$5 + 24 >> 2], 1 - (HEAP32[$5 + 28 >> 2] << 1) | 0) | 0)) {
   HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 28 >> 2] - 1;
   HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] - Math_imul(HEAP32[$5 + 24 >> 2], (HEAP32[$5 + 28 >> 2] << 1) - 1 | 0);
   HEAP8[$5 + 11 | 0] = 1;
  }
  $0 = 0;
  $0 = HEAP8[$5 + 11 | 0] & 1 ? HEAP32[$5 + 28 >> 2] >= 0 : $0;
  if ($0) {
   continue;
  }
  break;
 }
 while (1) {
  $0 = HEAP32[$5 + 32 >> 2];
  HEAP32[$5 + 32 >> 2] = $0 + 1;
  if (($0 | 0) < HEAP32[$5 + 40 >> 2]) {
   $0 = HEAP32[$5 + 76 >> 2];
   graphicsSetPixelDevice(HEAP32[$5 + 76 >> 2], HEAP32[$5 + 48 >> 2] + HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
   $0 = HEAP32[$5 + 76 >> 2];
   graphicsSetPixelDevice(HEAP32[$5 + 76 >> 2], HEAP32[$5 + 48 >> 2] - HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
   continue;
  }
  break;
 }
 __stack_pointer = $5 + 80 | 0;
}

function jswrap_onewire_search($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 96 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 88 >> 2] = $0;
 HEAP32[$2 + 84 >> 2] = $1;
 HEAP8[$2 + 83 | 0] = onewire_getpin(HEAP32[$2 + 88 >> 2]);
 label$1: {
  if (!(jshIsPinValid(HEAPU8[$2 + 83 | 0]) & 1)) {
   HEAP32[$2 + 92 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 76 >> 2] = jsvNewEmptyArray();
  if (!HEAP32[$2 + 76 >> 2]) {
   HEAP32[$2 + 92 >> 2] = 0;
   break label$1;
  }
  if (!(HEAP32[$2 + 84 >> 2] <= 255 & HEAP32[$2 + 84 >> 2] > 0)) {
   HEAP32[$2 + 84 >> 2] = 240;
  }
  HEAP32[$2 + 64 >> 2] = 0;
  HEAP32[$2 + 56 >> 2] = 0;
  HEAP32[$2 + 60 >> 2] = 0;
  HEAP32[$2 + 52 >> 2] = 1;
  while (1) {
   if (HEAP32[$2 + 52 >> 2]) {
    HEAP32[$2 + 48 >> 2] = 1;
    HEAP32[$2 + 44 >> 2] = 0;
    HEAP32[$2 + 40 >> 2] = 0;
    HEAP8[$2 + 37 | 0] = 1;
    HEAP32[$2 + 52 >> 2] = 0;
    if (!HEAP32[$2 + 56 >> 2]) {
     if (!(OneWireReset(HEAPU8[$2 + 83 | 0]) & 1)) {
      HEAP32[$2 + 64 >> 2] = 0;
      HEAP32[$2 + 56 >> 2] = 0;
      HEAP32[$2 + 60 >> 2] = 0;
      HEAP32[$2 + 92 >> 2] = HEAP32[$2 + 76 >> 2];
      break label$1;
     }
     $0 = HEAP32[$2 + 84 >> 2];
     $1 = $0 >> 31;
     OneWireWrite(HEAPU8[$2 + 83 | 0], 8, $0, $1);
     while (1) {
      label$11: {
       HEAP8[$2 + 39 | 0] = OneWireRead(HEAPU8[$2 + 83 | 0], 1);
       HEAP8[$2 + 38 | 0] = OneWireRead(HEAPU8[$2 + 83 | 0], 1);
       if (!(HEAPU8[$2 + 39 | 0] != 1 | HEAPU8[$2 + 38 | 0] != 1)) {
        break label$11;
       }
       label$13: {
        if (HEAPU8[$2 + 39 | 0] != HEAPU8[$2 + 38 | 0]) {
         HEAP8[$2 + 36 | 0] = HEAPU8[$2 + 39 | 0];
         break label$13;
        }
        label$15: {
         if (HEAP32[$2 + 48 >> 2] < HEAP32[$2 + 64 >> 2]) {
          HEAP8[$2 + 36 | 0] = (HEAPU8[HEAP32[$2 + 40 >> 2] + ($2 + 68 | 0) | 0] & HEAPU8[$2 + 37 | 0]) != 0;
          break label$15;
         }
         HEAP8[$2 + 36 | 0] = HEAP32[$2 + 48 >> 2] == HEAP32[$2 + 64 >> 2];
        }
        if (!HEAPU8[$2 + 36 | 0]) {
         HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 48 >> 2];
         if (HEAP32[$2 + 44 >> 2] < 9) {
          HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 44 >> 2];
         }
        }
       }
       label$19: {
        if (HEAPU8[$2 + 36 | 0] == 1) {
         $0 = HEAP32[$2 + 40 >> 2] + ($2 + 68 | 0) | 0;
         HEAP8[$0 | 0] = HEAPU8[$2 + 37 | 0] | HEAPU8[$0 | 0];
         break label$19;
        }
        $0 = HEAP32[$2 + 40 >> 2] + ($2 + 68 | 0) | 0;
        HEAP8[$0 | 0] = HEAPU8[$0 | 0] & ((HEAPU8[$2 + 37 | 0] ^ -1) & 255);
       }
       $1 = HEAPU8[$2 + 36 | 0];
       OneWireWrite(HEAPU8[$2 + 83 | 0], 1, $1, 0);
       HEAP32[$2 + 48 >> 2] = HEAP32[$2 + 48 >> 2] + 1;
       HEAP8[$2 + 37 | 0] = HEAPU8[$2 + 37 | 0] << 1;
       if (!HEAPU8[$2 + 37 | 0]) {
        HEAP32[$2 + 40 >> 2] = HEAP32[$2 + 40 >> 2] + 1;
        HEAP8[$2 + 37 | 0] = 1;
       }
       if (HEAP32[$2 + 40 >> 2] < 8) {
        continue;
       }
      }
      break;
     }
     if (HEAP32[$2 + 48 >> 2] >= 65) {
      HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 44 >> 2];
      if (!HEAP32[$2 + 64 >> 2]) {
       HEAP32[$2 + 56 >> 2] = 1;
      }
      HEAP32[$2 + 52 >> 2] = 1;
     }
    }
    if (!(HEAPU8[$2 + 68 | 0] ? HEAP32[$2 + 52 >> 2] : 0)) {
     HEAP32[$2 + 64 >> 2] = 0;
     HEAP32[$2 + 56 >> 2] = 0;
     HEAP32[$2 + 60 >> 2] = 0;
     HEAP32[$2 + 52 >> 2] = 0;
    }
    if (HEAP32[$2 + 52 >> 2]) {
     HEAP32[$2 + 32 >> 2] = 0;
     while (1) {
      if (HEAP32[$2 + 32 >> 2] < 8) {
       $0 = itoch(HEAPU8[HEAP32[$2 + 32 >> 2] + ($2 + 68 | 0) | 0] >>> 4 | 0);
       HEAP8[(HEAP32[$2 + 32 >> 2] << 1) + $2 | 0] = $0;
       $0 = itoch(HEAPU8[HEAP32[$2 + 32 >> 2] + ($2 + 68 | 0) | 0] & 15);
       HEAP8[((HEAP32[$2 + 32 >> 2] << 1) + 1 | 0) + $2 | 0] = $0;
       HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 32 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP8[$2 + 16 | 0] = 0;
     jsvArrayPushString(HEAP32[$2 + 76 >> 2], $2);
    }
    continue;
   }
   break;
  }
  HEAP32[$2 + 92 >> 2] = HEAP32[$2 + 76 >> 2];
 }
 __stack_pointer = $2 + 96 | 0;
 return HEAP32[$2 + 92 >> 2];
}

function tflite__ParseFullyConnected_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 40 >> 2] = $0;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP32[$4 + 28 >> 2] = $3;
 tflite___28anonymous_20namespace_29__CheckParsePointerParams_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29(HEAP32[$4 + 40 >> 2], HEAP32[$4 + 36 >> 2], HEAP32[$4 + 32 >> 2], HEAP32[$4 + 28 >> 2]);
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__SafeBuiltinDataAllocator_28tflite__BuiltinDataAllocator__29($4 + 24 | 0, HEAP32[$4 + 32 >> 2]);
 std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteFullyConnectedParams__28_29($4 + 16 | 0, $4 + 24 | 0);
 label$1: {
  if (!(bool_20std____2__operator___TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20const__2c_20std__nullptr_t_29($4 + 16 | 0, 0) & 1)) {
   $0 = HEAP32[$4 + 36 >> 2];
   $1 = HEAP32[$4 + 36 >> 2];
   HEAP32[$4 >> 2] = 115968;
   tflite__ErrorReporter__ReportError_28void__2c_20char_20const__2c_20____29($0, $1, 127303, $4);
   HEAP32[$4 + 44 >> 2] = 1;
   break label$1;
  }
  HEAP32[$4 + 8 >> 2] = tflite__Operator__builtin_options_as_FullyConnectedOptions_28_29_20const(HEAP32[$4 + 40 >> 2]);
  if (HEAP32[$4 + 8 >> 2]) {
   $0 = tflite___28anonymous_20namespace_29__ConvertActivation_28tflite__ActivationFunctionType_29(tflite__FullyConnectedOptions__fused_activation_function_28_29_20const(HEAP32[$4 + 8 >> 2]));
   HEAP32[std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) >> 2] = $0;
   $0 = tflite__FullyConnectedOptions__keep_num_dims_28_29_20const(HEAP32[$4 + 8 >> 2]);
   HEAP8[std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 8 | 0] = $0;
   $0 = tflite__FullyConnectedOptions__asymmetric_quantize_inputs_28_29_20const(HEAP32[$4 + 8 >> 2]);
   HEAP8[std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 9 | 0] = $0;
   label$4: {
    label$5: {
     switch (tflite__FullyConnectedOptions__weights_format_28_29_20const(HEAP32[$4 + 8 >> 2]) | 0) {
     case 0:
      HEAP32[std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 4 >> 2] = 0;
      break label$4;

     case 1:
      HEAP32[std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 4 >> 2] = 1;
      break label$4;

     default:
      break label$5;
     }
    }
    tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$4 + 36 >> 2], 126950, 0);
    HEAP32[$4 + 44 >> 2] = 1;
    break label$1;
   }
  }
  $0 = std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($4 + 16 | 0);
  HEAP32[HEAP32[$4 + 28 >> 2] >> 2] = $0;
  HEAP32[$4 + 44 >> 2] = 0;
 }
 HEAP32[$4 + 12 >> 2] = 1;
 std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($4 + 16 | 0);
 __stack_pointer = $4 + 48 | 0;
 return HEAP32[$4 + 44 >> 2];
}

function jsiDumpHardwareInitialisation($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 96 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 92 >> 2] = $0;
 HEAP32[$3 + 88 >> 2] = $1;
 HEAP8[$3 + 87 | 0] = $2;
 if (HEAP16[173534] & 1) {
  FUNCTION_TABLE[HEAP32[$3 + 92 >> 2]](125414, HEAP32[$3 + 88 >> 2]);
 }
 if (HEAPU8[178545] != 255) {
  $0 = HEAP32[$3 + 92 >> 2];
  $1 = HEAP32[$3 + 88 >> 2];
  HEAP32[$3 + 64 >> 2] = HEAPU8[178545];
  cbprintf($0, $1, 145893, $3 - -64 | 0);
 }
 if (HEAPU8[178546] != 255) {
  $0 = HEAP32[$3 + 92 >> 2];
  $1 = HEAP32[$3 + 88 >> 2];
  HEAP32[$3 + 48 >> 2] = HEAPU8[178546];
  cbprintf($0, $1, 145916, $3 + 48 | 0);
 }
 if (!(!(HEAP8[$3 + 87 | 0] & 1) | !HEAPU8[178976])) {
  HEAP32[$3 + 80 >> 2] = jsfGetFlags();
  $0 = HEAP32[$3 + 92 >> 2];
  $1 = HEAP32[$3 + 88 >> 2];
  HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 80 >> 2];
  cbprintf($0, $1, 145940, $3 + 32 | 0);
  jsvUnLock(HEAP32[$3 + 80 >> 2]);
 }
 jsiDumpSerialInitialisation(HEAP32[$3 + 92 >> 2], HEAP32[$3 + 88 >> 2], 125208, HEAP8[$3 + 87 | 0] & 1);
 HEAP32[$3 + 76 >> 2] = 0;
 while (1) {
  if (HEAP32[$3 + 76 >> 2] <= 0) {
   jsiDumpSerialInitialisation(HEAP32[$3 + 92 >> 2], HEAP32[$3 + 88 >> 2], jshGetDeviceString(HEAP32[$3 + 76 >> 2] + 22 & 255), HEAP8[$3 + 87 | 0] & 1);
   HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$3 + 76 >> 2] = 0;
 while (1) {
  if (HEAP32[$3 + 76 >> 2] <= 0) {
   jsiDumpDeviceInitialisation(HEAP32[$3 + 92 >> 2], HEAP32[$3 + 88 >> 2], jshGetDeviceString(HEAP32[$3 + 76 >> 2] + 25 & 255));
   HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$3 + 76 >> 2] = 0;
 while (1) {
  if (HEAP32[$3 + 76 >> 2] <= 0) {
   jsiDumpDeviceInitialisation(HEAP32[$3 + 92 >> 2], HEAP32[$3 + 88 >> 2], jshGetDeviceString(HEAP32[$3 + 76 >> 2] + 26 & 255));
   HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP8[$3 + 75 | 0] = 0;
 while (1) {
  $0 = 0;
  if (jshIsPinValid(HEAPU8[$3 + 75 | 0]) & 1) {
   $0 = HEAPU8[$3 + 75 | 0] < 48;
  }
  if ($0) {
   label$14: {
    if (HEAPU8[$3 + 75 | 0] == 5 | HEAPU8[$3 + 75 | 0] == 6 | (HEAPU8[$3 + 75 | 0] == 7 | HEAPU8[$3 + 75 | 0] == 26)) {
     break label$14;
    }
    if (HEAPU8[$3 + 75 | 0] == 27 | HEAPU8[$3 + 75 | 0] == 8 | (HEAPU8[$3 + 75 | 0] == 23 | HEAPU8[$3 + 75 | 0] == 3)) {
     break label$14;
    }
    if (HEAPU8[$3 + 75 | 0] == 33 | HEAPU8[$3 + 75 | 0] == 34 | (HEAPU8[$3 + 75 | 0] == 35 | HEAPU8[$3 + 75 | 0] == 36)) {
     break label$14;
    }
    if (HEAPU8[$3 + 75 | 0] == 19) {
     break label$14;
    }
    HEAP8[$3 + 74 | 0] = jshPinGetState(HEAPU8[$3 + 75 | 0]);
    HEAP8[$3 + 73 | 0] = HEAPU8[$3 + 74 | 0] & 15;
    label$16: {
     label$17: {
      if (HEAPU8[$3 + 73 | 0] != 1) {
       break label$17;
      }
      if (jshGetPinStateIsManual(HEAPU8[$3 + 75 | 0]) & 1) {
       break label$17;
      }
      HEAP8[$3 + 72 | 0] = (HEAPU8[$3 + 74 | 0] & 16) != 0;
      if (!(HEAP8[$3 + 72 | 0] & 1 | HEAPU8[$3 + 75 | 0] != 8)) {
       break label$14;
      }
      $0 = HEAP32[$3 + 92 >> 2];
      $1 = HEAP32[$3 + 88 >> 2];
      $2 = HEAPU8[$3 + 75 | 0];
      HEAP32[$3 + 20 >> 2] = HEAP8[$3 + 72 | 0] & 1;
      HEAP32[$3 + 16 >> 2] = $2;
      cbprintf($0, $1, 145957, $3 + 16 | 0);
      break label$16;
     }
     if (!(HEAPU8[$3 + 75 | 0] != 17 | HEAPU8[$3 + 73 | 0] != 6)) {
      break label$14;
     }
     if (!(jshIsPinStateDefault(HEAPU8[$3 + 75 | 0], HEAPU8[$3 + 73 | 0]) & 1)) {
      HEAP32[$3 + 68 >> 2] = jswrap_io_getPinMode(HEAPU8[$3 + 75 | 0]);
      if (HEAP32[$3 + 68 >> 2]) {
       $0 = HEAP32[$3 + 92 >> 2];
       $1 = HEAP32[$3 + 88 >> 2];
       $2 = HEAPU8[$3 + 75 | 0];
       $4 = HEAP32[$3 + 68 >> 2];
       HEAP32[$3 + 8 >> 2] = jshGetPinStateIsManual(HEAPU8[$3 + 75 | 0]) & 1 ? 146978 : 119417;
       HEAP32[$3 + 4 >> 2] = $4;
       HEAP32[$3 >> 2] = $2;
       cbprintf($0, $1, 145873, $3);
      }
      jsvUnLock(HEAP32[$3 + 68 >> 2]);
     }
    }
   }
   HEAP8[$3 + 75 | 0] = HEAPU8[$3 + 75 | 0] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $3 + 96 | 0;
}

function tflite__reference_ops__FullyConnected_28tflite__FullyConnectedParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0;
 $9 = __stack_pointer - 112 | 0;
 __stack_pointer = $9;
 HEAP32[$9 + 108 >> 2] = $0;
 HEAP32[$9 + 104 >> 2] = $1;
 HEAP32[$9 + 100 >> 2] = $2;
 HEAP32[$9 + 96 >> 2] = $3;
 HEAP32[$9 + 92 >> 2] = $4;
 HEAP32[$9 + 88 >> 2] = $5;
 HEAP32[$9 + 84 >> 2] = $6;
 HEAP32[$9 + 80 >> 2] = $7;
 HEAP32[$9 + 76 >> 2] = $8;
 HEAP32[$9 + 72 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] >> 2];
 HEAP32[$9 + 68 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 4 >> 2];
 HEAP32[$9 + 64 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 8 >> 2];
 HEAP32[$9 + 60 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 12 >> 2];
 HEAP32[$9 + 56 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 16 >> 2];
 HEAP32[$9 + 52 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 20 >> 2];
 HEAP32[$9 + 48 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 24 >> 2];
 label$1: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$9 + 96 >> 2]) | 0) < 2) {
   break label$1;
  }
 }
 label$2: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$9 + 80 >> 2]) | 0) <= 0) {
   break label$2;
  }
 }
 label$3: {
  if (HEAP32[$9 + 52 >> 2] > HEAP32[$9 + 48 >> 2]) {
   break label$3;
  }
 }
 HEAP32[$9 + 44 >> 2] = tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$9 + 80 >> 2]);
 HEAP32[$9 + 40 >> 2] = tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$9 + 96 >> 2]);
 HEAP32[$9 + 36 >> 2] = tflite__FlatSizeSkipDim_28tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$9 + 80 >> 2], HEAP32[$9 + 44 >> 2] - 1 | 0);
 HEAP32[$9 + 32 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$9 + 96 >> 2], HEAP32[$9 + 40 >> 2] - 2 | 0, HEAP32[$9 + 80 >> 2], HEAP32[$9 + 44 >> 2] - 1 | 0);
 HEAP32[$9 + 28 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 96 >> 2], HEAP32[$9 + 40 >> 2] - 1 | 0);
 HEAP32[$9 + 24 >> 2] = 0;
 while (1) {
  if (HEAP32[$9 + 24 >> 2] < HEAP32[$9 + 36 >> 2]) {
   HEAP32[$9 + 20 >> 2] = 0;
   while (1) {
    if (HEAP32[$9 + 20 >> 2] < HEAP32[$9 + 32 >> 2]) {
     HEAP32[$9 + 16 >> 2] = 0;
     HEAP32[$9 + 12 >> 2] = 0;
     while (1) {
      if (HEAP32[$9 + 12 >> 2] < HEAP32[$9 + 28 >> 2]) {
       HEAP32[$9 + 8 >> 2] = HEAPU8[HEAP32[$9 + 100 >> 2] + (HEAP32[$9 + 12 >> 2] + Math_imul(HEAP32[$9 + 24 >> 2], HEAP32[$9 + 28 >> 2]) | 0) | 0];
       HEAP32[$9 + 4 >> 2] = HEAPU8[HEAP32[$9 + 92 >> 2] + (HEAP32[$9 + 12 >> 2] + Math_imul(HEAP32[$9 + 20 >> 2], HEAP32[$9 + 28 >> 2]) | 0) | 0];
       HEAP32[$9 + 16 >> 2] = HEAP32[$9 + 16 >> 2] + Math_imul(HEAP32[$9 + 4 >> 2] + HEAP32[$9 + 68 >> 2] | 0, HEAP32[$9 + 8 >> 2] + HEAP32[$9 + 72 >> 2] | 0);
       HEAP32[$9 + 12 >> 2] = HEAP32[$9 + 12 >> 2] + 1;
       continue;
      }
      break;
     }
     if (HEAP32[$9 + 84 >> 2]) {
      HEAP32[$9 + 16 >> 2] = HEAP32[HEAP32[$9 + 84 >> 2] + (HEAP32[$9 + 20 >> 2] << 2) >> 2] + HEAP32[$9 + 16 >> 2];
     }
     HEAP32[$9 + 16 >> 2] = tflite__MultiplyByQuantizedMultiplier_28int_2c_20int_2c_20int_29(HEAP32[$9 + 16 >> 2], HEAP32[$9 + 60 >> 2], HEAP32[$9 + 56 >> 2]);
     HEAP32[$9 + 16 >> 2] = HEAP32[$9 + 64 >> 2] + HEAP32[$9 + 16 >> 2];
     HEAP32[$9 + 16 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($9 + 16 | 0, $9 + 52 | 0) >> 2];
     HEAP32[$9 + 16 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($9 + 16 | 0, $9 + 48 | 0) >> 2];
     HEAP8[HEAP32[$9 + 76 >> 2] + (HEAP32[$9 + 20 >> 2] + Math_imul(HEAP32[$9 + 32 >> 2], HEAP32[$9 + 24 >> 2]) | 0) | 0] = HEAP32[$9 + 16 >> 2];
     HEAP32[$9 + 20 >> 2] = HEAP32[$9 + 20 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$9 + 24 >> 2] = HEAP32[$9 + 24 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $9 + 112 | 0;
}

function lcdSetCallbacks_ArrayBuffer($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = jsvObjectGetChildIfExists(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 116403);
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 >> 2] = jsvGetDataPointer(HEAP32[$1 + 8 >> 2], $1 + 4 | 0);
 jsvUnLock(HEAP32[$1 + 8 >> 2]);
 label$1: {
  label$2: {
   if (!HEAP32[$1 >> 2]) {
    break label$2;
   }
   if (HEAPU32[$1 + 4 >> 2] < graphicsGetMemoryRequired(HEAP32[$1 + 12 >> 2]) >>> 0) {
    break label$2;
   }
   $0 = HEAP32[$1 + 12 >> 2];
   if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 1) {
    break label$2;
   }
   $0 = HEAP32[$1 + 12 >> 2];
   $2 = HEAP32[$1 >> 2];
   HEAP8[$0 + 48 | 0] = $2;
   HEAP8[$0 + 49 | 0] = $2 >>> 8;
   HEAP8[$0 + 50 | 0] = $2 >>> 16;
   HEAP8[$0 + 51 | 0] = $2 >>> 24;
   label$3: {
    label$4: {
     if (HEAPU8[HEAP32[$1 + 12 >> 2] + 16 | 0] != 1) {
      break label$4;
     }
     $0 = HEAP32[$1 + 12 >> 2];
     if (!((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 4)) {
      break label$4;
     }
     $0 = HEAP32[$1 + 12 >> 2];
     if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 11) {
      break label$4;
     }
     $0 = HEAP32[$1 + 12 >> 2];
     HEAP8[$0 + 52 | 0] = 60;
     HEAP8[$0 + 53 | 0] = 2;
     HEAP8[$0 + 54 | 0] = 0;
     HEAP8[$0 + 55 | 0] = 0;
     $0 = HEAP32[$1 + 12 >> 2];
     HEAP8[$0 + 60 | 0] = 61;
     HEAP8[$0 + 61 | 0] = 2;
     HEAP8[$0 + 62 | 0] = 0;
     HEAP8[$0 + 63 | 0] = 0;
     $0 = HEAP32[$1 + 12 >> 2];
     HEAP8[$0 + 56 | 0] = 62;
     HEAP8[$0 + 57 | 0] = 2;
     HEAP8[$0 + 58 | 0] = 0;
     HEAP8[$0 + 59 | 0] = 0;
     break label$3;
    }
    label$5: {
     label$6: {
      if (HEAPU8[HEAP32[$1 + 12 >> 2] + 16 | 0] != 8) {
       break label$6;
      }
      $0 = HEAP32[$1 + 12 >> 2];
      if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 11) {
       break label$6;
      }
      $0 = HEAP32[$1 + 12 >> 2];
      HEAP8[$0 + 52 | 0] = 63;
      HEAP8[$0 + 53 | 0] = 2;
      HEAP8[$0 + 54 | 0] = 0;
      HEAP8[$0 + 55 | 0] = 0;
      $0 = HEAP32[$1 + 12 >> 2];
      HEAP8[$0 + 60 | 0] = 64;
      HEAP8[$0 + 61 | 0] = 2;
      HEAP8[$0 + 62 | 0] = 0;
      HEAP8[$0 + 63 | 0] = 0;
      $0 = HEAP32[$1 + 12 >> 2];
      HEAP8[$0 + 56 | 0] = 65;
      HEAP8[$0 + 57 | 0] = 2;
      HEAP8[$0 + 58 | 0] = 0;
      HEAP8[$0 + 59 | 0] = 0;
      $0 = HEAP32[$1 + 12 >> 2];
      HEAP8[$0 + 68 | 0] = 66;
      HEAP8[$0 + 69 | 0] = 2;
      HEAP8[$0 + 70 | 0] = 0;
      HEAP8[$0 + 71 | 0] = 0;
      break label$5;
     }
     $0 = HEAP32[$1 + 12 >> 2];
     HEAP8[$0 + 52 | 0] = 67;
     HEAP8[$0 + 53 | 0] = 2;
     HEAP8[$0 + 54 | 0] = 0;
     HEAP8[$0 + 55 | 0] = 0;
     $0 = HEAP32[$1 + 12 >> 2];
     HEAP8[$0 + 60 | 0] = 61;
     HEAP8[$0 + 61 | 0] = 2;
     HEAP8[$0 + 62 | 0] = 0;
     HEAP8[$0 + 63 | 0] = 0;
     $0 = HEAP32[$1 + 12 >> 2];
     HEAP8[$0 + 56 | 0] = 68;
     HEAP8[$0 + 57 | 0] = 2;
     HEAP8[$0 + 58 | 0] = 0;
     HEAP8[$0 + 59 | 0] = 0;
    }
   }
   break label$1;
  }
  if (jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1) {
   $0 = HEAP32[$1 + 12 >> 2];
   $2 = HEAP32[$1 + 8 >> 2];
   HEAP8[$0 + 48 | 0] = $2;
   HEAP8[$0 + 49 | 0] = $2 >>> 8;
   HEAP8[$0 + 50 | 0] = $2 >>> 16;
   HEAP8[$0 + 51 | 0] = $2 >>> 24;
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP8[$0 + 52 | 0] = 69;
   HEAP8[$0 + 53 | 0] = 2;
   HEAP8[$0 + 54 | 0] = 0;
   HEAP8[$0 + 55 | 0] = 0;
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP8[$0 + 60 | 0] = 70;
   HEAP8[$0 + 61 | 0] = 2;
   HEAP8[$0 + 62 | 0] = 0;
   HEAP8[$0 + 63 | 0] = 0;
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP8[$0 + 56 | 0] = 71;
   HEAP8[$0 + 57 | 0] = 2;
   HEAP8[$0 + 58 | 0] = 0;
   HEAP8[$0 + 59 | 0] = 0;
  }
 }
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_graphics_blit($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 224 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 216 >> 2] = $0;
 HEAP32[$2 + 212 >> 2] = $1;
 label$1: {
  if (!(graphicsGetFromVar($2 + 136 | 0, HEAP32[$2 + 216 >> 2]) & 1)) {
   HEAP32[$2 + 220 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 132 >> 2] = HEAPU8[$2 + 148 | 0] | HEAPU8[$2 + 149 | 0] << 8;
  HEAP32[$2 + 128 >> 2] = HEAPU8[$2 + 150 | 0] | HEAPU8[$2 + 151 | 0] << 8;
  HEAP32[$2 + 124 >> 2] = 0;
  HEAP32[$2 + 120 >> 2] = 0;
  HEAP32[$2 + 116 >> 2] = 0;
  HEAP32[$2 + 112 >> 2] = 0;
  HEAP32[$2 + 108 >> 2] = 0;
  HEAP32[$2 + 104 >> 2] = 0;
  HEAP8[$2 + 103 | 0] = 0;
  HEAP32[$2 + 16 >> 2] = 126579;
  HEAP16[$2 + 20 >> 1] = 10;
  HEAP32[$2 + 24 >> 2] = $2 + 124;
  HEAP32[$2 + 28 >> 2] = 126576;
  HEAP16[$2 + 32 >> 1] = 10;
  HEAP32[$2 + 36 >> 2] = $2 + 120;
  HEAP32[$2 + 40 >> 2] = 112181;
  HEAP16[$2 + 44 >> 1] = 10;
  HEAP32[$2 + 48 >> 2] = $2 + 116;
  HEAP32[$2 + 52 >> 2] = 118679;
  HEAP16[$2 + 56 >> 1] = 10;
  HEAP32[$2 + 60 >> 2] = $2 + 112;
  HEAP32[$2 + 64 >> 2] = 126272;
  HEAP16[$2 + 68 >> 1] = 10;
  HEAP32[$2 + 72 >> 2] = $2 + 108;
  HEAP32[$2 + 76 >> 2] = 126269;
  HEAP16[$2 + 80 >> 1] = 10;
  HEAP32[$2 + 84 >> 2] = $2 + 104;
  HEAP32[$2 + 88 >> 2] = 121807;
  HEAP16[$2 + 92 >> 1] = 12;
  HEAP32[$2 + 96 >> 2] = $2 + 103;
  label$3: {
   if (jsvIsObject(HEAP32[$2 + 212 >> 2]) & 1) {
    if (jsvReadConfigObject(HEAP32[$2 + 212 >> 2], $2 + 16 | 0, 7) & 1) {
     break label$3;
    }
   }
   jsExceptionHere(1, 115348, 0);
   HEAP32[$2 + 220 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$2 + 124 >> 2] < 0) {
   HEAP32[$2 + 108 >> 2] = HEAP32[$2 + 108 >> 2] - HEAP32[$2 + 124 >> 2];
   HEAP32[$2 + 116 >> 2] = HEAP32[$2 + 124 >> 2] + HEAP32[$2 + 116 >> 2];
   HEAP32[$2 + 124 >> 2] = 0;
  }
  if (HEAP32[$2 + 120 >> 2] < 0) {
   HEAP32[$2 + 104 >> 2] = HEAP32[$2 + 104 >> 2] - HEAP32[$2 + 120 >> 2];
   HEAP32[$2 + 112 >> 2] = HEAP32[$2 + 120 >> 2] + HEAP32[$2 + 112 >> 2];
   HEAP32[$2 + 120 >> 2] = 0;
  }
  HEAP32[$2 + 12 >> 2] = (HEAP32[$2 + 124 >> 2] + HEAP32[$2 + 116 >> 2] | 0) - HEAP32[$2 + 132 >> 2];
  if (HEAP32[$2 + 12 >> 2] > 0) {
   HEAP32[$2 + 116 >> 2] = HEAP32[$2 + 116 >> 2] - HEAP32[$2 + 12 >> 2];
  }
  HEAP32[$2 + 12 >> 2] = (HEAP32[$2 + 120 >> 2] + HEAP32[$2 + 112 >> 2] | 0) - HEAP32[$2 + 128 >> 2];
  if (HEAP32[$2 + 12 >> 2] > 0) {
   HEAP32[$2 + 112 >> 2] = HEAP32[$2 + 112 >> 2] - HEAP32[$2 + 12 >> 2];
  }
  if (HEAP32[$2 + 108 >> 2] < 0) {
   HEAP32[$2 + 124 >> 2] = HEAP32[$2 + 124 >> 2] - HEAP32[$2 + 108 >> 2];
   HEAP32[$2 + 116 >> 2] = HEAP32[$2 + 108 >> 2] + HEAP32[$2 + 116 >> 2];
   HEAP32[$2 + 108 >> 2] = 0;
  }
  if (HEAP32[$2 + 104 >> 2] < 0) {
   HEAP32[$2 + 120 >> 2] = HEAP32[$2 + 120 >> 2] - HEAP32[$2 + 104 >> 2];
   HEAP32[$2 + 112 >> 2] = HEAP32[$2 + 104 >> 2] + HEAP32[$2 + 112 >> 2];
   HEAP32[$2 + 104 >> 2] = 0;
  }
  HEAP32[$2 + 12 >> 2] = (HEAP32[$2 + 108 >> 2] + HEAP32[$2 + 116 >> 2] | 0) - HEAP32[$2 + 132 >> 2];
  if (HEAP32[$2 + 12 >> 2] > 0) {
   HEAP32[$2 + 116 >> 2] = HEAP32[$2 + 116 >> 2] - HEAP32[$2 + 12 >> 2];
  }
  HEAP32[$2 + 12 >> 2] = (HEAP32[$2 + 104 >> 2] + HEAP32[$2 + 112 >> 2] | 0) - HEAP32[$2 + 128 >> 2];
  if (HEAP32[$2 + 12 >> 2] > 0) {
   HEAP32[$2 + 112 >> 2] = HEAP32[$2 + 112 >> 2] - HEAP32[$2 + 12 >> 2];
  }
  if (!(HEAP32[$2 + 116 >> 2] <= 0 & HEAP32[$2 + 112 >> 2] <= 0)) {
   FUNCTION_TABLE[HEAPU8[$2 + 200 | 0] | HEAPU8[$2 + 201 | 0] << 8 | (HEAPU8[$2 + 202 | 0] << 16 | HEAPU8[$2 + 203 | 0] << 24)]($2 + 136 | 0, HEAP32[$2 + 124 >> 2], HEAP32[$2 + 120 >> 2], HEAP32[$2 + 116 >> 2], HEAP32[$2 + 112 >> 2], HEAP32[$2 + 108 >> 2], HEAP32[$2 + 104 >> 2]);
   if (HEAP8[$2 + 103 | 0] & 1) {
    graphicsSetModified($2 + 136 | 0, HEAP32[$2 + 108 >> 2], HEAP32[$2 + 104 >> 2], HEAP32[$2 + 108 >> 2] + HEAP32[$2 + 116 >> 2] | 0, HEAP32[$2 + 104 >> 2] + HEAP32[$2 + 112 >> 2] | 0);
    graphicsSetVar($2 + 136 | 0);
   }
  }
  HEAP32[$2 + 220 >> 2] = jsvLockAgain(HEAP32[$2 + 216 >> 2]);
 }
 __stack_pointer = $2 + 224 | 0;
 return HEAP32[$2 + 220 >> 2];
}

function tflite__ParseConv2D_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 40 >> 2] = $0;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP32[$4 + 28 >> 2] = $3;
 tflite___28anonymous_20namespace_29__CheckParsePointerParams_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29(HEAP32[$4 + 40 >> 2], HEAP32[$4 + 36 >> 2], HEAP32[$4 + 32 >> 2], HEAP32[$4 + 28 >> 2]);
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__SafeBuiltinDataAllocator_28tflite__BuiltinDataAllocator__29($4 + 24 | 0, HEAP32[$4 + 32 >> 2]);
 std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteConvParams__28_29($4 + 16 | 0, $4 + 24 | 0);
 label$1: {
  if (!(bool_20std____2__operator___TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20const__2c_20std__nullptr_t_29($4 + 16 | 0, 0) & 1)) {
   $0 = HEAP32[$4 + 36 >> 2];
   $1 = HEAP32[$4 + 36 >> 2];
   HEAP32[$4 >> 2] = 115968;
   tflite__ErrorReporter__ReportError_28void__2c_20char_20const__2c_20____29($0, $1, 127303, $4);
   HEAP32[$4 + 44 >> 2] = 1;
   break label$1;
  }
  HEAP32[$4 + 8 >> 2] = tflite__Operator__builtin_options_as_Conv2DOptions_28_29_20const(HEAP32[$4 + 40 >> 2]);
  if (HEAP32[$4 + 8 >> 2]) {
   $0 = tflite___28anonymous_20namespace_29__ConvertPadding_28tflite__Padding_29(tflite__Conv2DOptions__padding_28_29_20const(HEAP32[$4 + 8 >> 2]));
   HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) >> 2] = $0;
   $0 = tflite__Conv2DOptions__stride_w_28_29_20const(HEAP32[$4 + 8 >> 2]);
   HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 4 >> 2] = $0;
   $0 = tflite__Conv2DOptions__stride_h_28_29_20const(HEAP32[$4 + 8 >> 2]);
   HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 8 >> 2] = $0;
   $0 = tflite___28anonymous_20namespace_29__ConvertActivation_28tflite__ActivationFunctionType_29(tflite__Conv2DOptions__fused_activation_function_28_29_20const(HEAP32[$4 + 8 >> 2]));
   HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 12 >> 2] = $0;
   $0 = tflite__Conv2DOptions__dilation_w_factor_28_29_20const(HEAP32[$4 + 8 >> 2]);
   HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 16 >> 2] = $0;
   $0 = tflite__Conv2DOptions__dilation_h_factor_28_29_20const(HEAP32[$4 + 8 >> 2]);
   HEAP32[std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 20 >> 2] = $0;
  }
  $0 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($4 + 16 | 0);
  HEAP32[HEAP32[$4 + 28 >> 2] >> 2] = $0;
  HEAP32[$4 + 44 >> 2] = 0;
 }
 HEAP32[$4 + 12 >> 2] = 1;
 std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($4 + 16 | 0);
 __stack_pointer = $4 + 48 | 0;
 return HEAP32[$4 + 44 >> 2];
}

function tflite__ParsePool_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 40 >> 2] = $0;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP32[$4 + 28 >> 2] = $3;
 tflite___28anonymous_20namespace_29__CheckParsePointerParams_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29(HEAP32[$4 + 40 >> 2], HEAP32[$4 + 36 >> 2], HEAP32[$4 + 32 >> 2], HEAP32[$4 + 28 >> 2]);
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__SafeBuiltinDataAllocator_28tflite__BuiltinDataAllocator__29($4 + 24 | 0, HEAP32[$4 + 32 >> 2]);
 std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLitePoolParams__28_29($4 + 16 | 0, $4 + 24 | 0);
 label$1: {
  if (!(bool_20std____2__operator___TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20const__2c_20std__nullptr_t_29($4 + 16 | 0, 0) & 1)) {
   $0 = HEAP32[$4 + 36 >> 2];
   $1 = HEAP32[$4 + 36 >> 2];
   HEAP32[$4 >> 2] = 115968;
   tflite__ErrorReporter__ReportError_28void__2c_20char_20const__2c_20____29($0, $1, 127303, $4);
   HEAP32[$4 + 44 >> 2] = 1;
   break label$1;
  }
  HEAP32[$4 + 8 >> 2] = tflite__Operator__builtin_options_as_Pool2DOptions_28_29_20const(HEAP32[$4 + 40 >> 2]);
  if (HEAP32[$4 + 8 >> 2]) {
   $0 = tflite___28anonymous_20namespace_29__ConvertPadding_28tflite__Padding_29(tflite__Pool2DOptions__padding_28_29_20const(HEAP32[$4 + 8 >> 2]));
   HEAP32[std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) >> 2] = $0;
   $0 = tflite__Pool2DOptions__stride_w_28_29_20const(HEAP32[$4 + 8 >> 2]);
   HEAP32[std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 4 >> 2] = $0;
   $0 = tflite__Pool2DOptions__stride_h_28_29_20const(HEAP32[$4 + 8 >> 2]);
   HEAP32[std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 8 >> 2] = $0;
   $0 = tflite__Pool2DOptions__filter_width_28_29_20const(HEAP32[$4 + 8 >> 2]);
   HEAP32[std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 12 >> 2] = $0;
   $0 = tflite__Pool2DOptions__filter_height_28_29_20const(HEAP32[$4 + 8 >> 2]);
   HEAP32[std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 16 >> 2] = $0;
   $0 = tflite___28anonymous_20namespace_29__ConvertActivation_28tflite__ActivationFunctionType_29(tflite__Pool2DOptions__fused_activation_function_28_29_20const(HEAP32[$4 + 8 >> 2]));
   HEAP32[std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) + 20 >> 2] = $0;
  }
  $0 = std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($4 + 16 | 0);
  HEAP32[HEAP32[$4 + 28 >> 2] >> 2] = $0;
  HEAP32[$4 + 44 >> 2] = 0;
 }
 HEAP32[$4 + 12 >> 2] = 1;
 std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($4 + 16 | 0);
 __stack_pointer = $4 + 48 | 0;
 return HEAP32[$4 + 44 >> 2];
}

function tflite__ops__micro__conv__CalculateOpData_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteConvParams_20const__2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20TfLiteType_2c_20tflite__ops__micro__conv__OpData__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 var $11 = 0;
 $11 = __stack_pointer - 128 | 0;
 __stack_pointer = $11;
 HEAP32[$11 + 120 >> 2] = $0;
 HEAP32[$11 + 116 >> 2] = $1;
 HEAP32[$11 + 112 >> 2] = $2;
 HEAP32[$11 + 108 >> 2] = $3;
 HEAP32[$11 + 104 >> 2] = $4;
 HEAP32[$11 + 100 >> 2] = $5;
 HEAP32[$11 + 96 >> 2] = $6;
 HEAP32[$11 + 92 >> 2] = $7;
 HEAP32[$11 + 88 >> 2] = $8;
 HEAP32[$11 + 84 >> 2] = $9;
 HEAP32[$11 + 80 >> 2] = $10;
 HEAP8[$11 + 79 | 0] = HEAP32[HEAP32[HEAP32[$11 + 116 >> 2] >> 2] >> 2] == 3;
 label$1: {
  if (!(HEAP8[$11 + 79 | 0] & 1 | HEAP32[HEAP32[HEAP32[$11 + 116 >> 2] >> 2] >> 2] == 2)) {
   $0 = HEAP32[HEAP32[$11 + 120 >> 2] + 20 >> 2];
   $1 = HEAP32[$11 + 120 >> 2];
   HEAP32[$11 + 16 >> 2] = 126495;
   FUNCTION_TABLE[$0 | 0]($1, 127303, $11 + 16 | 0);
   HEAP32[$11 + 124 >> 2] = 1;
   break label$1;
  }
  if (HEAP32[HEAP32[HEAP32[$11 + 116 >> 2] + 4 >> 2] >> 2] != 1) {
   $0 = HEAP32[HEAP32[$11 + 120 >> 2] + 20 >> 2];
   $1 = HEAP32[$11 + 120 >> 2];
   $2 = HEAP32[HEAP32[HEAP32[$11 + 116 >> 2] + 4 >> 2] >> 2];
   HEAP32[$11 + 12 >> 2] = 1;
   HEAP32[$11 + 8 >> 2] = $2;
   HEAP32[$11 + 4 >> 2] = 126714;
   HEAP32[$11 >> 2] = 119237;
   FUNCTION_TABLE[$0 | 0]($1, 143069, $11);
   HEAP32[$11 + 124 >> 2] = 1;
   break label$1;
  }
  HEAP32[$11 + 72 >> 2] = HEAP32[HEAP32[$11 + 112 >> 2] >> 2];
  tflite__ComputePaddingHeightWidth_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20TfLitePadding_2c_20int__2c_20int__29($11 + 56 | 0, HEAP32[HEAP32[$11 + 112 >> 2] + 8 >> 2], HEAP32[HEAP32[$11 + 112 >> 2] + 4 >> 2], HEAP32[HEAP32[$11 + 112 >> 2] + 20 >> 2], HEAP32[HEAP32[$11 + 112 >> 2] + 16 >> 2], HEAP32[$11 + 104 >> 2], HEAP32[$11 + 108 >> 2], HEAP32[$11 + 96 >> 2], HEAP32[$11 + 100 >> 2], HEAP32[$11 + 72 >> 2], $11 + 88 | 0, $11 + 92 | 0);
  $0 = HEAP32[$11 + 60 >> 2];
  $1 = HEAP32[$11 + 56 >> 2];
  $3 = $1;
  $2 = HEAP32[$11 + 80 >> 2];
  $1 = $2;
  HEAP32[$1 >> 2] = $3;
  HEAP32[$1 + 4 >> 2] = $0;
  $1 = HEAP32[$11 + 68 >> 2];
  $0 = HEAP32[$11 + 64 >> 2];
  $3 = $0;
  $0 = $2;
  HEAP32[$0 + 8 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = $1;
  if (HEAP32[$11 + 84 >> 2] != 1) {
   HEAP32[$11 + 52 >> 2] = tflite__GetInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$11 + 120 >> 2], HEAP32[$11 + 116 >> 2], 0);
   HEAP32[$11 + 48 >> 2] = tflite__GetInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$11 + 120 >> 2], HEAP32[$11 + 116 >> 2], 1);
   HEAP32[$11 + 44 >> 2] = tflite__GetOptionalInputTensor_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$11 + 120 >> 2], HEAP32[$11 + 116 >> 2], 2);
   HEAP32[$11 + 40 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$11 + 120 >> 2], HEAP32[$11 + 116 >> 2], 0);
   HEAP32[$11 + 36 >> 2] = HEAP32[HEAP32[HEAP32[$11 + 48 >> 2] + 20 >> 2] + 4 >> 2];
   HEAP32[$11 + 32 >> 2] = tflite__PopulateConvolutionQuantizationParams_28TfLiteContext__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20TfLiteFusedActivation_20const__2c_20int__2c_20int__2c_20int__2c_20int__2c_20int__2c_20int__2c_20int_29(HEAP32[$11 + 120 >> 2], HEAP32[$11 + 52 >> 2], HEAP32[$11 + 48 >> 2], HEAP32[$11 + 44 >> 2], HEAP32[$11 + 40 >> 2], HEAP32[$11 + 112 >> 2] + 12 | 0, HEAP32[$11 + 80 >> 2] + 28 | 0, HEAP32[$11 + 80 >> 2] + 32 | 0, HEAP32[$11 + 80 >> 2] + 44 | 0, HEAP32[$11 + 80 >> 2] + 48 | 0, HEAP32[HEAP32[$11 + 80 >> 2] + 36 >> 2], HEAP32[HEAP32[$11 + 80 >> 2] + 40 >> 2], HEAP32[$11 + 36 >> 2]);
   if (HEAP32[$11 + 32 >> 2]) {
    HEAP32[$11 + 124 >> 2] = HEAP32[$11 + 32 >> 2];
    break label$1;
   }
  }
  HEAP32[$11 + 124 >> 2] = 0;
 }
 __stack_pointer = $11 + 128 | 0;
 return HEAP32[$11 + 124 >> 2];
}

function jswrap_e_dumpVariables() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0;
 $0 = __stack_pointer - 128 | 0;
 __stack_pointer = $0;
 jsiConsolePrintf(146491, 0);
 HEAP32[$0 + 124 >> 2] = 0;
 while (1) {
  if (HEAPU32[$0 + 124 >> 2] < jsvGetMemoryTotal() >>> 0) {
   HEAP16[$0 + 122 >> 1] = HEAP32[$0 + 124 >> 2] + 1;
   HEAP32[$0 + 116 >> 2] = _jsvGetAddressOf(HEAPU16[$0 + 122 >> 1]);
   $1 = HEAP32[$0 + 116 >> 2];
   label$3: {
    if (!((HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & 63)) {
     break label$3;
    }
    if (jsvIsStringExt(HEAP32[$0 + 116 >> 2]) & 1) {
     break label$3;
    }
    HEAP32[$0 + 112 >> 2] = 1;
    label$4: {
     if (jsvIsFlatString(HEAP32[$0 + 116 >> 2]) & 1) {
      HEAP32[$0 + 108 >> 2] = jsvGetFlatStringBlocks(HEAP32[$0 + 116 >> 2]);
      HEAP32[$0 + 124 >> 2] = HEAP32[$0 + 108 >> 2] + HEAP32[$0 + 124 >> 2];
      HEAP32[$0 + 112 >> 2] = HEAP32[$0 + 108 >> 2] + HEAP32[$0 + 112 >> 2];
      break label$4;
     }
     if (jsvHasCharacterData(HEAP32[$0 + 116 >> 2]) & 1) {
      HEAP16[$0 + 106 >> 1] = jsvGetLastChild(HEAP32[$0 + 116 >> 2]);
      while (1) {
       if (HEAPU16[$0 + 106 >> 1]) {
        HEAP32[$0 + 100 >> 2] = jsvLock(HEAPU16[$0 + 106 >> 1]);
        HEAP32[$0 + 112 >> 2] = HEAP32[$0 + 112 >> 2] + 1;
        HEAP16[$0 + 106 >> 1] = jsvGetLastChild(HEAP32[$0 + 100 >> 2]);
        jsvUnLock(HEAP32[$0 + 100 >> 2]);
        continue;
       }
       break;
      }
     }
    }
    $2 = HEAPU16[$0 + 122 >> 1];
    $3 = HEAP32[$0 + 112 >> 2];
    $1 = HEAP32[$0 + 116 >> 2];
    HEAP32[$0 + 72 >> 2] = (HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & 63;
    HEAP32[$0 + 68 >> 2] = $3;
    HEAP32[$0 + 64 >> 2] = $2;
    jsiConsolePrintf(128030, $0 - -64 | 0);
    label$9: {
     if (jsvIsName(HEAP32[$0 + 116 >> 2]) & 1) {
      HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 116 >> 2];
      jsiConsolePrintf(127997, $0 + 16 | 0);
      break label$9;
     }
     label$11: {
      if (jsvIsNumeric(HEAP32[$0 + 116 >> 2]) & 1) {
       HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 116 >> 2];
       jsiConsolePrintf(128001, $0 + 32 | 0);
       break label$11;
      }
      label$13: {
       if (jsvIsString(HEAP32[$0 + 116 >> 2]) & 1) {
        label$15: {
         if (jsvGetStringLength(HEAP32[$0 + 116 >> 2]) >>> 0 > 20) {
          HEAP32[$0 + 96 >> 2] = jsvNewFromStringVar(HEAP32[$0 + 116 >> 2], 0, 17);
          jsvAppendString(HEAP32[$0 + 96 >> 2], 127749);
          break label$15;
         }
         HEAP32[$0 + 96 >> 2] = jsvLockAgain(HEAP32[$0 + 116 >> 2]);
        }
        HEAP32[$0 + 48 >> 2] = HEAP32[$0 + 96 >> 2];
        jsiConsolePrintf(128012, $0 + 48 | 0);
        jsvUnLock(HEAP32[$0 + 96 >> 2]);
        break label$13;
       }
       label$17: {
        if (jsvIsObject(HEAP32[$0 + 116 >> 2]) & 1) {
         jsiConsolePrintf(127989, 0);
         break label$17;
        }
        label$19: {
         if (jsvIsArray(HEAP32[$0 + 116 >> 2]) & 1) {
          jsiConsolePrintf(127982, 0);
          break label$19;
         }
         jsiConsolePrintf(128061, 0);
        }
       }
      }
     }
    }
    label$21: {
     if (!(jsvHasSingleChild(HEAP32[$0 + 116 >> 2]) & 1)) {
      if (!(jsvHasChildren(HEAP32[$0 + 116 >> 2]) & 1)) {
       break label$21;
      }
     }
     HEAP16[$0 + 94 >> 1] = jsvGetFirstChild(HEAP32[$0 + 116 >> 2]);
     while (1) {
      if (HEAPU16[$0 + 94 >> 1]) {
       HEAP32[$0 + 88 >> 2] = jsvLock(HEAPU16[$0 + 94 >> 1]);
       HEAP32[$0 >> 2] = HEAPU16[$0 + 94 >> 1];
       jsiConsolePrintf(128036, $0);
       label$25: {
        if (jsvHasChildren(HEAP32[$0 + 116 >> 2]) & 1) {
         HEAP16[$0 + 94 >> 1] = jsvGetNextSibling(HEAP32[$0 + 88 >> 2]);
         break label$25;
        }
        HEAP16[$0 + 94 >> 1] = 0;
       }
       jsvUnLock(HEAP32[$0 + 88 >> 2]);
       continue;
      }
      break;
     }
    }
    jsiConsolePrintString(146977);
   }
   HEAP32[$0 + 124 >> 2] = HEAP32[$0 + 124 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $0 + 128 | 0;
}

function __jspeAssignmentExpression($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 label$1: {
  label$2: {
   if (HEAP16[HEAP32[44743] + 2 >> 1] == 61 | HEAP16[HEAP32[44743] + 2 >> 1] == 150 | (HEAP16[HEAP32[44743] + 2 >> 1] == 151 | HEAP16[HEAP32[44743] + 2 >> 1] == 154)) {
    break label$2;
   }
   if (HEAP16[HEAP32[44743] + 2 >> 1] == 155 | HEAP16[HEAP32[44743] + 2 >> 1] == 156 | (HEAP16[HEAP32[44743] + 2 >> 1] == 157 | HEAP16[HEAP32[44743] + 2 >> 1] == 159)) {
    break label$2;
   }
   if (HEAP16[HEAP32[44743] + 2 >> 1] == 161 | HEAP16[HEAP32[44743] + 2 >> 1] == 148 | HEAP16[HEAP32[44743] + 2 >> 1] == 144) {
    break label$2;
   }
   if (HEAP16[HEAP32[44743] + 2 >> 1] != 149) {
    break label$1;
   }
  }
  HEAP32[$1 + 20 >> 2] = HEAP16[HEAP32[44743] + 2 >> 1];
  jslGetNextToken();
  HEAP32[$1 + 24 >> 2] = jspeAssignmentExpression();
  HEAP32[$1 + 24 >> 2] = jsvSkipNameAndUnLock(HEAP32[$1 + 24 >> 2]);
  if (!(!HEAP32[$1 + 28 >> 2] | (HEAP32[86758] & 63) != 1)) {
   label$4: {
    if (HEAP32[$1 + 20 >> 2] == 61) {
     jsvReplaceWithOrAddToRoot(HEAP32[$1 + 28 >> 2], HEAP32[$1 + 24 >> 2]);
     break label$4;
    }
    label$6: {
     if (HEAP32[$1 + 20 >> 2] == 150) {
      HEAP32[$1 + 20 >> 2] = 43;
      break label$6;
     }
     label$8: {
      if (HEAP32[$1 + 20 >> 2] == 151) {
       HEAP32[$1 + 20 >> 2] = 45;
       break label$8;
      }
      label$10: {
       if (HEAP32[$1 + 20 >> 2] == 154) {
        HEAP32[$1 + 20 >> 2] = 42;
        break label$10;
       }
       label$12: {
        if (HEAP32[$1 + 20 >> 2] == 155) {
         HEAP32[$1 + 20 >> 2] = 47;
         break label$12;
        }
        label$14: {
         if (HEAP32[$1 + 20 >> 2] == 156) {
          HEAP32[$1 + 20 >> 2] = 37;
          break label$14;
         }
         label$16: {
          if (HEAP32[$1 + 20 >> 2] == 157) {
           HEAP32[$1 + 20 >> 2] = 38;
           break label$16;
          }
          label$18: {
           if (HEAP32[$1 + 20 >> 2] == 159) {
            HEAP32[$1 + 20 >> 2] = 124;
            break label$18;
           }
           label$20: {
            if (HEAP32[$1 + 20 >> 2] == 161) {
             HEAP32[$1 + 20 >> 2] = 94;
             break label$20;
            }
            label$22: {
             if (HEAP32[$1 + 20 >> 2] == 148) {
              HEAP32[$1 + 20 >> 2] = 146;
              break label$22;
             }
             label$24: {
              if (HEAP32[$1 + 20 >> 2] == 144) {
               HEAP32[$1 + 20 >> 2] = 143;
               break label$24;
              }
              if (HEAP32[$1 + 20 >> 2] == 149) {
               HEAP32[$1 + 20 >> 2] = 147;
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
    label$27: {
     if (HEAP32[$1 + 20 >> 2] != 43) {
      break label$27;
     }
     if (!(jsvIsName(HEAP32[$1 + 28 >> 2]) & 1)) {
      break label$27;
     }
     HEAP32[$1 + 16 >> 2] = jsvSkipName(HEAP32[$1 + 28 >> 2]);
     label$28: {
      if (!(jsvIsBasicString(HEAP32[$1 + 16 >> 2]) & 1)) {
       break label$28;
      }
      if ((jsvGetRefs(HEAP32[$1 + 16 >> 2]) & 65535) != 1 | HEAP32[$1 + 24 >> 2] == HEAP32[$1 + 16 >> 2]) {
       break label$28;
      }
      HEAP32[$1 + 12 >> 2] = jsvAsString(HEAP32[$1 + 24 >> 2]);
      jsvAppendStringVarComplete(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 12 >> 2]);
      jsvUnLock(HEAP32[$1 + 12 >> 2]);
      HEAP32[$1 + 20 >> 2] = 0;
     }
     jsvUnLock(HEAP32[$1 + 16 >> 2]);
    }
    if (HEAP32[$1 + 20 >> 2]) {
     HEAP32[$1 + 8 >> 2] = jsvMathsOpSkipNames(HEAP32[$1 + 28 >> 2], HEAP32[$1 + 24 >> 2], HEAP32[$1 + 20 >> 2]);
     jsvReplaceWith(HEAP32[$1 + 28 >> 2], HEAP32[$1 + 8 >> 2]);
     jsvUnLock(HEAP32[$1 + 8 >> 2]);
    }
   }
  }
  jsvUnLock(HEAP32[$1 + 24 >> 2]);
  HEAP32[$1 + 28 >> 2] = jsvSkipNameAndUnLock(HEAP32[$1 + 28 >> 2]);
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function tflite__reference_integer_ops__FullyConnected_28tflite__FullyConnectedParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0;
 $9 = __stack_pointer - 112 | 0;
 __stack_pointer = $9;
 HEAP32[$9 + 108 >> 2] = $0;
 HEAP32[$9 + 104 >> 2] = $1;
 HEAP32[$9 + 100 >> 2] = $2;
 HEAP32[$9 + 96 >> 2] = $3;
 HEAP32[$9 + 92 >> 2] = $4;
 HEAP32[$9 + 88 >> 2] = $5;
 HEAP32[$9 + 84 >> 2] = $6;
 HEAP32[$9 + 80 >> 2] = $7;
 HEAP32[$9 + 76 >> 2] = $8;
 HEAP32[$9 + 72 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] >> 2];
 HEAP32[$9 + 68 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 4 >> 2];
 HEAP32[$9 + 64 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 8 >> 2];
 HEAP32[$9 + 60 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 12 >> 2];
 HEAP32[$9 + 56 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 16 >> 2];
 HEAP32[$9 + 52 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 20 >> 2];
 HEAP32[$9 + 48 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 24 >> 2];
 label$1: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$9 + 96 >> 2]) | 0) < 2) {
   break label$1;
  }
 }
 label$2: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$9 + 80 >> 2]) | 0) != 2) {
   break label$2;
  }
 }
 label$3: {
  if (HEAP32[$9 + 52 >> 2] > HEAP32[$9 + 48 >> 2]) {
   break label$3;
  }
 }
 HEAP32[$9 + 44 >> 2] = tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$9 + 96 >> 2]);
 HEAP32[$9 + 40 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 80 >> 2], 0);
 HEAP32[$9 + 36 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 80 >> 2], 1);
 label$4: {
  if (HEAP32[$9 + 36 >> 2] > (tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 96 >> 2], HEAP32[$9 + 44 >> 2] - 2 | 0) | 0)) {
   break label$4;
  }
 }
 HEAP32[$9 + 32 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 96 >> 2], HEAP32[$9 + 44 >> 2] - 1 | 0);
 HEAP32[$9 + 28 >> 2] = 0;
 while (1) {
  if (HEAP32[$9 + 28 >> 2] < HEAP32[$9 + 40 >> 2]) {
   HEAP32[$9 + 24 >> 2] = 0;
   while (1) {
    if (HEAP32[$9 + 24 >> 2] < HEAP32[$9 + 36 >> 2]) {
     HEAP32[$9 + 20 >> 2] = 0;
     HEAP32[$9 + 16 >> 2] = 0;
     while (1) {
      if (HEAP32[$9 + 16 >> 2] < HEAP32[$9 + 32 >> 2]) {
       HEAP32[$9 + 12 >> 2] = HEAP8[HEAP32[$9 + 100 >> 2] + (HEAP32[$9 + 16 >> 2] + Math_imul(HEAP32[$9 + 28 >> 2], HEAP32[$9 + 32 >> 2]) | 0) | 0];
       HEAP32[$9 + 8 >> 2] = HEAP8[HEAP32[$9 + 92 >> 2] + (HEAP32[$9 + 16 >> 2] + Math_imul(HEAP32[$9 + 24 >> 2], HEAP32[$9 + 32 >> 2]) | 0) | 0];
       HEAP32[$9 + 20 >> 2] = HEAP32[$9 + 20 >> 2] + Math_imul(HEAP32[$9 + 8 >> 2] + HEAP32[$9 + 68 >> 2] | 0, HEAP32[$9 + 12 >> 2] + HEAP32[$9 + 72 >> 2] | 0);
       HEAP32[$9 + 16 >> 2] = HEAP32[$9 + 16 >> 2] + 1;
       continue;
      }
      break;
     }
     if (HEAP32[$9 + 84 >> 2]) {
      HEAP32[$9 + 20 >> 2] = HEAP32[HEAP32[$9 + 84 >> 2] + (HEAP32[$9 + 24 >> 2] << 2) >> 2] + HEAP32[$9 + 20 >> 2];
     }
     HEAP32[$9 + 20 >> 2] = tflite__MultiplyByQuantizedMultiplier_28int_2c_20int_2c_20int_29(HEAP32[$9 + 20 >> 2], HEAP32[$9 + 60 >> 2], HEAP32[$9 + 56 >> 2]);
     HEAP32[$9 + 20 >> 2] = HEAP32[$9 + 64 >> 2] + HEAP32[$9 + 20 >> 2];
     HEAP32[$9 + 20 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($9 + 20 | 0, $9 + 52 | 0) >> 2];
     HEAP32[$9 + 20 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($9 + 20 | 0, $9 + 48 | 0) >> 2];
     HEAP8[HEAP32[$9 + 76 >> 2] + (HEAP32[$9 + 24 >> 2] + Math_imul(HEAP32[$9 + 36 >> 2], HEAP32[$9 + 28 >> 2]) | 0) | 0] = HEAP32[$9 + 20 >> 2];
     HEAP32[$9 + 24 >> 2] = HEAP32[$9 + 24 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$9 + 28 >> 2] = HEAP32[$9 + 28 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $9 + 112 | 0;
}

function _jswrap_array_iterate_with_callback($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 144 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 136 >> 2] = $0;
 HEAP32[$6 + 132 >> 2] = $1;
 HEAP32[$6 + 128 >> 2] = $2;
 HEAP32[$6 + 124 >> 2] = $3;
 HEAP8[$6 + 123 | 0] = $4;
 HEAP8[$6 + 122 | 0] = $5;
 label$1: {
  if (!(jsvIsIterable(HEAP32[$6 + 136 >> 2]) & 1)) {
   jsExceptionHere(1, 120181, 0);
   HEAP32[$6 + 140 >> 2] = 0;
   break label$1;
  }
  if (!(jsvIsFunction(HEAP32[$6 + 132 >> 2]) & 1)) {
   jsExceptionHere(1, 117348, 0);
   HEAP32[$6 + 140 >> 2] = 0;
   break label$1;
  }
  label$4: {
   if (jsvIsUndefined(HEAP32[$6 + 128 >> 2]) & 1) {
    break label$4;
   }
   if (jsvIsObject(HEAP32[$6 + 128 >> 2]) & 1) {
    break label$4;
   }
   jsExceptionHere(1, 121551, 0);
   HEAP32[$6 + 140 >> 2] = 0;
   break label$1;
  }
  HEAP32[$6 + 116 >> 2] = 0;
  if (HEAP32[$6 + 124 >> 2] == 1) {
   HEAP32[$6 + 116 >> 2] = jsvNewEmptyArray();
  }
  HEAP8[$6 + 115 | 0] = 0;
  if (!(!HEAP32[$6 + 116 >> 2] & HEAP32[$6 + 124 >> 2] == 1)) {
   jsvIteratorNew($6 + 48 | 0, HEAP32[$6 + 136 >> 2], 0);
   while (1) {
    $0 = 0;
    if (jsvIteratorHasElement($6 + 48 | 0) & 1) {
     $0 = HEAPU8[$6 + 115 | 0] ^ -1;
    }
    if ($0 & 1) {
     HEAP32[$6 + 44 >> 2] = jsvIteratorGetKey($6 + 48 | 0);
     label$11: {
      if (jsvIsInt(HEAP32[$6 + 44 >> 2]) & 1) {
       HEAP32[$6 + 40 >> 2] = jsvGetInteger(HEAP32[$6 + 44 >> 2]);
       HEAP32[$6 + 36 >> 2] = jsvIteratorGetValue($6 + 48 | 0);
       HEAP32[$6 + 24 >> 2] = HEAP32[$6 + 36 >> 2];
       HEAP32[$6 + 28 >> 2] = jsvNewFromInteger(HEAP32[$6 + 40 >> 2]);
       HEAP32[$6 + 32 >> 2] = HEAP32[$6 + 136 >> 2];
       jsvIteratorNext($6 + 48 | 0);
       HEAP32[$6 + 20 >> 2] = jspeFunctionCall(HEAP32[$6 + 132 >> 2], 0, HEAP32[$6 + 128 >> 2], 0, 3, $6 + 24 | 0);
       jsvUnLock(HEAP32[$6 + 28 >> 2]);
       if (HEAP32[$6 + 20 >> 2]) {
        if (HEAP8[$6 + 123 | 0] & 1) {
         HEAP8[$6 + 19 | 0] = (jsvGetBool(HEAP32[$6 + 20 >> 2]) & 1) == (HEAP8[$6 + 122 | 0] & 1);
        }
        label$15: {
         if (HEAP32[$6 + 124 >> 2] == 1) {
          if (HEAP8[$6 + 123 | 0] & 1) {
           if (HEAP8[$6 + 19 | 0] & 1) {
            jsvArrayPush(HEAP32[$6 + 116 >> 2], HEAP32[$6 + 36 >> 2]);
           }
           break label$15;
          }
          HEAP32[$6 + 12 >> 2] = jsvNewFromInteger(HEAP32[$6 + 40 >> 2]);
          if (HEAP32[$6 + 12 >> 2]) {
           HEAP32[$6 + 12 >> 2] = jsvMakeIntoVariableName(HEAP32[$6 + 12 >> 2], HEAP32[$6 + 20 >> 2]);
           jsvAddName(HEAP32[$6 + 116 >> 2], HEAP32[$6 + 12 >> 2]);
           jsvUnLock(HEAP32[$6 + 12 >> 2]);
          }
          break label$15;
         }
         if (HEAP8[$6 + 123 | 0] & 1) {
          label$21: {
           if (!(HEAP32[$6 + 124 >> 2] != 2 & HEAP32[$6 + 124 >> 2] != 3)) {
            if (HEAP8[$6 + 19 | 0] & 1) {
             label$25: {
              if (HEAP32[$6 + 124 >> 2] == 2) {
               $0 = jsvLockAgain(HEAP32[$6 + 36 >> 2]);
               break label$25;
              }
              $0 = jsvNewFromInteger(jsvGetInteger(HEAP32[$6 + 44 >> 2]));
             }
             HEAP32[$6 + 116 >> 2] = $0;
             HEAP8[$6 + 115 | 0] = 1;
            }
            break label$21;
           }
           if (!(HEAP8[$6 + 19 | 0] & 1)) {
            HEAP8[$6 + 115 | 0] = 1;
           }
          }
         }
        }
        jsvUnLock(HEAP32[$6 + 20 >> 2]);
       }
       jsvUnLock(HEAP32[$6 + 36 >> 2]);
       break label$11;
      }
      jsvIteratorNext($6 + 48 | 0);
     }
     jsvUnLock(HEAP32[$6 + 44 >> 2]);
     continue;
    }
    break;
   }
   jsvIteratorFree($6 + 48 | 0);
  }
  if (!(HEAP32[$6 + 124 >> 2] | !(HEAP8[$6 + 123 | 0] & 1))) {
   HEAP32[$6 + 116 >> 2] = jsvNewFromBool((HEAP8[$6 + 115 | 0] & 1) != (HEAP8[$6 + 122 | 0] & 1));
  }
  HEAP32[$6 + 140 >> 2] = HEAP32[$6 + 116 >> 2];
 }
 __stack_pointer = $6 + 144 | 0;
 return HEAP32[$6 + 140 >> 2];
}

function jswrap_graphics_setFont($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 160 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 152 >> 2] = $0;
 HEAP32[$3 + 148 >> 2] = $1;
 HEAP32[$3 + 144 >> 2] = $2;
 label$1: {
  if (!(jsvIsString(HEAP32[$3 + 148 >> 2]) & 1)) {
   HEAP32[$3 + 156 >> 2] = 0;
   break label$1;
  }
  HEAP8[$3 + 143 | 0] = 0;
  HEAP32[$3 + 136 >> 2] = -1;
  if (jsvIsStringEqualOrStartsWith(HEAP32[$3 + 148 >> 2], 116083, 1) & 1) {
   if (jsvGetStringLength(HEAP32[$3 + 148 >> 2]) >>> 0 > 6) {
    HEAP32[$3 + 136 >> 2] = 6;
   }
   HEAP8[$3 + 143 | 0] = 1;
  }
  HEAP32[$3 + 132 >> 2] = jsvGetStringIndexOf(HEAP32[$3 + 148 >> 2], 58);
  if (HEAP32[$3 + 132 >> 2] >= 0) {
   HEAP32[$3 + 136 >> 2] = HEAP32[$3 + 132 >> 2] + 1;
  }
  label$6: {
   if (HEAP32[$3 + 136 >> 2] >= 0) {
    HEAP32[$3 + 124 >> 2] = jsvNewFromStringVar(HEAP32[$3 + 148 >> 2], HEAP32[$3 + 136 >> 2], 2147483647);
    HEAP32[$3 + 120 >> 2] = jsvGetStringIndexOf(HEAP32[$3 + 124 >> 2], 120);
    label$8: {
     if (HEAP32[$3 + 120 >> 2] >= 0) {
      HEAP32[$3 + 116 >> 2] = jsvGetIntegerAndUnLock(jsvNewFromStringVar(HEAP32[$3 + 124 >> 2], 0, HEAP32[$3 + 120 >> 2]));
      HEAP32[$3 + 112 >> 2] = jsvGetIntegerAndUnLock(jsvNewFromStringVar(HEAP32[$3 + 124 >> 2], HEAP32[$3 + 120 >> 2] + 1 | 0, 2147483647));
      if (HEAP32[$3 + 116 >> 2] < 0) {
       HEAP32[$3 + 116 >> 2] = 0;
      }
      if (HEAP32[$3 + 112 >> 2] < 0) {
       HEAP32[$3 + 112 >> 2] = 0;
      }
      if (HEAP32[$3 + 116 >> 2] > 63) {
       HEAP32[$3 + 116 >> 2] = 63;
      }
      if (HEAP32[$3 + 112 >> 2] > 63) {
       HEAP32[$3 + 112 >> 2] = 63;
      }
      HEAP32[$3 + 144 >> 2] = HEAP32[$3 + 116 >> 2] | HEAP32[$3 + 112 >> 2] << 6 | 4096;
      break label$8;
     }
     HEAP32[$3 + 144 >> 2] = jsvGetInteger(HEAP32[$3 + 124 >> 2]);
    }
    jsvUnLock(HEAP32[$3 + 124 >> 2]);
    $1 = HEAP32[$3 + 148 >> 2];
    if (HEAP32[$3 + 136 >> 2] > 0) {
     $0 = HEAP32[$3 + 136 >> 2] - 1 | 0;
    } else {
     $0 = 0;
    }
    HEAP32[$3 + 128 >> 2] = jsvNewFromStringVar($1, 0, $0);
    break label$6;
   }
   HEAP32[$3 + 128 >> 2] = jsvLockAgain(HEAP32[$3 + 148 >> 2]);
  }
  if (HEAP32[$3 + 144 >> 2] <= 0) {
   HEAP32[$3 + 144 >> 2] = 1;
  }
  if (HEAP32[$3 + 144 >> 2] > 8191) {
   HEAP32[$3 + 144 >> 2] = 8191;
  }
  HEAP16[$3 + 110 >> 1] = 65535;
  label$18: {
   if (HEAP8[$3 + 143 | 0] & 1) {
    HEAP16[$3 + 110 >> 1] = HEAP32[$3 + 144 >> 2];
    break label$18;
   }
   label$20: {
    label$21: {
     if (jsvIsUndefined(HEAP32[$3 + 128 >> 2]) & 1) {
      break label$21;
     }
     if (!jsvGetStringLength(HEAP32[$3 + 128 >> 2])) {
      break label$21;
     }
     if (!(jsvIsStringEqual(HEAP32[$3 + 128 >> 2], 125901) & 1)) {
      break label$20;
     }
    }
    HEAP16[$3 + 110 >> 1] = HEAP32[$3 + 144 >> 2] - -8192;
   }
  }
  if (jsvIsStringEqual(HEAP32[$3 + 128 >> 2], 125757) & 1) {
   HEAP16[$3 + 110 >> 1] = HEAP32[$3 + 144 >> 2] + 16384;
  }
  if (HEAPU16[$3 + 110 >> 1] == 65535) {
   HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 128 >> 2];
   HEAP32[$3 + 104 >> 2] = jsvVarPrintf(112197, $3 + 16 | 0);
   HEAP32[$3 + 100 >> 2] = jspGetVarNamedField(HEAP32[$3 + 152 >> 2], HEAP32[$3 + 104 >> 2], 0);
   if (HEAP32[$3 + 100 >> 2]) {
    jsvUnLock(jspExecuteFunction(HEAP32[$3 + 100 >> 2], HEAP32[$3 + 152 >> 2], 0, 0));
    graphicsGetFromVar($3 + 24 | 0, HEAP32[$3 + 152 >> 2]);
    HEAP16[$3 + 110 >> 1] = HEAP32[$3 + 144 >> 2] | (HEAPU8[$3 + 49 | 0] | HEAPU8[$3 + 50 | 0] << 8) & 57344;
   }
   jsvUnLock2(HEAP32[$3 + 100 >> 2], HEAP32[$3 + 104 >> 2]);
  }
  if (HEAPU16[$3 + 110 >> 1] == 65535) {
   HEAP32[$3 >> 2] = HEAP32[$3 + 128 >> 2];
   jsExceptionHere(1, 118297, $3);
  }
  jsvUnLock(HEAP32[$3 + 128 >> 2]);
  HEAP32[$3 + 156 >> 2] = jswrap_graphics_setFontSizeX(HEAP32[$3 + 152 >> 2], HEAPU16[$3 + 110 >> 1], HEAP8[$3 + 143 | 0] & 1);
 }
 __stack_pointer = $3 + 160 | 0;
 return HEAP32[$3 + 156 >> 2];
}

function jsvIsBasicVarEqual($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 96 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 88 >> 2] = $0;
 HEAP32[$2 + 84 >> 2] = $1;
 label$1: {
  if (HEAP32[$2 + 88 >> 2] == HEAP32[$2 + 84 >> 2]) {
   HEAP8[$2 + 95 | 0] = 1;
   break label$1;
  }
  if (!(HEAP32[$2 + 84 >> 2] ? HEAP32[$2 + 88 >> 2] : 0)) {
   HEAP8[$2 + 95 | 0] = 0;
   break label$1;
  }
  label$5: {
   if (!(jsvIsNumeric(HEAP32[$2 + 88 >> 2]) & 1)) {
    break label$5;
   }
   if (!(jsvIsNumeric(HEAP32[$2 + 84 >> 2]) & 1)) {
    break label$5;
   }
   if (jsvIsIntegerish(HEAP32[$2 + 88 >> 2]) & 1) {
    if (jsvIsIntegerish(HEAP32[$2 + 84 >> 2]) & 1) {
     $0 = HEAP32[$2 + 88 >> 2];
     $1 = HEAP32[$2 + 84 >> 2];
     HEAP8[$2 + 95 | 0] = (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == (HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24));
     break label$1;
    }
    $0 = HEAP32[$2 + 84 >> 2];
    $1 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
    $3 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
    wasm2js_scratch_store_i32(0, $1 | 0);
    wasm2js_scratch_store_i32(1, $3 | 0);
    $4 = +wasm2js_scratch_load_f64();
    $0 = HEAP32[$2 + 88 >> 2];
    HEAP8[$2 + 95 | 0] = $4 == +(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24));
    break label$1;
   }
   if (jsvIsIntegerish(HEAP32[$2 + 84 >> 2]) & 1) {
    $0 = HEAP32[$2 + 88 >> 2];
    $3 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
    $1 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
    wasm2js_scratch_store_i32(0, $3 | 0);
    wasm2js_scratch_store_i32(1, $1 | 0);
    $4 = +wasm2js_scratch_load_f64();
    $0 = HEAP32[$2 + 84 >> 2];
    HEAP8[$2 + 95 | 0] = $4 == +(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24));
    break label$1;
   }
   $0 = HEAP32[$2 + 88 >> 2];
   $1 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
   $3 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
   wasm2js_scratch_store_i32(0, $1 | 0);
   wasm2js_scratch_store_i32(1, $3 | 0);
   $4 = +wasm2js_scratch_load_f64();
   $0 = HEAP32[$2 + 84 >> 2];
   $3 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
   $1 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
   wasm2js_scratch_store_i32(0, $3 | 0);
   wasm2js_scratch_store_i32(1, $1 | 0);
   HEAP8[$2 + 95 | 0] = $4 == +wasm2js_scratch_load_f64();
   break label$1;
  }
  label$9: {
   if (!(jsvIsString(HEAP32[$2 + 88 >> 2]) & 1)) {
    break label$9;
   }
   if (!(jsvIsString(HEAP32[$2 + 84 >> 2]) & 1)) {
    break label$9;
   }
   jsvStringIteratorNew($2 + 48 | 0, HEAP32[$2 + 88 >> 2], 0);
   jsvStringIteratorNew($2 + 8 | 0, HEAP32[$2 + 84 >> 2], 0);
   while (1) {
    HEAP32[$2 + 4 >> 2] = jsvStringIteratorGetCharOrMinusOne($2 + 48 | 0);
    jsvStringIteratorNext($2 + 48 | 0);
    HEAP32[$2 >> 2] = jsvStringIteratorGetCharOrMinusOne($2 + 8 | 0);
    jsvStringIteratorNext($2 + 8 | 0);
    if (HEAP32[$2 + 4 >> 2] != HEAP32[$2 >> 2]) {
     jsvStringIteratorFree_1($2 + 48 | 0);
     jsvStringIteratorFree_1($2 + 8 | 0);
     HEAP8[$2 + 95 | 0] = 0;
     break label$1;
    }
    if (HEAP32[$2 + 4 >> 2] >= 0) {
     continue;
    }
    break;
   }
   jsvStringIteratorFree_1($2 + 48 | 0);
   jsvStringIteratorFree_1($2 + 8 | 0);
   HEAP8[$2 + 95 | 0] = 1;
   break label$1;
  }
  HEAP8[$2 + 95 | 0] = 0;
 }
 __stack_pointer = $2 + 96 | 0;
 return HEAP8[$2 + 95 | 0] & 1;
}

function jswrap_io_digitalPulse($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0;
 $3 = __stack_pointer - 176 | 0;
 __stack_pointer = $3;
 HEAP8[$3 + 175 | 0] = $0;
 HEAP8[$3 + 174 | 0] = $1;
 HEAP32[$3 + 168 >> 2] = $2;
 label$1: {
  if (!(jshIsPinValid(HEAPU8[$3 + 175 | 0]) & 1)) {
   jsExceptionHere(1, 117533, 0);
   break label$1;
  }
  HEAP32[$3 + 132 >> 2] = jstGetUtilTimerOffset();
  HEAP8[$3 + 131 | 0] = jstGetLastPinTimerTask(HEAPU8[$3 + 175 | 0], $3 + 136 | 0) & 1;
  if (!(HEAP8[$3 + 131 | 0] & 1)) {
   HEAP8[$3 + 136 | 0] = 0;
   HEAP8[$3 + 137 | 0] = 0;
   HEAP8[$3 + 138 | 0] = 0;
   HEAP8[$3 + 139 | 0] = 0;
  }
  if (jsvIsNumeric(HEAP32[$3 + 168 >> 2]) & 1) {
   HEAPF64[$3 + 120 >> 3] = jsvGetFloat(HEAP32[$3 + 168 >> 2]);
   label$5: {
    label$6: {
     label$7: {
      if (HEAPF64[$3 + 120 >> 3] < 0) {
       break label$7;
      }
      $4 = __DOUBLE_BITS_9(HEAPF64[$3 + 120 >> 3]);
      $1 = $4;
      $0 = i64toi32_i32$HIGH_BITS;
      $4 = $0 & 2147483647;
      $0 = $1;
      if (($4 | 0) == 2146435072 & ($0 | 0) != 0 | $4 >>> 0 > 2146435072) {
       break label$7;
      }
      break label$6;
     }
     jsExceptionHere(1, 116575, 0);
     break label$5;
    }
    label$8: {
     if (HEAPF64[$3 + 120 >> 3] > 0) {
      if (!(HEAP8[$3 + 131 | 0] & 1)) {
       jshPinOutput(HEAPU8[$3 + 175 | 0], HEAP8[$3 + 174 | 0] & 1);
      }
      $0 = jshGetTimeFromMilliseconds(HEAPF64[$3 + 120 >> 3]);
      $2 = $0;
      $4 = i64toi32_i32$HIGH_BITS;
      $1 = $4;
      $4 = HEAPU8[$3 + 136 | 0] | HEAPU8[$3 + 137 | 0] << 8 | (HEAPU8[$3 + 138 | 0] << 16 | HEAPU8[$3 + 139 | 0] << 24);
      $0 = $4 >> 31;
      $2 = $4 + $2 | 0;
      $4 = $0;
      $0 = $1;
      HEAP8[$3 + 136 | 0] = $2;
      HEAP8[$3 + 137 | 0] = $2 >>> 8;
      HEAP8[$3 + 138 | 0] = $2 >>> 16;
      HEAP8[$3 + 139 | 0] = $2 >>> 24;
      $1 = HEAPU8[$3 + 136 | 0] | HEAPU8[$3 + 137 | 0] << 8 | (HEAPU8[$3 + 138 | 0] << 16 | HEAPU8[$3 + 139 | 0] << 24);
      $2 = $1 >> 31;
      jstPinOutputAtTime($1, $2, $3 + 132 | 0, $3 + 175 | 0, 1, (HEAPU8[$3 + 174 | 0] ^ -1) & 1);
      break label$8;
     }
     jstUtilTimerWaitEmpty();
    }
   }
   break label$1;
  }
  label$11: {
   if (jsvIsIterable(HEAP32[$3 + 168 >> 2]) & 1) {
    if (!(HEAP8[$3 + 131 | 0] & 1)) {
     jshPinOutput(HEAPU8[$3 + 175 | 0], HEAP8[$3 + 174 | 0] & 1);
    }
    jsvIteratorNew($3 + 56 | 0, HEAP32[$3 + 168 >> 2], 1);
    while (1) {
     if (jsvIteratorHasElement($3 + 56 | 0) & 1) {
      HEAPF64[$3 + 48 >> 3] = jsvIteratorGetFloatValue($3 + 56 | 0);
      $2 = __DOUBLE_BITS_9(HEAPF64[$3 + 48 >> 3]);
      $0 = $2;
      $1 = i64toi32_i32$HIGH_BITS;
      $2 = $1 & 2147483647;
      $1 = $0;
      if ((!$1 & ($2 | 0) == 2146435072 | $2 >>> 0 < 2146435072) & HEAPF64[$3 + 48 >> 3] > 0) {
       $1 = jshGetTimeFromMilliseconds(HEAPF64[$3 + 48 >> 3]);
       $5 = $1;
       $2 = i64toi32_i32$HIGH_BITS;
       $4 = $2;
       $2 = HEAPU8[$3 + 136 | 0] | HEAPU8[$3 + 137 | 0] << 8 | (HEAPU8[$3 + 138 | 0] << 16 | HEAPU8[$3 + 139 | 0] << 24);
       $1 = $2 >> 31;
       $0 = $2;
       $2 = $1;
       $1 = $4;
       $2 = $2 + $1 | 0;
       $1 = $5;
       $4 = $0 + $1 | 0;
       HEAP8[$3 + 136 | 0] = $4;
       HEAP8[$3 + 137 | 0] = $4 >>> 8;
       HEAP8[$3 + 138 | 0] = $4 >>> 16;
       HEAP8[$3 + 139 | 0] = $4 >>> 24;
       $2 = HEAPU8[$3 + 136 | 0] | HEAPU8[$3 + 137 | 0] << 8 | (HEAPU8[$3 + 138 | 0] << 16 | HEAPU8[$3 + 139 | 0] << 24);
       $1 = $2 >> 31;
       jstPinOutputAtTime($2, $1, $3 + 132 | 0, $3 + 175 | 0, 1, (HEAPU8[$3 + 174 | 0] ^ -1) & 1);
      }
      HEAP8[$3 + 174 | 0] = (HEAPU8[$3 + 174 | 0] ^ -1) & 1;
      jsvIteratorNext($3 + 56 | 0);
      continue;
     }
     break;
    }
    jsvIteratorFree($3 + 56 | 0);
    break label$11;
   }
   HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 168 >> 2];
   jsExceptionHere(1, 113603, $3 + 32 | 0);
  }
 }
 __stack_pointer = $3 + 176 | 0;
}

function jswrap_string_split($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 56 >> 2] = $0;
 HEAP32[$2 + 52 >> 2] = $1;
 label$1: {
  if (!(jsvIsString(HEAP32[$2 + 56 >> 2]) & 1)) {
   HEAP32[$2 + 60 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 48 >> 2] = jsvNewEmptyArray();
  if (!HEAP32[$2 + 48 >> 2]) {
   HEAP32[$2 + 60 >> 2] = 0;
   break label$1;
  }
  if (jsvIsUndefined(HEAP32[$2 + 52 >> 2]) & 1) {
   jsvArrayPush(HEAP32[$2 + 48 >> 2], HEAP32[$2 + 56 >> 2]);
   HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 48 >> 2];
   break label$1;
  }
  if (jsvIsInstanceOf(HEAP32[$2 + 52 >> 2], 116829) & 1) {
   HEAP32[$2 + 44 >> 2] = 0;
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 52 >> 2], 111872, jsvNewFromInteger(0));
   HEAP32[$2 + 40 >> 2] = jswrap_regexp_exec(HEAP32[$2 + 52 >> 2], HEAP32[$2 + 56 >> 2]);
   while (1) {
    $0 = 0;
    if (HEAP32[$2 + 40 >> 2]) {
     $0 = jsvIsNull(HEAP32[$2 + 40 >> 2]) ^ -1;
    }
    if ($0 & 1) {
     HEAP32[$2 + 36 >> 2] = jsvGetArrayItem(HEAP32[$2 + 40 >> 2], 0);
     HEAP32[$2 + 32 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 40 >> 2], 111866);
     HEAP32[$2 + 28 >> 2] = jsvGetStringLength(HEAP32[$2 + 36 >> 2]);
     jsvUnLock(HEAP32[$2 + 36 >> 2]);
     jsvArrayPushAndUnLock(HEAP32[$2 + 48 >> 2], jsvNewFromStringVar(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 44 >> 2], HEAP32[$2 + 32 >> 2] - HEAP32[$2 + 44 >> 2] | 0));
     HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2] + HEAP32[$2 + 28 >> 2];
     jsvUnLock(HEAP32[$2 + 40 >> 2]);
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 52 >> 2], 111872, jsvNewFromInteger(HEAP32[$2 + 44 >> 2]));
     HEAP32[$2 + 40 >> 2] = jswrap_regexp_exec(HEAP32[$2 + 52 >> 2], HEAP32[$2 + 56 >> 2]);
     continue;
    }
    break;
   }
   jsvUnLock(HEAP32[$2 + 40 >> 2]);
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 52 >> 2], 111872, jsvNewFromInteger(0));
   if (HEAP32[$2 + 44 >> 2] <= (jsvGetStringLength(HEAP32[$2 + 56 >> 2]) | 0)) {
    jsvArrayPushAndUnLock(HEAP32[$2 + 48 >> 2], jsvNewFromStringVar(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 44 >> 2], 2147483647));
   }
   HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 48 >> 2];
   break label$1;
  }
  HEAP32[$2 + 52 >> 2] = jsvAsString(HEAP32[$2 + 52 >> 2]);
  HEAP32[$2 + 20 >> 2] = 0;
  if (jsvIsUndefined(HEAP32[$2 + 52 >> 2]) & 1) {
   $0 = 0;
  } else {
   $0 = jsvGetStringLength(HEAP32[$2 + 52 >> 2]);
  }
  HEAP32[$2 + 16 >> 2] = $0;
  HEAP32[$2 + 12 >> 2] = (jsvGetStringLength(HEAP32[$2 + 56 >> 2]) + 1 | 0) - HEAP32[$2 + 16 >> 2];
  HEAP32[$2 + 24 >> 2] = 0;
  while (1) {
   label$13: {
    if (HEAP32[$2 + 24 >> 2] > HEAP32[$2 + 12 >> 2]) {
     break label$13;
    }
    if (HEAP32[$2 + 16 >> 2] | HEAP32[$2 + 24 >> 2]) {
     label$16: {
      if (!(!HEAP32[$2 + 16 >> 2] | HEAP32[$2 + 24 >> 2] == HEAP32[$2 + 12 >> 2])) {
       if (jsvCompareString(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], HEAP32[$2 + 24 >> 2], 0, 1)) {
        break label$16;
       }
      }
      if (HEAP32[$2 + 24 >> 2] == HEAP32[$2 + 12 >> 2]) {
       HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 12 >> 2] + HEAP32[$2 + 16 >> 2];
       if (!HEAP32[$2 + 16 >> 2]) {
        break label$13;
       }
      }
      HEAP32[$2 + 8 >> 2] = jsvNewFromStringVar(HEAP32[$2 + 56 >> 2], jsvConvertFromUTF8Index(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 20 >> 2]), jsvConvertFromUTF8Index(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 24 >> 2]) - jsvConvertFromUTF8Index(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 20 >> 2]) | 0);
      if (!HEAP32[$2 + 8 >> 2]) {
       break label$13;
      }
      jsvArrayPush(HEAP32[$2 + 48 >> 2], HEAP32[$2 + 8 >> 2]);
      jsvUnLock(HEAP32[$2 + 8 >> 2]);
      HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 24 >> 2] + HEAP32[$2 + 16 >> 2];
     }
    }
    HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 24 >> 2] + 1;
    continue;
   }
   break;
  }
  jsvUnLock(HEAP32[$2 + 52 >> 2]);
  HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 48 >> 2];
 }
 __stack_pointer = $2 - -64 | 0;
 return HEAP32[$2 + 60 >> 2];
}

function jswrap_array_splice($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 96 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 88 >> 2] = $0;
 HEAP32[$4 + 84 >> 2] = $1;
 HEAP32[$4 + 80 >> 2] = $2;
 HEAP32[$4 + 76 >> 2] = $3;
 label$1: {
  if (!(jsvIsArray(HEAP32[$4 + 88 >> 2]) & 1)) {
   HEAP32[$4 + 92 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 72 >> 2] = jsvGetArrayLength(HEAP32[$4 + 88 >> 2]);
  if (HEAP32[$4 + 84 >> 2] < 0) {
   HEAP32[$4 + 84 >> 2] = HEAP32[$4 + 72 >> 2] + HEAP32[$4 + 84 >> 2];
  }
  if (HEAP32[$4 + 84 >> 2] < 0) {
   HEAP32[$4 + 84 >> 2] = 0;
  }
  if (HEAP32[$4 + 84 >> 2] > HEAP32[$4 + 72 >> 2]) {
   HEAP32[$4 + 84 >> 2] = HEAP32[$4 + 72 >> 2];
  }
  HEAP32[$4 + 68 >> 2] = HEAP32[$4 + 72 >> 2];
  if (jsvIsNumeric(HEAP32[$4 + 80 >> 2]) & 1) {
   HEAP32[$4 + 68 >> 2] = jsvGetInteger(HEAP32[$4 + 80 >> 2]);
  }
  if (HEAP32[$4 + 68 >> 2] > (HEAP32[$4 + 72 >> 2] - HEAP32[$4 + 84 >> 2] | 0)) {
   HEAP32[$4 + 68 >> 2] = HEAP32[$4 + 72 >> 2] - HEAP32[$4 + 84 >> 2];
  }
  HEAP32[$4 + 64 >> 2] = jsvGetArrayLength(HEAP32[$4 + 76 >> 2]);
  HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 64 >> 2] - HEAP32[$4 + 68 >> 2];
  HEAP8[$4 + 59 | 0] = 0;
  HEAP32[$4 + 52 >> 2] = jsvNewEmptyArray();
  jsvObjectIteratorNew($4 + 48 | 0, HEAP32[$4 + 88 >> 2]);
  while (1) {
   $0 = 0;
   if (jsvObjectIteratorHasValue_6($4 + 48 | 0) & 1) {
    $0 = HEAPU8[$4 + 59 | 0] ^ -1;
   }
   if ($0 & 1) {
    HEAP8[$4 + 47 | 0] = 1;
    HEAP32[$4 + 40 >> 2] = jsvObjectIteratorGetKey_4($4 + 48 | 0);
    label$11: {
     if (!HEAP32[$4 + 40 >> 2]) {
      break label$11;
     }
     if (!(jsvIsInt(HEAP32[$4 + 40 >> 2]) & 1)) {
      break label$11;
     }
     HEAP32[$4 + 36 >> 2] = jsvGetInteger(HEAP32[$4 + 40 >> 2]);
     if (HEAP32[$4 + 36 >> 2] >= HEAP32[$4 + 84 >> 2]) {
      label$13: {
       if (HEAP32[$4 + 36 >> 2] < (HEAP32[$4 + 84 >> 2] + HEAP32[$4 + 68 >> 2] | 0)) {
        if (HEAP32[$4 + 52 >> 2]) {
         HEAP32[$4 + 32 >> 2] = jsvObjectIteratorGetValue_6($4 + 48 | 0);
         jsvArrayPushAndUnLock(HEAP32[$4 + 52 >> 2], HEAP32[$4 + 32 >> 2]);
        }
        HEAP8[$4 + 47 | 0] = 0;
        HEAP32[$4 + 28 >> 2] = jsvObjectIteratorGetKey_4($4 + 48 | 0);
        jsvObjectIteratorNext($4 + 48 | 0);
        jsvRemoveChildAndUnLock(HEAP32[$4 + 88 >> 2], HEAP32[$4 + 28 >> 2]);
        break label$13;
       }
       HEAP8[$4 + 59 | 0] = 1;
       HEAP8[$4 + 47 | 0] = 0;
      }
     }
    }
    jsvUnLock(HEAP32[$4 + 40 >> 2]);
    if (HEAP8[$4 + 47 | 0] & 1) {
     jsvObjectIteratorNext($4 + 48 | 0);
    }
    continue;
   }
   break;
  }
  HEAP32[$4 + 24 >> 2] = jsvObjectIteratorGetKey_4($4 + 48 | 0);
  jsvObjectIteratorNew($4 + 16 | 0, HEAP32[$4 + 76 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_6($4 + 16 | 0) & 1) {
    HEAP32[$4 + 12 >> 2] = jsvObjectIteratorGetValue_6($4 + 16 | 0);
    jsvArrayInsertBefore(HEAP32[$4 + 88 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 12 >> 2]);
    jsvUnLock(HEAP32[$4 + 12 >> 2]);
    jsvObjectIteratorNext($4 + 16 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_6($4 + 16 | 0);
  jsvUnLock(HEAP32[$4 + 24 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_6($4 + 48 | 0) & 1) {
    HEAP32[$4 + 8 >> 2] = jsvObjectIteratorGetKey_4($4 + 48 | 0);
    label$21: {
     if (!HEAP32[$4 + 8 >> 2]) {
      break label$21;
     }
     if (!(jsvIsInt(HEAP32[$4 + 8 >> 2]) & 1)) {
      break label$21;
     }
     jsvSetInteger(HEAP32[$4 + 8 >> 2], jsvGetInteger(HEAP32[$4 + 8 >> 2]) + HEAP32[$4 + 60 >> 2] | 0);
    }
    jsvUnLock(HEAP32[$4 + 8 >> 2]);
    jsvObjectIteratorNext($4 + 48 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_6($4 + 48 | 0);
  jsvSetArrayLength(HEAP32[$4 + 88 >> 2], HEAP32[$4 + 72 >> 2] + HEAP32[$4 + 60 >> 2] | 0, 0);
  HEAP32[$4 + 92 >> 2] = HEAP32[$4 + 52 >> 2];
 }
 __stack_pointer = $4 + 96 | 0;
 return HEAP32[$4 + 92 >> 2];
}

function tflite__reference_ops__FullyConnected_28tflite__FullyConnectedParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20short__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0;
 $9 = __stack_pointer - 112 | 0;
 __stack_pointer = $9;
 HEAP32[$9 + 108 >> 2] = $0;
 HEAP32[$9 + 104 >> 2] = $1;
 HEAP32[$9 + 100 >> 2] = $2;
 HEAP32[$9 + 96 >> 2] = $3;
 HEAP32[$9 + 92 >> 2] = $4;
 HEAP32[$9 + 88 >> 2] = $5;
 HEAP32[$9 + 84 >> 2] = $6;
 HEAP32[$9 + 80 >> 2] = $7;
 HEAP32[$9 + 76 >> 2] = $8;
 HEAP32[$9 + 72 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] >> 2];
 HEAP32[$9 + 68 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 4 >> 2];
 HEAP32[$9 + 64 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 8 >> 2];
 HEAP32[$9 + 60 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 12 >> 2];
 HEAP32[$9 + 56 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 16 >> 2];
 HEAP32[$9 + 52 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 20 >> 2];
 HEAP32[$9 + 48 >> 2] = HEAP32[HEAP32[$9 + 108 >> 2] + 24 >> 2];
 label$1: {
  if (HEAP32[$9 + 52 >> 2] > HEAP32[$9 + 48 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if (HEAP32[$9 + 64 >> 2]) {
   break label$2;
  }
 }
 HEAP32[$9 + 44 >> 2] = tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$9 + 80 >> 2]);
 HEAP32[$9 + 40 >> 2] = tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$9 + 96 >> 2]);
 HEAP32[$9 + 36 >> 2] = tflite__FlatSizeSkipDim_28tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$9 + 80 >> 2], HEAP32[$9 + 44 >> 2] - 1 | 0);
 HEAP32[$9 + 32 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$9 + 96 >> 2], HEAP32[$9 + 40 >> 2] - 2 | 0, HEAP32[$9 + 80 >> 2], HEAP32[$9 + 44 >> 2] - 1 | 0);
 HEAP32[$9 + 28 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 96 >> 2], HEAP32[$9 + 40 >> 2] - 1 | 0);
 HEAP32[$9 + 24 >> 2] = 0;
 while (1) {
  if (HEAP32[$9 + 24 >> 2] < HEAP32[$9 + 36 >> 2]) {
   HEAP32[$9 + 20 >> 2] = 0;
   while (1) {
    if (HEAP32[$9 + 20 >> 2] < HEAP32[$9 + 32 >> 2]) {
     HEAP32[$9 + 16 >> 2] = HEAP32[HEAP32[$9 + 84 >> 2] + (HEAP32[$9 + 20 >> 2] << 2) >> 2];
     HEAP32[$9 + 12 >> 2] = 0;
     while (1) {
      if (HEAP32[$9 + 12 >> 2] < HEAP32[$9 + 28 >> 2]) {
       HEAP16[$9 + 10 >> 1] = HEAPU8[HEAP32[$9 + 100 >> 2] + (HEAP32[$9 + 12 >> 2] + Math_imul(HEAP32[$9 + 24 >> 2], HEAP32[$9 + 28 >> 2]) | 0) | 0] + HEAP32[$9 + 72 >> 2];
       HEAP16[$9 + 8 >> 1] = HEAPU8[HEAP32[$9 + 92 >> 2] + (HEAP32[$9 + 12 >> 2] + Math_imul(HEAP32[$9 + 20 >> 2], HEAP32[$9 + 28 >> 2]) | 0) | 0] + HEAP32[$9 + 68 >> 2];
       HEAP32[$9 + 16 >> 2] = HEAP32[$9 + 16 >> 2] + Math_imul(HEAP16[$9 + 8 >> 1], HEAP16[$9 + 10 >> 1]);
       HEAP32[$9 + 12 >> 2] = HEAP32[$9 + 12 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAP32[$9 + 16 >> 2] = tflite__MultiplyByQuantizedMultiplier_28int_2c_20int_2c_20int_29(HEAP32[$9 + 16 >> 2], HEAP32[$9 + 60 >> 2], HEAP32[$9 + 56 >> 2]);
     HEAP32[$9 + 4 >> 2] = HEAP32[$9 + 52 >> 2] - HEAP32[$9 + 64 >> 2];
     HEAP32[$9 + 16 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($9 + 16 | 0, $9 + 4 | 0) >> 2];
     HEAP32[$9 >> 2] = HEAP32[$9 + 48 >> 2] - HEAP32[$9 + 64 >> 2];
     HEAP32[$9 + 16 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($9 + 16 | 0, $9) >> 2];
     HEAP32[$9 + 16 >> 2] = HEAP32[$9 + 64 >> 2] + HEAP32[$9 + 16 >> 2];
     HEAP16[HEAP32[$9 + 76 >> 2] + (HEAP32[$9 + 20 >> 2] + Math_imul(HEAP32[$9 + 32 >> 2], HEAP32[$9 + 24 >> 2]) << 1) >> 1] = HEAP32[$9 + 16 >> 2];
     HEAP32[$9 + 20 >> 2] = HEAP32[$9 + 20 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$9 + 24 >> 2] = HEAP32[$9 + 24 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $9 + 112 | 0;
}

function jsserialPopulateUSARTInfo($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 192 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 188 >> 2] = $0;
 HEAP32[$3 + 184 >> 2] = $1;
 HEAP32[$3 + 180 >> 2] = $2;
 jshUSARTInitInfo(HEAP32[$3 + 188 >> 2]);
 HEAP32[$3 + 176 >> 2] = 0;
 HEAP32[$3 + 172 >> 2] = 0;
 HEAP32[$3 + 168 >> 2] = HEAPU8[HEAP32[$3 + 188 >> 2] + 8 | 0];
 HEAP32[$3 + 164 >> 2] = HEAPU8[HEAP32[$3 + 188 >> 2] + 10 | 0];
 HEAP32[$3 + 48 >> 2] = 111846;
 HEAP16[$3 + 52 >> 1] = 13;
 HEAP32[$3 + 56 >> 2] = HEAP32[$3 + 188 >> 2] + 4;
 HEAP32[$3 + 60 >> 2] = 111843;
 HEAP16[$3 + 64 >> 1] = 13;
 HEAP32[$3 + 68 >> 2] = HEAP32[$3 + 188 >> 2] + 5;
 HEAP32[$3 + 72 >> 2] = 118179;
 HEAP16[$3 + 76 >> 1] = 13;
 HEAP32[$3 + 80 >> 2] = HEAP32[$3 + 188 >> 2] + 6;
 HEAP32[$3 + 84 >> 2] = 115126;
 HEAP16[$3 + 88 >> 1] = 13;
 HEAP32[$3 + 92 >> 2] = HEAP32[$3 + 188 >> 2] + 7;
 HEAP32[$3 + 96 >> 2] = 119190;
 HEAP16[$3 + 100 >> 1] = 10;
 HEAP32[$3 + 104 >> 2] = $3 + 168;
 HEAP32[$3 + 108 >> 2] = 115094;
 HEAP16[$3 + 112 >> 1] = 10;
 HEAP32[$3 + 116 >> 2] = $3 + 164;
 HEAP32[$3 + 120 >> 2] = 111573;
 HEAP16[$3 + 124 >> 1] = 5;
 HEAP32[$3 + 128 >> 2] = $3 + 176;
 HEAP32[$3 + 132 >> 2] = 111993;
 HEAP16[$3 + 136 >> 1] = 5;
 HEAP32[$3 + 140 >> 2] = $3 + 172;
 HEAP32[$3 + 144 >> 2] = 115179;
 HEAP16[$3 + 148 >> 1] = 12;
 HEAP32[$3 + 152 >> 2] = HEAP32[$3 + 188 >> 2] + 12;
 if (!(jsvIsUndefined(HEAP32[$3 + 184 >> 2]) & 1)) {
  HEAP32[$3 + 44 >> 2] = jsvGetInteger(HEAP32[$3 + 184 >> 2]);
  label$2: {
   if (!(HEAP32[$3 + 44 >> 2] <= 1e7 & HEAP32[$3 + 44 >> 2] > 100)) {
    HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 44 >> 2];
    jsExceptionHere(1, 122645, $3 + 32 | 0);
    break label$2;
   }
   $0 = HEAP32[$3 + 188 >> 2];
   $1 = HEAP32[$3 + 44 >> 2];
   HEAP8[$0 | 0] = $1;
   HEAP8[$0 + 1 | 0] = $1 >>> 8;
   HEAP8[$0 + 2 | 0] = $1 >>> 16;
   HEAP8[$0 + 3 | 0] = $1 >>> 24;
  }
 }
 HEAP8[$3 + 43 | 0] = 1;
 if (jsvReadConfigObject(HEAP32[$3 + 180 >> 2], $3 + 48 | 0, 9) & 1) {
  HEAP8[HEAP32[$3 + 188 >> 2] + 8 | 0] = HEAP32[$3 + 168 >> 2];
  HEAP8[HEAP32[$3 + 188 >> 2] + 10 | 0] = HEAP32[$3 + 164 >> 2];
  HEAP8[HEAP32[$3 + 188 >> 2] + 9 | 0] = 0;
  label$6: {
   if (jsvIsString(HEAP32[$3 + 176 >> 2]) & 1) {
    label$8: {
     if (!(jsvIsStringEqual(HEAP32[$3 + 176 >> 2], 117090) & 1)) {
      if (!(jsvIsStringEqual(HEAP32[$3 + 176 >> 2], 121827) & 1)) {
       break label$8;
      }
     }
     HEAP8[HEAP32[$3 + 188 >> 2] + 9 | 0] = 1;
     break label$6;
    }
    label$10: {
     if (!(jsvIsStringEqual(HEAP32[$3 + 176 >> 2], 120562) & 1)) {
      if (!(jsvIsStringEqual(HEAP32[$3 + 176 >> 2], 117597) & 1)) {
       break label$10;
      }
     }
     HEAP8[HEAP32[$3 + 188 >> 2] + 9 | 0] = 2;
    }
    break label$6;
   }
   if (jsvIsInt(HEAP32[$3 + 176 >> 2]) & 1) {
    $0 = jsvGetInteger(HEAP32[$3 + 176 >> 2]);
    HEAP8[HEAP32[$3 + 188 >> 2] + 9 | 0] = $0;
   }
  }
  if (HEAPU8[HEAP32[$3 + 188 >> 2] + 9 | 0] > 2) {
   HEAP32[$3 + 16 >> 2] = HEAPU8[HEAP32[$3 + 188 >> 2] + 9 | 0];
   jsExceptionHere(1, 122255, $3 + 16 | 0);
   HEAP8[$3 + 43 | 0] = 0;
  }
  if (HEAP8[$3 + 43 | 0] & 1) {
   label$15: {
    label$16: {
     label$17: {
      if (jsvIsUndefined(HEAP32[$3 + 172 >> 2]) & 1) {
       break label$17;
      }
      if (jsvIsNull(HEAP32[$3 + 172 >> 2]) & 1) {
       break label$17;
      }
      if (!(jsvIsStringEqual(HEAP32[$3 + 172 >> 2], 120016) & 1)) {
       break label$16;
      }
     }
     HEAP8[HEAP32[$3 + 188 >> 2] + 11 | 0] = 0;
     break label$15;
    }
    label$18: {
     if (jsvIsStringEqual(HEAP32[$3 + 172 >> 2], 117118) & 1) {
      HEAP8[HEAP32[$3 + 188 >> 2] + 11 | 0] = 1;
      break label$18;
     }
     HEAP32[$3 >> 2] = HEAP32[$3 + 172 >> 2];
     jsExceptionHere(1, 116804, $3);
     HEAP8[$3 + 43 | 0] = 0;
    }
   }
  }
 }
 jsvUnLock2(HEAP32[$3 + 176 >> 2], HEAP32[$3 + 172 >> 2]);
 __stack_pointer = $3 + 192 | 0;
 return HEAP8[$3 + 43 | 0] & 1;
}

function jsfCompactInternal($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 96 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 88 >> 2] = $0;
 HEAP32[$3 + 84 >> 2] = $1;
 HEAP32[$3 + 80 >> 2] = $2;
 HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 88 >> 2];
 jsiConsolePrintf(144330, 0);
 HEAP32[$3 + 72 >> 2] = 0;
 HEAP32[$3 + 68 >> 2] = 0;
 HEAP32[$3 + 64 >> 2] = 0;
 HEAP32[$3 + 56 >> 2] = 0;
 HEAP32[$3 + 60 >> 2] = 0;
 HEAP32[$3 + 48 >> 2] = 0;
 HEAP32[$3 + 52 >> 2] = 0;
 HEAP32[$3 + 40 >> 2] = 0;
 HEAP32[$3 + 44 >> 2] = 0;
 HEAP32[$3 + 32 >> 2] = 0;
 HEAP32[$3 + 36 >> 2] = 0;
 HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 88 >> 2];
 HEAP32[$3 + 24 >> 2] = 0;
 label$1: {
  if (jsfGetFileHeader(HEAP32[$3 + 28 >> 2], $3 + 32 | 0, 1) & 1) {
   while (1) {
    if (jsfIsRealFile($3 + 32 | 0) & 1) {
     HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 76 >> 2] + HEAP32[$3 + 64 >> 2];
     if (HEAP32[$3 + 28 >> 2] != HEAP32[$3 + 20 >> 2]) {
      jsvUpdateMemoryAddress(HEAP32[$3 + 28 >> 2], jsfGetFileSize($3 + 32 | 0) + 32 | 0, HEAP32[$3 + 20 >> 2]);
     }
     memcpy_circular(HEAP32[$3 + 84 >> 2], $3 + 72 | 0, HEAP32[$3 + 80 >> 2], $3 + 32 | 0, 32);
     HEAP32[$3 + 64 >> 2] = HEAP32[$3 + 64 >> 2] + 32;
     HEAP32[$3 + 16 >> 2] = jsfAlignAddress(jsfGetFileSize($3 + 32 | 0));
     HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 28 >> 2] + 32;
     jsfCompactWriteBuffer($3 + 76 | 0, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 84 >> 2], HEAP32[$3 + 80 >> 2], $3 - -64 | 0, $3 + 68 | 0);
     while (1) {
      if (HEAP32[$3 + 16 >> 2]) {
       HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 80 >> 2] - HEAP32[$3 + 64 >> 2];
       if (HEAPU32[$3 + 8 >> 2] > HEAP32[$3 + 80 >> 2] - HEAP32[$3 + 72 >> 2] >>> 0) {
        HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 80 >> 2] - HEAP32[$3 + 72 >> 2];
       }
       if (!(HEAPU32[$3 + 68 >> 2] <= HEAPU32[$3 + 72 >> 2] | HEAPU32[$3 + 8 >> 2] <= HEAP32[$3 + 68 >> 2] - HEAP32[$3 + 72 >> 2] >>> 0)) {
        HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 68 >> 2] - HEAP32[$3 + 72 >> 2];
       }
       if (!HEAP32[$3 + 8 >> 2]) {
        HEAP8[$3 + 95 | 0] = 0;
        break label$1;
       }
       if (HEAPU32[$3 + 8 >> 2] > HEAPU32[$3 + 16 >> 2]) {
        HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 16 >> 2];
       }
       jshFlashRead(HEAP32[$3 + 84 >> 2] + HEAP32[$3 + 72 >> 2] | 0, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
       HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] - HEAP32[$3 + 8 >> 2];
       HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 8 >> 2] + HEAP32[$3 + 12 >> 2];
       HEAP32[$3 + 64 >> 2] = HEAP32[$3 + 8 >> 2] + HEAP32[$3 + 64 >> 2];
       HEAP32[$3 + 72 >> 2] = (HEAP32[$3 + 72 >> 2] + HEAP32[$3 + 8 >> 2] >>> 0) % HEAPU32[$3 + 80 >> 2];
       jsfCompactWriteBuffer($3 + 76 | 0, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 84 >> 2], HEAP32[$3 + 80 >> 2], $3 - -64 | 0, $3 + 68 | 0);
       continue;
      }
      break;
     }
     HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 28 >> 2] - HEAP32[$3 + 88 >> 2] >>> 14;
     if (HEAP32[$3 + 4 >> 2] != HEAP32[$3 + 24 >> 2]) {
      HEAP32[$3 >> 2] = HEAP8[(HEAP32[$3 + 4 >> 2] & 3) + 111528 | 0];
      jsiConsolePrintf(122862, $3);
      HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 4 >> 2];
     }
    }
    jshKickWatchDog();
    jshKickSoftWatchDog();
    if (jsfGetNextFileHeader($3 + 28 | 0, $3 + 32 | 0, 1) & 1) {
     continue;
    }
    break;
   }
  }
  jsfCompactWriteBuffer($3 + 76 | 0, jsfGetBankEndAddress(HEAP32[$3 + 76 >> 2]), HEAP32[$3 + 84 >> 2], HEAP32[$3 + 80 >> 2], $3 - -64 | 0, $3 + 68 | 0);
  if (HEAP32[$3 + 76 >> 2] != HEAP32[$3 + 88 >> 2]) {
   HEAP32[$3 + 76 >> 2] = jsfGetAddressOfNextPage(HEAP32[$3 + 76 >> 2] - 1 | 0);
  }
  if (HEAP32[$3 + 76 >> 2]) {
   if (!HEAP32[$3 + 28 >> 2]) {
    HEAP32[$3 + 28 >> 2] = jsfGetBankEndAddress(HEAP32[$3 + 76 >> 2]);
   }
   jshFlashErasePages(HEAP32[$3 + 76 >> 2], HEAP32[$3 + 28 >> 2] - HEAP32[$3 + 76 >> 2] | 0);
  }
  jsiConsolePrintf(146977, 0);
  HEAP8[$3 + 95 | 0] = 1;
 }
 __stack_pointer = $3 + 96 | 0;
 return HEAP8[$3 + 95 | 0] & 1;
}

function jswrap_function_bind($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 80 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 72 >> 2] = $0;
 HEAP32[$3 + 68 >> 2] = $1;
 HEAP32[$3 + 64 >> 2] = $2;
 label$1: {
  if (!(jsvIsFunction(HEAP32[$3 + 72 >> 2]) & 1)) {
   HEAP32[$3 >> 2] = HEAP32[$3 + 72 >> 2];
   jsExceptionHere(3, 113965, $3);
   HEAP32[$3 + 76 >> 2] = 0;
   break label$1;
  }
  label$3: {
   if (jsvIsNativeFunction(HEAP32[$3 + 72 >> 2]) & 1) {
    $0 = HEAP32[$3 + 72 >> 2];
    $1 = HEAP32[$3 + 72 >> 2];
    HEAP32[$3 + 60 >> 2] = jsvNewNativeFunction(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8);
    break label$3;
   }
   HEAP32[$3 + 60 >> 2] = jsvNewWithFlags((jsvIsFunctionReturn(HEAP32[$3 + 72 >> 2]) & 1 ? 9 : 7) & 65535);
  }
  if (!HEAP32[$3 + 60 >> 2]) {
   HEAP32[$3 + 76 >> 2] = 0;
   break label$1;
  }
  jsvObjectIteratorNew($3 + 56 | 0, HEAP32[$3 + 72 >> 2]);
  while (1) {
   label$7: {
    if (!(jsvObjectIteratorHasValue_9($3 + 56 | 0) & 1)) {
     break label$7;
    }
    HEAP32[$3 + 52 >> 2] = jsvObjectIteratorGetKey_6($3 + 56 | 0);
    HEAP32[$3 + 48 >> 2] = jsvObjectIteratorGetValue_9($3 + 56 | 0);
    $0 = 0;
    if (jsvIsFunctionParameter(HEAP32[$3 + 52 >> 2]) & 1) {
     $0 = HEAP32[$3 + 48 >> 2] != 0;
    }
    HEAP8[$3 + 47 | 0] = $0;
    if (HEAP8[$3 + 47 | 0] & 1) {
     HEAP32[$3 + 40 >> 2] = jsvCopy(HEAP32[$3 + 52 >> 2], 1);
     if (HEAP32[$3 + 40 >> 2]) {
      jsvAddName(HEAP32[$3 + 60 >> 2], HEAP32[$3 + 40 >> 2]);
      jsvUnLock(HEAP32[$3 + 40 >> 2]);
     }
    }
    jsvUnLock2(HEAP32[$3 + 52 >> 2], HEAP32[$3 + 48 >> 2]);
    if (!(HEAP8[$3 + 47 | 0] & 1)) {
     break label$7;
    }
    jsvObjectIteratorNext($3 + 56 | 0);
    continue;
   }
   break;
  }
  if (HEAP32[$3 + 64 >> 2]) {
   jsvObjectIteratorNew($3 + 32 | 0, HEAP32[$3 + 64 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue_9($3 + 32 | 0) & 1) {
     HEAP32[$3 + 28 >> 2] = jsvObjectIteratorGetValue_9($3 + 32 | 0);
     HEAP8[$3 + 27 | 0] = 0;
     while (1) {
      $0 = 0;
      if (!(HEAP8[$3 + 27 | 0] & 1)) {
       $0 = jsvObjectIteratorHasValue_9($3 + 56 | 0);
      }
      label$16: {
       if (!($0 & 1)) {
        break label$16;
       }
       HEAP32[$3 + 20 >> 2] = jsvObjectIteratorGetKey_6($3 + 56 | 0);
       if (!(jsvIsFunctionParameter(HEAP32[$3 + 20 >> 2]) & 1)) {
        jsvUnLock(HEAP32[$3 + 20 >> 2]);
        break label$16;
       }
       HEAP32[$3 + 16 >> 2] = jsvCopyNameOnly(HEAP32[$3 + 20 >> 2], 0, 1);
       jsvSetValueOfName(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 28 >> 2]);
       jsvAddName(HEAP32[$3 + 60 >> 2], HEAP32[$3 + 16 >> 2]);
       HEAP8[$3 + 27 | 0] = 1;
       jsvUnLock2(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2]);
       jsvObjectIteratorNext($3 + 56 | 0);
       continue;
      }
      break;
     }
     if (!(HEAP8[$3 + 27 | 0] & 1)) {
      jsvAddFunctionParameter(HEAP32[$3 + 60 >> 2], 0, HEAP32[$3 + 28 >> 2]);
     }
     jsvUnLock(HEAP32[$3 + 28 >> 2]);
     jsvObjectIteratorNext($3 + 32 | 0);
     continue;
    }
    break;
   }
   jsvObjectIteratorFree_9($3 + 32 | 0);
  }
  while (1) {
   if (jsvObjectIteratorHasValue_9($3 + 56 | 0) & 1) {
    HEAP32[$3 + 12 >> 2] = jsvObjectIteratorGetKey_6($3 + 56 | 0);
    HEAP32[$3 + 8 >> 2] = jsvCopyNameOnly(HEAP32[$3 + 12 >> 2], 1, 1);
    if (HEAP32[$3 + 8 >> 2]) {
     jsvAddName(HEAP32[$3 + 60 >> 2], HEAP32[$3 + 8 >> 2]);
     jsvUnLock(HEAP32[$3 + 8 >> 2]);
    }
    jsvUnLock(HEAP32[$3 + 12 >> 2]);
    jsvObjectIteratorNext($3 + 56 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_9($3 + 56 | 0);
  jsvObjectSetChild(HEAP32[$3 + 60 >> 2], 115428, HEAP32[$3 + 68 >> 2]);
  HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 60 >> 2];
 }
 __stack_pointer = $3 + 80 | 0;
 return HEAP32[$3 + 76 >> 2];
}

function jswrap_function_replaceWith($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP32[$2 + 40 >> 2] = $1;
 label$1: {
  label$2: {
   if (jsvIsFunction(HEAP32[$2 + 44 >> 2]) & 1) {
    if (jsvIsFunction(HEAP32[$2 + 40 >> 2]) & 1) {
     break label$2;
    }
   }
   jsExceptionHere(3, 117382, 0);
   break label$1;
  }
  if ((jsvIsNativeFunction(HEAP32[$2 + 44 >> 2]) & 1) != (jsvIsNativeFunction(HEAP32[$2 + 40 >> 2]) & 1)) {
   label$5: {
    if (jsvIsNativeFunction(HEAP32[$2 + 40 >> 2]) & 1) {
     $0 = HEAP32[$2 + 44 >> 2];
     $1 = HEAP32[$2 + 44 >> 2];
     $1 = (HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & -64 | 8;
     HEAP8[$0 + 12 | 0] = $1;
     HEAP8[$0 + 13 | 0] = $1 >>> 8;
     $0 = HEAP32[$2 + 44 >> 2];
     $1 = HEAP32[$2 + 40 >> 2];
     $3 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
     HEAP8[$0 | 0] = $3;
     HEAP8[$0 + 1 | 0] = $3 >>> 8;
     HEAP8[$0 + 2 | 0] = $3 >>> 16;
     HEAP8[$0 + 3 | 0] = $3 >>> 24;
     $1 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8;
     HEAP8[$0 + 4 | 0] = $1;
     HEAP8[$0 + 5 | 0] = $1 >>> 8;
     break label$5;
    }
    $0 = HEAP32[$2 + 44 >> 2];
    HEAP8[$0 | 0] = 0;
    HEAP8[$0 + 1 | 0] = 0;
    HEAP8[$0 + 2 | 0] = 0;
    HEAP8[$0 + 3 | 0] = 0;
    HEAP8[$0 + 4 | 0] = 0;
    HEAP8[$0 + 5 | 0] = 0;
    $0 = HEAP32[$2 + 44 >> 2];
    $1 = HEAP32[$2 + 44 >> 2];
    $1 = (HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & -64 | 7;
    HEAP8[$0 + 12 | 0] = $1;
    HEAP8[$0 + 13 | 0] = $1 >>> 8;
   }
  }
  if ((jsvIsFunctionReturn(HEAP32[$2 + 44 >> 2]) & 1) != (jsvIsFunctionReturn(HEAP32[$2 + 40 >> 2]) & 1)) {
   label$8: {
    if (jsvIsFunctionReturn(HEAP32[$2 + 40 >> 2]) & 1) {
     $0 = HEAP32[$2 + 44 >> 2];
     $1 = HEAP32[$2 + 44 >> 2];
     $1 = (HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & -64 | 9;
     HEAP8[$0 + 12 | 0] = $1;
     HEAP8[$0 + 13 | 0] = $1 >>> 8;
     break label$8;
    }
    $0 = HEAP32[$2 + 44 >> 2];
    $1 = HEAP32[$2 + 44 >> 2];
    $1 = (HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & -64 | 7;
    HEAP8[$0 + 12 | 0] = $1;
    HEAP8[$0 + 13 | 0] = $1 >>> 8;
   }
  }
  HEAP32[$2 + 36 >> 2] = jsvFindChildFromString(HEAP32[$2 + 44 >> 2], 117081);
  HEAP32[$2 + 32 >> 2] = jsvFindChildFromString(HEAP32[$2 + 44 >> 2], 119810);
  jsvRemoveAllChildren(HEAP32[$2 + 44 >> 2]);
  jsvObjectIteratorNew($2 + 24 | 0, HEAP32[$2 + 40 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_9($2 + 24 | 0) & 1) {
    HEAP32[$2 + 20 >> 2] = jsvObjectIteratorGetKey_6($2 + 24 | 0);
    jsvObjectIteratorNext($2 + 24 | 0);
    label$12: {
     if (jsvIsStringEqual(HEAP32[$2 + 20 >> 2], 117081) & 1) {
      break label$12;
     }
     if (jsvIsStringEqual(HEAP32[$2 + 20 >> 2], 119810) & 1) {
      break label$12;
     }
     label$13: {
      if (jsvIsStringEqual(HEAP32[$2 + 20 >> 2], 120874) & 1) {
       HEAP32[$2 + 12 >> 2] = jsvSkipName(HEAP32[$2 + 20 >> 2]);
       HEAP32[$2 + 16 >> 2] = jsvMakeIntoVariableName(jsvNewFromStringVarComplete(HEAP32[$2 + 20 >> 2]), HEAP32[$2 + 12 >> 2]);
       jsvUnLock(HEAP32[$2 + 12 >> 2]);
       break label$13;
      }
      HEAP32[$2 + 16 >> 2] = jsvCopy(HEAP32[$2 + 20 >> 2], 1);
     }
     if (HEAP32[$2 + 16 >> 2]) {
      jsvAddName(HEAP32[$2 + 44 >> 2], HEAP32[$2 + 16 >> 2]);
      jsvUnLock(HEAP32[$2 + 16 >> 2]);
     }
    }
    jsvUnLock(HEAP32[$2 + 20 >> 2]);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_9($2 + 24 | 0);
  if (HEAP32[$2 + 36 >> 2]) {
   jsvAddName(HEAP32[$2 + 44 >> 2], HEAP32[$2 + 36 >> 2]);
  }
  jsvUnLock(HEAP32[$2 + 36 >> 2]);
  if (HEAP32[$2 + 32 >> 2]) {
   jsvAddName(HEAP32[$2 + 44 >> 2], HEAP32[$2 + 32 >> 2]);
  }
  jsvUnLock(HEAP32[$2 + 32 >> 2]);
 }
 __stack_pointer = $2 + 48 | 0;
}

function graphicsDrawCircleAA($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 44 >> 2] = $0;
 HEAP32[$4 + 40 >> 2] = $1;
 HEAP32[$4 + 36 >> 2] = $2;
 HEAP32[$4 + 32 >> 2] = $3;
 graphicsToDeviceCoordinates(HEAP32[$4 + 44 >> 2], $4 + 40 | 0, $4 + 36 | 0);
 HEAP32[$4 + 28 >> 2] = 0 - HEAP32[$4 + 32 >> 2];
 HEAP32[$4 + 24 >> 2] = 0;
 HEAP32[$4 + 20 >> 2] = 2 - (HEAP32[$4 + 32 >> 2] << 1);
 HEAP32[$4 + 32 >> 2] = 1 - HEAP32[$4 + 20 >> 2];
 while (1) {
  HEAP32[$4 + 16 >> 2] = 255 - ((Math_imul(abs((HEAP32[$4 + 20 >> 2] - (HEAP32[$4 + 28 >> 2] + HEAP32[$4 + 24 >> 2] << 1) | 0) - 2 | 0), 255) | 0) / HEAP32[$4 + 32 >> 2] | 0);
  graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2] - HEAP32[$4 + 28 >> 2] | 0, HEAP32[$4 + 36 >> 2] + HEAP32[$4 + 24 >> 2] | 0, HEAP32[$4 + 16 >> 2]);
  graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2] - HEAP32[$4 + 24 >> 2] | 0, HEAP32[$4 + 36 >> 2] - HEAP32[$4 + 28 >> 2] | 0, HEAP32[$4 + 16 >> 2]);
  graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2] + HEAP32[$4 + 28 >> 2] | 0, HEAP32[$4 + 36 >> 2] - HEAP32[$4 + 24 >> 2] | 0, HEAP32[$4 + 16 >> 2]);
  graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2] + HEAP32[$4 + 24 >> 2] | 0, HEAP32[$4 + 36 >> 2] + HEAP32[$4 + 28 >> 2] | 0, HEAP32[$4 + 16 >> 2]);
  HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 20 >> 2];
  HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 28 >> 2];
  if ((HEAP32[$4 + 20 >> 2] + HEAP32[$4 + 24 >> 2] | 0) > 0) {
   HEAP32[$4 + 16 >> 2] = 255 - ((Math_imul((HEAP32[$4 + 20 >> 2] - (HEAP32[$4 + 28 >> 2] << 1) | 0) - 1 | 0, 255) | 0) / HEAP32[$4 + 32 >> 2] | 0);
   if (HEAP32[$4 + 16 >> 2] > 0) {
    graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2] - HEAP32[$4 + 28 >> 2] | 0, (HEAP32[$4 + 36 >> 2] + HEAP32[$4 + 24 >> 2] | 0) + 1 | 0, HEAP32[$4 + 16 >> 2]);
    graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], (HEAP32[$4 + 40 >> 2] - HEAP32[$4 + 24 >> 2] | 0) - 1 | 0, HEAP32[$4 + 36 >> 2] - HEAP32[$4 + 28 >> 2] | 0, HEAP32[$4 + 16 >> 2]);
    graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2] + HEAP32[$4 + 28 >> 2] | 0, (HEAP32[$4 + 36 >> 2] - HEAP32[$4 + 24 >> 2] | 0) - 1 | 0, HEAP32[$4 + 16 >> 2]);
    graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], (HEAP32[$4 + 40 >> 2] + HEAP32[$4 + 24 >> 2] | 0) + 1 | 0, HEAP32[$4 + 36 >> 2] + HEAP32[$4 + 28 >> 2] | 0, HEAP32[$4 + 16 >> 2]);
   }
   $0 = HEAP32[$4 + 28 >> 2] + 1 | 0;
   HEAP32[$4 + 28 >> 2] = $0;
   HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 20 >> 2] + (($0 << 1) + 1 | 0);
  }
  if ((HEAP32[$4 + 8 >> 2] + HEAP32[$4 + 12 >> 2] | 0) <= 0) {
   HEAP32[$4 + 16 >> 2] = 255 - ((Math_imul(((HEAP32[$4 + 24 >> 2] << 1) + 3 | 0) - HEAP32[$4 + 8 >> 2] | 0, 255) | 0) / HEAP32[$4 + 32 >> 2] | 0);
   if (HEAP32[$4 + 16 >> 2] > 0) {
    graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], (HEAP32[$4 + 40 >> 2] - HEAP32[$4 + 12 >> 2] | 0) - 1 | 0, HEAP32[$4 + 36 >> 2] + HEAP32[$4 + 24 >> 2] | 0, HEAP32[$4 + 16 >> 2]);
    graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2] - HEAP32[$4 + 24 >> 2] | 0, (HEAP32[$4 + 36 >> 2] - HEAP32[$4 + 12 >> 2] | 0) - 1 | 0, HEAP32[$4 + 16 >> 2]);
    graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], (HEAP32[$4 + 40 >> 2] + HEAP32[$4 + 12 >> 2] | 0) + 1 | 0, HEAP32[$4 + 36 >> 2] - HEAP32[$4 + 24 >> 2] | 0, HEAP32[$4 + 16 >> 2]);
    graphicsSetPixelDeviceBlended(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2] + HEAP32[$4 + 24 >> 2] | 0, (HEAP32[$4 + 36 >> 2] + HEAP32[$4 + 12 >> 2] | 0) + 1 | 0, HEAP32[$4 + 16 >> 2]);
   }
   $0 = HEAP32[$4 + 24 >> 2] + 1 | 0;
   HEAP32[$4 + 24 >> 2] = $0;
   HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 20 >> 2] + (($0 << 1) + 1 | 0);
  }
  if (HEAP32[$4 + 28 >> 2] < 0) {
   continue;
  }
  break;
 }
 __stack_pointer = $4 + 48 | 0;
}

function mbedtls_sha256_finish($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = HEAP32[HEAP32[$2 + 28 >> 2] + 4 >> 2] << 3 | HEAP32[HEAP32[$2 + 28 >> 2] >> 2] >>> 29;
 HEAP32[$2 + 8 >> 2] = HEAP32[HEAP32[$2 + 28 >> 2] >> 2] << 3;
 HEAP8[$2 | 0] = HEAP32[$2 + 12 >> 2] >>> 24;
 HEAP8[$2 + 1 | 0] = HEAP32[$2 + 12 >> 2] >>> 16;
 HEAP8[$2 + 2 | 0] = HEAP32[$2 + 12 >> 2] >>> 8;
 HEAP8[$2 + 3 | 0] = HEAP32[$2 + 12 >> 2];
 HEAP8[$2 + 4 | 0] = HEAP32[$2 + 8 >> 2] >>> 24;
 HEAP8[$2 + 5 | 0] = HEAP32[$2 + 8 >> 2] >>> 16;
 HEAP8[$2 + 6 | 0] = HEAP32[$2 + 8 >> 2] >>> 8;
 HEAP8[$2 + 7 | 0] = HEAP32[$2 + 8 >> 2];
 HEAP32[$2 + 20 >> 2] = HEAP32[HEAP32[$2 + 28 >> 2] >> 2] & 63;
 if (HEAPU32[$2 + 20 >> 2] < 56) {
  $0 = 56 - HEAP32[$2 + 20 >> 2] | 0;
 } else {
  $0 = 120 - HEAP32[$2 + 20 >> 2] | 0;
 }
 HEAP32[$2 + 16 >> 2] = $0;
 mbedtls_sha256_update(HEAP32[$2 + 28 >> 2], 162880, HEAP32[$2 + 16 >> 2]);
 mbedtls_sha256_update(HEAP32[$2 + 28 >> 2], $2, 8);
 HEAP8[HEAP32[$2 + 24 >> 2]] = HEAP32[HEAP32[$2 + 28 >> 2] + 8 >> 2] >>> 24;
 HEAP8[HEAP32[$2 + 24 >> 2] + 1 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 8 >> 2] >>> 16;
 HEAP8[HEAP32[$2 + 24 >> 2] + 2 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 8 >> 2] >>> 8;
 HEAP8[HEAP32[$2 + 24 >> 2] + 3 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 8 >> 2];
 HEAP8[HEAP32[$2 + 24 >> 2] + 4 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 12 >> 2] >>> 24;
 HEAP8[HEAP32[$2 + 24 >> 2] + 5 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 12 >> 2] >>> 16;
 HEAP8[HEAP32[$2 + 24 >> 2] + 6 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 12 >> 2] >>> 8;
 HEAP8[HEAP32[$2 + 24 >> 2] + 7 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 12 >> 2];
 HEAP8[HEAP32[$2 + 24 >> 2] + 8 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 16 >> 2] >>> 24;
 HEAP8[HEAP32[$2 + 24 >> 2] + 9 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 16 >> 2] >>> 16;
 HEAP8[HEAP32[$2 + 24 >> 2] + 10 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 16 >> 2] >>> 8;
 HEAP8[HEAP32[$2 + 24 >> 2] + 11 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 16 >> 2];
 HEAP8[HEAP32[$2 + 24 >> 2] + 12 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 20 >> 2] >>> 24;
 HEAP8[HEAP32[$2 + 24 >> 2] + 13 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 20 >> 2] >>> 16;
 HEAP8[HEAP32[$2 + 24 >> 2] + 14 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 20 >> 2] >>> 8;
 HEAP8[HEAP32[$2 + 24 >> 2] + 15 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 20 >> 2];
 HEAP8[HEAP32[$2 + 24 >> 2] + 16 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 24 >> 2] >>> 24;
 HEAP8[HEAP32[$2 + 24 >> 2] + 17 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 24 >> 2] >>> 16;
 HEAP8[HEAP32[$2 + 24 >> 2] + 18 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 24 >> 2] >>> 8;
 HEAP8[HEAP32[$2 + 24 >> 2] + 19 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 24 >> 2];
 HEAP8[HEAP32[$2 + 24 >> 2] + 20 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 28 >> 2] >>> 24;
 HEAP8[HEAP32[$2 + 24 >> 2] + 21 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 28 >> 2] >>> 16;
 HEAP8[HEAP32[$2 + 24 >> 2] + 22 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 28 >> 2] >>> 8;
 HEAP8[HEAP32[$2 + 24 >> 2] + 23 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 28 >> 2];
 HEAP8[HEAP32[$2 + 24 >> 2] + 24 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 32 >> 2] >>> 24;
 HEAP8[HEAP32[$2 + 24 >> 2] + 25 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 32 >> 2] >>> 16;
 HEAP8[HEAP32[$2 + 24 >> 2] + 26 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 32 >> 2] >>> 8;
 HEAP8[HEAP32[$2 + 24 >> 2] + 27 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 32 >> 2];
 if (!HEAP32[HEAP32[$2 + 28 >> 2] + 104 >> 2]) {
  HEAP8[HEAP32[$2 + 24 >> 2] + 28 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 36 >> 2] >>> 24;
  HEAP8[HEAP32[$2 + 24 >> 2] + 29 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 36 >> 2] >>> 16;
  HEAP8[HEAP32[$2 + 24 >> 2] + 30 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 36 >> 2] >>> 8;
  HEAP8[HEAP32[$2 + 24 >> 2] + 31 | 0] = HEAP32[HEAP32[$2 + 28 >> 2] + 36 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
}

function tflite__ops__micro__conv__EvalQuantized_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteConvParams__2c_20tflite__ops__micro__conv__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__2c_20TfLiteEvalTensor__2c_20TfLiteEvalTensor__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 var $10 = 0;
 $10 = __stack_pointer - 240 | 0;
 __stack_pointer = $10;
 HEAP32[$10 + 236 >> 2] = $0;
 HEAP32[$10 + 232 >> 2] = $1;
 HEAP32[$10 + 228 >> 2] = $2;
 HEAP32[$10 + 224 >> 2] = $3;
 HEAP32[$10 + 220 >> 2] = $4;
 HEAP32[$10 + 216 >> 2] = $5;
 HEAP32[$10 + 212 >> 2] = $6;
 HEAP32[$10 + 208 >> 2] = $7;
 HEAP32[$10 + 204 >> 2] = $8;
 HEAP32[$10 + 200 >> 2] = $9;
 HEAP32[$10 + 196 >> 2] = 0 - HEAP32[HEAP32[$10 + 224 >> 2] + 16 >> 2];
 HEAP32[$10 + 192 >> 2] = 0 - HEAP32[HEAP32[$10 + 224 >> 2] + 20 >> 2];
 HEAP32[$10 + 188 >> 2] = HEAP32[HEAP32[$10 + 224 >> 2] + 24 >> 2];
 HEAP8[$10 + 128 | 0] = tflite__ops__micro__conv__RuntimePaddingType_28TfLitePadding_29(HEAP32[HEAP32[$10 + 228 >> 2] >> 2]);
 HEAP16[$10 + 130 >> 1] = HEAP32[HEAP32[$10 + 224 >> 2] >> 2];
 HEAP16[$10 + 132 >> 1] = HEAP32[HEAP32[$10 + 224 >> 2] + 4 >> 2];
 HEAP16[$10 + 138 >> 1] = HEAP32[HEAP32[$10 + 228 >> 2] + 4 >> 2];
 HEAP16[$10 + 140 >> 1] = HEAP32[HEAP32[$10 + 228 >> 2] + 8 >> 2];
 HEAP16[$10 + 142 >> 1] = HEAP32[HEAP32[$10 + 228 >> 2] + 16 >> 2];
 HEAP16[$10 + 144 >> 1] = HEAP32[HEAP32[$10 + 228 >> 2] + 20 >> 2];
 HEAP32[$10 + 148 >> 2] = HEAP32[$10 + 196 >> 2];
 HEAP32[$10 + 152 >> 2] = HEAP32[$10 + 192 >> 2];
 HEAP32[$10 + 156 >> 2] = HEAP32[$10 + 188 >> 2];
 HEAP32[$10 + 160 >> 2] = HEAP32[HEAP32[$10 + 224 >> 2] + 28 >> 2];
 HEAP32[$10 + 164 >> 2] = 0 - HEAP32[HEAP32[$10 + 224 >> 2] + 32 >> 2];
 HEAP32[$10 + 168 >> 2] = HEAP32[HEAP32[$10 + 224 >> 2] + 44 >> 2];
 HEAP32[$10 + 172 >> 2] = HEAP32[HEAP32[$10 + 224 >> 2] + 48 >> 2];
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($10 + 104 | 0, HEAP32[$10 + 220 >> 2]);
 $0 = unsigned_20char_20const__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor_20const__29(HEAP32[$10 + 220 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($10 + 80 | 0, HEAP32[$10 + 216 >> 2]);
 $1 = unsigned_20char_20const__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor_20const__29(HEAP32[$10 + 216 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($10 + 56 | 0, HEAP32[$10 + 212 >> 2]);
 $2 = int_20const__20tflite__micro__GetTensorData_int__28TfLiteEvalTensor_20const__29(HEAP32[$10 + 212 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($10 + 32 | 0, HEAP32[$10 + 200 >> 2]);
 $3 = unsigned_20char__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor__29(HEAP32[$10 + 200 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($10 + 8 | 0, HEAP32[$10 + 208 >> 2]);
 tflite__reference_ops__Conv_28tflite__ConvParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__2c_20void__29($10 + 128 | 0, $10 + 104 | 0, $0, $10 + 80 | 0, $1, $10 + 56 | 0, $2, $10 + 32 | 0, $3, $10 + 8 | 0, unsigned_20char__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor__29(HEAP32[$10 + 208 >> 2]), 0);
 tflite__RuntimeShape___RuntimeShape_28_29($10 + 8 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($10 + 32 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($10 + 56 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($10 + 80 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($10 + 104 | 0);
 __stack_pointer = $10 + 240 | 0;
}

function stringToFloatWithRadix($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer + -64 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 52 >> 2] = $0;
 HEAP32[$3 + 48 >> 2] = $1;
 HEAP32[$3 + 44 >> 2] = $2;
 while (1) {
  if (isWhitespace(HEAP8[HEAP32[$3 + 52 >> 2]]) & 1) {
   HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP8[$3 + 43 | 0] = 0;
 label$3: {
  if (HEAP8[HEAP32[$3 + 52 >> 2]] == 45) {
   HEAP8[$3 + 43 | 0] = 1;
   HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
   break label$3;
  }
  if (HEAP8[HEAP32[$3 + 52 >> 2]] == 43) {
   HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
  }
 }
 HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 52 >> 2];
 if (HEAP32[$3 + 44 >> 2]) {
  HEAP32[HEAP32[$3 + 44 >> 2] >> 2] = HEAP32[$3 + 52 >> 2];
 }
 if (HEAP32[$3 + 48 >> 2]) {
  $0 = HEAP32[$3 + 48 >> 2];
 } else {
  $0 = getRadix($3 + 52 | 0);
 }
 HEAP32[$3 + 32 >> 2] = $0;
 label$9: {
  if (!HEAP32[$3 + 32 >> 2]) {
   HEAPF64[$3 + 56 >> 3] = nan;
   break label$9;
  }
  HEAPF64[$3 + 24 >> 3] = 0;
  HEAPF64[$3 + 16 >> 3] = .1;
  while (1) {
   label$12: {
    if (!HEAPU8[HEAP32[$3 + 52 >> 2]]) {
     break label$12;
    }
    HEAP32[$3 + 12 >> 2] = chtod(HEAP8[HEAP32[$3 + 52 >> 2]]);
    if (HEAP32[$3 + 12 >> 2] < 0 | HEAP32[$3 + 12 >> 2] >= HEAP32[$3 + 32 >> 2]) {
     break label$12;
    }
    HEAPF64[$3 + 24 >> 3] = HEAPF64[$3 + 24 >> 3] * +HEAP32[$3 + 32 >> 2] + +HEAP32[$3 + 12 >> 2];
    HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP32[$3 + 32 >> 2] == 10) {
   if (HEAP8[HEAP32[$3 + 52 >> 2]] == 46) {
    HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
    while (1) {
     if (!(!HEAPU8[HEAP32[$3 + 52 >> 2]] | HEAP8[HEAP32[$3 + 52 >> 2]] < 48 | HEAP8[HEAP32[$3 + 52 >> 2]] > 57)) {
      HEAPF64[$3 + 24 >> 3] = HEAPF64[$3 + 16 >> 3] * +(HEAP8[HEAP32[$3 + 52 >> 2]] - 48 | 0) + HEAPF64[$3 + 24 >> 3];
      HEAPF64[$3 + 16 >> 3] = HEAPF64[$3 + 16 >> 3] / 10;
      HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
      continue;
     }
     break;
    }
   }
   if (!(HEAP8[HEAP32[$3 + 52 >> 2]] != 101 & HEAP8[HEAP32[$3 + 52 >> 2]] != 69)) {
    HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
    HEAP8[$3 + 11 | 0] = 0;
    if (!(HEAP8[HEAP32[$3 + 52 >> 2]] != 45 & HEAP8[HEAP32[$3 + 52 >> 2]] != 43)) {
     HEAP8[$3 + 11 | 0] = HEAP8[HEAP32[$3 + 52 >> 2]] == 45;
     HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
    }
    HEAP32[$3 + 4 >> 2] = 0;
    while (1) {
     if (!(!HEAPU8[HEAP32[$3 + 52 >> 2]] | HEAP8[HEAP32[$3 + 52 >> 2]] < 48 | HEAP8[HEAP32[$3 + 52 >> 2]] > 57)) {
      HEAP32[$3 + 4 >> 2] = (HEAP8[HEAP32[$3 + 52 >> 2]] - 48 | 0) + Math_imul(HEAP32[$3 + 4 >> 2], 10);
      HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
      continue;
     }
     break;
    }
    if (HEAP8[$3 + 11 | 0] & 1) {
     HEAP32[$3 + 4 >> 2] = 0 - HEAP32[$3 + 4 >> 2];
    }
    while (1) {
     if (HEAP32[$3 + 4 >> 2] > 0) {
      HEAPF64[$3 + 24 >> 3] = HEAPF64[$3 + 24 >> 3] * 10;
      HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] - 1;
      continue;
     }
     break;
    }
    while (1) {
     if (HEAP32[$3 + 4 >> 2] < 0) {
      HEAPF64[$3 + 24 >> 3] = HEAPF64[$3 + 24 >> 3] / 10;
      HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
      continue;
     }
     break;
    }
   }
  }
  if (HEAP32[$3 + 44 >> 2]) {
   HEAP32[HEAP32[$3 + 44 >> 2] >> 2] = HEAP32[$3 + 52 >> 2];
  }
  if (!((HEAP8[HEAP32[$3 + 36 >> 2]] != 46 | HEAP32[$3 + 52 >> 2] != (HEAP32[$3 + 36 >> 2] + 1 | 0)) & HEAP32[$3 + 36 >> 2] != HEAP32[$3 + 52 >> 2])) {
   HEAPF64[$3 + 56 >> 3] = nan;
   break label$9;
  }
  if (HEAP8[$3 + 43 | 0] & 1) {
   HEAPF64[$3 + 56 >> 3] = -HEAPF64[$3 + 24 >> 3];
   break label$9;
  }
  HEAPF64[$3 + 56 >> 3] = HEAPF64[$3 + 24 >> 3];
 }
 __stack_pointer = $3 - -64 | 0;
 return HEAPF64[$3 + 56 >> 3];
}

function _jswrap_drawImageLayerInit($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 44 >> 2] = $0;
 HEAP32[HEAP32[$1 + 44 >> 2] + 156 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] + 36 >> 2] << 8;
 HEAP32[HEAP32[$1 + 44 >> 2] + 160 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] + 40 >> 2] << 8;
 HEAPF64[$1 + 32 >> 3] = jswrap_math_cos(HEAPF64[HEAP32[$1 + 44 >> 2] + 16 >> 3]);
 HEAPF64[$1 + 24 >> 3] = jswrap_math_sin(HEAPF64[HEAP32[$1 + 44 >> 2] + 16 >> 3]);
 $3 = HEAP32[$1 + 44 >> 2];
 $2 = HEAPF64[$1 + 32 >> 3] / HEAPF64[HEAP32[$1 + 44 >> 2] + 24 >> 3] * 256 + .5;
 label$1: {
  if (Math_abs($2) < 2147483648) {
   $0 = ~~$2;
   break label$1;
  }
  $0 = -2147483648;
 }
 HEAP32[$3 + 164 >> 2] = $0;
 $3 = HEAP32[$1 + 44 >> 2];
 $2 = HEAPF64[$1 + 24 >> 3] / HEAPF64[HEAP32[$1 + 44 >> 2] + 24 >> 3] * 256 + .5;
 label$3: {
  if (Math_abs($2) < 2147483648) {
   $0 = ~~$2;
   break label$3;
  }
  $0 = -2147483648;
 }
 HEAP32[$3 + 168 >> 2] = $0;
 $2 = HEAPF64[HEAP32[$1 + 44 >> 2] + 24 >> 3] * (+HEAP32[HEAP32[$1 + 44 >> 2] + 36 >> 2] * Math_abs(HEAPF64[$1 + 32 >> 3]) + +HEAP32[HEAP32[$1 + 44 >> 2] + 40 >> 2] * Math_abs(HEAPF64[$1 + 24 >> 3])) + .5;
 label$5: {
  if (Math_abs($2) < 2147483648) {
   $0 = ~~$2;
   break label$5;
  }
  $0 = -2147483648;
 }
 HEAP32[$1 + 20 >> 2] = $0;
 $2 = HEAPF64[HEAP32[$1 + 44 >> 2] + 24 >> 3] * (+HEAP32[HEAP32[$1 + 44 >> 2] + 36 >> 2] * Math_abs(HEAPF64[$1 + 24 >> 3]) + +HEAP32[HEAP32[$1 + 44 >> 2] + 40 >> 2] * Math_abs(HEAPF64[$1 + 32 >> 3])) + .5;
 label$7: {
  if (Math_abs($2) < 2147483648) {
   $0 = ~~$2;
   break label$7;
  }
  $0 = -2147483648;
 }
 HEAP32[$1 + 16 >> 2] = $0;
 if (HEAP8[HEAP32[$1 + 44 >> 2] + 32 | 0] & 1) {
  $0 = HEAP32[$1 + 44 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] - (HEAP32[$1 + 20 >> 2] / 2 | 0);
  $0 = HEAP32[$1 + 44 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] - (HEAP32[$1 + 16 >> 2] / 2 | 0);
 }
 HEAP32[HEAP32[$1 + 44 >> 2] + 8 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] >> 2] + HEAP32[$1 + 20 >> 2];
 HEAP32[HEAP32[$1 + 44 >> 2] + 12 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] + 4 >> 2] + HEAP32[$1 + 16 >> 2];
 HEAP32[$1 + 12 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] + 36 >> 2] << 7;
 HEAP32[$1 + 8 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] + 40 >> 2] << 7;
 HEAP32[HEAP32[$1 + 44 >> 2] + 172 >> 2] = HEAP32[$1 + 12 >> 2] - (((Math_imul(HEAP32[HEAP32[$1 + 44 >> 2] + 164 >> 2], HEAP32[$1 + 20 >> 2]) + 1 | 0) + Math_imul(HEAP32[HEAP32[$1 + 44 >> 2] + 168 >> 2], HEAP32[$1 + 16 >> 2]) | 0) / 2 | 0);
 HEAP32[HEAP32[$1 + 44 >> 2] + 176 >> 2] = HEAP32[$1 + 8 >> 2] - (((Math_imul(HEAP32[HEAP32[$1 + 44 >> 2] + 164 >> 2], HEAP32[$1 + 16 >> 2]) + 1 | 0) - Math_imul(HEAP32[HEAP32[$1 + 44 >> 2] + 168 >> 2], HEAP32[$1 + 20 >> 2]) | 0) / 2 | 0);
 if (HEAP8[HEAP32[$1 + 44 >> 2] + 33 | 0] & 1) {
  while (1) {
   if (HEAP32[HEAP32[$1 + 44 >> 2] + 172 >> 2] < 0) {
    $0 = HEAP32[$1 + 44 >> 2];
    HEAP32[$0 + 172 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] + 156 >> 2] + HEAP32[$0 + 172 >> 2];
    continue;
   }
   break;
  }
  while (1) {
   if (HEAP32[HEAP32[$1 + 44 >> 2] + 172 >> 2] >= HEAP32[HEAP32[$1 + 44 >> 2] + 156 >> 2]) {
    $0 = HEAP32[$1 + 44 >> 2];
    HEAP32[$0 + 172 >> 2] = HEAP32[$0 + 172 >> 2] - HEAP32[HEAP32[$1 + 44 >> 2] + 156 >> 2];
    continue;
   }
   break;
  }
  while (1) {
   if (HEAP32[HEAP32[$1 + 44 >> 2] + 176 >> 2] < 0) {
    $0 = HEAP32[$1 + 44 >> 2];
    HEAP32[$0 + 176 >> 2] = HEAP32[HEAP32[$1 + 44 >> 2] + 160 >> 2] + HEAP32[$0 + 176 >> 2];
    continue;
   }
   break;
  }
  while (1) {
   if (HEAP32[HEAP32[$1 + 44 >> 2] + 176 >> 2] >= HEAP32[HEAP32[$1 + 44 >> 2] + 160 >> 2]) {
    $0 = HEAP32[$1 + 44 >> 2];
    HEAP32[$0 + 176 >> 2] = HEAP32[$0 + 176 >> 2] - HEAP32[HEAP32[$1 + 44 >> 2] + 160 >> 2];
    continue;
   }
   break;
  }
 }
 __stack_pointer = $1 + 48 | 0;
}

function jshPinFunctionToString($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP16[$4 + 46 >> 1] = $0;
 HEAP32[$4 + 40 >> 2] = $1;
 HEAP32[$4 + 36 >> 2] = $2;
 HEAP32[$4 + 32 >> 2] = $3;
 HEAP32[$4 + 28 >> 2] = 146978;
 HEAP16[$4 + 26 >> 1] = HEAPU16[$4 + 46 >> 1] & 61440;
 HEAP16[$4 + 24 >> 1] = 0;
 HEAP32[$4 + 20 >> 2] = 0;
 HEAP8[HEAP32[$4 + 36 >> 2]] = 0;
 label$1: {
  if (!((HEAPU16[$4 + 46 >> 1] & 4080) >>> 0 < 768 | (HEAPU16[$4 + 46 >> 1] & 4080) >>> 0 > 848)) {
   HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 40 >> 2] & 16 ? 118122 : 123720;
   HEAP16[$4 + 24 >> 1] = 768;
   label$3: {
    if (!HEAPU16[$4 + 26 >> 1]) {
     HEAP32[$4 + 20 >> 2] = 123585;
     break label$3;
    }
    label$5: {
     if (HEAPU16[$4 + 26 >> 1] == 4096) {
      HEAP32[$4 + 20 >> 2] = 123501;
      break label$5;
     }
     if (HEAPU16[$4 + 26 >> 1] == 8192) {
      HEAP32[$4 + 20 >> 2] = 124521;
     }
    }
   }
   break label$1;
  }
  label$8: {
   if (!((HEAPU16[$4 + 46 >> 1] & 4080) >>> 0 < 512 | (HEAPU16[$4 + 46 >> 1] & 4080) >>> 0 > 544)) {
    HEAP32[$4 + 28 >> 2] = 124621;
    HEAP16[$4 + 24 >> 1] = 512;
    label$10: {
     if (!HEAPU16[$4 + 26 >> 1]) {
      HEAP32[$4 + 20 >> 2] = 124074;
      break label$10;
     }
     label$12: {
      if (HEAPU16[$4 + 26 >> 1] == 4096) {
       HEAP32[$4 + 20 >> 2] = 124528;
       break label$12;
      }
      if (HEAPU16[$4 + 26 >> 1] == 8192) {
       HEAP32[$4 + 20 >> 2] = 124504;
      }
     }
    }
    break label$8;
   }
   label$15: {
    if (!((HEAPU16[$4 + 46 >> 1] & 4080) >>> 0 < 640 | (HEAPU16[$4 + 46 >> 1] & 4080) >>> 0 > 688)) {
     HEAP32[$4 + 28 >> 2] = 125181;
     HEAP16[$4 + 24 >> 1] = 640;
     label$17: {
      if (!HEAPU16[$4 + 26 >> 1]) {
       HEAP32[$4 + 20 >> 2] = 124425;
       break label$17;
      }
      if (HEAPU16[$4 + 26 >> 1] == 4096) {
       HEAP32[$4 + 20 >> 2] = 125226;
      }
     }
     break label$15;
    }
    label$20: {
     if ((HEAPU16[$4 + 46 >> 1] & 4080) == 384) {
      HEAP32[$4 + 28 >> 2] = 125177;
      HEAP16[$4 + 24 >> 1] = 384;
      label$22: {
       if (!HEAPU16[$4 + 26 >> 1]) {
        HEAP32[$4 + 20 >> 2] = 126640;
        break label$22;
       }
       if (HEAPU16[$4 + 26 >> 1] == 4096) {
        HEAP32[$4 + 20 >> 2] = 126365;
       }
      }
      break label$20;
     }
     if (!((HEAPU16[$4 + 46 >> 1] & 4080) >>> 0 < 16 | (HEAPU16[$4 + 46 >> 1] & 4080) >>> 0 > 288)) {
      HEAP32[$4 + 28 >> 2] = 124356;
      HEAP16[$4 + 24 >> 1] = 16;
      HEAP32[$4 + 20 >> 2] = $4 + 15;
      HEAP8[$4 + 15 | 0] = 67;
      HEAP8[$4 + 16 | 0] = 72;
      HEAP8[$4 + 17 | 0] = ((HEAPU16[$4 + 26 >> 1] & 28672) >>> 12 | 0) + 49;
      label$26: {
       if (HEAPU16[$4 + 26 >> 1] & 32768) {
        HEAP8[$4 + 18 | 0] = 78;
        HEAP8[$4 + 19 | 0] = 0;
        break label$26;
       }
       HEAP8[$4 + 18 | 0] = 0;
      }
     }
    }
   }
  }
 }
 HEAP32[$4 + 8 >> 2] = ((HEAPU16[$4 + 46 >> 1] & 4080) - HEAPU16[$4 + 24 >> 1] >> 4) + 1;
 label$28: {
  if (!HEAP32[$4 + 28 >> 2]) {
   HEAP32[$4 >> 2] = HEAPU16[$4 + 46 >> 1];
   jsiConsolePrintf(145698, $4);
   break label$28;
  }
  if (HEAP32[$4 + 40 >> 2] & 1) {
   strncat(HEAP32[$4 + 36 >> 2], HEAP32[$4 + 28 >> 2], HEAP32[$4 + 32 >> 2] - 1 | 0);
  }
  if (HEAP32[$4 + 40 >> 2] & 2) {
   itostr_2(HEAP32[$4 + 8 >> 2], HEAP32[$4 + 36 >> 2] + strlen(HEAP32[$4 + 36 >> 2]) | 0, 10);
  }
  if (HEAP32[$4 + 40 >> 2] & 4) {
   strncat(HEAP32[$4 + 36 >> 2], 144421, HEAP32[$4 + 32 >> 2] - (strlen(HEAP32[$4 + 36 >> 2]) + 1 | 0) | 0);
  }
  if (!HEAP32[$4 + 20 >> 2] | !(HEAP32[$4 + 40 >> 2] & 8)) {
   break label$28;
  }
  strncat(HEAP32[$4 + 36 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 32 >> 2] - (strlen(HEAP32[$4 + 36 >> 2]) + 1 | 0) | 0);
 }
 __stack_pointer = $4 + 48 | 0;
}

function jsvAsString($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 112 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 108 >> 2] = $0;
 HEAP32[$1 + 104 >> 2] = 0;
 label$1: {
  label$2: {
   if (!(jsvHasCharacterData(HEAP32[$1 + 108 >> 2]) & 1)) {
    break label$2;
   }
   if (!(jsvIsName(HEAP32[$1 + 108 >> 2]) & 1)) {
    break label$2;
   }
   HEAP32[$1 + 104 >> 2] = jsvNewFromStringVarComplete(HEAP32[$1 + 108 >> 2]);
   break label$1;
  }
  label$3: {
   if (jsvIsString(HEAP32[$1 + 108 >> 2]) & 1) {
    HEAP32[$1 + 104 >> 2] = jsvLockAgain(HEAP32[$1 + 108 >> 2]);
    break label$3;
   }
   label$5: {
    if (jsvIsObject(HEAP32[$1 + 108 >> 2]) & 1) {
     HEAP32[$1 + 100 >> 2] = jspGetNamedField(HEAP32[$1 + 108 >> 2], 118770, 0);
     label$7: {
      label$8: {
       if (!HEAP32[$1 + 100 >> 2]) {
        break label$8;
       }
       $0 = HEAP32[$1 + 100 >> 2];
       if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 1) {
        break label$8;
       }
       HEAP32[$1 + 96 >> 2] = jspExecuteFunction(HEAP32[$1 + 100 >> 2], HEAP32[$1 + 108 >> 2], 0, 0);
       jsvUnLock(HEAP32[$1 + 100 >> 2]);
       HEAP32[$1 + 104 >> 2] = jsvAsStringAndUnLock(HEAP32[$1 + 96 >> 2]);
       break label$7;
      }
      jsvUnLock(HEAP32[$1 + 100 >> 2]);
      HEAP32[$1 + 104 >> 2] = jsvNewFromString(123026);
     }
     break label$5;
    }
    HEAP32[$1 + 92 >> 2] = jsvGetConstString(HEAP32[$1 + 108 >> 2]);
    label$9: {
     if (HEAP32[$1 + 92 >> 2]) {
      HEAP32[$1 + 104 >> 2] = jsvNewFromString(HEAP32[$1 + 92 >> 2]);
      break label$9;
     }
     label$11: {
      if (jsvIsPin(HEAP32[$1 + 108 >> 2]) & 1) {
       $0 = HEAP32[$1 + 108 >> 2];
       jshGetPinString($1 + 16 | 0, (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) & 255);
       HEAP32[$1 + 104 >> 2] = jsvNewFromString($1 + 16 | 0);
       break label$11;
      }
      label$13: {
       if (jsvIsInt(HEAP32[$1 + 108 >> 2]) & 1) {
        $0 = HEAP32[$1 + 108 >> 2];
        itostr(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), $1 + 16 | 0, 10);
        HEAP32[$1 + 104 >> 2] = jsvNewFromString($1 + 16 | 0);
        break label$13;
       }
       label$15: {
        if (jsvIsFloat(HEAP32[$1 + 108 >> 2]) & 1) {
         $0 = HEAP32[$1 + 108 >> 2];
         $2 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
         wasm2js_scratch_store_i32(0, HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24));
         wasm2js_scratch_store_i32(1, $2 | 0);
         ftoa_bounded(+wasm2js_scratch_load_f64(), $1 + 16 | 0, 70);
         HEAP32[$1 + 104 >> 2] = jsvNewFromString($1 + 16 | 0);
         break label$15;
        }
        label$17: {
         label$18: {
          if (!(jsvIsArray(HEAP32[$1 + 108 >> 2]) & 1)) {
           if (!(jsvIsArrayBuffer(HEAP32[$1 + 108 >> 2]) & 1)) {
            break label$18;
           }
          }
          HEAP32[$1 + 12 >> 2] = jsvNewFromString(128061);
          HEAP32[$1 + 104 >> 2] = jsvArrayJoin(HEAP32[$1 + 108 >> 2], HEAP32[$1 + 12 >> 2], 1);
          jsvUnLock(HEAP32[$1 + 12 >> 2]);
          break label$17;
         }
         label$20: {
          if (jsvIsFunction(HEAP32[$1 + 108 >> 2]) & 1) {
           HEAP32[$1 + 104 >> 2] = jsvNewFromEmptyString_1();
           if (HEAP32[$1 + 104 >> 2]) {
            jsfGetJSON(HEAP32[$1 + 108 >> 2], HEAP32[$1 + 104 >> 2], 0);
           }
           break label$20;
          }
          jsExceptionHere(4, 118726, 0);
         }
        }
       }
      }
     }
    }
   }
  }
 }
 __stack_pointer = $1 + 112 | 0;
 return HEAP32[$1 + 104 >> 2];
}

function jspeStatementSwitch() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 48 | 0;
 __stack_pointer = $0;
 jslGetNextToken();
 label$1: {
  if (!(jslMatch(40) & 1)) {
   break label$1;
  }
  HEAP32[$0 + 40 >> 2] = jspeExpression();
  HEAP32[$0 + 36 >> 2] = HEAP32[86758] & 512;
  HEAP32[$0 + 32 >> 2] = HEAP32[86758];
  HEAP8[$0 + 31 | 0] = (HEAP32[86758] & 63) == 1;
  if (!(jslMatch(41) & 1)) {
   jsvUnLock(HEAP32[$0 + 40 >> 2]);
   break label$1;
  }
  if (!(HEAP8[$0 + 31 | 0] & 1)) {
   jsvUnLock(HEAP32[$0 + 40 >> 2]);
   jspeBlock();
   break label$1;
  }
  if (!(jslMatch(123) & 1)) {
   jsvUnLock(HEAP32[$0 + 40 >> 2]);
   break label$1;
  }
  HEAP8[$0 + 30 | 0] = 1;
  if (HEAP8[$0 + 31 | 0] & 1) {
   HEAP32[86758] = HEAP32[$0 + 36 >> 2] | 1024;
  }
  while (1) {
   if (HEAP16[HEAP32[44743] + 2 >> 1] == 188) {
    HEAP32[$0 + 24 >> 2] = HEAP32[86758];
    if (HEAP8[$0 + 31 | 0] & 1) {
     HEAP32[86758] = HEAP32[$0 + 36 >> 2] | 1025;
    }
    if (!(jslMatch(188) & 1)) {
     jsvUnLock(HEAP32[$0 + 40 >> 2]);
     break label$1;
    }
    HEAP32[$0 + 20 >> 2] = jspeAssignmentExpression();
    HEAP32[86758] = HEAP32[$0 + 24 >> 2] | 1024;
    if (!(jslMatch(58) & 1)) {
     jsvUnLock2(HEAP32[$0 + 40 >> 2], HEAP32[$0 + 20 >> 2]);
     break label$1;
    }
    HEAP8[$0 + 19 | 0] = 0;
    if (HEAP8[$0 + 31 | 0] & 1) {
     HEAP8[$0 + 19 | 0] = jsvGetBoolAndUnLock(jsvMathsOpSkipNames(HEAP32[$0 + 40 >> 2], HEAP32[$0 + 20 >> 2], 139)) & 1;
    }
    if (HEAP8[$0 + 19 | 0] & 1) {
     HEAP8[$0 + 30 | 0] = 0;
    }
    jsvUnLock(HEAP32[$0 + 20 >> 2]);
    if (!(!(HEAP8[$0 + 19 | 0] & 1) | HEAP32[86758] & 63)) {
     HEAP32[86758] = HEAP32[$0 + 36 >> 2] | 1025;
    }
    while (1) {
     $1 = 0;
     label$16: {
      if (HEAP32[86758] & 80) {
       break label$16;
      }
      $1 = 0;
      if (!HEAP16[HEAP32[44743] + 2 >> 1]) {
       break label$16;
      }
      $1 = 0;
      if (HEAP16[HEAP32[44743] + 2 >> 1] == 188) {
       break label$16;
      }
      $1 = 0;
      if (HEAP16[HEAP32[44743] + 2 >> 1] == 189) {
       break label$16;
      }
      $1 = HEAP16[HEAP32[44743] + 2 >> 1] != 125;
     }
     if ($1) {
      jsvUnLock(jspeBlockOrStatement());
      continue;
     }
     break;
    }
    HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 32 >> 2] | HEAP32[86758] & 124;
    continue;
   }
   break;
  }
  jsvUnLock(HEAP32[$0 + 40 >> 2]);
  label$18: {
   if (!(!(HEAP8[$0 + 31 | 0] & 1) | (HEAP32[86758] & 63) != 2)) {
    HEAP32[86758] = HEAP32[$0 + 36 >> 2] | 1025;
    break label$18;
   }
   HEAP8[$0 + 30 | 0] = 1;
  }
  HEAP32[86758] = HEAP32[86758] & -1664 | HEAP32[$0 + 32 >> 2] & 1663;
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 189) {
   jslGetNextToken();
   if (!(jslMatch(58) & 1)) {
    break label$1;
   }
   HEAP32[$0 + 12 >> 2] = HEAP32[86758];
   label$22: {
    if (!(HEAP8[$0 + 30 | 0] & 1)) {
     jspSetNoExecute();
     break label$22;
    }
    HEAP32[86758] = HEAP32[86758] | 1024;
   }
   while (1) {
    $1 = 0;
    label$25: {
     if (HEAP32[86758] & 80) {
      break label$25;
     }
     $1 = 0;
     if (!HEAP16[HEAP32[44743] + 2 >> 1]) {
      break label$25;
     }
     $1 = 0;
     if (HEAP16[HEAP32[44743] + 2 >> 1] == 125) {
      break label$25;
     }
     $1 = HEAP16[HEAP32[44743] + 2 >> 1] != 188;
    }
    if ($1) {
     jsvUnLock(jspeBlockOrStatement());
     continue;
    }
    break;
   }
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] | HEAP32[86758] & 124;
   HEAP32[86758] = HEAP32[86758] & -3;
   HEAP32[86758] = HEAP32[86758] & -1664 | HEAP32[$0 + 12 >> 2] & 1663;
  }
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 188) {
   jsExceptionHere(2, 121042, 0);
   break label$1;
  }
  jslMatch(125);
 }
 HEAP32[$0 + 44 >> 2] = 0;
 __stack_pointer = $0 + 48 | 0;
 return HEAP32[$0 + 44 >> 2];
}

function _jswrap_drawImageSimple($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer + -64 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 60 >> 2] = $0;
 HEAP32[$6 + 56 >> 2] = $1;
 HEAP32[$6 + 52 >> 2] = $2;
 HEAP32[$6 + 48 >> 2] = $3;
 HEAP32[$6 + 44 >> 2] = $4;
 HEAP8[$6 + 43 | 0] = $5;
 HEAP32[$6 + 36 >> 2] = 0;
 HEAP32[$6 + 32 >> 2] = 0;
 HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 56 >> 2];
 HEAP32[$6 + 24 >> 2] = HEAP32[$6 + 52 >> 2];
 HEAP32[$6 + 20 >> 2] = (HEAP32[$6 + 56 >> 2] + HEAP32[HEAP32[$6 + 48 >> 2] >> 2] | 0) - 1;
 HEAP32[$6 + 16 >> 2] = (HEAP32[$6 + 52 >> 2] + HEAP32[HEAP32[$6 + 48 >> 2] + 4 >> 2] | 0) - 1;
 label$1: {
  if (!(jsvStringIteratorHasChar_12(HEAP32[$6 + 44 >> 2]) & 1)) {
   break label$1;
  }
  graphicsSetModifiedAndClip(HEAP32[$6 + 60 >> 2], $6 + 28 | 0, $6 + 24 | 0, $6 + 20 | 0, $6 + 16 | 0, 1);
  if (!(HEAP32[$6 + 16 >> 2] >= HEAP32[$6 + 24 >> 2] & HEAP32[$6 + 20 >> 2] >= HEAP32[$6 + 28 >> 2])) {
   if (HEAP8[$6 + 43 | 0] & 1) {
    HEAP32[$6 + 36 >> 2] = 0 - Math_imul(HEAP32[HEAP32[$6 + 48 >> 2] + 4 >> 2], Math_imul(HEAP32[HEAP32[$6 + 48 >> 2] >> 2], HEAP32[HEAP32[$6 + 48 >> 2] + 8 >> 2]));
    while (1) {
     if (HEAP32[$6 + 36 >> 2] < 0) {
      jsvStringIteratorNextUTF8(HEAP32[$6 + 44 >> 2]);
      HEAP32[$6 + 36 >> 2] = HEAP32[$6 + 36 >> 2] + 8;
      continue;
     }
     break;
    }
   }
   break label$1;
  }
  HEAP32[$6 + 36 >> 2] = 0 - Math_imul(HEAP32[HEAP32[$6 + 48 >> 2] >> 2], Math_imul(HEAP32[HEAP32[$6 + 48 >> 2] + 8 >> 2], HEAP32[$6 + 24 >> 2] - HEAP32[$6 + 52 >> 2] | 0));
  HEAP32[$6 + 12 >> 2] = graphicsGetSetPixelUnclippedFn(HEAP32[$6 + 60 >> 2], HEAP32[$6 + 56 >> 2], HEAP32[$6 + 24 >> 2], (HEAP32[$6 + 56 >> 2] + HEAP32[HEAP32[$6 + 48 >> 2] >> 2] | 0) - 1 | 0, HEAP32[$6 + 16 >> 2], 1);
  HEAP32[$6 + 8 >> 2] = HEAP32[$6 + 24 >> 2];
  while (1) {
   if (HEAP32[$6 + 8 >> 2] <= HEAP32[$6 + 16 >> 2]) {
    HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 56 >> 2];
    while (1) {
     if (HEAP32[$6 + 4 >> 2] < (HEAP32[$6 + 56 >> 2] + HEAP32[HEAP32[$6 + 48 >> 2] >> 2] | 0)) {
      while (1) {
       if (HEAP32[$6 + 36 >> 2] < HEAP32[HEAP32[$6 + 48 >> 2] + 8 >> 2]) {
        HEAP32[$6 + 32 >> 2] = HEAP32[$6 + 32 >> 2] << 8 | jsvStringIteratorGetUTF8CharAndNext(HEAP32[$6 + 44 >> 2]) & 255;
        HEAP32[$6 + 36 >> 2] = HEAP32[$6 + 36 >> 2] + 8;
        continue;
       }
       break;
      }
      HEAP32[$6 >> 2] = HEAP32[HEAP32[$6 + 48 >> 2] + 36 >> 2] & HEAP32[$6 + 32 >> 2] >>> HEAP32[$6 + 36 >> 2] - HEAP32[HEAP32[$6 + 48 >> 2] + 8 >> 2];
      HEAP32[$6 + 36 >> 2] = HEAP32[$6 + 36 >> 2] - HEAP32[HEAP32[$6 + 48 >> 2] + 8 >> 2];
      if (HEAP32[HEAP32[$6 + 48 >> 2] + 16 >> 2] != HEAP32[$6 >> 2]) {
       if (HEAP32[HEAP32[$6 + 48 >> 2] + 28 >> 2]) {
        HEAP32[$6 >> 2] = HEAPU16[HEAP32[HEAP32[$6 + 48 >> 2] + 28 >> 2] + ((HEAP32[$6 >> 2] & HEAP32[HEAP32[$6 + 48 >> 2] + 32 >> 2]) << 1) >> 1];
       }
       FUNCTION_TABLE[HEAP32[$6 + 12 >> 2]](HEAP32[$6 + 60 >> 2], HEAP32[$6 + 4 >> 2], HEAP32[$6 + 8 >> 2], HEAP32[$6 >> 2]);
      }
      HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 4 >> 2] + 1;
      continue;
     }
     break;
    }
    HEAP32[$6 + 8 >> 2] = HEAP32[$6 + 8 >> 2] + 1;
    continue;
   }
   break;
  }
  if (!(HEAP8[$6 + 43 | 0] & 1)) {
   break label$1;
  }
  HEAP32[$6 + 36 >> 2] = HEAP32[$6 + 36 >> 2] + (HEAP32[HEAP32[$6 + 48 >> 2] + 8 >> 2] - Math_imul(HEAP32[HEAP32[$6 + 48 >> 2] >> 2], Math_imul(HEAP32[HEAP32[$6 + 48 >> 2] + 8 >> 2], HEAP32[$6 + 52 >> 2] + HEAP32[HEAP32[$6 + 48 >> 2] + 4 >> 2] - (HEAP32[$6 + 16 >> 2] + 1) | 0)) | 0);
  while (1) {
   if (HEAP32[$6 + 36 >> 2] < 0) {
    jsvStringIteratorNextUTF8(HEAP32[$6 + 44 >> 2]);
    HEAP32[$6 + 36 >> 2] = HEAP32[$6 + 36 >> 2] + 8;
    continue;
   }
   break;
  }
 }
 __stack_pointer = $6 - -64 | 0;
}

function jswrap_graphics_transformVertices($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 320 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 312 >> 2] = $0;
 HEAP32[$3 + 308 >> 2] = $1;
 HEAP32[$3 + 304 >> 2] = $2;
 HEAP32[$3 + 300 >> 2] = jsvNewEmptyArray();
 label$1: {
  if (!HEAP32[$3 + 300 >> 2]) {
   HEAP32[$3 + 316 >> 2] = 0;
   break label$1;
  }
  if (!(jsvIsIterable(HEAP32[$3 + 308 >> 2]) & 1)) {
   HEAP32[$3 + 316 >> 2] = HEAP32[$3 + 300 >> 2];
   break label$1;
  }
  label$4: {
   if (jsvIsObject(HEAP32[$3 + 304 >> 2]) & 1) {
    HEAPF64[$3 + 232 >> 3] = 0;
    HEAPF64[$3 + 224 >> 3] = 0;
    HEAPF64[$3 + 216 >> 3] = 1;
    HEAPF64[$3 + 208 >> 3] = 0;
    HEAP32[$3 + 160 >> 2] = 111928;
    HEAP16[$3 + 164 >> 1] = 11;
    HEAP32[$3 + 168 >> 2] = $3 + 232;
    HEAP32[$3 + 172 >> 2] = 111841;
    HEAP16[$3 + 176 >> 1] = 11;
    HEAP32[$3 + 180 >> 2] = $3 + 224;
    HEAP32[$3 + 184 >> 2] = 120250;
    HEAP16[$3 + 188 >> 1] = 11;
    HEAP32[$3 + 192 >> 2] = $3 + 216;
    HEAP32[$3 + 196 >> 2] = 119658;
    HEAP16[$3 + 200 >> 1] = 11;
    HEAP32[$3 + 204 >> 2] = $3 + 208;
    if (!(jsvReadConfigObject(HEAP32[$3 + 304 >> 2], $3 + 160 | 0, 4) & 1)) {
     HEAP32[$3 + 316 >> 2] = HEAP32[$3 + 300 >> 2];
     break label$1;
    }
    HEAPF64[$3 + 152 >> 3] = 1;
    HEAPF64[$3 + 144 >> 3] = 0;
    if (HEAPF64[$3 + 208 >> 3] != 0) {
     HEAPF64[$3 + 152 >> 3] = jswrap_math_cos(HEAPF64[$3 + 208 >> 3]);
     HEAPF64[$3 + 144 >> 3] = jswrap_math_sin(HEAPF64[$3 + 208 >> 3]);
    }
    HEAPF64[$3 + 240 >> 3] = HEAPF64[$3 + 152 >> 3] * HEAPF64[$3 + 216 >> 3];
    HEAPF64[$3 + 256 >> 3] = -HEAPF64[$3 + 144 >> 3] * HEAPF64[$3 + 216 >> 3];
    HEAPF64[$3 + 272 >> 3] = HEAPF64[$3 + 232 >> 3];
    HEAPF64[$3 + 248 >> 3] = HEAPF64[$3 + 144 >> 3] * HEAPF64[$3 + 216 >> 3];
    HEAPF64[$3 + 264 >> 3] = HEAPF64[$3 + 152 >> 3] * HEAPF64[$3 + 216 >> 3];
    HEAPF64[$3 + 280 >> 3] = HEAPF64[$3 + 224 >> 3];
    break label$4;
   }
   label$8: {
    label$9: {
     if (!(jsvIsIterable(HEAP32[$3 + 304 >> 2]) & 1)) {
      break label$9;
     }
     if ((jsvGetLength(HEAP32[$3 + 304 >> 2]) | 0) != 6) {
      break label$9;
     }
     jsvIteratorNew($3 + 80 | 0, HEAP32[$3 + 304 >> 2], 1);
     HEAP32[$3 + 76 >> 2] = 0;
     while (1) {
      if (HEAP32[$3 + 76 >> 2] < 6) {
       $4 = jsvIteratorGetFloatValue($3 + 80 | 0);
       HEAPF64[($3 + 240 | 0) + (HEAP32[$3 + 76 >> 2] << 3) >> 3] = $4;
       jsvIteratorNext($3 + 80 | 0);
       HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
       continue;
      }
      break;
     }
     jsvIteratorFree($3 + 80 | 0);
     break label$8;
    }
    jsExceptionHere(3, 112895, 0);
    HEAP32[$3 + 316 >> 2] = 0;
    break label$1;
   }
  }
  jsvIteratorNew($3 + 16 | 0, HEAP32[$3 + 308 >> 2], 1);
  while (1) {
   label$13: {
    if (!(jsvIteratorHasElement($3 + 16 | 0) & 1)) {
     break label$13;
    }
    HEAPF64[$3 + 8 >> 3] = jsvIteratorGetFloatValue($3 + 16 | 0);
    jsvIteratorNext($3 + 16 | 0);
    if (!(jsvIteratorHasElement($3 + 16 | 0) & 1)) {
     break label$13;
    }
    HEAPF64[$3 >> 3] = jsvIteratorGetFloatValue($3 + 16 | 0);
    jsvIteratorNext($3 + 16 | 0);
    jsvArrayPushAndUnLock(HEAP32[$3 + 300 >> 2], jsvNewFromFloat(HEAPF64[$3 + 240 >> 3] * HEAPF64[$3 + 8 >> 3] + HEAPF64[$3 + 256 >> 3] * HEAPF64[$3 >> 3] + HEAPF64[$3 + 272 >> 3]));
    jsvArrayPushAndUnLock(HEAP32[$3 + 300 >> 2], jsvNewFromFloat(HEAPF64[$3 + 248 >> 3] * HEAPF64[$3 + 8 >> 3] + HEAPF64[$3 + 264 >> 3] * HEAPF64[$3 >> 3] + HEAPF64[$3 + 280 >> 3]));
    continue;
   }
   break;
  }
  jsvIteratorFree($3 + 16 | 0);
  HEAP32[$3 + 316 >> 2] = HEAP32[$3 + 300 >> 2];
 }
 __stack_pointer = $3 + 320 | 0;
 return HEAP32[$3 + 316 >> 2];
}

function jspeFactorMember($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 80 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP32[$2 + 68 >> 2] = $1;
 HEAP32[$2 + 64 >> 2] = 0;
 label$1: {
  while (1) {
   $0 = 1;
   $0 = HEAP16[HEAP32[44743] + 2 >> 1] != 46 ? HEAP16[HEAP32[44743] + 2 >> 1] == 91 : $0;
   if ($0) {
    if (HEAP16[HEAP32[44743] + 2 >> 1] == 46) {
     jslGetNextToken();
     label$6: {
      if (jslIsIDOrReservedWord() & 1) {
       if ((HEAP32[86758] & 63) == 1) {
        HEAP32[$2 + 60 >> 2] = jslGetTokenValueAsString();
        HEAP32[$2 + 56 >> 2] = jsvSkipNameWithParent(HEAP32[$2 + 72 >> 2], 1, HEAP32[$2 + 64 >> 2]);
        HEAP32[$2 + 52 >> 2] = 0;
        if (HEAP32[$2 + 56 >> 2]) {
         HEAP32[$2 + 52 >> 2] = jspGetNamedField(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 60 >> 2], 1);
        }
        if (!HEAP32[$2 + 52 >> 2]) {
         label$11: {
          if (!(jsvIsNullish(HEAP32[$2 + 56 >> 2]) & 1)) {
           HEAP32[$2 + 48 >> 2] = jsvNewNameFromString(jslGetTokenValueAsString());
           HEAP32[$2 + 52 >> 2] = jsvCreateNewChild(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 48 >> 2], 0);
           jsvUnLock(HEAP32[$2 + 48 >> 2]);
           break label$11;
          }
          $0 = HEAP32[$2 + 60 >> 2];
          HEAP32[$2 + 4 >> 2] = jsvIsUndefined(HEAP32[$2 + 56 >> 2]) & 1 ? 121670 : 117780;
          HEAP32[$2 >> 2] = $0;
          jsExceptionHere(1, 115845, $2);
         }
        }
        jsvUnLock(HEAP32[$2 + 64 >> 2]);
        HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 56 >> 2];
        jsvUnLock(HEAP32[$2 + 72 >> 2]);
        HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 52 >> 2];
       }
       jslGetNextToken();
       break label$6;
      }
      if (!(jslMatch(128) & 1)) {
       HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 72 >> 2];
       break label$1;
      }
     }
     continue;
    }
    if (HEAP16[HEAP32[44743] + 2 >> 1] == 91) {
     jslGetNextToken();
     if (!(jspCheckStackPosition() & 1)) {
      HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 64 >> 2];
      break label$1;
     }
     HEAP32[$2 + 44 >> 2] = jsvSkipNameAndUnLock(jspeAssignmentExpression());
     if (!(jslMatch(93) & 1)) {
      jsvUnLock2(HEAP32[$2 + 64 >> 2], HEAP32[$2 + 44 >> 2]);
      HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 72 >> 2];
      break label$1;
     }
     if ((HEAP32[86758] & 63) == 1) {
      HEAP32[$2 + 44 >> 2] = jsvAsArrayIndexAndUnLock(HEAP32[$2 + 44 >> 2]);
      HEAP32[$2 + 40 >> 2] = jsvSkipNameWithParent(HEAP32[$2 + 72 >> 2], 1, HEAP32[$2 + 64 >> 2]);
      HEAP32[$2 + 36 >> 2] = 0;
      if (HEAP32[$2 + 40 >> 2]) {
       HEAP32[$2 + 36 >> 2] = jspGetVarNamedField(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 44 >> 2], 1);
      }
      if (!HEAP32[$2 + 36 >> 2]) {
       label$20: {
        if (jsvHasChildren(HEAP32[$2 + 40 >> 2]) & 1) {
         HEAP32[$2 + 36 >> 2] = jsvCreateNewChild(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 44 >> 2], 0);
         break label$20;
        }
        $0 = HEAP32[$2 + 44 >> 2];
        HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 40 >> 2];
        HEAP32[$2 + 16 >> 2] = $0;
        jsExceptionHere(1, 114449, $2 + 16 | 0);
       }
      }
      jsvUnLock(HEAP32[$2 + 64 >> 2]);
      HEAP32[$2 + 64 >> 2] = jsvLockAgainSafe(HEAP32[$2 + 40 >> 2]);
      jsvUnLock(HEAP32[$2 + 72 >> 2]);
      HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 36 >> 2];
      jsvUnLock(HEAP32[$2 + 40 >> 2]);
     }
     jsvUnLock(HEAP32[$2 + 44 >> 2]);
    }
    continue;
   }
   break;
  }
  label$22: {
   if (HEAP32[$2 + 68 >> 2]) {
    HEAP32[HEAP32[$2 + 68 >> 2] >> 2] = HEAP32[$2 + 64 >> 2];
    break label$22;
   }
   jsvUnLock(HEAP32[$2 + 64 >> 2]);
  }
  HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 72 >> 2];
 }
 __stack_pointer = $2 + 80 | 0;
 return HEAP32[$2 + 76 >> 2];
}

function tflite__ops__micro__depthwise_conv___28anonymous_20namespace_29__CalculateOpData_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteDepthwiseConvParams__2c_20int_2c_20int_2c_20int_2c_20int_2c_20TfLiteType_2c_20tflite__ops__micro__depthwise_conv___28anonymous_20namespace_29__OpData__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0;
 $9 = __stack_pointer - 112 | 0;
 __stack_pointer = $9;
 HEAP32[$9 + 104 >> 2] = $0;
 HEAP32[$9 + 100 >> 2] = $1;
 HEAP32[$9 + 96 >> 2] = $2;
 HEAP32[$9 + 92 >> 2] = $3;
 HEAP32[$9 + 88 >> 2] = $4;
 HEAP32[$9 + 84 >> 2] = $5;
 HEAP32[$9 + 80 >> 2] = $6;
 HEAP32[$9 + 76 >> 2] = $7;
 HEAP32[$9 + 72 >> 2] = $8;
 HEAP8[$9 + 71 | 0] = HEAP32[HEAP32[HEAP32[$9 + 100 >> 2] >> 2] >> 2] == 3;
 label$1: {
  if (!(HEAP8[$9 + 71 | 0] & 1 | HEAP32[HEAP32[HEAP32[$9 + 100 >> 2] >> 2] >> 2] == 2)) {
   $0 = HEAP32[HEAP32[$9 + 104 >> 2] + 20 >> 2];
   $1 = HEAP32[$9 + 104 >> 2];
   HEAP32[$9 + 16 >> 2] = 126495;
   FUNCTION_TABLE[$0 | 0]($1, 127303, $9 + 16 | 0);
   HEAP32[$9 + 108 >> 2] = 1;
   break label$1;
  }
  if (HEAP32[HEAP32[HEAP32[$9 + 100 >> 2] + 4 >> 2] >> 2] != 1) {
   $0 = HEAP32[HEAP32[$9 + 104 >> 2] + 20 >> 2];
   $1 = HEAP32[$9 + 104 >> 2];
   $2 = HEAP32[HEAP32[HEAP32[$9 + 100 >> 2] + 4 >> 2] >> 2];
   HEAP32[$9 + 12 >> 2] = 1;
   HEAP32[$9 + 8 >> 2] = $2;
   HEAP32[$9 + 4 >> 2] = 126714;
   HEAP32[$9 >> 2] = 119237;
   FUNCTION_TABLE[$0 | 0]($1, 143069, $9);
   HEAP32[$9 + 108 >> 2] = 1;
   break label$1;
  }
  tflite__ComputePaddingHeightWidth_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20TfLitePadding_2c_20int__2c_20int__29($9 + 40 | 0, HEAP32[HEAP32[$9 + 96 >> 2] + 8 >> 2], HEAP32[HEAP32[$9 + 96 >> 2] + 4 >> 2], 1, 1, HEAP32[$9 + 88 >> 2], HEAP32[$9 + 92 >> 2], HEAP32[$9 + 80 >> 2], HEAP32[$9 + 84 >> 2], HEAP32[HEAP32[$9 + 96 >> 2] >> 2], $9 - -64 | 0, $9 + 60 | 0);
  $0 = HEAP32[$9 + 44 >> 2];
  $1 = HEAP32[$9 + 40 >> 2];
  $3 = $1;
  $2 = HEAP32[$9 + 72 >> 2];
  $1 = $2;
  HEAP32[$1 >> 2] = $3;
  HEAP32[$1 + 4 >> 2] = $0;
  $1 = HEAP32[$9 + 52 >> 2];
  $0 = HEAP32[$9 + 48 >> 2];
  $3 = $0;
  $0 = $2;
  HEAP32[$0 + 8 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = $1;
  if (HEAP32[$9 + 76 >> 2] != 1) {
   HEAP32[$9 + 36 >> 2] = tflite__GetInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$9 + 104 >> 2], HEAP32[$9 + 100 >> 2], 0);
   HEAP32[$9 + 32 >> 2] = tflite__GetInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$9 + 104 >> 2], HEAP32[$9 + 100 >> 2], 1);
   HEAP32[$9 + 28 >> 2] = tflite__GetOptionalInputTensor_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$9 + 104 >> 2], HEAP32[$9 + 100 >> 2], 2);
   HEAP32[$9 + 24 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$9 + 104 >> 2], HEAP32[$9 + 100 >> 2], 0);
   HEAP32[$9 + 20 >> 2] = HEAP32[HEAP32[HEAP32[$9 + 32 >> 2] + 20 >> 2] + 16 >> 2];
   HEAP32[$9 + 108 >> 2] = tflite__PopulateConvolutionQuantizationParams_28TfLiteContext__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20TfLiteFusedActivation_20const__2c_20int__2c_20int__2c_20int__2c_20int__2c_20int__2c_20int__2c_20int_29(HEAP32[$9 + 104 >> 2], HEAP32[$9 + 36 >> 2], HEAP32[$9 + 32 >> 2], HEAP32[$9 + 28 >> 2], HEAP32[$9 + 24 >> 2], HEAP32[$9 + 96 >> 2] + 16 | 0, HEAP32[$9 + 72 >> 2] + 28 | 0, HEAP32[$9 + 72 >> 2] + 32 | 0, HEAP32[$9 + 72 >> 2] + 44 | 0, HEAP32[$9 + 72 >> 2] + 48 | 0, HEAP32[HEAP32[$9 + 72 >> 2] + 36 >> 2], HEAP32[HEAP32[$9 + 72 >> 2] + 40 >> 2], HEAP32[$9 + 20 >> 2]);
   break label$1;
  }
  HEAP32[$9 + 108 >> 2] = 0;
 }
 __stack_pointer = $9 + 112 | 0;
 return HEAP32[$9 + 108 >> 2];
}

function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__one_over_one_plus_x_for_x_in_0_1_int__28gemmlowp__FixedPoint_int_2c_200__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 208 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 192 >> 2] = $0;
 HEAP32[$1 + 176 >> 2] = HEAP32[$1 + 192 >> 2];
 HEAP32[$1 + 168 >> 2] = gemmlowp__FixedPoint_int_2c_200___One_28_29();
 HEAP32[$1 + 184 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__RoundingHalfSum_int_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$1 + 176 >> 2], HEAP32[$1 + 168 >> 2]);
 HEAP32[$1 + 160 >> 2] = gemmlowp__FixedPoint_int_2c_202___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_202___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_202___28int_29(1515870810));
 HEAP32[$1 + 152 >> 2] = gemmlowp__FixedPoint_int_2c_202___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_202___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_202___28int_29(-1010580540));
 HEAP32[$1 + 136 >> 2] = HEAP32[$1 + 160 >> 2];
 HEAP32[$1 + 120 >> 2] = HEAP32[$1 + 184 >> 2];
 HEAP32[$1 + 112 >> 2] = HEAP32[$1 + 152 >> 2];
 HEAP32[$1 + 128 >> 2] = gemmlowp__FixedPoint_int_2c_200_20__202__20gemmlowp__operator__int_2c_200_2c_202__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_202__29(HEAP32[$1 + 120 >> 2], HEAP32[$1 + 112 >> 2]);
 HEAP32[$1 + 144 >> 2] = gemmlowp__FixedPoint_int_2c_202__20gemmlowp__operator__int_2c_202__28gemmlowp__FixedPoint_int_2c_202__2c_20gemmlowp__FixedPoint_int_2c_202__29(HEAP32[$1 + 136 >> 2], HEAP32[$1 + 128 >> 2]);
 HEAP32[$1 + 108 >> 2] = 0;
 while (1) {
  if (HEAP32[$1 + 108 >> 2] < 3) {
   HEAP32[$1 + 96 >> 2] = HEAP32[$1 + 184 >> 2];
   HEAP32[$1 + 88 >> 2] = HEAP32[$1 + 144 >> 2];
   HEAP32[$1 + 104 >> 2] = gemmlowp__FixedPoint_int_2c_200_20__202__20gemmlowp__operator__int_2c_200_2c_202__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_202__29(HEAP32[$1 + 96 >> 2], HEAP32[$1 + 88 >> 2]);
   HEAP32[$1 + 72 >> 2] = gemmlowp__FixedPoint_int_2c_202___One_28_29();
   HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 104 >> 2];
   HEAP32[$1 + 80 >> 2] = gemmlowp__FixedPoint_int_2c_202__20gemmlowp__operator__int_2c_202__28gemmlowp__FixedPoint_int_2c_202__2c_20gemmlowp__FixedPoint_int_2c_202__29_1(HEAP32[$1 + 72 >> 2], HEAP32[$1 + 64 >> 2]);
   HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 144 >> 2];
   HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 144 >> 2];
   HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 80 >> 2];
   HEAP32[$1 + 32 >> 2] = gemmlowp__FixedPoint_int_2c_202_20__202__20gemmlowp__operator__int_2c_202_2c_202__28gemmlowp__FixedPoint_int_2c_202__2c_20gemmlowp__FixedPoint_int_2c_202__29(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 16 >> 2]);
   HEAP32[$1 + 40 >> 2] = gemmlowp__FixedPoint_int_2c_202__20gemmlowp__Rescale_2_2c_20int_2c_204__28gemmlowp__FixedPoint_int_2c_204__29(HEAP32[$1 + 32 >> 2]);
   HEAP32[$1 + 56 >> 2] = gemmlowp__FixedPoint_int_2c_202__20gemmlowp__operator__int_2c_202__28gemmlowp__FixedPoint_int_2c_202__2c_20gemmlowp__FixedPoint_int_2c_202__29(HEAP32[$1 + 48 >> 2], HEAP32[$1 + 40 >> 2]);
   HEAP32[$1 + 144 >> 2] = HEAP32[$1 + 56 >> 2];
   HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 108 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$1 >> 2] = HEAP32[$1 + 144 >> 2];
 HEAP32[$1 + 8 >> 2] = gemmlowp__FixedPoint_int_2c_20_1_20__202__20gemmlowp__ExactMulByPot__1_2c_20int_2c_202__28gemmlowp__FixedPoint_int_2c_202__29(HEAP32[$1 >> 2]);
 HEAP32[$1 + 200 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__Rescale_0_2c_20int_2c_201__28gemmlowp__FixedPoint_int_2c_201__29(HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 208 | 0;
 return HEAP32[$1 + 200 >> 2];
}

function mbedtls_sha256_process($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 320 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 316 >> 2] = $0;
 HEAP32[$2 + 312 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = 0;
 while (1) {
  if (HEAPU32[$2 + 12 >> 2] < 8) {
   HEAP32[($2 + 16 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2] = HEAP32[(HEAP32[$2 + 316 >> 2] + 8 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2];
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$2 + 12 >> 2] = 0;
 while (1) {
  if (HEAPU32[$2 + 12 >> 2] < 64) {
   label$5: {
    if (HEAPU32[$2 + 12 >> 2] < 16) {
     HEAP32[($2 + 48 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2] = HEAPU8[HEAP32[$2 + 312 >> 2] + ((HEAP32[$2 + 12 >> 2] << 2) + 3 | 0) | 0] | (HEAPU8[HEAP32[$2 + 312 >> 2] + (HEAP32[$2 + 12 >> 2] << 2) | 0] << 24 | HEAPU8[HEAP32[$2 + 312 >> 2] + ((HEAP32[$2 + 12 >> 2] << 2) + 1 | 0) | 0] << 16 | HEAPU8[HEAP32[$2 + 312 >> 2] + ((HEAP32[$2 + 12 >> 2] << 2) + 2 | 0) | 0] << 8);
     break label$5;
    }
    HEAP32[($2 + 48 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2] = HEAP32[((HEAP32[$2 + 12 >> 2] << 2) + $2 | 0) - 16 >> 2] + ((HEAP32[((HEAP32[$2 + 12 >> 2] << 2) + $2 | 0) + 20 >> 2] + ((HEAP32[((HEAP32[$2 + 12 >> 2] << 2) + $2 | 0) + 40 >> 2] << 15 | HEAP32[((HEAP32[$2 + 12 >> 2] << 2) + $2 | 0) + 40 >> 2] >>> 17) ^ (HEAP32[((HEAP32[$2 + 12 >> 2] << 2) + $2 | 0) + 40 >> 2] << 13 | HEAP32[((HEAP32[$2 + 12 >> 2] << 2) + $2 | 0) + 40 >> 2] >>> 19) ^ HEAP32[((HEAP32[$2 + 12 >> 2] << 2) + $2 | 0) + 40 >> 2] >>> 10) | 0) + ((HEAP32[((HEAP32[$2 + 12 >> 2] << 2) + $2 | 0) - 12 >> 2] << 25 | HEAP32[((HEAP32[$2 + 12 >> 2] << 2) + $2 | 0) - 12 >> 2] >>> 7) ^ (HEAP32[((HEAP32[$2 + 12 >> 2] << 2) + $2 | 0) - 12 >> 2] << 14 | HEAP32[((HEAP32[$2 + 12 >> 2] << 2) + $2 | 0) - 12 >> 2] >>> 18) ^ HEAP32[((HEAP32[$2 + 12 >> 2] << 2) + $2 | 0) - 12 >> 2] >>> 3) | 0);
   }
   HEAP32[$2 + 308 >> 2] = HEAP32[($2 + 48 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2] + (HEAP32[(HEAP32[$2 + 12 >> 2] << 2) + 162624 >> 2] + ((HEAP32[$2 + 44 >> 2] + ((HEAP32[$2 + 32 >> 2] << 7 | HEAP32[$2 + 32 >> 2] >>> 25) ^ ((HEAP32[$2 + 32 >> 2] << 26 | HEAP32[$2 + 32 >> 2] >>> 6) ^ (HEAP32[$2 + 32 >> 2] << 21 | HEAP32[$2 + 32 >> 2] >>> 11))) | 0) + (HEAP32[$2 + 40 >> 2] ^ HEAP32[$2 + 32 >> 2] & (HEAP32[$2 + 36 >> 2] ^ HEAP32[$2 + 40 >> 2])) | 0) | 0);
   HEAP32[$2 + 304 >> 2] = (HEAP32[$2 + 16 >> 2] & HEAP32[$2 + 20 >> 2] | HEAP32[$2 + 24 >> 2] & (HEAP32[$2 + 16 >> 2] | HEAP32[$2 + 20 >> 2])) + ((HEAP32[$2 + 16 >> 2] << 10 | HEAP32[$2 + 16 >> 2] >>> 22) ^ ((HEAP32[$2 + 16 >> 2] << 30 | HEAP32[$2 + 16 >> 2] >>> 2) ^ (HEAP32[$2 + 16 >> 2] << 19 | HEAP32[$2 + 16 >> 2] >>> 13)));
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 308 >> 2] + HEAP32[$2 + 28 >> 2];
   HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 308 >> 2] + HEAP32[$2 + 304 >> 2];
   HEAP32[$2 + 308 >> 2] = HEAP32[$2 + 44 >> 2];
   HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 40 >> 2];
   HEAP32[$2 + 40 >> 2] = HEAP32[$2 + 36 >> 2];
   HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 32 >> 2];
   HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 28 >> 2];
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 24 >> 2];
   HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 20 >> 2];
   HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 16 >> 2];
   HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 308 >> 2];
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$2 + 12 >> 2] = 0;
 while (1) {
  if (HEAPU32[$2 + 12 >> 2] < 8) {
   $0 = (HEAP32[$2 + 316 >> 2] + 8 | 0) + (HEAP32[$2 + 12 >> 2] << 2) | 0;
   HEAP32[$0 >> 2] = HEAP32[($2 + 16 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2] + HEAP32[$0 >> 2];
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $2 + 320 | 0;
}

function jswrap_espruino_HSBtoRGB_int($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 80 | 0;
 HEAPF64[$3 + 64 >> 3] = $0;
 HEAPF64[$3 + 56 >> 3] = $1;
 HEAPF64[$3 + 48 >> 3] = $2;
 label$1: {
  if (HEAPF64[$3 + 48 >> 3] == 0) {
   HEAP32[$3 + 76 >> 2] = 0;
   break label$1;
  }
  if (HEAPF64[$3 + 56 >> 3] == 0) {
   $0 = HEAPF64[$3 + 48 >> 3] * 255;
   label$4: {
    if (Math_abs($0) < 2147483648) {
     $4 = ~~$0;
     break label$4;
    }
    $4 = -2147483648;
   }
   HEAP32[$3 + 44 >> 2] = $4;
   HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 44 >> 2] | (HEAP32[$3 + 44 >> 2] << 16 | HEAP32[$3 + 44 >> 2] << 8);
   break label$1;
  }
  HEAPF64[$3 + 64 >> 3] = (HEAPF64[$3 + 64 >> 3] - Math_floor(HEAPF64[$3 + 64 >> 3])) * 6;
  $0 = HEAPF64[$3 + 64 >> 3];
  label$6: {
   if (Math_abs($0) < 2147483648) {
    $4 = ~~$0;
    break label$6;
   }
   $4 = -2147483648;
  }
  HEAP32[$3 + 32 >> 2] = $4;
  HEAPF64[$3 + 8 >> 3] = HEAPF64[$3 + 64 >> 3] - +HEAP32[$3 + 32 >> 2];
  HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 32 >> 2] % 6;
  HEAPF64[$3 + 48 >> 3] = HEAPF64[$3 + 48 >> 3] * 255;
  $0 = HEAPF64[$3 + 48 >> 3];
  label$8: {
   if (Math_abs($0) < 2147483648) {
    $4 = ~~$0;
    break label$8;
   }
   $4 = -2147483648;
  }
  HEAP32[$3 + 28 >> 2] = $4;
  $0 = (1 - HEAPF64[$3 + 56 >> 3]) * HEAPF64[$3 + 48 >> 3];
  label$10: {
   if (Math_abs($0) < 2147483648) {
    $4 = ~~$0;
    break label$10;
   }
   $4 = -2147483648;
  }
  HEAP32[$3 + 24 >> 2] = $4;
  $0 = (-HEAPF64[$3 + 56 >> 3] * HEAPF64[$3 + 8 >> 3] + 1) * HEAPF64[$3 + 48 >> 3];
  label$12: {
   if (Math_abs($0) < 2147483648) {
    $4 = ~~$0;
    break label$12;
   }
   $4 = -2147483648;
  }
  HEAP32[$3 + 20 >> 2] = $4;
  $0 = (-HEAPF64[$3 + 56 >> 3] * (1 - HEAPF64[$3 + 8 >> 3]) + 1) * HEAPF64[$3 + 48 >> 3];
  label$14: {
   if (Math_abs($0) < 2147483648) {
    $4 = ~~$0;
    break label$14;
   }
   $4 = -2147483648;
  }
  HEAP32[$3 + 16 >> 2] = $4;
  label$16: {
   if (!HEAP32[$3 + 32 >> 2]) {
    HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 28 >> 2];
    HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 16 >> 2];
    HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 24 >> 2];
    break label$16;
   }
   label$18: {
    if (HEAP32[$3 + 32 >> 2] == 1) {
     HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 20 >> 2];
     HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 28 >> 2];
     HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 24 >> 2];
     break label$18;
    }
    label$20: {
     if (HEAP32[$3 + 32 >> 2] == 2) {
      HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 24 >> 2];
      HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 28 >> 2];
      HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 16 >> 2];
      break label$20;
     }
     label$22: {
      if (HEAP32[$3 + 32 >> 2] == 3) {
       HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 24 >> 2];
       HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 20 >> 2];
       HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 28 >> 2];
       break label$22;
      }
      label$24: {
       if (HEAP32[$3 + 32 >> 2] == 4) {
        HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 16 >> 2];
        HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 24 >> 2];
        HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 28 >> 2];
        break label$24;
       }
       label$26: {
        if (HEAP32[$3 + 32 >> 2] == 5) {
         HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 28 >> 2];
         HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 24 >> 2];
         HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 20 >> 2];
         break label$26;
        }
        HEAP32[$3 + 44 >> 2] = 0;
        HEAP32[$3 + 40 >> 2] = 0;
        HEAP32[$3 + 36 >> 2] = 0;
       }
      }
     }
    }
   }
  }
  HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 44 >> 2] | (HEAP32[$3 + 36 >> 2] << 16 | HEAP32[$3 + 40 >> 2] << 8);
 }
 return HEAP32[$3 + 76 >> 2];
}

function jswrap_date_parse($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 208 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 196 >> 2] = $0;
 label$1: {
  if (!(jsvIsString(HEAP32[$1 + 196 >> 2]) & 1)) {
   HEAPF64[$1 + 200 >> 3] = 0;
   break label$1;
  }
  HEAP32[$1 + 168 >> 2] = 0;
  HEAP32[$1 + 184 >> 2] = 0;
  HEAP32[$1 + 180 >> 2] = 0;
  HEAP32[$1 + 176 >> 2] = 0;
  HEAP32[$1 + 172 >> 2] = 0;
  HEAP32[$1 + 188 >> 2] = 0;
  HEAP8[$1 + 192 | 0] = 0;
  getCalendarDate($1 + 144 | 0, 0);
  HEAP8[$1 + 143 | 0] = 0;
  HEAP32[$1 + 12 >> 2] = jslSetLex($1 + 16 | 0);
  jslInit(HEAP32[$1 + 196 >> 2]);
  label$3: {
   if (HEAP16[$1 + 18 >> 1] == 128) {
    HEAP32[$1 + 152 >> 2] = getMonth(jslGetTokenValueAsString());
    HEAP32[$1 + 160 >> 2] = getDay(jslGetTokenValueAsString());
    label$5: {
     if (HEAP32[$1 + 152 >> 2] >= 0) {
      jslGetNextToken();
      if (HEAP16[$1 + 18 >> 1] == 129) {
       HEAP32[$1 + 148 >> 2] = _parse_int();
       jslGetNextToken();
       if (HEAP16[$1 + 18 >> 1] == 44) {
        jslGetNextToken();
        if (HEAP16[$1 + 18 >> 1] == 129) {
         HEAP32[$1 + 156 >> 2] = _parse_int();
         HEAP32[$1 + 168 >> 2] = fromCalendarDate($1 + 144 | 0);
         jslGetNextToken();
         if (HEAP16[$1 + 18 >> 1] == 129) {
          _parse_time($1 + 168 | 0, 0);
          HEAP8[$1 + 143 | 0] = 1;
         }
        }
       }
      }
      break label$5;
     }
     label$11: {
      if (HEAP32[$1 + 160 >> 2] >= 0) {
       HEAP32[$1 + 152 >> 2] = 0;
       jslGetNextToken();
       if (HEAP16[$1 + 18 >> 1] == 44) {
        jslGetNextToken();
        if (HEAP16[$1 + 18 >> 1] == 129) {
         HEAP32[$1 + 148 >> 2] = _parse_int();
         jslGetNextToken();
         label$15: {
          if (HEAP16[$1 + 18 >> 1] != 128) {
           break label$15;
          }
          if ((getMonth(jslGetTokenValueAsString()) | 0) < 0) {
           break label$15;
          }
          HEAP32[$1 + 152 >> 2] = getMonth(jslGetTokenValueAsString());
          jslGetNextToken();
          if (HEAP16[$1 + 18 >> 1] == 129) {
           HEAP32[$1 + 156 >> 2] = _parse_int();
           HEAP32[$1 + 168 >> 2] = fromCalendarDate($1 + 144 | 0);
           jslGetNextToken();
           if (HEAP16[$1 + 18 >> 1] == 129) {
            _parse_time($1 + 168 | 0, 0);
            HEAP8[$1 + 143 | 0] = 1;
           }
          }
         }
        }
       }
       break label$11;
      }
      HEAP32[$1 + 160 >> 2] = 0;
      HEAP32[$1 + 152 >> 2] = 0;
     }
    }
    break label$3;
   }
   if (HEAP16[$1 + 18 >> 1] == 129) {
    HEAP32[$1 + 156 >> 2] = _parse_int();
    jslGetNextToken();
    if (HEAP16[$1 + 18 >> 1] == 45) {
     jslGetNextToken();
     if (HEAP16[$1 + 18 >> 1] == 129) {
      HEAP32[$1 + 152 >> 2] = _parse_int() - 1;
      jslGetNextToken();
      if (HEAP16[$1 + 18 >> 1] == 45) {
       jslGetNextToken();
       if (HEAP16[$1 + 18 >> 1] == 129) {
        HEAP32[$1 + 148 >> 2] = _parse_int();
        HEAP32[$1 + 168 >> 2] = fromCalendarDate($1 + 144 | 0);
        jslGetNextToken();
        label$23: {
         if (HEAP16[$1 + 18 >> 1] != 128) {
          break label$23;
         }
         if (HEAP8[jslGetTokenValueAsString() | 0] != 84) {
          break label$23;
         }
         _parse_time($1 + 168 | 0, 1);
         HEAP8[$1 + 143 | 0] = 1;
        }
       }
      }
     }
    }
   }
  }
  if (!(HEAP8[$1 + 143 | 0] & 1)) {
   setCorrectTimeZone($1 + 168 | 0);
  }
  jslKill();
  jslSetLex(HEAP32[$1 + 12 >> 2]);
  HEAPF64[$1 + 200 >> 3] = fromTimeInDay($1 + 168 | 0);
 }
 __stack_pointer = $1 + 208 | 0;
 return +HEAPF64[$1 + 200 >> 3];
}

function jsiTabComplete() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 320 | 0;
 __stack_pointer = $0;
 label$1: {
  if (!(jsvIsString(HEAP32[86768]) & 1)) {
   break label$1;
  }
  HEAP32[$0 + 316 >> 2] = 0;
  HEAP32[$0 + 300 >> 2] = 0;
  HEAP32[$0 + 292 >> 2] = 0;
  HEAP32[$0 + 164 >> 2] = jslSetLex($0 + 168 | 0);
  jslInit(HEAP32[86768]);
  while (1) {
   $1 = 0;
   $1 = HEAP16[$0 + 170 >> 1] ? HEAPU32[86770] >= HEAP32[$0 + 172 >> 2] + 1 >>> 0 : $1;
   if ($1) {
    label$5: {
     if (HEAP16[$0 + 170 >> 1] == 46) {
      jsvUnLock(HEAP32[$0 + 316 >> 2]);
      HEAP32[$0 + 316 >> 2] = HEAP32[$0 + 300 >> 2];
      HEAP32[$0 + 300 >> 2] = 0;
      break label$5;
     }
     label$7: {
      if (HEAP16[$0 + 170 >> 1] == 128) {
       jsvUnLock(HEAP32[$0 + 300 >> 2]);
       HEAP32[$0 + 300 >> 2] = jslGetTokenValueAsVar();
       HEAP32[$0 + 292 >> 2] = HEAP32[$0 + 172 >> 2] + 1;
       break label$7;
      }
      jsvUnLock(HEAP32[$0 + 316 >> 2]);
      HEAP32[$0 + 316 >> 2] = 0;
      jsvUnLock(HEAP32[$0 + 300 >> 2]);
      HEAP32[$0 + 300 >> 2] = 0;
     }
    }
    jslGetNextToken();
    continue;
   }
   break;
  }
  jslKill();
  jslSetLex(HEAP32[$0 + 164 >> 2]);
  if (!(HEAP32[$0 + 316 >> 2] | HEAP32[$0 + 300 >> 2])) {
   break label$1;
  }
  label$10: {
   if (HEAP32[$0 + 300 >> 2]) {
    HEAP32[$0 + 296 >> 2] = jsvGetStringLength(HEAP32[$0 + 300 >> 2]);
    HEAP32[$0 + 160 >> 2] = (HEAP32[86770] + 1 | 0) - HEAP32[$0 + 292 >> 2];
    if (HEAPU32[$0 + 160 >> 2] > HEAPU32[$0 + 296 >> 2]) {
     jsvUnLock2(HEAP32[$0 + 316 >> 2], HEAP32[$0 + 300 >> 2]);
     break label$1;
    }
    if (HEAPU32[$0 + 160 >> 2] < HEAPU32[$0 + 296 >> 2]) {
     HEAP32[$0 + 156 >> 2] = jsvNewFromStringVar(HEAP32[$0 + 300 >> 2], 0, HEAP32[$0 + 160 >> 2]);
     jsvUnLock(HEAP32[$0 + 300 >> 2]);
     HEAP32[$0 + 300 >> 2] = HEAP32[$0 + 156 >> 2];
     HEAP32[$0 + 296 >> 2] = HEAP32[$0 + 160 >> 2];
    }
    break label$10;
   }
   HEAP32[$0 + 300 >> 2] = jsvNewFromEmptyString_5();
   HEAP32[$0 + 296 >> 2] = 0;
  }
  if (HEAP32[$0 + 316 >> 2]) {
   jsvGetString(HEAP32[$0 + 316 >> 2], $0 + 80 | 0, 64);
   HEAP32[$0 + 76 >> 2] = jspGetNamedVariable($0 + 80 | 0);
   label$15: {
    if (jsvIsVariableDefined(HEAP32[$0 + 76 >> 2]) & 1) {
     HEAP32[$0 + 76 >> 2] = jsvSkipNameAndUnLock(HEAP32[$0 + 76 >> 2]);
     break label$15;
    }
    jsvUnLock(HEAP32[$0 + 76 >> 2]);
    HEAP32[$0 + 76 >> 2] = 0;
   }
   jsvUnLock(HEAP32[$0 + 316 >> 2]);
   HEAP32[$0 + 316 >> 2] = HEAP32[$0 + 76 >> 2];
   if (!HEAP32[$0 + 76 >> 2]) {
    jsvUnLock(HEAP32[$0 + 300 >> 2]);
    break label$1;
   }
  }
  if (!HEAP32[$0 + 316 >> 2]) {
   HEAP32[$0 + 316 >> 2] = jsvLockAgain(HEAP32[86750]);
  }
  HEAP32[$0 + 304 >> 2] = 0;
  HEAP32[$0 + 308 >> 2] = 0;
  jswrap_object_keys_or_property_names_cb(HEAP32[$0 + 316 >> 2], 7, 555, $0 + 296 | 0);
  if (HEAP32[$0 + 308 >> 2] > 1) {
   jsiMoveCursorChar(HEAP32[86768], HEAP32[86770], HEAP32[44637]);
   HEAP8[347076] = 1;
   jsiConsolePrintString(146976);
   HEAP32[$0 + 312 >> 2] = 0;
   jswrap_object_keys_or_property_names_cb(HEAP32[$0 + 316 >> 2], 7, 556, $0 + 296 | 0);
   if (HEAP32[$0 + 312 >> 2]) {
    jsiConsolePrintString(146977);
   }
   jsiConsolePrintString(146977);
   jsiConsoleReturnInputLine();
  }
  jsvUnLock2(HEAP32[$0 + 316 >> 2], HEAP32[$0 + 300 >> 2]);
  if (!HEAP32[$0 + 304 >> 2]) {
   break label$1;
  }
  jsvGetString(HEAP32[$0 + 304 >> 2], $0, 64);
  if (HEAPU32[$0 + 296 >> 2] < strlen($0) >>> 0) {
   jsiAppendStringToInputLine(HEAP32[$0 + 296 >> 2] + $0 | 0);
  }
  jsvUnLock(HEAP32[$0 + 304 >> 2]);
 }
 __stack_pointer = $0 + 320 | 0;
}

function jsfCreateFile($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 112 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 104 >> 2] = $1;
 HEAP32[$4 + 100 >> 2] = $2;
 HEAP32[$4 + 96 >> 2] = $3;
 HEAP8[$4 + 95 | 0] = jsfStripDriveFromName($0, 0);
 HEAP32[$4 + 32 >> 2] = HEAP32[$0 + 24 >> 2];
 $3 = $0;
 $2 = HEAP32[$3 + 16 >> 2];
 $1 = HEAP32[$3 + 20 >> 2];
 HEAP32[$4 + 24 >> 2] = $2;
 HEAP32[$4 + 28 >> 2] = $1;
 $2 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 HEAP32[$4 + 16 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 $1 = HEAP32[$3 + 4 >> 2];
 $2 = HEAP32[$3 >> 2];
 HEAP32[$4 + 8 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $1;
 jsfCacheClearFile($4 + 8 | 0);
 jsfGetDriveBankAddress(HEAP8[$4 + 95 | 0], $4 + 88 | 0, $4 + 84 | 0);
 HEAP32[$4 + 80 >> 2] = jsfAlignAddress(HEAP32[$4 + 104 >> 2]) + 32;
 HEAP8[$4 + 79 | 0] = 0;
 HEAP32[$4 + 72 >> 2] = 0;
 HEAP32[$4 + 36 >> 2] = 0;
 label$1: {
  while (1) {
   if ((HEAP32[$4 + 36 >> 2] != 0 ^ -1) & 1) {
    HEAP32[$4 + 72 >> 2] = HEAP32[$4 + 88 >> 2];
    HEAP32[$4 + 36 >> 2] = 0;
    while (1) {
     if (jsfGetFileHeader(HEAP32[$4 + 72 >> 2], $4 + 40 | 0, 0) & 1) {
      while (1) {
       if (jsfGetNextFileHeader($4 + 72 | 0, $4 + 40 | 0, 0) & 1) {
        continue;
       }
       break;
      }
     }
     label$7: {
      if (jsfGetSpaceLeftInPage(HEAP32[$4 + 72 >> 2]) >>> 0 < HEAPU32[$4 + 80 >> 2]) {
       HEAP32[$4 + 72 >> 2] = jsfGetAddressOfNextPage(HEAP32[$4 + 72 >> 2]);
       break label$7;
      }
      HEAP32[$4 + 36 >> 2] = HEAP32[$4 + 72 >> 2];
     }
     $1 = 0;
     $1 = HEAP32[$4 + 72 >> 2] ? HEAP32[$4 + 36 >> 2] != 0 ^ -1 : $1;
     if ($1 & 1) {
      continue;
     }
     break;
    }
    if (!HEAP32[$4 + 36 >> 2]) {
     label$11: {
      if (!(HEAP8[$4 + 79 | 0] & 1)) {
       HEAP8[$4 + 79 | 0] = 1;
       if (!(jsfCompact(1) & 1)) {
        HEAP32[$4 + 108 >> 2] = 0;
        break label$1;
       }
       HEAP32[$4 + 72 >> 2] = HEAP32[$4 + 88 >> 2];
       break label$11;
      }
      HEAP32[$4 + 108 >> 2] = 0;
      break label$1;
     }
    }
    continue;
   }
   break;
  }
  HEAP32[$4 + 72 >> 2] = HEAP32[$4 + 36 >> 2];
  HEAP32[$4 + 40 >> 2] = HEAP32[$4 + 104 >> 2] | HEAP32[$4 + 100 >> 2] << 24;
  $1 = HEAP32[$0 >> 2];
  $2 = HEAP32[$3 + 4 >> 2];
  $5 = $1;
  $0 = $4 + 40 | 0;
  $1 = $0;
  HEAP32[$1 + 4 >> 2] = $5;
  HEAP32[$1 + 8 >> 2] = $2;
  HEAP32[$1 + 28 >> 2] = HEAP32[$3 + 24 >> 2];
  $1 = HEAP32[$3 + 20 >> 2];
  $2 = HEAP32[$3 + 16 >> 2];
  $5 = $2;
  $2 = $0;
  HEAP32[$2 + 20 >> 2] = $5;
  HEAP32[$2 + 24 >> 2] = $1;
  $2 = HEAP32[$3 + 12 >> 2];
  $1 = HEAP32[$3 + 8 >> 2];
  $3 = $1;
  $1 = $0;
  HEAP32[$1 + 12 >> 2] = $3;
  HEAP32[$1 + 16 >> 2] = $2;
  jshFlashWrite($4 + 40 | 0, HEAP32[$4 + 72 >> 2], 32);
  if (HEAP32[$4 + 96 >> 2]) {
   $1 = HEAP32[$4 + 44 >> 2];
   $2 = HEAP32[$4 + 40 >> 2];
   $3 = $2;
   $0 = HEAP32[$4 + 96 >> 2];
   $2 = $0;
   HEAP32[$2 >> 2] = $3;
   HEAP32[$2 + 4 >> 2] = $1;
   $2 = HEAP32[$4 + 68 >> 2];
   $1 = HEAP32[$4 + 64 >> 2];
   $3 = $1;
   $1 = $0;
   HEAP32[$1 + 24 >> 2] = $3;
   HEAP32[$1 + 28 >> 2] = $2;
   $1 = HEAP32[$4 + 60 >> 2];
   $2 = HEAP32[$4 + 56 >> 2];
   $3 = $2;
   $2 = $0;
   HEAP32[$2 + 16 >> 2] = $3;
   HEAP32[$2 + 20 >> 2] = $1;
   $2 = HEAP32[$4 + 52 >> 2];
   $1 = HEAP32[$4 + 48 >> 2];
   $3 = $1;
   $1 = $0;
   HEAP32[$1 + 8 >> 2] = $3;
   HEAP32[$1 + 12 >> 2] = $2;
  }
  HEAP32[$4 + 72 >> 2] = HEAP32[$4 + 72 >> 2] + 32;
  jsfCachePut($4 + 40 | 0, HEAP32[$4 + 72 >> 2]);
  HEAP32[$4 + 108 >> 2] = HEAP32[$4 + 72 >> 2];
 }
 __stack_pointer = $4 + 112 | 0;
 return HEAP32[$4 + 108 >> 2];
}

function graphicsFillEllipse($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 80 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 76 >> 2] = $0;
 HEAP32[$5 + 72 >> 2] = $1;
 HEAP32[$5 + 68 >> 2] = $2;
 HEAP32[$5 + 64 >> 2] = $3;
 HEAP32[$5 + 60 >> 2] = $4;
 graphicsToDeviceCoordinates(HEAP32[$5 + 76 >> 2], $5 + 72 | 0, $5 + 68 | 0);
 graphicsToDeviceCoordinates(HEAP32[$5 + 76 >> 2], $5 - -64 | 0, $5 + 60 | 0);
 if (HEAP32[$5 + 72 >> 2] > HEAP32[$5 + 64 >> 2]) {
  HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 72 >> 2];
  HEAP32[$5 + 72 >> 2] = HEAP32[$5 + 64 >> 2];
  HEAP32[$5 + 64 >> 2] = HEAP32[$5 + 56 >> 2];
 }
 if (HEAP32[$5 + 68 >> 2] > HEAP32[$5 + 60 >> 2]) {
  HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 68 >> 2];
  HEAP32[$5 + 68 >> 2] = HEAP32[$5 + 60 >> 2];
  HEAP32[$5 + 60 >> 2] = HEAP32[$5 + 52 >> 2];
 }
 HEAP32[$5 + 48 >> 2] = (HEAP32[$5 + 72 >> 2] + HEAP32[$5 + 64 >> 2] | 0) / 2;
 HEAP32[$5 + 44 >> 2] = (HEAP32[$5 + 68 >> 2] + HEAP32[$5 + 60 >> 2] | 0) / 2;
 HEAP32[$5 + 40 >> 2] = (HEAP32[$5 + 64 >> 2] - HEAP32[$5 + 72 >> 2] | 0) / 2;
 HEAP32[$5 + 36 >> 2] = (HEAP32[$5 + 60 >> 2] - HEAP32[$5 + 68 >> 2] | 0) / 2;
 HEAP32[$5 + 32 >> 2] = 0;
 HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 36 >> 2];
 HEAP32[$5 + 24 >> 2] = Math_imul(HEAP32[$5 + 40 >> 2], HEAP32[$5 + 40 >> 2]);
 HEAP32[$5 + 20 >> 2] = Math_imul(HEAP32[$5 + 36 >> 2], HEAP32[$5 + 36 >> 2]);
 HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 20 >> 2] - Math_imul(HEAP32[$5 + 24 >> 2], (HEAP32[$5 + 36 >> 2] << 1) - 1 | 0);
 HEAP8[$5 + 11 | 0] = 0;
 while (1) {
  HEAP8[$5 + 11 | 0] = 0;
  HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 16 >> 2] << 1;
  if (HEAP32[$5 + 12 >> 2] < (Math_imul(HEAP32[$5 + 20 >> 2], (HEAP32[$5 + 32 >> 2] << 1) + 1 | 0) | 0)) {
   HEAP32[$5 + 32 >> 2] = HEAP32[$5 + 32 >> 2] + 1;
   HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + Math_imul(HEAP32[$5 + 20 >> 2], (HEAP32[$5 + 32 >> 2] << 1) + 1 | 0);
   HEAP8[$5 + 11 | 0] = 1;
  }
  if (HEAP32[$5 + 12 >> 2] > (Math_imul(HEAP32[$5 + 24 >> 2], 1 - (HEAP32[$5 + 28 >> 2] << 1) | 0) | 0)) {
   $0 = HEAP32[$5 + 76 >> 2];
   graphicsFillRectDevice(HEAP32[$5 + 76 >> 2], HEAP32[$5 + 48 >> 2] + HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2] + HEAP32[$5 + 28 >> 2] | 0, HEAP32[$5 + 48 >> 2] - HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2] + HEAP32[$5 + 28 >> 2] | 0, HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
   $0 = HEAP32[$5 + 76 >> 2];
   graphicsFillRectDevice(HEAP32[$5 + 76 >> 2], HEAP32[$5 + 48 >> 2] + HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2] - HEAP32[$5 + 28 >> 2] | 0, HEAP32[$5 + 48 >> 2] - HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2] - HEAP32[$5 + 28 >> 2] | 0, HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
   HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 28 >> 2] - 1;
   HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] - Math_imul(HEAP32[$5 + 24 >> 2], (HEAP32[$5 + 28 >> 2] << 1) - 1 | 0);
   HEAP8[$5 + 11 | 0] = 1;
  }
  $0 = 0;
  $0 = HEAP8[$5 + 11 | 0] & 1 ? HEAP32[$5 + 28 >> 2] >= 0 : $0;
  if ($0) {
   continue;
  }
  break;
 }
 while (1) {
  $0 = HEAP32[$5 + 32 >> 2];
  HEAP32[$5 + 32 >> 2] = $0 + 1;
  if (($0 | 0) < HEAP32[$5 + 40 >> 2]) {
   $0 = HEAP32[$5 + 76 >> 2];
   graphicsFillRectDevice(HEAP32[$5 + 76 >> 2], HEAP32[$5 + 48 >> 2] + HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2], HEAP32[$5 + 48 >> 2] - HEAP32[$5 + 32 >> 2] | 0, HEAP32[$5 + 44 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
   continue;
  }
  break;
 }
 __stack_pointer = $5 + 80 | 0;
}

function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 label$1: {
  label$2: {
   label$3: {
    label$4: {
     label$5: {
      label$6: {
       label$7: {
        label$8: {
         label$9: {
          label$11: {
           $5 = $1;
           if ($5) {
            $7 = $2;
            if (!$7) {
             break label$11;
            }
            $4 = $3;
            if (!$4) {
             break label$9;
            }
            $5 = Math_clz32($4) - Math_clz32($5) | 0;
            if ($5 >>> 0 <= 31) {
             break label$8;
            }
            break label$2;
           }
           $4 = $3;
           if (($4 | 0) == 1 | $4 >>> 0 > 1) {
            break label$2;
           }
           $5 = $0;
           $7 = $2;
           $5 = ($5 >>> 0) / ($7 >>> 0) | 0;
           i64toi32_i32$HIGH_BITS = 0;
           return $5;
          }
          $7 = $3;
          if (!$0) {
           break label$7;
          }
          if (!$7) {
           break label$6;
          }
          $4 = $7 - 1 | 0;
          if ($4 & $7) {
           break label$6;
          }
          $1 = $5 >>> __wasm_ctz_i32($7) | 0;
          i64toi32_i32$HIGH_BITS = 0;
          return $1;
         }
         if (!($7 - 1 & $7)) {
          break label$5;
         }
         $5 = (Math_clz32($7) + 33 | 0) - Math_clz32($5) | 0;
         $7 = 0 - $5 | 0;
         break label$3;
        }
        $7 = 63 - $5 | 0;
        $5 = $5 + 1 | 0;
        break label$3;
       }
       $4 = ($5 >>> 0) / ($7 >>> 0) | 0;
       i64toi32_i32$HIGH_BITS = 0;
       return $4;
      }
      $5 = Math_clz32($7) - Math_clz32($5) | 0;
      if ($5 >>> 0 < 31) {
       break label$4;
      }
      break label$2;
     }
     if (($7 | 0) == 1) {
      break label$1;
     }
     $4 = $1;
     $1 = $0;
     $9 = 0;
     $8 = __wasm_ctz_i32($7);
     $6 = $8 & 31;
     if (($8 & 63) >>> 0 >= 32) {
      $1 = $4 >>> $6 | 0;
     } else {
      $9 = $4 >>> $6 | 0;
      $1 = ((1 << $6) - 1 & $4) << 32 - $6 | $1 >>> $6;
     }
     i64toi32_i32$HIGH_BITS = $9;
     return $1;
    }
    $7 = 63 - $5 | 0;
    $5 = $5 + 1 | 0;
   }
   $4 = $0;
   $9 = 0;
   $8 = $5 & 63;
   $6 = $8 & 31;
   if (($8 & 63) >>> 0 >= 32) {
    $10 = $1 >>> $6 | 0;
   } else {
    $9 = $1 >>> $6 | 0;
    $10 = ((1 << $6) - 1 & $1) << 32 - $6 | $4 >>> $6;
   }
   $12 = $9;
   $9 = $1;
   $1 = $0;
   $8 = $7 & 63;
   $6 = $8 & 31;
   if (($8 & 63) >>> 0 >= 32) {
    $4 = $1 << $6;
    $0 = 0;
   } else {
    $4 = (1 << $6) - 1 & $1 >>> 32 - $6 | $9 << $6;
    $0 = $1 << $6;
   }
   $1 = $4;
   if ($5) {
    $4 = $3 - 1 | 0;
    $6 = $2 - 1 | 0;
    $4 = ($6 | 0) != -1 ? $4 + 1 | 0 : $4;
    $13 = $6;
    $7 = $4;
    while (1) {
     $4 = $10;
     $8 = $4 << 1;
     $4 = $12 << 1 | $4 >>> 31;
     $10 = $8 | $1 >>> 31;
     $9 = $4;
     $4 = $13;
     $8 = $10;
     $6 = $7 - (($4 >>> 0 < $8 >>> 0) + $9 | 0) | 0;
     $12 = $3 & $6 >> 31;
     $4 = $8;
     $11 = $6 >> 31;
     $8 = $11 & $2;
     $10 = $4 - $8 | 0;
     $12 = $9 - (($4 >>> 0 < $8 >>> 0) + $12 | 0) | 0;
     $4 = $1 << 1 | $0 >>> 31;
     $0 = $0 << 1 | $14;
     $1 = $4 | $16;
     $15 = 0;
     $11 = $11 & 1;
     $14 = $11;
     $5 = $5 - 1 | 0;
     if ($5) {
      continue;
     }
     break;
    }
   }
   i64toi32_i32$HIGH_BITS = $15 | ($1 << 1 | $0 >>> 31);
   return $0 << 1 | $11;
  }
  $0 = 0;
  $1 = 0;
 }
 i64toi32_i32$HIGH_BITS = $1;
 return $0;
}

function jswrap_storagefile_getLength($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 240 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 236 >> 2] = $0;
 HEAP32[$1 + 232 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 236 >> 2], 120049);
 jsfNameFromVar($1 + 200 | 0, HEAP32[$1 + 232 >> 2]);
 jsvUnLock(HEAP32[$1 + 232 >> 2]);
 HEAP32[$1 + 196 >> 2] = 27;
 while (1) {
  $0 = 0;
  $0 = HEAP32[$1 + 196 >> 2] ? !HEAP8[(HEAP32[$1 + 196 >> 2] + $1 | 0) + 199 | 0] : $0;
  if ($0) {
   HEAP32[$1 + 196 >> 2] = HEAP32[$1 + 196 >> 2] - 1;
   continue;
  }
  break;
 }
 HEAP32[$1 + 192 >> 2] = 1;
 HEAP8[HEAP32[$1 + 196 >> 2] + ($1 + 200 | 0) | 0] = HEAP32[$1 + 192 >> 2];
 HEAP32[$1 + 188 >> 2] = 0;
 HEAP32[$1 + 184 >> 2] = 0;
 HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 224 >> 2];
 $2 = HEAP32[$1 + 220 >> 2];
 $0 = HEAP32[$1 + 216 >> 2];
 HEAP32[$1 + 56 >> 2] = $0;
 HEAP32[$1 + 60 >> 2] = $2;
 $0 = HEAP32[$1 + 212 >> 2];
 $2 = HEAP32[$1 + 208 >> 2];
 HEAP32[$1 + 48 >> 2] = $2;
 HEAP32[$1 + 52 >> 2] = $0;
 $2 = HEAP32[$1 + 204 >> 2];
 $0 = HEAP32[$1 + 200 >> 2];
 HEAP32[$1 + 40 >> 2] = $0;
 HEAP32[$1 + 44 >> 2] = $2;
 HEAP32[$1 + 148 >> 2] = jsfFindFile($1 + 40 | 0, $1 + 152 | 0);
 HEAP8[$1 + 147 | 0] = 255;
 if (HEAP32[$1 + 148 >> 2]) {
  jshFlashRead($1 + 147 | 0, (HEAP32[$1 + 148 >> 2] + jsfGetFileSize($1 + 152 | 0) | 0) - 1 | 0, 1);
 }
 while (1) {
  $0 = 0;
  label$6: {
   if (!HEAP32[$1 + 148 >> 2]) {
    break label$6;
   }
   $0 = 0;
   if (HEAPU8[$1 + 147 | 0] == 255) {
    break label$6;
   }
   $0 = HEAP32[$1 + 192 >> 2] < 255;
  }
  if ($0) {
   HEAP32[$1 + 188 >> 2] = jsfGetFileSize($1 + 152 | 0) + HEAP32[$1 + 188 >> 2];
   HEAP32[$1 + 192 >> 2] = HEAP32[$1 + 192 >> 2] + 1;
   HEAP8[HEAP32[$1 + 196 >> 2] + ($1 + 200 | 0) | 0] = HEAP32[$1 + 192 >> 2];
   HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 224 >> 2];
   $0 = HEAP32[$1 + 220 >> 2];
   $2 = HEAP32[$1 + 216 >> 2];
   HEAP32[$1 + 24 >> 2] = $2;
   HEAP32[$1 + 28 >> 2] = $0;
   $2 = HEAP32[$1 + 212 >> 2];
   $0 = HEAP32[$1 + 208 >> 2];
   HEAP32[$1 + 16 >> 2] = $0;
   HEAP32[$1 + 20 >> 2] = $2;
   $0 = HEAP32[$1 + 204 >> 2];
   $2 = HEAP32[$1 + 200 >> 2];
   HEAP32[$1 + 8 >> 2] = $2;
   HEAP32[$1 + 12 >> 2] = $0;
   HEAP32[$1 + 148 >> 2] = jsfFindFile($1 + 8 | 0, $1 + 152 | 0);
   if (HEAP32[$1 + 148 >> 2]) {
    jshFlashRead($1 + 147 | 0, (HEAP32[$1 + 148 >> 2] + jsfGetFileSize($1 + 152 | 0) | 0) - 1 | 0, 1);
   }
   continue;
  }
  break;
 }
 if (HEAP32[$1 + 148 >> 2]) {
  HEAP8[$1 + 79 | 0] = 0;
  while (1) {
   label$11: {
    if (!((HEAPU8[$1 + 79 | 0] ^ -1) & 1)) {
     break label$11;
    }
    HEAP32[$1 + 72 >> 2] = jsfGetFileSize($1 + 152 | 0) - HEAP32[$1 + 184 >> 2];
    if (HEAP32[$1 + 72 >> 2] <= 0) {
     HEAP8[$1 + 79 | 0] = 1;
     break label$11;
    }
    if (HEAP32[$1 + 72 >> 2] > 64) {
     HEAP32[$1 + 72 >> 2] = 64;
    }
    jshFlashRead($1 + 80 | 0, HEAP32[$1 + 148 >> 2] + HEAP32[$1 + 184 >> 2] | 0, HEAP32[$1 + 72 >> 2]);
    HEAP32[$1 + 68 >> 2] = 0;
    while (1) {
     if (HEAP32[$1 + 68 >> 2] < HEAP32[$1 + 72 >> 2]) {
      if (HEAP8[HEAP32[$1 + 68 >> 2] + ($1 + 80 | 0) | 0] == -1) {
       HEAP32[$1 + 72 >> 2] = HEAP32[$1 + 68 >> 2];
       HEAP8[$1 + 79 | 0] = 1;
      } else {
       HEAP32[$1 + 68 >> 2] = HEAP32[$1 + 68 >> 2] + 1;
       continue;
      }
     }
     break;
    }
    HEAP32[$1 + 184 >> 2] = HEAP32[$1 + 72 >> 2] + HEAP32[$1 + 184 >> 2];
    continue;
   }
   break;
  }
 }
 HEAP32[$1 + 188 >> 2] = HEAP32[$1 + 184 >> 2] + HEAP32[$1 + 188 >> 2];
 __stack_pointer = $1 + 240 | 0;
 return HEAP32[$1 + 188 >> 2];
}

function tflite__ops__micro__depthwise_conv__Eval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1: {
  if (!HEAP32[HEAP32[$2 + 36 >> 2] + 8 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if (!HEAP32[HEAP32[$2 + 36 >> 2] + 12 >> 2]) {
   break label$2;
  }
 }
 HEAP32[$2 + 32 >> 2] = HEAP32[HEAP32[$2 + 36 >> 2] + 12 >> 2];
 HEAP32[$2 + 28 >> 2] = HEAP32[HEAP32[$2 + 36 >> 2] + 8 >> 2];
 HEAP32[$2 + 24 >> 2] = tflite__micro__GetEvalOutput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], 0);
 HEAP32[$2 + 20 >> 2] = tflite__micro__GetEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], 0);
 HEAP32[$2 + 16 >> 2] = tflite__micro__GetEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], 1);
 label$3: {
  if ((tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 36 >> 2]) | 0) == 3) {
   $0 = tflite__micro__GetEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], 2);
   break label$3;
  }
  $0 = 0;
 }
 HEAP32[$2 + 12 >> 2] = $0;
 label$5: {
  label$6: {
   label$7: {
    switch (HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2] - 1 | 0) {
    case 0:
     tflite__ops__micro__depthwise_conv__EvalFloat_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteDepthwiseConvParams__2c_20tflite__ops__micro__depthwise_conv___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 + 32 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 24 >> 2]);
     break label$6;

    case 8:
     tflite__ops__micro__depthwise_conv__EvalQuantizedPerChannel_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteDepthwiseConvParams__2c_20tflite__ops__micro__depthwise_conv___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 + 32 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 24 >> 2]);
     break label$6;

    case 2:
     tflite__ops__micro__depthwise_conv__EvalQuantized_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteDepthwiseConvParams__2c_20tflite__ops__micro__depthwise_conv___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 + 32 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 24 >> 2]);
     break label$6;

    default:
     break label$7;
    }
   }
   $0 = HEAP32[HEAP32[$2 + 40 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 40 >> 2];
   $3 = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2]);
   HEAP32[$2 + 4 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2];
   HEAP32[$2 >> 2] = $3;
   FUNCTION_TABLE[$0 | 0]($1, 127536, $2);
   HEAP32[$2 + 44 >> 2] = 1;
   break label$5;
  }
  HEAP32[$2 + 44 >> 2] = 0;
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function jsfGetJSONForObjectItWithCallback($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0;
 $7 = __stack_pointer - 128 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 124 >> 2] = $0;
 HEAP32[$7 + 120 >> 2] = $1;
 HEAP32[$7 + 116 >> 2] = $2;
 HEAP32[$7 + 112 >> 2] = $3;
 HEAP32[$7 + 108 >> 2] = $4;
 HEAP32[$7 + 104 >> 2] = $5;
 HEAP8[$7 + 103 | 0] = $6;
 HEAP8[$7 + 102 | 0] = 0;
 HEAP32[$7 + 96 >> 2] = 0;
 while (1) {
  $0 = 0;
  if (jsvObjectIteratorHasValue_8(HEAP32[$7 + 124 >> 2]) & 1) {
   $0 = jspIsInterrupted() ^ -1;
  }
  if ($0 & 1) {
   HEAP32[$7 + 92 >> 2] = jsvObjectIteratorGetKey_5(HEAP32[$7 + 124 >> 2]);
   HEAP32[$7 + 88 >> 2] = jsvGetValueOfName(HEAP32[$7 + 92 >> 2]);
   $0 = 1;
   label$4: {
    if (jsvIsInternalObjectKey(HEAP32[$7 + 92 >> 2]) & 1) {
     break label$4;
    }
    if (HEAP32[$7 + 120 >> 2] & 16) {
     $0 = 1;
     if (jsvIsFunction(HEAP32[$7 + 88 >> 2]) & 1) {
      break label$4;
     }
    }
    if (HEAP32[$7 + 120 >> 2] & 64) {
     $0 = 1;
     if (jsvIsUndefined(HEAP32[$7 + 88 >> 2]) & 1) {
      break label$4;
     }
    }
    $0 = jsvIsGetterOrSetter(HEAP32[$7 + 88 >> 2]);
   }
   HEAP8[$7 + 87 | 0] = $0 & 1;
   if (!(HEAP8[$7 + 87 | 0] & 1)) {
    HEAP32[$7 + 96 >> 2] = HEAP32[$7 + 96 >> 2] + 1;
    if (!(HEAP8[$7 + 103 | 0] & 1)) {
     cbprintf(HEAP32[$7 + 108 >> 2], HEAP32[$7 + 104 >> 2], HEAP32[$7 + 120 >> 2] & 4 ? 144359 : 128061, 0);
    }
    $0 = 0;
    if (HEAP32[$7 + 120 >> 2] & 1) {
     $0 = jsonNeedsNewLine(HEAP32[$7 + 88 >> 2]);
    }
    HEAP8[$7 + 86 | 0] = $0 & 1;
    if (!(!(HEAP32[$7 + 120 >> 2] & 1) | HEAPU32[$7 + 96 >> 2] <= 4)) {
     HEAP8[$7 + 102 | 0] = 1;
    }
    if (HEAP32[$7 + 120 >> 2] & 2) {
     HEAP8[$7 + 102 | 0] = 1;
     HEAP8[$7 + 86 | 0] = 1;
    }
    if (HEAP8[$7 + 86 | 0] & 1 ? 1 : HEAP8[$7 + 102 | 0] & 1) {
     jsonNewLine(HEAP32[$7 + 112 >> 2], HEAP32[$7 + 116 >> 2], HEAP32[$7 + 108 >> 2], HEAP32[$7 + 104 >> 2]);
     HEAP8[$7 + 102 | 0] = 0;
     HEAP32[$7 + 96 >> 2] = 0;
    }
    HEAP8[$7 + 85 | 0] = 1;
    if (HEAP32[$7 + 120 >> 2] & 512) {
     label$15: {
      if (jsvIsIntegerish(HEAP32[$7 + 92 >> 2]) & 1) {
       HEAP8[$7 + 85 | 0] = 0;
       break label$15;
      }
      label$17: {
       if (!(jsvIsString(HEAP32[$7 + 92 >> 2]) & 1)) {
        break label$17;
       }
       if (jsvGetStringLength(HEAP32[$7 + 92 >> 2]) >>> 0 >= 63) {
        break label$17;
       }
       jsvGetString(HEAP32[$7 + 92 >> 2], $7 + 16 | 0, 64);
       if (isIDString($7 + 16 | 0) & 1) {
        HEAP8[$7 + 85 | 0] = 0;
       }
      }
     }
    }
    $1 = HEAP32[$7 + 108 >> 2];
    $2 = HEAP32[$7 + 104 >> 2];
    if (HEAP8[$7 + 85 | 0] & 1) {
     $0 = HEAP32[$7 + 120 >> 2] & 2048 ? 115767 : 115762;
    } else {
     $0 = 115757;
    }
    $3 = HEAP32[$7 + 92 >> 2];
    HEAP32[$7 + 4 >> 2] = HEAP32[$7 + 120 >> 2] & 4 ? 144290 : 125755;
    HEAP32[$7 >> 2] = $3;
    cbprintf($1, $2, $0, $7);
    if (HEAP8[$7 + 103 | 0] & 1) {
     HEAP8[$7 + 103 | 0] = 0;
    }
    jsfGetJSONWithCallback(HEAP32[$7 + 88 >> 2], HEAP32[$7 + 92 >> 2], HEAP32[$7 + 112 >> 2], HEAP32[$7 + 116 >> 2], HEAP32[$7 + 108 >> 2], HEAP32[$7 + 104 >> 2]);
    HEAP8[$7 + 102 | 0] = HEAP8[$7 + 86 | 0] & 1;
   }
   jsvUnLock2(HEAP32[$7 + 92 >> 2], HEAP32[$7 + 88 >> 2]);
   jsvObjectIteratorNext(HEAP32[$7 + 124 >> 2]);
   continue;
  }
  break;
 }
 __stack_pointer = $7 + 128 | 0;
 return HEAP8[$7 + 102 | 0] & 1;
}

function jswrap_espruino_decodeUTF8($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 128 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 120 >> 2] = $0;
 HEAP32[$3 + 116 >> 2] = $1;
 HEAP32[$3 + 112 >> 2] = $2;
 label$1: {
  if (!(jsvIsString(HEAP32[$3 + 120 >> 2]) & 1)) {
   jsExceptionHere(1, 118836, 0);
   HEAP32[$3 + 124 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 28 >> 2] = jsvNewFromEmptyString_9();
  jsvStringIteratorNew($3 + 72 | 0, HEAP32[$3 + 120 >> 2], 0);
  jsvStringIteratorNew($3 + 32 | 0, HEAP32[$3 + 28 >> 2], 0);
  while (1) {
   if (jsvStringIteratorHasChar_9($3 + 72 | 0) & 1) {
    HEAP8[$3 + 27 | 0] = jsvStringIteratorGetCharAndNext($3 + 72 | 0);
    HEAP32[$3 + 20 >> 2] = HEAPU8[$3 + 27 | 0];
    HEAP32[$3 + 16 >> 2] = 0;
    if (HEAPU8[$3 + 27 | 0] > 127) {
     label$6: {
      if ((HEAPU8[$3 + 27 | 0] & 224) == 192) {
       HEAP32[$3 + 20 >> 2] = HEAPU8[$3 + 27 | 0] & 31;
       HEAP32[$3 + 16 >> 2] = 1;
       break label$6;
      }
      label$8: {
       if ((HEAPU8[$3 + 27 | 0] & 240) == 224) {
        HEAP32[$3 + 20 >> 2] = HEAPU8[$3 + 27 | 0] & 15;
        HEAP32[$3 + 16 >> 2] = 2;
        break label$8;
       }
       if ((HEAPU8[$3 + 27 | 0] & 248) == 240) {
        HEAP32[$3 + 20 >> 2] = HEAPU8[$3 + 27 | 0] & 7;
        HEAP32[$3 + 16 >> 2] = 3;
       }
      }
     }
     while (1) {
      $0 = HEAP32[$3 + 16 >> 2];
      HEAP32[$3 + 16 >> 2] = $0 - 1;
      if ($0) {
       HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 20 >> 2] << 6 | jsvStringIteratorGetCharAndNext($3 + 72 | 0) & 63;
       continue;
      }
      break;
     }
    }
    label$13: {
     if (HEAP32[$3 + 20 >> 2] <= 255) {
      jsvStringIteratorAppend($3 + 32 | 0, HEAP32[$3 + 20 >> 2] << 24 >> 24);
      break label$13;
     }
     HEAP32[$3 + 12 >> 2] = 0;
     label$15: {
      if (jsvIsArray(HEAP32[$3 + 116 >> 2]) & 1) {
       HEAP32[$3 + 12 >> 2] = jsvGetArrayItem(HEAP32[$3 + 116 >> 2], HEAP32[$3 + 20 >> 2]);
       break label$15;
      }
      if (jsvIsObject(HEAP32[$3 + 116 >> 2]) & 1) {
       HEAP32[$3 + 8 >> 2] = jsvNewFromInteger(HEAP32[$3 + 20 >> 2]);
       HEAP32[$3 + 12 >> 2] = jsvSkipNameAndUnLock(jsvFindChildFromVar(HEAP32[$3 + 116 >> 2], HEAP32[$3 + 8 >> 2], 0));
       jsvUnLock(HEAP32[$3 + 8 >> 2]);
      }
     }
     label$18: {
      if (HEAP32[$3 + 12 >> 2]) {
       break label$18;
      }
      if (!(jsvIsFunction(HEAP32[$3 + 112 >> 2]) & 1)) {
       break label$18;
      }
      HEAP32[$3 + 4 >> 2] = jsvNewFromInteger(HEAP32[$3 + 20 >> 2]);
      HEAP32[$3 + 12 >> 2] = jspExecuteFunction(HEAP32[$3 + 112 >> 2], 0, 1, $3 + 4 | 0);
      jsvUnLock(HEAP32[$3 + 4 >> 2]);
     }
     label$19: {
      if (HEAP32[$3 + 12 >> 2]) {
       break label$19;
      }
      if (!(jsvIsString(HEAP32[$3 + 112 >> 2]) & 1)) {
       break label$19;
      }
      HEAP32[$3 + 12 >> 2] = jsvLockAgain(HEAP32[$3 + 112 >> 2]);
     }
     if (HEAP32[$3 + 12 >> 2]) {
      HEAP32[$3 + 12 >> 2] = jsvAsStringAndUnLock(HEAP32[$3 + 12 >> 2]);
      jsvStringIteratorAppendString($3 + 32 | 0, HEAP32[$3 + 12 >> 2], 0, 2147483647);
      jsvUnLock(HEAP32[$3 + 12 >> 2]);
     }
    }
    continue;
   }
   break;
  }
  jsvStringIteratorFree_11($3 + 72 | 0);
  jsvStringIteratorFree_11($3 + 32 | 0);
  HEAP32[$3 + 124 >> 2] = HEAP32[$3 + 28 >> 2];
 }
 __stack_pointer = $3 + 128 | 0;
 return HEAP32[$3 + 124 >> 2];
}

function tflite__ops__micro__conv__Eval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 HEAP32[$2 + 32 >> 2] = HEAP32[HEAP32[$2 + 36 >> 2] + 12 >> 2];
 HEAP32[$2 + 28 >> 2] = tflite__micro__GetEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], 0);
 HEAP32[$2 + 24 >> 2] = tflite__micro__GetEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], 1);
 label$1: {
  if ((tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 36 >> 2]) | 0) == 3) {
   $0 = tflite__micro__GetEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], 2);
   break label$1;
  }
  $0 = 0;
 }
 HEAP32[$2 + 20 >> 2] = $0;
 HEAP32[$2 + 16 >> 2] = tflite__micro__GetEvalOutput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], 0);
 label$3: {
  if (!HEAP32[HEAP32[$2 + 36 >> 2] + 8 >> 2]) {
   break label$3;
  }
 }
 HEAP32[$2 + 12 >> 2] = HEAP32[HEAP32[$2 + 36 >> 2] + 8 >> 2];
 label$4: {
  label$5: {
   label$6: {
    switch (HEAP32[HEAP32[$2 + 28 >> 2] + 8 >> 2] - 1 | 0) {
    case 0:
     tflite__ops__micro__conv__EvalFloat_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteConvParams__2c_20tflite__ops__micro__conv__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__2c_20TfLiteEvalTensor__2c_20TfLiteEvalTensor__29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 + 32 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], 0, 0, HEAP32[$2 + 16 >> 2]);
     break label$5;

    case 8:
     tflite__ops__micro__conv__EvalQuantizedPerChannel_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteConvParams__2c_20tflite__ops__micro__conv__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__2c_20TfLiteEvalTensor__29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 + 32 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 16 >> 2], 0);
     break label$5;

    case 2:
     tflite__ops__micro__conv__EvalQuantized_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteConvParams__2c_20tflite__ops__micro__conv__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__2c_20TfLiteEvalTensor__2c_20TfLiteEvalTensor__29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 + 32 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], 0, 0, HEAP32[$2 + 16 >> 2]);
     break label$5;

    default:
     break label$6;
    }
   }
   $0 = HEAP32[HEAP32[$2 + 40 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 40 >> 2];
   $3 = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 28 >> 2] + 8 >> 2]);
   HEAP32[$2 + 4 >> 2] = HEAP32[HEAP32[$2 + 28 >> 2] + 8 >> 2];
   HEAP32[$2 >> 2] = $3;
   FUNCTION_TABLE[$0 | 0]($1, 127536, $2);
   HEAP32[$2 + 44 >> 2] = 1;
   break label$4;
  }
  HEAP32[$2 + 44 >> 2] = 0;
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function jsfBankCreateFileTable($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 192 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 184 >> 2] = $0;
 HEAP32[$1 + 176 >> 2] = 0;
 HEAP32[$1 + 180 >> 2] = 0;
 HEAP32[$1 + 168 >> 2] = 0;
 HEAP32[$1 + 172 >> 2] = 0;
 HEAP32[$1 + 160 >> 2] = 0;
 HEAP32[$1 + 164 >> 2] = 0;
 HEAP32[$1 + 152 >> 2] = 0;
 HEAP32[$1 + 156 >> 2] = 0;
 HEAP32[$1 + 148 >> 2] = 0;
 HEAP32[$1 + 144 >> 2] = HEAP32[$1 + 184 >> 2];
 if (jsfGetFileHeader(HEAP32[$1 + 144 >> 2], $1 + 152 | 0, 0) & 1) {
  while (1) {
   if (jsfIsRealFile($1 + 152 | 0) & 1) {
    HEAP32[$1 + 148 >> 2] = HEAP32[$1 + 148 >> 2] + 1;
   }
   if (jsfGetNextFileHeader($1 + 144 | 0, $1 + 152 | 0, 1) & 1) {
    continue;
   }
   break;
  }
 }
 jsfNameFromString($1 + 112 | 0, 123367);
 HEAP32[$1 + 56 >> 2] = HEAP32[$1 + 136 >> 2];
 $0 = HEAP32[$1 + 132 >> 2];
 $2 = HEAP32[$1 + 128 >> 2];
 HEAP32[$1 + 48 >> 2] = $2;
 HEAP32[$1 + 52 >> 2] = $0;
 $2 = HEAP32[$1 + 124 >> 2];
 $0 = HEAP32[$1 + 120 >> 2];
 HEAP32[$1 + 40 >> 2] = $0;
 HEAP32[$1 + 44 >> 2] = $2;
 $0 = HEAP32[$1 + 116 >> 2];
 $2 = HEAP32[$1 + 112 >> 2];
 HEAP32[$1 + 32 >> 2] = $2;
 HEAP32[$1 + 36 >> 2] = $0;
 HEAP32[$1 + 108 >> 2] = jsfFindFile($1 + 32 | 0, $1 + 152 | 0);
 if (HEAP32[$1 + 108 >> 2]) {
  jsfEraseFileInternal(HEAP32[$1 + 108 >> 2], $1 + 152 | 0, 0);
 }
 HEAP32[$1 + 104 >> 2] = HEAP32[$1 + 148 >> 2] << 5;
 label$5: {
  if (!HEAP32[$1 + 104 >> 2]) {
   HEAP32[$1 + 188 >> 2] = 0;
   break label$5;
  }
  $3 = HEAP32[$1 + 104 >> 2];
  HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 136 >> 2];
  $2 = HEAP32[$1 + 132 >> 2];
  $0 = HEAP32[$1 + 128 >> 2];
  HEAP32[$1 + 16 >> 2] = $0;
  HEAP32[$1 + 20 >> 2] = $2;
  $0 = HEAP32[$1 + 124 >> 2];
  $2 = HEAP32[$1 + 120 >> 2];
  HEAP32[$1 + 8 >> 2] = $2;
  HEAP32[$1 + 12 >> 2] = $0;
  $2 = HEAP32[$1 + 116 >> 2];
  $0 = HEAP32[$1 + 112 >> 2];
  HEAP32[$1 >> 2] = $0;
  HEAP32[$1 + 4 >> 2] = $2;
  HEAP32[$1 + 108 >> 2] = jsfCreateFile($1, $3, 32, $1 + 152 | 0);
  if (!HEAP32[$1 + 108 >> 2]) {
   HEAP32[$1 + 188 >> 2] = 0;
   break label$5;
  }
  HEAP32[$1 + 144 >> 2] = HEAP32[$1 + 184 >> 2];
  HEAP32[$1 + 100 >> 2] = HEAP32[$1 + 108 >> 2];
  if (jsfGetFileHeader(HEAP32[$1 + 144 >> 2], $1 + 152 | 0, 1) & 1) {
   while (1) {
    if (jsfIsRealFile($1 + 152 | 0) & 1) {
     $0 = HEAP32[$1 + 180 >> 2];
     $2 = HEAP32[$1 + 176 >> 2];
     HEAP32[$1 + 88 >> 2] = $2;
     HEAP32[$1 + 92 >> 2] = $0;
     $2 = HEAP32[$1 + 172 >> 2];
     $0 = HEAP32[$1 + 168 >> 2];
     HEAP32[$1 + 80 >> 2] = $0;
     HEAP32[$1 + 84 >> 2] = $2;
     $0 = HEAP32[$1 + 164 >> 2];
     $2 = HEAP32[$1 + 160 >> 2];
     HEAP32[$1 + 72 >> 2] = $2;
     HEAP32[$1 + 76 >> 2] = $0;
     $2 = HEAP32[$1 + 156 >> 2];
     $0 = HEAP32[$1 + 152 >> 2];
     HEAP32[$1 + 64 >> 2] = $0;
     HEAP32[$1 + 68 >> 2] = $2;
     HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 144 >> 2] - HEAP32[$1 + 184 >> 2];
     jshFlashWriteAligned($1 - -64 | 0, HEAP32[$1 + 100 >> 2], 32);
     HEAP32[$1 + 100 >> 2] = HEAP32[$1 + 100 >> 2] + 32;
    }
    if (jsfGetNextFileHeader($1 + 144 | 0, $1 + 152 | 0, 1) & 1) {
     continue;
    }
    break;
   }
  }
  if (HEAP32[$1 + 184 >> 2] == 134217728) {
   HEAP32[86759] = HEAP32[$1 + 108 >> 2];
   HEAP32[86760] = HEAP32[$1 + 104 >> 2];
  }
  HEAP32[$1 + 188 >> 2] = HEAP32[$1 + 108 >> 2];
 }
 __stack_pointer = $1 + 192 | 0;
 return HEAP32[$1 + 188 >> 2];
}

function jsvNewFlatStringOfLength($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 40 >> 2] = $0;
 HEAP8[$1 + 39 | 0] = 1;
 HEAP32[$1 + 32 >> 2] = ((HEAP32[$1 + 40 >> 2] + 13 >>> 0) / 14 | 0) + 1;
 HEAP32[$1 + 28 >> 2] = 0;
 label$1: {
  if (HEAPU8[178978]) {
   HEAP8[346998] = HEAPU8[346998] | 32;
   HEAP32[$1 + 44 >> 2] = 0;
   break label$1;
  }
  while (1) {
   HEAP8[$1 + 27 | 0] = 1;
   while (1) {
    if (HEAP8[$1 + 27 | 0] & 1) {
     HEAP8[$1 + 27 | 0] = 0;
     HEAP8[178977] = 0;
     HEAP16[$1 + 24 >> 1] = 0;
     HEAP16[$1 + 22 >> 1] = HEAPU16[89490];
     HEAP16[$1 + 20 >> 1] = HEAPU16[$1 + 22 >> 1];
     HEAP32[$1 + 16 >> 2] = 0;
     while (1) {
      $0 = 0;
      label$8: {
       $0 = HEAPU16[$1 + 22 >> 1] ? HEAPU8[178977] ^ -1 : $0;
       if (!($0 & 1)) {
        break label$8;
       }
       HEAP32[$1 + 12 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 22 >> 1]);
       HEAP16[$1 + 10 >> 1] = jsvGetNextSibling(HEAP32[$1 + 12 >> 2]);
       label$9: {
        if (!(!HEAP32[$1 + 16 >> 2] | HEAPU16[$1 + 10 >> 1] != (HEAPU16[$1 + 22 >> 1] + 1 | 0))) {
         HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 16 >> 2] + 1;
         if (HEAPU32[$1 + 16 >> 2] >= HEAPU32[$1 + 32 >> 2]) {
          HEAP32[$1 + 4 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 10 >> 1]);
          HEAP16[$1 + 2 >> 1] = jsvGetNextSibling(HEAP32[$1 + 4 >> 2]);
          jshInterruptOff();
          if (!(HEAP8[178977] & 1)) {
           label$13: {
            if (HEAPU16[$1 + 24 >> 1]) {
             jsvSetNextSibling(jsvGetAddressOf(HEAPU16[$1 + 24 >> 1]), HEAPU16[$1 + 2 >> 1]);
             break label$13;
            }
            HEAP16[89490] = HEAPU16[$1 + 2 >> 1];
           }
           HEAP32[$1 + 28 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 20 >> 1]);
           jsvResetVariable(HEAP32[$1 + 28 >> 2], 38);
           $0 = HEAP32[$1 + 28 >> 2];
           $2 = HEAP32[$1 + 40 >> 2];
           HEAP8[$0 | 0] = $2;
           HEAP8[$0 + 1 | 0] = $2 >>> 8;
           HEAP8[$0 + 2 | 0] = $2 >>> 16;
           HEAP8[$0 + 3 | 0] = $2 >>> 24;
          }
          jshInterruptOn();
          if (HEAP32[$1 + 28 >> 2]) {
           break label$8;
          }
         }
         break label$9;
        }
        HEAP16[$1 + 24 >> 1] = HEAPU16[$1 + 22 >> 1];
        HEAP16[$1 + 20 >> 1] = HEAPU16[$1 + 10 >> 1];
        label$15: {
         label$16: {
          if (HEAPU16[$1 + 20 >> 1] != 12e3) {
           if (!(jsvGetAddressOf(HEAPU16[$1 + 20 >> 1] + 1 & 65535) & 3)) {
            break label$16;
           }
          }
          HEAP32[$1 + 16 >> 2] = 0;
          break label$15;
         }
         HEAP32[$1 + 16 >> 2] = 1;
        }
       }
       HEAP16[$1 + 22 >> 1] = HEAPU16[$1 + 10 >> 1];
       continue;
      }
      break;
     }
     if (HEAP8[178977] & 1) {
      HEAP8[$1 + 27 | 0] = 1;
     }
     continue;
    }
    break;
   }
   if (!(HEAP32[$1 + 28 >> 2] | !(HEAP8[$1 + 39 | 0] & 1))) {
    HEAP8[$1 + 39 | 0] = 0;
    jsvGarbageCollect();
    continue;
   }
   break;
  }
  if (!HEAP32[$1 + 28 >> 2]) {
   HEAP32[$1 + 44 >> 2] = 0;
   break label$1;
  }
  memset(HEAP32[$1 + 28 >> 2] + 14 | 0, 0, Math_imul(HEAP32[$1 + 32 >> 2] - 1 | 0, 14));
  HEAP8[178977] = 1;
  HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 28 >> 2];
 }
 __stack_pointer = $1 + 48 | 0;
 return HEAP32[$1 + 44 >> 2];
}

function jswrap_waveform_start($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $5 = __stack_pointer - 112 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 108 >> 2] = $0;
 HEAP8[$5 + 107 | 0] = $1;
 HEAPF64[$5 + 96 >> 3] = $2;
 HEAP32[$5 + 92 >> 2] = $3;
 HEAP8[$5 + 91 | 0] = $4;
 HEAP8[$5 + 90 | 0] = jsvObjectGetBoolChild(HEAP32[$5 + 108 >> 2], 118986) & 1;
 label$1: {
  if (HEAP8[$5 + 90 | 0] & 1) {
   jsExceptionHere(1, 118942, 0);
   break label$1;
  }
  if (!(jshIsPinValid(HEAPU8[$5 + 107 | 0]) & 1)) {
   jsExceptionHere(1, 117533, 0);
   break label$1;
  }
  $1 = __DOUBLE_BITS_10(HEAPF64[$5 + 96 >> 3]);
  $0 = $1;
  $1 = i64toi32_i32$HIGH_BITS;
  $1 = $1 & 2147483647;
  if (HEAPF64[$5 + 96 >> 3] < .001 ? 1 : ($1 | 0) == 2146435072 | $1 >>> 0 > 2146435072) {
   jsExceptionHere(1, 111538, 0);
   break label$1;
  }
  HEAP32[$5 + 80 >> 2] = 0;
  HEAP32[$5 + 84 >> 2] = 0;
  HEAP8[$5 + 79 | 0] = 0;
  label$7: {
   if (jsvIsObject(HEAP32[$5 + 92 >> 2]) & 1) {
    HEAPF64[$5 + 64 >> 3] = jsvObjectGetFloatChild(HEAP32[$5 + 92 >> 2], 120023);
    $1 = __DOUBLE_BITS_10(HEAPF64[$5 + 64 >> 3]);
    $4 = $1;
    $1 = i64toi32_i32$HIGH_BITS;
    $1 = $1 & 2147483647;
    if (!(!(HEAPF64[$5 + 64 >> 3] > 0) | (($1 | 0) == 2146435072 | $1 >>> 0 > 2146435072))) {
     $1 = jshGetTimeFromMilliseconds(HEAPF64[$5 + 64 >> 3] * 1e3);
     $0 = $1;
     $1 = i64toi32_i32$HIGH_BITS;
     $6 = $1;
     $1 = jshGetSystemTime();
     $4 = $1;
     $1 = i64toi32_i32$HIGH_BITS;
     $3 = $1 + ($0 >>> 0 < $4 >>> 0) | 0;
     HEAP32[$5 + 80 >> 2] = $0 - $4;
     $1 = $6;
     $3 = $1 - $3 | 0;
     HEAP32[$5 + 84 >> 2] = $3;
    }
    HEAP8[$5 + 79 | 0] = jsvObjectGetBoolChild(HEAP32[$5 + 92 >> 2], 113291) & 1;
    break label$7;
   }
   if (!(jsvIsUndefined(HEAP32[$5 + 92 >> 2]) & 1)) {
    HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 92 >> 2];
    jsExceptionHere(1, 113343, $5 + 16 | 0);
   }
  }
  HEAP8[$5 + 63 | 0] = 0;
  HEAP32[$5 + 56 >> 2] = jswrap_waveform_getBuffer(HEAP32[$5 + 108 >> 2], 0, $5 + 63 | 0);
  HEAP32[$5 + 52 >> 2] = jswrap_waveform_getBuffer(HEAP32[$5 + 108 >> 2], 1, 0);
  label$12: {
   if (HEAP8[$5 + 63 | 0] & 1) {
    HEAP8[$5 + 51 | 0] = HEAP8[$5 + 91 | 0] & 1 ? 6 : 7;
    break label$12;
   }
   HEAP8[$5 + 51 | 0] = HEAP8[$5 + 91 | 0] & 1 ? 4 : 5;
  }
  $3 = HEAP32[$5 + 80 >> 2];
  $1 = $3;
  $0 = HEAP32[$5 + 84 >> 2];
  $4 = $0;
  $0 = jshGetTimeFromMilliseconds(1e3 / HEAPF64[$5 + 96 >> 3]);
  $3 = i64toi32_i32$HIGH_BITS;
  $6 = $3;
  $3 = $4;
  $4 = $0;
  $0 = $6;
  $6 = $0;
  $7 = HEAPU8[$5 + 107 | 0];
  $8 = HEAP32[$5 + 56 >> 2];
  if (HEAP8[$5 + 79 | 0] & 1) {
   if (HEAP32[$5 + 52 >> 2]) {
    $0 = HEAP32[$5 + 52 >> 2];
   } else {
    $0 = HEAP32[$5 + 56 >> 2];
   }
  } else {
   $0 = 0;
  }
  if (!(jstStartSignal($1, $3, $4, $6, $7, $8, $0, HEAPU8[$5 + 51 | 0]) & 1)) {
   jsWarn(116253, 0);
  }
  jsvUnLock2(HEAP32[$5 + 56 >> 2], HEAP32[$5 + 52 >> 2]);
  jsvObjectSetChildAndUnLock(HEAP32[$5 + 108 >> 2], 118986, jsvNewFromBool(1));
  jsvObjectSetChildAndUnLock(HEAP32[$5 + 108 >> 2], 116646, jsvNewFromFloat(HEAPF64[$5 + 96 >> 3]));
  HEAP32[$5 + 44 >> 2] = jsvObjectGetChild(HEAP32[86751], 119367, 3);
  if (!HEAP32[$5 + 44 >> 2]) {
   break label$1;
  }
  jsvArrayPush(HEAP32[$5 + 44 >> 2], HEAP32[$5 + 108 >> 2]);
  jsvUnLock(HEAP32[$5 + 44 >> 2]);
 }
 __stack_pointer = $5 + 112 | 0;
}

function graphicsFillRectDevice($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP32[$6 + 8 >> 2] = $5;
 if (HEAP32[$6 + 24 >> 2] > HEAP32[$6 + 16 >> 2]) {
  HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 24 >> 2];
  HEAP32[$6 + 24 >> 2] = HEAP32[$6 + 16 >> 2];
  HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 4 >> 2];
 }
 if (HEAP32[$6 + 20 >> 2] > HEAP32[$6 + 12 >> 2]) {
  HEAP32[$6 >> 2] = HEAP32[$6 + 20 >> 2];
  HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 12 >> 2];
  HEAP32[$6 + 12 >> 2] = HEAP32[$6 >> 2];
 }
 $0 = HEAP32[$6 + 28 >> 2];
 if (HEAP32[$6 + 24 >> 2] < (HEAPU8[$0 + 32 | 0] | HEAPU8[$0 + 33 | 0] << 8)) {
  $0 = HEAP32[$6 + 28 >> 2];
  HEAP32[$6 + 24 >> 2] = HEAPU8[$0 + 32 | 0] | HEAPU8[$0 + 33 | 0] << 8;
 }
 $0 = HEAP32[$6 + 28 >> 2];
 if (HEAP32[$6 + 20 >> 2] < (HEAPU8[$0 + 34 | 0] | HEAPU8[$0 + 35 | 0] << 8)) {
  $0 = HEAP32[$6 + 28 >> 2];
  HEAP32[$6 + 20 >> 2] = HEAPU8[$0 + 34 | 0] | HEAPU8[$0 + 35 | 0] << 8;
 }
 $0 = HEAP32[$6 + 28 >> 2];
 if (HEAP32[$6 + 16 >> 2] > (HEAPU8[$0 + 36 | 0] | HEAPU8[$0 + 37 | 0] << 8)) {
  $0 = HEAP32[$6 + 28 >> 2];
  HEAP32[$6 + 16 >> 2] = HEAPU8[$0 + 36 | 0] | HEAPU8[$0 + 37 | 0] << 8;
 }
 $0 = HEAP32[$6 + 28 >> 2];
 if (HEAP32[$6 + 12 >> 2] > (HEAPU8[$0 + 38 | 0] | HEAPU8[$0 + 39 | 0] << 8)) {
  $0 = HEAP32[$6 + 28 >> 2];
  HEAP32[$6 + 12 >> 2] = HEAPU8[$0 + 38 | 0] | HEAPU8[$0 + 39 | 0] << 8;
 }
 label$7: {
  if (HEAP32[$6 + 16 >> 2] < HEAP32[$6 + 24 >> 2] | HEAP32[$6 + 12 >> 2] < HEAP32[$6 + 20 >> 2]) {
   break label$7;
  }
  $0 = HEAP32[$6 + 28 >> 2];
  if (HEAP32[$6 + 24 >> 2] < (HEAPU8[$0 + 40 | 0] | HEAPU8[$0 + 41 | 0] << 8) << 16 >> 16) {
   $0 = HEAP32[$6 + 28 >> 2];
   $1 = HEAP32[$6 + 24 >> 2];
   HEAP8[$0 + 40 | 0] = $1;
   HEAP8[$0 + 41 | 0] = $1 >>> 8;
  }
  $0 = HEAP32[$6 + 28 >> 2];
  if (HEAP32[$6 + 16 >> 2] > (HEAPU8[$0 + 44 | 0] | HEAPU8[$0 + 45 | 0] << 8) << 16 >> 16) {
   $0 = HEAP32[$6 + 28 >> 2];
   $1 = HEAP32[$6 + 16 >> 2];
   HEAP8[$0 + 44 | 0] = $1;
   HEAP8[$0 + 45 | 0] = $1 >>> 8;
  }
  $0 = HEAP32[$6 + 28 >> 2];
  if (HEAP32[$6 + 20 >> 2] < (HEAPU8[$0 + 42 | 0] | HEAPU8[$0 + 43 | 0] << 8) << 16 >> 16) {
   $0 = HEAP32[$6 + 28 >> 2];
   $1 = HEAP32[$6 + 20 >> 2];
   HEAP8[$0 + 42 | 0] = $1;
   HEAP8[$0 + 43 | 0] = $1 >>> 8;
  }
  $0 = HEAP32[$6 + 28 >> 2];
  if (HEAP32[$6 + 12 >> 2] > (HEAPU8[$0 + 46 | 0] | HEAPU8[$0 + 47 | 0] << 8) << 16 >> 16) {
   $0 = HEAP32[$6 + 28 >> 2];
   $1 = HEAP32[$6 + 12 >> 2];
   HEAP8[$0 + 46 | 0] = $1;
   HEAP8[$0 + 47 | 0] = $1 >>> 8;
  }
  if (!(HEAP32[$6 + 24 >> 2] != HEAP32[$6 + 16 >> 2] | HEAP32[$6 + 20 >> 2] != HEAP32[$6 + 12 >> 2])) {
   $0 = HEAP32[$6 + 28 >> 2];
   FUNCTION_TABLE[HEAPU8[$0 + 52 | 0] | HEAPU8[$0 + 53 | 0] << 8 | (HEAPU8[$0 + 54 | 0] << 16 | HEAPU8[$0 + 55 | 0] << 24)](HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 8 >> 2]);
   break label$7;
  }
  $0 = HEAP32[$6 + 28 >> 2];
  FUNCTION_TABLE[HEAPU8[$0 + 56 | 0] | HEAPU8[$0 + 57 | 0] << 8 | (HEAPU8[$0 + 58 | 0] << 16 | HEAPU8[$0 + 59 | 0] << 24)](HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], HEAP32[$6 + 12 >> 2], HEAP32[$6 + 8 >> 2]);
 }
 __stack_pointer = $6 + 32 | 0;
}

function jsvGetInteger($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = __stack_pointer + -64 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 56 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 56 >> 2]) {
   HEAP32[$1 + 60 >> 2] = 0;
   break label$1;
  }
  if (jsvIsNull(HEAP32[$1 + 56 >> 2]) & 1) {
   HEAP32[$1 + 60 >> 2] = 0;
   break label$1;
  }
  if (jsvIsUndefined(HEAP32[$1 + 56 >> 2]) & 1) {
   HEAP32[$1 + 60 >> 2] = 0;
   break label$1;
  }
  label$5: {
   if (!(jsvIsIntegerish(HEAP32[$1 + 56 >> 2]) & 1)) {
    if (!(jsvIsArrayBufferName(HEAP32[$1 + 56 >> 2]) & 1)) {
     break label$5;
    }
   }
   $0 = HEAP32[$1 + 56 >> 2];
   HEAP32[$1 + 60 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
   break label$1;
  }
  label$7: {
   if (!(jsvIsArray(HEAP32[$1 + 56 >> 2]) & 1)) {
    if (!(jsvIsArrayBuffer(HEAP32[$1 + 56 >> 2]) & 1)) {
     break label$7;
    }
   }
   HEAP32[$1 + 52 >> 2] = jsvGetLength(HEAP32[$1 + 56 >> 2]);
   if (!HEAP32[$1 + 52 >> 2]) {
    HEAP32[$1 + 60 >> 2] = 0;
    break label$1;
   }
   if (HEAP32[$1 + 52 >> 2] == 1) {
    if (jsvIsArrayBuffer(HEAP32[$1 + 56 >> 2]) & 1) {
     HEAP32[$1 + 60 >> 2] = jsvGetIntegerAndUnLock(jsvArrayBufferGet(HEAP32[$1 + 56 >> 2], 0));
     break label$1;
    }
    HEAP32[$1 + 60 >> 2] = jsvGetIntegerAndUnLock(jsvSkipNameAndUnLock(jsvGetArrayItem(HEAP32[$1 + 56 >> 2], 0)));
    break label$1;
   }
  }
  if (jsvIsFloat(HEAP32[$1 + 56 >> 2]) & 1) {
   $2 = HEAP32[$1 + 56 >> 2];
   $4 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
   $0 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
   wasm2js_scratch_store_i32(0, $4 | 0);
   wasm2js_scratch_store_i32(1, $0 | 0);
   $0 = __DOUBLE_BITS(+wasm2js_scratch_load_f64());
   $2 = $0;
   $4 = i64toi32_i32$HIGH_BITS;
   $0 = $4 & 2147483647;
   if (!(($0 | 0) == 2146435072 | $0 >>> 0 > 2146435072)) {
    $0 = HEAP32[$1 + 56 >> 2];
    $4 = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
    $0 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
    wasm2js_scratch_store_i32(0, $4 | 0);
    wasm2js_scratch_store_i32(1, $0 | 0);
    $3 = +wasm2js_scratch_load_f64();
    label$15: {
     if (Math_abs($3) < 0x8000000000000000) {
      $0 = Math_abs($3) >= 1 ? ~~($3 > 0 ? Math_min(Math_floor($3 * 2.3283064365386963e-10), 4294967295) : Math_ceil(($3 - +(~~$3 >>> 0 >>> 0)) * 2.3283064365386963e-10)) >>> 0 : 0;
      $5 = ~~$3 >>> 0;
      break label$15;
     }
     $0 = -2147483648;
    }
    HEAP32[$1 + 60 >> 2] = $5;
    break label$1;
   }
   HEAP32[$1 + 60 >> 2] = 0;
   break label$1;
  }
  label$17: {
   if (!(jsvIsString(HEAP32[$1 + 56 >> 2]) & 1)) {
    break label$17;
   }
   if (!(jsvIsStringNumericInt(HEAP32[$1 + 56 >> 2], 1) & 1)) {
    break label$17;
   }
   label$18: {
    if ((jsvGetString(HEAP32[$1 + 56 >> 2], $1 + 16 | 0, 32) | 0) == 32) {
     jsExceptionHere(1, 116539, 0);
     break label$18;
    }
    $0 = stringToInt($1 + 16 | 0);
    HEAP32[$1 + 60 >> 2] = $0;
    break label$1;
   }
  }
  HEAP32[$1 + 60 >> 2] = 0;
 }
 __stack_pointer = $1 - -64 | 0;
 return HEAP32[$1 + 60 >> 2];
}

function jspeStatementDoOrWhile($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 160 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 155 | 0] = $0;
 HEAP8[$1 + 147 | 0] = 1;
 HEAP8[$1 + 146 | 0] = 0;
 HEAP8[$1 + 103 | 0] = (HEAP32[86758] & 512) != 0;
 label$1: {
  label$2: {
   if (HEAP8[$1 + 155 | 0] & 1) {
    jslGetNextToken();
    jslCharPosFromLex($1 + 104 | 0);
    if (!(jslMatch(40) & 1)) {
     jslCharPosFree($1 + 104 | 0);
     break label$1;
    }
    HEAP32[$1 + 148 >> 2] = jspeExpression();
    if ((HEAP32[86758] & 63) == 1) {
     $2 = jsvGetBoolAndUnLock(jsvSkipName(HEAP32[$1 + 148 >> 2]));
    }
    HEAP8[$1 + 147 | 0] = $2 & 1;
    jsvUnLock(HEAP32[$1 + 148 >> 2]);
    jslCharPosFromLex($1 + 56 | 0);
    if (!(jslMatch(41) & 1)) {
     jslCharPosFree($1 + 56 | 0);
     jslCharPosFree($1 + 104 | 0);
     break label$1;
    }
    break label$2;
   }
   jslCharPosFromLex($1 + 56 | 0);
   if (!(jslMatch(165) & 1)) {
    jslCharPosFree($1 + 56 | 0);
    break label$1;
   }
  }
  HEAP32[$1 + 52 >> 2] = HEAP32[86758];
  if (!(HEAP8[$1 + 147 | 0] & 1)) {
   jspSetNoExecute();
  }
  HEAP32[86758] = HEAP32[86758] | 512;
  jsvUnLock(jspeBlockOrStatement());
  if (!(HEAP8[$1 + 103 | 0] & 1)) {
   HEAP32[86758] = HEAP32[86758] & -513;
  }
  HEAP8[$1 + 146 | 0] = jspeCheckBreakContinue() & 1 | HEAP8[$1 + 146 | 0] & 1;
  if (!(HEAP8[$1 + 147 | 0] & 1)) {
   HEAP32[86758] = HEAP32[86758] & -1664 | HEAP32[$1 + 52 >> 2] & 1663;
  }
  if (!(HEAP8[$1 + 155 | 0] & 1)) {
   if (!(jslMatch(166) & 1)) {
    jslCharPosFree($1 + 56 | 0);
    break label$1;
   }
   jslCharPosFromLex($1 + 104 | 0);
   if (!(jslMatch(40) & 1)) {
    jslCharPosFree($1 + 56 | 0);
    jslCharPosFree($1 + 104 | 0);
    break label$1;
   }
   HEAP32[$1 + 148 >> 2] = jspeExpression();
   if ((HEAP32[86758] & 63) == 1) {
    $3 = jsvGetBoolAndUnLock(jsvSkipName(HEAP32[$1 + 148 >> 2]));
   }
   HEAP8[$1 + 147 | 0] = $3 & 1;
   jsvUnLock(HEAP32[$1 + 148 >> 2]);
   if (!(jslMatch(41) & 1)) {
    jslCharPosFree($1 + 56 | 0);
    jslCharPosFree($1 + 104 | 0);
    break label$1;
   }
  }
  jslCharPosNew($1 + 8 | 0, HEAP32[HEAP32[44743] + 84 >> 2], HEAP32[HEAP32[44743] + 4 >> 2]);
  HEAP32[$1 + 4 >> 2] = 0;
  while (1) {
   $0 = 0;
   $0 = HEAP8[$1 + 146 | 0] & 1 ? $0 : HEAPU8[$1 + 147 | 0];
   if ($0 & 1) {
    if (HEAP32[$1 + 4 >> 2] ? 1 : HEAP8[$1 + 155 | 0] & 1) {
     jslSeekToP($1 + 104 | 0);
     HEAP32[$1 + 148 >> 2] = jspeExpression();
     $0 = 0;
     if ((HEAP32[86758] & 63) == 1) {
      $0 = jsvGetBoolAndUnLock(jsvSkipName(HEAP32[$1 + 148 >> 2]));
     }
     HEAP8[$1 + 147 | 0] = $0 & 1;
     jsvUnLock(HEAP32[$1 + 148 >> 2]);
    }
    if (HEAP8[$1 + 147 | 0] & 1) {
     jslSeekToP($1 + 56 | 0);
     HEAP32[86758] = HEAP32[86758] | 512;
     jspDebuggerLoopIfCtrlC();
     jsvUnLock(jspeBlockOrStatement());
     if (!(HEAP8[$1 + 103 | 0] & 1)) {
      HEAP32[86758] = HEAP32[86758] & -513;
     }
     HEAP8[$1 + 146 | 0] = jspeCheckBreakContinue() & 1 | HEAP8[$1 + 146 | 0] & 1;
    }
    HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
    continue;
   }
   break;
  }
  jslSeekToP($1 + 8 | 0);
  jslCharPosFree($1 + 104 | 0);
  jslCharPosFree($1 + 56 | 0);
  jslCharPosFree($1 + 8 | 0);
 }
 HEAP32[$1 + 156 >> 2] = 0;
 __stack_pointer = $1 + 160 | 0;
 return HEAP32[$1 + 156 >> 2];
}

function tflite__ops__micro__conv__EvalFloat_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteConvParams__2c_20tflite__ops__micro__conv__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__2c_20TfLiteEvalTensor__2c_20TfLiteEvalTensor__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 var $10 = 0;
 $10 = __stack_pointer - 224 | 0;
 __stack_pointer = $10;
 HEAP32[$10 + 220 >> 2] = $0;
 HEAP32[$10 + 216 >> 2] = $1;
 HEAP32[$10 + 212 >> 2] = $2;
 HEAP32[$10 + 208 >> 2] = $3;
 HEAP32[$10 + 204 >> 2] = $4;
 HEAP32[$10 + 200 >> 2] = $5;
 HEAP32[$10 + 196 >> 2] = $6;
 HEAP32[$10 + 192 >> 2] = $7;
 HEAP32[$10 + 188 >> 2] = $8;
 HEAP32[$10 + 184 >> 2] = $9;
 void_20tflite__CalculateActivationRange_float__28TfLiteFusedActivation_2c_20float__2c_20float__29(HEAP32[HEAP32[$10 + 212 >> 2] + 12 >> 2], $10 + 180 | 0, $10 + 176 | 0);
 HEAP8[$10 + 120 | 0] = tflite__ops__micro__conv__RuntimePaddingType_28TfLitePadding_29(HEAP32[HEAP32[$10 + 212 >> 2] >> 2]);
 HEAP16[$10 + 122 >> 1] = HEAP32[HEAP32[$10 + 208 >> 2] >> 2];
 HEAP16[$10 + 124 >> 1] = HEAP32[HEAP32[$10 + 208 >> 2] + 4 >> 2];
 HEAP16[$10 + 130 >> 1] = HEAP32[HEAP32[$10 + 212 >> 2] + 4 >> 2];
 HEAP16[$10 + 132 >> 1] = HEAP32[HEAP32[$10 + 212 >> 2] + 8 >> 2];
 HEAP16[$10 + 134 >> 1] = HEAP32[HEAP32[$10 + 212 >> 2] + 16 >> 2];
 HEAP16[$10 + 136 >> 1] = HEAP32[HEAP32[$10 + 212 >> 2] + 20 >> 2];
 HEAPF32[$10 + 168 >> 2] = HEAPF32[$10 + 180 >> 2];
 HEAPF32[$10 + 172 >> 2] = HEAPF32[$10 + 176 >> 2];
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($10 + 96 | 0, HEAP32[$10 + 204 >> 2]);
 $0 = float_20const__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor_20const__29(HEAP32[$10 + 204 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($10 + 72 | 0, HEAP32[$10 + 200 >> 2]);
 $1 = float_20const__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor_20const__29(HEAP32[$10 + 200 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($10 + 48 | 0, HEAP32[$10 + 196 >> 2]);
 $2 = float_20const__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor_20const__29(HEAP32[$10 + 196 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($10 + 24 | 0, HEAP32[$10 + 184 >> 2]);
 $3 = float__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor__29(HEAP32[$10 + 184 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($10, HEAP32[$10 + 192 >> 2]);
 tflite__reference_ops__Conv_28tflite__ConvParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__2c_20tflite__RuntimeShape_20const__2c_20float__29($10 + 120 | 0, $10 + 96 | 0, $0, $10 + 72 | 0, $1, $10 + 48 | 0, $2, $10 + 24 | 0, $3, $10, float__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor__29(HEAP32[$10 + 192 >> 2]));
 tflite__RuntimeShape___RuntimeShape_28_29($10);
 tflite__RuntimeShape___RuntimeShape_28_29($10 + 24 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($10 + 48 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($10 + 72 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($10 + 96 | 0);
 __stack_pointer = $10 + 224 | 0;
}

function tflite__ops__micro__depthwise_conv__EvalQuantized_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteDepthwiseConvParams__2c_20tflite__ops__micro__depthwise_conv___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0;
 $8 = __stack_pointer - 208 | 0;
 __stack_pointer = $8;
 HEAP32[$8 + 204 >> 2] = $0;
 HEAP32[$8 + 200 >> 2] = $1;
 HEAP32[$8 + 196 >> 2] = $2;
 HEAP32[$8 + 192 >> 2] = $3;
 HEAP32[$8 + 188 >> 2] = $4;
 HEAP32[$8 + 184 >> 2] = $5;
 HEAP32[$8 + 180 >> 2] = $6;
 HEAP32[$8 + 176 >> 2] = $7;
 HEAP32[$8 + 172 >> 2] = 0 - HEAP32[HEAP32[$8 + 192 >> 2] + 16 >> 2];
 HEAP32[$8 + 168 >> 2] = 0 - HEAP32[HEAP32[$8 + 192 >> 2] + 20 >> 2];
 HEAP32[$8 + 164 >> 2] = HEAP32[HEAP32[$8 + 192 >> 2] + 24 >> 2];
 HEAP8[$8 + 96 | 0] = 1;
 HEAP16[$8 + 98 >> 1] = HEAP32[HEAP32[$8 + 192 >> 2] >> 2];
 HEAP16[$8 + 100 >> 1] = HEAP32[HEAP32[$8 + 192 >> 2] + 4 >> 2];
 HEAP16[$8 + 106 >> 1] = HEAP32[HEAP32[$8 + 196 >> 2] + 4 >> 2];
 HEAP16[$8 + 108 >> 1] = HEAP32[HEAP32[$8 + 196 >> 2] + 8 >> 2];
 HEAP16[$8 + 110 >> 1] = HEAP32[HEAP32[$8 + 196 >> 2] + 20 >> 2];
 HEAP16[$8 + 112 >> 1] = HEAP32[HEAP32[$8 + 196 >> 2] + 24 >> 2];
 HEAP16[$8 + 114 >> 1] = HEAP32[HEAP32[$8 + 196 >> 2] + 12 >> 2];
 HEAP32[$8 + 136 >> 2] = HEAP32[HEAP32[$8 + 192 >> 2] + 44 >> 2];
 HEAP32[$8 + 140 >> 2] = HEAP32[HEAP32[$8 + 192 >> 2] + 48 >> 2];
 HEAP32[$8 + 116 >> 2] = HEAP32[$8 + 172 >> 2];
 HEAP32[$8 + 120 >> 2] = HEAP32[$8 + 168 >> 2];
 HEAP32[$8 + 124 >> 2] = HEAP32[$8 + 164 >> 2];
 HEAP32[$8 + 128 >> 2] = HEAP32[HEAP32[$8 + 192 >> 2] + 28 >> 2];
 HEAP32[$8 + 132 >> 2] = 0 - HEAP32[HEAP32[$8 + 192 >> 2] + 32 >> 2];
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($8 + 72 | 0, HEAP32[$8 + 188 >> 2]);
 $0 = unsigned_20char_20const__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor_20const__29(HEAP32[$8 + 188 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($8 + 48 | 0, HEAP32[$8 + 184 >> 2]);
 $1 = unsigned_20char_20const__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor_20const__29(HEAP32[$8 + 184 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($8 + 24 | 0, HEAP32[$8 + 180 >> 2]);
 $2 = int_20const__20tflite__micro__GetTensorData_int__28TfLiteEvalTensor_20const__29(HEAP32[$8 + 180 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($8, HEAP32[$8 + 176 >> 2]);
 tflite__reference_ops__DepthwiseConv_28tflite__DepthwiseParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($8 + 96 | 0, $8 + 72 | 0, $0, $8 + 48 | 0, $1, $8 + 24 | 0, $2, $8, unsigned_20char__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor__29(HEAP32[$8 + 176 >> 2]));
 tflite__RuntimeShape___RuntimeShape_28_29($8);
 tflite__RuntimeShape___RuntimeShape_28_29($8 + 24 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($8 + 48 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($8 + 72 | 0);
 __stack_pointer = $8 + 208 | 0;
}

function jswrap_graphics_quadraticBezier($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 160 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 152 >> 2] = $0;
 HEAP32[$3 + 148 >> 2] = $1;
 HEAP32[$3 + 144 >> 2] = $2;
 HEAP32[$3 + 140 >> 2] = jsvNewEmptyArray();
 label$1: {
  if (!HEAP32[$3 + 140 >> 2]) {
   HEAP32[$3 + 156 >> 2] = 0;
   break label$1;
  }
  if ((jsvGetArrayLength(HEAP32[$3 + 148 >> 2]) | 0) != 6) {
   HEAP32[$3 + 156 >> 2] = HEAP32[$3 + 140 >> 2];
   break label$1;
  }
  HEAP32[$3 + 136 >> 2] = 5;
  HEAP32[$3 + 108 >> 2] = 0;
  jsvIteratorNew($3 + 48 | 0, HEAP32[$3 + 148 >> 2], 1);
  HEAP32[$3 + 44 >> 2] = 0;
  while (1) {
   if (HEAP32[$3 + 44 >> 2] < 6) {
    $0 = jsvIteratorGetIntegerValue($3 + 48 | 0);
    HEAP32[($3 + 112 | 0) + (HEAP32[$3 + 44 >> 2] << 2) >> 2] = $0;
    jsvIteratorNext($3 + 48 | 0);
    HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 44 >> 2] + 1;
    continue;
   }
   break;
  }
  jsvIteratorFree($3 + 48 | 0);
  if (jsvIsObject(HEAP32[$3 + 144 >> 2]) & 1) {
   HEAP32[$3 + 108 >> 2] = jsvObjectGetIntegerChild(HEAP32[$3 + 144 >> 2], 112717);
  }
  HEAP32[$3 + 40 >> 2] = 4096;
  HEAP32[$3 + 36 >> 2] = 12;
  HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 112 >> 2] - HEAP32[$3 + 128 >> 2];
  if (HEAP32[$3 + 32 >> 2] < 0) {
   HEAP32[$3 + 32 >> 2] = 0 - HEAP32[$3 + 32 >> 2];
  }
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 116 >> 2] - HEAP32[$3 + 132 >> 2];
  if (HEAP32[$3 + 28 >> 2] < 0) {
   HEAP32[$3 + 28 >> 2] = 0 - HEAP32[$3 + 28 >> 2];
  }
  if (HEAP32[$3 + 32 >> 2] < HEAP32[$3 + 28 >> 2]) {
   $0 = HEAP32[$3 + 32 >> 2];
  } else {
   $0 = HEAP32[$3 + 28 >> 2];
  }
  HEAP32[$3 + 24 >> 2] = $0;
  if (!HEAP32[$3 + 24 >> 2]) {
   HEAP32[$3 + 24 >> 2] = 1;
  }
  HEAP32[$3 + 20 >> 2] = (HEAP32[$3 + 136 >> 2] << 12) / HEAP32[$3 + 24 >> 2];
  if (HEAP32[$3 + 20 >> 2] >= 4096) {
   HEAP32[$3 + 20 >> 2] = 1365;
  }
  if (HEAP32[$3 + 20 >> 2] < 409) {
   HEAP32[$3 + 20 >> 2] = 409;
  }
  if (HEAP32[$3 + 108 >> 2] > 0) {
   HEAP32[$3 + 20 >> 2] = 4096 / HEAP32[$3 + 108 >> 2];
  }
  jsvArrayPush2Int(HEAP32[$3 + 140 >> 2], HEAP32[$3 + 112 >> 2], HEAP32[$3 + 116 >> 2]);
  HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 20 >> 2];
  while (1) {
   if (HEAP32[$3 + 16 >> 2] <= 4096) {
    HEAP32[$3 + 12 >> 2] = Math_imul(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 16 >> 2]) >> 12;
    HEAP32[$3 + 8 >> 2] = Math_imul(4096 - HEAP32[$3 + 16 >> 2] | 0, 4096 - HEAP32[$3 + 16 >> 2] | 0) >> 12;
    HEAP32[$3 + 4 >> 2] = Math_imul(HEAP32[$3 + 16 >> 2], 4096 - HEAP32[$3 + 16 >> 2] << 1) >> 12;
    jsvArrayPush2Int(HEAP32[$3 + 140 >> 2], ((Math_imul(HEAP32[$3 + 112 >> 2], HEAP32[$3 + 8 >> 2]) + Math_imul(HEAP32[$3 + 120 >> 2], HEAP32[$3 + 4 >> 2]) | 0) + Math_imul(HEAP32[$3 + 128 >> 2], HEAP32[$3 + 12 >> 2]) | 0) + 2048 >> 12, ((Math_imul(HEAP32[$3 + 116 >> 2], HEAP32[$3 + 8 >> 2]) + Math_imul(HEAP32[$3 + 124 >> 2], HEAP32[$3 + 4 >> 2]) | 0) + Math_imul(HEAP32[$3 + 132 >> 2], HEAP32[$3 + 12 >> 2]) | 0) + 2048 >> 12);
    HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 20 >> 2] + HEAP32[$3 + 16 >> 2];
    continue;
   }
   break;
  }
  jsvArrayPush2Int(HEAP32[$3 + 140 >> 2], HEAP32[$3 + 128 >> 2], HEAP32[$3 + 132 >> 2]);
  HEAP32[$3 + 156 >> 2] = HEAP32[$3 + 140 >> 2];
 }
 __stack_pointer = $3 + 160 | 0;
 return HEAP32[$3 + 156 >> 2];
}

function jswrap_pipe($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 if (!(!HEAP32[$3 + 44 >> 2] | !HEAP32[$3 + 40 >> 2])) {
  jsvLockAgain(HEAP32[$3 + 44 >> 2]);
  HEAP32[$3 + 32 >> 2] = jspNewObject(0, 120003);
  HEAP32[$3 + 28 >> 2] = pipeGetArray(1);
  if (!(!HEAP32[$3 + 32 >> 2] | !HEAP32[$3 + 28 >> 2])) {
   if (jsvIsString(HEAP32[$3 + 44 >> 2]) & 1) {
    HEAP32[$3 + 24 >> 2] = jspExecuteJSFunction(128063, 0, 1, $3 + 44 | 0);
    jsvUnLock(HEAP32[$3 + 44 >> 2]);
    HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 24 >> 2];
   }
   HEAP32[$3 + 20 >> 2] = jspGetNamedField(HEAP32[$3 + 44 >> 2], 122107, 0);
   HEAP32[$3 + 16 >> 2] = jspGetNamedField(HEAP32[$3 + 40 >> 2], 119628, 0);
   label$5: {
    if (jsvIsFunction(HEAP32[$3 + 20 >> 2]) & 1) {
     if (jsvIsFunction(HEAP32[$3 + 16 >> 2]) & 1) {
      HEAP32[$3 + 12 >> 2] = 64;
      HEAP8[$3 + 11 | 0] = 1;
      label$8: {
       if (jsvIsObject(HEAP32[$3 + 36 >> 2]) & 1) {
        HEAP32[$3 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 36 >> 2], 119637);
        if (HEAP32[$3 + 4 >> 2]) {
         jsvObjectSetChild(HEAP32[$3 + 32 >> 2], 119634, HEAP32[$3 + 4 >> 2]);
         jsvUnLock(HEAP32[$3 + 4 >> 2]);
        }
        HEAP32[$3 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 36 >> 2], 120899);
        if (HEAP32[$3 + 4 >> 2]) {
         HEAP8[$3 + 11 | 0] = jsvGetBoolAndUnLock(HEAP32[$3 + 4 >> 2]) & 1;
        }
        HEAP32[$3 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 36 >> 2], 119318);
        if (HEAP32[$3 + 4 >> 2]) {
         label$13: {
          label$14: {
           if (!(jsvIsNumeric(HEAP32[$3 + 4 >> 2]) & 1)) {
            break label$14;
           }
           if ((jsvGetInteger(HEAP32[$3 + 4 >> 2]) | 0) <= 0) {
            break label$14;
           }
           HEAP32[$3 + 12 >> 2] = jsvGetInteger(HEAP32[$3 + 4 >> 2]);
           break label$13;
          }
          jsExceptionHere(3, 126747, 0);
         }
         jsvUnLock(HEAP32[$3 + 4 >> 2]);
        }
        break label$8;
       }
       if (!(jsvIsUndefined(HEAP32[$3 + 36 >> 2]) & 1)) {
        jsExceptionHere(3, 121638, 0);
       }
      }
      jswrap_object_addEventListener(HEAP32[$3 + 44 >> 2], 119730, 603, 32768);
      jswrap_object_addEventListener(HEAP32[$3 + 40 >> 2], 117558, 604, 8);
      jswrap_object_addEventListener(HEAP32[$3 + 40 >> 2], 119730, 605, 32768);
      jsvObjectSetChildAndUnLock(HEAP32[$3 + 32 >> 2], 119318, jsvNewFromInteger(HEAP32[$3 + 12 >> 2]));
      jsvObjectSetChildAndUnLock(HEAP32[$3 + 32 >> 2], 120899, jsvNewFromBool(HEAP8[$3 + 11 | 0] & 1));
      jsvUnLock2(jsvAddNamedChild(HEAP32[$3 + 32 >> 2], HEAP32[$3 + 44 >> 2], 120470), jsvAddNamedChild(HEAP32[$3 + 32 >> 2], HEAP32[$3 + 40 >> 2], 117517));
      jsvArrayPush(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 32 >> 2]);
      break label$5;
     }
     jsExceptionHere(1, 120720, 0);
     break label$5;
    }
    jsExceptionHere(1, 120800, 0);
   }
   jsvUnLock2(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2]);
  }
  jsvUnLock3(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 32 >> 2], HEAP32[$3 + 44 >> 2]);
 }
 __stack_pointer = $3 + 48 | 0;
}

function jsvSetValueOfName($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  if (jsvIsNameWithValue(HEAP32[$2 + 24 >> 2]) & 1) {
   label$3: {
    if (jsvIsString(HEAP32[$2 + 24 >> 2]) & 1) {
     $0 = HEAP32[$2 + 24 >> 2];
     $1 = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 65472;
     $3 = jsvGetCharactersInVar(HEAP32[$2 + 24 >> 2]) + 23 | 0;
     $0 = HEAP32[$2 + 24 >> 2];
     $1 = $1 | $3;
     HEAP8[$0 + 12 | 0] = $1;
     HEAP8[$0 + 13 | 0] = $1 >>> 8;
     break label$3;
    }
    $0 = HEAP32[$2 + 24 >> 2];
    $1 = HEAP32[$2 + 24 >> 2];
    $1 = (HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & 65472 | 15;
    HEAP8[$0 + 12 | 0] = $1;
    HEAP8[$0 + 13 | 0] = $1 >>> 8;
   }
   jsvSetFirstChild(HEAP32[$2 + 24 >> 2], 0);
   break label$1;
  }
  if (jsvGetFirstChild(HEAP32[$2 + 24 >> 2]) & 65535) {
   jsvUnRefRef(jsvGetFirstChild(HEAP32[$2 + 24 >> 2]) & 65535);
  }
 }
 label$6: {
  if (HEAP32[$2 + 20 >> 2]) {
   label$8: {
    if (jsvIsInt(HEAP32[$2 + 24 >> 2]) & 1) {
     if (!(jsvIsInt(HEAP32[$2 + 20 >> 2]) & 1)) {
      if (!(jsvIsBoolean(HEAP32[$2 + 20 >> 2]) & 1)) {
       break label$8;
      }
     }
     if (jsvIsPin(HEAP32[$2 + 20 >> 2]) & 1) {
      break label$8;
     }
     $0 = HEAP32[$2 + 20 >> 2];
     HEAP32[$2 + 16 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
     if (!(HEAP32[$2 + 16 >> 2] < -8192 | HEAP32[$2 + 16 >> 2] > 8191)) {
      $0 = HEAP32[$2 + 24 >> 2];
      $1 = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 65472;
      $3 = jsvIsInt(HEAP32[$2 + 20 >> 2]) & 1 ? 16 : 17;
      $0 = HEAP32[$2 + 24 >> 2];
      $1 = $1 | $3;
      HEAP8[$0 + 12 | 0] = $1;
      HEAP8[$0 + 13 | 0] = $1 >>> 8;
      jsvSetFirstChild(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 16 >> 2] & 65535);
      break label$6;
     }
     break label$8;
    }
    label$12: {
     if (!(jsvIsString(HEAP32[$2 + 24 >> 2]) & 1)) {
      break label$12;
     }
     if (jsvIsUTF8String(HEAP32[$2 + 24 >> 2]) & 1) {
      break label$12;
     }
     label$13: {
      if (!(jsvIsInt(HEAP32[$2 + 20 >> 2]) & 1)) {
       break label$13;
      }
      if (jsvIsPin(HEAP32[$2 + 20 >> 2]) & 1) {
       break label$13;
      }
      $0 = HEAP32[$2 + 20 >> 2];
      HEAP32[$2 + 12 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
      if (!(HEAP32[$2 + 12 >> 2] < -8192 | HEAP32[$2 + 12 >> 2] > 8191)) {
       $0 = HEAP32[$2 + 24 >> 2];
       $1 = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 65472;
       $3 = jsvGetCharactersInVar(HEAP32[$2 + 24 >> 2]) + 18 | 0;
       $0 = HEAP32[$2 + 24 >> 2];
       $1 = $1 | $3;
       HEAP8[$0 + 12 | 0] = $1;
       HEAP8[$0 + 13 | 0] = $1 >>> 8;
       jsvSetFirstChild(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 12 >> 2] & 65535);
       break label$6;
      }
     }
    }
   }
   jsvSetFirstChild(HEAP32[$2 + 24 >> 2], jsvGetRef(jsvRef(HEAP32[$2 + 20 >> 2])) & 65535);
   break label$6;
  }
  jsvSetFirstChild(HEAP32[$2 + 24 >> 2], 0);
 }
 HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 24 >> 2];
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function mbedtls_sha1_finish($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 96 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 92 >> 2] = $0;
 HEAP32[$2 + 88 >> 2] = $1;
 HEAP32[$2 + 76 >> 2] = HEAP32[HEAP32[$2 + 92 >> 2] + 4 >> 2] << 3 | HEAP32[HEAP32[$2 + 92 >> 2] >> 2] >>> 29;
 HEAP32[$2 + 72 >> 2] = HEAP32[HEAP32[$2 + 92 >> 2] >> 2] << 3;
 HEAP8[$2 + 64 | 0] = HEAP32[$2 + 76 >> 2] >>> 24;
 HEAP8[$2 + 65 | 0] = HEAP32[$2 + 76 >> 2] >>> 16;
 HEAP8[$2 + 66 | 0] = HEAP32[$2 + 76 >> 2] >>> 8;
 HEAP8[$2 + 67 | 0] = HEAP32[$2 + 76 >> 2];
 HEAP8[$2 + 68 | 0] = HEAP32[$2 + 72 >> 2] >>> 24;
 HEAP8[$2 + 69 | 0] = HEAP32[$2 + 72 >> 2] >>> 16;
 HEAP8[$2 + 70 | 0] = HEAP32[$2 + 72 >> 2] >>> 8;
 HEAP8[$2 + 71 | 0] = HEAP32[$2 + 72 >> 2];
 HEAP32[$2 + 84 >> 2] = HEAP32[HEAP32[$2 + 92 >> 2] >> 2] & 63;
 if (HEAPU32[$2 + 84 >> 2] < 56) {
  $0 = 56 - HEAP32[$2 + 84 >> 2] | 0;
 } else {
  $0 = 120 - HEAP32[$2 + 84 >> 2] | 0;
 }
 HEAP32[$2 + 80 >> 2] = $0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 56 >> 2] = 0;
 HEAP32[$2 + 60 >> 2] = 0;
 HEAP32[$2 + 48 >> 2] = 0;
 HEAP32[$2 + 52 >> 2] = 0;
 HEAP32[$2 + 40 >> 2] = 0;
 HEAP32[$2 + 44 >> 2] = 0;
 HEAP32[$2 + 32 >> 2] = 0;
 HEAP32[$2 + 36 >> 2] = 0;
 HEAP32[$2 + 24 >> 2] = 0;
 HEAP32[$2 + 28 >> 2] = 0;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP32[$2 + 20 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAP8[$2 | 0] = 128;
 mbedtls_sha1_update(HEAP32[$2 + 92 >> 2], $2, HEAP32[$2 + 80 >> 2]);
 mbedtls_sha1_update(HEAP32[$2 + 92 >> 2], $2 - -64 | 0, 8);
 HEAP8[HEAP32[$2 + 88 >> 2]] = HEAP32[HEAP32[$2 + 92 >> 2] + 8 >> 2] >>> 24;
 HEAP8[HEAP32[$2 + 88 >> 2] + 1 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 8 >> 2] >>> 16;
 HEAP8[HEAP32[$2 + 88 >> 2] + 2 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 8 >> 2] >>> 8;
 HEAP8[HEAP32[$2 + 88 >> 2] + 3 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 8 >> 2];
 HEAP8[HEAP32[$2 + 88 >> 2] + 4 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 12 >> 2] >>> 24;
 HEAP8[HEAP32[$2 + 88 >> 2] + 5 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 12 >> 2] >>> 16;
 HEAP8[HEAP32[$2 + 88 >> 2] + 6 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 12 >> 2] >>> 8;
 HEAP8[HEAP32[$2 + 88 >> 2] + 7 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 12 >> 2];
 HEAP8[HEAP32[$2 + 88 >> 2] + 8 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 16 >> 2] >>> 24;
 HEAP8[HEAP32[$2 + 88 >> 2] + 9 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 16 >> 2] >>> 16;
 HEAP8[HEAP32[$2 + 88 >> 2] + 10 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 16 >> 2] >>> 8;
 HEAP8[HEAP32[$2 + 88 >> 2] + 11 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 16 >> 2];
 HEAP8[HEAP32[$2 + 88 >> 2] + 12 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 20 >> 2] >>> 24;
 HEAP8[HEAP32[$2 + 88 >> 2] + 13 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 20 >> 2] >>> 16;
 HEAP8[HEAP32[$2 + 88 >> 2] + 14 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 20 >> 2] >>> 8;
 HEAP8[HEAP32[$2 + 88 >> 2] + 15 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 20 >> 2];
 HEAP8[HEAP32[$2 + 88 >> 2] + 16 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 24 >> 2] >>> 24;
 HEAP8[HEAP32[$2 + 88 >> 2] + 17 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 24 >> 2] >>> 16;
 HEAP8[HEAP32[$2 + 88 >> 2] + 18 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 24 >> 2] >>> 8;
 HEAP8[HEAP32[$2 + 88 >> 2] + 19 | 0] = HEAP32[HEAP32[$2 + 92 >> 2] + 24 >> 2];
 __stack_pointer = $2 + 96 | 0;
}

function jsserialSoftwareFunc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = __stack_pointer - 80 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 76 >> 2] = $0;
 HEAP32[$2 + 72 >> 2] = $1;
 HEAP32[$2 + 68 >> 2] = HEAP32[$2 + 72 >> 2];
 if (jshIsPinValid(HEAPU8[HEAP32[$2 + 68 >> 2] + 5 | 0]) & 1) {
  HEAP32[$2 + 64 >> 2] = (1 << HEAPU8[HEAP32[$2 + 68 >> 2] + 10 | 0]) - 1;
  HEAP32[$2 + 60 >> 2] = HEAPU8[HEAP32[$2 + 68 >> 2] + 10 | 0];
  HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 76 >> 2] & (1 << HEAPU8[HEAP32[$2 + 68 >> 2] + 8 | 0]) - 1 | HEAP32[$2 + 64 >> 2] << HEAPU8[HEAP32[$2 + 68 >> 2] + 8 | 0];
  HEAP32[$2 + 60 >> 2] = HEAPU8[HEAP32[$2 + 68 >> 2] + 8 | 0] + HEAP32[$2 + 60 >> 2];
  HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 64 >> 2] << 1;
  HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 60 >> 2] + 1;
  HEAP32[$2 + 56 >> 2] = jstGetUtilTimerOffset();
  $0 = HEAP32[$2 + 68 >> 2];
  $3 = jshGetTimeFromMilliseconds(1e3 / +(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)));
  HEAP32[$2 + 48 >> 2] = $3;
  $0 = i64toi32_i32$HIGH_BITS;
  HEAP32[$2 + 52 >> 2] = $0;
  label$2: {
   if (jstGetLastPinTimerTask(HEAPU8[HEAP32[$2 + 68 >> 2] + 5 | 0], $2 + 8 | 0) & 1) {
    $0 = HEAPU8[$2 + 8 | 0] | HEAPU8[$2 + 9 | 0] << 8 | (HEAPU8[$2 + 10 | 0] << 16 | HEAPU8[$2 + 11 | 0] << 24);
    $3 = $0 >> 31;
    $5 = $3;
    $3 = HEAP32[$2 + 48 >> 2];
    $4 = $3;
    $1 = $0 + $3 | 0;
    $0 = HEAP32[$2 + 52 >> 2];
    $3 = $0;
    $0 = $5;
    $0 = $3 + $0 | 0;
    HEAP32[$2 + 40 >> 2] = $1;
    $0 = $1 >>> 0 < $4 >>> 0 ? $0 + 1 | 0 : $0;
    HEAP32[$2 + 44 >> 2] = $0;
    break label$2;
   }
   $0 = jshGetTimeFromMilliseconds(1);
   HEAP32[$2 + 40 >> 2] = $0;
   $1 = i64toi32_i32$HIGH_BITS;
   HEAP32[$2 + 44 >> 2] = $1;
  }
  HEAP32[$2 + 4 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 + 60 >> 2]) {
    HEAP8[$2 + 3 | 0] = HEAP32[$2 + 64 >> 2] & 1;
    HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 64 >> 2] >> 1;
    HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 60 >> 2] - 1;
    $1 = HEAP32[$2 + 40 >> 2];
    $0 = HEAP32[$2 + 44 >> 2];
    jstPinOutputAtTime($1, $0, $2 + 56 | 0, HEAP32[$2 + 68 >> 2] + 5 | 0, 1, HEAP8[$2 + 3 | 0] & 1);
    $1 = HEAP32[$2 + 52 >> 2];
    $5 = $1;
    $0 = HEAP32[$2 + 48 >> 2];
    $1 = HEAP32[$2 + 40 >> 2];
    $4 = $1;
    $3 = $0 + $1 | 0;
    $0 = HEAP32[$2 + 44 >> 2];
    $1 = $0;
    $0 = $5;
    $1 = $1 + $0 | 0;
    HEAP32[$2 + 40 >> 2] = $3;
    $1 = $3 >>> 0 < $4 >>> 0 ? $1 + 1 | 0 : $1;
    HEAP32[$2 + 44 >> 2] = $1;
    continue;
   }
   break;
  }
  $1 = HEAP32[$2 + 40 >> 2];
  $5 = $1;
  $0 = HEAP32[$2 + 44 >> 2];
  $3 = $0;
  $0 = HEAP32[$2 + 48 >> 2];
  $6 = $0;
  $1 = HEAP32[$2 + 52 >> 2];
  $4 = $1;
  $1 = HEAP32[$2 + 4 >> 2];
  $0 = $1 >> 31;
  $7 = $0;
  $0 = $4;
  $4 = $1;
  $1 = $7;
  $1 = __wasm_i64_mul($6, $0, $4, $1);
  $4 = $1;
  $0 = i64toi32_i32$HIGH_BITS;
  $1 = $0;
  $0 = $3;
  $3 = $0 + $1 | 0;
  $0 = $5;
  $1 = $4 + $0 | 0;
  $3 = $1 >>> 0 < $4 >>> 0 ? $3 + 1 | 0 : $3;
  HEAP32[$2 + 40 >> 2] = $1;
  HEAP32[$2 + 44 >> 2] = $3;
  $3 = HEAP32[$2 + 40 >> 2];
  $0 = HEAP32[$2 + 44 >> 2];
  jstPinOutputAtTime($3, $0, $2 + 56 | 0, HEAP32[$2 + 68 >> 2] + 5 | 0, 1, 1);
 }
 __stack_pointer = $2 + 80 | 0;
}

function tflite__ParseReshape_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer + -64 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 56 >> 2] = $0;
 HEAP32[$4 + 52 >> 2] = $1;
 HEAP32[$4 + 48 >> 2] = $2;
 HEAP32[$4 + 44 >> 2] = $3;
 tflite___28anonymous_20namespace_29__CheckParsePointerParams_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29(HEAP32[$4 + 56 >> 2], HEAP32[$4 + 52 >> 2], HEAP32[$4 + 48 >> 2], HEAP32[$4 + 44 >> 2]);
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__SafeBuiltinDataAllocator_28tflite__BuiltinDataAllocator__29($4 + 40 | 0, HEAP32[$4 + 48 >> 2]);
 std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteReshapeParams__28_29($4 + 32 | 0, $4 + 40 | 0);
 label$1: {
  if (!(bool_20std____2__operator___TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20const__2c_20std__nullptr_t_29($4 + 32 | 0, 0) & 1)) {
   $0 = HEAP32[$4 + 52 >> 2];
   $1 = HEAP32[$4 + 52 >> 2];
   HEAP32[$4 >> 2] = 115968;
   tflite__ErrorReporter__ReportError_28void__2c_20char_20const__2c_20____29($0, $1, 127303, $4);
   HEAP32[$4 + 60 >> 2] = 1;
   break label$1;
  }
  HEAP32[$4 + 24 >> 2] = tflite__Operator__builtin_options_as_ReshapeOptions_28_29_20const(HEAP32[$4 + 56 >> 2]);
  if (HEAP32[$4 + 24 >> 2]) {
   HEAP32[$4 + 20 >> 2] = tflite__ReshapeOptions__new_shape_28_29_20const(HEAP32[$4 + 24 >> 2]);
   if (HEAP32[$4 + 20 >> 2]) {
    HEAP32[$4 + 16 >> 2] = tflite___28anonymous_20namespace_29__FlatBufferIntVectorToArray_28int_2c_20flatbuffers__Vector_int__20const__2c_20int__2c_20tflite__ErrorReporter__2c_20char_20const__29(32, HEAP32[$4 + 20 >> 2], std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 32 | 0), HEAP32[$4 + 52 >> 2], 120008);
    if (HEAP32[$4 + 16 >> 2]) {
     HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 16 >> 2];
     break label$1;
    }
    $0 = flatbuffers__Vector_int___size_28_29_20const(HEAP32[$4 + 20 >> 2]);
    HEAP32[std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 32 | 0) + 32 >> 2] = $0;
   }
  }
  $0 = std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($4 + 32 | 0);
  HEAP32[HEAP32[$4 + 44 >> 2] >> 2] = $0;
  HEAP32[$4 + 60 >> 2] = 0;
 }
 HEAP32[$4 + 28 >> 2] = 1;
 std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($4 + 32 | 0);
 __stack_pointer = $4 - -64 | 0;
 return HEAP32[$4 + 60 >> 2];
}

function tflite__ops__micro__reshape__ReshapeOutput_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 96 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 88 >> 2] = $0;
 HEAP32[$2 + 84 >> 2] = $1;
 HEAP32[$2 + 80 >> 2] = tflite__GetInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 88 >> 2], HEAP32[$2 + 84 >> 2], 0);
 HEAP32[$2 + 76 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 88 >> 2], HEAP32[$2 + 84 >> 2], 0);
 HEAP32[$2 + 72 >> 2] = tflite__NumElements_28TfLiteTensor_20const__29(HEAP32[$2 + 80 >> 2]);
 HEAP32[$2 + 68 >> 2] = HEAP32[HEAP32[$2 + 76 >> 2] + 20 >> 2];
 if (!((tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 84 >> 2]) | 0) != 1 | HEAP32[HEAP32[$2 + 68 >> 2] >> 2] != 1 | HEAP32[HEAP32[$2 + 68 >> 2] + 4 >> 2])) {
  HEAP32[HEAP32[$2 + 68 >> 2] >> 2] = 0;
 }
 HEAP32[$2 + 64 >> 2] = 1;
 HEAP32[$2 + 60 >> 2] = -1;
 HEAP32[$2 + 56 >> 2] = 0;
 label$2: {
  while (1) {
   if (HEAP32[$2 + 56 >> 2] < HEAP32[HEAP32[$2 + 68 >> 2] >> 2]) {
    HEAP32[$2 + 52 >> 2] = HEAP32[(HEAP32[$2 + 68 >> 2] + 4 | 0) + (HEAP32[$2 + 56 >> 2] << 2) >> 2];
    label$5: {
     if (HEAP32[$2 + 52 >> 2] == -1) {
      if (HEAP32[$2 + 60 >> 2] != -1) {
       $0 = HEAP32[HEAP32[$2 + 88 >> 2] + 20 >> 2];
       $1 = HEAP32[$2 + 88 >> 2];
       $3 = HEAP32[$2 + 60 >> 2];
       HEAP32[$2 + 12 >> 2] = -1;
       HEAP32[$2 + 8 >> 2] = $3;
       HEAP32[$2 + 4 >> 2] = 126649;
       HEAP32[$2 >> 2] = 117747;
       FUNCTION_TABLE[$0 | 0]($1, 143069, $2);
       HEAP32[$2 + 92 >> 2] = 1;
       break label$2;
      }
      HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 56 >> 2];
      break label$5;
     }
     HEAP32[$2 + 64 >> 2] = Math_imul(HEAP32[$2 + 52 >> 2], HEAP32[$2 + 64 >> 2]);
    }
    HEAP32[$2 + 56 >> 2] = HEAP32[$2 + 56 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP32[$2 + 60 >> 2] != -1) {
   HEAP32[(HEAP32[$2 + 68 >> 2] + 4 | 0) + (HEAP32[$2 + 60 >> 2] << 2) >> 2] = HEAP32[$2 + 72 >> 2] / HEAP32[$2 + 64 >> 2];
   HEAP32[$2 + 64 >> 2] = Math_imul(HEAP32[(HEAP32[$2 + 68 >> 2] + 4 | 0) + (HEAP32[$2 + 60 >> 2] << 2) >> 2], HEAP32[$2 + 64 >> 2]);
  }
  if (HEAP32[HEAP32[$2 + 80 >> 2] + 28 >> 2] != HEAP32[HEAP32[$2 + 76 >> 2] + 28 >> 2]) {
   $0 = HEAP32[HEAP32[$2 + 88 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 88 >> 2];
   $3 = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 80 >> 2] + 28 >> 2]);
   HEAP32[$2 + 28 >> 2] = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 76 >> 2] + 28 >> 2]);
   HEAP32[$2 + 24 >> 2] = $3;
   HEAP32[$2 + 20 >> 2] = 119866;
   HEAP32[$2 + 16 >> 2] = 119879;
   FUNCTION_TABLE[$0 | 0]($1, 142671, $2 + 16 | 0);
   HEAP32[$2 + 92 >> 2] = 1;
   break label$2;
  }
  if (HEAP32[$2 + 72 >> 2] != HEAP32[$2 + 64 >> 2]) {
   $0 = HEAP32[HEAP32[$2 + 88 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 88 >> 2];
   $3 = HEAP32[$2 + 72 >> 2];
   HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 64 >> 2];
   HEAP32[$2 + 40 >> 2] = $3;
   HEAP32[$2 + 36 >> 2] = 114980;
   HEAP32[$2 + 32 >> 2] = 115e3;
   FUNCTION_TABLE[$0 | 0]($1, 143069, $2 + 32 | 0);
   HEAP32[$2 + 92 >> 2] = 1;
   break label$2;
  }
  HEAP32[$2 + 92 >> 2] = 0;
 }
 __stack_pointer = $2 + 96 | 0;
 return HEAP32[$2 + 92 >> 2];
}

function tflite___28anonymous_20namespace_29__CalculateActivationRangeQuantizedImpl_28TfLiteFusedActivation_2c_20int_2c_20int_2c_20TfLiteTensor__2c_20int__2c_20int__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer + -64 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 60 >> 2] = $0;
 HEAP32[$6 + 56 >> 2] = $1;
 HEAP32[$6 + 52 >> 2] = $2;
 HEAP32[$6 + 48 >> 2] = $3;
 HEAP32[$6 + 44 >> 2] = $4;
 HEAP32[$6 + 40 >> 2] = $5;
 HEAPF32[$6 + 36 >> 2] = HEAPF32[HEAP32[$6 + 48 >> 2] + 8 >> 2];
 HEAP32[$6 + 32 >> 2] = HEAP32[HEAP32[$6 + 48 >> 2] + 12 >> 2];
 HEAPF32[$6 + 24 >> 2] = HEAPF32[$6 + 36 >> 2];
 HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 32 >> 2];
 label$1: {
  if (HEAP32[$6 + 60 >> 2] == 1) {
   HEAP32[$6 + 20 >> 2] = tflite___28anonymous_20namespace_29__CalculateActivationRangeQuantizedImpl_28TfLiteFusedActivation_2c_20int_2c_20int_2c_20TfLiteTensor__2c_20int__2c_20int__29__$_0__operator_28_29_28float_29_20const($6 + 24 | 0, Math_fround(0));
   $0 = int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($6 + 56 | 0, $6 + 20 | 0);
   HEAP32[HEAP32[$6 + 44 >> 2] >> 2] = HEAP32[$0 >> 2];
   HEAP32[HEAP32[$6 + 40 >> 2] >> 2] = HEAP32[$6 + 52 >> 2];
   break label$1;
  }
  label$3: {
   if (HEAP32[$6 + 60 >> 2] == 3) {
    HEAP32[$6 + 16 >> 2] = tflite___28anonymous_20namespace_29__CalculateActivationRangeQuantizedImpl_28TfLiteFusedActivation_2c_20int_2c_20int_2c_20TfLiteTensor__2c_20int__2c_20int__29__$_0__operator_28_29_28float_29_20const($6 + 24 | 0, Math_fround(0));
    $0 = int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($6 + 56 | 0, $6 + 16 | 0);
    HEAP32[HEAP32[$6 + 44 >> 2] >> 2] = HEAP32[$0 >> 2];
    HEAP32[$6 + 12 >> 2] = tflite___28anonymous_20namespace_29__CalculateActivationRangeQuantizedImpl_28TfLiteFusedActivation_2c_20int_2c_20int_2c_20TfLiteTensor__2c_20int__2c_20int__29__$_0__operator_28_29_28float_29_20const($6 + 24 | 0, Math_fround(6));
    $0 = int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($6 + 52 | 0, $6 + 12 | 0);
    HEAP32[HEAP32[$6 + 40 >> 2] >> 2] = HEAP32[$0 >> 2];
    break label$3;
   }
   label$5: {
    if (HEAP32[$6 + 60 >> 2] == 2) {
     HEAP32[$6 + 8 >> 2] = tflite___28anonymous_20namespace_29__CalculateActivationRangeQuantizedImpl_28TfLiteFusedActivation_2c_20int_2c_20int_2c_20TfLiteTensor__2c_20int__2c_20int__29__$_0__operator_28_29_28float_29_20const($6 + 24 | 0, Math_fround(-1));
     $0 = int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($6 + 56 | 0, $6 + 8 | 0);
     HEAP32[HEAP32[$6 + 44 >> 2] >> 2] = HEAP32[$0 >> 2];
     HEAP32[$6 + 4 >> 2] = tflite___28anonymous_20namespace_29__CalculateActivationRangeQuantizedImpl_28TfLiteFusedActivation_2c_20int_2c_20int_2c_20TfLiteTensor__2c_20int__2c_20int__29__$_0__operator_28_29_28float_29_20const($6 + 24 | 0, Math_fround(1));
     $0 = int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($6 + 52 | 0, $6 + 4 | 0);
     HEAP32[HEAP32[$6 + 40 >> 2] >> 2] = HEAP32[$0 >> 2];
     break label$5;
    }
    HEAP32[HEAP32[$6 + 44 >> 2] >> 2] = HEAP32[$6 + 56 >> 2];
    HEAP32[HEAP32[$6 + 40 >> 2] >> 2] = HEAP32[$6 + 52 >> 2];
   }
  }
 }
 __stack_pointer = $6 - -64 | 0;
}

function graphicsDrawLine($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer + -64 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 60 >> 2] = $0;
 HEAP32[$5 + 56 >> 2] = $1;
 HEAP32[$5 + 52 >> 2] = $2;
 HEAP32[$5 + 48 >> 2] = $3;
 HEAP32[$5 + 44 >> 2] = $4;
 graphicsToDeviceCoordinates(HEAP32[$5 + 60 >> 2], $5 + 56 | 0, $5 + 52 | 0);
 graphicsToDeviceCoordinates(HEAP32[$5 + 60 >> 2], $5 + 48 | 0, $5 + 44 | 0);
 HEAP32[$5 + 40 >> 2] = HEAP32[$5 + 48 >> 2] - HEAP32[$5 + 56 >> 2];
 HEAP32[$5 + 36 >> 2] = HEAP32[$5 + 44 >> 2] - HEAP32[$5 + 52 >> 2];
 label$1: {
  if (HEAP32[$5 + 40 >> 2] < 0) {
   HEAP32[$5 + 40 >> 2] = 0 - HEAP32[$5 + 40 >> 2];
   break label$1;
  }
  if (!HEAP32[$5 + 40 >> 2]) {
   HEAP32[$5 + 40 >> 2] = 1;
  }
 }
 label$4: {
  if (HEAP32[$5 + 36 >> 2] < 0) {
   HEAP32[$5 + 36 >> 2] = 0 - HEAP32[$5 + 36 >> 2];
   break label$4;
  }
  if (!HEAP32[$5 + 36 >> 2]) {
   HEAP32[$5 + 36 >> 2] = 1;
  }
 }
 label$7: {
  if (HEAP32[$5 + 40 >> 2] > HEAP32[$5 + 36 >> 2]) {
   if (HEAP32[$5 + 56 >> 2] > HEAP32[$5 + 48 >> 2]) {
    HEAP32[$5 + 32 >> 2] = HEAP32[$5 + 56 >> 2];
    HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 48 >> 2];
    HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 32 >> 2];
    HEAP32[$5 + 32 >> 2] = HEAP32[$5 + 52 >> 2];
    HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 44 >> 2];
    HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 32 >> 2];
   }
   HEAP32[$5 + 28 >> 2] = (HEAP32[$5 + 52 >> 2] << 8) + 128;
   HEAP32[$5 + 24 >> 2] = (HEAP32[$5 + 44 >> 2] - HEAP32[$5 + 52 >> 2] << 8) / HEAP32[$5 + 40 >> 2];
   HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 56 >> 2];
   while (1) {
    if (HEAP32[$5 + 20 >> 2] <= HEAP32[$5 + 48 >> 2]) {
     $0 = HEAP32[$5 + 60 >> 2];
     graphicsSetPixelDevice(HEAP32[$5 + 60 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 28 >> 2] >> 8, HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
     HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 24 >> 2] + HEAP32[$5 + 28 >> 2];
     HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 20 >> 2] + 1;
     continue;
    }
    break;
   }
   break label$7;
  }
  if (HEAP32[$5 + 52 >> 2] > HEAP32[$5 + 44 >> 2]) {
   HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 56 >> 2];
   HEAP32[$5 + 56 >> 2] = HEAP32[$5 + 48 >> 2];
   HEAP32[$5 + 48 >> 2] = HEAP32[$5 + 16 >> 2];
   HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 52 >> 2];
   HEAP32[$5 + 52 >> 2] = HEAP32[$5 + 44 >> 2];
   HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 16 >> 2];
  }
  HEAP32[$5 + 12 >> 2] = (HEAP32[$5 + 56 >> 2] << 8) + 128;
  HEAP32[$5 + 8 >> 2] = (HEAP32[$5 + 48 >> 2] - HEAP32[$5 + 56 >> 2] << 8) / HEAP32[$5 + 36 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 52 >> 2];
  while (1) {
   if (HEAP32[$5 + 4 >> 2] <= HEAP32[$5 + 44 >> 2]) {
    $0 = HEAP32[$5 + 60 >> 2];
    graphicsSetPixelDevice(HEAP32[$5 + 60 >> 2], HEAP32[$5 + 12 >> 2] >> 8, HEAP32[$5 + 4 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
    HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 8 >> 2] + HEAP32[$5 + 12 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] + 1;
    continue;
   }
   break;
  }
 }
 __stack_pointer = $5 - -64 | 0;
}

function tflite__ops__micro__fully_connected__Eval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1: {
  if (!HEAP32[HEAP32[$2 + 36 >> 2] + 12 >> 2]) {
   break label$1;
  }
 }
 HEAP32[$2 + 32 >> 2] = HEAP32[HEAP32[$2 + 36 >> 2] + 12 >> 2];
 HEAP32[$2 + 28 >> 2] = tflite__micro__GetEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], 0);
 HEAP32[$2 + 24 >> 2] = tflite__micro__GetEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], 1);
 HEAP32[$2 + 20 >> 2] = tflite__micro__GetEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], 2);
 HEAP32[$2 + 16 >> 2] = tflite__micro__GetEvalOutput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], 0);
 label$2: {
  if (!HEAP32[HEAP32[$2 + 36 >> 2] + 8 >> 2]) {
   break label$2;
  }
 }
 HEAP32[$2 + 12 >> 2] = HEAP32[HEAP32[$2 + 36 >> 2] + 8 >> 2];
 label$3: {
  label$4: {
   switch (HEAP32[HEAP32[$2 + 28 >> 2] + 8 >> 2] - 1 | 0) {
   case 0:
    HEAP32[$2 + 44 >> 2] = tflite__ops__micro__fully_connected__EvalFloat_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteFusedActivation_2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[HEAP32[$2 + 32 >> 2] >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 16 >> 2]);
    break label$3;

   case 8:
    HEAP32[$2 + 44 >> 2] = tflite__ops__micro__fully_connected__EvalQuantizedInt8_28TfLiteContext__2c_20TfLiteNode__2c_20tflite__ops__micro__fully_connected___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 16 >> 2]);
    break label$3;

   case 2:
    HEAP32[$2 + 44 >> 2] = tflite__ops__micro__fully_connected__EvalQuantized_28TfLiteContext__2c_20TfLiteNode__2c_20tflite__ops__micro__fully_connected___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 16 >> 2]);
    break label$3;

   default:
    break label$4;
   }
  }
  $0 = HEAP32[HEAP32[$2 + 40 >> 2] + 20 >> 2];
  $1 = HEAP32[$2 + 40 >> 2];
  $3 = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 28 >> 2] + 8 >> 2]);
  HEAP32[$2 + 4 >> 2] = HEAP32[HEAP32[$2 + 28 >> 2] + 8 >> 2];
  HEAP32[$2 >> 2] = $3;
  FUNCTION_TABLE[$0 | 0]($1, 127536, $2);
  HEAP32[$2 + 44 >> 2] = 1;
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function tflite__ops__micro__depthwise_conv__EvalQuantizedPerChannel_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteDepthwiseConvParams__2c_20tflite__ops__micro__depthwise_conv___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0;
 $8 = __stack_pointer - 192 | 0;
 __stack_pointer = $8;
 HEAP32[$8 + 188 >> 2] = $0;
 HEAP32[$8 + 184 >> 2] = $1;
 HEAP32[$8 + 180 >> 2] = $2;
 HEAP32[$8 + 176 >> 2] = $3;
 HEAP32[$8 + 172 >> 2] = $4;
 HEAP32[$8 + 168 >> 2] = $5;
 HEAP32[$8 + 164 >> 2] = $6;
 HEAP32[$8 + 160 >> 2] = $7;
 HEAP8[$8 + 96 | 0] = 1;
 HEAP16[$8 + 98 >> 1] = HEAP32[HEAP32[$8 + 176 >> 2] >> 2];
 HEAP16[$8 + 100 >> 1] = HEAP32[HEAP32[$8 + 176 >> 2] + 4 >> 2];
 HEAP16[$8 + 106 >> 1] = HEAP32[HEAP32[$8 + 180 >> 2] + 4 >> 2];
 HEAP16[$8 + 108 >> 1] = HEAP32[HEAP32[$8 + 180 >> 2] + 8 >> 2];
 HEAP16[$8 + 110 >> 1] = HEAP32[HEAP32[$8 + 180 >> 2] + 20 >> 2];
 HEAP16[$8 + 112 >> 1] = HEAP32[HEAP32[$8 + 180 >> 2] + 24 >> 2];
 HEAP16[$8 + 114 >> 1] = HEAP32[HEAP32[$8 + 180 >> 2] + 12 >> 2];
 HEAP32[$8 + 116 >> 2] = 0 - HEAP32[HEAP32[$8 + 176 >> 2] + 16 >> 2];
 HEAP32[$8 + 120 >> 2] = 0;
 HEAP32[$8 + 124 >> 2] = HEAP32[HEAP32[$8 + 176 >> 2] + 24 >> 2];
 HEAP32[$8 + 136 >> 2] = std____2__numeric_limits_signed_20char___min_28_29() << 24 >> 24;
 HEAP32[$8 + 140 >> 2] = std____2__numeric_limits_signed_20char___max_28_29() << 24 >> 24;
 $0 = HEAP32[HEAP32[$8 + 176 >> 2] + 36 >> 2];
 $1 = HEAP32[HEAP32[$8 + 176 >> 2] + 40 >> 2];
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($8 + 72 | 0, HEAP32[$8 + 172 >> 2]);
 $2 = signed_20char_20const__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor_20const__29(HEAP32[$8 + 172 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($8 + 48 | 0, HEAP32[$8 + 168 >> 2]);
 $3 = signed_20char_20const__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor_20const__29(HEAP32[$8 + 168 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($8 + 24 | 0, HEAP32[$8 + 164 >> 2]);
 $4 = int_20const__20tflite__micro__GetTensorData_int__28TfLiteEvalTensor_20const__29(HEAP32[$8 + 164 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($8, HEAP32[$8 + 160 >> 2]);
 tflite__reference_integer_ops__DepthwiseConvPerChannel_28tflite__DepthwiseParams_20const__2c_20int_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($8 + 96 | 0, $0, $1, $8 + 72 | 0, $2, $8 + 48 | 0, $3, $8 + 24 | 0, $4, $8, signed_20char__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor__29(HEAP32[$8 + 160 >> 2]));
 tflite__RuntimeShape___RuntimeShape_28_29($8);
 tflite__RuntimeShape___RuntimeShape_28_29($8 + 24 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($8 + 48 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($8 + 72 | 0);
 __stack_pointer = $8 + 192 | 0;
}

function graphicsSetModifiedAndClip($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 48 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 44 >> 2] = $0;
 HEAP32[$6 + 40 >> 2] = $1;
 HEAP32[$6 + 36 >> 2] = $2;
 HEAP32[$6 + 32 >> 2] = $3;
 HEAP32[$6 + 28 >> 2] = $4;
 HEAP8[$6 + 27 | 0] = $5;
 HEAP8[$6 + 26 | 0] = 0;
 $0 = HEAP32[$6 + 44 >> 2];
 HEAP32[$6 + 20 >> 2] = HEAPU8[$0 + 32 | 0] | HEAPU8[$0 + 33 | 0] << 8;
 $0 = HEAP32[$6 + 44 >> 2];
 HEAP32[$6 + 16 >> 2] = HEAPU8[$0 + 34 | 0] | HEAPU8[$0 + 35 | 0] << 8;
 $0 = HEAP32[$6 + 44 >> 2];
 HEAP32[$6 + 12 >> 2] = HEAPU8[$0 + 36 | 0] | HEAPU8[$0 + 37 | 0] << 8;
 $0 = HEAP32[$6 + 44 >> 2];
 HEAP32[$6 + 8 >> 2] = HEAPU8[$0 + 38 | 0] | HEAPU8[$0 + 39 | 0] << 8;
 if (HEAP8[$6 + 27 | 0] & 1) {
  graphicsToDeviceCoordinates(HEAP32[$6 + 44 >> 2], $6 + 20 | 0, $6 + 16 | 0);
  graphicsToDeviceCoordinates(HEAP32[$6 + 44 >> 2], $6 + 12 | 0, $6 + 8 | 0);
  if (HEAP32[$6 + 12 >> 2] < HEAP32[$6 + 20 >> 2]) {
   HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 20 >> 2];
   HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 12 >> 2];
   HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 4 >> 2];
  }
  if (HEAP32[$6 + 8 >> 2] < HEAP32[$6 + 16 >> 2]) {
   HEAP32[$6 >> 2] = HEAP32[$6 + 16 >> 2];
   HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 8 >> 2];
   HEAP32[$6 + 8 >> 2] = HEAP32[$6 >> 2];
  }
 }
 if (HEAP32[HEAP32[$6 + 40 >> 2] >> 2] < HEAP32[$6 + 20 >> 2]) {
  HEAP32[HEAP32[$6 + 40 >> 2] >> 2] = HEAP32[$6 + 20 >> 2];
  HEAP8[$6 + 26 | 0] = 1;
 }
 if (HEAP32[HEAP32[$6 + 36 >> 2] >> 2] < HEAP32[$6 + 16 >> 2]) {
  HEAP32[HEAP32[$6 + 36 >> 2] >> 2] = HEAP32[$6 + 16 >> 2];
  HEAP8[$6 + 26 | 0] = 1;
 }
 if (HEAP32[HEAP32[$6 + 32 >> 2] >> 2] > HEAP32[$6 + 12 >> 2]) {
  HEAP32[HEAP32[$6 + 32 >> 2] >> 2] = HEAP32[$6 + 12 >> 2];
  HEAP8[$6 + 26 | 0] = 1;
 }
 if (HEAP32[HEAP32[$6 + 28 >> 2] >> 2] > HEAP32[$6 + 8 >> 2]) {
  HEAP32[HEAP32[$6 + 28 >> 2] >> 2] = HEAP32[$6 + 8 >> 2];
  HEAP8[$6 + 26 | 0] = 1;
 }
 $0 = HEAP32[$6 + 44 >> 2];
 if (HEAP32[HEAP32[$6 + 40 >> 2] >> 2] < (HEAPU8[$0 + 40 | 0] | HEAPU8[$0 + 41 | 0] << 8) << 16 >> 16) {
  $0 = HEAP32[$6 + 44 >> 2];
  $1 = HEAP32[HEAP32[$6 + 40 >> 2] >> 2];
  HEAP8[$0 + 40 | 0] = $1;
  HEAP8[$0 + 41 | 0] = $1 >>> 8;
  HEAP8[$6 + 26 | 0] = 1;
 }
 $0 = HEAP32[$6 + 44 >> 2];
 if (HEAP32[HEAP32[$6 + 32 >> 2] >> 2] > (HEAPU8[$0 + 44 | 0] | HEAPU8[$0 + 45 | 0] << 8) << 16 >> 16) {
  $0 = HEAP32[$6 + 44 >> 2];
  $1 = HEAP32[HEAP32[$6 + 32 >> 2] >> 2];
  HEAP8[$0 + 44 | 0] = $1;
  HEAP8[$0 + 45 | 0] = $1 >>> 8;
  HEAP8[$6 + 26 | 0] = 1;
 }
 $0 = HEAP32[$6 + 44 >> 2];
 if (HEAP32[HEAP32[$6 + 36 >> 2] >> 2] < (HEAPU8[$0 + 42 | 0] | HEAPU8[$0 + 43 | 0] << 8) << 16 >> 16) {
  $0 = HEAP32[$6 + 44 >> 2];
  $1 = HEAP32[HEAP32[$6 + 36 >> 2] >> 2];
  HEAP8[$0 + 42 | 0] = $1;
  HEAP8[$0 + 43 | 0] = $1 >>> 8;
  HEAP8[$6 + 26 | 0] = 1;
 }
 $0 = HEAP32[$6 + 44 >> 2];
 if (HEAP32[HEAP32[$6 + 28 >> 2] >> 2] > (HEAPU8[$0 + 46 | 0] | HEAPU8[$0 + 47 | 0] << 8) << 16 >> 16) {
  $0 = HEAP32[$6 + 44 >> 2];
  $1 = HEAP32[HEAP32[$6 + 28 >> 2] >> 2];
  HEAP8[$0 + 46 | 0] = $1;
  HEAP8[$0 + 47 | 0] = $1 >>> 8;
  HEAP8[$6 + 26 | 0] = 1;
 }
 __stack_pointer = $6 + 48 | 0;
 return HEAP8[$6 + 26 | 0] & 1;
}

function jsvReadConfigObject($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer + -64 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 56 >> 2] = $0;
 HEAP32[$3 + 52 >> 2] = $1;
 HEAP32[$3 + 48 >> 2] = $2;
 label$1: {
  if (jsvIsUndefined(HEAP32[$3 + 56 >> 2]) & 1) {
   HEAP8[$3 + 63 | 0] = 1;
   break label$1;
  }
  if (!(jsvIsObject(HEAP32[$3 + 56 >> 2]) & 1)) {
   HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 56 >> 2];
   jsExceptionHere(1, 114333, $3 + 16 | 0);
   HEAP8[$3 + 63 | 0] = 0;
   break label$1;
  }
  jsvObjectIteratorNew($3 + 40 | 0, HEAP32[$3 + 56 >> 2]);
  HEAP8[$3 + 39 | 0] = 1;
  while (1) {
   $0 = 0;
   if (HEAP8[$3 + 39 | 0] & 1) {
    $0 = jsvObjectIteratorHasValue($3 + 40 | 0);
   }
   if ($0 & 1) {
    HEAP32[$3 + 32 >> 2] = jsvObjectIteratorGetKey($3 + 40 | 0);
    HEAP8[$3 + 31 | 0] = 0;
    HEAP32[$3 + 24 >> 2] = 0;
    while (1) {
     if (HEAP32[$3 + 24 >> 2] < HEAP32[$3 + 48 >> 2]) {
      if (jsvIsStringEqual(HEAP32[$3 + 32 >> 2], HEAP32[HEAP32[$3 + 52 >> 2] + Math_imul(HEAP32[$3 + 24 >> 2], 12) >> 2]) & 1) {
       HEAP8[$3 + 31 | 0] = 1;
       if (HEAP32[(HEAP32[$3 + 52 >> 2] + Math_imul(HEAP32[$3 + 24 >> 2], 12) | 0) + 8 >> 2]) {
        HEAP32[$3 + 20 >> 2] = jsvObjectIteratorGetValue($3 + 40 | 0);
        label$11: {
         label$12: {
          switch (HEAPU16[(HEAP32[$3 + 52 >> 2] + Math_imul(HEAP32[$3 + 24 >> 2], 12) | 0) + 4 >> 1] - 3 | 0) {
          case 0:
          case 2:
          case 4:
          case 25:
           $0 = jsvLockAgain(HEAP32[$3 + 20 >> 2]);
           HEAP32[HEAP32[(HEAP32[$3 + 52 >> 2] + Math_imul(HEAP32[$3 + 24 >> 2], 12) | 0) + 8 >> 2] >> 2] = $0;
           break label$11;

          case 10:
           $0 = jshGetPinFromVar(HEAP32[$3 + 20 >> 2]);
           HEAP8[HEAP32[(HEAP32[$3 + 52 >> 2] + Math_imul(HEAP32[$3 + 24 >> 2], 12) | 0) + 8 >> 2]] = $0;
           break label$11;

          case 9:
           $0 = jsvGetBool(HEAP32[$3 + 20 >> 2]);
           HEAP8[HEAP32[(HEAP32[$3 + 52 >> 2] + Math_imul(HEAP32[$3 + 24 >> 2], 12) | 0) + 8 >> 2]] = $0 & 1;
           break label$11;

          case 7:
           $0 = jsvGetInteger(HEAP32[$3 + 20 >> 2]);
           HEAP32[HEAP32[(HEAP32[$3 + 52 >> 2] + Math_imul(HEAP32[$3 + 24 >> 2], 12) | 0) + 8 >> 2] >> 2] = $0;
           break label$11;

          case 8:
           break label$12;

          default:
           break label$11;
          }
         }
         $4 = jsvGetFloat(HEAP32[$3 + 20 >> 2]);
         HEAPF64[HEAP32[(HEAP32[$3 + 52 >> 2] + Math_imul(HEAP32[$3 + 24 >> 2], 12) | 0) + 8 >> 2] >> 3] = $4;
        }
        jsvUnLock(HEAP32[$3 + 20 >> 2]);
       }
      }
      HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 24 >> 2] + 1;
      continue;
     }
     break;
    }
    if (!(HEAP8[$3 + 31 | 0] & 1)) {
     HEAP32[$3 >> 2] = HEAP32[$3 + 32 >> 2];
     jsExceptionHere(1, 116692, $3);
     HEAP8[$3 + 39 | 0] = 0;
    }
    jsvUnLock(HEAP32[$3 + 32 >> 2]);
    jsvObjectIteratorNext($3 + 40 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree($3 + 40 | 0);
  HEAP8[$3 + 63 | 0] = HEAP8[$3 + 39 | 0] & 1;
 }
 __stack_pointer = $3 - -64 | 0;
 return HEAP8[$3 + 63 | 0] & 1;
}

function jswrap_graphics_createImage($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 96 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 88 >> 2] = $0;
 label$1: {
  if (!(jsvIsString(HEAP32[$1 + 88 >> 2]) & 1)) {
   jsExceptionHere(3, 118819, 0);
   HEAP32[$1 + 92 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 84 >> 2] = 0;
  HEAP32[$1 + 80 >> 2] = 0;
  HEAP32[$1 + 76 >> 2] = 0;
  HEAP32[$1 + 72 >> 2] = 0;
  HEAP32[$1 + 68 >> 2] = 0;
  jsvStringIteratorNew($1 + 32 | 0, HEAP32[$1 + 88 >> 2], 0);
  while (1) {
   if (jsvStringIteratorHasChar_12($1 + 32 | 0) & 1) {
    HEAP8[$1 + 31 | 0] = jsvStringIteratorGetCharAndNext($1 + 32 | 0);
    label$5: {
     if (HEAP8[$1 + 31 | 0] == 10) {
      if (!(HEAP32[$1 + 68 >> 2] | (HEAP32[$1 + 84 >> 2] | HEAP32[$1 + 80 >> 2]))) {
       HEAP32[$1 + 68 >> 2] = 1;
       break label$5;
      }
      HEAP32[$1 + 84 >> 2] = 0;
      HEAP32[$1 + 80 >> 2] = HEAP32[$1 + 80 >> 2] + 1;
      if (HEAP32[$1 + 72 >> 2] < (HEAP32[$1 + 80 >> 2] + 1 | 0)) {
       HEAP32[$1 + 72 >> 2] = HEAP32[$1 + 80 >> 2] + 1;
      }
      break label$5;
     }
     HEAP32[$1 + 84 >> 2] = HEAP32[$1 + 84 >> 2] + 1;
     if (HEAP32[$1 + 84 >> 2] > HEAP32[$1 + 76 >> 2]) {
      HEAP32[$1 + 76 >> 2] = HEAP32[$1 + 84 >> 2];
     }
    }
    continue;
   }
   break;
  }
  if (!(!HEAP32[$1 + 72 >> 2] | HEAP8[$1 + 31 | 0] != 10)) {
   HEAP32[$1 + 72 >> 2] = HEAP32[$1 + 72 >> 2] - 1;
  }
  jsvStringIteratorFree_16($1 + 32 | 0);
  HEAP32[$1 + 24 >> 2] = jsvNewObject();
  if (!HEAP32[$1 + 24 >> 2]) {
   HEAP32[$1 + 92 >> 2] = 0;
   break label$1;
  }
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 24 >> 2], 118428, jsvNewFromInteger(HEAP32[$1 + 76 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 24 >> 2], 113099, jsvNewFromInteger(HEAP32[$1 + 72 >> 2]));
  HEAP32[$1 + 20 >> 2] = Math_imul(HEAP32[$1 + 76 >> 2], HEAP32[$1 + 72 >> 2]) + 7 >> 3;
  HEAP32[$1 + 16 >> 2] = jsvNewStringOfLength(HEAP32[$1 + 20 >> 2], 0);
  if (!HEAP32[$1 + 16 >> 2]) {
   jsvUnLock(HEAP32[$1 + 24 >> 2]);
   HEAP32[$1 + 92 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 84 >> 2] = 0;
  HEAP32[$1 + 80 >> 2] = 0;
  jsvStringIteratorNew($1 + 32 | 0, HEAP32[$1 + 88 >> 2], HEAP32[$1 + 68 >> 2]);
  while (1) {
   if (jsvStringIteratorHasChar_12($1 + 32 | 0) & 1) {
    HEAP8[$1 + 15 | 0] = jsvStringIteratorGetCharAndNext($1 + 32 | 0);
    label$15: {
     if (HEAP8[$1 + 15 | 0] == 10) {
      HEAP32[$1 + 84 >> 2] = 0;
      HEAP32[$1 + 80 >> 2] = HEAP32[$1 + 80 >> 2] + 1;
      break label$15;
     }
     if (!(HEAP8[$1 + 15 | 0] == 32 | HEAP8[$1 + 15 | 0] == 46)) {
      HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 84 >> 2] + Math_imul(HEAP32[$1 + 80 >> 2], HEAP32[$1 + 76 >> 2]);
      jsvSetCharInString(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 8 >> 2] >>> 3 | 0, 128 >> (HEAP32[$1 + 8 >> 2] & 7) << 24 >> 24, 1);
     }
     HEAP32[$1 + 84 >> 2] = HEAP32[$1 + 84 >> 2] + 1;
    }
    continue;
   }
   break;
  }
  jsvStringIteratorFree_16($1 + 32 | 0);
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 24 >> 2], 116403, HEAP32[$1 + 16 >> 2]);
  HEAP32[$1 + 92 >> 2] = HEAP32[$1 + 24 >> 2];
 }
 __stack_pointer = $1 + 96 | 0;
 return HEAP32[$1 + 92 >> 2];
}

function jswGetSymbolListForObjectProto($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (jsvIsNativeFunction(HEAP32[$1 + 8 >> 2]) & 1) {
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 27) {
    HEAP32[$1 + 12 >> 2] = 157577;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 32) {
    HEAP32[$1 + 12 >> 2] = 157640;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 47) {
    HEAP32[$1 + 12 >> 2] = 157658;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 48) {
    HEAP32[$1 + 12 >> 2] = 157667;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 35) {
    HEAP32[$1 + 12 >> 2] = 157775;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 49) {
    HEAP32[$1 + 12 >> 2] = 157802;
    break label$1;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 37) {
    HEAP32[$1 + 12 >> 2] = 157820;
    break label$1;
   }
  }
  label$10: {
   if (jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1) {
    $0 = jsvSkipNameAndUnLock(jsvFindChildFromString(HEAP32[$1 + 8 >> 2], 116071));
    break label$10;
   }
   $0 = 0;
  }
  HEAP32[$1 + 4 >> 2] = $0;
  label$12: {
   if (!HEAP32[$1 + 4 >> 2]) {
    break label$12;
   }
   if (!(jsvIsNativeFunction(HEAP32[$1 + 4 >> 2]) & 1)) {
    break label$12;
   }
   HEAP32[$1 >> 2] = jswGetSymbolListForConstructorProto(HEAP32[$1 + 4 >> 2]);
   jsvUnLock(HEAP32[$1 + 4 >> 2]);
   if (HEAP32[$1 >> 2]) {
    HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
    break label$1;
   }
  }
  if (jsvIsPin(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 157577;
   break label$1;
  }
  if (jsvIsArray(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 157640;
   break label$1;
  }
  if (!(!(jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1) | HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] != 129)) {
   HEAP32[$1 + 12 >> 2] = 157658;
   break label$1;
  }
  if (!(!(jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1) | HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 129)) {
   HEAP32[$1 + 12 >> 2] = 157667;
   break label$1;
  }
  if (jsvIsNumeric(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 157775;
   break label$1;
  }
  if (jsvIsFunction(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 157802;
   break label$1;
  }
  if (jsvIsString(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 157820;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 157784;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_atob($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 128 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 120 >> 2] = $0;
 label$1: {
  if (!(jsvIsString(HEAP32[$1 + 120 >> 2]) & 1)) {
   HEAP32[$1 >> 2] = HEAP32[$1 + 120 >> 2];
   jsExceptionHere(1, 114175, $1);
   HEAP32[$1 + 124 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 116 >> 2] = 0;
  jsvStringIteratorNew($1 + 80 | 0, HEAP32[$1 + 120 >> 2], 0);
  HEAP8[$1 + 79 | 0] = 0;
  HEAP8[$1 + 78 | 0] = 0;
  while (1) {
   if (jsvStringIteratorHasChar_6($1 + 80 | 0) & 1) {
    HEAP8[$1 + 77 | 0] = jsvStringIteratorGetChar_4($1 + 80 | 0);
    if (!(isWhitespace(HEAP8[$1 + 77 | 0]) & 1)) {
     HEAP8[$1 + 78 | 0] = HEAPU8[$1 + 79 | 0];
     HEAP8[$1 + 79 | 0] = HEAPU8[$1 + 77 | 0];
     HEAP32[$1 + 116 >> 2] = HEAP32[$1 + 116 >> 2] + 1;
    }
    jsvStringIteratorNext($1 + 80 | 0);
    continue;
   }
   break;
  }
  jsvStringIteratorFree_7($1 + 80 | 0);
  HEAP32[$1 + 72 >> 2] = Math_imul(HEAP32[$1 + 116 >> 2], 3) >>> 2;
  if (HEAP8[$1 + 79 | 0] == 61) {
   HEAP32[$1 + 72 >> 2] = HEAP32[$1 + 72 >> 2] - 1;
  }
  if (HEAP8[$1 + 78 | 0] == 61) {
   HEAP32[$1 + 72 >> 2] = HEAP32[$1 + 72 >> 2] - 1;
  }
  HEAP32[$1 + 68 >> 2] = jsvNewStringOfLength(HEAP32[$1 + 72 >> 2], 0);
  if (!HEAP32[$1 + 68 >> 2]) {
   HEAP32[$1 + 124 >> 2] = 0;
   break label$1;
  }
  jsvStringIteratorNew($1 + 80 | 0, HEAP32[$1 + 120 >> 2], 0);
  jsvStringIteratorNew($1 + 32 | 0, HEAP32[$1 + 68 >> 2], 0);
  while (1) {
   $0 = 0;
   if (jsvStringIteratorHasChar_6($1 + 80 | 0) & 1) {
    $0 = jspIsInterrupted() ^ -1;
   }
   if ($0 & 1) {
    HEAP32[$1 + 28 >> 2] = 0;
    HEAP32[$1 + 20 >> 2] = 0;
    HEAP32[$1 + 24 >> 2] = 0;
    while (1) {
     if (HEAP32[$1 + 24 >> 2] < 4) {
      if (jsvStringIteratorHasChar_6($1 + 80 | 0) & 1) {
       HEAP8[$1 + 19 | 0] = 32;
       while (1) {
        $0 = 0;
        if (HEAP8[$1 + 19 | 0]) {
         $0 = isWhitespace(HEAP8[$1 + 19 | 0]);
        }
        if ($0 & 1) {
         HEAP8[$1 + 19 | 0] = jsvStringIteratorGetCharAndNext($1 + 80 | 0);
         continue;
        }
        break;
       }
       HEAP32[$1 + 12 >> 2] = jswrap_atob_decode(HEAP8[$1 + 19 | 0]);
       if (HEAP32[$1 + 12 >> 2] >= 0) {
        HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 28 >> 2] | HEAP32[$1 + 12 >> 2] << Math_imul(3 - HEAP32[$1 + 24 >> 2] | 0, 6);
        HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 24 >> 2];
       }
      }
      HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 24 >> 2] + 1;
      continue;
     }
     break;
    }
    if (HEAP32[$1 + 20 >> 2] > 0) {
     jsvStringIteratorSetCharAndNext($1 + 32 | 0, HEAP32[$1 + 28 >> 2] >>> 16 << 24 >> 24);
    }
    if (HEAP32[$1 + 20 >> 2] > 1) {
     jsvStringIteratorSetCharAndNext($1 + 32 | 0, HEAP32[$1 + 28 >> 2] >>> 8 << 24 >> 24);
    }
    if (HEAP32[$1 + 20 >> 2] > 2) {
     jsvStringIteratorSetCharAndNext($1 + 32 | 0, HEAP32[$1 + 28 >> 2] << 24 >> 24);
    }
    continue;
   }
   break;
  }
  jsvStringIteratorFree_7($1 + 80 | 0);
  jsvStringIteratorFree_7($1 + 32 | 0);
  HEAP32[$1 + 124 >> 2] = HEAP32[$1 + 68 >> 2];
 }
 __stack_pointer = $1 + 128 | 0;
 return HEAP32[$1 + 124 >> 2];
}

function jsspiSoftwareFunc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 44 >> 2] = $0;
 HEAP32[$4 + 40 >> 2] = $1;
 HEAP32[$4 + 36 >> 2] = $2;
 HEAP32[$4 + 32 >> 2] = $3;
 HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 32 >> 2];
 HEAP8[$4 + 27 | 0] = HEAP8[HEAP32[$4 + 28 >> 2] + 8 | 0] & 1;
 HEAP8[$4 + 26 | 0] = (HEAPU8[HEAP32[$4 + 28 >> 2] + 8 | 0] & 2) != 0;
 HEAP32[$4 + 20 >> 2] = HEAP8[HEAP32[$4 + 28 >> 2] + 9 | 0] & 1 ? -1 : 1;
 if (HEAP8[HEAP32[$4 + 28 >> 2] + 9 | 0] & 1) {
  $0 = -1;
 } else {
  $0 = HEAP32[$4 + 28 >> 2];
  $0 = HEAPU8[$0 + 10 | 0] | HEAPU8[$0 + 11 | 0] << 8 | (HEAPU8[$0 + 12 | 0] << 16 | HEAPU8[$0 + 13 | 0] << 24);
 }
 HEAP32[$4 + 16 >> 2] = $0;
 HEAP32[$4 + 12 >> 2] = 0;
 while (1) {
  if (HEAPU32[$4 + 12 >> 2] < HEAPU32[$4 + 36 >> 2]) {
   HEAP32[$4 + 8 >> 2] = HEAPU8[HEAP32[$4 + 44 >> 2] + HEAP32[$4 + 12 >> 2] | 0];
   HEAP32[$4 + 4 >> 2] = 0;
   label$5: {
    if (HEAP8[HEAP32[$4 + 28 >> 2] + 9 | 0] & 1) {
     $0 = HEAP32[$4 + 28 >> 2];
     $0 = (HEAPU8[$0 + 10 | 0] | HEAPU8[$0 + 11 | 0] << 8 | (HEAPU8[$0 + 12 | 0] << 16 | HEAPU8[$0 + 13 | 0] << 24)) - 1 | 0;
     break label$5;
    }
    $0 = 0;
   }
   HEAP32[$4 >> 2] = $0;
   while (1) {
    if (HEAP32[$4 >> 2] != HEAP32[$4 + 16 >> 2]) {
     label$9: {
      if (!(HEAP8[$4 + 27 | 0] & 1)) {
       if (HEAPU8[HEAP32[$4 + 28 >> 2] + 7 | 0] != 255) {
        jshPinSetValue(HEAPU8[HEAP32[$4 + 28 >> 2] + 7 | 0], HEAP32[$4 + 8 >> 2] >> HEAP32[$4 >> 2] & 1);
       }
       if (HEAPU8[HEAP32[$4 + 28 >> 2] + 5 | 0] != 255) {
        jshPinSetValue(HEAPU8[HEAP32[$4 + 28 >> 2] + 5 | 0], (HEAPU8[$4 + 26 | 0] ^ -1) & 1);
       }
       if (HEAPU8[HEAP32[$4 + 28 >> 2] + 6 | 0] != 255) {
        HEAP32[$4 + 4 >> 2] = (jshPinGetValue(HEAPU8[HEAP32[$4 + 28 >> 2] + 6 | 0]) & 1) << HEAP32[$4 >> 2] | HEAP32[$4 + 4 >> 2];
       }
       if (HEAPU8[HEAP32[$4 + 28 >> 2] + 5 | 0] != 255) {
        jshPinSetValue(HEAPU8[HEAP32[$4 + 28 >> 2] + 5 | 0], HEAP8[$4 + 26 | 0] & 1);
       }
       break label$9;
      }
      if (HEAPU8[HEAP32[$4 + 28 >> 2] + 5 | 0] != 255) {
       jshPinSetValue(HEAPU8[HEAP32[$4 + 28 >> 2] + 5 | 0], (HEAPU8[$4 + 26 | 0] ^ -1) & 1);
      }
      if (HEAPU8[HEAP32[$4 + 28 >> 2] + 7 | 0] != 255) {
       jshPinSetValue(HEAPU8[HEAP32[$4 + 28 >> 2] + 7 | 0], HEAP32[$4 + 8 >> 2] >> HEAP32[$4 >> 2] & 1);
      }
      if (HEAPU8[HEAP32[$4 + 28 >> 2] + 5 | 0] != 255) {
       jshPinSetValue(HEAPU8[HEAP32[$4 + 28 >> 2] + 5 | 0], HEAP8[$4 + 26 | 0] & 1);
      }
      if (HEAPU8[HEAP32[$4 + 28 >> 2] + 6 | 0] != 255) {
       HEAP32[$4 + 4 >> 2] = (jshPinGetValue(HEAPU8[HEAP32[$4 + 28 >> 2] + 6 | 0]) & 1) << HEAP32[$4 >> 2] | HEAP32[$4 + 4 >> 2];
      }
     }
     HEAP32[$4 >> 2] = HEAP32[$4 + 20 >> 2] + HEAP32[$4 >> 2];
     continue;
    }
    break;
   }
   if (HEAP32[$4 + 40 >> 2]) {
    HEAP8[HEAP32[$4 + 40 >> 2] + HEAP32[$4 + 12 >> 2] | 0] = HEAP32[$4 + 4 >> 2];
   }
   HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $4 + 48 | 0;
}

function utilTimerRemoveTask($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 jshInterruptOff();
 HEAP8[$2 + 3 | 0] = HEAPU8[349025];
 label$1: {
  if (HEAPU8[$2 + 3 | 0] != HEAPU8[349026]) {
   HEAP8[$2 + 2 | 0] = HEAPU8[349026] + 15 & 15;
   HEAP8[$2 + 3 | 0] = HEAPU8[$2 + 3 | 0] + 15 & 15;
   while (1) {
    if (HEAPU8[$2 + 3 | 0] != HEAPU8[$2 + 2 | 0]) {
     if (FUNCTION_TABLE[HEAP32[$2 + 8 >> 2]](Math_imul(HEAPU8[$2 + 3 | 0], 25) + 349040 | 0, HEAP32[$2 + 4 >> 2]) & 1) {
      HEAP8[$2 + 1 | 0] = HEAPU8[$2 + 3 | 0] + 15 & 15;
      while (1) {
       if (HEAPU8[$2 + 1 | 0] != HEAPU8[$2 + 2 | 0]) {
        $3 = Math_imul(HEAPU8[$2 + 1 | 0], 25) + 349040 | 0;
        $0 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
        $4 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
        $5 = $0;
        $1 = Math_imul(HEAPU8[$2 + 3 | 0], 25) + 349040 | 0;
        $0 = $1;
        HEAP8[$0 | 0] = $5;
        HEAP8[$0 + 1 | 0] = $5 >>> 8;
        HEAP8[$0 + 2 | 0] = $5 >>> 16;
        HEAP8[$0 + 3 | 0] = $5 >>> 24;
        HEAP8[$0 + 4 | 0] = $4;
        HEAP8[$0 + 5 | 0] = $4 >>> 8;
        HEAP8[$0 + 6 | 0] = $4 >>> 16;
        HEAP8[$0 + 7 | 0] = $4 >>> 24;
        HEAP8[$0 + 24 | 0] = HEAPU8[$3 + 24 | 0];
        $0 = HEAPU8[$3 + 20 | 0] | HEAPU8[$3 + 21 | 0] << 8 | (HEAPU8[$3 + 22 | 0] << 16 | HEAPU8[$3 + 23 | 0] << 24);
        $4 = HEAPU8[$3 + 16 | 0] | HEAPU8[$3 + 17 | 0] << 8 | (HEAPU8[$3 + 18 | 0] << 16 | HEAPU8[$3 + 19 | 0] << 24);
        $5 = $4;
        $4 = $1;
        HEAP8[$4 + 16 | 0] = $5;
        HEAP8[$4 + 17 | 0] = $5 >>> 8;
        HEAP8[$4 + 18 | 0] = $5 >>> 16;
        HEAP8[$4 + 19 | 0] = $5 >>> 24;
        HEAP8[$4 + 20 | 0] = $0;
        HEAP8[$4 + 21 | 0] = $0 >>> 8;
        HEAP8[$4 + 22 | 0] = $0 >>> 16;
        HEAP8[$4 + 23 | 0] = $0 >>> 24;
        $4 = HEAPU8[$3 + 12 | 0] | HEAPU8[$3 + 13 | 0] << 8 | (HEAPU8[$3 + 14 | 0] << 16 | HEAPU8[$3 + 15 | 0] << 24);
        $0 = HEAPU8[$3 + 8 | 0] | HEAPU8[$3 + 9 | 0] << 8 | (HEAPU8[$3 + 10 | 0] << 16 | HEAPU8[$3 + 11 | 0] << 24);
        $5 = $0;
        $0 = $1;
        HEAP8[$0 + 8 | 0] = $5;
        HEAP8[$0 + 9 | 0] = $5 >>> 8;
        HEAP8[$0 + 10 | 0] = $5 >>> 16;
        HEAP8[$0 + 11 | 0] = $5 >>> 24;
        HEAP8[$0 + 12 | 0] = $4;
        HEAP8[$0 + 13 | 0] = $4 >>> 8;
        HEAP8[$0 + 14 | 0] = $4 >>> 16;
        HEAP8[$0 + 15 | 0] = $4 >>> 24;
        HEAP8[$2 + 3 | 0] = HEAPU8[$2 + 1 | 0];
        HEAP8[$2 + 1 | 0] = HEAPU8[$2 + 3 | 0] + 15 & 15;
        continue;
       }
       break;
      }
      HEAP8[349026] = HEAPU8[349026] + 1 & 15;
      jshInterruptOn();
      HEAP8[$2 + 15 | 0] = 1;
      break label$1;
     } else {
      HEAP8[$2 + 3 | 0] = HEAPU8[$2 + 3 | 0] + 15 & 15;
      continue;
     }
    }
    break;
   }
  }
  jshInterruptOn();
  HEAP8[$2 + 15 | 0] = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP8[$2 + 15 | 0] & 1;
}

function jswrap_typedarray_constructor($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 112 | 0;
 __stack_pointer = $4;
 HEAP8[$4 + 107 | 0] = $0;
 HEAP32[$4 + 100 >> 2] = $1;
 HEAP32[$4 + 96 >> 2] = $2;
 HEAP32[$4 + 92 >> 2] = $3;
 HEAP32[$4 + 88 >> 2] = 0;
 HEAP8[$4 + 87 | 0] = 0;
 label$1: {
  if (!(HEAP32[$4 + 96 >> 2] <= 65535 & HEAP32[$4 + 96 >> 2] >= 0)) {
   jsExceptionHere(1, 142786, 0);
   HEAP32[$4 + 108 >> 2] = 0;
   break label$1;
  }
  label$4: {
   if (!(!(jsvIsArrayBuffer(HEAP32[$4 + 100 >> 2]) & 1) | HEAPU8[HEAP32[$4 + 100 >> 2] + 5 | 0] != 129)) {
    HEAP32[$4 + 88 >> 2] = jsvLockAgain(HEAP32[$4 + 100 >> 2]);
    break label$4;
   }
   label$6: {
    if (jsvIsNumeric(HEAP32[$4 + 100 >> 2]) & 1) {
     HEAP32[$4 + 92 >> 2] = jsvGetInteger(HEAP32[$4 + 100 >> 2]);
     HEAP32[$4 + 96 >> 2] = 0;
     HEAP32[$4 + 88 >> 2] = jswrap_arraybuffer_constructor(Math_imul(HEAP32[$4 + 92 >> 2], HEAPU8[$4 + 107 | 0] & 15));
     break label$6;
    }
    label$8: {
     if (!(jsvIsArray(HEAP32[$4 + 100 >> 2]) & 1)) {
      if (!(jsvIsArrayBuffer(HEAP32[$4 + 100 >> 2]) & 1)) {
       break label$8;
      }
     }
     HEAP32[$4 + 92 >> 2] = jsvGetLength(HEAP32[$4 + 100 >> 2]);
     HEAP32[$4 + 96 >> 2] = 0;
     HEAP32[$4 + 88 >> 2] = jswrap_arraybuffer_constructor(Math_imul(HEAP32[$4 + 92 >> 2], HEAPU8[$4 + 107 | 0] & 15));
     HEAP8[$4 + 87 | 0] = 1;
    }
   }
  }
  if (!HEAP32[$4 + 88 >> 2]) {
   HEAP32[$4 >> 2] = HEAP32[$4 + 100 >> 2];
   jsExceptionHere(1, 114518, $4);
   HEAP32[$4 + 108 >> 2] = 0;
   break label$1;
  }
  if (!HEAP32[$4 + 92 >> 2]) {
   HEAP32[$4 + 92 >> 2] = (jsvGetArrayBufferLength(HEAP32[$4 + 88 >> 2]) - HEAP32[$4 + 96 >> 2] | 0) / (HEAPU8[$4 + 107 | 0] & 15);
   if (HEAP32[$4 + 92 >> 2] < 0) {
    HEAP32[$4 + 92 >> 2] = 0;
   }
  }
  HEAP32[$4 + 80 >> 2] = jsvNewWithFlags(4);
  if (HEAP32[$4 + 80 >> 2]) {
   HEAP8[HEAP32[$4 + 80 >> 2] + 5 | 0] = HEAPU8[$4 + 107 | 0];
   $0 = HEAP32[$4 + 80 >> 2];
   $1 = HEAP32[$4 + 96 >> 2];
   HEAP8[$0 | 0] = $1;
   HEAP8[$0 + 1 | 0] = $1 >>> 8;
   $0 = HEAP32[$4 + 80 >> 2];
   $1 = HEAP32[$4 + 92 >> 2];
   HEAP8[$0 + 2 | 0] = $1;
   HEAP8[$0 + 3 | 0] = $1 >>> 8;
   HEAP8[$0 + 4 | 0] = $1 >>> 16;
   jsvSetFirstChild(HEAP32[$4 + 80 >> 2], jsvGetRef(jsvRef(HEAP32[$4 + 88 >> 2])) & 65535);
   if (HEAP8[$4 + 87 | 0] & 1) {
    jsvIteratorNew($4 + 16 | 0, HEAP32[$4 + 100 >> 2], 0);
    while (1) {
     if (jsvIteratorHasElement($4 + 16 | 0) & 1) {
      HEAP32[$4 + 12 >> 2] = jsvIteratorGetKey($4 + 16 | 0);
      if (jsvIsInt(HEAP32[$4 + 12 >> 2]) & 1) {
       HEAP32[$4 + 8 >> 2] = jsvIteratorGetValue($4 + 16 | 0);
       jsvArrayBufferSet(HEAP32[$4 + 80 >> 2], jsvGetInteger(HEAP32[$4 + 12 >> 2]), HEAP32[$4 + 8 >> 2]);
       jsvUnLock(HEAP32[$4 + 8 >> 2]);
      }
      jsvUnLock(HEAP32[$4 + 12 >> 2]);
      jsvIteratorNext($4 + 16 | 0);
      continue;
     }
     break;
    }
    jsvIteratorFree($4 + 16 | 0);
   }
  }
  jsvUnLock(HEAP32[$4 + 88 >> 2]);
  HEAP32[$4 + 108 >> 2] = HEAP32[$4 + 80 >> 2];
 }
 __stack_pointer = $4 + 112 | 0;
 return HEAP32[$4 + 108 >> 2];
}

function graphicsBlendColor($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 112 | 0;
 HEAP32[$4 + 104 >> 2] = $0;
 HEAP32[$4 + 100 >> 2] = $1;
 HEAP32[$4 + 96 >> 2] = $2;
 HEAP32[$4 + 92 >> 2] = $3;
 if (HEAP32[$4 + 92 >> 2] > 0) {
  $0 = HEAP32[$4 + 92 >> 2];
 } else {
  $0 = 0;
 }
 HEAP32[$4 + 88 >> 2] = $0;
 if (HEAPU32[$4 + 88 >> 2] > 256) {
  HEAP32[$4 + 88 >> 2] = 256;
 }
 label$4: {
  if (!(!(HEAPU8[HEAP32[$4 + 104 >> 2] + 16 | 0] == 2 | HEAPU8[HEAP32[$4 + 104 >> 2] + 16 | 0] == 4) & HEAPU8[HEAP32[$4 + 104 >> 2] + 16 | 0] != 8)) {
   HEAP32[$4 + 108 >> 2] = (Math_imul(HEAP32[$4 + 96 >> 2], 256 - HEAP32[$4 + 88 >> 2] | 0) + Math_imul(HEAP32[$4 + 100 >> 2], HEAP32[$4 + 88 >> 2]) | 0) + 127 >>> 8;
   break label$4;
  }
  if (HEAPU8[HEAP32[$4 + 104 >> 2] + 16 | 0] == 16) {
   HEAP32[$4 + 84 >> 2] = HEAP32[$4 + 96 >> 2];
   HEAP32[$4 + 80 >> 2] = HEAP32[$4 + 84 >> 2] >>> 11 & 31;
   HEAP32[$4 + 76 >> 2] = HEAP32[$4 + 84 >> 2] >>> 5 & 63;
   HEAP32[$4 + 72 >> 2] = HEAP32[$4 + 84 >> 2] & 31;
   HEAP32[$4 + 68 >> 2] = HEAP32[$4 + 100 >> 2];
   HEAP32[$4 + 64 >> 2] = HEAP32[$4 + 68 >> 2] >>> 11 & 31;
   HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 68 >> 2] >>> 5 & 63;
   HEAP32[$4 + 56 >> 2] = HEAP32[$4 + 68 >> 2] & 31;
   HEAP32[$4 + 52 >> 2] = Math_imul(HEAP32[$4 + 80 >> 2], 256 - HEAP32[$4 + 88 >> 2] | 0) + Math_imul(HEAP32[$4 + 64 >> 2], HEAP32[$4 + 88 >> 2]) >>> 8;
   HEAP32[$4 + 48 >> 2] = Math_imul(HEAP32[$4 + 76 >> 2], 256 - HEAP32[$4 + 88 >> 2] | 0) + Math_imul(HEAP32[$4 + 60 >> 2], HEAP32[$4 + 88 >> 2]) >>> 8;
   HEAP32[$4 + 44 >> 2] = Math_imul(HEAP32[$4 + 72 >> 2], 256 - HEAP32[$4 + 88 >> 2] | 0) + Math_imul(HEAP32[$4 + 56 >> 2], HEAP32[$4 + 88 >> 2]) >>> 8;
   HEAP32[$4 + 108 >> 2] = HEAP32[$4 + 44 >> 2] | HEAP32[$4 + 48 >> 2] << 5 | HEAP32[$4 + 52 >> 2] << 11;
   break label$4;
  }
  if (HEAPU8[HEAP32[$4 + 104 >> 2] + 16 | 0] == 24) {
   HEAP32[$4 + 40 >> 2] = HEAP32[$4 + 96 >> 2];
   HEAP32[$4 + 36 >> 2] = HEAP32[$4 + 40 >> 2] >>> 16 & 255;
   HEAP32[$4 + 32 >> 2] = HEAP32[$4 + 40 >> 2] >>> 8 & 255;
   HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 40 >> 2] & 255;
   HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 100 >> 2];
   HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 24 >> 2] >>> 16 & 255;
   HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 24 >> 2] >>> 8 & 255;
   HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 24 >> 2] & 255;
   HEAP32[$4 + 8 >> 2] = Math_imul(HEAP32[$4 + 36 >> 2], 256 - HEAP32[$4 + 88 >> 2] | 0) + Math_imul(HEAP32[$4 + 20 >> 2], HEAP32[$4 + 88 >> 2]) >>> 8;
   HEAP32[$4 + 4 >> 2] = Math_imul(HEAP32[$4 + 32 >> 2], 256 - HEAP32[$4 + 88 >> 2] | 0) + Math_imul(HEAP32[$4 + 16 >> 2], HEAP32[$4 + 88 >> 2]) >>> 8;
   HEAP32[$4 >> 2] = Math_imul(HEAP32[$4 + 28 >> 2], 256 - HEAP32[$4 + 88 >> 2] | 0) + Math_imul(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 88 >> 2]) >>> 8;
   HEAP32[$4 + 108 >> 2] = HEAP32[$4 >> 2] | HEAP32[$4 + 4 >> 2] << 8 | HEAP32[$4 + 8 >> 2] << 16;
   break label$4;
  }
  if (HEAPU32[$4 + 88 >> 2] >= 128) {
   $0 = HEAP32[$4 + 100 >> 2];
  } else {
   $0 = HEAP32[$4 + 96 >> 2];
  }
  HEAP32[$4 + 108 >> 2] = $0;
 }
 return HEAP32[$4 + 108 >> 2];
}

function tflite__ops__micro__activations__SoftmaxQuantized_28TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__2c_20tflite__SoftmaxParams_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 160 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 156 >> 2] = $0;
 HEAP32[$3 + 152 >> 2] = $1;
 HEAP32[$3 + 148 >> 2] = $2;
 label$1: {
  if (HEAP32[HEAP32[$3 + 156 >> 2] + 8 >> 2] == 3) {
   $0 = HEAP32[$3 + 148 >> 2];
   tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($3 + 120 | 0, HEAP32[$3 + 156 >> 2]);
   $1 = unsigned_20char_20const__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor_20const__29(HEAP32[$3 + 156 >> 2]);
   tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($3 + 96 | 0, HEAP32[$3 + 152 >> 2]);
   void_20tflite__reference_ops__Softmax_unsigned_20char_2c_20unsigned_20char__28tflite__SoftmaxParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($0, $3 + 120 | 0, $1, $3 + 96 | 0, unsigned_20char__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor__29(HEAP32[$3 + 152 >> 2]));
   tflite__RuntimeShape___RuntimeShape_28_29($3 + 96 | 0);
   tflite__RuntimeShape___RuntimeShape_28_29($3 + 120 | 0);
   break label$1;
  }
  label$3: {
   if (HEAP32[HEAP32[$3 + 152 >> 2] + 8 >> 2] == 7) {
    $0 = HEAP32[$3 + 148 >> 2];
    tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($3 + 72 | 0, HEAP32[$3 + 156 >> 2]);
    $1 = signed_20char_20const__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor_20const__29(HEAP32[$3 + 156 >> 2]);
    tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($3 + 48 | 0, HEAP32[$3 + 152 >> 2]);
    void_20tflite__reference_ops__Softmax_signed_20char_2c_20short__28tflite__SoftmaxParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20short__29($0, $3 + 72 | 0, $1, $3 + 48 | 0, short__20tflite__micro__GetTensorData_short__28TfLiteEvalTensor__29(HEAP32[$3 + 152 >> 2]));
    tflite__RuntimeShape___RuntimeShape_28_29($3 + 48 | 0);
    tflite__RuntimeShape___RuntimeShape_28_29($3 + 72 | 0);
    break label$3;
   }
   $0 = HEAP32[$3 + 148 >> 2];
   tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($3 + 24 | 0, HEAP32[$3 + 156 >> 2]);
   $1 = signed_20char_20const__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor_20const__29(HEAP32[$3 + 156 >> 2]);
   tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($3, HEAP32[$3 + 152 >> 2]);
   void_20tflite__reference_ops__Softmax_signed_20char_2c_20signed_20char__28tflite__SoftmaxParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($0, $3 + 24 | 0, $1, $3, signed_20char__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor__29(HEAP32[$3 + 152 >> 2]));
   tflite__RuntimeShape___RuntimeShape_28_29($3);
   tflite__RuntimeShape___RuntimeShape_28_29($3 + 24 | 0);
  }
 }
 __stack_pointer = $3 + 160 | 0;
}

function jsvGetString($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 80 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 72 >> 2] = $0;
 HEAP32[$3 + 68 >> 2] = $1;
 HEAP32[$3 + 64 >> 2] = $2;
 HEAP32[$3 + 60 >> 2] = jsvGetConstString(HEAP32[$3 + 72 >> 2]);
 label$1: {
  if (HEAP32[$3 + 60 >> 2]) {
   HEAP32[$3 + 64 >> 2] = HEAP32[$3 + 64 >> 2] - 1;
   HEAP32[$3 + 56 >> 2] = 0;
   while (1) {
    $0 = 0;
    $0 = HEAP8[HEAP32[$3 + 60 >> 2] + HEAP32[$3 + 56 >> 2] | 0] ? HEAPU32[$3 + 56 >> 2] < HEAPU32[$3 + 64 >> 2] : $0;
    if ($0) {
     HEAP8[HEAP32[$3 + 68 >> 2] + HEAP32[$3 + 56 >> 2] | 0] = HEAPU8[HEAP32[$3 + 60 >> 2] + HEAP32[$3 + 56 >> 2] | 0];
     HEAP32[$3 + 56 >> 2] = HEAP32[$3 + 56 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP8[HEAP32[$3 + 68 >> 2] + HEAP32[$3 + 56 >> 2] | 0] = 0;
   HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 56 >> 2];
   break label$1;
  }
  if (jsvIsInt(HEAP32[$3 + 72 >> 2]) & 1) {
   $0 = HEAP32[$3 + 72 >> 2];
   itostr(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), HEAP32[$3 + 68 >> 2], 10);
   HEAP32[$3 + 76 >> 2] = strlen(HEAP32[$3 + 68 >> 2]);
   break label$1;
  }
  if (jsvIsFloat(HEAP32[$3 + 72 >> 2]) & 1) {
   $0 = HEAP32[$3 + 72 >> 2];
   $1 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
   wasm2js_scratch_store_i32(0, HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24));
   wasm2js_scratch_store_i32(1, $1 | 0);
   ftoa_bounded(+wasm2js_scratch_load_f64(), HEAP32[$3 + 68 >> 2], HEAP32[$3 + 64 >> 2]);
   HEAP32[$3 + 76 >> 2] = strlen(HEAP32[$3 + 68 >> 2]);
   break label$1;
  }
  if (jsvHasCharacterData(HEAP32[$3 + 72 >> 2]) & 1) {
   HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 64 >> 2];
   jsvStringIteratorNew($3 + 16 | 0, HEAP32[$3 + 72 >> 2], 0);
   while (1) {
    if (jsvStringIteratorHasChar_1($3 + 16 | 0) & 1) {
     $0 = HEAP32[$3 + 52 >> 2];
     HEAP32[$3 + 52 >> 2] = $0 - 1;
     if ($0 >>> 0 <= 1) {
      HEAP8[HEAP32[$3 + 68 >> 2]] = 0;
      jsvStringIteratorFree_1($3 + 16 | 0);
      HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 64 >> 2];
      break label$1;
     } else {
      $1 = jsvStringIteratorGetChar_1($3 + 16 | 0);
      $0 = HEAP32[$3 + 68 >> 2];
      HEAP32[$3 + 68 >> 2] = $0 + 1;
      HEAP8[$0 | 0] = $1;
      jsvStringIteratorNext($3 + 16 | 0);
      continue;
     }
    }
    break;
   }
   jsvStringIteratorFree_1($3 + 16 | 0);
   HEAP8[HEAP32[$3 + 68 >> 2]] = 0;
   HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 64 >> 2] - HEAP32[$3 + 52 >> 2];
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = jsvAsString(HEAP32[$3 + 72 >> 2]);
  if (HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 8 >> 2] = jsvGetStringChars(HEAP32[$3 + 12 >> 2], 0, HEAP32[$3 + 68 >> 2], HEAP32[$3 + 64 >> 2]);
   jsvUnLock(HEAP32[$3 + 12 >> 2]);
   HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 8 >> 2];
   break label$1;
  }
  HEAP8[HEAP32[$3 + 68 >> 2]] = 0;
  jsExceptionHere(4, 118726, 0);
  HEAP32[$3 + 76 >> 2] = 0;
 }
 __stack_pointer = $3 + 80 | 0;
 return HEAP32[$3 + 76 >> 2];
}

function jslTokenAsString($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  if (!(HEAP32[$3 + 12 >> 2] <= 32 | HEAP32[$3 + 12 >> 2] >= 128)) {
   HEAP8[HEAP32[$3 + 8 >> 2]] = 39;
   HEAP8[HEAP32[$3 + 8 >> 2] + 1 | 0] = HEAP32[$3 + 12 >> 2];
   HEAP8[HEAP32[$3 + 8 >> 2] + 2 | 0] = 39;
   HEAP8[HEAP32[$3 + 8 >> 2] + 3 | 0] = 0;
   break label$1;
  }
  label$3: {
   label$4: {
    label$5: {
     label$6: {
      label$7: {
       label$8: {
        label$9: {
         label$10: {
          label$11: {
           label$12: {
            label$13: {
             label$14: {
              $0 = HEAP32[$3 + 12 >> 2];
              if ($0) {
               if (($0 | 0) == 128) {
                break label$14;
               }
               if (($0 | 0) == 129) {
                break label$13;
               }
               if (($0 | 0) == 130) {
                break label$12;
               }
               if (($0 | 0) == 131) {
                break label$11;
               }
               if (($0 | 0) == 132) {
                break label$10;
               }
               if (($0 | 0) == 133) {
                break label$9;
               }
               if (($0 | 0) == 134) {
                break label$8;
               }
               if (($0 | 0) == 135) {
                break label$7;
               }
               if (($0 | 0) == 136) {
                break label$6;
               }
               if (($0 | 0) == 137) {
                break label$5;
               }
               if (($0 | 0) == 255) {
                break label$4;
               }
               break label$3;
              }
              strcpy(HEAP32[$3 + 8 >> 2], 124732);
              break label$1;
             }
             strcpy(HEAP32[$3 + 8 >> 2], 125073);
             break label$1;
            }
            strcpy(HEAP32[$3 + 8 >> 2], 123751);
            break label$1;
           }
           strcpy(HEAP32[$3 + 8 >> 2], 123878);
           break label$1;
          }
          strcpy(HEAP32[$3 + 8 >> 2], 124693);
          break label$1;
         }
         strcpy(HEAP32[$3 + 8 >> 2], 124682);
         break label$1;
        }
        strcpy(HEAP32[$3 + 8 >> 2], 124475);
        break label$1;
       }
       strcpy(HEAP32[$3 + 8 >> 2], 124464);
       break label$1;
      }
      strcpy(HEAP32[$3 + 8 >> 2], 123599);
      break label$1;
     }
     strcpy(HEAP32[$3 + 8 >> 2], 123588);
     break label$1;
    }
    strcpy(HEAP32[$3 + 8 >> 2], 123755);
    break label$1;
   }
   strcpy(HEAP32[$3 + 8 >> 2], 123384);
   break label$1;
  }
  if (!(HEAP32[$3 + 12 >> 2] < 138 | HEAP32[$3 + 12 >> 2] > 208)) {
   strcpy(HEAP32[$3 + 8 >> 2], jslReservedWordAsString(HEAP32[$3 + 12 >> 2]));
   break label$1;
  }
  $0 = HEAP32[$3 + 8 >> 2];
  $1 = HEAP32[$3 + 4 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$3 + 12 >> 2];
  espruino_snprintf($0, $1, 123361, $3);
 }
 __stack_pointer = $3 + 16 | 0;
}

function jsvFreePtr($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 if (!(jsvIsNameWithValue(HEAP32[$1 + 28 >> 2]) & 1)) {
  if (jsvHasSingleChild(HEAP32[$1 + 28 >> 2]) & 1) {
   if (jsvGetFirstChild(HEAP32[$1 + 28 >> 2]) & 65535) {
    if (jsuGetFreeStack() >>> 0 > 256) {
     HEAP32[$1 + 24 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$1 + 28 >> 2]) & 65535);
     jsvUnRef(HEAP32[$1 + 24 >> 2]);
     jsvUnLock(HEAP32[$1 + 24 >> 2]);
    }
   }
  }
 }
 label$5: {
  if (jsvIsUTF8String(HEAP32[$1 + 28 >> 2]) & 1) {
   jsvUnRefRef(jsvGetLastChild(HEAP32[$1 + 28 >> 2]) & 65535);
   jsvSetLastChild(HEAP32[$1 + 28 >> 2], 0);
   break label$5;
  }
  label$7: {
   if (jsvHasStringExt(HEAP32[$1 + 28 >> 2]) & 1) {
    jsvFreePtrStringExt(HEAP32[$1 + 28 >> 2]);
    break label$7;
   }
   if (jsvIsFlatString(HEAP32[$1 + 28 >> 2]) & 1) {
    HEAP32[$1 + 20 >> 2] = jsvGetFlatStringBlocks(HEAP32[$1 + 28 >> 2]);
    HEAP16[$1 + 18 >> 1] = (jsvGetRef(HEAP32[$1 + 28 >> 2]) & 65535) + HEAP32[$1 + 20 >> 2];
    jshInterruptOff();
    HEAP16[$1 + 16 >> 1] = HEAPU16[89490];
    HEAP16[$1 + 14 >> 1] = 0;
    while (1) {
     $0 = 0;
     $0 = HEAPU16[$1 + 16 >> 1] ? HEAPU16[$1 + 16 >> 1] < HEAPU16[$1 + 18 >> 1] : $0;
     if ($0) {
      HEAP16[$1 + 14 >> 1] = HEAPU16[$1 + 16 >> 1];
      HEAP16[$1 + 16 >> 1] = jsvGetNextSibling(jsvGetAddressOf(HEAPU16[$1 + 16 >> 1]));
      continue;
     }
     break;
    }
    while (1) {
     $0 = HEAP32[$1 + 20 >> 2];
     HEAP32[$1 + 20 >> 2] = $0 - 1;
     if ($0) {
      $0 = HEAPU16[$1 + 18 >> 1];
      HEAP16[$1 + 18 >> 1] = $0 - 1;
      HEAP32[$1 + 8 >> 2] = jsvGetAddressOf($0);
      $0 = HEAP32[$1 + 8 >> 2];
      HEAP8[$0 + 12 | 0] = 0;
      HEAP8[$0 + 13 | 0] = 0;
      jsvSetNextSibling(HEAP32[$1 + 8 >> 2], HEAPU16[$1 + 16 >> 1]);
      HEAP16[$1 + 16 >> 1] = jsvGetRef(HEAP32[$1 + 8 >> 2]);
      continue;
     }
     break;
    }
    label$15: {
     if (HEAPU16[$1 + 14 >> 1]) {
      jsvSetNextSibling(jsvGetAddressOf(HEAPU16[$1 + 14 >> 1]), HEAPU16[$1 + 16 >> 1]);
      break label$15;
     }
     HEAP16[89490] = HEAPU16[$1 + 16 >> 1];
    }
    HEAP8[178977] = 1;
    jshInterruptOn();
   }
  }
 }
 label$17: {
  if (jsvHasChildren(HEAP32[$1 + 28 >> 2]) & 1) {
   HEAP16[$1 + 6 >> 1] = jsvGetLastChild(HEAP32[$1 + 28 >> 2]);
   while (1) {
    if (HEAPU16[$1 + 6 >> 1]) {
     HEAP32[$1 >> 2] = jsvLock(HEAPU16[$1 + 6 >> 1]);
     HEAP16[$1 + 6 >> 1] = jsvGetPrevSibling(HEAP32[$1 >> 2]);
     jsvSetPrevSibling(HEAP32[$1 >> 2], 0);
     jsvSetNextSibling(HEAP32[$1 >> 2], 0);
     jsvUnRef(HEAP32[$1 >> 2]);
     jsvUnLock(HEAP32[$1 >> 2]);
     continue;
    }
    break;
   }
   break label$17;
  }
  if (jsvIsName(HEAP32[$1 + 28 >> 2]) & 1) {
   if (jsvGetNextSibling(HEAP32[$1 + 28 >> 2]) & 65535) {
    jsvUnRefRef(jsvGetNextSibling(HEAP32[$1 + 28 >> 2]) & 65535);
    jsvUnRefRef(jsvGetPrevSibling(HEAP32[$1 + 28 >> 2]) & 65535);
   }
  }
 }
 jsvFreePtrInternal(HEAP32[$1 + 28 >> 2]);
 __stack_pointer = $1 + 32 | 0;
}

function graphicsDrawChar4x6($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0;
 $7 = __stack_pointer - 48 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 44 >> 2] = $0;
 HEAP32[$7 + 40 >> 2] = $1;
 HEAP32[$7 + 36 >> 2] = $2;
 HEAP8[$7 + 35 | 0] = $3;
 HEAP16[$7 + 32 >> 1] = $4;
 HEAP16[$7 + 30 >> 1] = $5;
 HEAP8[$7 + 29 | 0] = $6;
 HEAP32[$7 + 24 >> 2] = HEAPU8[$7 + 35 | 0] - 33;
 label$1: {
  if (!(HEAP32[$7 + 24 >> 2] < 100 & HEAP32[$7 + 24 >> 2] >= 0)) {
   if (HEAP8[$7 + 29 | 0] & 1) {
    $0 = HEAP32[$7 + 44 >> 2];
    graphicsFillRect(HEAP32[$7 + 44 >> 2], HEAP32[$7 + 40 >> 2], HEAP32[$7 + 36 >> 2], HEAP32[$7 + 40 >> 2] + (HEAPU16[$7 + 32 >> 1] << 1) | 0, HEAP32[$7 + 36 >> 2] + Math_imul(HEAPU16[$7 + 30 >> 1], 5) | 0, HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24));
   }
   break label$1;
  }
  HEAP32[$7 + 20 >> 2] = HEAP32[$7 + 24 >> 2] % 5;
  HEAP32[$7 + 24 >> 2] = Math_imul(HEAP32[$7 + 24 >> 2] / 5 | 0, 6);
  HEAP32[$7 + 16 >> 2] = 0;
  while (1) {
   if (HEAP32[$7 + 16 >> 2] < 6) {
    HEAP32[$7 + 12 >> 2] = HEAPU16[(HEAP32[$7 + 24 >> 2] + HEAP32[$7 + 16 >> 2] << 1) + 158464 >> 1] >> Math_imul(HEAP32[$7 + 20 >> 2], 3);
    HEAP32[$7 + 8 >> 2] = HEAP32[$7 + 36 >> 2] + Math_imul(HEAP32[$7 + 16 >> 2], HEAPU16[$7 + 30 >> 1]);
    HEAP32[$7 + 4 >> 2] = 0;
    while (1) {
     if (HEAP32[$7 + 4 >> 2] < 3) {
      HEAP8[$7 + 3 | 0] = (HEAP32[$7 + 12 >> 2] & 4) != 0;
      if (HEAP8[$7 + 3 | 0] & 1 ? 1 : HEAP8[$7 + 29 | 0] & 1) {
       $1 = HEAP32[$7 + 44 >> 2];
       $2 = HEAP32[$7 + 40 >> 2] + Math_imul(HEAP32[$7 + 4 >> 2], HEAPU16[$7 + 32 >> 1]) | 0;
       $3 = HEAP32[$7 + 8 >> 2];
       $4 = (HEAP32[$7 + 40 >> 2] + Math_imul(HEAPU16[$7 + 32 >> 1], HEAP32[$7 + 4 >> 2] + 1 | 0) | 0) - 1 | 0;
       $5 = (HEAP32[$7 + 8 >> 2] + HEAPU16[$7 + 30 >> 1] | 0) - 1 | 0;
       label$11: {
        if (HEAP8[$7 + 3 | 0] & 1) {
         $0 = HEAP32[$7 + 44 >> 2];
         $0 = HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24);
         break label$11;
        }
        $0 = HEAP32[$7 + 44 >> 2];
        $0 = HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24);
       }
       graphicsFillRect($1, $2, $3, $4, $5, $0);
      }
      HEAP32[$7 + 12 >> 2] = HEAP32[$7 + 12 >> 2] << 1;
      HEAP32[$7 + 4 >> 2] = HEAP32[$7 + 4 >> 2] + 1;
      continue;
     }
     break;
    }
    HEAP32[$7 + 16 >> 2] = HEAP32[$7 + 16 >> 2] + 1;
    continue;
   }
   break;
  }
  if (!(HEAP8[$7 + 29 | 0] & 1)) {
   break label$1;
  }
  $0 = HEAP32[$7 + 44 >> 2];
  graphicsFillRect(HEAP32[$7 + 44 >> 2], HEAP32[$7 + 40 >> 2] + Math_imul(HEAPU16[$7 + 32 >> 1], 3) | 0, HEAP32[$7 + 36 >> 2], (HEAP32[$7 + 40 >> 2] + (HEAPU16[$7 + 32 >> 1] << 2) | 0) - 1 | 0, (HEAP32[$7 + 36 >> 2] + Math_imul(HEAPU16[$7 + 30 >> 1], 6) | 0) - 1 | 0, HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24));
 }
 __stack_pointer = $7 + 48 | 0;
}

function graphicsDrawChar6x8($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0;
 $7 = __stack_pointer - 48 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 44 >> 2] = $0;
 HEAP32[$7 + 40 >> 2] = $1;
 HEAP32[$7 + 36 >> 2] = $2;
 HEAP8[$7 + 35 | 0] = $3;
 HEAP16[$7 + 32 >> 1] = $4;
 HEAP16[$7 + 30 >> 1] = $5;
 HEAP8[$7 + 29 | 0] = $6;
 HEAP32[$7 + 24 >> 2] = HEAPU8[$7 + 35 | 0] - 33;
 label$1: {
  if (!(HEAP32[$7 + 24 >> 2] < 223 & HEAP32[$7 + 24 >> 2] >= 0)) {
   if (HEAP8[$7 + 29 | 0] & 1) {
    $0 = HEAP32[$7 + 44 >> 2];
    graphicsFillRect(HEAP32[$7 + 44 >> 2], HEAP32[$7 + 40 >> 2], HEAP32[$7 + 36 >> 2], HEAP32[$7 + 40 >> 2] + Math_imul(HEAPU16[$7 + 32 >> 1], 5) | 0, HEAP32[$7 + 36 >> 2] + Math_imul(HEAPU16[$7 + 30 >> 1], 7) | 0, HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24));
   }
   break label$1;
  }
  HEAP32[$7 + 20 >> 2] = HEAP32[$7 + 24 >> 2] % 6;
  HEAP32[$7 + 24 >> 2] = HEAP32[$7 + 24 >> 2] / 6 << 3;
  HEAP32[$7 + 16 >> 2] = 0;
  while (1) {
   if (HEAP32[$7 + 16 >> 2] < 8) {
    HEAP32[$7 + 12 >> 2] = HEAP32[(HEAP32[$7 + 24 >> 2] + HEAP32[$7 + 16 >> 2] << 2) + 158704 >> 2] >>> Math_imul(HEAP32[$7 + 20 >> 2], 5);
    HEAP32[$7 + 8 >> 2] = HEAP32[$7 + 36 >> 2] + Math_imul(HEAP32[$7 + 16 >> 2], HEAPU16[$7 + 30 >> 1]);
    HEAP32[$7 + 4 >> 2] = 0;
    while (1) {
     if (HEAP32[$7 + 4 >> 2] < 5) {
      HEAP8[$7 + 3 | 0] = (HEAP32[$7 + 12 >> 2] & 16) != 0;
      if (HEAP8[$7 + 3 | 0] & 1 ? 1 : HEAP8[$7 + 29 | 0] & 1) {
       $1 = HEAP32[$7 + 44 >> 2];
       $2 = HEAP32[$7 + 40 >> 2] + Math_imul(HEAP32[$7 + 4 >> 2], HEAPU16[$7 + 32 >> 1]) | 0;
       $3 = HEAP32[$7 + 8 >> 2];
       $4 = (HEAP32[$7 + 40 >> 2] + Math_imul(HEAPU16[$7 + 32 >> 1], HEAP32[$7 + 4 >> 2] + 1 | 0) | 0) - 1 | 0;
       $5 = (HEAP32[$7 + 8 >> 2] + HEAPU16[$7 + 30 >> 1] | 0) - 1 | 0;
       label$11: {
        if (HEAP8[$7 + 3 | 0] & 1) {
         $0 = HEAP32[$7 + 44 >> 2];
         $0 = HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24);
         break label$11;
        }
        $0 = HEAP32[$7 + 44 >> 2];
        $0 = HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24);
       }
       graphicsFillRect($1, $2, $3, $4, $5, $0);
      }
      HEAP32[$7 + 12 >> 2] = HEAP32[$7 + 12 >> 2] << 1;
      HEAP32[$7 + 4 >> 2] = HEAP32[$7 + 4 >> 2] + 1;
      continue;
     }
     break;
    }
    HEAP32[$7 + 16 >> 2] = HEAP32[$7 + 16 >> 2] + 1;
    continue;
   }
   break;
  }
  if (!(HEAP8[$7 + 29 | 0] & 1)) {
   break label$1;
  }
  $0 = HEAP32[$7 + 44 >> 2];
  graphicsFillRect(HEAP32[$7 + 44 >> 2], HEAP32[$7 + 40 >> 2] + Math_imul(HEAPU16[$7 + 32 >> 1], 5) | 0, HEAP32[$7 + 36 >> 2], (HEAP32[$7 + 40 >> 2] + Math_imul(HEAPU16[$7 + 32 >> 1], 6) | 0) - 1 | 0, (HEAP32[$7 + 36 >> 2] + (HEAPU16[$7 + 30 >> 1] << 3) | 0) - 1 | 0, HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24));
 }
 __stack_pointer = $7 + 48 | 0;
}

function _jsvCountJsVarsUsedRecursive($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP8[$2 + 39 | 0] = $1;
 label$1: {
  if (!HEAP32[$2 + 40 >> 2]) {
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  label$3: {
   if (HEAP8[$2 + 39 | 0] & 1) {
    $0 = HEAP32[$2 + 40 >> 2];
    if (!((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 512)) {
     HEAP32[$2 + 44 >> 2] = 0;
     break label$1;
    }
    $0 = HEAP32[$2 + 40 >> 2];
    $1 = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & -513;
    HEAP8[$0 + 12 | 0] = $1;
    HEAP8[$0 + 13 | 0] = $1 >>> 8;
    break label$3;
   }
   $0 = HEAP32[$2 + 40 >> 2];
   if ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 512) {
    HEAP32[$2 + 44 >> 2] = 0;
    break label$1;
   }
   $0 = HEAP32[$2 + 40 >> 2];
   $1 = HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8 | 512;
   HEAP8[$0 + 12 | 0] = $1;
   HEAP8[$0 + 13 | 0] = $1 >>> 8;
  }
  HEAP32[$2 + 32 >> 2] = 1;
  label$7: {
   label$8: {
    if (!(jsvHasSingleChild(HEAP32[$2 + 40 >> 2]) & 1)) {
     if (!(jsvHasChildren(HEAP32[$2 + 40 >> 2]) & 1)) {
      break label$8;
     }
    }
    HEAP16[$2 + 30 >> 1] = jsvGetFirstChild(HEAP32[$2 + 40 >> 2]);
    while (1) {
     if (HEAPU16[$2 + 30 >> 1]) {
      HEAP32[$2 + 24 >> 2] = jsvLock(HEAPU16[$2 + 30 >> 1]);
      HEAP32[$2 + 32 >> 2] = _jsvCountJsVarsUsedRecursive(HEAP32[$2 + 24 >> 2], HEAP8[$2 + 39 | 0] & 1) + HEAP32[$2 + 32 >> 2];
      label$12: {
       if (jsvHasChildren(HEAP32[$2 + 40 >> 2]) & 1) {
        HEAP16[$2 + 30 >> 1] = jsvGetNextSibling(HEAP32[$2 + 24 >> 2]);
        break label$12;
       }
       HEAP16[$2 + 30 >> 1] = 0;
      }
      jsvUnLock(HEAP32[$2 + 24 >> 2]);
      continue;
     }
     break;
    }
    break label$7;
   }
   if (jsvIsFlatString(HEAP32[$2 + 40 >> 2]) & 1) {
    HEAP32[$2 + 32 >> 2] = jsvGetFlatStringBlocks(HEAP32[$2 + 40 >> 2]) + HEAP32[$2 + 32 >> 2];
   }
  }
  if (jsvHasCharacterData(HEAP32[$2 + 40 >> 2]) & 1) {
   HEAP16[$2 + 22 >> 1] = jsvGetLastChild(HEAP32[$2 + 40 >> 2]);
   while (1) {
    if (HEAPU16[$2 + 22 >> 1]) {
     HEAP32[$2 + 16 >> 2] = jsvLock(HEAPU16[$2 + 22 >> 1]);
     HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 32 >> 2] + 1;
     HEAP16[$2 + 22 >> 1] = jsvGetLastChild(HEAP32[$2 + 16 >> 2]);
     jsvUnLock(HEAP32[$2 + 16 >> 2]);
     continue;
    }
    break;
   }
  }
  label$18: {
   if (!(jsvIsName(HEAP32[$2 + 40 >> 2]) & 1)) {
    break label$18;
   }
   if (jsvIsNameWithValue(HEAP32[$2 + 40 >> 2]) & 1) {
    break label$18;
   }
   if (!(jsvGetFirstChild(HEAP32[$2 + 40 >> 2]) & 65535)) {
    break label$18;
   }
   HEAP32[$2 + 12 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$2 + 40 >> 2]) & 65535);
   HEAP32[$2 + 32 >> 2] = _jsvCountJsVarsUsedRecursive(HEAP32[$2 + 12 >> 2], HEAP8[$2 + 39 | 0] & 1) + HEAP32[$2 + 32 >> 2];
   jsvUnLock(HEAP32[$2 + 12 >> 2]);
  }
  HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function jswrap_pin_getInfo($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer + -64 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 56 >> 2] = $0;
 HEAP8[$1 + 55 | 0] = jshGetPinFromVar(HEAP32[$1 + 56 >> 2]);
 label$1: {
  if (!(jshIsPinValid(HEAPU8[$1 + 55 | 0]) & 1)) {
   HEAP32[$1 + 60 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 48 >> 2] = Math_imul(HEAPU8[$1 + 55 | 0], 3) + 163712;
  HEAP32[$1 + 44 >> 2] = jsvNewObject();
  if (!HEAP32[$1 + 44 >> 2]) {
   HEAP32[$1 + 60 >> 2] = 0;
   break label$1;
  }
  HEAP8[$1 + 42 | 0] = HEAPU8[HEAP32[$1 + 48 >> 2]] - -64;
  HEAP8[$1 + 43 | 0] = 0;
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 44 >> 2], 112705, jsvNewFromString($1 + 42 | 0));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 44 >> 2], 117631, jsvNewFromInteger(HEAPU8[HEAP32[$1 + 48 >> 2] + 1 | 0]));
  if (HEAPU8[HEAP32[$1 + 48 >> 2] + 2 | 0]) {
   HEAP32[$1 + 36 >> 2] = jsvNewObject();
   if (HEAP32[$1 + 36 >> 2]) {
    HEAP32[$1 + 32 >> 2] = jsvNewEmptyArray();
    if (HEAP32[$1 + 32 >> 2]) {
     HEAP32[$1 + 28 >> 2] = 0;
     while (1) {
      if (HEAP32[$1 + 28 >> 2] < 0) {
       if (HEAPU8[HEAP32[$1 + 48 >> 2] + 2 | 0] & 32 << HEAP32[$1 + 28 >> 2]) {
        jsvArrayPushAndUnLock(HEAP32[$1 + 32 >> 2], jsvNewFromInteger(HEAP32[$1 + 28 >> 2] + 1 | 0));
       }
       HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 28 >> 2] + 1;
       continue;
      }
      break;
     }
     jsvObjectSetChildAndUnLock(HEAP32[$1 + 36 >> 2], 115752, HEAP32[$1 + 32 >> 2]);
    }
    jsvObjectSetChildAndUnLock(HEAP32[$1 + 44 >> 2], 117861, jsvNewFromInteger(HEAPU8[HEAP32[$1 + 48 >> 2] + 2 | 0] & 31));
   }
  }
  HEAP32[$1 + 24 >> 2] = jsvNewObject();
  if (HEAP32[$1 + 24 >> 2]) {
   HEAP32[$1 + 20 >> 2] = 0;
   while (1) {
    if (HEAP32[$1 + 20 >> 2] < 0) {
     $0 = (HEAP32[$1 + 48 >> 2] + 3 | 0) + (HEAP32[$1 + 20 >> 2] << 1) | 0;
     if (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8) {
      HEAP32[$1 + 16 >> 2] = jsvNewObject();
      if (HEAP32[$1 + 16 >> 2]) {
       $0 = (HEAP32[$1 + 48 >> 2] + 3 | 0) + (HEAP32[$1 + 20 >> 2] << 1) | 0;
       jshPinFunctionToString(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8, 8, $1, 16);
       jsvObjectSetChildAndUnLock(HEAP32[$1 + 16 >> 2], 119989, jsvNewFromString($1));
       $0 = (HEAP32[$1 + 48 >> 2] + 3 | 0) + (HEAP32[$1 + 20 >> 2] << 1) | 0;
       jsvObjectSetChildAndUnLock(HEAP32[$1 + 16 >> 2], 119109, jsvNewFromInteger((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8) & 15));
       $0 = (HEAP32[$1 + 48 >> 2] + 3 | 0) + (HEAP32[$1 + 20 >> 2] << 1) | 0;
       jshPinFunctionToString(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8, 3, $1, 16);
       jsvObjectSetChildAndUnLock(HEAP32[$1 + 24 >> 2], $1, HEAP32[$1 + 16 >> 2]);
      }
     }
     HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 20 >> 2] + 1;
     continue;
    }
    break;
   }
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 44 >> 2], 115364, HEAP32[$1 + 24 >> 2]);
  }
  HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 44 >> 2];
 }
 __stack_pointer = $1 - -64 | 0;
 return HEAP32[$1 + 60 >> 2];
}

function jsdGetEffectiveTimeZone($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 176 | 0;
 __stack_pointer = $3;
 HEAPF64[$3 + 160 >> 3] = $0;
 HEAP8[$3 + 159 | 0] = $1;
 HEAP32[$3 + 152 >> 2] = $2;
 HEAP32[$3 + 148 >> 2] = jsvObjectGetChildIfExists(HEAP32[86751], 112696);
 label$1: {
  label$2: {
   label$3: {
    if (!HEAP32[$3 + 148 >> 2]) {
     break label$3;
    }
    if (!(jsvIsArrayBuffer(HEAP32[$3 + 148 >> 2]) & 1)) {
     break label$3;
    }
    if ((jsvGetLength(HEAP32[$3 + 148 >> 2]) | 0) != 12 | HEAPU8[HEAP32[$3 + 148 >> 2] + 5 | 0] != 18) {
     break label$3;
    }
    jsvArrayBufferIteratorNew($3 + 40 | 0, HEAP32[$3 + 148 >> 2], 0);
    HEAP32[$3 + 144 >> 2] = 0;
    while (1) {
     if (HEAP32[$3 + 144 >> 2] < 12) {
      $2 = jsvArrayBufferIteratorGetIntegerValue($3 + 40 | 0);
      $1 = HEAP32[$3 + 144 >> 2];
      HEAP32[$3 + 144 >> 2] = $1 + 1;
      HEAP32[($3 + 96 | 0) + ($1 << 2) >> 2] = $2;
      jsvArrayBufferIteratorNext($3 + 40 | 0);
      continue;
     }
     break;
    }
    jsvArrayBufferIteratorFree($3 + 40 | 0);
    jsvUnLock(HEAP32[$3 + 148 >> 2]);
    if (HEAP32[$3 + 96 >> 2]) {
     HEAPF64[$3 + 32 >> 3] = HEAPF64[$3 + 160 >> 3] / 1e3;
     $0 = HEAPF64[$3 + 32 >> 3] / 86400;
     label$7: {
      if (Math_abs($0) < 2147483648) {
       $1 = ~~$0;
       break label$7;
      }
      $1 = -2147483648;
     }
     getDateFromDayNumber($1, $3 + 144 | 0, 0, 0);
     HEAPF64[$3 + 24 >> 3] = getDstChangeTime(HEAP32[$3 + 144 >> 2], HEAP32[$3 + 104 >> 2], HEAP32[$3 + 108 >> 2], HEAP32[$3 + 112 >> 2], HEAP32[$3 + 116 >> 2], HEAP32[$3 + 120 >> 2], 1, HEAP32[$3 + 96 >> 2], HEAP32[$3 + 100 >> 2], HEAP8[$3 + 159 | 0] & 1);
     HEAPF64[$3 + 16 >> 3] = getDstChangeTime(HEAP32[$3 + 144 >> 2], HEAP32[$3 + 124 >> 2], HEAP32[$3 + 128 >> 2], HEAP32[$3 + 132 >> 2], HEAP32[$3 + 136 >> 2], HEAP32[$3 + 140 >> 2], 0, HEAP32[$3 + 96 >> 2], HEAP32[$3 + 100 >> 2], HEAP8[$3 + 159 | 0] & 1);
     label$9: {
      if (HEAPF64[$3 + 24 >> 3] < HEAPF64[$3 + 16 >> 3]) {
       $4 = HEAPF64[$3 + 32 >> 3] >= HEAPF64[$3 + 24 >> 3] ? HEAPF64[$3 + 32 >> 3] < HEAPF64[$3 + 16 >> 3] : $4;
       HEAP8[$3 + 15 | 0] = $4;
       break label$9;
      }
      $1 = 1;
      $1 = HEAPF64[$3 + 32 >> 3] < HEAPF64[$3 + 16 >> 3] ? $1 : HEAPF64[$3 + 32 >> 3] >= HEAPF64[$3 + 24 >> 3];
      HEAP8[$3 + 15 | 0] = $1;
     }
     if (HEAP32[$3 + 152 >> 2]) {
      HEAP8[HEAP32[$3 + 152 >> 2]] = HEAP8[$3 + 15 | 0] & 1;
     }
     if (HEAP8[$3 + 15 | 0] & 1) {
      $1 = HEAP32[$3 + 96 >> 2] + HEAP32[$3 + 100 >> 2] | 0;
     } else {
      $1 = HEAP32[$3 + 100 >> 2];
     }
     HEAP32[$3 + 172 >> 2] = $1;
     break label$1;
    }
    break label$2;
   }
   jsvUnLock(HEAP32[$3 + 148 >> 2]);
  }
  if (HEAP32[$3 + 152 >> 2]) {
   HEAP8[HEAP32[$3 + 152 >> 2]] = 0;
  }
  HEAP32[$3 + 172 >> 2] = jsvGetIntegerAndUnLock(jsvObjectGetChildIfExists(HEAP32[86751], 111535));
 }
 __stack_pointer = $3 + 176 | 0;
 return HEAP32[$3 + 172 >> 2];
}

function tflite__reference_ops__FullyConnected_28tflite__FullyConnectedParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = Math_fround(0);
 $9 = __stack_pointer - 96 | 0;
 __stack_pointer = $9;
 HEAP32[$9 + 92 >> 2] = $0;
 HEAP32[$9 + 88 >> 2] = $1;
 HEAP32[$9 + 84 >> 2] = $2;
 HEAP32[$9 + 80 >> 2] = $3;
 HEAP32[$9 + 76 >> 2] = $4;
 HEAP32[$9 + 72 >> 2] = $5;
 HEAP32[$9 + 68 >> 2] = $6;
 HEAP32[$9 + 64 >> 2] = $7;
 HEAP32[$9 + 60 >> 2] = $8;
 HEAPF32[$9 + 56 >> 2] = HEAPF32[HEAP32[$9 + 92 >> 2] + 28 >> 2];
 HEAPF32[$9 + 52 >> 2] = HEAPF32[HEAP32[$9 + 92 >> 2] + 32 >> 2];
 HEAP32[$9 + 48 >> 2] = tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$9 + 64 >> 2]);
 HEAP32[$9 + 44 >> 2] = tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$9 + 80 >> 2]);
 HEAP32[$9 + 40 >> 2] = tflite__FlatSizeSkipDim_28tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$9 + 64 >> 2], HEAP32[$9 + 48 >> 2] - 1 | 0);
 HEAP32[$9 + 36 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$9 + 80 >> 2], HEAP32[$9 + 44 >> 2] - 2 | 0, HEAP32[$9 + 64 >> 2], HEAP32[$9 + 48 >> 2] - 1 | 0);
 HEAP32[$9 + 32 >> 2] = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$9 + 80 >> 2], HEAP32[$9 + 44 >> 2] - 1 | 0);
 HEAP32[$9 + 28 >> 2] = 0;
 while (1) {
  if (HEAP32[$9 + 28 >> 2] < HEAP32[$9 + 40 >> 2]) {
   HEAP32[$9 + 24 >> 2] = 0;
   while (1) {
    if (HEAP32[$9 + 24 >> 2] < HEAP32[$9 + 36 >> 2]) {
     HEAPF32[$9 + 20 >> 2] = 0;
     HEAP32[$9 + 16 >> 2] = 0;
     while (1) {
      if (HEAP32[$9 + 16 >> 2] < HEAP32[$9 + 32 >> 2]) {
       HEAPF32[$9 + 20 >> 2] = Math_fround(HEAPF32[HEAP32[$9 + 84 >> 2] + (HEAP32[$9 + 16 >> 2] + Math_imul(HEAP32[$9 + 28 >> 2], HEAP32[$9 + 32 >> 2]) << 2) >> 2] * HEAPF32[HEAP32[$9 + 76 >> 2] + (HEAP32[$9 + 16 >> 2] + Math_imul(HEAP32[$9 + 24 >> 2], HEAP32[$9 + 32 >> 2]) << 2) >> 2]) + HEAPF32[$9 + 20 >> 2];
       HEAP32[$9 + 16 >> 2] = HEAP32[$9 + 16 >> 2] + 1;
       continue;
      }
      break;
     }
     HEAPF32[$9 + 12 >> 2] = 0;
     if (HEAP32[$9 + 68 >> 2]) {
      HEAPF32[$9 + 12 >> 2] = HEAPF32[HEAP32[$9 + 68 >> 2] + (HEAP32[$9 + 24 >> 2] << 2) >> 2];
     }
     $10 = float_20tflite__ActivationFunctionWithMinMax_float__28float_2c_20float_2c_20float_29(Math_fround(HEAPF32[$9 + 20 >> 2] + HEAPF32[$9 + 12 >> 2]), HEAPF32[$9 + 56 >> 2], HEAPF32[$9 + 52 >> 2]);
     HEAPF32[HEAP32[$9 + 60 >> 2] + (HEAP32[$9 + 24 >> 2] + Math_imul(HEAP32[$9 + 36 >> 2], HEAP32[$9 + 28 >> 2]) << 2) >> 2] = $10;
     HEAP32[$9 + 24 >> 2] = HEAP32[$9 + 24 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$9 + 28 >> 2] = HEAP32[$9 + 28 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $9 + 96 | 0;
}

function tflite__ops__micro__conv__EvalQuantizedPerChannel_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteConvParams__2c_20tflite__ops__micro__conv__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__2c_20TfLiteEvalTensor__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0;
 $9 = __stack_pointer - 192 | 0;
 __stack_pointer = $9;
 HEAP32[$9 + 188 >> 2] = $0;
 HEAP32[$9 + 184 >> 2] = $1;
 HEAP32[$9 + 180 >> 2] = $2;
 HEAP32[$9 + 176 >> 2] = $3;
 HEAP32[$9 + 172 >> 2] = $4;
 HEAP32[$9 + 168 >> 2] = $5;
 HEAP32[$9 + 164 >> 2] = $6;
 HEAP32[$9 + 160 >> 2] = $7;
 HEAP32[$9 + 156 >> 2] = $8;
 HEAP32[$9 + 116 >> 2] = 0 - HEAP32[HEAP32[$9 + 176 >> 2] + 16 >> 2];
 HEAP32[$9 + 124 >> 2] = HEAP32[HEAP32[$9 + 176 >> 2] + 24 >> 2];
 HEAP16[$9 + 108 >> 1] = HEAP32[HEAP32[$9 + 180 >> 2] + 8 >> 2];
 HEAP16[$9 + 106 >> 1] = HEAP32[HEAP32[$9 + 180 >> 2] + 4 >> 2];
 HEAP16[$9 + 112 >> 1] = HEAP32[HEAP32[$9 + 180 >> 2] + 20 >> 2];
 HEAP16[$9 + 110 >> 1] = HEAP32[HEAP32[$9 + 180 >> 2] + 16 >> 2];
 HEAP16[$9 + 100 >> 1] = HEAP32[HEAP32[$9 + 176 >> 2] + 4 >> 2];
 HEAP16[$9 + 98 >> 1] = HEAP32[HEAP32[$9 + 176 >> 2] >> 2];
 HEAP32[$9 + 136 >> 2] = HEAP32[HEAP32[$9 + 176 >> 2] + 44 >> 2];
 HEAP32[$9 + 140 >> 2] = HEAP32[HEAP32[$9 + 176 >> 2] + 48 >> 2];
 $0 = HEAP32[HEAP32[$9 + 176 >> 2] + 36 >> 2];
 $1 = HEAP32[HEAP32[$9 + 176 >> 2] + 40 >> 2];
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($9 + 72 | 0, HEAP32[$9 + 172 >> 2]);
 $2 = signed_20char_20const__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor_20const__29(HEAP32[$9 + 172 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($9 + 48 | 0, HEAP32[$9 + 168 >> 2]);
 $3 = signed_20char_20const__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor_20const__29(HEAP32[$9 + 168 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($9 + 24 | 0, HEAP32[$9 + 164 >> 2]);
 $4 = int_20const__20tflite__micro__GetTensorData_int__28TfLiteEvalTensor_20const__29(HEAP32[$9 + 164 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($9, HEAP32[$9 + 160 >> 2]);
 tflite__reference_integer_ops__ConvPerChannel_28tflite__ConvParams_20const__2c_20int_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($9 + 96 | 0, $0, $1, $9 + 72 | 0, $2, $9 + 48 | 0, $3, $9 + 24 | 0, $4, $9, signed_20char__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor__29(HEAP32[$9 + 160 >> 2]));
 tflite__RuntimeShape___RuntimeShape_28_29($9);
 tflite__RuntimeShape___RuntimeShape_28_29($9 + 24 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($9 + 48 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($9 + 72 | 0);
 __stack_pointer = $9 + 192 | 0;
}

function tflite__ops__micro__dequantize__Prepare_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 96 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 88 >> 2] = $0;
 HEAP32[$2 + 84 >> 2] = $1;
 label$1: {
  if (!HEAP32[HEAP32[$2 + 84 >> 2] + 8 >> 2]) {
   break label$1;
  }
 }
 HEAP32[$2 + 80 >> 2] = HEAP32[HEAP32[$2 + 84 >> 2] + 8 >> 2];
 label$2: {
  if ((tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 84 >> 2]) | 0) != 1) {
   $0 = HEAP32[HEAP32[$2 + 88 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 88 >> 2];
   $3 = tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 84 >> 2]);
   HEAP32[$2 + 12 >> 2] = 1;
   HEAP32[$2 + 8 >> 2] = $3;
   HEAP32[$2 + 4 >> 2] = 126714;
   HEAP32[$2 >> 2] = 142838;
   FUNCTION_TABLE[$0 | 0]($1, 143069, $2);
   HEAP32[$2 + 92 >> 2] = 1;
   break label$2;
  }
  if ((tflite__NumOutputs_28TfLiteNode_20const__29(HEAP32[$2 + 84 >> 2]) | 0) != 1) {
   $0 = HEAP32[HEAP32[$2 + 88 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 88 >> 2];
   $3 = tflite__NumOutputs_28TfLiteNode_20const__29(HEAP32[$2 + 84 >> 2]);
   HEAP32[$2 + 28 >> 2] = 1;
   HEAP32[$2 + 24 >> 2] = $3;
   HEAP32[$2 + 20 >> 2] = 126714;
   HEAP32[$2 + 16 >> 2] = 142821;
   FUNCTION_TABLE[$0 | 0]($1, 143069, $2 + 16 | 0);
   HEAP32[$2 + 92 >> 2] = 1;
   break label$2;
  }
  HEAP32[$2 + 76 >> 2] = tflite__GetInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 88 >> 2], HEAP32[$2 + 84 >> 2], 0);
  HEAP32[$2 + 72 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 88 >> 2], HEAP32[$2 + 84 >> 2], 0);
  if (!(HEAP32[HEAP32[$2 + 76 >> 2] + 28 >> 2] == 3 | HEAP32[HEAP32[$2 + 76 >> 2] + 28 >> 2] == 9 | HEAP32[HEAP32[$2 + 76 >> 2] + 28 >> 2] == 7)) {
   $0 = HEAP32[HEAP32[$2 + 88 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 88 >> 2];
   HEAP32[$2 + 48 >> 2] = 126037;
   FUNCTION_TABLE[$0 | 0]($1, 127303, $2 + 48 | 0);
   HEAP32[$2 + 92 >> 2] = 1;
   break label$2;
  }
  if (!(HEAP32[HEAP32[$2 + 72 >> 2] + 28 >> 2] == 1 | HEAP32[HEAP32[$2 + 72 >> 2] + 28 >> 2] == 2)) {
   $0 = HEAP32[HEAP32[$2 + 88 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 88 >> 2];
   HEAP32[$2 + 32 >> 2] = 126369;
   FUNCTION_TABLE[$0 | 0]($1, 127303, $2 + 32 | 0);
   HEAP32[$2 + 92 >> 2] = 1;
   break label$2;
  }
  if (HEAP32[HEAP32[$2 + 72 >> 2] + 28 >> 2] == 2) {
   HEAPF64[$2 + 64 >> 3] = +HEAPF32[HEAP32[$2 + 76 >> 2] + 8 >> 2] / +HEAPF32[HEAP32[$2 + 72 >> 2] + 8 >> 2];
   tflite__QuantizeMultiplier_28double_2c_20int__2c_20int__29(HEAPF64[$2 + 64 >> 3], HEAP32[$2 + 80 >> 2] + 16 | 0, HEAP32[$2 + 80 >> 2] + 20 | 0);
  }
  HEAP32[HEAP32[$2 + 80 >> 2] + 8 >> 2] = HEAP32[HEAP32[$2 + 76 >> 2] + 12 >> 2];
  HEAPF64[HEAP32[$2 + 80 >> 2] >> 3] = HEAPF32[HEAP32[$2 + 76 >> 2] + 8 >> 2];
  HEAP32[HEAP32[$2 + 80 >> 2] + 24 >> 2] = HEAP32[HEAP32[$2 + 72 >> 2] + 12 >> 2];
  HEAP32[$2 + 92 >> 2] = 0;
 }
 __stack_pointer = $2 + 96 | 0;
 return HEAP32[$2 + 92 >> 2];
}

function atan2($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $2 = __DOUBLE_BITS_13($1);
 $4 = $2;
 $3 = i64toi32_i32$HIGH_BITS;
 $2 = $3 & 2147483647;
 $3 = $4;
 label$1: {
  if (!$3 & ($2 | 0) == 2146435072 | $2 >>> 0 < 2146435072) {
   $3 = __DOUBLE_BITS_13($0);
   $5 = $3;
   $2 = i64toi32_i32$HIGH_BITS;
   $3 = $2 & 2147483647;
   $2 = $5;
   if (!$2 & ($3 | 0) == 2146435072 | $3 >>> 0 < 2146435072) {
    break label$1;
   }
  }
  return $0 + $1;
 }
 wasm2js_scratch_store_f64(+$1);
 $2 = wasm2js_scratch_load_i32(1) | 0;
 $5 = wasm2js_scratch_load_i32(0) | 0;
 $4 = $5;
 $6 = $2;
 $10 = $4;
 if (!($4 | $2 - 1072693248)) {
  return atan($0);
 }
 wasm2js_scratch_store_f64(+$0);
 $3 = wasm2js_scratch_load_i32(1) | 0;
 $5 = wasm2js_scratch_load_i32(0) | 0;
 $9 = $6 >>> 30 & 2;
 $7 = $9 | $3 >>> 31;
 $4 = $3;
 $3 = $5;
 $2 = $4;
 $4 = $2 & 2147483647;
 label$4: {
  if (!($3 | $4)) {
   label$6: {
    switch ($7 - 2 | 0) {
    case 0:
     return 3.141592653589793;

    case 1:
     break label$6;

    default:
     break label$4;
    }
   }
   return -3.141592653589793;
  }
  $6 = $6 & 2147483647;
  if (!($10 | $6)) {
   wasm2js_scratch_store_f64(1.5707963267948966);
   $2 = wasm2js_scratch_load_i32(1) | 0;
   $4 = wasm2js_scratch_load_i32(0) | 0;
   $5 = $4;
   $3 = $2 & 2147483647;
   $6 = $3;
   wasm2js_scratch_store_f64(+$0);
   $3 = wasm2js_scratch_load_i32(1) | 0;
   wasm2js_scratch_load_i32(0) | 0;
   $4 = $3 & -2147483648;
   $3 = $5;
   $5 = $11;
   wasm2js_scratch_store_i32(0, $3 | $5);
   $2 = $4;
   $4 = $6;
   $2 = $2 | $4;
   wasm2js_scratch_store_i32(1, $2 | 0);
   return +wasm2js_scratch_load_f64();
  }
  label$9: {
   if (($6 | 0) == 2146435072) {
    if (($4 | 0) != 2146435072) {
     break label$9;
    }
    return HEAPF64[($7 << 3) + 173120 >> 3];
   }
   if (!(($4 | 0) != 2146435072 & $6 + 67108864 >>> 0 >= $4 >>> 0)) {
    wasm2js_scratch_store_f64(1.5707963267948966);
    $2 = wasm2js_scratch_load_i32(1) | 0;
    $4 = wasm2js_scratch_load_i32(0) | 0;
    $5 = $4;
    $3 = $2 & 2147483647;
    $6 = $3;
    wasm2js_scratch_store_f64(+$0);
    $3 = wasm2js_scratch_load_i32(1) | 0;
    wasm2js_scratch_load_i32(0) | 0;
    $4 = $3 & -2147483648;
    $3 = $5;
    $5 = $11;
    wasm2js_scratch_store_i32(0, $3 | $5);
    $2 = $4;
    $4 = $6;
    $2 = $2 | $4;
    wasm2js_scratch_store_i32(1, $2 | 0);
    return +wasm2js_scratch_load_f64();
   }
   label$12: {
    if ($9) {
     $8 = 0;
     if ($4 + 67108864 >>> 0 < $6 >>> 0) {
      break label$12;
     }
    }
    $8 = atan(fabs($0 / $1));
   }
   $0 = $8;
   label$14: {
    switch ($7 | 0) {
    case 1:
     return -$0;

    case 2:
     return 3.141592653589793 - ($0 + -12246467991473532e-32);

    case 0:
     break label$4;

    default:
     break label$14;
    }
   }
   return $0 + -12246467991473532e-32 + -3.141592653589793;
  }
  $0 = HEAPF64[($7 << 3) + 173152 >> 3];
 }
 return $0;
}

function jswrap_arraybufferview_set($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 176 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 172 >> 2] = $0;
 HEAP32[$3 + 168 >> 2] = $1;
 HEAP32[$3 + 164 >> 2] = $2;
 label$1: {
  label$2: {
   if (jsvIsString(HEAP32[$3 + 168 >> 2]) & 1) {
    break label$2;
   }
   if (jsvIsArray(HEAP32[$3 + 168 >> 2]) & 1) {
    break label$2;
   }
   if (jsvIsArrayBuffer(HEAP32[$3 + 168 >> 2]) & 1) {
    break label$2;
   }
   HEAP32[$3 >> 2] = HEAP32[$3 + 168 >> 2];
   jsExceptionHere(1, 113306, $3);
   break label$1;
  }
  label$3: {
   if (!(jsvIsArrayBuffer(HEAP32[$3 + 172 >> 2]) & 1)) {
    break label$3;
   }
   if (!(jsvIsArrayBuffer(HEAP32[$3 + 168 >> 2]) & 1)) {
    break label$3;
   }
   HEAP32[$3 + 160 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$3 + 172 >> 2], 0);
   HEAP32[$3 + 156 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$3 + 168 >> 2], 0);
   if (HEAP32[$3 + 160 >> 2] == HEAP32[$3 + 156 >> 2]) {
    $0 = HEAP32[$3 + 172 >> 2];
    $1 = HEAP32[$3 + 168 >> 2];
    $4 = (Math_imul(HEAP32[$3 + 164 >> 2], HEAPU8[HEAP32[$3 + 172 >> 2] + 5 | 0] & 15) + (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8) | 0) >= (HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8);
   }
   HEAP8[$3 + 155 | 0] = $4;
   jsvUnLock2(HEAP32[$3 + 160 >> 2], HEAP32[$3 + 156 >> 2]);
   if (HEAP8[$3 + 155 | 0] & 1) {
    HEAP32[$3 + 148 >> 2] = jsvGetArrayBufferLength(HEAP32[$3 + 168 >> 2]);
    HEAP32[$3 + 144 >> 2] = HEAP32[$3 + 148 >> 2] - 1;
    while (1) {
     if (HEAP32[$3 + 144 >> 2] >= 0) {
      HEAP32[$3 + 140 >> 2] = jsvArrayBufferGet(HEAP32[$3 + 168 >> 2], HEAP32[$3 + 144 >> 2]);
      jsvArrayBufferSet(HEAP32[$3 + 172 >> 2], HEAP32[$3 + 164 >> 2] + HEAP32[$3 + 144 >> 2] | 0, HEAP32[$3 + 140 >> 2]);
      jsvUnLock(HEAP32[$3 + 140 >> 2]);
      HEAP32[$3 + 144 >> 2] = HEAP32[$3 + 144 >> 2] - 1;
      continue;
     }
     break;
    }
    break label$1;
   }
  }
  jsvIteratorNew($3 + 80 | 0, HEAP32[$3 + 168 >> 2], 1);
  jsvArrayBufferIteratorNew($3 + 24 | 0, HEAP32[$3 + 172 >> 2], HEAP32[$3 + 164 >> 2]);
  $0 = 1;
  if (HEAPU8[$3 + 60 | 0] & 32) {
   $0 = jsvIsString(HEAP32[$3 + 168 >> 2]);
  }
  HEAP8[$3 + 23 | 0] = $0 & 1;
  while (1) {
   $0 = 0;
   if (jsvIteratorHasElement($3 + 80 | 0) & 1) {
    $0 = jsvArrayBufferIteratorHasElement($3 + 24 | 0);
   }
   if ($0 & 1) {
    label$12: {
     if (HEAP8[$3 + 23 | 0] & 1) {
      jsvArrayBufferIteratorSetIntegerValue($3 + 24 | 0, jsvIteratorGetIntegerValue($3 + 80 | 0));
      break label$12;
     }
     HEAP32[$3 + 16 >> 2] = jsvIteratorGetValue($3 + 80 | 0);
     jsvArrayBufferIteratorSetValue($3 + 24 | 0, HEAP32[$3 + 16 >> 2], 0);
     jsvUnLock(HEAP32[$3 + 16 >> 2]);
    }
    jsvArrayBufferIteratorNext($3 + 24 | 0);
    jsvIteratorNext($3 + 80 | 0);
    continue;
   }
   break;
  }
  jsvArrayBufferIteratorFree($3 + 24 | 0);
  jsvIteratorFree($3 + 80 | 0);
 }
 __stack_pointer = $3 + 176 | 0;
}

function jswrap_string_removeAccents($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 112 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 104 >> 2] = $0;
 HEAP32[$1 + 96 >> 2] = jsvNewFromEmptyString_8();
 label$1: {
  if (!HEAP32[$1 + 96 >> 2]) {
   HEAP32[$1 + 108 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 92 >> 2] = jsvAsString(HEAP32[$1 + 104 >> 2]);
  jsvStringIteratorNew($1 + 56 | 0, HEAP32[$1 + 92 >> 2], 0);
  jsvStringIteratorNew($1 + 16 | 0, HEAP32[$1 + 96 >> 2], 0);
  while (1) {
   if (jsvStringIteratorHasChar_8($1 + 56 | 0) & 1) {
    HEAP8[$1 + 15 | 0] = jsvStringIteratorGetCharAndNext($1 + 56 | 0);
    label$5: {
     if (HEAP8[$1 + 15 | 0] >= 224) {
      HEAP8[$1 + 103 | 0] = 1;
      HEAP8[$1 + 15 | 0] = HEAP8[$1 + 15 | 0] - 32;
      break label$5;
     }
     HEAP8[$1 + 103 | 0] = 0;
    }
    if (HEAP8[$1 + 15 | 0] >= 192) {
     label$8: {
      label$9: {
       switch (HEAP8[$1 + 15 | 0] - 192 | 0) {
       case 0:
       case 1:
       case 2:
       case 3:
       case 4:
       case 5:
        HEAP8[$1 + 15 | 0] = 65;
        break label$8;

       case 6:
        jsvStringIteratorAppend($1 + 16 | 0, (HEAP8[$1 + 103 | 0] & 1 ? 97 : 65) << 24 >> 24);
        HEAP8[$1 + 15 | 0] = 69;
        break label$8;

       case 7:
        HEAP8[$1 + 15 | 0] = 67;
        break label$8;

       case 8:
       case 9:
       case 10:
       case 11:
        HEAP8[$1 + 15 | 0] = 69;
        break label$8;

       case 12:
       case 13:
       case 14:
       case 15:
        HEAP8[$1 + 15 | 0] = 73;
        break label$8;

       case 16:
        HEAP8[$1 + 15 | 0] = 68;
        break label$8;

       case 17:
        HEAP8[$1 + 15 | 0] = 78;
        break label$8;

       case 18:
       case 19:
       case 20:
       case 21:
       case 22:
       case 24:
        HEAP8[$1 + 15 | 0] = 79;
        break label$8;

       case 25:
       case 26:
       case 27:
       case 28:
        HEAP8[$1 + 15 | 0] = 85;
        break label$8;

       case 29:
        HEAP8[$1 + 15 | 0] = 89;
        break label$8;

       case 30:
        HEAP8[$1 + 15 | 0] = 80;
        break label$8;

       case 31:
        break label$9;

       default:
        break label$8;
       }
      }
      label$21: {
       if (HEAP8[$1 + 103 | 0] & 1) {
        HEAP8[$1 + 15 | 0] = 89;
        break label$21;
       }
       jsvStringIteratorAppend($1 + 16 | 0, 83);
       HEAP8[$1 + 15 | 0] = 83;
      }
     }
    }
    $2 = $1 + 16 | 0;
    if (HEAP8[$1 + 103 | 0] & 1) {
     $0 = HEAP8[$1 + 15 | 0] + 32 | 0;
    } else {
     $0 = HEAP8[$1 + 15 | 0];
    }
    jsvStringIteratorAppend($2, $0 << 24 >> 24);
    continue;
   }
   break;
  }
  jsvStringIteratorFree_10($1 + 56 | 0);
  jsvStringIteratorFree_10($1 + 16 | 0);
  jsvUnLock(HEAP32[$1 + 92 >> 2]);
  HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 96 >> 2];
 }
 __stack_pointer = $1 + 112 | 0;
 return HEAP32[$1 + 108 >> 2];
}

function _parse_time($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 $0 = stringToIntWithRadix(jslGetTokenValueAsString() + HEAP32[$2 + 36 >> 2] | 0, 10, 0, 0);
 HEAP32[HEAP32[$2 + 40 >> 2] + 16 >> 2] = $0;
 jslGetNextToken();
 label$1: {
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 58) {
   jslGetNextToken();
   if (HEAP16[HEAP32[44743] + 2 >> 1] == 129) {
    $0 = _parse_int();
    HEAP32[HEAP32[$2 + 40 >> 2] + 12 >> 2] = $0;
    jslGetNextToken();
    if (HEAP16[HEAP32[44743] + 2 >> 1] == 58) {
     jslGetNextToken();
     if (!(HEAP16[HEAP32[44743] + 2 >> 1] != 129 & HEAP16[HEAP32[44743] + 2 >> 1] != 130)) {
      HEAPF64[$2 + 24 >> 3] = stringToFloat(jslGetTokenValueAsString());
      $1 = HEAP32[$2 + 40 >> 2];
      $3 = HEAPF64[$2 + 24 >> 3];
      label$7: {
       if (Math_abs($3) < 2147483648) {
        $0 = ~~$3;
        break label$7;
       }
       $0 = -2147483648;
      }
      HEAP32[$1 + 8 >> 2] = $0;
      $1 = HEAP32[$2 + 40 >> 2];
      $3 = HEAPF64[$2 + 24 >> 3] * 1e3;
      label$9: {
       if (Math_abs($3) < 2147483648) {
        $0 = ~~$3;
        break label$9;
       }
       $0 = -2147483648;
      }
      HEAP32[$1 + 4 >> 2] = ($0 | 0) % 1e3;
      jslGetNextToken();
      if (HEAP16[HEAP32[44743] + 2 >> 1] == 128) {
       HEAP32[$2 + 20 >> 2] = jslGetTokenValueAsString();
       label$12: {
        label$13: {
         if (strcmp(HEAP32[$2 + 20 >> 2], 123813)) {
          if (strcmp(HEAP32[$2 + 20 >> 2], 123440)) {
           break label$13;
          }
         }
         HEAP32[HEAP32[$2 + 40 >> 2] + 20 >> 2] = 0;
         jslGetNextToken();
         if (!HEAP16[HEAP32[44743] + 2 >> 1]) {
          HEAP8[$2 + 47 | 0] = 1;
          break label$1;
         }
         break label$12;
        }
        setCorrectTimeZone(HEAP32[$2 + 40 >> 2]);
       }
      }
      label$16: {
       if (!(HEAP16[HEAP32[44743] + 2 >> 1] != 43 & HEAP16[HEAP32[44743] + 2 >> 1] != 45)) {
        HEAP32[$2 + 16 >> 2] = HEAP16[HEAP32[44743] + 2 >> 1] == 43 ? 1 : -1;
        jslGetNextToken();
        label$19: {
         if (HEAP16[HEAP32[44743] + 2 >> 1] == 129) {
          HEAP32[$2 + 12 >> 2] = _parse_int();
          HEAP32[$2 + 12 >> 2] = Math_imul(HEAP32[$2 + 12 >> 2] / 100 | 0, 60) + (HEAP32[$2 + 12 >> 2] % 100 | 0);
          HEAP32[HEAP32[$2 + 40 >> 2] + 20 >> 2] = Math_imul(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 16 >> 2]);
          jslGetNextToken();
          break label$19;
         }
         setCorrectTimeZone(HEAP32[$2 + 40 >> 2]);
        }
        break label$16;
       }
       setCorrectTimeZone(HEAP32[$2 + 40 >> 2]);
      }
      HEAP8[$2 + 47 | 0] = 1;
      break label$1;
     }
    }
   }
  }
  setCorrectTimeZone(HEAP32[$2 + 40 >> 2]);
  HEAP8[$2 + 47 | 0] = 0;
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP8[$2 + 47 | 0] & 1;
}

function jslNewStringFromLexer($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 128 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 120 >> 2] = $0;
 HEAP32[$2 + 116 >> 2] = $1;
 HEAP32[$2 + 112 >> 2] = (HEAP32[$2 + 116 >> 2] + 1 | 0) - jsvStringIteratorGetIndex(HEAP32[$2 + 120 >> 2]);
 HEAP32[$2 + 108 >> 2] = 0;
 label$1: {
  if (HEAPU32[$2 + 112 >> 2] > 19) {
   HEAP32[$2 + 108 >> 2] = jsvNewFlatStringOfLength(HEAP32[$2 + 112 >> 2]);
   if (HEAP32[$2 + 108 >> 2]) {
    HEAP32[$2 + 104 >> 2] = jsvGetFlatStringPointer(HEAP32[$2 + 108 >> 2]);
    $1 = HEAPU8[HEAP32[$2 + 120 >> 2] + 36 | 0];
    $0 = HEAP32[$2 + 104 >> 2];
    HEAP32[$2 + 104 >> 2] = $0 + 1;
    HEAP8[$0 | 0] = $1;
    jsvStringIteratorClone($2 - -64 | 0, HEAP32[$2 + 120 >> 2]);
    while (1) {
     $0 = 0;
     if (jsvStringIteratorHasChar($2 - -64 | 0) & 1) {
      $0 = HEAP32[$2 + 112 >> 2] - 1 | 0;
      HEAP32[$2 + 112 >> 2] = $0;
      $0 = ($0 | 0) != 0;
     }
     if ($0) {
      $1 = jsvStringIteratorGetCharAndNext($2 - -64 | 0);
      $0 = HEAP32[$2 + 104 >> 2];
      HEAP32[$2 + 104 >> 2] = $0 + 1;
      HEAP8[$0 | 0] = $1;
      continue;
     }
     break;
    }
    jsvStringIteratorFree($2 - -64 | 0);
    HEAP32[$2 + 124 >> 2] = HEAP32[$2 + 108 >> 2];
    break label$1;
   }
  }
  HEAP32[$2 + 108 >> 2] = jsvNewFromEmptyString();
  if (!HEAP32[$2 + 108 >> 2]) {
   HEAP32[$2 + 124 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 60 >> 2] = jsvLockAgain(HEAP32[$2 + 108 >> 2]);
  HEAP8[HEAP32[$2 + 60 >> 2]] = HEAPU8[HEAP32[$2 + 120 >> 2] + 36 | 0];
  HEAP32[$2 + 56 >> 2] = 1;
  jsvStringIteratorClone($2 + 16 | 0, HEAP32[$2 + 120 >> 2]);
  while (1) {
   $0 = 0;
   if (jsvStringIteratorHasChar($2 + 16 | 0) & 1) {
    $0 = HEAP32[$2 + 112 >> 2] - 1 | 0;
    HEAP32[$2 + 112 >> 2] = $0;
    $0 = ($0 | 0) != 0;
   }
   label$10: {
    if (!$0) {
     break label$10;
    }
    HEAP8[$2 + 15 | 0] = jsvStringIteratorGetCharAndNext($2 + 16 | 0);
    if (HEAPU32[$2 + 56 >> 2] >= jsvGetMaxCharactersInVar(HEAP32[$2 + 60 >> 2]) >>> 0) {
     jsvSetCharactersInVar(HEAP32[$2 + 60 >> 2], HEAP32[$2 + 56 >> 2]);
     HEAP32[$2 + 8 >> 2] = jsvNewWithFlags(41);
     if (!HEAP32[$2 + 8 >> 2]) {
      break label$10;
     }
     jsvSetLastChild(HEAP32[$2 + 60 >> 2], jsvGetRef(HEAP32[$2 + 8 >> 2]) & 65535);
     jsvUnLock(HEAP32[$2 + 60 >> 2]);
     HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 8 >> 2];
     HEAP32[$2 + 56 >> 2] = 0;
    }
    $1 = HEAPU8[$2 + 15 | 0];
    $3 = HEAP32[$2 + 60 >> 2];
    $0 = HEAP32[$2 + 56 >> 2];
    HEAP32[$2 + 56 >> 2] = $0 + 1;
    HEAP8[$3 + $0 | 0] = $1;
    continue;
   }
   break;
  }
  jsvSetCharactersInVar(HEAP32[$2 + 60 >> 2], HEAP32[$2 + 56 >> 2]);
  jsvUnLock(HEAP32[$2 + 60 >> 2]);
  jsvStringIteratorFree($2 + 16 | 0);
  HEAP32[$2 + 124 >> 2] = HEAP32[$2 + 108 >> 2];
 }
 __stack_pointer = $2 + 128 | 0;
 return HEAP32[$2 + 124 >> 2];
}

function tflite__ops__micro__depthwise_conv__EvalFloat_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteDepthwiseConvParams__2c_20tflite__ops__micro__depthwise_conv___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0;
 $8 = __stack_pointer - 208 | 0;
 __stack_pointer = $8;
 HEAP32[$8 + 204 >> 2] = $0;
 HEAP32[$8 + 200 >> 2] = $1;
 HEAP32[$8 + 196 >> 2] = $2;
 HEAP32[$8 + 192 >> 2] = $3;
 HEAP32[$8 + 188 >> 2] = $4;
 HEAP32[$8 + 184 >> 2] = $5;
 HEAP32[$8 + 180 >> 2] = $6;
 HEAP32[$8 + 176 >> 2] = $7;
 void_20tflite__CalculateActivationRange_float__28TfLiteFusedActivation_2c_20float__2c_20float__29(HEAP32[HEAP32[$8 + 196 >> 2] + 16 >> 2], $8 + 172 | 0, $8 + 168 | 0);
 HEAP8[$8 + 104 | 0] = 1;
 HEAP16[$8 + 106 >> 1] = HEAP32[HEAP32[$8 + 192 >> 2] >> 2];
 HEAP16[$8 + 108 >> 1] = HEAP32[HEAP32[$8 + 192 >> 2] + 4 >> 2];
 HEAP16[$8 + 114 >> 1] = HEAP32[HEAP32[$8 + 196 >> 2] + 4 >> 2];
 HEAP16[$8 + 116 >> 1] = HEAP32[HEAP32[$8 + 196 >> 2] + 8 >> 2];
 HEAP16[$8 + 118 >> 1] = HEAP32[HEAP32[$8 + 196 >> 2] + 20 >> 2];
 HEAP16[$8 + 120 >> 1] = HEAP32[HEAP32[$8 + 196 >> 2] + 24 >> 2];
 HEAP16[$8 + 122 >> 1] = HEAP32[HEAP32[$8 + 196 >> 2] + 12 >> 2];
 HEAPF32[$8 + 152 >> 2] = HEAPF32[$8 + 172 >> 2];
 HEAPF32[$8 + 156 >> 2] = HEAPF32[$8 + 168 >> 2];
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($8 + 80 | 0, HEAP32[$8 + 188 >> 2]);
 $0 = float_20const__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor_20const__29(HEAP32[$8 + 188 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($8 + 56 | 0, HEAP32[$8 + 184 >> 2]);
 $1 = float_20const__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor_20const__29(HEAP32[$8 + 184 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($8 + 32 | 0, HEAP32[$8 + 180 >> 2]);
 $2 = float_20const__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor_20const__29(HEAP32[$8 + 180 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($8 + 8 | 0, HEAP32[$8 + 176 >> 2]);
 tflite__reference_ops__DepthwiseConv_28tflite__DepthwiseParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($8 + 104 | 0, $8 + 80 | 0, $0, $8 + 56 | 0, $1, $8 + 32 | 0, $2, $8 + 8 | 0, float__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor__29(HEAP32[$8 + 176 >> 2]));
 tflite__RuntimeShape___RuntimeShape_28_29($8 + 8 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($8 + 32 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($8 + 56 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($8 + 80 | 0);
 __stack_pointer = $8 + 208 | 0;
}

function _jswrap_graphics_stringMetrics($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 208 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 204 >> 2] = $0;
 HEAP32[$4 + 200 >> 2] = $1;
 HEAP32[$4 + 196 >> 2] = $2;
 HEAP32[$4 + 192 >> 2] = $3;
 _jswrap_graphics_getFontInfo(HEAP32[$4 + 204 >> 2], $4 + 168 | 0);
 $0 = HEAP32[$4 + 192 >> 2];
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$4 + 164 >> 2] = _jswrap_graphics_getFontHeightInternal(HEAP32[$4 + 204 >> 2], $4 + 168 | 0);
 HEAP32[$4 + 160 >> 2] = jsvAsString(HEAP32[$4 + 200 >> 2]);
 jsvStringIteratorNewUTF8($4 + 120 | 0, HEAP32[$4 + 160 >> 2], HEAP32[$4 + 196 >> 2] < 0 ? 0 : HEAP32[$4 + 196 >> 2]);
 HEAP32[$4 + 116 >> 2] = 0;
 HEAP32[$4 + 112 >> 2] = HEAP32[$4 + 164 >> 2];
 HEAP32[$4 + 108 >> 2] = 0;
 while (1) {
  label$4: {
   if (!(jsvStringIteratorHasChar_12($4 + 120 | 0) & 1)) {
    break label$4;
   }
   HEAP32[$4 + 104 >> 2] = jsvStringIteratorGetUTF8CharAndNext($4 + 120 | 0);
   if (HEAP32[$4 + 104 >> 2] == 10) {
    if (HEAP32[$4 + 116 >> 2] > HEAP32[$4 + 108 >> 2]) {
     HEAP32[$4 + 108 >> 2] = HEAP32[$4 + 116 >> 2];
    }
    HEAP32[$4 + 116 >> 2] = 0;
    HEAP32[$4 + 112 >> 2] = HEAP32[$4 + 164 >> 2] + HEAP32[$4 + 112 >> 2];
    if (HEAP32[$4 + 196 >> 2] >= 0) {
     break label$4;
    }
   }
   if (!HEAP32[$4 + 104 >> 2]) {
    $0 = HEAP32[$4 + 192 >> 2];
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
    HEAP32[$4 + 12 >> 2] = jsvConvertToUTF8Index(HEAP32[$4 + 160 >> 2], jsvStringIteratorGetIndex_6($4 + 120 | 0));
    if (_jswrap_graphics_parseImage(HEAP32[$4 + 204 >> 2], HEAP32[$4 + 160 >> 2], HEAP32[$4 + 12 >> 2], $4 + 16 | 0) & 1) {
     jsvStringIteratorGotoUTF8($4 + 120 | 0, HEAP32[$4 + 160 >> 2], HEAPU16[$4 + 66 >> 1] + (HEAP32[$4 + 12 >> 2] + HEAPU16[$4 + 64 >> 1] | 0) | 0);
     _jswrap_graphics_freeImageInfo($4 + 16 | 0);
     HEAP32[$4 + 116 >> 2] = HEAP32[$4 + 16 >> 2] + HEAP32[$4 + 116 >> 2];
     if (HEAP32[$4 + 20 >> 2] > HEAP32[HEAP32[$4 + 192 >> 2] + 16 >> 2]) {
      HEAP32[HEAP32[$4 + 192 >> 2] + 16 >> 2] = HEAP32[$4 + 20 >> 2];
     }
    }
    continue;
   }
   HEAP32[$4 + 8 >> 2] = _jswrap_graphics_getCharWidth($4 + 168 | 0, HEAP32[$4 + 104 >> 2]);
   HEAP32[$4 + 116 >> 2] = HEAP32[$4 + 8 >> 2] + HEAP32[$4 + 116 >> 2];
   if (!HEAP32[$4 + 8 >> 2]) {
    HEAP8[HEAP32[$4 + 192 >> 2] + 8 | 0] = 1;
   }
   continue;
  }
  break;
 }
 jsvStringIteratorFree_16($4 + 120 | 0);
 jsvUnLock(HEAP32[$4 + 160 >> 2]);
 $1 = HEAP32[$4 + 192 >> 2];
 if (HEAP32[$4 + 116 >> 2] > HEAP32[$4 + 108 >> 2]) {
  $0 = HEAP32[$4 + 116 >> 2];
 } else {
  $0 = HEAP32[$4 + 108 >> 2];
 }
 HEAP32[$1 >> 2] = $0;
 HEAP32[HEAP32[$4 + 192 >> 2] + 4 >> 2] = HEAP32[$4 + 112 >> 2];
 _jswrap_graphics_freeFontInfo($4 + 168 | 0);
 __stack_pointer = $4 + 208 | 0;
}

function jswrap_spi_send($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 304 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 296 >> 2] = $0;
 HEAP32[$3 + 292 >> 2] = $1;
 HEAP8[$3 + 291 | 0] = $2;
 label$1: {
  if (!(jsvIsObject(HEAP32[$3 + 296 >> 2]) & 1)) {
   HEAP32[$3 + 300 >> 2] = 0;
   break label$1;
  }
  HEAP8[$3 + 290 | 0] = jsiGetDeviceFromClass(HEAP32[$3 + 296 >> 2]);
  if (!(jsspiGetSendFunction(HEAP32[$3 + 296 >> 2], $3 + 200 | 0, $3 + 204 | 0) & 1)) {
   HEAP32[$3 + 300 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 196 >> 2] = 0;
  if (!(HEAPU8[$3 + 290 | 0] < 25 | HEAPU8[$3 + 290 | 0] > 25)) {
   jshSPISetReceive(HEAPU8[$3 + 290 | 0], 1);
  }
  if (HEAPU8[$3 + 291 | 0] != 255) {
   jshPinOutput(HEAPU8[$3 + 291 | 0], 0);
  }
  label$6: {
   if (jsvIsNumeric(HEAP32[$3 + 292 >> 2]) & 1) {
    HEAP8[$3 + 195 | 0] = jsvGetInteger(HEAP32[$3 + 292 >> 2]);
    $0 = $3 + 195 | 0;
    FUNCTION_TABLE[HEAP32[$3 + 200 >> 2]]($0, $0, 1, $3 + 204 | 0);
    HEAP32[$3 + 196 >> 2] = jsvNewFromInteger(HEAPU8[$3 + 195 | 0]);
    break label$6;
   }
   label$8: {
    if (jsvIsString(HEAP32[$3 + 292 >> 2]) & 1) {
     HEAP32[$3 + 196 >> 2] = jsvNewFromEmptyString_12();
     jsvStringIteratorNew($3 + 24 | 0, HEAP32[$3 + 292 >> 2], 0);
     while (1) {
      $0 = 0;
      if (jsvStringIteratorHasChar_11($3 + 24 | 0) & 1) {
       $0 = jspIsInterrupted() ^ -1;
      }
      if ($0 & 1) {
       jsvStringIteratorGetPtrAndNext($3 + 24 | 0, $3 + 20 | 0, $3 + 16 | 0);
       while (1) {
        if (HEAP32[$3 + 16 >> 2]) {
         HEAP32[$3 + 12 >> 2] = HEAPU32[$3 + 16 >> 2] > 128 ? 128 : HEAP32[$3 + 16 >> 2];
         FUNCTION_TABLE[HEAP32[$3 + 200 >> 2]](HEAP32[$3 + 20 >> 2], $3 - -64 | 0, HEAP32[$3 + 12 >> 2], $3 + 204 | 0);
         jsvAppendStringBuf(HEAP32[$3 + 196 >> 2], $3 - -64 | 0, HEAP32[$3 + 12 >> 2]);
         HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] - HEAP32[$3 + 12 >> 2];
         HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 12 >> 2] + HEAP32[$3 + 20 >> 2];
         continue;
        }
        break;
       }
       continue;
      }
      break;
     }
     jsvStringIteratorFree_14($3 + 24 | 0);
     break label$8;
    }
    HEAP32[$3 + 8 >> 2] = jsvIterateCallbackCount(HEAP32[$3 + 292 >> 2]);
    HEAP32[$3 + 196 >> 2] = jsvNewTypedArray(1, HEAP32[$3 + 8 >> 2]);
    if (HEAP32[$3 + 196 >> 2]) {
     HEAP32[$3 + 224 >> 2] = 0;
     HEAP32[$3 + 220 >> 2] = 0;
     jsvArrayBufferIteratorNew($3 + 228 | 0, HEAP32[$3 + 196 >> 2], 0);
     jsvIterateBufferCallback(HEAP32[$3 + 292 >> 2], 631, $3 + 200 | 0);
     jsvArrayBufferIteratorFree($3 + 228 | 0);
    }
   }
  }
  if (HEAPU8[$3 + 291 | 0] != 255) {
   jshPinOutput(HEAPU8[$3 + 291 | 0], 1);
  }
  HEAP32[$3 + 300 >> 2] = HEAP32[$3 + 196 >> 2];
 }
 __stack_pointer = $3 + 304 | 0;
 return HEAP32[$3 + 300 >> 2];
}

function tflite__ops__micro__pooling___28anonymous_20namespace_29__AverageEvalQuantized_28TfLiteContext__2c_20TfLiteNode_20const__2c_20TfLitePoolParams_20const__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 176 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 172 >> 2] = $0;
 HEAP32[$6 + 168 >> 2] = $1;
 HEAP32[$6 + 164 >> 2] = $2;
 HEAP32[$6 + 160 >> 2] = $3;
 HEAP32[$6 + 156 >> 2] = $4;
 HEAP32[$6 + 152 >> 2] = $5;
 HEAP32[$6 + 116 >> 2] = HEAP32[HEAP32[$6 + 164 >> 2] + 8 >> 2];
 HEAP32[$6 + 120 >> 2] = HEAP32[HEAP32[$6 + 164 >> 2] + 4 >> 2];
 HEAP32[$6 + 124 >> 2] = HEAP32[HEAP32[$6 + 164 >> 2] + 16 >> 2];
 HEAP32[$6 + 128 >> 2] = HEAP32[HEAP32[$6 + 164 >> 2] + 12 >> 2];
 HEAP16[$6 + 108 >> 1] = HEAP32[HEAP32[$6 + 160 >> 2] + 4 >> 2];
 HEAP16[$6 + 106 >> 1] = HEAP32[HEAP32[$6 + 160 >> 2] >> 2];
 HEAP32[$6 + 132 >> 2] = HEAP32[HEAP32[$6 + 160 >> 2] + 16 >> 2];
 HEAP32[$6 + 136 >> 2] = HEAP32[HEAP32[$6 + 160 >> 2] + 20 >> 2];
 label$2: {
  if (HEAP32[HEAP32[$6 + 156 >> 2] + 8 >> 2] == 3) {
   tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($6 + 80 | 0, HEAP32[$6 + 156 >> 2]);
   $0 = unsigned_20char_20const__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor_20const__29(HEAP32[$6 + 156 >> 2]);
   tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($6 + 56 | 0, HEAP32[$6 + 152 >> 2]);
   tflite__reference_ops__AveragePool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($6 + 104 | 0, $6 + 80 | 0, $0, $6 + 56 | 0, unsigned_20char__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor__29(HEAP32[$6 + 152 >> 2]));
   tflite__RuntimeShape___RuntimeShape_28_29($6 + 56 | 0);
   tflite__RuntimeShape___RuntimeShape_28_29($6 + 80 | 0);
   break label$2;
  }
  tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($6 + 32 | 0, HEAP32[$6 + 156 >> 2]);
  $0 = signed_20char_20const__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor_20const__29(HEAP32[$6 + 156 >> 2]);
  tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($6 + 8 | 0, HEAP32[$6 + 152 >> 2]);
  tflite__reference_integer_ops__AveragePool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($6 + 104 | 0, $6 + 32 | 0, $0, $6 + 8 | 0, signed_20char__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor__29(HEAP32[$6 + 152 >> 2]));
  tflite__RuntimeShape___RuntimeShape_28_29($6 + 8 | 0);
  tflite__RuntimeShape___RuntimeShape_28_29($6 + 32 | 0);
 }
 __stack_pointer = $6 + 176 | 0;
}

function jsvFindChildFromString($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP8[$2 + 15 | 0] = 1;
 HEAP8[$2 + 16 | 0] = HEAPU8[HEAP32[$2 + 20 >> 2]];
 if (HEAPU8[HEAP32[$2 + 20 >> 2]]) {
  HEAP8[$2 + 17 | 0] = HEAPU8[HEAP32[$2 + 20 >> 2] + 1 | 0];
  if (HEAPU8[HEAP32[$2 + 20 >> 2] + 1 | 0]) {
   HEAP8[$2 + 18 | 0] = HEAPU8[HEAP32[$2 + 20 >> 2] + 2 | 0];
   if (HEAPU8[HEAP32[$2 + 20 >> 2] + 2 | 0]) {
    HEAP8[$2 + 19 | 0] = HEAPU8[HEAP32[$2 + 20 >> 2] + 3 | 0];
    if (HEAPU8[HEAP32[$2 + 20 >> 2] + 3 | 0]) {
     HEAP8[$2 + 15 | 0] = !HEAP8[HEAP32[$2 + 20 >> 2] + 4 | 0];
    }
   }
  }
 }
 HEAP16[$2 + 12 >> 1] = jsvGetFirstChild(HEAP32[$2 + 24 >> 2]);
 label$5: {
  label$6: {
   if (!(HEAP8[$2 + 15 | 0] & 1)) {
    while (1) {
     if (HEAPU16[$2 + 12 >> 1]) {
      HEAP32[$2 + 8 >> 2] = jsvGetAddressOf(HEAPU16[$2 + 12 >> 1]);
      label$10: {
       $0 = HEAP32[$2 + 8 >> 2];
       if ((HEAPU8[$2 + 16 | 0] | HEAPU8[$2 + 17 | 0] << 8 | (HEAPU8[$2 + 18 | 0] << 16 | HEAPU8[$2 + 19 | 0] << 24)) != (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24))) {
        break label$10;
       }
       if (!(jsvIsStringEqual(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 20 >> 2]) & 1)) {
        break label$10;
       }
       HEAP32[$2 + 28 >> 2] = jsvLockAgain(HEAP32[$2 + 8 >> 2]);
       break label$5;
      }
      HEAP16[$2 + 12 >> 1] = jsvGetNextSibling(HEAP32[$2 + 8 >> 2]);
      continue;
     }
     break;
    }
    break label$6;
   }
   HEAP32[$2 + 4 >> 2] = 0;
   while (1) {
    if (HEAPU8[HEAP32[$2 + 20 >> 2] + HEAP32[$2 + 4 >> 2] | 0]) {
     HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
     continue;
    }
    break;
   }
   while (1) {
    if (HEAPU16[$2 + 12 >> 1]) {
     HEAP32[$2 >> 2] = jsvGetAddressOf(HEAPU16[$2 + 12 >> 1]);
     label$15: {
      $0 = HEAP32[$2 >> 2];
      if ((HEAPU8[$2 + 16 | 0] | HEAPU8[$2 + 17 | 0] << 8 | (HEAPU8[$2 + 18 | 0] << 16 | HEAPU8[$2 + 19 | 0] << 24)) != (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24))) {
       break label$15;
      }
      $0 = HEAP32[$2 >> 2];
      if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) >>> 18 | 0) {
       break label$15;
      }
      if ((jsvGetCharactersInVar(HEAP32[$2 >> 2]) | 0) != HEAP32[$2 + 4 >> 2]) {
       break label$15;
      }
      HEAP32[$2 + 28 >> 2] = jsvLockAgain(HEAP32[$2 >> 2]);
      break label$5;
     }
     HEAP16[$2 + 12 >> 1] = jsvGetNextSibling(HEAP32[$2 >> 2]);
     continue;
    }
    break;
   }
  }
  HEAP32[$2 + 28 >> 2] = 0;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function tflite__reference_ops__Softmax_28tflite__SoftmaxParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = Math_fround(0);
 $5 = __stack_pointer + -64 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 60 >> 2] = $0;
 HEAP32[$5 + 56 >> 2] = $1;
 HEAP32[$5 + 52 >> 2] = $2;
 HEAP32[$5 + 48 >> 2] = $3;
 HEAP32[$5 + 44 >> 2] = $4;
 HEAP32[$5 + 40 >> 2] = tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$5 + 56 >> 2]) - 1;
 HEAP32[$5 + 36 >> 2] = tflite__MatchingFlatSizeSkipDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__29(HEAP32[$5 + 56 >> 2], HEAP32[$5 + 40 >> 2], HEAP32[$5 + 48 >> 2]);
 HEAP32[$5 + 32 >> 2] = tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$5 + 56 >> 2], HEAP32[$5 + 40 >> 2], HEAP32[$5 + 48 >> 2], HEAP32[$5 + 40 >> 2]);
 HEAP32[$5 + 28 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 28 >> 2] < HEAP32[$5 + 36 >> 2]) {
   HEAPF32[$5 + 24 >> 2] = std____2__numeric_limits_float___lowest_28_29();
   HEAP32[$5 + 20 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 20 >> 2] < HEAP32[$5 + 32 >> 2]) {
     HEAPF32[$5 + 24 >> 2] = HEAPF32[float_20const__20std____2__max_float__28float_20const__2c_20float_20const__29($5 + 24 | 0, HEAP32[$5 + 52 >> 2] + (HEAP32[$5 + 20 >> 2] + Math_imul(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 32 >> 2]) << 2) | 0) >> 2];
     HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 20 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAPF32[$5 + 16 >> 2] = 0;
   HEAP32[$5 + 12 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 12 >> 2] < HEAP32[$5 + 32 >> 2]) {
     $6 = exp_28float_29(Math_fround(Math_fround(HEAPF32[HEAP32[$5 + 52 >> 2] + (HEAP32[$5 + 12 >> 2] + Math_imul(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 32 >> 2]) << 2) >> 2] - HEAPF32[$5 + 24 >> 2]) * Math_fround(HEAPF64[HEAP32[$5 + 60 >> 2] >> 3])));
     HEAPF32[$5 + 16 >> 2] = HEAPF32[$5 + 16 >> 2] + $6;
     HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 12 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 8 >> 2] = 0;
   while (1) {
    if (HEAP32[$5 + 8 >> 2] < HEAP32[$5 + 32 >> 2]) {
     $6 = exp_28float_29(Math_fround(Math_fround(HEAPF32[HEAP32[$5 + 52 >> 2] + (HEAP32[$5 + 8 >> 2] + Math_imul(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 32 >> 2]) << 2) >> 2] - HEAPF32[$5 + 24 >> 2]) * Math_fround(HEAPF64[HEAP32[$5 + 60 >> 2] >> 3])));
     HEAPF32[HEAP32[$5 + 44 >> 2] + (HEAP32[$5 + 8 >> 2] + Math_imul(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 32 >> 2]) << 2) >> 2] = $6 / HEAPF32[$5 + 16 >> 2];
     HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 8 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$5 + 28 >> 2] = HEAP32[$5 + 28 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 - -64 | 0;
}

function tflite__ops__micro__pooling___28anonymous_20namespace_29__MaxEvalQuantized_28TfLiteContext__2c_20TfLiteNode__2c_20TfLitePoolParams__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 176 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 172 >> 2] = $0;
 HEAP32[$6 + 168 >> 2] = $1;
 HEAP32[$6 + 164 >> 2] = $2;
 HEAP32[$6 + 160 >> 2] = $3;
 HEAP32[$6 + 156 >> 2] = $4;
 HEAP32[$6 + 152 >> 2] = $5;
 HEAP32[$6 + 116 >> 2] = HEAP32[HEAP32[$6 + 164 >> 2] + 8 >> 2];
 HEAP32[$6 + 120 >> 2] = HEAP32[HEAP32[$6 + 164 >> 2] + 4 >> 2];
 HEAP32[$6 + 124 >> 2] = HEAP32[HEAP32[$6 + 164 >> 2] + 16 >> 2];
 HEAP32[$6 + 128 >> 2] = HEAP32[HEAP32[$6 + 164 >> 2] + 12 >> 2];
 HEAP16[$6 + 108 >> 1] = HEAP32[HEAP32[$6 + 160 >> 2] + 4 >> 2];
 HEAP16[$6 + 106 >> 1] = HEAP32[HEAP32[$6 + 160 >> 2] >> 2];
 HEAP32[$6 + 132 >> 2] = HEAP32[HEAP32[$6 + 160 >> 2] + 16 >> 2];
 HEAP32[$6 + 136 >> 2] = HEAP32[HEAP32[$6 + 160 >> 2] + 20 >> 2];
 label$1: {
  if (HEAP32[HEAP32[$6 + 156 >> 2] + 8 >> 2] == 3) {
   tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($6 + 80 | 0, HEAP32[$6 + 156 >> 2]);
   $0 = unsigned_20char_20const__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor_20const__29(HEAP32[$6 + 156 >> 2]);
   tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($6 + 56 | 0, HEAP32[$6 + 152 >> 2]);
   tflite__reference_ops__MaxPool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($6 + 104 | 0, $6 + 80 | 0, $0, $6 + 56 | 0, unsigned_20char__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor__29(HEAP32[$6 + 152 >> 2]));
   tflite__RuntimeShape___RuntimeShape_28_29($6 + 56 | 0);
   tflite__RuntimeShape___RuntimeShape_28_29($6 + 80 | 0);
   break label$1;
  }
  tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($6 + 32 | 0, HEAP32[$6 + 156 >> 2]);
  $0 = signed_20char_20const__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor_20const__29(HEAP32[$6 + 156 >> 2]);
  tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($6 + 8 | 0, HEAP32[$6 + 152 >> 2]);
  tflite__reference_integer_ops__MaxPool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($6 + 104 | 0, $6 + 32 | 0, $0, $6 + 8 | 0, signed_20char__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor__29(HEAP32[$6 + 152 >> 2]));
  tflite__RuntimeShape___RuntimeShape_28_29($6 + 8 | 0);
  tflite__RuntimeShape___RuntimeShape_28_29($6 + 32 | 0);
 }
 __stack_pointer = $6 + 176 | 0;
}

function stringToIntWithRadix($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = __stack_pointer + -64 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 52 >> 2] = $0;
 HEAP32[$4 + 48 >> 2] = $1;
 HEAP32[$4 + 44 >> 2] = $2;
 HEAP32[$4 + 40 >> 2] = $3;
 while (1) {
  if (isWhitespace(HEAP8[HEAP32[$4 + 52 >> 2]]) & 1) {
   HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 52 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP8[$4 + 39 | 0] = 0;
 HEAP32[$4 + 24 >> 2] = 0;
 HEAP32[$4 + 28 >> 2] = 0;
 label$3: {
  if (HEAP8[HEAP32[$4 + 52 >> 2]] == 45) {
   HEAP8[$4 + 39 | 0] = 1;
   HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 52 >> 2] + 1;
   break label$3;
  }
  if (HEAP8[HEAP32[$4 + 52 >> 2]] == 43) {
   HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 52 >> 2] + 1;
  }
 }
 HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 52 >> 2];
 if (HEAP32[$4 + 40 >> 2]) {
  HEAP32[HEAP32[$4 + 40 >> 2] >> 2] = HEAP32[$4 + 52 >> 2];
 }
 if (HEAP32[$4 + 48 >> 2]) {
  $0 = HEAP32[$4 + 48 >> 2];
 } else {
  $0 = getRadix($4 + 52 | 0);
 }
 HEAP32[$4 + 16 >> 2] = $0;
 label$9: {
  if (!HEAP32[$4 + 16 >> 2]) {
   HEAP32[$4 + 56 >> 2] = 0;
   HEAP32[$4 + 60 >> 2] = 0;
   break label$9;
  }
  while (1) {
   label$12: {
    if (!HEAPU8[HEAP32[$4 + 52 >> 2]]) {
     break label$12;
    }
    HEAP32[$4 + 12 >> 2] = chtod(HEAP8[HEAP32[$4 + 52 >> 2]]);
    if (HEAP32[$4 + 12 >> 2] < 0 | HEAP32[$4 + 12 >> 2] >= HEAP32[$4 + 16 >> 2]) {
     break label$12;
    }
    $1 = HEAP32[$4 + 12 >> 2];
    $0 = $1 >> 31;
    $6 = $1;
    $2 = $0;
    $0 = HEAP32[$4 + 24 >> 2];
    $7 = $0;
    $1 = HEAP32[$4 + 28 >> 2];
    $3 = $1;
    $1 = HEAP32[$4 + 16 >> 2];
    $0 = $1 >> 31;
    $5 = $0;
    $0 = $3;
    $3 = $1;
    $1 = $5;
    $1 = __wasm_i64_mul($7, $0, $3, $1);
    $3 = $1;
    $5 = $1 + $6 | 0;
    $0 = i64toi32_i32$HIGH_BITS;
    $1 = $0;
    $0 = $2;
    $0 = $1 + $0 | 0;
    HEAP32[$4 + 24 >> 2] = $5;
    $0 = $5 >>> 0 < $3 >>> 0 ? $0 + 1 | 0 : $0;
    HEAP32[$4 + 28 >> 2] = $0;
    HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 52 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP32[$4 + 44 >> 2]) {
   HEAP8[HEAP32[$4 + 44 >> 2]] = HEAP32[$4 + 52 >> 2] == HEAP32[$4 + 20 >> 2];
  }
  if (HEAP32[$4 + 40 >> 2]) {
   HEAP32[HEAP32[$4 + 40 >> 2] >> 2] = HEAP32[$4 + 52 >> 2];
  }
  if (HEAP8[$4 + 39 | 0] & 1) {
   $2 = HEAP32[$4 + 28 >> 2];
   $0 = HEAP32[$4 + 24 >> 2];
   $3 = $0;
   $1 = 0 - $0 | 0;
   HEAP32[$4 + 56 >> 2] = $1;
   $0 = $2;
   $5 = $0 + (($3 | 0) != 0) | 0;
   $5 = 0 - $5 | 0;
   HEAP32[$4 + 60 >> 2] = $5;
   break label$9;
  }
  $0 = HEAP32[$4 + 28 >> 2];
  $5 = HEAP32[$4 + 24 >> 2];
  HEAP32[$4 + 56 >> 2] = $5;
  HEAP32[$4 + 60 >> 2] = $0;
 }
 __stack_pointer = $4 - -64 | 0;
 $5 = HEAP32[$4 + 60 >> 2];
 i64toi32_i32$HIGH_BITS = $5;
 $0 = HEAP32[$4 + 56 >> 2];
 return $0;
}

function jswrap_require($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 256 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 248 >> 2] = $0;
 label$1: {
  if (!(jsvIsString(HEAP32[$1 + 248 >> 2]) & 1)) {
   HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 248 >> 2];
   jsExceptionHere(3, 114133, $1 + 48 | 0);
   HEAP32[$1 + 252 >> 2] = 0;
   break label$1;
  }
  if (jsvGetString(HEAP32[$1 + 248 >> 2], $1 + 112 | 0, 128) >>> 0 >= 128) {
   jsExceptionHere(3, 142600, 0);
   HEAP32[$1 + 252 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 108 >> 2] = jswrap_modules_getModuleList();
  if (!HEAP32[$1 + 108 >> 2]) {
   HEAP32[$1 + 252 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 104 >> 2] = jsvSkipNameAndUnLock(jsvFindChildFromString(HEAP32[$1 + 108 >> 2], $1 + 112 | 0));
  jsvUnLock(HEAP32[$1 + 108 >> 2]);
  if (HEAP32[$1 + 104 >> 2]) {
   HEAP32[$1 + 252 >> 2] = HEAP32[$1 + 104 >> 2];
   break label$1;
  }
  HEAP32[$1 + 100 >> 2] = jswGetBuiltInLibrary($1 + 112 | 0);
  if (HEAP32[$1 + 100 >> 2]) {
   HEAP32[$1 + 104 >> 2] = jsvNewNativeFunction(HEAP32[$1 + 100 >> 2], 0);
  }
  label$7: {
   if (HEAP32[$1 + 104 >> 2]) {
    break label$7;
   }
   if (strlen($1 + 112 | 0) >>> 0 > 28) {
    break label$7;
   }
   jsfNameFromString($1 + 72 | 0, $1 + 112 | 0);
   HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 96 >> 2];
   $2 = HEAP32[$1 + 92 >> 2];
   $0 = HEAP32[$1 + 88 >> 2];
   HEAP32[$1 + 32 >> 2] = $0;
   HEAP32[$1 + 36 >> 2] = $2;
   $0 = HEAP32[$1 + 84 >> 2];
   $2 = HEAP32[$1 + 80 >> 2];
   HEAP32[$1 + 24 >> 2] = $2;
   HEAP32[$1 + 28 >> 2] = $0;
   $2 = HEAP32[$1 + 76 >> 2];
   $0 = HEAP32[$1 + 72 >> 2];
   HEAP32[$1 + 16 >> 2] = $0;
   HEAP32[$1 + 20 >> 2] = $2;
   HEAP32[$1 + 68 >> 2] = jsfReadFile($1 + 16 | 0, 0, 0);
   if (HEAP32[$1 + 68 >> 2]) {
    HEAP32[$1 + 104 >> 2] = jspEvaluateModule(HEAP32[$1 + 68 >> 2]);
    jsvUnLock(HEAP32[$1 + 68 >> 2]);
   }
  }
  if (!HEAP32[$1 + 104 >> 2]) {
   HEAP32[$1 + 64 >> 2] = jswGetBuiltInJSLibrary($1 + 112 | 0);
   if (HEAP32[$1 + 64 >> 2]) {
    HEAP32[$1 + 60 >> 2] = jsvNewNativeString(HEAP32[$1 + 64 >> 2], strlen(HEAP32[$1 + 64 >> 2]));
    if (HEAP32[$1 + 60 >> 2]) {
     HEAP32[$1 + 104 >> 2] = jspEvaluateModule(HEAP32[$1 + 60 >> 2]);
     jsvUnLock(HEAP32[$1 + 60 >> 2]);
    }
   }
  }
  label$12: {
   if (HEAP32[$1 + 104 >> 2]) {
    HEAP32[$1 + 56 >> 2] = jswrap_modules_getModuleList();
    if (HEAP32[$1 + 56 >> 2]) {
     jsvObjectSetChild(HEAP32[$1 + 56 >> 2], $1 + 112 | 0, HEAP32[$1 + 104 >> 2]);
    }
    jsvUnLock(HEAP32[$1 + 56 >> 2]);
    break label$12;
   }
   HEAP32[$1 >> 2] = HEAP32[$1 + 248 >> 2];
   jsExceptionHere(1, 120879, $1);
  }
  HEAP32[$1 + 252 >> 2] = HEAP32[$1 + 104 >> 2];
 }
 __stack_pointer = $1 + 256 | 0;
 return HEAP32[$1 + 252 >> 2];
}

function jspGetVarNamedField($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 112 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 104 >> 2] = $0;
 HEAP32[$3 + 100 >> 2] = $1;
 HEAP8[$3 + 99 | 0] = $2;
 HEAP32[$3 + 92 >> 2] = 0;
 if (jsvHasChildren(HEAP32[$3 + 104 >> 2]) & 1) {
  HEAP32[$3 + 92 >> 2] = jsvFindChildFromVar(HEAP32[$3 + 104 >> 2], HEAP32[$3 + 100 >> 2], 0);
 }
 label$2: {
  if (!HEAP32[$3 + 92 >> 2]) {
   label$4: {
    label$5: {
     if (!(jsvIsArrayBuffer(HEAP32[$3 + 104 >> 2]) & 1)) {
      break label$5;
     }
     if (!(jsvIsInt(HEAP32[$3 + 100 >> 2]) & 1)) {
      break label$5;
     }
     HEAP32[$3 + 92 >> 2] = jsvMakeIntoVariableName(jsvNewFromInteger(jsvGetInteger(HEAP32[$3 + 100 >> 2])), HEAP32[$3 + 104 >> 2]);
     if (HEAP32[$3 + 92 >> 2]) {
      $0 = HEAP32[$3 + 92 >> 2];
      $1 = HEAP32[$3 + 92 >> 2];
      $1 = (HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & -64 | 14;
      HEAP8[$0 + 12 | 0] = $1;
      HEAP8[$0 + 13 | 0] = $1 >>> 8;
     }
     break label$4;
    }
    label$7: {
     label$8: {
      if (!(jsvIsString(HEAP32[$3 + 104 >> 2]) & 1)) {
       break label$8;
      }
      if (!(jsvIsInt(HEAP32[$3 + 100 >> 2]) & 1)) {
       break label$8;
      }
      HEAP32[$3 + 88 >> 2] = jsvGetInteger(HEAP32[$3 + 100 >> 2]);
      label$9: {
       if (HEAP32[$3 + 88 >> 2] < 0) {
        break label$9;
       }
       if (HEAP32[$3 + 88 >> 2] >= (jsvGetStringLength(HEAP32[$3 + 104 >> 2]) | 0)) {
        break label$9;
       }
       HEAP32[$3 + 108 >> 2] = jswrap_string_charAt_undefined(HEAP32[$3 + 104 >> 2], HEAP32[$3 + 88 >> 2]);
       break label$2;
      }
      if (HEAP8[$3 + 99 | 0] & 1) {
       HEAP32[$3 + 92 >> 2] = jsvCreateNewChild(HEAP32[$3 + 104 >> 2], HEAP32[$3 + 100 >> 2], 0);
      }
      break label$7;
     }
     jsvGetString(HEAP32[$3 + 100 >> 2], $3 + 16 | 0, 64);
     HEAP32[$3 + 92 >> 2] = jspGetNamedFieldInParents(HEAP32[$3 + 104 >> 2], $3 + 16 | 0, HEAP8[$3 + 99 | 0] & 1);
     label$11: {
      if (HEAP32[$3 + 92 >> 2]) {
       break label$11;
      }
      if (!(jsvIsFunction(HEAP32[$3 + 104 >> 2]) & 1)) {
       break label$11;
      }
      if (!(jsvIsStringEqual(HEAP32[$3 + 100 >> 2], 119810) & 1)) {
       break label$11;
      }
      HEAP32[$3 + 12 >> 2] = jsvNewObject();
      HEAP32[$3 + 92 >> 2] = jsvAddNamedChild(HEAP32[$3 + 104 >> 2], HEAP32[$3 + 12 >> 2], 119810);
      jsvUnLock(HEAP32[$3 + 12 >> 2]);
     }
    }
   }
  }
  if (HEAP8[$3 + 99 | 0] & 1) {
   HEAP32[$3 + 108 >> 2] = HEAP32[$3 + 92 >> 2];
   break label$2;
  }
  HEAP32[$3 + 108 >> 2] = jsvSkipNameAndUnLock(HEAP32[$3 + 92 >> 2]);
 }
 __stack_pointer = $3 + 112 | 0;
 return HEAP32[$3 + 108 >> 2];
}

function jswrap_espruino_nativeCall($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 176 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 168 >> 2] = $0;
 HEAP32[$3 + 164 >> 2] = $1;
 HEAP32[$3 + 160 >> 2] = $2;
 HEAP32[$3 + 156 >> 2] = 0;
 label$1: {
  if (!(jsvIsUndefined(HEAP32[$3 + 164 >> 2]) & 1)) {
   label$3: {
    if (jsvIsString(HEAP32[$3 + 164 >> 2]) & 1) {
     HEAP32[$3 + 28 >> 2] = jslSetLex($3 + 32 | 0);
     jslInit(HEAP32[$3 + 164 >> 2]);
     HEAP8[$3 + 23 | 0] = 1;
     HEAP32[$3 + 16 >> 2] = 0;
     HEAP32[$3 + 24 >> 2] = nativeCallGetCType();
     label$5: {
      if (HEAP32[$3 + 24 >> 2] >= 0) {
       $1 = HEAP32[$3 + 24 >> 2];
       $0 = HEAP32[$3 + 16 >> 2];
       HEAP32[$3 + 16 >> 2] = $0 + 1;
       HEAP32[$3 + 156 >> 2] = HEAP32[$3 + 156 >> 2] | $1 << Math_imul($0, 3);
       break label$5;
      }
      HEAP8[$3 + 23 | 0] = 0;
     }
     if (HEAP8[$3 + 23 | 0] & 1) {
      HEAP8[$3 + 23 | 0] = jslMatch(40) & 1;
     }
     while (1) {
      $0 = 0;
      label$9: {
       if (!(HEAP8[$3 + 23 | 0] & 1)) {
        break label$9;
       }
       $0 = 0;
       if (!HEAP16[$3 + 34 >> 1]) {
        break label$9;
       }
       $0 = HEAP16[$3 + 34 >> 1] != 41;
      }
      if ($0) {
       HEAP32[$3 + 24 >> 2] = nativeCallGetCType();
       label$11: {
        if (HEAP32[$3 + 24 >> 2] >= 0) {
         $1 = HEAP32[$3 + 24 >> 2];
         $0 = HEAP32[$3 + 16 >> 2];
         HEAP32[$3 + 16 >> 2] = $0 + 1;
         HEAP32[$3 + 156 >> 2] = HEAP32[$3 + 156 >> 2] | $1 << Math_imul($0, 3);
         if (HEAP16[$3 + 34 >> 1] != 41) {
          HEAP8[$3 + 23 | 0] = jslMatch(44) & 1;
         }
         break label$11;
        }
        HEAP8[$3 + 23 | 0] = 0;
       }
       continue;
      }
      break;
     }
     if (HEAP8[$3 + 23 | 0] & 1) {
      HEAP8[$3 + 23 | 0] = jslMatch(41) & 1;
     }
     jslKill();
     jslSetLex(HEAP32[$3 + 28 >> 2]);
     if (HEAP32[$3 + 156 >> 2] & -65536) {
      HEAP8[$3 + 23 | 0] = 0;
     }
     if (!(HEAP8[$3 + 23 | 0] & 1)) {
      HEAP32[$3 >> 2] = HEAP32[$3 + 16 >> 2];
      jsExceptionHere(1, 122494, $3);
      HEAP32[$3 + 172 >> 2] = 0;
      break label$1;
     }
     break label$3;
    }
    jsExceptionHere(1, 119778, 0);
    HEAP32[$3 + 172 >> 2] = 0;
    break label$1;
   }
  }
  HEAP32[$3 + 12 >> 2] = jsvNewNativeFunction(HEAP32[$3 + 168 >> 2], HEAP32[$3 + 156 >> 2] & 65535);
  if (HEAP32[$3 + 160 >> 2]) {
   HEAP32[$3 + 8 >> 2] = jsvAsFlatString(HEAP32[$3 + 160 >> 2]);
   jsvAddNamedChildAndUnLock(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], 120874);
  }
  HEAP32[$3 + 172 >> 2] = HEAP32[$3 + 12 >> 2];
 }
 __stack_pointer = $3 + 176 | 0;
 return HEAP32[$3 + 172 >> 2];
}

function jsiDumpObjectState($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer + -64 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 60 >> 2] = $0;
 HEAP32[$4 + 56 >> 2] = $1;
 HEAP32[$4 + 52 >> 2] = $2;
 HEAP32[$4 + 48 >> 2] = $3;
 HEAP32[$4 + 44 >> 2] = jsvGetInternalFunctionCheckerFor(HEAP32[$4 + 48 >> 2]);
 jsvObjectIteratorNew($4 + 40 | 0, HEAP32[$4 + 48 >> 2]);
 while (1) {
  if (jsvObjectIteratorHasValue_3($4 + 40 | 0) & 1) {
   HEAP32[$4 + 36 >> 2] = jsvObjectIteratorGetKey_3($4 + 40 | 0);
   HEAP32[$4 + 32 >> 2] = jsvObjectIteratorGetValue_3($4 + 40 | 0);
   label$3: {
    if (HEAP32[$4 + 44 >> 2]) {
     if (FUNCTION_TABLE[HEAP32[$4 + 44 >> 2]](HEAP32[$4 + 36 >> 2]) & 1) {
      break label$3;
     }
    }
    label$5: {
     if (jsvIsStringEqual(HEAP32[$4 + 36 >> 2], 119810) & 1) {
      HEAP32[$4 + 28 >> 2] = jsvNewFromStringVarComplete(HEAP32[$4 + 52 >> 2]);
      if (HEAP32[$4 + 28 >> 2]) {
       jsvAppendString(HEAP32[$4 + 28 >> 2], 119809);
       jsiDumpObjectState(HEAP32[$4 + 60 >> 2], HEAP32[$4 + 56 >> 2], HEAP32[$4 + 28 >> 2], HEAP32[$4 + 32 >> 2]);
       jsvUnLock(HEAP32[$4 + 28 >> 2]);
      }
      break label$5;
     }
     label$8: {
      if (jsvIsStringEqualOrStartsWith(HEAP32[$4 + 36 >> 2], 117529, 1) & 1) {
       if (jsvIsArray(HEAP32[$4 + 32 >> 2]) & 1) {
        jsvObjectIteratorNew($4 + 24 | 0, HEAP32[$4 + 32 >> 2]);
        while (1) {
         if (jsvObjectIteratorHasValue_3($4 + 24 | 0) & 1) {
          HEAP32[$4 + 20 >> 2] = jsvObjectIteratorGetValue_3($4 + 24 | 0);
          jsiDumpEvent(HEAP32[$4 + 60 >> 2], HEAP32[$4 + 56 >> 2], HEAP32[$4 + 52 >> 2], HEAP32[$4 + 36 >> 2], HEAP32[$4 + 20 >> 2]);
          jsvUnLock(HEAP32[$4 + 20 >> 2]);
          jsvObjectIteratorNext($4 + 24 | 0);
          continue;
         }
         break;
        }
        jsvObjectIteratorFree_3($4 + 24 | 0);
        break label$8;
       }
       jsiDumpEvent(HEAP32[$4 + 60 >> 2], HEAP32[$4 + 56 >> 2], HEAP32[$4 + 52 >> 2], HEAP32[$4 + 36 >> 2], HEAP32[$4 + 32 >> 2]);
       break label$8;
      }
      if (!(jsvIsNativeFunction(HEAP32[$4 + 32 >> 2]) & 1)) {
       $0 = HEAP32[$4 + 60 >> 2];
       $1 = HEAP32[$4 + 56 >> 2];
       $2 = HEAP32[$4 + 52 >> 2];
       HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 36 >> 2];
       HEAP32[$4 >> 2] = $2;
       cbprintf($0, $1, 144239, $4);
       jsiDumpJSON(HEAP32[$4 + 60 >> 2], HEAP32[$4 + 56 >> 2], HEAP32[$4 + 32 >> 2], 0);
       FUNCTION_TABLE[HEAP32[$4 + 60 >> 2]](145977, HEAP32[$4 + 56 >> 2]);
      }
     }
    }
   }
   jsvUnLock2(HEAP32[$4 + 32 >> 2], HEAP32[$4 + 36 >> 2]);
   jsvObjectIteratorNext($4 + 40 | 0);
   continue;
  }
  break;
 }
 jsvObjectIteratorFree_3($4 + 40 | 0);
 __stack_pointer = $4 - -64 | 0;
}

function jsserialEventCallbackIdle() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $0 = __stack_pointer + -64 | 0;
 __stack_pointer = $0;
 HEAP8[$0 + 62 | 0] = 0;
 HEAP32[$0 + 56 >> 2] = jsserialGetSerialList(0);
 label$1: {
  if (!HEAP32[$0 + 56 >> 2]) {
   HEAP8[$0 + 63 | 0] = 0;
   break label$1;
  }
  jsvObjectIteratorNew($0 + 48 | 0, HEAP32[$0 + 56 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_4($0 + 48 | 0) & 1) {
    HEAP32[$0 + 44 >> 2] = jsvObjectIteratorGetValue_4($0 + 48 | 0);
    HEAP32[$0 + 40 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 44 >> 2], 122990);
    HEAP32[$0 + 36 >> 2] = jsvGetFlatStringPointer(HEAP32[$0 + 40 >> 2]);
    if (HEAP32[$0 + 36 >> 2]) {
     if (HEAPU8[HEAP32[$0 + 36 >> 2] + 88 | 0]) {
      HEAP32[$0 + 24 >> 2] = jshGetSystemTime();
      HEAP32[$0 + 28 >> 2] = i64toi32_i32$HIGH_BITS;
      $5 = HEAP32[$0 + 28 >> 2];
      $2 = HEAP32[$0 + 36 >> 2];
      $3 = HEAP32[$2 + 72 >> 2];
      $1 = HEAP32[$2 + 76 >> 2];
      $2 = HEAP32[$0 + 24 >> 2];
      $1 = $1 + ($3 >>> 0 > $2 >>> 0) | 0;
      HEAP32[$0 + 16 >> 2] = $2 - $3;
      $1 = $5 - $1 | 0;
      HEAP32[$0 + 20 >> 2] = $1;
      $1 = HEAP32[$0 + 16 >> 2];
      $2 = HEAP32[$0 + 20 >> 2];
      $4 = jshGetMillisecondsFromTime($1, $2) * +HEAP32[HEAP32[$0 + 36 >> 2] + 80 >> 2] / 1e3 + .5;
      label$7: {
       if (Math_abs($4) < 2147483648) {
        $1 = ~~$4;
        break label$7;
       }
       $1 = -2147483648;
      }
      HEAP32[$0 + 12 >> 2] = $1;
      label$9: {
       if (HEAP32[$0 + 12 >> 2] > 10) {
        $1 = HEAP32[$0 + 36 >> 2];
        HEAP32[$1 + 84 >> 2] = HEAP32[$1 + 84 >> 2] | (1 << HEAP32[$0 + 12 >> 2]) - 1 << HEAPU8[HEAP32[$0 + 36 >> 2] + 88 | 0];
        $1 = HEAP32[$0 + 36 >> 2];
        HEAP8[$1 + 88 | 0] = HEAP32[$0 + 12 >> 2] + HEAPU8[$1 + 88 | 0];
        jsserialCheckForCharacter(HEAP32[$0 + 36 >> 2]);
        HEAP8[HEAP32[$0 + 36 >> 2] + 88 | 0] = 0;
        break label$9;
       }
       HEAP8[$0 + 62 | 0] = 1;
      }
     }
     if (HEAPU8[HEAP32[$0 + 36 >> 2] + 64 | 0]) {
      HEAP32[$0 + 8 >> 2] = jsvNewStringOfLength(HEAPU8[HEAP32[$0 + 36 >> 2] + 64 | 0], HEAP32[$0 + 36 >> 2]);
      HEAP8[HEAP32[$0 + 36 >> 2] + 64 | 0] = 0;
      if (HEAP32[$0 + 8 >> 2]) {
       jswrap_stream_pushData(HEAP32[$0 + 44 >> 2], HEAP32[$0 + 8 >> 2], 1);
       jsvUnLock(HEAP32[$0 + 8 >> 2]);
      }
     }
    }
    jsvUnLock2(HEAP32[$0 + 40 >> 2], HEAP32[$0 + 44 >> 2]);
    jsvObjectIteratorNext($0 + 48 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_4($0 + 48 | 0);
  jsvUnLock(HEAP32[$0 + 56 >> 2]);
  HEAP8[$0 + 63 | 0] = HEAP8[$0 + 62 | 0] & 1;
 }
 __stack_pointer = $0 - -64 | 0;
 return HEAP8[$0 + 63 | 0] & 1;
}

function jswrap_string_match($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1: {
  if (!(jsvIsString(HEAP32[$2 + 40 >> 2]) & 1)) {
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  if (jsvIsUndefined(HEAP32[$2 + 36 >> 2]) & 1) {
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  if (jsvIsInstanceOf(HEAP32[$2 + 36 >> 2], 116829) & 1) {
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 36 >> 2], 111872, jsvNewFromInteger(0));
   HEAP32[$2 + 32 >> 2] = jswrap_regexp_exec(HEAP32[$2 + 36 >> 2], HEAP32[$2 + 40 >> 2]);
   if (!(jswrap_regexp_hasFlag(HEAP32[$2 + 36 >> 2], 103) & 1)) {
    HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
    break label$1;
   }
   HEAP32[$2 + 28 >> 2] = jsvNewEmptyArray();
   if (!HEAP32[$2 + 28 >> 2]) {
    HEAP32[$2 + 44 >> 2] = 0;
    break label$1;
   }
   while (1) {
    $0 = 0;
    if (HEAP32[$2 + 32 >> 2]) {
     $0 = jsvIsNull(HEAP32[$2 + 32 >> 2]) ^ -1;
    }
    if ($0 & 1) {
     HEAP32[$2 + 24 >> 2] = jsvGetArrayItem(HEAP32[$2 + 32 >> 2], 0);
     HEAP32[$2 + 20 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 32 >> 2], 111866);
     HEAP32[$2 + 16 >> 2] = jsvGetStringLength(HEAP32[$2 + 24 >> 2]);
     HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 20 >> 2] + HEAP32[$2 + 16 >> 2];
     jsvArrayPushAndUnLock(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2]);
     jsvUnLock(HEAP32[$2 + 32 >> 2]);
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 36 >> 2], 111872, jsvNewFromInteger(HEAP32[$2 + 12 >> 2] + !HEAP32[$2 + 16 >> 2] | 0));
     HEAP32[$2 + 32 >> 2] = jswrap_regexp_exec(HEAP32[$2 + 36 >> 2], HEAP32[$2 + 40 >> 2]);
     continue;
    }
    break;
   }
   jsvUnLock(HEAP32[$2 + 32 >> 2]);
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 36 >> 2], 111872, jsvNewFromInteger(0));
   HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 28 >> 2];
   break label$1;
  }
  HEAP32[$2 + 36 >> 2] = jsvAsString(HEAP32[$2 + 36 >> 2]);
  HEAP32[$2 + 8 >> 2] = jswrap_string_indexOf(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], 0, 0);
  if (HEAP32[$2 + 8 >> 2] >= 0) {
   HEAP32[$2 + 4 >> 2] = jsvNewEmptyArray();
   if (!HEAP32[$2 + 4 >> 2]) {
    jsvUnLock(HEAP32[$2 + 36 >> 2]);
    HEAP32[$2 + 44 >> 2] = 0;
    break label$1;
   }
   jsvArrayPush(HEAP32[$2 + 4 >> 2], HEAP32[$2 + 36 >> 2]);
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 4 >> 2], 111866, jsvNewFromInteger(HEAP32[$2 + 8 >> 2]));
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 4 >> 2], 112542, HEAP32[$2 + 36 >> 2]);
   HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 4 >> 2];
   break label$1;
  }
  jsvUnLock(HEAP32[$2 + 36 >> 2]);
  HEAP32[$2 + 44 >> 2] = jsvNewNull();
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function jsfGetJSONForFunctionWithCallback($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer + -64 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 60 >> 2] = $0;
 HEAP32[$4 + 56 >> 2] = $1;
 HEAP32[$4 + 52 >> 2] = $2;
 HEAP32[$4 + 48 >> 2] = $3;
 HEAP32[$4 + 44 >> 2] = 0;
 jsvObjectIteratorNew($4 + 40 | 0, HEAP32[$4 + 60 >> 2]);
 HEAP8[$4 + 39 | 0] = 1;
 cbprintf(HEAP32[$4 + 52 >> 2], HEAP32[$4 + 48 >> 2], 143251, 0);
 while (1) {
  if (jsvObjectIteratorHasValue_8($4 + 40 | 0) & 1) {
   HEAP32[$4 + 32 >> 2] = jsvObjectIteratorGetKey_5($4 + 40 | 0);
   label$3: {
    if (jsvIsFunctionParameter(HEAP32[$4 + 32 >> 2]) & 1) {
     label$5: {
      if (HEAP8[$4 + 39 | 0] & 1) {
       HEAP8[$4 + 39 | 0] = 0;
       break label$5;
      }
      cbprintf(HEAP32[$4 + 52 >> 2], HEAP32[$4 + 48 >> 2], 128061, 0);
     }
     HEAP32[$4 + 28 >> 2] = jsvNewFromStringVar(HEAP32[$4 + 32 >> 2], 1, 2147483647);
     $0 = HEAP32[$4 + 52 >> 2];
     $1 = HEAP32[$4 + 48 >> 2];
     HEAP32[$4 >> 2] = HEAP32[$4 + 28 >> 2];
     cbprintf($0, $1, 112309, $4);
     jsvUnLock(HEAP32[$4 + 28 >> 2]);
     break label$3;
    }
    label$7: {
     if (!(jsvIsString(HEAP32[$4 + 32 >> 2]) & 1)) {
      break label$7;
     }
     if (!(jsvIsStringEqual(HEAP32[$4 + 32 >> 2], 120874) & 1)) {
      break label$7;
     }
     HEAP32[$4 + 44 >> 2] = jsvObjectIteratorGetValue_8($4 + 40 | 0);
    }
   }
   jsvUnLock(HEAP32[$4 + 32 >> 2]);
   jsvObjectIteratorNext($4 + 40 | 0);
   continue;
  }
  break;
 }
 jsvObjectIteratorFree_8($4 + 40 | 0);
 cbprintf(HEAP32[$4 + 52 >> 2], HEAP32[$4 + 48 >> 2], 144362, 0);
 label$8: {
  if (jsvIsNativeFunction(HEAP32[$4 + 60 >> 2]) & 1) {
   cbprintf(HEAP32[$4 + 52 >> 2], HEAP32[$4 + 48 >> 2], 111507, 0);
   break label$8;
  }
  label$10: {
   if (HEAP32[$4 + 44 >> 2]) {
    if (HEAP32[$4 + 56 >> 2] & 8) {
     $0 = HEAP32[$4 + 52 >> 2];
     $1 = HEAP32[$4 + 48 >> 2];
     HEAP32[$4 + 16 >> 2] = HEAP32[44649];
     cbprintf($0, $1, 110435, $4 + 16 | 0);
     break label$10;
    }
    HEAP8[$4 + 27 | 0] = (jsvGetStringIndexOf(HEAP32[$4 + 44 >> 2], 10) | 0) >= 0;
    FUNCTION_TABLE[HEAP32[$4 + 52 >> 2]](HEAP8[$4 + 27 | 0] & 1 ? 144370 : 111533, HEAP32[$4 + 48 >> 2]);
    if (jsvIsFunctionReturn(HEAP32[$4 + 60 >> 2]) & 1) {
     FUNCTION_TABLE[HEAP32[$4 + 52 >> 2]](144094, HEAP32[$4 + 48 >> 2]);
    }
    jslPrintTokenisedString(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 52 >> 2], HEAP32[$4 + 48 >> 2]);
    FUNCTION_TABLE[HEAP32[$4 + 52 >> 2]](HEAP8[$4 + 27 | 0] & 1 ? 111525 : 111526, HEAP32[$4 + 48 >> 2]);
    break label$10;
   }
   cbprintf(HEAP32[$4 + 52 >> 2], HEAP32[$4 + 48 >> 2], 110432, 0);
  }
 }
 jsvUnLock(HEAP32[$4 + 44 >> 2]);
 __stack_pointer = $4 - -64 | 0;
}

function jsfLoadBootCodeFromFlash($0) {
 var $1 = 0, $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $1 = __stack_pointer - 160 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 158 | 0] = $0;
 if (!(wasm2js_i32$0 = jshPinGetValue(17) & 1, wasm2js_i32$1 = 1, wasm2js_i32$2 = HEAPU16[173534] & 4096, 
 wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1)) {
  jsfNameFromString($1 + 120 | 0, 117618);
  HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 144 >> 2];
  $2 = HEAP32[$1 + 140 >> 2];
  $0 = HEAP32[$1 + 136 >> 2];
  HEAP32[$1 + 56 >> 2] = $0;
  HEAP32[$1 + 60 >> 2] = $2;
  $0 = HEAP32[$1 + 132 >> 2];
  $2 = HEAP32[$1 + 128 >> 2];
  HEAP32[$1 + 48 >> 2] = $2;
  HEAP32[$1 + 52 >> 2] = $0;
  $2 = HEAP32[$1 + 124 >> 2];
  $0 = HEAP32[$1 + 120 >> 2];
  HEAP32[$1 + 40 >> 2] = $0;
  HEAP32[$1 + 44 >> 2] = $2;
  HEAP32[$1 + 152 >> 2] = jsfReadFile($1 + 40 | 0, 0, 0);
  if (HEAP32[$1 + 152 >> 2]) {
   jsvUnLock2(jspEvaluateVar(HEAP32[$1 + 152 >> 2], 0, 0), HEAP32[$1 + 152 >> 2]);
  }
 }
 if (!(wasm2js_i32$0 = jshPinGetValue(17) & 1, wasm2js_i32$1 = 0, wasm2js_i32$2 = HEAPU16[173534] & 4096, 
 wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1)) {
  $0 = HEAPU8[123497] | HEAPU8[123498] << 8 | (HEAPU8[123499] << 16 | HEAPU8[123500] << 24);
  HEAP8[$1 + 115 | 0] = $0;
  HEAP8[$1 + 116 | 0] = $0 >>> 8;
  HEAP8[$1 + 117 | 0] = $0 >>> 16;
  HEAP8[$1 + 118 | 0] = $0 >>> 24;
  HEAP32[$1 + 112 >> 2] = HEAPU8[123494] | HEAPU8[123495] << 8 | (HEAPU8[123496] << 16 | HEAPU8[123497] << 24);
  HEAP32[$1 + 108 >> 2] = 0;
  while (1) {
   if (HEAP32[$1 + 108 >> 2] < 4) {
    HEAP8[$1 + 117 | 0] = HEAP32[$1 + 108 >> 2] + 48;
    jsfNameFromString($1 + 72 | 0, $1 + 112 | 0);
    HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 96 >> 2];
    $0 = HEAP32[$1 + 92 >> 2];
    $2 = HEAP32[$1 + 88 >> 2];
    HEAP32[$1 + 24 >> 2] = $2;
    HEAP32[$1 + 28 >> 2] = $0;
    $2 = HEAP32[$1 + 84 >> 2];
    $0 = HEAP32[$1 + 80 >> 2];
    HEAP32[$1 + 16 >> 2] = $0;
    HEAP32[$1 + 20 >> 2] = $2;
    $0 = HEAP32[$1 + 76 >> 2];
    $2 = HEAP32[$1 + 72 >> 2];
    HEAP32[$1 + 8 >> 2] = $2;
    HEAP32[$1 + 12 >> 2] = $0;
    HEAP32[$1 + 104 >> 2] = jsfReadFile($1 + 8 | 0, 0, 0);
    if (HEAP32[$1 + 104 >> 2]) {
     jsvUnLock2(jspEvaluateVar(HEAP32[$1 + 104 >> 2], 0, 0), HEAP32[$1 + 104 >> 2]);
    }
    HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 108 >> 2] + 1;
    continue;
   }
   break;
  }
 }
 HEAP32[$1 + 68 >> 2] = jsfGetBootCodeFromFlash(HEAP8[$1 + 158 | 0] & 1);
 label$9: {
  if (!HEAP32[$1 + 68 >> 2]) {
   HEAP8[$1 + 159 | 0] = 0;
   break label$9;
  }
  jsvUnLock2(jspEvaluateVar(HEAP32[$1 + 68 >> 2], 0, 0), HEAP32[$1 + 68 >> 2]);
  HEAP8[$1 + 159 | 0] = 1;
 }
 __stack_pointer = $1 + 160 | 0;
 return HEAP8[$1 + 159 | 0] & 1;
}

function jsvAddName($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 24 >> 2] = jsvRef(HEAP32[$2 + 24 >> 2]);
 label$1: {
  if (!(jsvIsArray(HEAP32[$2 + 28 >> 2]) & 1)) {
   break label$1;
  }
  if (!(jsvIsInt(HEAP32[$2 + 24 >> 2]) & 1)) {
   break label$1;
  }
  $0 = HEAP32[$2 + 24 >> 2];
  HEAP32[$2 + 20 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
  if (HEAP32[$2 + 20 >> 2] >= (jsvGetArrayLength(HEAP32[$2 + 28 >> 2]) | 0)) {
   jsvSetArrayLength(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 20 >> 2] + 1 | 0, 0);
  }
 }
 label$3: {
  if (jsvGetLastChild(HEAP32[$2 + 28 >> 2]) & 65535) {
   HEAP32[$2 + 16 >> 2] = jsvLock(jsvGetLastChild(HEAP32[$2 + 28 >> 2]) & 65535);
   if (jsvIsArray(HEAP32[$2 + 28 >> 2]) & 1) {
    while (1) {
     $0 = 0;
     if (HEAP32[$2 + 16 >> 2]) {
      $0 = (jsvCompareInteger(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 16 >> 2]) | 0) < 0;
     }
     if ($0) {
      HEAP16[$2 + 14 >> 1] = jsvGetPrevSibling(HEAP32[$2 + 16 >> 2]);
      jsvUnLock(HEAP32[$2 + 16 >> 2]);
      HEAP32[$2 + 16 >> 2] = jsvLockSafe(HEAPU16[$2 + 14 >> 1]);
      continue;
     }
     break;
    }
   }
   label$9: {
    if (HEAP32[$2 + 16 >> 2]) {
     label$11: {
      if (jsvGetNextSibling(HEAP32[$2 + 16 >> 2]) & 65535) {
       HEAP32[$2 + 8 >> 2] = jsvLock(jsvGetNextSibling(HEAP32[$2 + 16 >> 2]) & 65535);
       jsvSetPrevSibling(HEAP32[$2 + 8 >> 2], jsvGetRef(HEAP32[$2 + 24 >> 2]) & 65535);
       jsvSetNextSibling(HEAP32[$2 + 24 >> 2], jsvGetRef(HEAP32[$2 + 8 >> 2]) & 65535);
       jsvUnLock(HEAP32[$2 + 8 >> 2]);
       break label$11;
      }
      jsvSetLastChild(HEAP32[$2 + 28 >> 2], jsvGetRef(HEAP32[$2 + 24 >> 2]) & 65535);
     }
     jsvSetNextSibling(HEAP32[$2 + 16 >> 2], jsvGetRef(HEAP32[$2 + 24 >> 2]) & 65535);
     jsvSetPrevSibling(HEAP32[$2 + 24 >> 2], jsvGetRef(HEAP32[$2 + 16 >> 2]) & 65535);
     jsvUnLock(HEAP32[$2 + 16 >> 2]);
     break label$9;
    }
    HEAP32[$2 + 4 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$2 + 28 >> 2]) & 65535);
    jsvSetPrevSibling(HEAP32[$2 + 4 >> 2], jsvGetRef(HEAP32[$2 + 24 >> 2]) & 65535);
    jsvUnLock(HEAP32[$2 + 4 >> 2]);
    jsvSetNextSibling(HEAP32[$2 + 24 >> 2], jsvGetFirstChild(HEAP32[$2 + 28 >> 2]) & 65535);
    jsvSetFirstChild(HEAP32[$2 + 28 >> 2], jsvGetRef(HEAP32[$2 + 24 >> 2]) & 65535);
   }
   break label$3;
  }
  HEAP16[$2 + 2 >> 1] = jsvGetRef(HEAP32[$2 + 24 >> 2]);
  jsvSetFirstChild(HEAP32[$2 + 28 >> 2], HEAPU16[$2 + 2 >> 1]);
  jsvSetLastChild(HEAP32[$2 + 28 >> 2], HEAPU16[$2 + 2 >> 1]);
 }
 __stack_pointer = $2 + 32 | 0;
}

function _jswrap_drawImageLayerGetPixel($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 HEAP32[$2 + 32 >> 2] = HEAP32[HEAP32[$2 + 40 >> 2] + 180 >> 2] + 127;
 HEAP32[$2 + 28 >> 2] = HEAP32[HEAP32[$2 + 40 >> 2] + 184 >> 2] + 127;
 label$1: {
  if (!(HEAP32[$2 + 32 >> 2] >= HEAP32[HEAP32[$2 + 40 >> 2] + 156 >> 2] | HEAP32[$2 + 28 >> 2] >= HEAP32[HEAP32[$2 + 40 >> 2] + 160 >> 2] | (HEAP32[$2 + 32 >> 2] | HEAP32[$2 + 28 >> 2]) < 0)) {
   HEAP32[$2 + 24 >> 2] = 0;
   HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 32 >> 2] >> 8;
   HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 28 >> 2] >> 8;
   label$3: {
    if (HEAP32[HEAP32[$2 + 40 >> 2] + 44 >> 2] == 8) {
     jsvStringIteratorGoto(HEAP32[$2 + 40 >> 2] + 120 | 0, HEAP32[HEAP32[$2 + 40 >> 2] + 56 >> 2], (HEAP32[HEAP32[$2 + 40 >> 2] + 60 >> 2] + HEAP32[$2 + 20 >> 2] | 0) + Math_imul(HEAP32[$2 + 16 >> 2], HEAP32[HEAP32[$2 + 40 >> 2] + 80 >> 2]) | 0);
     HEAP32[$2 + 24 >> 2] = jsvStringIteratorGetChar_6(HEAP32[$2 + 40 >> 2] + 120 | 0) & 255;
     break label$3;
    }
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 20 >> 2] + Math_imul(HEAP32[$2 + 16 >> 2], HEAP32[HEAP32[$2 + 40 >> 2] + 36 >> 2]);
    HEAP32[$2 + 8 >> 2] = Math_imul(HEAP32[$2 + 12 >> 2], HEAP32[HEAP32[$2 + 40 >> 2] + 44 >> 2]);
    jsvStringIteratorGoto(HEAP32[$2 + 40 >> 2] + 120 | 0, HEAP32[HEAP32[$2 + 40 >> 2] + 56 >> 2], HEAP32[HEAP32[$2 + 40 >> 2] + 60 >> 2] + (HEAP32[$2 + 8 >> 2] >> 3) | 0);
    HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] & 7;
    HEAP32[$2 + 24 >> 2] = jsvStringIteratorGetChar_6(HEAP32[$2 + 40 >> 2] + 120 | 0) & 255;
    HEAP32[$2 + 4 >> 2] = 8 - (HEAP32[$2 + 8 >> 2] + HEAP32[HEAP32[$2 + 40 >> 2] + 44 >> 2] | 0);
    while (1) {
     if (HEAP32[$2 + 4 >> 2] < 0) {
      jsvStringIteratorNext(HEAP32[$2 + 40 >> 2] + 120 | 0);
      HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 24 >> 2] << 8 | jsvStringIteratorGetChar_6(HEAP32[$2 + 40 >> 2] + 120 | 0) & 255;
      HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 8;
      continue;
     }
     break;
    }
    HEAP32[$2 + 24 >> 2] = HEAP32[HEAP32[$2 + 40 >> 2] + 72 >> 2] & HEAP32[$2 + 24 >> 2] >>> HEAP32[$2 + 4 >> 2];
   }
   if (HEAP32[HEAP32[$2 + 40 >> 2] + 52 >> 2] != HEAP32[$2 + 24 >> 2]) {
    if (HEAP32[HEAP32[$2 + 40 >> 2] + 64 >> 2]) {
     HEAP32[$2 + 24 >> 2] = HEAPU16[HEAP32[HEAP32[$2 + 40 >> 2] + 64 >> 2] + ((HEAP32[$2 + 24 >> 2] & HEAP32[HEAP32[$2 + 40 >> 2] + 68 >> 2]) << 1) >> 1];
    }
    HEAP32[HEAP32[$2 + 36 >> 2] >> 2] = HEAP32[$2 + 24 >> 2];
    HEAP8[$2 + 47 | 0] = 1;
    break label$1;
   }
  }
  HEAP8[$2 + 47 | 0] = 0;
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP8[$2 + 47 | 0] & 1;
}

function utilTimerGetLastTask($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 jshInterruptOff();
 HEAP8[$4 + 15 | 0] = HEAPU8[349025];
 label$1: {
  if (HEAPU8[$4 + 15 | 0] != HEAPU8[349026]) {
   HEAP8[$4 + 15 | 0] = HEAPU8[$4 + 15 | 0] + 15 & 15;
   while (1) {
    if (HEAPU8[$4 + 15 | 0] != (HEAPU8[349026] + 15 & 15)) {
     if (FUNCTION_TABLE[HEAP32[$4 + 24 >> 2]](Math_imul(HEAPU8[$4 + 15 | 0], 25) + 349040 | 0, HEAP32[$4 + 20 >> 2]) & 1) {
      $3 = Math_imul(HEAPU8[$4 + 15 | 0], 25) + 349040 | 0;
      $0 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
      $2 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
      $5 = $0;
      $1 = HEAP32[$4 + 16 >> 2];
      $0 = $1;
      HEAP8[$0 | 0] = $5;
      HEAP8[$0 + 1 | 0] = $5 >>> 8;
      HEAP8[$0 + 2 | 0] = $5 >>> 16;
      HEAP8[$0 + 3 | 0] = $5 >>> 24;
      HEAP8[$0 + 4 | 0] = $2;
      HEAP8[$0 + 5 | 0] = $2 >>> 8;
      HEAP8[$0 + 6 | 0] = $2 >>> 16;
      HEAP8[$0 + 7 | 0] = $2 >>> 24;
      HEAP8[$0 + 24 | 0] = HEAPU8[$3 + 24 | 0];
      $0 = HEAPU8[$3 + 20 | 0] | HEAPU8[$3 + 21 | 0] << 8 | (HEAPU8[$3 + 22 | 0] << 16 | HEAPU8[$3 + 23 | 0] << 24);
      $2 = HEAPU8[$3 + 16 | 0] | HEAPU8[$3 + 17 | 0] << 8 | (HEAPU8[$3 + 18 | 0] << 16 | HEAPU8[$3 + 19 | 0] << 24);
      $5 = $2;
      $2 = $1;
      HEAP8[$2 + 16 | 0] = $5;
      HEAP8[$2 + 17 | 0] = $5 >>> 8;
      HEAP8[$2 + 18 | 0] = $5 >>> 16;
      HEAP8[$2 + 19 | 0] = $5 >>> 24;
      HEAP8[$2 + 20 | 0] = $0;
      HEAP8[$2 + 21 | 0] = $0 >>> 8;
      HEAP8[$2 + 22 | 0] = $0 >>> 16;
      HEAP8[$2 + 23 | 0] = $0 >>> 24;
      $2 = HEAPU8[$3 + 12 | 0] | HEAPU8[$3 + 13 | 0] << 8 | (HEAPU8[$3 + 14 | 0] << 16 | HEAPU8[$3 + 15 | 0] << 24);
      $0 = HEAPU8[$3 + 8 | 0] | HEAPU8[$3 + 9 | 0] << 8 | (HEAPU8[$3 + 10 | 0] << 16 | HEAPU8[$3 + 11 | 0] << 24);
      $5 = $0;
      $0 = $1;
      HEAP8[$0 + 8 | 0] = $5;
      HEAP8[$0 + 9 | 0] = $5 >>> 8;
      HEAP8[$0 + 10 | 0] = $5 >>> 16;
      HEAP8[$0 + 11 | 0] = $5 >>> 24;
      HEAP8[$0 + 12 | 0] = $2;
      HEAP8[$0 + 13 | 0] = $2 >>> 8;
      HEAP8[$0 + 14 | 0] = $2 >>> 16;
      HEAP8[$0 + 15 | 0] = $2 >>> 24;
      jshInterruptOn();
      HEAP8[$4 + 31 | 0] = 1;
      break label$1;
     } else {
      HEAP8[$4 + 15 | 0] = HEAPU8[$4 + 15 | 0] + 15 & 15;
      continue;
     }
    }
    break;
   }
  }
  jshInterruptOn();
  HEAP8[$4 + 31 | 0] = 0;
 }
 __stack_pointer = $4 + 32 | 0;
 return HEAP8[$4 + 31 | 0] & 1;
}

function jslPrintTokenLineMarker($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 96 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 92 >> 2] = $0;
 HEAP32[$4 + 88 >> 2] = $1;
 HEAP32[$4 + 84 >> 2] = $2;
 HEAP32[$4 + 80 >> 2] = $3;
 HEAP32[$4 + 76 >> 2] = 1;
 HEAP32[$4 + 72 >> 2] = 1;
 jsvGetLineAndCol(HEAP32[HEAP32[44743] + 84 >> 2], HEAP32[$4 + 84 >> 2], $4 + 76 | 0, $4 + 72 | 0);
 HEAP32[$4 + 68 >> 2] = jsvGetIndexFromLineAndCol(HEAP32[HEAP32[44743] + 84 >> 2], HEAP32[$4 + 76 >> 2], 1);
 HEAP32[$4 + 64 >> 2] = jsvGetCharsOnLine(HEAP32[HEAP32[44743] + 84 >> 2], HEAP32[$4 + 76 >> 2]);
 HEAP32[$4 + 60 >> 2] = 0;
 if (HEAP32[$4 + 80 >> 2]) {
  FUNCTION_TABLE[HEAP32[$4 + 92 >> 2]](HEAP32[$4 + 80 >> 2], HEAP32[$4 + 88 >> 2]);
  HEAP32[$4 + 60 >> 2] = strlen(HEAP32[$4 + 80 >> 2]);
 }
 if (!(HEAPU32[$4 + 64 >> 2] <= 60 | HEAP32[$4 + 84 >> 2] - HEAP32[$4 + 68 >> 2] >>> 0 <= 30)) {
  cbprintf(HEAP32[$4 + 92 >> 2], HEAP32[$4 + 88 >> 2], 127749, 0);
  HEAP32[$4 + 56 >> 2] = (HEAP32[$4 + 84 >> 2] - 30 | 0) - HEAP32[$4 + 68 >> 2];
  HEAP32[$4 + 68 >> 2] = HEAP32[$4 + 68 >> 2] + (HEAP32[$4 + 56 >> 2] + 3 | 0);
  label$3: {
   if (HEAPU32[$4 + 56 >> 2] <= HEAPU32[$4 + 72 >> 2]) {
    HEAP32[$4 + 72 >> 2] = HEAP32[$4 + 72 >> 2] - HEAP32[$4 + 56 >> 2];
    break label$3;
   }
   HEAP32[$4 + 72 >> 2] = 0;
  }
  HEAP32[$4 + 64 >> 2] = HEAP32[$4 + 64 >> 2] - HEAP32[$4 + 56 >> 2];
 }
 HEAP32[$4 + 52 >> 2] = 0;
 jsvStringIteratorNew($4 + 16 | 0, HEAP32[HEAP32[44743] + 84 >> 2], HEAP32[$4 + 68 >> 2]);
 HEAP8[$4 + 15 | 0] = 0;
 while (1) {
  label$6: {
   $0 = 0;
   label$7: {
    if (!(jsvStringIteratorHasChar($4 + 16 | 0) & 1)) {
     break label$7;
    }
    $0 = 0;
    if (HEAPU32[$4 + 52 >> 2] >= 60) {
     break label$7;
    }
    $0 = HEAPU8[$4 + 15 | 0] != 255;
   }
   if (!$0) {
    break label$6;
   }
   if ((jsvStringIteratorGetChar($4 + 16 | 0) & 255) == 10) {
    break label$6;
   }
   jslPrintTokenisedChar($4 + 16 | 0, $4 + 15 | 0, $4 + 72 | 0, $4 + 52 | 0, HEAP32[$4 + 92 >> 2], HEAP32[$4 + 88 >> 2]);
   continue;
  }
  break;
 }
 jsvStringIteratorFree($4 + 16 | 0);
 if (HEAPU32[$4 + 64 >> 2] > 60) {
  FUNCTION_TABLE[HEAP32[$4 + 92 >> 2]](127749, HEAP32[$4 + 88 >> 2]);
 }
 FUNCTION_TABLE[HEAP32[$4 + 92 >> 2]](146977, HEAP32[$4 + 88 >> 2]);
 HEAP32[$4 + 72 >> 2] = HEAP32[$4 + 60 >> 2] + HEAP32[$4 + 72 >> 2];
 while (1) {
  $0 = HEAP32[$4 + 72 >> 2];
  HEAP32[$4 + 72 >> 2] = $0 - 1;
  if ($0 >>> 0 > 1) {
   FUNCTION_TABLE[HEAP32[$4 + 92 >> 2]](144421, HEAP32[$4 + 88 >> 2]);
   continue;
  }
  break;
 }
 FUNCTION_TABLE[HEAP32[$4 + 92 >> 2]](145771, HEAP32[$4 + 88 >> 2]);
 __stack_pointer = $4 + 96 | 0;
}

function jswrap_graphics_drawPoly_X($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 192 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 184 >> 2] = $0;
 HEAP32[$4 + 180 >> 2] = $1;
 HEAP8[$4 + 179 | 0] = $2;
 HEAP8[$4 + 178 | 0] = $3;
 label$1: {
  if (!(graphicsGetFromVar($4 + 104 | 0, HEAP32[$4 + 184 >> 2]) & 1)) {
   HEAP32[$4 + 188 >> 2] = 0;
   break label$1;
  }
  if (!(jsvIsIterable(HEAP32[$4 + 180 >> 2]) & 1)) {
   HEAP32[$4 + 188 >> 2] = 0;
   break label$1;
  }
  label$4: {
   if (HEAP8[$4 + 178 | 0] & 1) {
    HEAP32[$4 + 100 >> 2] = 16;
    HEAP32[$4 + 96 >> 2] = 638;
    break label$4;
   }
   HEAP32[$4 + 100 >> 2] = 1;
   HEAP32[$4 + 96 >> 2] = 639;
  }
  HEAP32[$4 + 76 >> 2] = 0;
  jsvIteratorNew($4 + 16 | 0, HEAP32[$4 + 180 >> 2], 1);
  while (1) {
   label$7: {
    if (!(jsvIteratorHasElement($4 + 16 | 0) & 1)) {
     break label$7;
    }
    $5 = jsvIteratorGetFloatValue($4 + 16 | 0) * +HEAP32[$4 + 100 >> 2] + .5;
    label$8: {
     if (Math_abs($5) < 2147483648) {
      $0 = ~~$5;
      break label$8;
     }
     $0 = -2147483648;
    }
    HEAP32[$4 + 12 >> 2] = $0;
    jsvIteratorNext($4 + 16 | 0);
    if (!(jsvIteratorHasElement($4 + 16 | 0) & 1)) {
     break label$7;
    }
    $5 = jsvIteratorGetFloatValue($4 + 16 | 0) * +HEAP32[$4 + 100 >> 2] + .5;
    label$10: {
     if (Math_abs($5) < 2147483648) {
      $0 = ~~$5;
      break label$10;
     }
     $0 = -2147483648;
    }
    HEAP32[$4 + 8 >> 2] = $0;
    jsvIteratorNext($4 + 16 | 0);
    label$12: {
     if (!HEAP32[$4 + 76 >> 2]) {
      HEAP32[$4 + 84 >> 2] = HEAP32[$4 + 12 >> 2];
      HEAP32[$4 + 80 >> 2] = HEAP32[$4 + 8 >> 2];
      break label$12;
     }
     FUNCTION_TABLE[HEAP32[$4 + 96 >> 2]]($4 + 104 | 0, HEAP32[$4 + 92 >> 2], HEAP32[$4 + 88 >> 2], HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2]);
    }
    HEAP32[$4 + 92 >> 2] = HEAP32[$4 + 12 >> 2];
    HEAP32[$4 + 88 >> 2] = HEAP32[$4 + 8 >> 2];
    HEAP32[$4 + 76 >> 2] = HEAP32[$4 + 76 >> 2] + 1;
    continue;
   }
   break;
  }
  jsvIteratorFree($4 + 16 | 0);
  $0 = HEAP32[$4 + 92 >> 2] / HEAP32[$4 + 100 >> 2] | 0;
  HEAP8[$4 + 131 | 0] = $0;
  HEAP8[$4 + 132 | 0] = $0 >>> 8;
  $0 = HEAP32[$4 + 88 >> 2] / HEAP32[$4 + 100 >> 2] | 0;
  HEAP8[$4 + 133 | 0] = $0;
  HEAP8[$4 + 134 | 0] = $0 >>> 8;
  if (HEAP8[$4 + 179 | 0] & 1) {
   FUNCTION_TABLE[HEAP32[$4 + 96 >> 2]]($4 + 104 | 0, HEAP32[$4 + 92 >> 2], HEAP32[$4 + 88 >> 2], HEAP32[$4 + 84 >> 2], HEAP32[$4 + 80 >> 2]);
  }
  graphicsSetVar($4 + 104 | 0);
  HEAP32[$4 + 188 >> 2] = jsvLockAgain(HEAP32[$4 + 184 >> 2]);
 }
 __stack_pointer = $4 + 192 | 0;
 return HEAP32[$4 + 188 >> 2];
}

function tflite__ops__micro__fully_connected__EvalQuantizedInt8_28TfLiteContext__2c_20TfLiteNode__2c_20tflite__ops__micro__fully_connected___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0;
 $7 = __stack_pointer - 176 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 172 >> 2] = $0;
 HEAP32[$7 + 168 >> 2] = $1;
 HEAP32[$7 + 164 >> 2] = $2;
 HEAP32[$7 + 160 >> 2] = $3;
 HEAP32[$7 + 156 >> 2] = $4;
 HEAP32[$7 + 152 >> 2] = $5;
 HEAP32[$7 + 148 >> 2] = $6;
 HEAP32[$7 + 104 >> 2] = 0 - HEAP32[HEAP32[$7 + 164 >> 2] + 20 >> 2];
 HEAP32[$7 + 108 >> 2] = 0 - HEAP32[HEAP32[$7 + 164 >> 2] + 24 >> 2];
 HEAP32[$7 + 112 >> 2] = HEAP32[HEAP32[$7 + 164 >> 2] + 28 >> 2];
 HEAP32[$7 + 116 >> 2] = HEAP32[HEAP32[$7 + 164 >> 2] >> 2];
 HEAP32[$7 + 120 >> 2] = 0 - HEAP32[HEAP32[$7 + 164 >> 2] + 4 >> 2];
 HEAP32[$7 + 124 >> 2] = HEAP32[HEAP32[$7 + 164 >> 2] + 8 >> 2];
 HEAP32[$7 + 128 >> 2] = HEAP32[HEAP32[$7 + 164 >> 2] + 12 >> 2];
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($7 + 80 | 0, HEAP32[$7 + 160 >> 2]);
 $0 = signed_20char_20const__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor_20const__29(HEAP32[$7 + 160 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($7 + 56 | 0, HEAP32[$7 + 156 >> 2]);
 $1 = signed_20char_20const__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor_20const__29(HEAP32[$7 + 156 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($7 + 32 | 0, HEAP32[$7 + 152 >> 2]);
 $2 = int_20const__20tflite__micro__GetTensorData_int__28TfLiteEvalTensor_20const__29(HEAP32[$7 + 152 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($7 + 8 | 0, HEAP32[$7 + 148 >> 2]);
 tflite__reference_integer_ops__FullyConnected_28tflite__FullyConnectedParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($7 + 104 | 0, $7 + 80 | 0, $0, $7 + 56 | 0, $1, $7 + 32 | 0, $2, $7 + 8 | 0, signed_20char__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor__29(HEAP32[$7 + 148 >> 2]));
 tflite__RuntimeShape___RuntimeShape_28_29($7 + 8 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($7 + 32 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($7 + 56 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($7 + 80 | 0);
 __stack_pointer = $7 + 176 | 0;
 return 0;
}

function jspeTemplateLiteral() {
 var $0 = 0;
 $0 = __stack_pointer - 144 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 140 >> 2] = 0;
 if ((HEAP32[86758] & 63) == 1) {
  HEAP32[$0 + 136 >> 2] = jslGetTokenValueAsVar();
  HEAP32[$0 + 140 >> 2] = jsvNewFromEmptyString_3();
  if (!(!HEAP32[$0 + 140 >> 2] | !HEAP32[$0 + 136 >> 2])) {
   jsvStringIteratorNew($0 + 96 | 0, HEAP32[$0 + 136 >> 2], 0);
   jsvStringIteratorNew($0 + 56 | 0, HEAP32[$0 + 140 >> 2], 0);
   while (1) {
    label$4: {
     if (!(jsvStringIteratorHasChar_4($0 + 96 | 0) & 1)) {
      break label$4;
     }
     HEAP8[$0 + 55 | 0] = jsvStringIteratorGetCharAndNext($0 + 96 | 0);
     label$5: {
      if (HEAP8[$0 + 55 | 0] == 36) {
       HEAP8[$0 + 55 | 0] = jsvStringIteratorGetChar_3($0 + 96 | 0);
       label$7: {
        if (HEAP8[$0 + 55 | 0] == 123) {
         jsvStringIteratorNext($0 + 96 | 0);
         HEAP32[$0 + 48 >> 2] = 1;
         HEAP32[$0 + 44 >> 2] = jsvNewFromEmptyString_3();
         if (!HEAP32[$0 + 44 >> 2]) {
          break label$4;
         }
         jsvStringIteratorNew($0 + 8 | 0, HEAP32[$0 + 44 >> 2], 0);
         while (1) {
          label$10: {
           if (!(jsvStringIteratorHasChar_4($0 + 96 | 0) & 1)) {
            break label$10;
           }
           HEAP8[$0 + 55 | 0] = jsvStringIteratorGetCharAndNext($0 + 96 | 0);
           if (HEAP8[$0 + 55 | 0] == 123) {
            HEAP32[$0 + 48 >> 2] = HEAP32[$0 + 48 >> 2] + 1;
           }
           if (HEAP8[$0 + 55 | 0] == 125) {
            HEAP32[$0 + 48 >> 2] = HEAP32[$0 + 48 >> 2] - 1;
            if (!HEAP32[$0 + 48 >> 2]) {
             break label$10;
            }
           }
           jsvStringIteratorAppend($0 + 8 | 0, HEAP8[$0 + 55 | 0]);
           continue;
          }
          break;
         }
         jsvStringIteratorFree_4($0 + 8 | 0);
         HEAP32[$0 + 4 >> 2] = jspEvaluateExpressionVar(HEAP32[$0 + 44 >> 2]);
         jsvUnLock(HEAP32[$0 + 44 >> 2]);
         HEAP32[$0 + 4 >> 2] = jsvAsStringAndUnLock(HEAP32[$0 + 4 >> 2]);
         jsvStringIteratorAppendString($0 + 56 | 0, HEAP32[$0 + 4 >> 2], 0, 2147483647);
         jsvUnLock(HEAP32[$0 + 4 >> 2]);
         break label$7;
        }
        jsvStringIteratorAppend($0 + 56 | 0, 36);
       }
       break label$5;
      }
      jsvStringIteratorAppend($0 + 56 | 0, HEAP8[$0 + 55 | 0]);
     }
     continue;
    }
    break;
   }
   jsvStringIteratorFree_4($0 + 96 | 0);
   jsvStringIteratorFree_4($0 + 56 | 0);
  }
  jsvUnLock(HEAP32[$0 + 136 >> 2]);
 }
 jslGetNextToken();
 __stack_pointer = $0 + 144 | 0;
 return HEAP32[$0 + 140 >> 2];
}

function jswrap_btoa($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 144 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 136 >> 2] = $0;
 label$1: {
  if (!(jsvIsIterable(HEAP32[$1 + 136 >> 2]) & 1)) {
   HEAP32[$1 >> 2] = HEAP32[$1 + 136 >> 2];
   jsExceptionHere(1, 113637, $1);
   HEAP32[$1 + 140 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 132 >> 2] = jsvGetLength(HEAP32[$1 + 136 >> 2]);
  HEAP32[$1 + 128 >> 2] = (HEAP32[$1 + 132 >> 2] + 2 >>> 0) / 3 << 2;
  HEAP32[$1 + 124 >> 2] = jsvNewStringOfLength(HEAP32[$1 + 128 >> 2], 0);
  if (!HEAP32[$1 + 124 >> 2]) {
   HEAP32[$1 + 140 >> 2] = 0;
   break label$1;
  }
  jsvIteratorNew($1 - -64 | 0, HEAP32[$1 + 136 >> 2], 1);
  jsvStringIteratorNew($1 + 24 | 0, HEAP32[$1 + 124 >> 2], 0);
  HEAP32[$1 + 20 >> 2] = 0;
  while (1) {
   $0 = 0;
   if (jsvIteratorHasElement($1 - -64 | 0) & 1) {
    $0 = jspIsInterrupted() ^ -1;
   }
   if ($0 & 1) {
    HEAP32[$1 + 16 >> 2] = jsvIteratorGetIntegerValue($1 - -64 | 0) & 255;
    jsvIteratorNext($1 - -64 | 0);
    HEAP32[$1 + 12 >> 2] = 0;
    HEAP32[$1 + 8 >> 2] = 0;
    label$7: {
     if (jsvIteratorHasElement($1 - -64 | 0) & 1) {
      HEAP32[$1 + 12 >> 2] = jsvIteratorGetIntegerValue($1 - -64 | 0) & 255;
      jsvIteratorNext($1 - -64 | 0);
      label$9: {
       if (jsvIteratorHasElement($1 - -64 | 0) & 1) {
        HEAP32[$1 + 8 >> 2] = jsvIteratorGetIntegerValue($1 - -64 | 0) & 255;
        jsvIteratorNext($1 - -64 | 0);
        HEAP32[$1 + 20 >> 2] = 0;
        break label$9;
       }
       HEAP32[$1 + 20 >> 2] = 1;
      }
      break label$7;
     }
     HEAP32[$1 + 20 >> 2] = 2;
    }
    HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 8 >> 2] + ((HEAP32[$1 + 16 >> 2] << 16) + (HEAP32[$1 + 12 >> 2] << 8) | 0);
    jsvStringIteratorSetCharAndNext($1 + 24 | 0, jswrap_btoa_encode(HEAP32[$1 + 4 >> 2] >> 18) << 24 >> 24);
    jsvStringIteratorSetCharAndNext($1 + 24 | 0, jswrap_btoa_encode(HEAP32[$1 + 4 >> 2] >> 12) << 24 >> 24);
    $2 = $1 + 24 | 0;
    if (HEAP32[$1 + 20 >> 2] > 1) {
     $0 = 61;
    } else {
     $0 = jswrap_btoa_encode(HEAP32[$1 + 4 >> 2] >> 6);
    }
    jsvStringIteratorSetCharAndNext($2, $0 << 24 >> 24);
    $2 = $1 + 24 | 0;
    if (HEAP32[$1 + 20 >> 2] > 0) {
     $0 = 61;
    } else {
     $0 = jswrap_btoa_encode(HEAP32[$1 + 4 >> 2]);
    }
    jsvStringIteratorSetCharAndNext($2, $0 << 24 >> 24);
    continue;
   }
   break;
  }
  jsvIteratorFree($1 - -64 | 0);
  jsvStringIteratorFree_7($1 + 24 | 0);
  HEAP32[$1 + 140 >> 2] = HEAP32[$1 + 124 >> 2];
 }
 __stack_pointer = $1 + 144 | 0;
 return HEAP32[$1 + 140 >> 2];
}

function jspeStatementTry() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 32 | 0;
 __stack_pointer = $0;
 jslGetNextToken();
 HEAP8[$0 + 27 | 0] = (HEAP32[86758] & 63) == 1;
 jspeBlock();
 $1 = HEAP8[$0 + 27 | 0] & 1 ? (HEAP32[86758] & 32) != 0 : $1;
 HEAP8[$0 + 26 | 0] = $1;
 HEAP8[$0 + 25 | 0] = 0;
 label$2: {
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 178) {
   jslGetNextToken();
   HEAP8[$0 + 25 | 0] = 1;
   HEAP32[$0 + 20 >> 2] = 0;
   HEAP32[$0 + 16 >> 2] = 0;
   label$4: {
    if (HEAP8[$0 + 27 | 0] & 1) {
     $1 = jspGetException();
     break label$4;
    }
    $1 = 0;
   }
   HEAP32[$0 + 12 >> 2] = $1;
   if (HEAP16[HEAP32[44743] + 2 >> 1] == 40) {
    if (!(jslMatch(40) & 1)) {
     break label$2;
    }
    if (HEAP8[$0 + 26 | 0] & 1) {
     HEAP32[$0 + 16 >> 2] = jsvNewObject();
     if (HEAP32[$0 + 16 >> 2]) {
      HEAP32[$0 + 20 >> 2] = jsvFindOrAddChildFromString(HEAP32[$0 + 16 >> 2], jslGetTokenValueAsString());
     }
    }
    if (!(jslMatch(128) & 1)) {
     jsvUnLock2(HEAP32[$0 + 16 >> 2], HEAP32[$0 + 20 >> 2]);
     break label$2;
    }
    if (!(jslMatch(41) & 1)) {
     jsvUnLock2(HEAP32[$0 + 16 >> 2], HEAP32[$0 + 20 >> 2]);
     break label$2;
    }
    if (HEAP32[$0 + 20 >> 2]) {
     if (HEAP32[$0 + 12 >> 2]) {
      jsvSetValueOfName(HEAP32[$0 + 20 >> 2], HEAP32[$0 + 12 >> 2]);
     }
     jsvUnLock(HEAP32[$0 + 20 >> 2]);
    }
   }
   if (HEAP8[$0 + 27 | 0] & 1) {
    HEAP32[86758] = HEAP32[86758] & -161;
    jsvUnLock(HEAP32[$0 + 12 >> 2]);
   }
   label$15: {
    if (!(!(HEAP8[$0 + 27 | 0] & 1) | HEAP8[$0 + 26 | 0] & 1)) {
     HEAP32[$0 + 8 >> 2] = HEAP32[86758];
     jspSetNoExecute();
     jspeBlock();
     HEAP32[86758] = HEAP32[86758] & -1664 | HEAP32[$0 + 8 >> 2] & 1663;
     break label$15;
    }
    label$17: {
     if (HEAP32[$0 + 16 >> 2]) {
      if (!(jspeiAddScope(HEAP32[$0 + 16 >> 2]) & 1)) {
       break label$17;
      }
     }
     jspeBlock();
     if (HEAP32[$0 + 16 >> 2]) {
      jspeiRemoveScope();
     }
    }
   }
   jsvUnLock(HEAP32[$0 + 16 >> 2]);
  }
  if (!(HEAP8[$0 + 25 | 0] & 1 | HEAP32[86758] & 80 ? HEAP16[HEAP32[44743] + 2 >> 1] != 179 : 0)) {
   if (!(jslMatch(179) & 1)) {
    break label$2;
   }
   HEAP32[$0 + 4 >> 2] = HEAP32[86758];
   if (HEAP8[$0 + 27 | 0] & 1) {
    HEAP32[86758] = HEAP32[86758] & -47 | 1;
   }
   jspeBlock();
   HEAP32[86758] = HEAP32[$0 + 4 >> 2];
   if (!(!(HEAP8[$0 + 26 | 0] & 1) | HEAP8[$0 + 25 | 0] & 1)) {
    HEAP32[86758] = HEAP32[86758] | 32;
   }
  }
 }
 HEAP32[$0 + 28 >> 2] = 0;
 __stack_pointer = $0 + 32 | 0;
 return HEAP32[$0 + 28 >> 2];
}

function jsvCopyNameOnly($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP8[$3 + 23 | 0] = $1;
 HEAP8[$3 + 22 | 0] = $2;
 $0 = HEAP32[$3 + 24 >> 2];
 HEAP16[$3 + 20 >> 1] = HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8;
 HEAP32[$3 + 16 >> 2] = 0;
 label$1: {
  if (!(HEAP8[$3 + 22 | 0] & 1)) {
   $0 = HEAP32[$3 + 24 >> 2];
   HEAP16[$3 + 14 >> 1] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
   label$3: {
    if (!(HEAPU16[$3 + 14 >> 1] < 15 | HEAPU16[$3 + 14 >> 1] > 17)) {
     HEAP16[$3 + 20 >> 1] = HEAPU16[$3 + 20 >> 1] & -64 | 10;
     break label$3;
    }
    label$5: {
     if (jsvGetLastChild(HEAP32[$3 + 24 >> 2]) & 65535) {
      HEAP32[$3 + 16 >> 2] = jsvNewFromStringVarComplete(HEAP32[$3 + 24 >> 2]);
      if (!HEAP32[$3 + 16 >> 2]) {
       HEAP32[$3 + 28 >> 2] = 0;
       break label$1;
      }
      break label$5;
     }
     HEAP16[$3 + 20 >> 1] = HEAPU16[$3 + 20 >> 1] & 65472 | jsvGetCharactersInVar(HEAP32[$3 + 24 >> 2]) + 28;
    }
   }
  }
  if (!HEAP32[$3 + 16 >> 2]) {
   HEAP32[$3 + 16 >> 2] = jsvNewWithFlags(HEAPU16[$3 + 20 >> 1] & 255);
   if (!HEAP32[$3 + 16 >> 2]) {
    HEAP32[$3 + 28 >> 2] = 0;
    break label$1;
   }
   $0 = HEAP32[$3 + 16 >> 2];
   $1 = HEAP32[$3 + 24 >> 2];
   $1 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
   HEAP8[$0 | 0] = $1;
   HEAP8[$0 + 1 | 0] = $1 >>> 8;
   HEAP8[$0 + 2 | 0] = $1 >>> 16;
   HEAP8[$0 + 3 | 0] = $1 >>> 24;
   if (jsvHasStringExt(HEAP32[$3 + 24 >> 2]) & 1) {
    if (jsvGetLastChild(HEAP32[$3 + 24 >> 2]) & 65535) {
     HEAP32[$3 + 8 >> 2] = jsvLock(jsvGetLastChild(HEAP32[$3 + 24 >> 2]) & 65535);
     HEAP32[$3 + 4 >> 2] = jsvCopy(HEAP32[$3 + 8 >> 2], 1);
     if (HEAP32[$3 + 4 >> 2]) {
      jsvSetLastChild(HEAP32[$3 + 16 >> 2], jsvGetRef(HEAP32[$3 + 4 >> 2]) & 65535);
      jsvUnLock(HEAP32[$3 + 4 >> 2]);
     }
     jsvUnLock(HEAP32[$3 + 8 >> 2]);
    }
   }
  }
  label$13: {
   if (!(HEAP8[$3 + 23 | 0] & 1)) {
    break label$13;
   }
   if (!(jsvGetFirstChild(HEAP32[$3 + 24 >> 2]) & 65535)) {
    break label$13;
   }
   label$14: {
    if (jsvIsNameWithValue(HEAP32[$3 + 24 >> 2]) & 1) {
     jsvSetFirstChild(HEAP32[$3 + 16 >> 2], jsvGetFirstChild(HEAP32[$3 + 24 >> 2]) & 65535);
     break label$14;
    }
    jsvSetFirstChild(HEAP32[$3 + 16 >> 2], jsvRefRef(jsvGetFirstChild(HEAP32[$3 + 24 >> 2]) & 65535) & 65535);
   }
  }
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 16 >> 2];
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function tflite__ParseSoftmax_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = Math_fround(0);
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 40 >> 2] = $0;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP32[$4 + 28 >> 2] = $3;
 tflite___28anonymous_20namespace_29__CheckParsePointerParams_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29(HEAP32[$4 + 40 >> 2], HEAP32[$4 + 36 >> 2], HEAP32[$4 + 32 >> 2], HEAP32[$4 + 28 >> 2]);
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__SafeBuiltinDataAllocator_28tflite__BuiltinDataAllocator__29($4 + 24 | 0, HEAP32[$4 + 32 >> 2]);
 std____2__unique_ptr_TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteSoftmaxParams__28_29($4 + 16 | 0, $4 + 24 | 0);
 label$1: {
  if (!(bool_20std____2__operator___TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28std____2__unique_ptr_TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20const__2c_20std__nullptr_t_29($4 + 16 | 0, 0) & 1)) {
   $0 = HEAP32[$4 + 36 >> 2];
   $1 = HEAP32[$4 + 36 >> 2];
   HEAP32[$4 >> 2] = 115968;
   tflite__ErrorReporter__ReportError_28void__2c_20char_20const__2c_20____29($0, $1, 127303, $4);
   HEAP32[$4 + 44 >> 2] = 1;
   break label$1;
  }
  HEAP32[$4 + 8 >> 2] = tflite__Operator__builtin_options_as_SoftmaxOptions_28_29_20const(HEAP32[$4 + 40 >> 2]);
  if (HEAP32[$4 + 8 >> 2]) {
   $5 = tflite__SoftmaxOptions__beta_28_29_20const(HEAP32[$4 + 8 >> 2]);
   HEAPF32[std____2__unique_ptr_TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($4 + 16 | 0) >> 2] = $5;
  }
  $0 = std____2__unique_ptr_TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($4 + 16 | 0);
  HEAP32[HEAP32[$4 + 28 >> 2] >> 2] = $0;
  HEAP32[$4 + 44 >> 2] = 0;
 }
 HEAP32[$4 + 12 >> 2] = 1;
 std____2__unique_ptr_TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($4 + 16 | 0);
 __stack_pointer = $4 + 48 | 0;
 return HEAP32[$4 + 44 >> 2];
}

function jsiHandleNewLine($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 31 | 0] = $0;
 label$1: {
  if (jsiAtEndOfInputLine() & 1) {
   label$3: {
    if (!(HEAP8[$1 + 31 | 0] & 1)) {
     break label$3;
    }
    if ((jsiCountBracketsInInput() | 0) > 0) {
     break label$3;
    }
    if (jsiShowInputLine() & 1) {
     jsiConsolePrintString(146977);
    }
    if (!(HEAPU16[173534] & 2)) {
     HEAP8[347076] = 1;
    }
    HEAP32[$1 + 24 >> 2] = jsvStringTrimRight(HEAP32[86768]);
    jsiClearInputLine(0);
    label$6: {
     if (HEAPU16[173534] & 8) {
      jsiDebuggerLine(HEAP32[$1 + 24 >> 2]);
      jsiHistoryAddLine(HEAP32[$1 + 24 >> 2]);
      jsvUnLock(HEAP32[$1 + 24 >> 2]);
      break label$6;
     }
     HEAP32[$1 + 20 >> 2] = jspEvaluateVar(HEAP32[$1 + 24 >> 2], 0, HEAPU16[173546]);
     HEAP8[$1 + 19 | 0] = jsvIsEmptyString(HEAP32[$1 + 24 >> 2]) & 1;
     label$8: {
      if (HEAP8[$1 + 19 | 0] & 1) {
       break label$8;
      }
      if (!(jsiEcho() & 1)) {
       break label$8;
      }
      jsiHistoryAddLine(HEAP32[$1 + 24 >> 2]);
     }
     jsvUnLock(HEAP32[$1 + 24 >> 2]);
     HEAP16[173546] = 0;
     label$9: {
      if (!(jsiEcho() & 1)) {
       break label$9;
      }
      if (jspHasError() & 1 | HEAP8[$1 + 19 | 0] & 1) {
       break label$9;
      }
      jsiConsolePrintChar(61);
      jsfPrintJSON(HEAP32[$1 + 20 >> 2], 813);
      jsiConsolePrintString(146977);
     }
     jsvUnLock(HEAP32[$1 + 20 >> 2]);
    }
    jsiCheckErrors();
    HEAP16[173534] = HEAPU16[173534] & -3;
    break label$1;
   }
   if (jsiShowInputLine() & 1) {
    jsiConsolePrintString(125754);
   }
   jsiIsAboutToEditInputLine();
   jsiAppendToInputLine(146977);
   HEAP32[86770] = HEAP32[86770] + 1;
   break label$1;
  }
  jsiIsAboutToEditInputLine();
  if (jsiShowInputLine() & 1) {
   jsiConsoleEraseAfterCursor();
  }
  HEAP32[$1 + 12 >> 2] = jsvNewFromEmptyString_5();
  if (HEAP32[86770]) {
   jsvAppendStringVar(HEAP32[$1 + 12 >> 2], HEAP32[86768], 0, HEAP32[86770]);
  }
  jsvAppendCharacter_1(HEAP32[$1 + 12 >> 2], 10);
  jsvAppendStringVar(HEAP32[$1 + 12 >> 2], HEAP32[86768], HEAP32[86770], 2147483647);
  jsiInputLineCursorMoved();
  jsvUnLock(HEAP32[86768]);
  HEAP32[86768] = HEAP32[$1 + 12 >> 2];
  if (jsiShowInputLine() & 1) {
   jsiConsolePrintStringVarWithNewLineChar(HEAP32[86768], HEAP32[86770], 58);
   jsiMoveCursorChar(HEAP32[86768], jsvGetStringLength(HEAP32[86768]), HEAP32[86770] + 1 | 0);
  }
  HEAP32[86770] = HEAP32[86770] + 1;
 }
 __stack_pointer = $1 + 32 | 0;
}

function tflite__ops__micro__fully_connected__Prepare_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 56 >> 2] = $0;
 HEAP32[$2 + 52 >> 2] = $1;
 label$1: {
  if (!HEAP32[HEAP32[$2 + 52 >> 2] + 8 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if (!HEAP32[HEAP32[$2 + 52 >> 2] + 12 >> 2]) {
   break label$2;
  }
 }
 HEAP32[$2 + 48 >> 2] = HEAP32[HEAP32[$2 + 52 >> 2] + 8 >> 2];
 HEAP32[$2 + 44 >> 2] = HEAP32[HEAP32[$2 + 52 >> 2] + 12 >> 2];
 HEAP32[$2 + 40 >> 2] = tflite__GetInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], 0);
 HEAP32[$2 + 36 >> 2] = tflite__GetInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], 1);
 HEAP32[$2 + 32 >> 2] = tflite__GetOptionalInputTensor_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], 2);
 HEAP32[$2 + 28 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], 0);
 label$3: {
  if (HEAP32[HEAP32[$2 + 40 >> 2] + 28 >> 2] != HEAP32[HEAP32[$2 + 28 >> 2] + 28 >> 2]) {
   $0 = HEAP32[HEAP32[$2 + 56 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 56 >> 2];
   $3 = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 40 >> 2] + 28 >> 2]);
   HEAP32[$2 + 12 >> 2] = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 28 >> 2] + 28 >> 2]);
   HEAP32[$2 + 8 >> 2] = $3;
   HEAP32[$2 + 4 >> 2] = 119866;
   HEAP32[$2 >> 2] = 119879;
   FUNCTION_TABLE[$0 | 0]($1, 142671, $2);
   HEAP32[$2 + 60 >> 2] = 1;
   break label$3;
  }
  if (HEAP32[HEAP32[$2 + 40 >> 2] + 28 >> 2] != HEAP32[HEAP32[$2 + 36 >> 2] + 28 >> 2]) {
   FUNCTION_TABLE[HEAP32[HEAP32[$2 + 56 >> 2] + 20 >> 2]](HEAP32[$2 + 56 >> 2], 127144, 0);
   HEAP32[$2 + 60 >> 2] = 1;
   break label$3;
  }
  HEAP32[$2 + 60 >> 2] = tflite__ops__micro__fully_connected___28anonymous_20namespace_29__CalculateOpData_28TfLiteContext__2c_20TfLiteFusedActivation_2c_20TfLiteType_2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20tflite__ops__micro__fully_connected___28anonymous_20namespace_29__OpData__29(HEAP32[$2 + 56 >> 2], HEAP32[HEAP32[$2 + 44 >> 2] >> 2], HEAP32[HEAP32[$2 + 40 >> 2] + 28 >> 2], HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 + 32 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 48 >> 2]);
 }
 __stack_pointer = $2 - -64 | 0;
 return HEAP32[$2 + 60 >> 2];
}

function jswrap_graphics_createCallback($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 128 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 120 >> 2] = $0;
 HEAP32[$4 + 116 >> 2] = $1;
 HEAP32[$4 + 112 >> 2] = $2;
 HEAP32[$4 + 108 >> 2] = $3;
 label$1: {
  label$2: {
   if (!(HEAP32[$4 + 120 >> 2] <= 0 | HEAP32[$4 + 116 >> 2] <= 0 | HEAP32[$4 + 120 >> 2] > 32767)) {
    if (HEAP32[$4 + 116 >> 2] <= 32767) {
     break label$2;
    }
   }
   jsExceptionHere(1, 119328, 0);
   HEAP32[$4 + 124 >> 2] = 0;
   break label$1;
  }
  if (!(isValidBPP(HEAP32[$4 + 112 >> 2]) & 1)) {
   jsExceptionHere(1, 124062, 0);
   HEAP32[$4 + 124 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 104 >> 2] = 0;
  HEAP32[$4 + 100 >> 2] = 0;
  label$5: {
   if (jsvIsObject(HEAP32[$4 + 108 >> 2]) & 1) {
    jsvUnLock(HEAP32[$4 + 104 >> 2]);
    HEAP32[$4 + 104 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 108 >> 2], 117793);
    HEAP32[$4 + 100 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 108 >> 2], 113261);
    break label$5;
   }
   HEAP32[$4 + 104 >> 2] = jsvLockAgain(HEAP32[$4 + 108 >> 2]);
  }
  if (!(jsvIsFunction(HEAP32[$4 + 104 >> 2]) & 1)) {
   HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 104 >> 2];
   jsExceptionHere(1, 113551, $4 + 16 | 0);
   jsvUnLock2(HEAP32[$4 + 104 >> 2], HEAP32[$4 + 100 >> 2]);
   HEAP32[$4 + 124 >> 2] = 0;
   break label$1;
  }
  label$8: {
   if (jsvIsUndefined(HEAP32[$4 + 100 >> 2]) & 1) {
    break label$8;
   }
   if (jsvIsFunction(HEAP32[$4 + 100 >> 2]) & 1) {
    break label$8;
   }
   HEAP32[$4 >> 2] = HEAP32[$4 + 100 >> 2];
   jsExceptionHere(1, 113551, $4);
   jsvUnLock2(HEAP32[$4 + 104 >> 2], HEAP32[$4 + 100 >> 2]);
   HEAP32[$4 + 124 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 96 >> 2] = jspNewObject(0, 115743);
  if (!HEAP32[$4 + 96 >> 2]) {
   HEAP32[$4 + 124 >> 2] = 0;
   break label$1;
  }
  HEAP8[$4 + 28 | 0] = 1;
  HEAP8[$4 + 29 | 0] = 0;
  HEAP8[$4 + 30 | 0] = 0;
  HEAP8[$4 + 31 | 0] = 0;
  graphicsStructInit($4 + 24 | 0, HEAP32[$4 + 120 >> 2], HEAP32[$4 + 116 >> 2], HEAP32[$4 + 112 >> 2]);
  $0 = HEAP32[$4 + 96 >> 2];
  HEAP8[$4 + 24 | 0] = $0;
  HEAP8[$4 + 25 | 0] = $0 >>> 8;
  HEAP8[$4 + 26 | 0] = $0 >>> 16;
  HEAP8[$4 + 27 | 0] = $0 >>> 24;
  lcdInit_JS($4 + 24 | 0, HEAP32[$4 + 104 >> 2], HEAP32[$4 + 100 >> 2]);
  graphicsSetVarInitial($4 + 24 | 0);
  jsvUnLock2(HEAP32[$4 + 104 >> 2], HEAP32[$4 + 100 >> 2]);
  HEAP32[$4 + 124 >> 2] = HEAP32[$4 + 96 >> 2];
 }
 __stack_pointer = $4 + 128 | 0;
 return HEAP32[$4 + 124 >> 2];
}

function jswrap_promise_all($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 40 >> 2] = $0;
 label$1: {
  if (!(jsvIsIterable(HEAP32[$1 + 40 >> 2]) & 1)) {
   HEAP32[$1 >> 2] = HEAP32[$1 + 40 >> 2];
   jsExceptionHere(3, 114237, $1);
   HEAP32[$1 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 36 >> 2] = jspNewObject(0, 119742);
  if (!HEAP32[$1 + 36 >> 2]) {
   HEAP32[$1 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 32 >> 2] = jsvNewNativeFunction(628, 32776);
  if (!HEAP32[$1 + 32 >> 2]) {
   HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 36 >> 2];
   break label$1;
  }
  jsvObjectSetChild(HEAP32[$1 + 32 >> 2], 115428, HEAP32[$1 + 36 >> 2]);
  HEAP32[$1 + 28 >> 2] = jsvNewEmptyArray();
  HEAP32[$1 + 24 >> 2] = 0;
  HEAP32[$1 + 20 >> 2] = 0;
  jsvObjectIteratorNew($1 + 16 | 0, HEAP32[$1 + 40 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_17($1 + 16 | 0) & 1) {
    HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetValue_15($1 + 16 | 0);
    label$7: {
     if (_jswrap_promise_is_promise(HEAP32[$1 + 12 >> 2]) & 1) {
      HEAP32[$1 + 8 >> 2] = jsvNewNativeFunction(629, 32840);
      HEAP32[$1 + 4 >> 2] = jsvNewFromInteger(HEAP32[$1 + 24 >> 2]);
      jsvAddFunctionParameter(HEAP32[$1 + 8 >> 2], 0, HEAP32[$1 + 4 >> 2]);
      jsvUnLock(HEAP32[$1 + 4 >> 2]);
      jsvObjectSetChild(HEAP32[$1 + 8 >> 2], 115428, HEAP32[$1 + 36 >> 2]);
      jsvUnLock2(jswrap_promise_then(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 8 >> 2], HEAP32[$1 + 32 >> 2]), HEAP32[$1 + 8 >> 2]);
      break label$7;
     }
     jsvSetArrayItem(HEAP32[$1 + 28 >> 2], HEAP32[$1 + 24 >> 2], HEAP32[$1 + 12 >> 2]);
     HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 20 >> 2] + 1;
    }
    jsvUnLock(HEAP32[$1 + 12 >> 2]);
    HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 24 >> 2] + 1;
    jsvObjectIteratorNext($1 + 16 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_17($1 + 16 | 0);
  label$9: {
   if (HEAP32[$1 + 20 >> 2] == HEAP32[$1 + 24 >> 2]) {
    jsvUnLock(HEAP32[$1 + 36 >> 2]);
    HEAP32[$1 + 36 >> 2] = jswrap_promise_resolve(HEAP32[$1 + 28 >> 2]);
    jsvUnLock(HEAP32[$1 + 28 >> 2]);
    break label$9;
   }
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 36 >> 2], 113136, jsvNewFromInteger(HEAP32[$1 + 24 >> 2] - HEAP32[$1 + 20 >> 2] | 0));
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 36 >> 2], 115486, HEAP32[$1 + 28 >> 2]);
  }
  jsvUnLock(HEAP32[$1 + 32 >> 2]);
  HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 36 >> 2];
 }
 __stack_pointer = $1 + 48 | 0;
 return HEAP32[$1 + 44 >> 2];
}

function _jswrap_promise_resolve_or_reject($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 jsvObjectRemoveChild(HEAP32[$3 + 44 >> 2], 117579);
 jsvObjectRemoveChild(HEAP32[$3 + 44 >> 2], 113298);
 HEAP32[$3 + 32 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 44 >> 2], 117569);
 jsvObjectRemoveChild(HEAP32[$3 + 44 >> 2], 117569);
 HEAP32[$3 + 28 >> 2] = 0;
 label$1: {
  if (jsvIsArray(HEAP32[$3 + 36 >> 2]) & 1) {
   jsvObjectIteratorNew($3 + 24 | 0, HEAP32[$3 + 36 >> 2]);
   HEAP8[$3 + 23 | 0] = 1;
   while (1) {
    if (jsvObjectIteratorHasValue_17($3 + 24 | 0) & 1) {
     HEAP32[$3 + 16 >> 2] = jsvObjectIteratorGetValue_15($3 + 24 | 0);
     HEAP32[$3 + 12 >> 2] = jspExecuteFunction(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 44 >> 2], 1, $3 + 40 | 0);
     label$5: {
      if (HEAP8[$3 + 23 | 0] & 1) {
       HEAP8[$3 + 23 | 0] = 0;
       HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2];
       break label$5;
      }
      jsvUnLock(HEAP32[$3 + 12 >> 2]);
     }
     jsvUnLock(HEAP32[$3 + 16 >> 2]);
     jsvObjectIteratorNext($3 + 24 | 0);
     continue;
    }
    break;
   }
   jsvObjectIteratorFree_17($3 + 24 | 0);
   break label$1;
  }
  if (HEAP32[$3 + 36 >> 2]) {
   HEAP32[$3 + 28 >> 2] = jspExecuteFunction(HEAP32[$3 + 36 >> 2], HEAP32[$3 + 44 >> 2], 1, $3 + 40 | 0);
  }
 }
 HEAP32[$3 + 8 >> 2] = jspGetException();
 label$8: {
  if (HEAP32[$3 + 8 >> 2]) {
   _jswrap_promise_queuereject(HEAP32[$3 + 32 >> 2], HEAP32[$3 + 8 >> 2]);
   jsvUnLock3(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 28 >> 2], HEAP32[$3 + 32 >> 2]);
   break label$8;
  }
  if (HEAP32[$3 + 32 >> 2]) {
   label$11: {
    if (_jswrap_promise_is_promise(HEAP32[$3 + 28 >> 2]) & 1) {
     HEAP32[$3 + 4 >> 2] = jsvNewNativeFunction(624, 32776);
     HEAP32[$3 >> 2] = jsvNewNativeFunction(625, 32776);
     if (!(!HEAP32[$3 + 4 >> 2] | !HEAP32[$3 >> 2])) {
      jsvObjectSetChild(HEAP32[$3 + 4 >> 2], 115428, HEAP32[$3 + 32 >> 2]);
      jsvObjectSetChild(HEAP32[$3 >> 2], 115428, HEAP32[$3 + 32 >> 2]);
      _jswrap_promise_add(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 4 >> 2], 1);
      _jswrap_promise_add(HEAP32[$3 + 28 >> 2], HEAP32[$3 >> 2], 0);
     }
     jsvUnLock2(HEAP32[$3 + 4 >> 2], HEAP32[$3 >> 2]);
     break label$11;
    }
    _jswrap_promise_queueresolve(HEAP32[$3 + 32 >> 2], HEAP32[$3 + 28 >> 2]);
   }
  }
  jsvUnLock2(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 32 >> 2]);
 }
 __stack_pointer = $3 + 48 | 0;
}

function jsfFindFile($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 112 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 104 >> 2] = $1;
 HEAP8[$2 + 103 | 0] = jsfStripDriveFromName($0, 1);
 $4 = HEAP32[$2 + 104 >> 2];
 HEAP32[$2 + 56 >> 2] = HEAP32[$0 + 24 >> 2];
 $1 = HEAP32[$0 + 16 >> 2];
 $3 = HEAP32[$0 + 20 >> 2];
 HEAP32[$2 + 48 >> 2] = $1;
 HEAP32[$2 + 52 >> 2] = $3;
 $1 = HEAP32[$0 + 12 >> 2];
 $3 = HEAP32[$0 + 8 >> 2];
 HEAP32[$2 + 40 >> 2] = $3;
 HEAP32[$2 + 44 >> 2] = $1;
 $3 = HEAP32[$0 + 4 >> 2];
 $1 = HEAP32[$0 >> 2];
 HEAP32[$2 + 32 >> 2] = $1;
 HEAP32[$2 + 36 >> 2] = $3;
 HEAP32[$2 + 96 >> 2] = jsfCacheFind($2 + 32 | 0, $4);
 if (HEAP32[$2 + 96 >> 2] == -1) {
  HEAP32[$2 + 24 >> 2] = HEAP32[$0 + 24 >> 2];
  $3 = HEAP32[$0 + 16 >> 2];
  $1 = HEAP32[$0 + 20 >> 2];
  HEAP32[$2 + 16 >> 2] = $3;
  HEAP32[$2 + 20 >> 2] = $1;
  $3 = HEAP32[$0 + 12 >> 2];
  $1 = HEAP32[$0 + 8 >> 2];
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 12 >> 2] = $3;
  $1 = HEAP32[$0 + 4 >> 2];
  $3 = HEAP32[$0 >> 2];
  HEAP32[$2 >> 2] = $3;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$2 + 96 >> 2] = jsfBankFindFile(134217728, 142606336, $2, $2 - -64 | 0);
  if (!HEAP32[$2 + 96 >> 2]) {
   $1 = HEAP32[$0 >> 2];
   $3 = HEAP32[$0 + 4 >> 2];
   $5 = $1;
   $4 = $2 - -64 | 0;
   $1 = $4;
   HEAP32[$1 + 4 >> 2] = $5;
   HEAP32[$1 + 8 >> 2] = $3;
   HEAP32[$1 + 28 >> 2] = HEAP32[$0 + 24 >> 2];
   $1 = HEAP32[$0 + 20 >> 2];
   $3 = HEAP32[$0 + 16 >> 2];
   $5 = $3;
   $3 = $4;
   HEAP32[$3 + 20 >> 2] = $5;
   HEAP32[$3 + 24 >> 2] = $1;
   $3 = HEAP32[$0 + 12 >> 2];
   $1 = HEAP32[$0 + 8 >> 2];
   $5 = $1;
   $1 = $4;
   HEAP32[$1 + 12 >> 2] = $5;
   HEAP32[$1 + 16 >> 2] = $3;
  }
  jsfCachePut($2 - -64 | 0, HEAP32[$2 + 96 >> 2]);
  if (HEAP32[$2 + 104 >> 2]) {
   $1 = HEAP32[$2 + 68 >> 2];
   $3 = HEAP32[$2 + 64 >> 2];
   $4 = $3;
   $0 = HEAP32[$2 + 104 >> 2];
   $3 = $0;
   HEAP32[$3 >> 2] = $4;
   HEAP32[$3 + 4 >> 2] = $1;
   $3 = HEAP32[$2 + 92 >> 2];
   $1 = HEAP32[$2 + 88 >> 2];
   $4 = $1;
   $1 = $0;
   HEAP32[$1 + 24 >> 2] = $4;
   HEAP32[$1 + 28 >> 2] = $3;
   $1 = HEAP32[$2 + 84 >> 2];
   $3 = HEAP32[$2 + 80 >> 2];
   $4 = $3;
   $3 = $0;
   HEAP32[$3 + 16 >> 2] = $4;
   HEAP32[$3 + 20 >> 2] = $1;
   $3 = HEAP32[$2 + 76 >> 2];
   $1 = HEAP32[$2 + 72 >> 2];
   $4 = $1;
   $1 = $0;
   HEAP32[$1 + 8 >> 2] = $4;
   HEAP32[$1 + 12 >> 2] = $3;
   $0 = $2;
  }
 }
 HEAP32[$2 + 108 >> 2] = HEAP32[$2 + 96 >> 2];
 __stack_pointer = $2 + 112 | 0;
 return HEAP32[$2 + 108 >> 2];
}

function jswrap_graphics_setRotation($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 96 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 88 >> 2] = $0;
 HEAP32[$3 + 84 >> 2] = $1;
 HEAP8[$3 + 83 | 0] = $2;
 label$1: {
  if (!(graphicsGetFromVar($3 + 8 | 0, HEAP32[$3 + 88 >> 2]) & 1)) {
   HEAP32[$3 + 92 >> 2] = 0;
   break label$1;
  }
  $0 = (HEAPU8[$3 + 16 | 0] | HEAPU8[$3 + 17 | 0] << 8 | (HEAPU8[$3 + 18 | 0] << 16 | HEAPU8[$3 + 19 | 0] << 24)) & -113;
  HEAP8[$3 + 16 | 0] = $0;
  HEAP8[$3 + 17 | 0] = $0 >>> 8;
  HEAP8[$3 + 18 | 0] = $0 >>> 16;
  HEAP8[$3 + 19 | 0] = $0 >>> 24;
  label$3: {
   label$4: {
    switch (HEAP32[$3 + 84 >> 2] - 1 | 0) {
    case 0:
     $0 = HEAPU8[$3 + 16 | 0] | HEAPU8[$3 + 17 | 0] << 8 | (HEAPU8[$3 + 18 | 0] << 16 | HEAPU8[$3 + 19 | 0] << 24) | 48;
     HEAP8[$3 + 16 | 0] = $0;
     HEAP8[$3 + 17 | 0] = $0 >>> 8;
     HEAP8[$3 + 18 | 0] = $0 >>> 16;
     HEAP8[$3 + 19 | 0] = $0 >>> 24;
     break label$3;

    case 1:
     $0 = HEAPU8[$3 + 16 | 0] | HEAPU8[$3 + 17 | 0] << 8 | (HEAPU8[$3 + 18 | 0] << 16 | HEAPU8[$3 + 19 | 0] << 24) | 96;
     HEAP8[$3 + 16 | 0] = $0;
     HEAP8[$3 + 17 | 0] = $0 >>> 8;
     HEAP8[$3 + 18 | 0] = $0 >>> 16;
     HEAP8[$3 + 19 | 0] = $0 >>> 24;
     break label$3;

    case 2:
     break label$4;

    default:
     break label$3;
    }
   }
   $0 = HEAPU8[$3 + 16 | 0] | HEAPU8[$3 + 17 | 0] << 8 | (HEAPU8[$3 + 18 | 0] << 16 | HEAPU8[$3 + 19 | 0] << 24) | 80;
   HEAP8[$3 + 16 | 0] = $0;
   HEAP8[$3 + 17 | 0] = $0 >>> 8;
   HEAP8[$3 + 18 | 0] = $0 >>> 16;
   HEAP8[$3 + 19 | 0] = $0 >>> 24;
  }
  if (HEAP8[$3 + 83 | 0] & 1) {
   label$8: {
    if ((HEAPU8[$3 + 16 | 0] | HEAPU8[$3 + 17 | 0] << 8 | (HEAPU8[$3 + 18 | 0] << 16 | HEAPU8[$3 + 19 | 0] << 24)) & 16) {
     $0 = (HEAPU8[$3 + 16 | 0] | HEAPU8[$3 + 17 | 0] << 8 | (HEAPU8[$3 + 18 | 0] << 16 | HEAPU8[$3 + 19 | 0] << 24)) ^ 64;
     HEAP8[$3 + 16 | 0] = $0;
     HEAP8[$3 + 17 | 0] = $0 >>> 8;
     HEAP8[$3 + 18 | 0] = $0 >>> 16;
     HEAP8[$3 + 19 | 0] = $0 >>> 24;
     break label$8;
    }
    $0 = (HEAPU8[$3 + 16 | 0] | HEAPU8[$3 + 17 | 0] << 8 | (HEAPU8[$3 + 18 | 0] << 16 | HEAPU8[$3 + 19 | 0] << 24)) ^ 32;
    HEAP8[$3 + 16 | 0] = $0;
    HEAP8[$3 + 17 | 0] = $0 >>> 8;
    HEAP8[$3 + 18 | 0] = $0 >>> 16;
    HEAP8[$3 + 19 | 0] = $0 >>> 24;
   }
  }
  graphicsSetVar($3 + 8 | 0);
  HEAP32[$3 + 92 >> 2] = jsvLockAgain(HEAP32[$3 + 88 >> 2]);
 }
 __stack_pointer = $3 + 96 | 0;
 return HEAP32[$3 + 92 >> 2];
}

function jsfBankListFilesHandleFile($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0;
 $7 = __stack_pointer - 80 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 76 >> 2] = $0;
 HEAP32[$7 + 72 >> 2] = $1;
 HEAP32[$7 + 68 >> 2] = $2;
 HEAP32[$7 + 64 >> 2] = $3;
 HEAP32[$7 + 60 >> 2] = $4;
 HEAP32[$7 + 56 >> 2] = $5;
 HEAP32[$7 + 52 >> 2] = $6;
 HEAP32[$7 + 48 >> 2] = jsfGetFileFlags(HEAP32[$7 + 68 >> 2]);
 label$1: {
  if (!(!HEAP32[$7 + 60 >> 2] | HEAP32[$7 + 60 >> 2] & HEAP32[$7 + 48 >> 2]) | HEAP32[$7 + 56 >> 2] & HEAP32[$7 + 48 >> 2]) {
   break label$1;
  }
  if (HEAP32[$7 + 48 >> 2] & 64) {
   HEAP32[$7 + 44 >> 2] = 0;
   while (1) {
    $0 = 0;
    $0 = (HEAP32[$7 + 44 >> 2] + 1 | 0) < 28 ? HEAP8[(HEAP32[$7 + 68 >> 2] + HEAP32[$7 + 44 >> 2] | 0) + 5 | 0] != 0 : $0;
    if ($0) {
     HEAP32[$7 + 44 >> 2] = HEAP32[$7 + 44 >> 2] + 1;
     continue;
    }
    break;
   }
   if (HEAP8[HEAP32[$7 + 44 >> 2] + (HEAP32[$7 + 68 >> 2] + 4 | 0) | 0] != 1) {
    break label$1;
   }
   if (HEAP32[$7 + 60 >> 2] & 64) {
    HEAP8[HEAP32[$7 + 44 >> 2] + (HEAP32[$7 + 68 >> 2] + 4 | 0) | 0] = 0;
   }
  }
  $1 = HEAP32[$7 + 68 >> 2];
  HEAP32[$7 + 24 >> 2] = HEAP32[$1 + 28 >> 2];
  $0 = HEAP32[$1 + 20 >> 2];
  $2 = HEAP32[$1 + 24 >> 2];
  HEAP32[$7 + 16 >> 2] = $0;
  HEAP32[$7 + 20 >> 2] = $2;
  $0 = HEAP32[$1 + 16 >> 2];
  $2 = HEAP32[$1 + 12 >> 2];
  HEAP32[$7 + 8 >> 2] = $2;
  HEAP32[$7 + 12 >> 2] = $0;
  $2 = HEAP32[$1 + 8 >> 2];
  $0 = HEAP32[$1 + 4 >> 2];
  HEAP32[$7 >> 2] = $0;
  HEAP32[$7 + 4 >> 2] = $2;
  HEAP32[$7 + 40 >> 2] = jsfVarFromName($7);
  HEAP8[$7 + 39 | 0] = 1;
  if (HEAP32[$7 + 64 >> 2]) {
   HEAP32[$7 + 32 >> 2] = jswrap_string_match(HEAP32[$7 + 40 >> 2], HEAP32[$7 + 64 >> 2]);
   $0 = 1;
   if (!(jsvIsUndefined(HEAP32[$7 + 32 >> 2]) & 1)) {
    $0 = jsvIsNull(HEAP32[$7 + 32 >> 2]);
   }
   HEAP8[$7 + 39 | 0] = ($0 ^ -1) & 1;
   jsvUnLock(HEAP32[$7 + 32 >> 2]);
  }
  if (!(!HEAP32[$7 + 52 >> 2] | !(HEAP8[$7 + 39 | 0] & 1))) {
   HEAP32[HEAP32[$7 + 52 >> 2] >> 2] = HEAP32[HEAP32[$7 + 52 >> 2] >> 2] << 1 | HEAP32[HEAP32[$7 + 52 >> 2] >> 2] >>> 31;
   $0 = HEAP32[HEAP32[$7 + 52 >> 2] >> 2] ^ HEAP32[$7 + 72 >> 2];
   $1 = jsvGetIntegerAndUnLock(jswrap_espruino_CRC32(HEAP32[$7 + 40 >> 2]));
   HEAP32[HEAP32[$7 + 52 >> 2] >> 2] = $0 ^ $1;
  }
  if (!(!(HEAP8[$7 + 39 | 0] & 1) | !HEAP32[$7 + 76 >> 2])) {
   jsvArrayPushAndUnLock(HEAP32[$7 + 76 >> 2], HEAP32[$7 + 40 >> 2]);
   break label$1;
  }
  jsvUnLock(HEAP32[$7 + 40 >> 2]);
 }
 __stack_pointer = $7 + 80 | 0;
}

function jspGetNamedFieldInParents($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP8[$3 + 39 | 0] = $2;
 HEAP32[$3 + 32 >> 2] = jspeiFindChildFromStringInParents(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 40 >> 2]);
 if (!HEAP32[$3 + 32 >> 2]) {
  HEAP32[$3 + 32 >> 2] = jswFindBuiltInFunction(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 40 >> 2]);
 }
 if (!(!HEAP32[$3 + 32 >> 2] | !(HEAP8[$3 + 39 | 0] & 1))) {
  if (jsvIsName(HEAP32[$3 + 32 >> 2]) & 1) {
   HEAP32[$3 + 28 >> 2] = jsvGetValueOfName(HEAP32[$3 + 32 >> 2]);
   jsvUnLock(HEAP32[$3 + 32 >> 2]);
   HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 28 >> 2];
  }
  HEAP32[$3 + 24 >> 2] = jsvNewNameFromString(HEAP32[$3 + 40 >> 2]);
  HEAP32[$3 + 20 >> 2] = jsvCreateNewChild(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 32 >> 2]);
  jsvUnLock2(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 32 >> 2]);
  HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 20 >> 2];
  label$4: {
   if (!HEAP32[$3 + 32 >> 2]) {
    break label$4;
   }
   if (!(jsvIsArray(HEAP32[$3 + 44 >> 2]) & 1)) {
    break label$4;
   }
   if (strcmp(HEAP32[$3 + 40 >> 2], 118393)) {
    break label$4;
   }
   $0 = HEAP32[$3 + 32 >> 2];
   $1 = HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8 | 64;
   HEAP8[$0 + 12 | 0] = $1;
   HEAP8[$0 + 13 | 0] = $1 >>> 8;
  }
 }
 if (!HEAP32[$3 + 32 >> 2]) {
  label$6: {
   label$7: {
    if (!(jsvIsFunction(HEAP32[$3 + 44 >> 2]) & 1)) {
     break label$7;
    }
    if (strcmp(HEAP32[$3 + 40 >> 2], 119810)) {
     break label$7;
    }
    HEAP32[$3 + 16 >> 2] = jsvNewObject();
    jsvObjectSetChild(HEAP32[$3 + 16 >> 2], 116071, HEAP32[$3 + 44 >> 2]);
    HEAP32[$3 + 32 >> 2] = jsvAddNamedChild(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 16 >> 2], 119810);
    jspEnsureIsPrototype(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 32 >> 2]);
    jsvUnLock(HEAP32[$3 + 16 >> 2]);
    break label$6;
   }
   if (!strcmp(HEAP32[$3 + 40 >> 2], 123007)) {
    HEAP32[$3 + 12 >> 2] = jswGetBasicObjectName(HEAP32[$3 + 44 >> 2]);
    if (HEAP32[$3 + 12 >> 2]) {
     HEAP32[$3 + 8 >> 2] = jsvSkipNameAndUnLock(jspNewPrototype(HEAP32[$3 + 12 >> 2], 0));
     HEAP32[$3 + 4 >> 2] = jsvNewNameFromString(123007);
     if (HEAP32[$3 + 8 >> 2]) {
      HEAP32[$3 + 32 >> 2] = jsvCreateNewChild(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 4 >> 2], HEAP32[$3 + 8 >> 2]);
     }
     jsvUnLock2(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
    }
   }
  }
 }
 __stack_pointer = $3 + 48 | 0;
 return HEAP32[$3 + 32 >> 2];
}

function jswrap_graphics_fillPoly_X($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 192 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 184 >> 2] = $0;
 HEAP32[$3 + 180 >> 2] = $1;
 HEAP8[$3 + 179 | 0] = $2;
 label$1: {
  if (!(graphicsGetFromVar($3 + 104 | 0, HEAP32[$3 + 184 >> 2]) & 1)) {
   HEAP32[$3 + 188 >> 2] = 0;
   break label$1;
  }
  if (!(jsvIsIterable(HEAP32[$3 + 180 >> 2]) & 1)) {
   HEAP32[$3 + 188 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 100 >> 2] = 128;
  HEAP32[$3 + 96 >> 2] = $3;
  $0 = $3 - 256 | 0;
  __stack_pointer = $0;
  HEAP32[$3 + 92 >> 2] = 0;
  jsvIteratorNew($3 + 32 | 0, HEAP32[$3 + 180 >> 2], 1);
  while (1) {
   $1 = 0;
   if (jsvIteratorHasElement($3 + 32 | 0) & 1) {
    $1 = HEAP32[$3 + 92 >> 2] < 128;
   }
   if ($1) {
    $4 = jsvIteratorGetFloatValue($3 + 32 | 0) * 16 + .5;
    label$7: {
     if (Math_abs($4) < 2147483648) {
      $1 = ~~$4;
      break label$7;
     }
     $1 = -2147483648;
    }
    HEAP32[$3 + 28 >> 2] = $1;
    if (HEAP32[$3 + 28 >> 2] < -32768) {
     HEAP32[$3 + 28 >> 2] = -32768;
    }
    if (HEAP32[$3 + 28 >> 2] > 32767) {
     HEAP32[$3 + 28 >> 2] = 32767;
    }
    $1 = HEAP32[$3 + 28 >> 2];
    $2 = HEAP32[$3 + 92 >> 2];
    HEAP32[$3 + 92 >> 2] = $2 + 1;
    HEAP16[($2 << 1) + $0 >> 1] = $1;
    jsvIteratorNext($3 + 32 | 0);
    continue;
   }
   break;
  }
  if (jsvIteratorHasElement($3 + 32 | 0) & 1) {
   HEAP32[$3 >> 2] = 64;
   jsExceptionHere(1, 111598, $3);
  }
  jsvIteratorFree($3 + 32 | 0);
  if (HEAP8[$3 + 179 | 0] & 1) {
   HEAP32[$3 + 24 >> 2] = HEAP16[(HEAP32[$3 + 92 >> 2] - 2 << 1) + $0 >> 1];
   HEAP32[$3 + 20 >> 2] = HEAP16[(HEAP32[$3 + 92 >> 2] - 1 << 1) + $0 >> 1];
   HEAP32[$3 + 16 >> 2] = 0;
   while (1) {
    if (HEAP32[$3 + 16 >> 2] < HEAP32[$3 + 92 >> 2]) {
     HEAP32[$3 + 12 >> 2] = HEAP16[(HEAP32[$3 + 16 >> 2] << 1) + $0 >> 1];
     HEAP32[$3 + 8 >> 2] = HEAP16[(HEAP32[$3 + 16 >> 2] + 1 << 1) + $0 >> 1];
     graphicsDrawLineAA($3 + 104 | 0, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
     HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 12 >> 2];
     HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 8 >> 2];
     HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] + 2;
     continue;
    }
    break;
   }
  }
  graphicsFillPoly($3 + 104 | 0, HEAP32[$3 + 92 >> 2] / 2 | 0, $0);
  graphicsSetVar($3 + 104 | 0);
  HEAP32[$3 + 188 >> 2] = jsvLockAgain(HEAP32[$3 + 184 >> 2]);
 }
 __stack_pointer = $3 + 192 | 0;
 return HEAP32[$3 + 188 >> 2];
}

function tflite__MicroMutableOpResolver_9u___AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration_20const__2c_20TfLiteStatus_20_28__29_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 40 >> 2] = $0;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP32[$4 + 28 >> 2] = $3;
 $5 = HEAP32[$4 + 40 >> 2];
 label$1: {
  if (HEAP32[$4 + 36 >> 2] == 32) {
   if (HEAP32[$5 + 372 >> 2]) {
    tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$5 + 372 >> 2], 127193, 0);
   }
   HEAP32[$4 + 44 >> 2] = 1;
   break label$1;
  }
  if (FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 20 >> 2]]($5, HEAP32[$4 + 36 >> 2]) | 0) {
   if (HEAP32[$5 + 372 >> 2]) {
    $0 = HEAP32[$5 + 372 >> 2];
    HEAP32[$4 >> 2] = HEAP32[$4 + 36 >> 2];
    tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 127820, $4);
   }
   HEAP32[$4 + 44 >> 2] = 1;
   break label$1;
  }
  if (HEAPU32[$5 + 292 >> 2] >= 9) {
   if (HEAP32[$5 + 372 >> 2]) {
    $0 = HEAP32[$5 + 372 >> 2];
    $1 = HEAP32[$4 + 36 >> 2];
    HEAP32[$4 + 20 >> 2] = 9;
    HEAP32[$4 + 16 >> 2] = $1;
    tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 127753, $4 + 16 | 0);
   }
   HEAP32[$4 + 44 >> 2] = 1;
   break label$1;
  }
  $6 = HEAP32[$4 + 32 >> 2];
  $0 = HEAP32[$6 >> 2];
  $1 = HEAP32[$6 + 4 >> 2];
  $3 = $0;
  $2 = ($5 + 4 | 0) + (HEAP32[$5 + 292 >> 2] << 5) | 0;
  $0 = $2;
  HEAP32[$0 >> 2] = $3;
  HEAP32[$0 + 4 >> 2] = $1;
  $0 = HEAP32[$6 + 28 >> 2];
  $1 = HEAP32[$6 + 24 >> 2];
  $3 = $1;
  $1 = $2;
  HEAP32[$1 + 24 >> 2] = $3;
  HEAP32[$1 + 28 >> 2] = $0;
  $1 = HEAP32[$6 + 20 >> 2];
  $0 = HEAP32[$6 + 16 >> 2];
  $3 = $0;
  $0 = $2;
  HEAP32[$0 + 16 >> 2] = $3;
  HEAP32[$0 + 20 >> 2] = $1;
  $0 = HEAP32[$6 + 12 >> 2];
  $1 = HEAP32[$6 + 8 >> 2];
  $3 = $1;
  $1 = $2;
  HEAP32[$1 + 8 >> 2] = $3;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[(($5 + 4 | 0) + (HEAP32[$5 + 292 >> 2] << 5) | 0) + 20 >> 2] = HEAP32[$4 + 36 >> 2];
  HEAP32[$5 + 292 >> 2] = HEAP32[$5 + 292 >> 2] + 1;
  HEAP32[($5 + 296 | 0) + (HEAP32[$5 + 368 >> 2] << 2) >> 2] = HEAP32[$4 + 36 >> 2];
  HEAP32[($5 + 332 | 0) + (HEAP32[$5 + 368 >> 2] << 2) >> 2] = HEAP32[$4 + 28 >> 2];
  HEAP32[$5 + 368 >> 2] = HEAP32[$5 + 368 >> 2] + 1;
  HEAP32[$4 + 44 >> 2] = 0;
 }
 __stack_pointer = $4 + 48 | 0;
 return HEAP32[$4 + 44 >> 2];
}

function jswrap_graphics_setClipRect($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 112 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 104 >> 2] = $0;
 HEAP32[$5 + 100 >> 2] = $1;
 HEAP32[$5 + 96 >> 2] = $2;
 HEAP32[$5 + 92 >> 2] = $3;
 HEAP32[$5 + 88 >> 2] = $4;
 label$1: {
  if (!(graphicsGetFromVar($5 + 16 | 0, HEAP32[$5 + 104 >> 2]) & 1)) {
   HEAP32[$5 + 108 >> 2] = 0;
   break label$1;
  }
  graphicsToDeviceCoordinates($5 + 16 | 0, $5 + 100 | 0, $5 + 96 | 0);
  graphicsToDeviceCoordinates($5 + 16 | 0, $5 + 92 | 0, $5 + 88 | 0);
  if (HEAP32[$5 + 100 >> 2] < 0) {
   HEAP32[$5 + 100 >> 2] = 0;
  }
  if (HEAP32[$5 + 96 >> 2] < 0) {
   HEAP32[$5 + 96 >> 2] = 0;
  }
  if (HEAP32[$5 + 92 >> 2] < 0) {
   HEAP32[$5 + 92 >> 2] = 0;
  }
  if (HEAP32[$5 + 88 >> 2] < 0) {
   HEAP32[$5 + 88 >> 2] = 0;
  }
  if (HEAP32[$5 + 100 >> 2] >= (HEAPU8[$5 + 28 | 0] | HEAPU8[$5 + 29 | 0] << 8)) {
   HEAP32[$5 + 100 >> 2] = (HEAPU8[$5 + 28 | 0] | HEAPU8[$5 + 29 | 0] << 8) - 1;
  }
  if (HEAP32[$5 + 96 >> 2] >= (HEAPU8[$5 + 30 | 0] | HEAPU8[$5 + 31 | 0] << 8)) {
   HEAP32[$5 + 96 >> 2] = (HEAPU8[$5 + 30 | 0] | HEAPU8[$5 + 31 | 0] << 8) - 1;
  }
  if (HEAP32[$5 + 92 >> 2] >= (HEAPU8[$5 + 28 | 0] | HEAPU8[$5 + 29 | 0] << 8)) {
   HEAP32[$5 + 92 >> 2] = (HEAPU8[$5 + 28 | 0] | HEAPU8[$5 + 29 | 0] << 8) - 1;
  }
  if (HEAP32[$5 + 88 >> 2] >= (HEAPU8[$5 + 30 | 0] | HEAPU8[$5 + 31 | 0] << 8)) {
   HEAP32[$5 + 88 >> 2] = (HEAPU8[$5 + 30 | 0] | HEAPU8[$5 + 31 | 0] << 8) - 1;
  }
  if (HEAP32[$5 + 100 >> 2] > HEAP32[$5 + 92 >> 2]) {
   HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 100 >> 2];
   HEAP32[$5 + 100 >> 2] = HEAP32[$5 + 92 >> 2];
   HEAP32[$5 + 92 >> 2] = HEAP32[$5 + 12 >> 2];
  }
  if (HEAP32[$5 + 96 >> 2] > HEAP32[$5 + 88 >> 2]) {
   HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 96 >> 2];
   HEAP32[$5 + 96 >> 2] = HEAP32[$5 + 88 >> 2];
   HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 8 >> 2];
  }
  $0 = HEAP32[$5 + 100 >> 2];
  HEAP8[$5 + 48 | 0] = $0;
  HEAP8[$5 + 49 | 0] = $0 >>> 8;
  $0 = HEAP32[$5 + 96 >> 2];
  HEAP8[$5 + 50 | 0] = $0;
  HEAP8[$5 + 51 | 0] = $0 >>> 8;
  $0 = HEAP32[$5 + 92 >> 2];
  HEAP8[$5 + 52 | 0] = $0;
  HEAP8[$5 + 53 | 0] = $0 >>> 8;
  $0 = HEAP32[$5 + 88 >> 2];
  HEAP8[$5 + 54 | 0] = $0;
  HEAP8[$5 + 55 | 0] = $0 >>> 8;
  graphicsSetVar($5 + 16 | 0);
  HEAP32[$5 + 108 >> 2] = jsvLockAgain(HEAP32[$5 + 104 >> 2]);
 }
 __stack_pointer = $5 + 112 | 0;
 return HEAP32[$5 + 108 >> 2];
}

function jswrap_array_slice($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 112 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 104 >> 2] = $0;
 HEAP32[$3 + 100 >> 2] = $1;
 HEAP32[$3 + 96 >> 2] = $2;
 HEAP32[$3 + 92 >> 2] = jsvGetLength(HEAP32[$3 + 104 >> 2]);
 HEAP32[$3 + 88 >> 2] = HEAP32[$3 + 92 >> 2];
 if (!(jsvIsUndefined(HEAP32[$3 + 96 >> 2]) & 1)) {
  HEAP32[$3 + 88 >> 2] = jsvGetInteger(HEAP32[$3 + 96 >> 2]);
 }
 HEAP32[$3 + 84 >> 2] = 0;
 HEAP32[$3 + 80 >> 2] = HEAP32[$3 + 92 >> 2];
 HEAP32[$3 + 76 >> 2] = jsvNewEmptyArray();
 label$2: {
  if (!HEAP32[$3 + 76 >> 2]) {
   HEAP32[$3 + 108 >> 2] = 0;
   break label$2;
  }
  label$4: {
   if (HEAP32[$3 + 100 >> 2] < 0) {
    if ((HEAP32[$3 + 92 >> 2] + HEAP32[$3 + 100 >> 2] | 0) > 0) {
     $0 = HEAP32[$3 + 92 >> 2] + HEAP32[$3 + 100 >> 2] | 0;
    } else {
     $0 = 0;
    }
    HEAP32[$3 + 84 >> 2] = $0;
    break label$4;
   }
   if (HEAP32[$3 + 100 >> 2] < HEAP32[$3 + 92 >> 2]) {
    $0 = HEAP32[$3 + 100 >> 2];
   } else {
    $0 = HEAP32[$3 + 92 >> 2];
   }
   HEAP32[$3 + 84 >> 2] = $0;
  }
  label$10: {
   if (HEAP32[$3 + 88 >> 2] < 0) {
    if ((HEAP32[$3 + 92 >> 2] + HEAP32[$3 + 88 >> 2] | 0) > 0) {
     $0 = HEAP32[$3 + 92 >> 2] + HEAP32[$3 + 88 >> 2] | 0;
    } else {
     $0 = 0;
    }
    HEAP32[$3 + 80 >> 2] = $0;
    break label$10;
   }
   if (HEAP32[$3 + 88 >> 2] < HEAP32[$3 + 92 >> 2]) {
    $0 = HEAP32[$3 + 88 >> 2];
   } else {
    $0 = HEAP32[$3 + 92 >> 2];
   }
   HEAP32[$3 + 80 >> 2] = $0;
  }
  HEAP8[$3 + 75 | 0] = 0;
  jsvIteratorNew($3 + 8 | 0, HEAP32[$3 + 104 >> 2], 1);
  while (1) {
   $0 = 0;
   if (jsvIteratorHasElement($3 + 8 | 0) & 1) {
    $0 = HEAPU8[$3 + 75 | 0] ^ -1;
   }
   if ($0 & 1) {
    HEAP32[$3 + 4 >> 2] = jsvGetIntegerAndUnLock(jsvIteratorGetKey($3 + 8 | 0));
    label$19: {
     if (HEAP32[$3 + 4 >> 2] < HEAP32[$3 + 84 >> 2]) {
      jsvIteratorNext($3 + 8 | 0);
      break label$19;
     }
     label$21: {
      if (HEAP32[$3 + 84 >> 2] < HEAP32[$3 + 80 >> 2]) {
       jsvArrayPushAndUnLock(HEAP32[$3 + 76 >> 2], jsvIteratorGetValue($3 + 8 | 0));
       jsvIteratorNext($3 + 8 | 0);
       HEAP32[$3 + 84 >> 2] = HEAP32[$3 + 84 >> 2] + 1;
       break label$21;
      }
      HEAP8[$3 + 75 | 0] = 1;
     }
    }
    continue;
   }
   break;
  }
  jsvIteratorFree($3 + 8 | 0);
  HEAP32[$3 + 108 >> 2] = HEAP32[$3 + 76 >> 2];
 }
 __stack_pointer = $3 + 112 | 0;
 return HEAP32[$3 + 108 >> 2];
}

function lcdMemLCD_fillRect($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = __stack_pointer - 80 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 76 >> 2] = $0;
 HEAP32[$6 + 72 >> 2] = $1;
 HEAP32[$6 + 68 >> 2] = $2;
 HEAP32[$6 + 64 >> 2] = $3;
 HEAP32[$6 + 60 >> 2] = $4;
 HEAP32[$6 + 56 >> 2] = $5;
 lcdMemLCD_waitForSendComplete();
 label$1: {
  if (!(HEAP32[$6 + 72 >> 2] | HEAP32[$6 + 64 >> 2] != 175 | (HEAP32[$6 + 56 >> 2] != 65535 ? HEAP32[$6 + 56 >> 2] : 0))) {
   HEAP32[$6 + 52 >> 2] = Math_imul(HEAP32[$6 + 68 >> 2], 68) + 2;
   HEAP32[$6 + 48 >> 2] = HEAP32[$6 + 68 >> 2];
   while (1) {
    if (HEAP32[$6 + 48 >> 2] <= HEAP32[$6 + 60 >> 2]) {
     memset(HEAP32[$6 + 52 >> 2] + 361504 | 0, HEAP32[$6 + 56 >> 2] ? 255 : 0, 66);
     HEAP32[$6 + 52 >> 2] = HEAP32[$6 + 52 >> 2] + 68;
     HEAP32[$6 + 48 >> 2] = HEAP32[$6 + 48 >> 2] + 1;
     continue;
    }
    break;
   }
   break label$1;
  }
  HEAP32[$6 + 32 >> 2] = lcdMemLCD_convert16toLCD(HEAP32[$6 + 56 >> 2], 0, 0);
  HEAP32[$6 + 36 >> 2] = lcdMemLCD_convert16toLCD(HEAP32[$6 + 56 >> 2], 1, 0);
  HEAP32[$6 + 40 >> 2] = lcdMemLCD_convert16toLCD(HEAP32[$6 + 56 >> 2], 0, 1);
  HEAP32[$6 + 44 >> 2] = lcdMemLCD_convert16toLCD(HEAP32[$6 + 56 >> 2], 1, 1);
  HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 68 >> 2];
  while (1) {
   if (HEAP32[$6 + 28 >> 2] <= HEAP32[$6 + 60 >> 2]) {
    HEAP32[$6 + 24 >> 2] = ($6 + 32 | 0) + ((HEAP32[$6 + 28 >> 2] & 1) << 3);
    HEAP32[$6 + 20 >> 2] = (Math_imul(HEAP32[$6 + 72 >> 2], 3) + 16 | 0) + (Math_imul(HEAP32[$6 + 28 >> 2], 68) << 3);
    HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 72 >> 2];
    while (1) {
     if (HEAP32[$6 + 16 >> 2] <= HEAP32[$6 + 64 >> 2]) {
      HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 20 >> 2] & 7;
      $0 = HEAP32[$6 + 20 >> 2] >> 3;
      HEAP16[$6 + 10 >> 1] = HEAPU8[$0 + 361504 | 0] | HEAPU8[$0 + 361505 | 0] << 8;
      $0 = HEAP32[$6 + 20 >> 2] >> 3;
      $1 = HEAPU16[$6 + 10 >> 1] & (7 << HEAP32[$6 + 12 >> 2] ^ -1) | HEAP32[HEAP32[$6 + 24 >> 2] + ((HEAP32[$6 + 16 >> 2] & 1) << 2) >> 2] << HEAP32[$6 + 12 >> 2];
      HEAP8[$0 + 361504 | 0] = $1;
      HEAP8[$0 + 361505 | 0] = $1 >>> 8;
      HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 20 >> 2] + 3;
      HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 16 >> 2] + 1;
      continue;
     }
     break;
    }
    HEAP32[$6 + 28 >> 2] = HEAP32[$6 + 28 >> 2] + 1;
    continue;
   }
   break;
  }
 }
 __stack_pointer = $6 + 80 | 0;
}

function heatshrink_encoder_poll($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 40 >> 2] = $0;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP32[$4 + 28 >> 2] = $3;
 label$1: {
  if (HEAP32[$4 + 28 >> 2] ? !HEAP32[$4 + 40 >> 2] | !HEAP32[$4 + 36 >> 2] : 1) {
   HEAP32[$4 + 44 >> 2] = -1;
   break label$1;
  }
  if (!HEAP32[$4 + 32 >> 2]) {
   HEAP32[$4 + 44 >> 2] = -2;
   break label$1;
  }
  HEAP32[HEAP32[$4 + 28 >> 2] >> 2] = 0;
  HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 36 >> 2];
  HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 32 >> 2];
  HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 28 >> 2];
  while (1) {
   HEAP8[$4 + 15 | 0] = HEAPU8[HEAP32[$4 + 40 >> 2] + 12 | 0];
   label$6: {
    label$7: {
     switch (HEAPU8[$4 + 15 | 0]) {
     case 0:
      HEAP32[$4 + 44 >> 2] = 0;
      break label$1;

     case 1:
      do_indexing(HEAP32[$4 + 40 >> 2]);
      HEAP8[HEAP32[$4 + 40 >> 2] + 12 | 0] = 2;
      break label$6;

     case 2:
      $0 = st_step_search(HEAP32[$4 + 40 >> 2]);
      HEAP8[HEAP32[$4 + 40 >> 2] + 12 | 0] = $0;
      break label$6;

     case 3:
      $0 = st_yield_tag_bit(HEAP32[$4 + 40 >> 2], $4 + 16 | 0);
      HEAP8[HEAP32[$4 + 40 >> 2] + 12 | 0] = $0;
      break label$6;

     case 4:
      $0 = st_e_yield_literal(HEAP32[$4 + 40 >> 2], $4 + 16 | 0);
      HEAP8[HEAP32[$4 + 40 >> 2] + 12 | 0] = $0;
      break label$6;

     case 5:
      $0 = st_yield_br_index(HEAP32[$4 + 40 >> 2], $4 + 16 | 0);
      HEAP8[HEAP32[$4 + 40 >> 2] + 12 | 0] = $0;
      break label$6;

     case 6:
      $0 = st_yield_br_length(HEAP32[$4 + 40 >> 2], $4 + 16 | 0);
      HEAP8[HEAP32[$4 + 40 >> 2] + 12 | 0] = $0;
      break label$6;

     case 7:
      $0 = st_save_backlog(HEAP32[$4 + 40 >> 2]);
      HEAP8[HEAP32[$4 + 40 >> 2] + 12 | 0] = $0;
      break label$6;

     case 8:
      $0 = st_flush_bit_buffer(HEAP32[$4 + 40 >> 2], $4 + 16 | 0);
      HEAP8[HEAP32[$4 + 40 >> 2] + 12 | 0] = $0;
      HEAP32[$4 + 44 >> 2] = 0;
      break label$1;

     case 9:
      HEAP32[$4 + 44 >> 2] = 0;
      break label$1;

     default:
      break label$7;
     }
    }
    HEAP32[$4 + 44 >> 2] = -2;
    break label$1;
   }
   if (!(HEAPU8[HEAP32[$4 + 40 >> 2] + 12 | 0] == HEAPU8[$4 + 15 | 0] & HEAP32[HEAP32[$4 + 28 >> 2] >> 2] == HEAP32[$4 + 32 >> 2])) {
    continue;
   }
   break;
  }
  HEAP32[$4 + 44 >> 2] = 1;
 }
 __stack_pointer = $4 + 48 | 0;
 return HEAP32[$4 + 44 >> 2];
}

function jswrap_banglejs_appRect() {
 var $0 = 0;
 $0 = __stack_pointer - 48 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 40 >> 2] = jsvNewObject();
 label$1: {
  if (!HEAP32[$0 + 40 >> 2]) {
   HEAP32[$0 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$0 + 36 >> 2] = jsvObjectGetChildIfExists(HEAP32[86750], 123884);
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  if (jsvIsObject(HEAP32[$0 + 36 >> 2]) & 1) {
   jsvObjectIteratorNew($0 + 24 | 0, HEAP32[$0 + 36 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue_5($0 + 24 | 0) & 1) {
     HEAP32[$0 + 20 >> 2] = jsvObjectIteratorGetValue_5($0 + 24 | 0);
     HEAP32[$0 + 16 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 20 >> 2], 122998);
     HEAP32[$0 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 20 >> 2], 118428);
     label$6: {
      if (!(jsvIsString(HEAP32[$0 + 16 >> 2]) & 1)) {
       break label$6;
      }
      if (!(jsvIsNumeric(HEAP32[$0 + 12 >> 2]) & 1)) {
       break label$6;
      }
      HEAP8[$0 + 11 | 0] = jsvGetCharInString(HEAP32[$0 + 16 >> 2], 0);
      HEAP32[$0 + 4 >> 2] = jsvGetIntegerAndUnLock(HEAP32[$0 + 12 >> 2]);
      if (!(HEAP8[$0 + 11 | 0] != 116 | HEAP32[$0 + 4 >> 2] <= 0)) {
       HEAP32[$0 + 32 >> 2] = 24;
      }
      if (!(HEAP8[$0 + 11 | 0] != 98 | HEAP32[$0 + 4 >> 2] <= 0)) {
       HEAP32[$0 + 28 >> 2] = 24;
      }
     }
     jsvUnLock2(HEAP32[$0 + 16 >> 2], HEAP32[$0 + 20 >> 2]);
     jsvObjectIteratorNext($0 + 24 | 0);
     continue;
    }
    break;
   }
   jsvObjectIteratorFree_5($0 + 24 | 0);
  }
  jsvUnLock(HEAP32[$0 + 36 >> 2]);
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 40 >> 2], 111928, jsvNewFromInteger(0));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 40 >> 2], 111841, jsvNewFromInteger(HEAP32[$0 + 32 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 40 >> 2], 112181, jsvNewFromInteger(HEAPU8[349472] | HEAPU8[349473] << 8));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 40 >> 2], 118679, jsvNewFromInteger((HEAPU8[349474] | HEAPU8[349475] << 8) - (HEAP32[$0 + 32 >> 2] + HEAP32[$0 + 28 >> 2] | 0) | 0));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 40 >> 2], 126272, jsvNewFromInteger((HEAPU8[349472] | HEAPU8[349473] << 8) - 1 | 0));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 40 >> 2], 126269, jsvNewFromInteger((HEAPU8[349474] | HEAPU8[349475] << 8) - (HEAP32[$0 + 28 >> 2] + 1 | 0) | 0));
  HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 40 >> 2];
 }
 __stack_pointer = $0 + 48 | 0;
 return HEAP32[$0 + 44 >> 2];
}

function tflite__ops__micro__activations__SoftmaxPrepare_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 56 >> 2] = $0;
 HEAP32[$2 + 52 >> 2] = $1;
 HEAP32[$2 + 48 >> 2] = HEAP32[HEAP32[$2 + 52 >> 2] + 12 >> 2];
 label$1: {
  if ((tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 52 >> 2]) | 0) != 1) {
   $0 = HEAP32[HEAP32[$2 + 56 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 56 >> 2];
   $3 = tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 52 >> 2]);
   HEAP32[$2 + 12 >> 2] = 1;
   HEAP32[$2 + 8 >> 2] = $3;
   HEAP32[$2 + 4 >> 2] = 126714;
   HEAP32[$2 >> 2] = 142838;
   FUNCTION_TABLE[$0 | 0]($1, 143069, $2);
   HEAP32[$2 + 60 >> 2] = 1;
   break label$1;
  }
  if ((tflite__NumOutputs_28TfLiteNode_20const__29(HEAP32[$2 + 52 >> 2]) | 0) != 1) {
   $0 = HEAP32[HEAP32[$2 + 56 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 56 >> 2];
   $3 = tflite__NumOutputs_28TfLiteNode_20const__29(HEAP32[$2 + 52 >> 2]);
   HEAP32[$2 + 28 >> 2] = 1;
   HEAP32[$2 + 24 >> 2] = $3;
   HEAP32[$2 + 20 >> 2] = 126714;
   HEAP32[$2 + 16 >> 2] = 142821;
   FUNCTION_TABLE[$0 | 0]($1, 143069, $2 + 16 | 0);
   HEAP32[$2 + 60 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 44 >> 2] = tflite__GetInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], 0);
  if ((tflite__NumDimensions_28TfLiteTensor_20const__29(HEAP32[$2 + 44 >> 2]) | 0) <= 0) {
   $0 = HEAP32[HEAP32[$2 + 56 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 56 >> 2];
   HEAP32[$2 + 32 >> 2] = 126652;
   FUNCTION_TABLE[$0 | 0]($1, 127303, $2 + 32 | 0);
   HEAP32[$2 + 60 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 40 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2], 0);
  label$5: {
   if (!HEAP32[HEAP32[$2 + 52 >> 2] + 8 >> 2]) {
    break label$5;
   }
  }
  HEAP32[$2 + 36 >> 2] = HEAP32[HEAP32[$2 + 52 >> 2] + 8 >> 2];
  HEAP32[$2 + 60 >> 2] = tflite__ops__micro__activations___28anonymous_20namespace_29__CalculateSoftmaxParams_28TfLiteContext__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20TfLiteSoftmaxParams_20const__2c_20tflite__SoftmaxParams__29(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 44 >> 2], HEAP32[$2 + 40 >> 2], HEAP32[$2 + 48 >> 2], HEAP32[$2 + 36 >> 2]);
 }
 __stack_pointer = $2 - -64 | 0;
 return HEAP32[$2 + 60 >> 2];
}

function handlePipe($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer + -64 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 56 >> 2] = $0;
 HEAP32[$3 + 52 >> 2] = $1;
 HEAP32[$3 + 48 >> 2] = $2;
 HEAP8[$3 + 47 | 0] = jsvObjectGetBoolChild(HEAP32[$3 + 48 >> 2], 113058) & 1;
 label$1: {
  if (HEAP8[$3 + 47 | 0] & 1) {
   HEAP8[$3 + 63 | 0] = 0;
   break label$1;
  }
  HEAP32[$3 + 40 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 48 >> 2], 119318);
  HEAP32[$3 + 36 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 48 >> 2], 120470);
  HEAP32[$3 + 32 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 48 >> 2], 117517);
  HEAP8[$3 + 31 | 0] = 0;
  if (!(!HEAP32[$3 + 40 >> 2] | (!HEAP32[$3 + 36 >> 2] | !HEAP32[$3 + 32 >> 2]))) {
   HEAP32[$3 + 24 >> 2] = jspGetNamedField(HEAP32[$3 + 36 >> 2], 122107, 0);
   HEAP32[$3 + 20 >> 2] = jspGetNamedField(HEAP32[$3 + 32 >> 2], 119628, 0);
   label$4: {
    label$5: {
     if (!(jsvIsFunction(HEAP32[$3 + 24 >> 2]) & 1)) {
      break label$5;
     }
     if (!(jsvIsFunction(HEAP32[$3 + 20 >> 2]) & 1)) {
      break label$5;
     }
     HEAP32[$3 + 16 >> 2] = jspExecuteFunction(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 36 >> 2], 1, $3 + 40 | 0);
     if (HEAP32[$3 + 16 >> 2]) {
      HEAP32[$3 + 12 >> 2] = jsvGetLength(HEAP32[$3 + 16 >> 2]);
      if (HEAP32[$3 + 12 >> 2] > 0) {
       HEAP32[$3 + 8 >> 2] = jspExecuteFunction(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 32 >> 2], 1, $3 + 16 | 0);
       label$8: {
        if (!(jsvIsBoolean(HEAP32[$3 + 8 >> 2]) & 1)) {
         break label$8;
        }
        if (jsvGetBool(HEAP32[$3 + 8 >> 2]) & 1) {
         break label$8;
        }
        jsvObjectSetChildAndUnLock(HEAP32[$3 + 48 >> 2], 113058, jsvNewFromBool(1));
       }
       jsvUnLock(HEAP32[$3 + 8 >> 2]);
      }
      jsvUnLock(HEAP32[$3 + 16 >> 2]);
      HEAP8[$3 + 31 | 0] = 1;
     }
     break label$4;
    }
    if (!(jsvIsFunction(HEAP32[$3 + 24 >> 2]) & 1)) {
     jsExceptionHere(1, 120654, 0);
    }
    if (!(jsvIsFunction(HEAP32[$3 + 20 >> 2]) & 1)) {
     jsExceptionHere(1, 120582, 0);
    }
   }
   jsvUnLock2(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
  }
  if (!(HEAP8[$3 + 31 | 0] & 1)) {
   handlePipeClose(HEAP32[$3 + 56 >> 2], HEAP32[$3 + 52 >> 2], HEAP32[$3 + 48 >> 2]);
  }
  jsvUnLock3(HEAP32[$3 + 36 >> 2], HEAP32[$3 + 32 >> 2], HEAP32[$3 + 40 >> 2]);
  HEAP8[$3 + 63 | 0] = HEAP8[$3 + 31 | 0] & 1;
 }
 __stack_pointer = $3 - -64 | 0;
 return HEAP8[$3 + 63 | 0] & 1;
}

function lcdGetPixel_ArrayBuffer($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 112 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 108 >> 2] = $0;
 HEAP32[$3 + 104 >> 2] = $1;
 HEAP32[$3 + 100 >> 2] = $2;
 HEAP32[$3 + 96 >> 2] = 0;
 $0 = HEAP32[$3 + 108 >> 2];
 HEAP32[$3 + 92 >> 2] = HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24);
 HEAP32[$3 + 88 >> 2] = lcdGetPixelIndex_ArrayBuffer(HEAP32[$3 + 108 >> 2], HEAP32[$3 + 104 >> 2], HEAP32[$3 + 100 >> 2], 1);
 jsvArrayBufferIteratorNew($3 + 32 | 0, HEAP32[$3 + 92 >> 2], HEAP32[$3 + 88 >> 2] >>> 3 | 0);
 label$1: {
  if (HEAPU8[HEAP32[$3 + 108 >> 2] + 16 | 0] & 7) {
   HEAP32[$3 + 88 >> 2] = HEAP32[$3 + 88 >> 2] & 7;
   HEAP32[$3 + 28 >> 2] = (1 << HEAPU8[HEAP32[$3 + 108 >> 2] + 16 | 0]) - 1;
   HEAP32[$3 + 24 >> 2] = jsvArrayBufferIteratorGetIntegerValue($3 + 32 | 0);
   $0 = HEAP32[$3 + 108 >> 2];
   if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 4) {
    $0 = 8 - (HEAP32[$3 + 88 >> 2] + HEAPU8[HEAP32[$3 + 108 >> 2] + 16 | 0] | 0) | 0;
   } else {
    $0 = HEAP32[$3 + 88 >> 2];
   }
   HEAP32[$3 + 20 >> 2] = $0;
   HEAP32[$3 + 96 >> 2] = HEAP32[$3 + 28 >> 2] & HEAP32[$3 + 24 >> 2] >>> HEAP32[$3 + 20 >> 2];
   break label$1;
  }
  $0 = HEAP32[$3 + 108 >> 2];
  label$5: {
   if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 4) {
    HEAP32[$3 + 16 >> 2] = HEAPU8[HEAP32[$3 + 108 >> 2] + 16 | 0] - 8;
    while (1) {
     if (HEAP32[$3 + 16 >> 2] >= 0) {
      HEAP32[$3 + 96 >> 2] = jsvArrayBufferIteratorGetIntegerValue($3 + 32 | 0) << HEAP32[$3 + 16 >> 2] | HEAP32[$3 + 96 >> 2];
      jsvArrayBufferIteratorNext($3 + 32 | 0);
      HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] - 8;
      continue;
     }
     break;
    }
    break label$5;
   }
   HEAP32[$3 + 12 >> 2] = 0;
   while (1) {
    if (HEAP32[$3 + 12 >> 2] < HEAPU8[HEAP32[$3 + 108 >> 2] + 16 | 0]) {
     HEAP32[$3 + 96 >> 2] = jsvArrayBufferIteratorGetIntegerValue($3 + 32 | 0) << HEAP32[$3 + 12 >> 2] | HEAP32[$3 + 96 >> 2];
     jsvArrayBufferIteratorNext($3 + 32 | 0);
     HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 8;
     continue;
    }
    break;
   }
  }
 }
 jsvArrayBufferIteratorFree($3 + 32 | 0);
 __stack_pointer = $3 + 112 | 0;
 return HEAP32[$3 + 96 >> 2];
}

function jswrap_espruino_toStringX($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 56 >> 2] = $0;
 HEAP8[$2 + 55 | 0] = $1;
 label$1: {
  if ((jsvGetArrayLength(HEAP32[$2 + 56 >> 2]) | 0) == 1) {
   HEAP32[$2 + 48 >> 2] = jsvGetArrayItem(HEAP32[$2 + 56 >> 2], 0);
   label$3: {
    if (!(wasm2js_i32$0 = 0, wasm2js_i32$1 = jsvIsString(HEAP32[$2 + 48 >> 2]) & 1, 
    wasm2js_i32$2 = HEAP8[$2 + 55 | 0] & 1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1)) {
     if (!(jsvIsFlatString(HEAP32[$2 + 48 >> 2]) & 1)) {
      break label$3;
     }
    }
    HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 48 >> 2];
    break label$1;
   }
   label$6: {
    if (!(jsvIsArrayBuffer(HEAP32[$2 + 48 >> 2]) & 1) | (HEAPU8[HEAP32[$2 + 48 >> 2] + 5 | 0] & 15) != 1) {
     break label$6;
    }
    $0 = HEAP32[$2 + 48 >> 2];
    if (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8) {
     break label$6;
    }
    HEAP32[$2 + 44 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$2 + 48 >> 2], 0);
    label$7: {
     if (!(HEAP8[$2 + 55 | 0] & 1 ? 0 : HEAP32[$2 + 44 >> 2])) {
      if (!(jsvIsFlatString(HEAP32[$2 + 44 >> 2]) & 1)) {
       break label$7;
      }
     }
     $1 = jsvGetLength(HEAP32[$2 + 44 >> 2]);
     $0 = HEAP32[$2 + 48 >> 2];
     if (($1 | 0) != (HEAPU8[$0 + 4 | 0] << 16 | (HEAPU8[$0 + 2 | 0] | HEAPU8[$0 + 3 | 0] << 8))) {
      break label$7;
     }
     jsvUnLock(HEAP32[$2 + 48 >> 2]);
     HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 44 >> 2];
     break label$1;
    }
    jsvUnLock(HEAP32[$2 + 44 >> 2]);
   }
   jsvUnLock(HEAP32[$2 + 48 >> 2]);
  }
  HEAP32[$2 + 40 >> 2] = jsvIterateCallbackCount(HEAP32[$2 + 56 >> 2]);
  label$10: {
   if (HEAP8[$2 + 55 | 0] & 1) {
    $0 = jsvNewFlatStringOfLength(HEAP32[$2 + 40 >> 2]);
    break label$10;
   }
   $0 = jsvNewStringOfLength(HEAP32[$2 + 40 >> 2], 0);
  }
  HEAP32[$2 + 36 >> 2] = $0;
  if (!(HEAP32[$2 + 36 >> 2] | !(HEAP8[$2 + 55 | 0] & 1))) {
   jsvDefragment();
   HEAP32[$2 + 36 >> 2] = jsvNewFlatStringOfLength(HEAP32[$2 + 40 >> 2]);
  }
  if (!HEAP32[$2 + 36 >> 2]) {
   HEAP32[$2 + 60 >> 2] = 0;
   break label$1;
  }
  jsvStringIteratorNew($2, HEAP32[$2 + 36 >> 2], 0);
  jsvIterateCallback(HEAP32[$2 + 56 >> 2], 600, $2);
  jsvStringIteratorFree_11($2);
  HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 36 >> 2];
 }
 __stack_pointer = $2 - -64 | 0;
 return HEAP32[$2 + 60 >> 2];
}

function jswrap_array_includes($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 112 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 104 >> 2] = $0;
 HEAP32[$3 + 100 >> 2] = $1;
 HEAP32[$3 + 96 >> 2] = $2;
 if (HEAP32[$3 + 96 >> 2] < 0) {
  HEAP32[$3 + 96 >> 2] = jsvGetLength(HEAP32[$3 + 104 >> 2]) + HEAP32[$3 + 96 >> 2];
 }
 if (HEAP32[$3 + 96 >> 2] < 0) {
  HEAP32[$3 + 96 >> 2] = 0;
 }
 if (jsvIsFloat(HEAP32[$3 + 100 >> 2]) & 1) {
  $0 = __DOUBLE_BITS_3(jsvGetFloat(HEAP32[$3 + 100 >> 2]));
  $2 = $0;
  $1 = i64toi32_i32$HIGH_BITS;
  $0 = $1 & 2147483647;
  $1 = $2;
  $4 = ($0 | 0) == 2146435072 & ($1 | 0) != 0 | $0 >>> 0 > 2146435072;
 }
 HEAP8[$3 + 95 | 0] = $4;
 label$4: {
  if (!(jsvIsIterable(HEAP32[$3 + 104 >> 2]) & 1)) {
   HEAP8[$3 + 111 | 0] = 0;
   break label$4;
  }
  jsvIteratorNew($3 + 32 | 0, HEAP32[$3 + 104 >> 2], 0);
  while (1) {
   if (jsvIteratorHasElement($3 + 32 | 0) & 1) {
    HEAP32[$3 + 28 >> 2] = jsvIteratorGetKey($3 + 32 | 0);
    label$8: {
     if (!(jsvIsInt(HEAP32[$3 + 28 >> 2]) & 1)) {
      break label$8;
     }
     if ((jsvGetInteger(HEAP32[$3 + 28 >> 2]) | 0) < HEAP32[$3 + 96 >> 2]) {
      break label$8;
     }
     HEAP32[$3 + 24 >> 2] = jsvIteratorGetValue($3 + 32 | 0);
     label$9: {
      label$10: {
       if (HEAP32[$3 + 24 >> 2] == HEAP32[$3 + 100 >> 2]) {
        break label$10;
       }
       if (jsvMathsOpTypeEqual(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 100 >> 2]) & 1) {
        break label$10;
       }
       if (!(HEAP8[$3 + 95 | 0] & 1)) {
        break label$9;
       }
       if (!(jsvIsFloat(HEAP32[$3 + 24 >> 2]) & 1)) {
        break label$9;
       }
       $1 = __DOUBLE_BITS_3(jsvGetFloat(HEAP32[$3 + 24 >> 2]));
       $2 = $1;
       $0 = i64toi32_i32$HIGH_BITS;
       $1 = $0 & 2147483647;
       $0 = $2;
       if (($1 | 0) == 2146435072 & ($0 | 0) != 0 | $1 >>> 0 > 2146435072) {
        break label$10;
       }
       break label$9;
      }
      jsvUnLock2(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2]);
      jsvIteratorFree($3 + 32 | 0);
      HEAP8[$3 + 111 | 0] = 1;
      break label$4;
     }
     jsvUnLock(HEAP32[$3 + 24 >> 2]);
    }
    jsvUnLock(HEAP32[$3 + 28 >> 2]);
    jsvIteratorNext($3 + 32 | 0);
    continue;
   }
   break;
  }
  jsvIteratorFree($3 + 32 | 0);
  HEAP8[$3 + 111 | 0] = 0;
 }
 __stack_pointer = $3 + 112 | 0;
 return HEAP8[$3 + 111 | 0] & 1;
}

function jshFromDeviceString($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (HEAP8[HEAP32[$1 + 8 >> 2]] == 76) {
   if (!strcmp(HEAP32[$1 + 8 >> 2] + 1 | 0, 125213)) {
    HEAP8[$1 + 15 | 0] = 17;
    break label$1;
   }
   if (!strcmp(HEAP32[$1 + 8 >> 2] + 1 | 0, 125191)) {
    HEAP8[$1 + 15 | 0] = 18;
    break label$1;
   }
  }
  if (!(HEAP8[HEAP32[$1 + 8 >> 2]] != 85 | HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0] != 83 | (HEAP8[HEAP32[$1 + 8 >> 2] + 3 | 0] | HEAP8[HEAP32[$1 + 8 >> 2] + 2 | 0] != 66))) {
   HEAP8[$1 + 15 | 0] = 21;
   break label$1;
  }
  label$6: {
   if (HEAP8[HEAP32[$1 + 8 >> 2]] == 84) {
    if (!strcmp(HEAP32[$1 + 8 >> 2] + 1 | 0, 118105)) {
     HEAP8[$1 + 15 | 0] = 20;
     break label$1;
    }
    break label$6;
   }
   label$9: {
    if (HEAP8[HEAP32[$1 + 8 >> 2]] == 83) {
     label$11: {
      if (HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0] != 101 | HEAP8[HEAP32[$1 + 8 >> 2] + 2 | 0] != 114 | (HEAP8[HEAP32[$1 + 8 >> 2] + 3 | 0] != 105 | HEAP8[HEAP32[$1 + 8 >> 2] + 4 | 0] != 97)) {
       break label$11;
      }
      if (HEAP8[HEAP32[$1 + 8 >> 2] + 5 | 0] != 108 | HEAP8[HEAP32[$1 + 8 >> 2] + 6 | 0] < 49 | (HEAP8[HEAP32[$1 + 8 >> 2] + 7 | 0] | (HEAP8[HEAP32[$1 + 8 >> 2] + 6 | 0] - 49 | 0) > 0)) {
       break label$11;
      }
      HEAP8[$1 + 15 | 0] = HEAP8[HEAP32[$1 + 8 >> 2] + 6 | 0] - 27;
      break label$1;
     }
     label$12: {
      if (HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0] != 80 | HEAP8[HEAP32[$1 + 8 >> 2] + 2 | 0] != 73 | (HEAP8[HEAP32[$1 + 8 >> 2] + 3 | 0] < 49 | (HEAP8[HEAP32[$1 + 8 >> 2] + 3 | 0] - 49 | 0) > 0)) {
       break label$12;
      }
      if (HEAP8[HEAP32[$1 + 8 >> 2] + 4 | 0]) {
       break label$12;
      }
      HEAP8[$1 + 15 | 0] = HEAP8[HEAP32[$1 + 8 >> 2] + 3 | 0] - 24;
      break label$1;
     }
     break label$9;
    }
    label$13: {
     if (HEAP8[HEAP32[$1 + 8 >> 2]] != 73 | HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0] != 50 | (HEAP8[HEAP32[$1 + 8 >> 2] + 2 | 0] != 67 | HEAP8[HEAP32[$1 + 8 >> 2] + 3 | 0] < 49)) {
      break label$13;
     }
     if (HEAP8[HEAP32[$1 + 8 >> 2] + 4 | 0] | (HEAP8[HEAP32[$1 + 8 >> 2] + 3 | 0] - 49 | 0) > 0) {
      break label$13;
     }
     HEAP8[$1 + 15 | 0] = HEAP8[HEAP32[$1 + 8 >> 2] + 3 | 0] - 23;
     break label$1;
    }
   }
  }
  HEAP8[$1 + 15 | 0] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAPU8[$1 + 15 | 0];
}

function tflite__MicroAllocator__AllocateTfLiteEvalTensors_28tflite__Model_20const__2c_20TfLiteEvalTensor___29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer + -64 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 56 >> 2] = $0;
 HEAP32[$3 + 52 >> 2] = $1;
 HEAP32[$3 + 48 >> 2] = $2;
 $0 = HEAP32[$3 + 56 >> 2];
 label$1: {
  if (!HEAP32[$3 + 48 >> 2]) {
   break label$1;
  }
 }
 HEAP32[$3 + 44 >> 2] = tflite__MicroAllocator__GetSubGraphFromModel_28tflite__Model_20const__29($0, HEAP32[$3 + 52 >> 2]);
 label$2: {
  if (!HEAP32[$3 + 44 >> 2]) {
   break label$2;
  }
 }
 HEAP32[$3 + 40 >> 2] = flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor____size_28_29_20const(tflite__SubGraph__tensors_28_29_20const(HEAP32[$3 + 44 >> 2]));
 $1 = HEAP32[$0 + 4 >> 2];
 HEAP32[$3 + 36 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, Math_imul(HEAP32[$3 + 40 >> 2], 12), 4);
 label$3: {
  if (!HEAP32[$3 + 36 >> 2]) {
   $0 = HEAP32[$0 + 8 >> 2];
   HEAP32[$3 >> 2] = Math_imul(HEAP32[$3 + 40 >> 2], 12);
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 121386, $3);
   HEAP32[$3 + 60 >> 2] = 1;
   break label$3;
  }
  HEAP32[$3 + 32 >> 2] = 0;
  while (1) {
   if (HEAPU32[$3 + 32 >> 2] < HEAPU32[$3 + 40 >> 2]) {
    HEAP32[$3 + 28 >> 2] = tflite__internal__InitializeTfLiteEvalTensorFromFlatbuffer_28tflite__SimpleMemoryAllocator__2c_20tflite__Tensor_20const__2c_20flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer___20const__2c_20tflite__ErrorReporter__2c_20TfLiteEvalTensor__29(HEAP32[$0 + 4 >> 2], flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor____Get_28unsigned_20int_29_20const(tflite__SubGraph__tensors_28_29_20const(HEAP32[$3 + 44 >> 2]), HEAP32[$3 + 32 >> 2]), tflite__Model__buffers_28_29_20const(HEAP32[$3 + 52 >> 2]), HEAP32[$0 + 8 >> 2], HEAP32[$3 + 36 >> 2] + Math_imul(HEAP32[$3 + 32 >> 2], 12) | 0);
    if (HEAP32[$3 + 28 >> 2]) {
     $0 = HEAP32[$0 + 8 >> 2];
     HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 32 >> 2];
     tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 122452, $3 + 16 | 0);
     HEAP32[$3 + 60 >> 2] = 1;
     break label$3;
    } else {
     HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 32 >> 2] + 1;
     continue;
    }
   }
   break;
  }
  HEAP32[HEAP32[$3 + 48 >> 2] >> 2] = HEAP32[$3 + 36 >> 2];
  HEAP32[$3 + 60 >> 2] = 0;
 }
 __stack_pointer = $3 - -64 | 0;
 return HEAP32[$3 + 60 >> 2];
}

function handlePipeClose($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 jsiQueueObjectCallbacks(HEAP32[$3 + 36 >> 2], 119634, $3 + 36 | 0, 1);
 HEAP32[$3 + 32 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 36 >> 2], 120470);
 HEAP32[$3 + 28 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 36 >> 2], 117517);
 if (!(!HEAP32[$3 + 32 >> 2] | !HEAP32[$3 + 28 >> 2])) {
  HEAP32[$3 + 24 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 32 >> 2], 119076);
  label$2: {
   if (!HEAP32[$3 + 24 >> 2]) {
    break label$2;
   }
   if (!jsvGetStringLength(HEAP32[$3 + 24 >> 2])) {
    break label$2;
   }
   jsvObjectRemoveChild(HEAP32[$3 + 32 >> 2], 119076);
   HEAP32[$3 + 20 >> 2] = jspGetNamedField(HEAP32[$3 + 28 >> 2], 119628, 0);
   if (jsvIsFunction(HEAP32[$3 + 20 >> 2]) & 1) {
    jsvUnLock(jspExecuteFunction(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 28 >> 2], 1, $3 + 24 | 0));
   }
   jsvUnLock(HEAP32[$3 + 20 >> 2]);
  }
  jsvUnLock(HEAP32[$3 + 24 >> 2]);
 }
 if (jsvObjectGetBoolChild(HEAP32[$3 + 36 >> 2], 120899) & 1) {
  if (HEAP32[$3 + 28 >> 2]) {
   jswrap_object_removeAllListeners_cstr(HEAP32[$3 + 28 >> 2], 117558);
   jswrap_object_removeAllListeners_cstr(HEAP32[$3 + 28 >> 2], 119730);
   HEAP32[$3 + 16 >> 2] = jspGetNamedField(HEAP32[$3 + 28 >> 2], 120899, 0);
   if (jsvIsFunction(HEAP32[$3 + 16 >> 2]) & 1) {
    jsvUnLock(jspExecuteFunction(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 28 >> 2], 0, 0));
   }
   jsvUnLock(HEAP32[$3 + 16 >> 2]);
   HEAP32[$3 + 12 >> 2] = jspGetNamedField(HEAP32[$3 + 28 >> 2], 119730, 0);
   if (jsvIsFunction(HEAP32[$3 + 12 >> 2]) & 1) {
    jsvUnLock(jspExecuteFunction(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 28 >> 2], 0, 0));
   }
   jsvUnLock(HEAP32[$3 + 12 >> 2]);
  }
  if (HEAP32[$3 + 32 >> 2]) {
   jswrap_object_removeAllListeners_cstr(HEAP32[$3 + 32 >> 2], 119730);
   HEAP32[$3 + 8 >> 2] = jspGetNamedField(HEAP32[$3 + 32 >> 2], 119730, 0);
   if (jsvIsFunction(HEAP32[$3 + 8 >> 2]) & 1) {
    jsvUnLock(jspExecuteFunction(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 32 >> 2], 0, 0));
   }
   jsvUnLock(HEAP32[$3 + 8 >> 2]);
  }
 }
 jsvUnLock2(HEAP32[$3 + 32 >> 2], HEAP32[$3 + 28 >> 2]);
 HEAP32[$3 + 4 >> 2] = jsvObjectIteratorGetKey_9(HEAP32[$3 + 40 >> 2]);
 jsvRemoveChildAndUnLock(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 48 | 0;
}

function jspeStatementVar() {
 var $0 = 0, $1 = 0, $2 = 0;
 $0 = __stack_pointer - 32 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 24 >> 2] = 0;
 label$1: {
  if (HEAP16[HEAP32[44743] + 2 >> 1] != 173) {
   $1 = 0;
   if (HEAP16[HEAP32[44743] + 2 >> 1] != 174) {
    break label$1;
   }
  }
  $1 = HEAPU8[347020] != 0;
 }
 HEAP8[$0 + 23 | 0] = $1;
 HEAP8[$0 + 22 | 0] = HEAP16[HEAP32[44743] + 2 >> 1] == 174;
 jslGetNextToken();
 HEAP8[$0 + 21 | 0] = 1;
 while (1) {
  $1 = 0;
  label$4: {
   if (!(HEAP8[$0 + 21 | 0] & 1)) {
    break label$4;
   }
   $1 = 0;
   if (HEAP16[HEAP32[44743] + 2 >> 1] != 128) {
    break label$4;
   }
   $1 = jspIsInterrupted() ^ -1;
  }
  if ($1 & 1) {
   label$6: {
    HEAP32[$0 + 16 >> 2] = 0;
    if ((HEAP32[86758] & 63) == 1) {
     HEAP32[$0 + 12 >> 2] = jslGetTokenValueAsString();
     label$8: {
      if (HEAP8[$0 + 23 | 0] & 1) {
       if (!HEAP32[86754]) {
        HEAP32[86754] = jsvNewObject();
        jspeiAddScope(HEAP32[86754]);
       }
       HEAP32[$0 + 16 >> 2] = jsvFindOrAddChildFromString(HEAP32[86754], HEAP32[$0 + 12 >> 2]);
       break label$8;
      }
      HEAP32[$0 + 16 >> 2] = jsvFindOrAddChildFromString(HEAP32[86753], HEAP32[$0 + 12 >> 2]);
     }
     if (!HEAP32[$0 + 16 >> 2]) {
      jspSetError(0);
      break label$6;
     }
    }
    if (!(jslMatch(128) & 1)) {
     jsvUnLock(HEAP32[$0 + 16 >> 2]);
     break label$6;
    }
    if (HEAP16[HEAP32[44743] + 2 >> 1] == 61) {
     if (!(jslMatch(61) & 1)) {
      jsvUnLock(HEAP32[$0 + 16 >> 2]);
      break label$6;
     }
     HEAP32[$0 + 8 >> 2] = jsvSkipNameAndUnLock(jspeAssignmentExpression());
     if ((HEAP32[86758] & 63) == 1) {
      jsvReplaceWith(HEAP32[$0 + 16 >> 2], HEAP32[$0 + 8 >> 2]);
     }
     jsvUnLock(HEAP32[$0 + 8 >> 2]);
    }
    if (HEAP8[$0 + 22 | 0] & 1 & (HEAP32[86758] & 63) == 1) {
     $2 = HEAP32[$0 + 16 >> 2];
     $1 = HEAPU8[$2 + 12 | 0] | HEAPU8[$2 + 13 | 0] << 8 | 64;
     HEAP8[$2 + 12 | 0] = $1;
     HEAP8[$2 + 13 | 0] = $1 >>> 8;
    }
    jsvUnLock(HEAP32[$0 + 24 >> 2]);
    HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 16 >> 2];
    HEAP8[$0 + 21 | 0] = HEAP16[HEAP32[44743] + 2 >> 1] == 44;
    if (HEAP8[$0 + 21 | 0] & 1) {
     if (!(jslMatch(44) & 1)) {
      break label$6;
     }
    }
    continue;
   }
  }
  break;
 }
 HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 24 >> 2];
 __stack_pointer = $0 + 32 | 0;
 return HEAP32[$0 + 28 >> 2];
}

function _jswrap_interface_setTimeoutOrInterval($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $4 = __stack_pointer + -64 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 56 >> 2] = $0;
 HEAPF64[$4 + 48 >> 3] = $1;
 HEAP32[$4 + 44 >> 2] = $2;
 HEAP8[$4 + 43 | 0] = $3;
 label$1: {
  label$2: {
   if (jsvIsFunction(HEAP32[$4 + 56 >> 2]) & 1) {
    break label$2;
   }
   if (jsvIsString(HEAP32[$4 + 56 >> 2]) & 1) {
    break label$2;
   }
   jsExceptionHere(1, 143837, 0);
   HEAP32[$4 + 60 >> 2] = 0;
   break label$1;
  }
  $0 = __DOUBLE_BITS_8(HEAPF64[$4 + 48 >> 3]);
  $6 = $0;
  $2 = i64toi32_i32$HIGH_BITS;
  $0 = $2 & 2147483647;
  $2 = $6;
  if (!(HEAPF64[$4 + 48 >> 3] < .1 ? 0 : !$2 & ($0 | 0) == 2146435072 | $0 >>> 0 < 2146435072)) {
   HEAPF64[$4 + 48 >> 3] = .1;
  }
  if (HEAPF64[$4 + 48 >> 3] > 31536000001e3) {
   jsExceptionHere(1, 142637, 0);
   HEAP32[$4 + 60 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 36 >> 2] = jsvNewObject();
  if (!HEAP32[$4 + 36 >> 2]) {
   HEAP32[$4 + 60 >> 2] = 0;
   break label$1;
  }
  $2 = jshGetTimeFromMilliseconds(HEAPF64[$4 + 48 >> 3]);
  HEAP32[$4 + 24 >> 2] = $2;
  $0 = i64toi32_i32$HIGH_BITS;
  HEAP32[$4 + 28 >> 2] = $0;
  $7 = HEAP32[$4 + 36 >> 2];
  $0 = jshGetSystemTime();
  $3 = $0;
  $2 = i64toi32_i32$HIGH_BITS;
  $8 = $2;
  $0 = HEAP32[86785];
  $9 = $0;
  $2 = HEAP32[86784];
  $6 = $2;
  $5 = $3 - $2 | 0;
  $10 = $5;
  $0 = $8;
  $2 = $9;
  $0 = $0 - ($2 + ($6 >>> 0 > $3 >>> 0) | 0) | 0;
  $3 = HEAP32[$4 + 28 >> 2];
  $2 = $3;
  $3 = $0;
  $5 = $2 + $3 | 0;
  $0 = $10;
  $6 = HEAP32[$4 + 24 >> 2];
  $2 = $0 + $6 | 0;
  $5 = $2 >>> 0 < $6 >>> 0 ? $5 + 1 | 0 : $5;
  jsvObjectSetChildAndUnLock($7, 120023, jsvNewFromLongInteger($2, $5));
  if (!(HEAP8[$4 + 43 | 0] & 1)) {
   $5 = HEAP32[$4 + 24 >> 2];
   $0 = HEAP32[$4 + 28 >> 2];
   jsvObjectSetChildAndUnLock(HEAP32[$4 + 36 >> 2], 118059, jsvNewFromLongInteger($5, $0));
  }
  jsvObjectSetChild(HEAP32[$4 + 36 >> 2], 118173, HEAP32[$4 + 56 >> 2]);
  if (jsvGetArrayLength(HEAP32[$4 + 44 >> 2])) {
   jsvObjectSetChild(HEAP32[$4 + 36 >> 2], 115433, HEAP32[$4 + 44 >> 2]);
  }
  HEAP32[$4 + 20 >> 2] = jsvNewFromInteger(jsiTimerAdd(HEAP32[$4 + 36 >> 2]));
  jsvUnLock(HEAP32[$4 + 36 >> 2]);
  jsiTimersChanged();
  HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 20 >> 2];
 }
 __stack_pointer = $4 - -64 | 0;
 return HEAP32[$4 + 60 >> 2];
}

function jswrap_graphics_setFontCustom($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 112 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 104 >> 2] = $0;
 HEAP32[$5 + 100 >> 2] = $1;
 HEAP32[$5 + 96 >> 2] = $2;
 HEAP32[$5 + 92 >> 2] = $3;
 HEAP32[$5 + 88 >> 2] = $4;
 label$1: {
  if (!(graphicsGetFromVar($5 + 16 | 0, HEAP32[$5 + 104 >> 2]) & 1)) {
   HEAP32[$5 + 108 >> 2] = 0;
   break label$1;
  }
  if (!(jsvIsString(HEAP32[$5 + 100 >> 2]) & 1)) {
   jsExceptionHere(1, 118913, 0);
   HEAP32[$5 + 108 >> 2] = 0;
   break label$1;
  }
  if (!(HEAP32[$5 + 96 >> 2] <= 255 & HEAP32[$5 + 96 >> 2] >= 0)) {
   jsExceptionHere(1, 120306, 0);
   HEAP32[$5 + 108 >> 2] = 0;
   break label$1;
  }
  label$6: {
   if (jsvIsString(HEAP32[$5 + 92 >> 2]) & 1) {
    break label$6;
   }
   if (jsvIsInt(HEAP32[$5 + 92 >> 2]) & 1) {
    break label$6;
   }
   jsExceptionHere(1, 116342, 0);
   HEAP32[$5 + 108 >> 2] = 0;
   break label$1;
  }
  HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 88 >> 2] >> 8 & 255;
  if (HEAP32[$5 + 12 >> 2] <= 0) {
   HEAP32[$5 + 12 >> 2] = 1;
  }
  HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 88 >> 2] >> 16;
  if (HEAP32[$5 + 8 >> 2] <= 0) {
   HEAP32[$5 + 8 >> 2] = 1;
  }
  label$9: {
   if (HEAP32[$5 + 8 >> 2] == 1) {
    HEAP32[$5 + 4 >> 2] = 32768;
    break label$9;
   }
   label$11: {
    if (HEAP32[$5 + 8 >> 2] == 2) {
     HEAP32[$5 + 4 >> 2] = 40960;
     break label$11;
    }
    label$13: {
     if (HEAP32[$5 + 8 >> 2] == 4) {
      HEAP32[$5 + 4 >> 2] = 49152;
      break label$13;
     }
     jsExceptionHere(1, 121260, 0);
     HEAP32[$5 + 108 >> 2] = 0;
     break label$1;
    }
   }
  }
  HEAP32[$5 + 88 >> 2] = HEAP32[$5 + 88 >> 2] & 255;
  jsvObjectSetChild(HEAP32[$5 + 104 >> 2], 125185, HEAP32[$5 + 100 >> 2]);
  jsvObjectSetChild(HEAP32[$5 + 104 >> 2], 123636, HEAP32[$5 + 92 >> 2]);
  jsvObjectSetChildAndUnLock(HEAP32[$5 + 104 >> 2], 124625, jsvNewFromInteger(HEAP32[$5 + 88 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$5 + 104 >> 2], 126582, jsvNewFromInteger(HEAP32[$5 + 96 >> 2]));
  $0 = HEAP32[$5 + 12 >> 2] + HEAP32[$5 + 4 >> 2] | 0;
  HEAP8[$5 + 41 | 0] = $0;
  HEAP8[$5 + 42 | 0] = $0 >>> 8;
  graphicsSetVar($5 + 16 | 0);
  HEAP32[$5 + 108 >> 2] = jsvLockAgain(HEAP32[$5 + 104 >> 2]);
 }
 __stack_pointer = $5 + 112 | 0;
 return HEAP32[$5 + 108 >> 2];
}

function touchHandlerInternal($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 if (!(HEAP32[93413] & 262144)) {
  deviceToGraphicsCoordinates(349460, $4 + 28 | 0, $4 + 24 | 0);
  HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 28 >> 2] - HEAP16[186849];
  HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 24 >> 2] - HEAP16[186850];
  HEAP16[186849] = HEAP32[$4 + 28 >> 2];
  HEAP16[186850] = HEAP32[$4 + 24 >> 2];
  HEAP8[373702] = HEAP32[$4 + 20 >> 2] != 0;
  HEAP32[$4 + 4 >> 2] = HEAP32[93416];
  if (HEAP32[$4 + 16 >> 2] != HEAP32[93426]) {
   label$3: {
    label$4: {
     switch (HEAP32[$4 + 16 >> 2] - 1 | 0) {
     case 0:
      HEAP32[93427] = touchSwipeRotate(4);
      HEAP32[93416] = HEAP32[93416] | 524288;
      break label$3;

     case 1:
      HEAP32[93427] = touchSwipeRotate(3);
      HEAP32[93416] = HEAP32[93416] | 524288;
      break label$3;

     case 2:
      HEAP32[93427] = touchSwipeRotate(1);
      HEAP32[93416] = HEAP32[93416] | 524288;
      break label$3;

     case 3:
      HEAP32[93427] = touchSwipeRotate(2);
      HEAP32[93416] = HEAP32[93416] | 524288;
      break label$3;

     case 4:
      label$11: {
       if (HEAP16[186849] < 80) {
        HEAP32[93416] = HEAP32[93416] | 1048576;
        break label$11;
       }
       HEAP32[93416] = HEAP32[93416] | 2097152;
      }
      HEAP8[373712] = 0;
      break label$3;

     case 10:
      label$13: {
       if (HEAP16[186849] < 80) {
        HEAP32[93416] = HEAP32[93416] | 1048576;
        break label$13;
       }
       HEAP32[93416] = HEAP32[93416] | 2097152;
      }
      HEAP8[373712] = 1;
      break label$3;

     case 11:
      break label$4;

     default:
      break label$3;
     }
    }
    label$15: {
     if (HEAP16[186849] < 80) {
      HEAP32[93416] = HEAP32[93416] | 1048576;
      break label$15;
     }
     HEAP32[93416] = HEAP32[93416] | 2097152;
    }
    HEAP8[373712] = 2;
   }
  }
  if (!(!((HEAP8[373702] & 1) != (HEAP8[373713] & 1) | HEAP16[186857] != HEAP16[186849]) & HEAP16[186858] == HEAP16[186850])) {
   HEAP32[93416] = HEAP32[93416] | 4194304;
  }
  if (HEAP32[$4 + 4 >> 2] != HEAP32[93416]) {
   HEAP16[186838] = 0;
  }
  HEAP32[93426] = HEAP32[$4 + 16 >> 2];
 }
 __stack_pointer = $4 + 32 | 0;
}

function tf_create($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP32[$3 + 32 >> 2] = $2;
 HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 40 >> 2];
 $0 = HEAP32[$3 + 28 >> 2];
 HEAP32[$0 >> 2] = 0;
 tflite__EspruinoErrorReporter__EspruinoErrorReporter_28_29($0);
 HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 28 >> 2];
 HEAP32[$3 + 20 >> 2] = tflite__GetModel_28void_20const__29(HEAP32[$3 + 32 >> 2]);
 label$1: {
  if ((tflite__Model__version_28_29_20const(HEAP32[$3 + 20 >> 2]) | 0) != 3) {
   $0 = HEAP32[$3 + 24 >> 2];
   $1 = tflite__Model__version_28_29_20const(HEAP32[$3 + 20 >> 2]);
   HEAP32[$3 + 4 >> 2] = 3;
   HEAP32[$3 >> 2] = $1;
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 127671, $3);
   HEAP8[$3 + 47 | 0] = 0;
   break label$1;
  }
  tflite__MicroMutableOpResolver_9u___MicroMutableOpResolver_28tflite__ErrorReporter__29(HEAP32[$3 + 28 >> 2] + 16 | 0, 0);
  tflite__MicroMutableOpResolver_9u___AddDepthwiseConv2D_28_29(HEAP32[$3 + 28 >> 2] + 16 | 0);
  tflite__MicroMutableOpResolver_9u___AddConv2D_28_29(HEAP32[$3 + 28 >> 2] + 16 | 0);
  tflite__MicroMutableOpResolver_9u___AddAveragePool2D_28_29(HEAP32[$3 + 28 >> 2] + 16 | 0);
  tflite__MicroMutableOpResolver_9u___AddMaxPool2D_28_29(HEAP32[$3 + 28 >> 2] + 16 | 0);
  tflite__MicroMutableOpResolver_9u___AddFullyConnected_28_29(HEAP32[$3 + 28 >> 2] + 16 | 0);
  tflite__MicroMutableOpResolver_9u___AddSoftmax_28_29(HEAP32[$3 + 28 >> 2] + 16 | 0);
  tflite__MicroMutableOpResolver_9u___AddQuantize_28_29(HEAP32[$3 + 28 >> 2] + 16 | 0);
  tflite__MicroMutableOpResolver_9u___AddDequantize_28_29(HEAP32[$3 + 28 >> 2] + 16 | 0);
  tflite__MicroMutableOpResolver_9u___AddReshape_28_29(HEAP32[$3 + 28 >> 2] + 16 | 0);
  tflite__MicroInterpreter__MicroInterpreter_28tflite__Model_20const__2c_20tflite__MicroOpResolver_20const__2c_20unsigned_20char__2c_20unsigned_20long_2c_20tflite__ErrorReporter__2c_20tflite__Profiler__29(HEAP32[$3 + 28 >> 2] + 400 | 0, HEAP32[$3 + 20 >> 2], HEAP32[$3 + 28 >> 2] + 16 | 0, HEAP32[$3 + 28 >> 2] + 560 | 0, HEAP32[$3 + 36 >> 2], HEAP32[$3 + 24 >> 2], 0);
  tflite__MicroInterpreter__AllocateTensors_28_29(HEAP32[$3 + 28 >> 2] + 400 | 0);
  HEAP8[$3 + 47 | 0] = 1;
 }
 __stack_pointer = $3 + 48 | 0;
 return HEAP8[$3 + 47 | 0] & 1;
}

function jswrap_io_shiftOut($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 96 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 92 >> 2] = $0;
 HEAP32[$3 + 88 >> 2] = $1;
 HEAP32[$3 + 84 >> 2] = $2;
 HEAP32[$3 + 76 >> 2] = 0;
 HEAP8[$3 + 72 | 0] = 255;
 HEAP8[$3 + 73 | 0] = 0;
 HEAP32[$3 + 80 >> 2] = 1;
 HEAP32[$3 + 16 >> 2] = 118151;
 HEAP16[$3 + 20 >> 1] = 13;
 HEAP32[$3 + 24 >> 2] = $3 + 72;
 HEAP32[$3 + 28 >> 2] = 117773;
 HEAP16[$3 + 32 >> 1] = 12;
 HEAP32[$3 + 36 >> 2] = $3 + 73;
 HEAP32[$3 + 40 >> 2] = 113291;
 HEAP16[$3 + 44 >> 1] = 10;
 HEAP32[$3 + 48 >> 2] = $3 + 80;
 label$1: {
  if (!(jsvReadConfigObject(HEAP32[$3 + 88 >> 2], $3 + 16 | 0, 3) & 1)) {
   break label$1;
  }
  HEAP8[$3 + 73 | 0] = HEAP8[$3 + 73 | 0] & 1;
  if (HEAP32[$3 + 80 >> 2] <= 0) {
   HEAP32[$3 + 80 >> 2] = 1;
  }
  label$3: {
   if (jsvIsArray(HEAP32[$3 + 92 >> 2]) & 1) {
    jsvObjectIteratorNew($3 + 8 | 0, HEAP32[$3 + 92 >> 2]);
    while (1) {
     if (jsvObjectIteratorHasValue_15($3 + 8 | 0) & 1) {
      if (HEAP32[$3 + 76 >> 2] >= 8) {
       HEAP32[$3 >> 2] = 8;
       jsExceptionHere(1, 117635, $3);
       break label$1;
      } else {
       $0 = jshGetPinFromVarAndUnLock(jsvObjectIteratorGetValue_13($3 + 8 | 0));
       HEAP8[HEAP32[$3 + 76 >> 2] + ($3 - -64 | 0) | 0] = $0;
       HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
       jsvObjectIteratorNext($3 + 8 | 0);
       continue;
      }
     }
     break;
    }
    jsvObjectIteratorFree_15($3 + 8 | 0);
    break label$3;
   }
   $1 = jshGetPinFromVar(HEAP32[$3 + 92 >> 2]);
   $0 = HEAP32[$3 + 76 >> 2];
   HEAP32[$3 + 76 >> 2] = $0 + 1;
   HEAP8[($3 - -64 | 0) + $0 | 0] = $1;
  }
  HEAP32[$3 + 4 >> 2] = 0;
  while (1) {
   if (HEAP32[$3 + 4 >> 2] < HEAP32[$3 + 76 >> 2]) {
    if (jshIsPinValid(HEAPU8[HEAP32[$3 + 4 >> 2] + ($3 - -64 | 0) | 0]) & 1) {
     if (!(jshGetPinStateIsManual(HEAPU8[HEAP32[$3 + 4 >> 2] + ($3 - -64 | 0) | 0]) & 1)) {
      jshPinSetState(HEAPU8[HEAP32[$3 + 4 >> 2] + ($3 - -64 | 0) | 0], 1);
     }
    }
    HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
    continue;
   }
   break;
  }
  if (jshIsPinValid(HEAPU8[$3 + 72 | 0]) & 1) {
   jshPinSetState(HEAPU8[$3 + 72 | 0], 1);
  }
  jsvIterateCallback(HEAP32[$3 + 84 >> 2], 602, $3 - -64 | 0);
 }
 __stack_pointer = $3 + 96 | 0;
}

function jswrap_waveform_idle() {
 var $0 = 0;
 $0 = __stack_pointer + -64 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 60 >> 2] = jsvObjectGetChildIfExists(HEAP32[86751], 119367);
 if (HEAP32[$0 + 60 >> 2]) {
  jsvObjectIteratorNew($0 + 56 | 0, HEAP32[$0 + 60 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_18($0 + 56 | 0) & 1) {
    HEAP32[$0 + 52 >> 2] = jsvObjectIteratorGetValue_16($0 + 56 | 0);
    HEAP8[$0 + 51 | 0] = jsvObjectGetBoolChild(HEAP32[$0 + 52 >> 2], 118986) & 1;
    if (HEAP8[$0 + 51 | 0] & 1) {
     HEAP32[$0 + 44 >> 2] = jswrap_waveform_getBuffer(HEAP32[$0 + 52 >> 2], 0, 0);
     label$5: {
      if (!(jstGetLastBufferTimerTask(HEAP32[$0 + 44 >> 2], $0 + 16 | 0) & 1)) {
       HEAP32[$0 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 52 >> 2], 116403);
       jsiQueueObjectCallbacks(HEAP32[$0 + 52 >> 2], 118434, $0 + 12 | 0, 1);
       jsvUnLock(HEAP32[$0 + 12 >> 2]);
       HEAP8[$0 + 51 | 0] = 0;
       jsvObjectSetChildAndUnLock(HEAP32[$0 + 52 >> 2], 118986, jsvNewFromBool(HEAP8[$0 + 51 | 0] & 1));
       break label$5;
      }
      if (!(!(HEAPU8[$0 + 30 | 0] | HEAPU8[$0 + 31 | 0] << 8) | (HEAPU8[$0 + 30 | 0] | HEAPU8[$0 + 31 | 0] << 8) == (HEAPU8[$0 + 28 | 0] | HEAPU8[$0 + 29 | 0] << 8))) {
       HEAP32[$0 + 8 >> 2] = (jsvGetRef(HEAP32[$0 + 44 >> 2]) & 65535) != (HEAPU8[$0 + 28 | 0] | HEAPU8[$0 + 29 | 0] << 8);
       HEAP32[$0 + 4 >> 2] = jsvGetIntegerAndUnLock(jsvObjectGetChild(HEAP32[$0 + 52 >> 2], 116500, 10));
       if (HEAP32[$0 + 4 >> 2] != HEAP32[$0 + 8 >> 2]) {
        jsvObjectSetChildAndUnLock(HEAP32[$0 + 52 >> 2], 116500, jsvNewFromInteger(HEAP32[$0 + 8 >> 2]));
        HEAP32[$0 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 52 >> 2], HEAP32[$0 + 8 >> 2] ? 116403 : 126275);
        jsiQueueObjectCallbacks(HEAP32[$0 + 52 >> 2], 116392, $0, 1);
        jsvUnLock(HEAP32[$0 >> 2]);
       }
      }
     }
     jsvUnLock(HEAP32[$0 + 44 >> 2]);
    }
    jsvUnLock(HEAP32[$0 + 52 >> 2]);
    label$9: {
     if (!(HEAP8[$0 + 51 | 0] & 1)) {
      jsvObjectIteratorRemoveAndGotoNext($0 + 56 | 0, HEAP32[$0 + 60 >> 2]);
      break label$9;
     }
     jsvObjectIteratorNext($0 + 56 | 0);
    }
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_18($0 + 56 | 0);
  jsvUnLock(HEAP32[$0 + 60 >> 2]);
 }
 __stack_pointer = $0 - -64 | 0;
 return 0;
}

function graphicsStructResetState($0) {
 var $1 = 0, $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 label$1: {
  label$2: {
   $0 = HEAP32[$2 + 12 >> 2];
   if (!(HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24))) {
    break label$2;
   }
   $0 = HEAP32[$2 + 12 >> 2];
   if ((HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24)) == 1) {
    break label$2;
   }
   $0 = HEAP32[$2 + 12 >> 2];
   $1 = HEAPU8[349444] | HEAPU8[349445] << 8;
   HEAP8[$0 + 17 | 0] = $1;
   HEAP8[$0 + 18 | 0] = $1 >>> 8;
   HEAP8[$0 + 19 | 0] = $1 >>> 16;
   HEAP8[$0 + 20 | 0] = $1 >>> 24;
   $0 = HEAP32[$2 + 12 >> 2];
   $1 = HEAPU8[349446] | HEAPU8[349447] << 8;
   HEAP8[$0 + 21 | 0] = $1;
   HEAP8[$0 + 22 | 0] = $1 >>> 8;
   HEAP8[$0 + 23 | 0] = $1 >>> 16;
   HEAP8[$0 + 24 | 0] = $1 >>> 24;
   break label$1;
  }
  $0 = HEAP32[$2 + 12 >> 2];
  $1 = HEAPU8[HEAP32[$2 + 12 >> 2] + 16 | 0] >= 32 ? -1 : (1 << HEAPU8[HEAP32[$2 + 12 >> 2] + 16 | 0]) - 1 | 0;
  HEAP8[$0 + 17 | 0] = $1;
  HEAP8[$0 + 18 | 0] = $1 >>> 8;
  HEAP8[$0 + 19 | 0] = $1 >>> 16;
  HEAP8[$0 + 20 | 0] = $1 >>> 24;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP8[$0 + 21 | 0] = 0;
  HEAP8[$0 + 22 | 0] = 0;
  HEAP8[$0 + 23 | 0] = 0;
  HEAP8[$0 + 24 | 0] = 0;
 }
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP8[$0 + 25 | 0] = 1;
 HEAP8[$0 + 26 | 0] = 32;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP8[$0 + 31 | 0] = HEAPU8[$0 + 31 | 0] | 3;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP8[$0 + 31 | 0] = HEAPU8[$0 + 31 | 0] | 12;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP8[$0 + 31 | 0] = HEAPU8[$0 + 31 | 0] & -49;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP8[$0 + 32 | 0] = 0;
 HEAP8[$0 + 33 | 0] = 0;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP8[$0 + 34 | 0] = 0;
 HEAP8[$0 + 35 | 0] = 0;
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = HEAP32[$2 + 12 >> 2];
 $1 = (HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) - 1 | 0;
 HEAP8[$0 + 36 | 0] = $1;
 HEAP8[$0 + 37 | 0] = $1 >>> 8;
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = HEAP32[$2 + 12 >> 2];
 $1 = (HEAPU8[$1 + 14 | 0] | HEAPU8[$1 + 15 | 0] << 8) - 1 | 0;
 HEAP8[$0 + 38 | 0] = $1;
 HEAP8[$0 + 39 | 0] = $1 >>> 8;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP8[$0 + 27 | 0] = 0;
 HEAP8[$0 + 28 | 0] = 0;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP8[$0 + 29 | 0] = 0;
 HEAP8[$0 + 30 | 0] = 0;
}

function lcdGetPixel_ArrayBuffer_flat($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 HEAP32[$3 + 32 >> 2] = 0;
 $0 = HEAP32[$3 + 44 >> 2];
 HEAP32[$3 + 28 >> 2] = HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24);
 HEAP32[$3 + 24 >> 2] = lcdGetPixelIndex_ArrayBuffer(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 40 >> 2], HEAP32[$3 + 36 >> 2], 1);
 HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 28 >> 2] + (HEAP32[$3 + 24 >> 2] >>> 3 | 0);
 label$1: {
  if (HEAPU8[HEAP32[$3 + 44 >> 2] + 16 | 0] & 7) {
   HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 24 >> 2] & 7;
   HEAP32[$3 + 20 >> 2] = (1 << HEAPU8[HEAP32[$3 + 44 >> 2] + 16 | 0]) - 1;
   HEAP32[$3 + 16 >> 2] = HEAPU8[HEAP32[$3 + 28 >> 2]];
   $0 = HEAP32[$3 + 44 >> 2];
   if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 4) {
    $0 = 8 - (HEAP32[$3 + 24 >> 2] + HEAPU8[HEAP32[$3 + 44 >> 2] + 16 | 0] | 0) | 0;
   } else {
    $0 = HEAP32[$3 + 24 >> 2];
   }
   HEAP32[$3 + 12 >> 2] = $0;
   HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 20 >> 2] & HEAP32[$3 + 16 >> 2] >>> HEAP32[$3 + 12 >> 2];
   break label$1;
  }
  $0 = HEAP32[$3 + 44 >> 2];
  label$5: {
   if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 4) {
    HEAP32[$3 + 8 >> 2] = HEAPU8[HEAP32[$3 + 44 >> 2] + 16 | 0] - 8;
    while (1) {
     if (HEAP32[$3 + 8 >> 2] >= 0) {
      HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 32 >> 2] | HEAPU8[HEAP32[$3 + 28 >> 2]] << HEAP32[$3 + 8 >> 2];
      HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 28 >> 2] + 1;
      HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] - 8;
      continue;
     }
     break;
    }
    break label$5;
   }
   HEAP32[$3 + 4 >> 2] = 0;
   while (1) {
    if (HEAP32[$3 + 4 >> 2] < HEAPU8[HEAP32[$3 + 44 >> 2] + 16 | 0]) {
     HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 32 >> 2] | HEAPU8[HEAP32[$3 + 28 >> 2]] << HEAP32[$3 + 4 >> 2];
     HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 28 >> 2] + 1;
     HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 8;
     continue;
    }
    break;
   }
  }
 }
 __stack_pointer = $3 + 48 | 0;
 return HEAP32[$3 + 32 >> 2];
}

function jswrap_function_apply_or_call($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $4 = __stack_pointer - 128 | 0;
 $3 = $4;
 __stack_pointer = $3;
 HEAP32[$3 + 120 >> 2] = $0;
 HEAP32[$3 + 116 >> 2] = $1;
 HEAP32[$3 + 112 >> 2] = $2;
 HEAP32[$3 + 104 >> 2] = 0;
 HEAP32[$3 + 100 >> 2] = 0;
 label$1: {
  label$2: {
   if (jsvIsIterable(HEAP32[$3 + 112 >> 2]) & 1) {
    HEAP32[$3 + 100 >> 2] = jsvGetLength(HEAP32[$3 + 112 >> 2]);
    if (HEAPU32[$3 + 100 >> 2] > 256) {
     HEAP32[$3 >> 2] = HEAP32[$3 + 100 >> 2];
     jsExceptionHere(1, 122273, $3);
     HEAP32[$3 + 124 >> 2] = 0;
     break label$1;
    }
    $4 = $4 - ((HEAP32[$3 + 100 >> 2] << 2) + 15 & -16) | 0;
    __stack_pointer = $4;
    HEAP32[$3 + 104 >> 2] = $4;
    HEAP32[$3 + 108 >> 2] = 0;
    while (1) {
     if (HEAPU32[$3 + 108 >> 2] < HEAPU32[$3 + 100 >> 2]) {
      HEAP32[HEAP32[$3 + 104 >> 2] + (HEAP32[$3 + 108 >> 2] << 2) >> 2] = 0;
      HEAP32[$3 + 108 >> 2] = HEAP32[$3 + 108 >> 2] + 1;
      continue;
     }
     break;
    }
    jsvIteratorNew($3 + 40 | 0, HEAP32[$3 + 112 >> 2], 1);
    while (1) {
     if (jsvIteratorHasElement($3 + 40 | 0) & 1) {
      HEAP32[$3 + 36 >> 2] = jsvIteratorGetKey($3 + 40 | 0);
      if (jsvIsIntegerish(HEAP32[$3 + 36 >> 2]) & 1) {
       HEAP32[$3 + 32 >> 2] = jsvGetInteger(HEAP32[$3 + 36 >> 2]);
       if (!(HEAP32[$3 + 32 >> 2] < 0 | HEAP32[$3 + 32 >> 2] >= HEAP32[$3 + 100 >> 2])) {
        $0 = jsvIteratorGetValue($3 + 40 | 0);
        HEAP32[HEAP32[$3 + 104 >> 2] + (HEAP32[$3 + 32 >> 2] << 2) >> 2] = $0;
       }
      }
      jsvUnLock(HEAP32[$3 + 36 >> 2]);
      jsvIteratorNext($3 + 40 | 0);
      continue;
     }
     break;
    }
    jsvIteratorFree($3 + 40 | 0);
    break label$2;
   }
   if (!(jsvIsUndefined(HEAP32[$3 + 112 >> 2]) & 1)) {
    HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 112 >> 2];
    jsExceptionHere(1, 114274, $3 + 16 | 0);
    HEAP32[$3 + 124 >> 2] = 0;
    break label$1;
   }
  }
  HEAP32[$3 + 28 >> 2] = jspeFunctionCall(HEAP32[$3 + 120 >> 2], 0, HEAP32[$3 + 116 >> 2], 0, HEAP32[$3 + 100 >> 2], HEAP32[$3 + 104 >> 2]);
  jsvUnLockMany(HEAP32[$3 + 100 >> 2], HEAP32[$3 + 104 >> 2]);
  HEAP32[$3 + 124 >> 2] = HEAP32[$3 + 28 >> 2];
 }
 __stack_pointer = $3 + 128 | 0;
 return HEAP32[$3 + 124 >> 2];
}

function tflite__ops__micro__pooling__AverageEval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  if (!HEAP32[HEAP32[$2 + 20 >> 2] + 12 >> 2]) {
   break label$1;
  }
 }
 HEAP32[$2 + 16 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] + 12 >> 2];
 label$2: {
  if (!HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2]) {
   break label$2;
  }
 }
 HEAP32[$2 + 12 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2];
 HEAP32[$2 + 8 >> 2] = tflite__micro__GetEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], 0);
 HEAP32[$2 + 4 >> 2] = tflite__micro__GetEvalOutput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], 0);
 label$3: {
  label$4: {
   label$5: {
    switch (HEAP32[HEAP32[$2 + 8 >> 2] + 8 >> 2] - 1 | 0) {
    case 0:
     tflite__ops__micro__pooling___28anonymous_20namespace_29__AverageEvalFloat_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20TfLitePoolParams_20const__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]);
     break label$4;

    case 2:
    case 8:
     tflite__ops__micro__pooling___28anonymous_20namespace_29__AverageEvalQuantized_28TfLiteContext__2c_20TfLiteNode_20const__2c_20TfLitePoolParams_20const__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]);
     break label$4;

    default:
     break label$5;
    }
   }
   $0 = HEAP32[HEAP32[$2 + 24 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 24 >> 2];
   HEAP32[$2 >> 2] = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 8 >> 2] + 8 >> 2]);
   FUNCTION_TABLE[$0 | 0]($1, 121073, $2);
   HEAP32[$2 + 28 >> 2] = 1;
   break label$3;
  }
  HEAP32[$2 + 28 >> 2] = 0;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jsvGetArrayIndex($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP16[$2 + 18 >> 1] = jsvGetLastChild(HEAP32[$2 + 24 >> 2]);
 HEAP32[$2 + 12 >> 2] = 0;
 label$1: {
  while (1) {
   if (HEAPU16[$2 + 18 >> 1]) {
    HEAP32[$2 + 8 >> 2] = jsvLock(HEAPU16[$2 + 18 >> 1]);
    if (jsvIsInt(HEAP32[$2 + 8 >> 2]) & 1) {
     $0 = HEAP32[$2 + 8 >> 2];
     HEAP32[$2 + 12 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
     if (HEAP32[$2 + 12 >> 2] == HEAP32[$2 + 20 >> 2]) {
      HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 8 >> 2];
      break label$1;
     }
     jsvUnLock(HEAP32[$2 + 8 >> 2]);
    } else {
     HEAP16[$2 + 18 >> 1] = jsvGetPrevSibling(HEAP32[$2 + 8 >> 2]);
     jsvUnLock(HEAP32[$2 + 8 >> 2]);
     continue;
    }
   }
   break;
  }
  if (HEAP32[$2 + 20 >> 2] > HEAP32[$2 + 12 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  label$8: {
   if (HEAP32[$2 + 20 >> 2] > (HEAP32[$2 + 12 >> 2] / 2 | 0)) {
    while (1) {
     if (HEAPU16[$2 + 18 >> 1]) {
      HEAP32[$2 + 4 >> 2] = jsvLock(HEAPU16[$2 + 18 >> 1]);
      $0 = HEAP32[$2 + 4 >> 2];
      if (HEAP32[$2 + 20 >> 2] == (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24))) {
       HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 4 >> 2];
       break label$1;
      } else {
       HEAP16[$2 + 18 >> 1] = jsvGetPrevSibling(HEAP32[$2 + 4 >> 2]);
       jsvUnLock(HEAP32[$2 + 4 >> 2]);
       continue;
      }
     }
     break;
    }
    break label$8;
   }
   HEAP16[$2 + 18 >> 1] = jsvGetFirstChild(HEAP32[$2 + 24 >> 2]);
   while (1) {
    if (HEAPU16[$2 + 18 >> 1]) {
     HEAP32[$2 >> 2] = jsvLock(HEAPU16[$2 + 18 >> 1]);
     $0 = HEAP32[$2 >> 2];
     if (HEAP32[$2 + 20 >> 2] == (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24))) {
      HEAP32[$2 + 28 >> 2] = HEAP32[$2 >> 2];
      break label$1;
     } else {
      HEAP16[$2 + 18 >> 1] = jsvGetNextSibling(HEAP32[$2 >> 2]);
      jsvUnLock(HEAP32[$2 >> 2]);
      continue;
     }
    }
    break;
   }
  }
  HEAP32[$2 + 28 >> 2] = 0;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function tflite__GetRegistrationFromOpCode_28tflite__OperatorCode_20const__2c_20tflite__OpResolver_20const__2c_20tflite__ErrorReporter__2c_20TfLiteRegistration_20const___29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer + -64 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 60 >> 2] = $0;
 HEAP32[$4 + 56 >> 2] = $1;
 HEAP32[$4 + 52 >> 2] = $2;
 HEAP32[$4 + 48 >> 2] = $3;
 HEAP32[$4 + 44 >> 2] = 0;
 HEAP32[HEAP32[$4 + 48 >> 2] >> 2] = 0;
 HEAP32[$4 + 40 >> 2] = tflite__OperatorCode__builtin_code_28_29_20const(HEAP32[$4 + 60 >> 2]);
 HEAP32[$4 + 36 >> 2] = tflite__OperatorCode__version_28_29_20const(HEAP32[$4 + 60 >> 2]);
 label$1: {
  if (!(HEAP32[$4 + 40 >> 2] <= 126 & HEAP32[$4 + 40 >> 2] >= 0)) {
   $0 = HEAP32[$4 + 52 >> 2];
   HEAP32[$4 >> 2] = HEAP32[$4 + 40 >> 2];
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 125230, $4);
   HEAP32[$4 + 44 >> 2] = 1;
   break label$1;
  }
  label$4: {
   if (HEAP32[$4 + 40 >> 2] != 32) {
    $0 = HEAP32[$4 + 56 >> 2];
    $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, HEAP32[$4 + 40 >> 2], HEAP32[$4 + 36 >> 2]) | 0;
    HEAP32[HEAP32[$4 + 48 >> 2] >> 2] = $0;
    if (!HEAP32[HEAP32[$4 + 48 >> 2] >> 2]) {
     $0 = HEAP32[$4 + 52 >> 2];
     $1 = tflite__EnumNameBuiltinOperator_28tflite__BuiltinOperator_29(HEAP32[$4 + 40 >> 2]);
     HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 36 >> 2];
     HEAP32[$4 + 16 >> 2] = $1;
     tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 146855, $4 + 16 | 0);
     HEAP32[$4 + 44 >> 2] = 1;
    }
    break label$4;
   }
   label$7: {
    if (!tflite__OperatorCode__custom_code_28_29_20const(HEAP32[$4 + 60 >> 2])) {
     tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$4 + 52 >> 2], 146340, 0);
     HEAP32[$4 + 44 >> 2] = 1;
     break label$7;
    }
    HEAP32[$4 + 32 >> 2] = flatbuffers__String__c_str_28_29_20const(tflite__OperatorCode__custom_code_28_29_20const(HEAP32[$4 + 60 >> 2]));
    $0 = HEAP32[$4 + 56 >> 2];
    $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, HEAP32[$4 + 32 >> 2], HEAP32[$4 + 36 >> 2]) | 0;
    HEAP32[HEAP32[$4 + 48 >> 2] >> 2] = $0;
    if (!HEAP32[HEAP32[$4 + 48 >> 2] >> 2]) {
     HEAP32[$4 + 44 >> 2] = 1;
    }
   }
  }
 }
 __stack_pointer = $4 - -64 | 0;
 return HEAP32[$4 + 44 >> 2];
}

function jswrap_io_pinMode($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP8[$3 + 15 | 0] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 label$1: {
  if (!(jshIsPinValid(HEAPU8[$3 + 15 | 0]) & 1)) {
   jsExceptionHere(1, 117533, 0);
   break label$1;
  }
  HEAP8[$3 + 6 | 0] = 0;
  if (jsvIsString(HEAP32[$3 + 8 >> 2]) & 1) {
   label$4: {
    if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 118691) & 1) {
     HEAP8[$3 + 6 | 0] = 7;
     break label$4;
    }
    label$6: {
     if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 112542) & 1) {
      HEAP8[$3 + 6 | 0] = 4;
      break label$6;
     }
     label$8: {
      if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 116836) & 1) {
       HEAP8[$3 + 6 | 0] = 5;
       break label$8;
      }
      label$10: {
       if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 117092) & 1) {
        HEAP8[$3 + 6 | 0] = 6;
        break label$10;
       }
       label$12: {
        if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 112535) & 1) {
         HEAP8[$3 + 6 | 0] = 1;
         break label$12;
        }
        label$14: {
         if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 117554) & 1) {
          HEAP8[$3 + 6 | 0] = 2;
          break label$14;
         }
         label$16: {
          if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 116849) & 1) {
           HEAP8[$3 + 6 | 0] = 3;
           break label$16;
          }
          label$18: {
           if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 112532) & 1) {
            HEAP8[$3 + 6 | 0] = 8;
            break label$18;
           }
           if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 117551) & 1) {
            HEAP8[$3 + 6 | 0] = 9;
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
  if (HEAPU8[$3 + 6 | 0]) {
   jshSetPinStateIsManual(HEAPU8[$3 + 15 | 0], (HEAPU8[$3 + 7 | 0] ^ -1) & 1);
   jshPinSetState(HEAPU8[$3 + 15 | 0], HEAPU8[$3 + 6 | 0]);
   break label$1;
  }
  jshSetPinStateIsManual(HEAPU8[$3 + 15 | 0], 0);
  label$22: {
   if (jsvIsUndefined(HEAP32[$3 + 8 >> 2]) & 1) {
    break label$22;
   }
   if (jsvIsStringEqual(HEAP32[$3 + 8 >> 2], 117059) & 1) {
    break label$22;
   }
   jsExceptionHere(1, 120444, 0);
  }
 }
 __stack_pointer = $3 + 16 | 0;
}

function jspEvaluateModule($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer + -64 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 56 >> 2] = $0;
 label$1: {
  label$2: {
   if (jsvIsFunction(HEAP32[$1 + 56 >> 2]) & 1) {
    HEAP32[$1 + 56 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 56 >> 2], 120874);
    if (!(jsvIsString(HEAP32[$1 + 56 >> 2]) & 1)) {
     jsvUnLock(HEAP32[$1 + 56 >> 2]);
     HEAP32[$1 + 60 >> 2] = 0;
     break label$1;
    }
    break label$2;
   }
   jsvLockAgain(HEAP32[$1 + 56 >> 2]);
  }
  HEAP32[$1 + 52 >> 2] = jsvNewObject();
  HEAP32[$1 + 48 >> 2] = jsvNewObject();
  if (!(HEAP32[$1 + 48 >> 2] ? HEAP32[$1 + 52 >> 2] : 0)) {
   jsvUnLock3(HEAP32[$1 + 52 >> 2], HEAP32[$1 + 48 >> 2], HEAP32[$1 + 56 >> 2]);
   HEAP32[$1 + 60 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 44 >> 2] = jsvAddNamedChild(HEAP32[$1 + 52 >> 2], HEAP32[$1 + 48 >> 2], 114851);
  jsvUnLock2(HEAP32[$1 + 48 >> 2], jsvAddNamedChild(HEAP32[$1 + 52 >> 2], HEAP32[$1 + 52 >> 2], 120054));
  HEAP32[$1 + 40 >> 2] = HEAP32[86758];
  $0 = HEAP32[86757];
  $2 = HEAP32[86756];
  HEAP32[$1 + 32 >> 2] = $2;
  HEAP32[$1 + 36 >> 2] = $0;
  $2 = HEAP32[86755];
  $0 = HEAP32[86754];
  HEAP32[$1 + 24 >> 2] = $0;
  HEAP32[$1 + 28 >> 2] = $2;
  $0 = HEAP32[86753];
  $2 = HEAP32[86752];
  HEAP32[$1 + 16 >> 2] = $2;
  HEAP32[$1 + 20 >> 2] = $0;
  $2 = HEAP32[86751];
  $0 = HEAP32[86750];
  HEAP32[$1 + 8 >> 2] = $0;
  HEAP32[$1 + 12 >> 2] = $2;
  HEAP32[86753] = HEAP32[$1 + 48 >> 2];
  HEAP32[86754] = 0;
  HEAP8[347020] = 0;
  HEAP32[86756] = HEAP32[$1 + 48 >> 2];
  jsvUnLock(jspEvaluateVar(HEAP32[$1 + 56 >> 2], HEAP32[$1 + 52 >> 2], 0));
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = HEAP32[$1 + 8 >> 2];
  HEAP32[86750] = $2;
  HEAP32[86751] = $0;
  HEAP32[86758] = HEAP32[$1 + 40 >> 2];
  $2 = HEAP32[$1 + 36 >> 2];
  $0 = HEAP32[$1 + 32 >> 2];
  HEAP32[86756] = $0;
  HEAP32[86757] = $2;
  $0 = HEAP32[$1 + 28 >> 2];
  $2 = HEAP32[$1 + 24 >> 2];
  HEAP32[86754] = $2;
  HEAP32[86755] = $0;
  $2 = HEAP32[$1 + 20 >> 2];
  $0 = HEAP32[$1 + 16 >> 2];
  HEAP32[86752] = $0;
  HEAP32[86753] = $2;
  jsvUnLock2(HEAP32[$1 + 56 >> 2], HEAP32[$1 + 52 >> 2]);
  HEAP32[$1 + 60 >> 2] = jsvSkipNameAndUnLock(HEAP32[$1 + 44 >> 2]);
 }
 __stack_pointer = $1 - -64 | 0;
 return HEAP32[$1 + 60 >> 2];
}

function jswrap_string_indexOf($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 40 >> 2] = $0;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP8[$4 + 31 | 0] = $3;
 label$1: {
  if (!(jsvIsString(HEAP32[$4 + 40 >> 2]) & 1)) {
   HEAP32[$4 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 36 >> 2] = jsvAsString(HEAP32[$4 + 36 >> 2]);
  if (!HEAP32[$4 + 36 >> 2]) {
   HEAP32[$4 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 24 >> 2] = jsvGetStringLength(HEAP32[$4 + 40 >> 2]);
  HEAP32[$4 + 20 >> 2] = jsvGetStringLength(HEAP32[$4 + 36 >> 2]);
  if (HEAP32[$4 + 20 >> 2] > HEAP32[$4 + 24 >> 2]) {
   jsvUnLock(HEAP32[$4 + 36 >> 2]);
   HEAP32[$4 + 44 >> 2] = -1;
   break label$1;
  }
  HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 24 >> 2] - HEAP32[$4 + 20 >> 2];
  label$5: {
   if (!(HEAP8[$4 + 31 | 0] & 1)) {
    HEAP32[$4 + 8 >> 2] = 1;
    HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 16 >> 2] + 1;
    HEAP32[$4 + 12 >> 2] = 0;
    if (jsvIsNumeric(HEAP32[$4 + 32 >> 2]) & 1) {
     HEAP32[$4 + 12 >> 2] = jsvGetInteger(HEAP32[$4 + 32 >> 2]);
     if (HEAP32[$4 + 12 >> 2] < 0) {
      HEAP32[$4 + 12 >> 2] = 0;
     }
     if (HEAP32[$4 + 12 >> 2] > HEAP32[$4 + 4 >> 2]) {
      HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 4 >> 2];
     }
    }
    break label$5;
   }
   HEAP32[$4 + 8 >> 2] = -1;
   HEAP32[$4 + 4 >> 2] = -1;
   HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 16 >> 2];
   if (jsvIsNumeric(HEAP32[$4 + 32 >> 2]) & 1) {
    HEAP32[$4 + 12 >> 2] = jsvGetInteger(HEAP32[$4 + 32 >> 2]);
    if (HEAP32[$4 + 12 >> 2] < 0) {
     HEAP32[$4 + 12 >> 2] = 0;
    }
    if (HEAP32[$4 + 12 >> 2] > HEAP32[$4 + 16 >> 2]) {
     HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 16 >> 2];
    }
   }
  }
  while (1) {
   if (HEAP32[$4 + 12 >> 2] != HEAP32[$4 + 4 >> 2]) {
    if (jsvCompareString(HEAP32[$4 + 40 >> 2], HEAP32[$4 + 36 >> 2], HEAP32[$4 + 12 >> 2], 0, 1)) {
     HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 8 >> 2] + HEAP32[$4 + 12 >> 2];
     continue;
    } else {
     jsvUnLock(HEAP32[$4 + 36 >> 2]);
     HEAP32[$4 + 44 >> 2] = HEAP32[$4 + 12 >> 2];
     break label$1;
    }
   }
   break;
  }
  jsvUnLock(HEAP32[$4 + 36 >> 2]);
  HEAP32[$4 + 44 >> 2] = -1;
 }
 __stack_pointer = $4 + 48 | 0;
 return HEAP32[$4 + 44 >> 2];
}

function jsfStripDriveFromName($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP8[$3 + 7 | 0] = $1;
 label$1: {
  if (HEAP8[HEAP32[$3 + 8 >> 2] + 1 | 0] == 58) {
   HEAP8[$3 + 6 | 0] = HEAPU8[HEAP32[$3 + 8 >> 2]];
   $2 = HEAP32[$3 + 8 >> 2];
   $1 = HEAPU8[$2 + 10 | 0] | HEAPU8[$2 + 11 | 0] << 8 | (HEAPU8[$2 + 12 | 0] << 16 | HEAPU8[$2 + 13 | 0] << 24);
   $4 = $1;
   $0 = HEAPU8[$2 + 14 | 0] | HEAPU8[$2 + 15 | 0] << 8 | (HEAPU8[$2 + 16 | 0] << 16 | HEAPU8[$2 + 17 | 0] << 24);
   $7 = $0;
   $0 = HEAPU8[$2 + 18 | 0] | HEAPU8[$2 + 19 | 0] << 8 | (HEAPU8[$2 + 20 | 0] << 16 | HEAPU8[$2 + 21 | 0] << 24);
   $5 = $0;
   $1 = HEAPU8[$2 + 22 | 0] | HEAPU8[$2 + 23 | 0] << 8 | (HEAPU8[$2 + 24 | 0] << 16 | HEAPU8[$2 + 25 | 0] << 24);
   $8 = $1;
   $1 = HEAPU8[$2 + 2 | 0] | HEAPU8[$2 + 3 | 0] << 8 | (HEAPU8[$2 + 4 | 0] << 16 | HEAPU8[$2 + 5 | 0] << 24);
   $6 = $1;
   $0 = HEAPU8[$2 + 6 | 0] | HEAPU8[$2 + 7 | 0] << 8 | (HEAPU8[$2 + 8 | 0] << 16 | HEAPU8[$2 + 9 | 0] << 24);
   $9 = $0;
   $1 = HEAP32[$3 + 8 >> 2];
   $0 = HEAPU8[$2 + 26 | 0] | HEAPU8[$2 + 27 | 0] << 8;
   HEAP8[$1 + 24 | 0] = $0;
   HEAP8[$1 + 25 | 0] = $0 >>> 8;
   HEAP8[$1 + 16 | 0] = $5;
   HEAP8[$1 + 17 | 0] = $5 >>> 8;
   HEAP8[$1 + 18 | 0] = $5 >>> 16;
   HEAP8[$1 + 19 | 0] = $5 >>> 24;
   $0 = $8;
   HEAP8[$1 + 20 | 0] = $0;
   HEAP8[$1 + 21 | 0] = $0 >>> 8;
   HEAP8[$1 + 22 | 0] = $0 >>> 16;
   HEAP8[$1 + 23 | 0] = $0 >>> 24;
   HEAP8[$1 + 8 | 0] = $4;
   HEAP8[$1 + 9 | 0] = $4 >>> 8;
   HEAP8[$1 + 10 | 0] = $4 >>> 16;
   HEAP8[$1 + 11 | 0] = $4 >>> 24;
   $0 = $7;
   HEAP8[$1 + 12 | 0] = $0;
   HEAP8[$1 + 13 | 0] = $0 >>> 8;
   HEAP8[$1 + 14 | 0] = $0 >>> 16;
   HEAP8[$1 + 15 | 0] = $0 >>> 24;
   HEAP8[$1 | 0] = $6;
   HEAP8[$1 + 1 | 0] = $6 >>> 8;
   HEAP8[$1 + 2 | 0] = $6 >>> 16;
   HEAP8[$1 + 3 | 0] = $6 >>> 24;
   $0 = $9;
   HEAP8[$1 + 4 | 0] = $0;
   HEAP8[$1 + 5 | 0] = $0 >>> 8;
   HEAP8[$1 + 6 | 0] = $0 >>> 16;
   HEAP8[$1 + 7 | 0] = $0 >>> 24;
   HEAP8[HEAP32[$3 + 8 >> 2] + 26 | 0] = 0;
   HEAP8[HEAP32[$3 + 8 >> 2] + 27 | 0] = 0;
   HEAP8[$3 + 15 | 0] = HEAPU8[$3 + 6 | 0];
   break label$1;
  }
  HEAP8[$3 + 15 | 0] = 0;
 }
 return HEAP8[$3 + 15 | 0];
}

function heatshrink_encode_cb($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 832 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 828 >> 2] = $0;
 HEAP32[$4 + 824 >> 2] = $1;
 HEAP32[$4 + 820 >> 2] = $2;
 HEAP32[$4 + 816 >> 2] = $3;
 heatshrink_encoder_reset($4 + 288 | 0);
 HEAP32[$4 + 24 >> 2] = 0;
 HEAP32[$4 + 20 >> 2] = 0;
 HEAP32[$4 + 16 >> 2] = 0;
 HEAP32[$4 + 12 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = 0;
 while (1) {
  $0 = 1;
  $0 = HEAP32[$4 + 16 >> 2] < 0 ? HEAP32[$4 + 12 >> 2] != 0 : $0;
  if ($0) {
   if (!HEAP32[$4 + 12 >> 2]) {
    HEAP32[$4 + 8 >> 2] = 0;
    while (1) {
     $0 = 0;
     $0 = HEAPU32[$4 + 12 >> 2] < 128 ? HEAP32[$4 + 16 >> 2] >= 0 : $0;
     if ($0) {
      HEAP32[$4 + 16 >> 2] = FUNCTION_TABLE[HEAP32[$4 + 828 >> 2]](HEAP32[$4 + 824 >> 2]);
      if (HEAP32[$4 + 16 >> 2] >= 0) {
       $1 = HEAP32[$4 + 16 >> 2];
       $0 = HEAP32[$4 + 12 >> 2];
       HEAP32[$4 + 12 >> 2] = $0 + 1;
       HEAP8[($4 + 160 | 0) + $0 | 0] = $1;
      }
      continue;
     }
     break;
    }
   }
   HEAP8[$4 + 7 | 0] = (heatshrink_encoder_sink($4 + 288 | 0, HEAP32[$4 + 8 >> 2] + ($4 + 160 | 0) | 0, HEAP32[$4 + 12 >> 2], $4 + 24 | 0) | 0) >= 0;
   HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] - HEAP32[$4 + 24 >> 2];
   HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 24 >> 2] + HEAP32[$4 + 8 >> 2];
   if (!(HEAP32[$4 + 12 >> 2] | HEAP32[$4 + 16 >> 2] >= 0)) {
    heatshrink_encoder_finish($4 + 288 | 0);
   }
   while (1) {
    HEAP32[$4 >> 2] = heatshrink_encoder_poll($4 + 288 | 0, $4 + 32 | 0, 128, $4 + 24 | 0);
    if (HEAP32[$4 + 820 >> 2]) {
     HEAP32[$4 + 28 >> 2] = 0;
     while (1) {
      if (HEAPU32[$4 + 28 >> 2] < HEAPU32[$4 + 24 >> 2]) {
       FUNCTION_TABLE[HEAP32[$4 + 820 >> 2]](HEAPU8[HEAP32[$4 + 28 >> 2] + ($4 + 32 | 0) | 0], HEAP32[$4 + 816 >> 2]);
       HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 28 >> 2] + 1;
       continue;
      }
      break;
     }
    }
    HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 24 >> 2] + HEAP32[$4 + 20 >> 2];
    if (HEAP32[$4 >> 2] == 1) {
     continue;
    }
    break;
   }
   if (!(HEAP32[$4 + 12 >> 2] | HEAP32[$4 + 16 >> 2] >= 0)) {
    heatshrink_encoder_finish($4 + 288 | 0);
   }
   continue;
  }
  break;
 }
 __stack_pointer = $4 + 832 | 0;
 return HEAP32[$4 + 20 >> 2];
}

function jswrap_arraybufferview_map($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 176 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 168 >> 2] = $0;
 HEAP32[$3 + 164 >> 2] = $1;
 HEAP32[$3 + 160 >> 2] = $2;
 label$1: {
  if (!(jsvIsArrayBuffer(HEAP32[$3 + 168 >> 2]) & 1)) {
   jsExceptionHere(1, 112133, 0);
   HEAP32[$3 + 172 >> 2] = 0;
   break label$1;
  }
  if (!(jsvIsFunction(HEAP32[$3 + 164 >> 2]) & 1)) {
   jsExceptionHere(1, 117348, 0);
   HEAP32[$3 + 172 >> 2] = 0;
   break label$1;
  }
  label$4: {
   if (jsvIsUndefined(HEAP32[$3 + 160 >> 2]) & 1) {
    break label$4;
   }
   if (jsvIsObject(HEAP32[$3 + 160 >> 2]) & 1) {
    break label$4;
   }
   jsExceptionHere(1, 121551, 0);
   HEAP32[$3 + 172 >> 2] = 0;
   break label$1;
  }
  HEAP8[$3 + 159 | 0] = HEAPU8[HEAP32[$3 + 168 >> 2] + 5 | 0];
  HEAP32[$3 + 152 >> 2] = jsvNewTypedArray(HEAPU8[$3 + 159 | 0], jsvGetArrayBufferLength(HEAP32[$3 + 168 >> 2]));
  if (!HEAP32[$3 + 152 >> 2]) {
   HEAP32[$3 + 172 >> 2] = 0;
   break label$1;
  }
  jsvIteratorNew($3 + 88 | 0, HEAP32[$3 + 168 >> 2], 1);
  jsvArrayBufferIteratorNew($3 + 32 | 0, HEAP32[$3 + 152 >> 2], 0);
  while (1) {
   if (jsvIteratorHasElement($3 + 88 | 0) & 1) {
    HEAP32[$3 + 28 >> 2] = jsvIteratorGetKey($3 + 88 | 0);
    if (jsvIsInt(HEAP32[$3 + 28 >> 2]) & 1) {
     HEAP32[$3 + 24 >> 2] = jsvGetInteger(HEAP32[$3 + 28 >> 2]);
     HEAP32[$3 + 12 >> 2] = jsvIteratorGetValue($3 + 88 | 0);
     HEAP32[$3 + 16 >> 2] = jsvNewFromInteger(HEAP32[$3 + 24 >> 2]);
     HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 168 >> 2];
     HEAP32[$3 + 8 >> 2] = jspeFunctionCall(HEAP32[$3 + 164 >> 2], 0, HEAP32[$3 + 160 >> 2], 0, 3, $3 + 12 | 0);
     jsvUnLockMany(2, $3 + 12 | 0);
     if (HEAP32[$3 + 8 >> 2]) {
      jsvArrayBufferIteratorSetValue($3 + 32 | 0, HEAP32[$3 + 8 >> 2], 0);
      jsvUnLock(HEAP32[$3 + 8 >> 2]);
     }
    }
    jsvUnLock(HEAP32[$3 + 28 >> 2]);
    jsvIteratorNext($3 + 88 | 0);
    jsvArrayBufferIteratorNext($3 + 32 | 0);
    continue;
   }
   break;
  }
  jsvIteratorFree($3 + 88 | 0);
  jsvArrayBufferIteratorFree($3 + 32 | 0);
  HEAP32[$3 + 172 >> 2] = HEAP32[$3 + 152 >> 2];
 }
 __stack_pointer = $3 + 176 | 0;
 return HEAP32[$3 + 172 >> 2];
}

function tflite__ops__micro__fully_connected__EvalFloat_28TfLiteContext__2c_20TfLiteNode__2c_20TfLiteFusedActivation_2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0;
 $7 = __stack_pointer - 176 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 172 >> 2] = $0;
 HEAP32[$7 + 168 >> 2] = $1;
 HEAP32[$7 + 164 >> 2] = $2;
 HEAP32[$7 + 160 >> 2] = $3;
 HEAP32[$7 + 156 >> 2] = $4;
 HEAP32[$7 + 152 >> 2] = $5;
 HEAP32[$7 + 148 >> 2] = $6;
 void_20tflite__CalculateActivationRange_float__28TfLiteFusedActivation_2c_20float__2c_20float__29(HEAP32[$7 + 164 >> 2], $7 + 144 | 0, $7 + 140 | 0);
 HEAPF32[$7 + 124 >> 2] = HEAPF32[$7 + 144 >> 2];
 HEAPF32[$7 + 128 >> 2] = HEAPF32[$7 + 140 >> 2];
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($7 + 72 | 0, HEAP32[$7 + 160 >> 2]);
 $0 = float_20const__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor_20const__29(HEAP32[$7 + 160 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($7 + 48 | 0, HEAP32[$7 + 156 >> 2]);
 $1 = float_20const__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor_20const__29(HEAP32[$7 + 156 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($7 + 24 | 0, HEAP32[$7 + 152 >> 2]);
 $2 = float_20const__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor_20const__29(HEAP32[$7 + 152 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($7, HEAP32[$7 + 148 >> 2]);
 tflite__reference_ops__FullyConnected_28tflite__FullyConnectedParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($7 + 96 | 0, $7 + 72 | 0, $0, $7 + 48 | 0, $1, $7 + 24 | 0, $2, $7, float__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor__29(HEAP32[$7 + 148 >> 2]));
 tflite__RuntimeShape___RuntimeShape_28_29($7);
 tflite__RuntimeShape___RuntimeShape_28_29($7 + 24 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($7 + 48 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($7 + 72 | 0);
 __stack_pointer = $7 + 176 | 0;
 return 0;
}

function tflite__ops__micro__pooling__MaxEval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  if (!HEAP32[HEAP32[$2 + 20 >> 2] + 12 >> 2]) {
   break label$1;
  }
 }
 HEAP32[$2 + 16 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] + 12 >> 2];
 label$2: {
  if (!HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2]) {
   break label$2;
  }
 }
 HEAP32[$2 + 12 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2];
 HEAP32[$2 + 8 >> 2] = tflite__micro__GetEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], 0);
 HEAP32[$2 + 4 >> 2] = tflite__micro__GetEvalOutput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], 0);
 label$3: {
  label$4: {
   label$5: {
    switch (HEAP32[HEAP32[$2 + 8 >> 2] + 8 >> 2] - 1 | 0) {
    case 0:
     tflite__ops__micro__pooling___28anonymous_20namespace_29__MaxEvalFloat_28TfLiteContext__2c_20TfLiteNode__2c_20TfLitePoolParams__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]);
     break label$4;

    case 2:
    case 8:
     tflite__ops__micro__pooling___28anonymous_20namespace_29__MaxEvalQuantized_28TfLiteContext__2c_20TfLiteNode__2c_20TfLitePoolParams__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]);
     break label$4;

    default:
     break label$5;
    }
   }
   $0 = HEAP32[HEAP32[$2 + 24 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 24 >> 2];
   HEAP32[$2 >> 2] = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 8 >> 2] + 8 >> 2]);
   FUNCTION_TABLE[$0 | 0]($1, 127468, $2);
   HEAP32[$2 + 28 >> 2] = 1;
   break label$3;
  }
  HEAP32[$2 + 28 >> 2] = 0;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function heatshrink_decode_cb($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 608 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 604 >> 2] = $0;
 HEAP32[$4 + 600 >> 2] = $1;
 HEAP32[$4 + 596 >> 2] = $2;
 HEAP32[$4 + 592 >> 2] = $3;
 heatshrink_decoder_reset($4 + 288 | 0);
 HEAP32[$4 + 24 >> 2] = 0;
 HEAP32[$4 + 20 >> 2] = 0;
 HEAP32[$4 + 16 >> 2] = 0;
 HEAP32[$4 + 12 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = 0;
 while (1) {
  $0 = 1;
  $0 = HEAP32[$4 + 16 >> 2] < 0 ? HEAP32[$4 + 12 >> 2] != 0 : $0;
  if ($0) {
   if (!HEAP32[$4 + 12 >> 2]) {
    HEAP32[$4 + 8 >> 2] = 0;
    while (1) {
     $0 = 0;
     $0 = HEAPU32[$4 + 12 >> 2] < 128 ? HEAP32[$4 + 16 >> 2] >= 0 : $0;
     if ($0) {
      HEAP32[$4 + 16 >> 2] = FUNCTION_TABLE[HEAP32[$4 + 604 >> 2]](HEAP32[$4 + 600 >> 2]);
      if (HEAP32[$4 + 16 >> 2] >= 0) {
       $1 = HEAP32[$4 + 16 >> 2];
       $0 = HEAP32[$4 + 12 >> 2];
       HEAP32[$4 + 12 >> 2] = $0 + 1;
       HEAP8[($4 + 160 | 0) + $0 | 0] = $1;
      }
      continue;
     }
     break;
    }
   }
   HEAP8[$4 + 7 | 0] = (heatshrink_decoder_sink($4 + 288 | 0, HEAP32[$4 + 8 >> 2] + ($4 + 160 | 0) | 0, HEAP32[$4 + 12 >> 2], $4 + 24 | 0) | 0) >= 0;
   HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] - HEAP32[$4 + 24 >> 2];
   HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 24 >> 2] + HEAP32[$4 + 8 >> 2];
   if (!(HEAP32[$4 + 12 >> 2] | HEAP32[$4 + 16 >> 2] >= 0)) {
    heatshrink_decoder_finish($4 + 288 | 0);
   }
   while (1) {
    HEAP32[$4 >> 2] = heatshrink_decoder_poll($4 + 288 | 0, $4 + 32 | 0, 128, $4 + 24 | 0);
    if (HEAP32[$4 + 596 >> 2]) {
     HEAP32[$4 + 28 >> 2] = 0;
     while (1) {
      if (HEAPU32[$4 + 28 >> 2] < HEAPU32[$4 + 24 >> 2]) {
       FUNCTION_TABLE[HEAP32[$4 + 596 >> 2]](HEAPU8[HEAP32[$4 + 28 >> 2] + ($4 + 32 | 0) | 0], HEAP32[$4 + 592 >> 2]);
       HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 28 >> 2] + 1;
       continue;
      }
      break;
     }
    }
    HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 24 >> 2] + HEAP32[$4 + 20 >> 2];
    if (HEAP32[$4 >> 2] == 1) {
     continue;
    }
    break;
   }
   if (HEAP32[$4 + 16 >> 2] < 0) {
    heatshrink_decoder_finish($4 + 288 | 0);
   }
   continue;
  }
  break;
 }
 __stack_pointer = $4 + 608 | 0;
 return HEAP32[$4 + 20 >> 2];
}

function jswrap_object_on_X($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 44 >> 2] = $0;
 HEAP32[$4 + 40 >> 2] = $1;
 HEAP32[$4 + 36 >> 2] = $2;
 HEAP8[$4 + 35 | 0] = $3;
 label$1: {
  if (!(jsvHasChildren(HEAP32[$4 + 44 >> 2]) & 1)) {
   jsExceptionHere(3, 122784, 0);
   break label$1;
  }
  if (!(jsvIsString(HEAP32[$4 + 40 >> 2]) & 1)) {
   jsExceptionHere(3, 118836, 0);
   break label$1;
  }
  label$4: {
   if (jsvIsFunction(HEAP32[$4 + 36 >> 2]) & 1) {
    break label$4;
   }
   if (jsvIsString(HEAP32[$4 + 36 >> 2]) & 1) {
    break label$4;
   }
   jsExceptionHere(3, 118866, 0);
   break label$1;
  }
  HEAP32[$4 >> 2] = HEAP32[$4 + 40 >> 2];
  HEAP32[$4 + 28 >> 2] = jsvVarPrintf(112207, $4);
  if (!HEAP32[$4 + 28 >> 2]) {
   break label$1;
  }
  HEAP32[$4 + 24 >> 2] = jsvFindChildFromVar(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 28 >> 2], 1);
  jsvUnLock(HEAP32[$4 + 28 >> 2]);
  HEAP32[$4 + 20 >> 2] = jsvSkipName(HEAP32[$4 + 24 >> 2]);
  label$5: {
   if (jsvIsUndefined(HEAP32[$4 + 20 >> 2]) & 1) {
    jsvSetValueOfName(HEAP32[$4 + 24 >> 2], HEAP32[$4 + 36 >> 2]);
    break label$5;
   }
   HEAP32[$4 + 16 >> 2] = jsvNewEmptyArray();
   if (HEAP8[$4 + 35 | 0] & 1) {
    jsvArrayPush(HEAP32[$4 + 16 >> 2], HEAP32[$4 + 36 >> 2]);
   }
   label$8: {
    if (jsvIsArray(HEAP32[$4 + 20 >> 2]) & 1) {
     jsvArrayPushAll(HEAP32[$4 + 16 >> 2], HEAP32[$4 + 20 >> 2], 0);
     break label$8;
    }
    jsvArrayPush(HEAP32[$4 + 16 >> 2], HEAP32[$4 + 20 >> 2]);
   }
   if (!(HEAP8[$4 + 35 | 0] & 1)) {
    jsvArrayPush(HEAP32[$4 + 16 >> 2], HEAP32[$4 + 36 >> 2]);
   }
   jsvSetValueOfName(HEAP32[$4 + 24 >> 2], HEAP32[$4 + 16 >> 2]);
   jsvUnLock(HEAP32[$4 + 16 >> 2]);
  }
  jsvUnLock2(HEAP32[$4 + 20 >> 2], HEAP32[$4 + 24 >> 2]);
  if (!(jsvIsStringEqual(HEAP32[$4 + 40 >> 2], 122985) & 1)) {
   break label$1;
  }
  HEAP32[$4 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 44 >> 2], 119076);
  if (jsvIsString(HEAP32[$4 + 12 >> 2]) & 1) {
   jsiQueueObjectCallbacks(HEAP32[$4 + 44 >> 2], 122908, $4 + 12 | 0, 1);
   jsvObjectRemoveChild(HEAP32[$4 + 44 >> 2], 119076);
  }
  jsvUnLock(HEAP32[$4 + 12 >> 2]);
 }
 __stack_pointer = $4 + 48 | 0;
}

function jswrap_spi_send8bit($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 112 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 108 >> 2] = $0;
 HEAP32[$5 + 104 >> 2] = $1;
 HEAP32[$5 + 100 >> 2] = $2;
 HEAP32[$5 + 96 >> 2] = $3;
 HEAP8[$5 + 95 | 0] = $4;
 label$1: {
  if (!(jsvIsObject(HEAP32[$5 + 108 >> 2]) & 1)) {
   break label$1;
  }
  HEAP8[$5 + 94 | 0] = jsiGetDeviceFromClass(HEAP32[$5 + 108 >> 2]);
  if (!(HEAPU8[$5 + 94 | 0] <= 25 & HEAPU8[$5 + 94 | 0] >= 25)) {
   jsExceptionHere(1, 124545, 0);
   break label$1;
  }
  jshSPISet16(HEAPU8[$5 + 94 | 0], 1);
  if (!(HEAP32[$5 + 100 >> 2] | HEAP32[$5 + 96 >> 2])) {
   HEAP32[$5 + 100 >> 2] = 3;
   HEAP32[$5 + 96 >> 2] = 15;
  }
  HEAP32[$5 + 100 >> 2] = HEAP32[$5 + 100 >> 2] & 255;
  HEAP32[$5 + 96 >> 2] = HEAP32[$5 + 96 >> 2] & 255;
  if (!(jshIsDeviceInitialised(HEAPU8[$5 + 94 | 0]) & 1)) {
   jshSPIInitInfo($5 + 80 | 0);
   jshSPISetup(HEAPU8[$5 + 94 | 0], $5 + 80 | 0);
  }
  jshSPISetReceive(HEAPU8[$5 + 94 | 0], 0);
  if (HEAPU8[$5 + 95 | 0] != 255) {
   jshPinOutput(HEAPU8[$5 + 95 | 0], 0);
  }
  label$7: {
   if (jsvIsNumeric(HEAP32[$5 + 104 >> 2]) & 1) {
    jsspiSend8bit(HEAPU8[$5 + 94 | 0], jsvGetInteger(HEAP32[$5 + 104 >> 2]) & 255, HEAP32[$5 + 100 >> 2], HEAP32[$5 + 96 >> 2]);
    break label$7;
   }
   label$9: {
    if (jsvIsIterable(HEAP32[$5 + 104 >> 2]) & 1) {
     jshInterruptOff();
     jsvIteratorNew($5 + 16 | 0, HEAP32[$5 + 104 >> 2], 1);
     while (1) {
      if (jsvIteratorHasElement($5 + 16 | 0) & 1) {
       HEAP8[$5 + 15 | 0] = jsvIteratorGetIntegerValue($5 + 16 | 0);
       jsspiSend8bit(HEAPU8[$5 + 94 | 0], HEAPU8[$5 + 15 | 0], HEAP32[$5 + 100 >> 2], HEAP32[$5 + 96 >> 2]);
       jsvIteratorNext($5 + 16 | 0);
       continue;
      }
      break;
     }
     jsvIteratorFree($5 + 16 | 0);
     jshInterruptOn();
     break label$9;
    }
    HEAP32[$5 >> 2] = HEAP32[$5 + 104 >> 2];
    jsExceptionHere(1, 117467, $5);
   }
  }
  jshSPIWait(HEAPU8[$5 + 94 | 0]);
  if (HEAPU8[$5 + 95 | 0] != 255) {
   jshPinOutput(HEAPU8[$5 + 95 | 0], 1);
  }
  jshSPISet16(HEAPU8[$5 + 94 | 0], 0);
 }
 __stack_pointer = $5 + 112 | 0;
}

function jswrap_spi_send4bit($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 112 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 108 >> 2] = $0;
 HEAP32[$5 + 104 >> 2] = $1;
 HEAP32[$5 + 100 >> 2] = $2;
 HEAP32[$5 + 96 >> 2] = $3;
 HEAP8[$5 + 95 | 0] = $4;
 label$1: {
  if (!(jsvIsObject(HEAP32[$5 + 108 >> 2]) & 1)) {
   break label$1;
  }
  HEAP8[$5 + 94 | 0] = jsiGetDeviceFromClass(HEAP32[$5 + 108 >> 2]);
  if (!(HEAPU8[$5 + 94 | 0] <= 25 & HEAPU8[$5 + 94 | 0] >= 25)) {
   jsExceptionHere(1, 124585, 0);
   break label$1;
  }
  jshSPISet16(HEAPU8[$5 + 94 | 0], 1);
  if (!(HEAP32[$5 + 100 >> 2] | HEAP32[$5 + 96 >> 2])) {
   HEAP32[$5 + 100 >> 2] = 1;
   HEAP32[$5 + 96 >> 2] = 3;
  }
  HEAP32[$5 + 100 >> 2] = HEAP32[$5 + 100 >> 2] & 15;
  HEAP32[$5 + 96 >> 2] = HEAP32[$5 + 96 >> 2] & 15;
  if (!(jshIsDeviceInitialised(HEAPU8[$5 + 94 | 0]) & 1)) {
   jshSPIInitInfo($5 + 80 | 0);
   jshSPISetup(HEAPU8[$5 + 94 | 0], $5 + 80 | 0);
  }
  jshSPISetReceive(HEAPU8[$5 + 94 | 0], 0);
  if (HEAPU8[$5 + 95 | 0] != 255) {
   jshPinOutput(HEAPU8[$5 + 95 | 0], 0);
  }
  label$7: {
   if (jsvIsNumeric(HEAP32[$5 + 104 >> 2]) & 1) {
    jsspiSend4bit(HEAPU8[$5 + 94 | 0], jsvGetInteger(HEAP32[$5 + 104 >> 2]) & 255, HEAP32[$5 + 100 >> 2], HEAP32[$5 + 96 >> 2]);
    break label$7;
   }
   label$9: {
    if (jsvIsIterable(HEAP32[$5 + 104 >> 2]) & 1) {
     jshInterruptOff();
     jsvIteratorNew($5 + 16 | 0, HEAP32[$5 + 104 >> 2], 1);
     while (1) {
      if (jsvIteratorHasElement($5 + 16 | 0) & 1) {
       HEAP8[$5 + 15 | 0] = jsvIteratorGetIntegerValue($5 + 16 | 0);
       jsspiSend4bit(HEAPU8[$5 + 94 | 0], HEAPU8[$5 + 15 | 0], HEAP32[$5 + 100 >> 2], HEAP32[$5 + 96 >> 2]);
       jsvIteratorNext($5 + 16 | 0);
       continue;
      }
      break;
     }
     jsvIteratorFree($5 + 16 | 0);
     jshInterruptOn();
     break label$9;
    }
    HEAP32[$5 >> 2] = HEAP32[$5 + 104 >> 2];
    jsExceptionHere(1, 117467, $5);
   }
  }
  jshSPIWait(HEAPU8[$5 + 94 | 0]);
  if (HEAPU8[$5 + 95 | 0] != 255) {
   jshPinOutput(HEAPU8[$5 + 95 | 0], 1);
  }
  jshSPISet16(HEAPU8[$5 + 94 | 0], 0);
 }
 __stack_pointer = $5 + 112 | 0;
}

function jswrap_graphics_setTheme($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 if (jsvIsObject(HEAP32[$2 + 8 >> 2]) & 1) {
  HEAP32[$2 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 8 >> 2], 119034);
  if (HEAP32[$2 + 4 >> 2]) {
   $0 = jswrap_graphics_toColor(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2], 0, 0);
   HEAP8[349444] = $0;
   HEAP8[349445] = $0 >>> 8;
   jsvUnLock(HEAP32[$2 + 4 >> 2]);
  }
  HEAP32[$2 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 8 >> 2], 119038);
  if (HEAP32[$2 + 4 >> 2]) {
   $0 = jswrap_graphics_toColor(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2], 0, 0);
   HEAP8[349446] = $0;
   HEAP8[349447] = $0 >>> 8;
   jsvUnLock(HEAP32[$2 + 4 >> 2]);
  }
  HEAP32[$2 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 8 >> 2], 126283);
  if (HEAP32[$2 + 4 >> 2]) {
   $0 = jswrap_graphics_toColor(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2], 0, 0);
   HEAP8[349448] = $0;
   HEAP8[349449] = $0 >>> 8;
   jsvUnLock(HEAP32[$2 + 4 >> 2]);
  }
  HEAP32[$2 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 8 >> 2], 126287);
  if (HEAP32[$2 + 4 >> 2]) {
   $0 = jswrap_graphics_toColor(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2], 0, 0);
   HEAP8[349450] = $0;
   HEAP8[349451] = $0 >>> 8;
   jsvUnLock(HEAP32[$2 + 4 >> 2]);
  }
  HEAP32[$2 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 8 >> 2], 124630);
  if (HEAP32[$2 + 4 >> 2]) {
   $0 = jswrap_graphics_toColor(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2], 0, 0);
   HEAP8[349452] = $0;
   HEAP8[349453] = $0 >>> 8;
   jsvUnLock(HEAP32[$2 + 4 >> 2]);
  }
  HEAP32[$2 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 8 >> 2], 124634);
  if (HEAP32[$2 + 4 >> 2]) {
   $0 = jswrap_graphics_toColor(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2], 0, 0);
   HEAP8[349454] = $0;
   HEAP8[349455] = $0 >>> 8;
   jsvUnLock(HEAP32[$2 + 4 >> 2]);
  }
  HEAP32[$2 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 8 >> 2], 118129);
  if (HEAP32[$2 + 4 >> 2]) {
   HEAP8[349456] = jsvGetBoolAndUnLock(HEAP32[$2 + 4 >> 2]) & 1;
  }
 }
 $0 = jsvLockAgain(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function jsvGetPathTo_int($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 128 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 120 >> 2] = $0;
 HEAP32[$5 + 116 >> 2] = $1;
 HEAP32[$5 + 112 >> 2] = $2;
 HEAP32[$5 + 108 >> 2] = $3;
 HEAP32[$5 + 104 >> 2] = $4;
 label$1: {
  if (HEAP32[$5 + 112 >> 2] <= 0) {
   HEAP32[$5 + 124 >> 2] = 0;
   break label$1;
  }
  HEAP32[$5 + 100 >> 2] = HEAP32[$5 + 112 >> 2] + 1;
  HEAP32[$5 + 96 >> 2] = 0;
  jsvIteratorNew($5 + 32 | 0, HEAP32[$5 + 120 >> 2], 0);
  while (1) {
   if (jsvIteratorHasElement($5 + 32 | 0) & 1) {
    HEAP32[$5 + 28 >> 2] = jsvIteratorGetValue($5 + 32 | 0);
    if (!(HEAP32[$5 + 120 >> 2] == HEAP32[$5 + 108 >> 2] | HEAP32[$5 + 28 >> 2] != HEAP32[$5 + 116 >> 2])) {
     HEAP32[$5 + 24 >> 2] = jsvAsStringAndUnLock(jsvIteratorGetKey($5 + 32 | 0));
     jsvIteratorFree($5 + 32 | 0);
     HEAP32[$5 + 124 >> 2] = HEAP32[$5 + 24 >> 2];
     break label$1;
    }
    label$6: {
     label$7: {
      if (jsvIsObject(HEAP32[$5 + 28 >> 2]) & 1) {
       break label$7;
      }
      if (jsvIsArray(HEAP32[$5 + 28 >> 2]) & 1) {
       break label$7;
      }
      if (!(jsvIsFunction(HEAP32[$5 + 28 >> 2]) & 1)) {
       break label$6;
      }
     }
     HEAP32[$5 + 16 >> 2] = jsvGetPathTo_int(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 116 >> 2], HEAP32[$5 + 112 >> 2] - 1 | 0, HEAP32[$5 + 108 >> 2], $5 + 20 | 0);
     if (!(!HEAP32[$5 + 16 >> 2] | HEAP32[$5 + 20 >> 2] >= HEAP32[$5 + 100 >> 2])) {
      HEAP32[$5 + 100 >> 2] = HEAP32[$5 + 20 >> 2];
      HEAP32[$5 + 12 >> 2] = jsvIteratorGetKey($5 + 32 | 0);
      jsvUnLock(HEAP32[$5 + 96 >> 2]);
      $0 = jsvIsObject(HEAP32[$5 + 28 >> 2]) & 1;
      $1 = HEAP32[$5 + 12 >> 2];
      HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 16 >> 2];
      HEAP32[$5 >> 2] = $1;
      HEAP32[$5 + 96 >> 2] = jsvVarPrintf($0 ? 112213 : 123042, $5);
      jsvUnLock(HEAP32[$5 + 12 >> 2]);
     }
     jsvUnLock(HEAP32[$5 + 16 >> 2]);
    }
    jsvIteratorNext($5 + 32 | 0);
    continue;
   }
   break;
  }
  jsvIteratorFree($5 + 32 | 0);
  HEAP32[HEAP32[$5 + 104 >> 2] >> 2] = HEAP32[$5 + 100 >> 2];
  HEAP32[$5 + 124 >> 2] = HEAP32[$5 + 96 >> 2];
 }
 __stack_pointer = $5 + 128 | 0;
 return HEAP32[$5 + 124 >> 2];
}

function jsvGetFloat($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 80 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 68 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 68 >> 2]) {
   HEAPF64[$1 + 72 >> 3] = nan;
   break label$1;
  }
  if (jsvIsFloat(HEAP32[$1 + 68 >> 2]) & 1) {
   $0 = HEAP32[$1 + 68 >> 2];
   $2 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
   wasm2js_scratch_store_i32(0, HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24));
   wasm2js_scratch_store_i32(1, $2 | 0);
   HEAPF64[$1 + 72 >> 3] = wasm2js_scratch_load_f64();
   break label$1;
  }
  if (jsvIsIntegerish(HEAP32[$1 + 68 >> 2]) & 1) {
   $0 = HEAP32[$1 + 68 >> 2];
   HEAPF64[$1 + 72 >> 3] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
   break label$1;
  }
  label$5: {
   if (!(jsvIsArray(HEAP32[$1 + 68 >> 2]) & 1)) {
    if (!(jsvIsArrayBuffer(HEAP32[$1 + 68 >> 2]) & 1)) {
     break label$5;
    }
   }
   HEAP32[$1 + 64 >> 2] = jsvGetLength(HEAP32[$1 + 68 >> 2]);
   if (!HEAP32[$1 + 64 >> 2]) {
    HEAPF64[$1 + 72 >> 3] = 0;
    break label$1;
   }
   if (HEAP32[$1 + 64 >> 2] == 1) {
    if (jsvIsArrayBuffer(HEAP32[$1 + 68 >> 2]) & 1) {
     HEAPF64[$1 + 72 >> 3] = jsvGetFloatAndUnLock(jsvArrayBufferGet(HEAP32[$1 + 68 >> 2], 0));
     break label$1;
    }
    HEAPF64[$1 + 72 >> 3] = jsvGetFloatAndUnLock(jsvSkipNameAndUnLock(jsvGetArrayItem(HEAP32[$1 + 68 >> 2], 0)));
    break label$1;
   }
  }
  if (jsvIsString(HEAP32[$1 + 68 >> 2]) & 1) {
   label$11: {
    if ((jsvGetString(HEAP32[$1 + 68 >> 2], $1, 64) | 0) == 64) {
     jsExceptionHere(1, 116539, 0);
     break label$11;
    }
    if (!HEAP8[$1 | 0]) {
     HEAPF64[$1 + 72 >> 3] = 0;
     break label$1;
    }
    if (!strcmp($1, 111581)) {
     HEAPF64[$1 + 72 >> 3] = infinity;
     break label$1;
    }
    if (!strcmp($1, 111580)) {
     HEAPF64[$1 + 72 >> 3] = -infinity;
     break label$1;
    }
    HEAPF64[$1 + 72 >> 3] = stringToFloat($1);
    break label$1;
   }
  }
  HEAPF64[$1 + 72 >> 3] = nan;
 }
 __stack_pointer = $1 + 80 | 0;
 return +HEAPF64[$1 + 72 >> 3];
}

function jsspiPopulateSPIInfo($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 128 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 124 >> 2] = $0;
 HEAP32[$2 + 120 >> 2] = $1;
 jshSPIInitInfo(HEAP32[$2 + 124 >> 2]);
 HEAP32[$2 + 116 >> 2] = 0;
 HEAP32[$2 + 112 >> 2] = HEAPU8[HEAP32[$2 + 124 >> 2] + 8 | 0];
 HEAP32[$2 + 16 >> 2] = 118155;
 HEAP16[$2 + 20 >> 1] = 13;
 HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 124 >> 2] + 5;
 HEAP32[$2 + 28 >> 2] = 117071;
 HEAP16[$2 + 32 >> 1] = 13;
 HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 124 >> 2] + 6;
 HEAP32[$2 + 40 >> 2] = 118356;
 HEAP16[$2 + 44 >> 1] = 13;
 HEAP32[$2 + 48 >> 2] = HEAP32[$2 + 124 >> 2] + 7;
 HEAP32[$2 + 52 >> 2] = 120568;
 HEAP16[$2 + 56 >> 1] = 10;
 HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 124 >> 2];
 HEAP32[$2 + 64 >> 2] = 120456;
 HEAP16[$2 + 68 >> 1] = 10;
 HEAP32[$2 + 72 >> 2] = $2 + 112;
 HEAP32[$2 + 76 >> 2] = 116533;
 HEAP16[$2 + 80 >> 1] = 5;
 HEAP32[$2 + 84 >> 2] = $2 + 116;
 HEAP32[$2 + 88 >> 2] = 115121;
 HEAP16[$2 + 92 >> 1] = 10;
 HEAP32[$2 + 96 >> 2] = HEAP32[$2 + 124 >> 2] + 10;
 HEAP8[$2 + 15 | 0] = 1;
 if (jsvReadConfigObject(HEAP32[$2 + 120 >> 2], $2 + 16 | 0, 7) & 1) {
  HEAP8[HEAP32[$2 + 124 >> 2] + 8 | 0] = HEAP32[$2 + 112 >> 2] & 3;
  label$2: {
   label$3: {
    if (!(jsvIsString(HEAP32[$2 + 116 >> 2]) & 1)) {
     break label$3;
    }
    if (!(jsvIsStringEqual(HEAP32[$2 + 116 >> 2], 122866) & 1)) {
     break label$3;
    }
    HEAP8[HEAP32[$2 + 124 >> 2] + 9 | 0] = 1;
    break label$2;
   }
   label$4: {
    label$5: {
     if (!(jsvIsString(HEAP32[$2 + 116 >> 2]) & 1)) {
      break label$5;
     }
     if (!(jsvIsStringEqual(HEAP32[$2 + 116 >> 2], 122870) & 1)) {
      break label$5;
     }
     HEAP8[HEAP32[$2 + 124 >> 2] + 9 | 0] = 0;
     break label$4;
    }
    if (!(jsvIsUndefined(HEAP32[$2 + 116 >> 2]) & 1)) {
     jsExceptionHere(1, 143404, 0);
     HEAP8[$2 + 15 | 0] = 0;
    }
   }
  }
  $0 = HEAP32[$2 + 124 >> 2];
  if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) < 100) {
   jsExceptionHere(1, 119703, 0);
   HEAP8[$2 + 15 | 0] = 0;
  }
 }
 jsvUnLock(HEAP32[$2 + 116 >> 2]);
 __stack_pointer = $2 + 128 | 0;
 return HEAP8[$2 + 15 | 0] & 1;
}

function jsserialGetSendFunction($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP32[$3 + 32 >> 2] = $2;
 HEAP8[$3 + 31 | 0] = jsiGetDeviceFromClass(HEAP32[$3 + 40 >> 2]);
 label$1: {
  if (!(HEAPU8[$3 + 31 | 0] < 17 | HEAPU8[$3 + 31 | 0] > 22)) {
   label$3: {
    if (HEAPU8[$3 + 31 | 0] < 22 | HEAPU8[$3 + 31 | 0] > 22) {
     break label$3;
    }
    if (jshIsDeviceInitialised(HEAPU8[$3 + 31 | 0]) & 1) {
     break label$3;
    }
    jshUSARTInitInfo($3 + 16 | 0);
    jshUSARTSetup(HEAPU8[$3 + 31 | 0], $3 + 16 | 0);
   }
   HEAP32[HEAP32[$3 + 36 >> 2] >> 2] = 559;
   HEAP8[HEAP32[$3 + 32 >> 2]] = HEAPU8[$3 + 31 | 0];
   HEAP8[$3 + 47 | 0] = 1;
   break label$1;
  }
  if (!HEAPU8[$3 + 31 | 0]) {
   HEAP32[$3 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 40 >> 2], 119685);
   HEAP32[$3 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 40 >> 2], 115339);
   jsserialPopulateUSARTInfo($3 + 16 | 0, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
   jsvUnLock(HEAP32[$3 + 8 >> 2]);
   jsvUnLock(HEAP32[$3 + 12 >> 2]);
   HEAP32[HEAP32[$3 + 36 >> 2] >> 2] = 560;
   $0 = HEAP32[$3 + 20 >> 2];
   $1 = HEAP32[$3 + 16 >> 2];
   $4 = $1;
   $2 = HEAP32[$3 + 32 >> 2];
   $1 = $2;
   HEAP8[$1 | 0] = $4;
   HEAP8[$1 + 1 | 0] = $4 >>> 8;
   HEAP8[$1 + 2 | 0] = $4 >>> 16;
   HEAP8[$1 + 3 | 0] = $4 >>> 24;
   HEAP8[$1 + 4 | 0] = $0;
   HEAP8[$1 + 5 | 0] = $0 >>> 8;
   HEAP8[$1 + 6 | 0] = $0 >>> 16;
   HEAP8[$1 + 7 | 0] = $0 >>> 24;
   $1 = HEAPU8[$3 + 25 | 0] | HEAPU8[$3 + 26 | 0] << 8 | (HEAPU8[$3 + 27 | 0] << 16 | HEAPU8[$3 + 28 | 0] << 24);
   $0 = HEAPU8[$3 + 21 | 0] | HEAPU8[$3 + 22 | 0] << 8 | (HEAPU8[$3 + 23 | 0] << 16 | HEAPU8[$3 + 24 | 0] << 24);
   $4 = $0;
   $0 = $2;
   HEAP8[$0 + 5 | 0] = $4;
   HEAP8[$0 + 6 | 0] = $4 >>> 8;
   HEAP8[$0 + 7 | 0] = $4 >>> 16;
   HEAP8[$0 + 8 | 0] = $4 >>> 24;
   HEAP8[$0 + 9 | 0] = $1;
   HEAP8[$0 + 10 | 0] = $1 >>> 8;
   HEAP8[$0 + 11 | 0] = $1 >>> 16;
   HEAP8[$0 + 12 | 0] = $1 >>> 24;
   HEAP8[$3 + 47 | 0] = 1;
   break label$1;
  }
  HEAP8[$3 + 47 | 0] = 0;
 }
 __stack_pointer = $3 + 48 | 0;
 return HEAP8[$3 + 47 | 0] & 1;
}

function _jswrap_promise_resolve_or_reject_chain($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP8[$3 + 39 | 0] = $2;
 HEAP32[$3 + 32 >> 2] = HEAP8[$3 + 39 | 0] & 1 ? 117579 : 113298;
 label$1: {
  if (_jswrap_promise_is_promise(HEAP32[$3 + 40 >> 2]) & 1) {
   jsExceptionHere(1, 121114, 0);
   break label$1;
  }
  HEAP32[$3 + 28 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 32 >> 2]);
  if (!HEAP32[$3 + 28 >> 2]) {
   HEAP32[$3 + 24 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 44 >> 2], 117569);
   while (1) {
    if (HEAP32[$3 + 24 >> 2]) {
     HEAP32[$3 + 28 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 32 >> 2]);
     if (HEAP32[$3 + 28 >> 2]) {
      _jswrap_promise_resolve_or_reject(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 40 >> 2], HEAP32[$3 + 28 >> 2]);
      jsvUnLock2(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2]);
      break label$1;
     } else {
      HEAP32[$3 + 20 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 24 >> 2], 117569);
      jsvUnLock(HEAP32[$3 + 24 >> 2]);
      HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 20 >> 2];
      continue;
     }
    }
    break;
   }
  }
  if (HEAP8[$3 + 39 | 0] & 1) {
   jsvObjectSetChild(HEAP32[$3 + 44 >> 2], 120994, HEAP32[$3 + 40 >> 2]);
  }
  if (HEAP32[$3 + 28 >> 2]) {
   _jswrap_promise_resolve_or_reject(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 40 >> 2], HEAP32[$3 + 28 >> 2]);
   jsvUnLock(HEAP32[$3 + 28 >> 2]);
   break label$1;
  }
  if (!(HEAP8[$3 + 39 | 0] & 1)) {
   HEAP32[$3 + 16 >> 2] = jsvFindChildFromString(HEAP32[$3 + 44 >> 2], 120994);
   if (!HEAP32[$3 + 16 >> 2]) {
    HEAP32[$3 >> 2] = HEAP32[$3 + 40 >> 2];
    jsExceptionHere(1, 112280, $3);
    HEAP32[$3 + 12 >> 2] = 0;
    label$12: {
     if (!(jsvIsObject(HEAP32[$3 + 40 >> 2]) & 1)) {
      break label$12;
     }
     $0 = jsvObjectGetChildIfExists(HEAP32[$3 + 40 >> 2], 118167);
     HEAP32[$3 + 12 >> 2] = $0;
     if (!$0) {
      break label$12;
     }
     jsvObjectSetChildAndUnLock(HEAP32[86751], 120557, HEAP32[$3 + 12 >> 2]);
    }
   }
   jsvUnLock(HEAP32[$3 + 16 >> 2]);
  }
 }
 __stack_pointer = $3 + 48 | 0;
}

function jspeiFindChildFromStringInParents($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1: {
  label$2: {
   if (jsvIsObject(HEAP32[$2 + 40 >> 2]) & 1) {
    HEAP32[$2 + 32 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 40 >> 2], 123007);
    if (!HEAP32[$2 + 32 >> 2]) {
     HEAP32[$2 + 32 >> 2] = jspFindPrototypeFor(113254);
    }
    label$5: {
     if (!(!HEAP32[$2 + 32 >> 2] | HEAP32[$2 + 32 >> 2] == HEAP32[$2 + 40 >> 2])) {
      HEAP32[$2 + 28 >> 2] = jsvFindChildFromString(HEAP32[$2 + 32 >> 2], HEAP32[$2 + 36 >> 2]);
      if (!HEAP32[$2 + 28 >> 2]) {
       HEAP32[$2 + 28 >> 2] = jspeiFindChildFromStringInParents(HEAP32[$2 + 32 >> 2], HEAP32[$2 + 36 >> 2]);
      }
      jsvUnLock(HEAP32[$2 + 32 >> 2]);
      if (HEAP32[$2 + 28 >> 2]) {
       HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 28 >> 2];
       break label$1;
      }
      break label$5;
     }
     jsvUnLock(HEAP32[$2 + 32 >> 2]);
    }
    break label$2;
   }
   HEAP32[$2 + 24 >> 2] = jswGetBasicObjectName(HEAP32[$2 + 40 >> 2]);
   while (1) {
    if (HEAP32[$2 + 24 >> 2]) {
     HEAP32[$2 + 20 >> 2] = jsvFindChildFromString(HEAP32[86750], HEAP32[$2 + 24 >> 2]);
     if (!HEAP32[$2 + 20 >> 2]) {
      HEAP32[$2 + 20 >> 2] = jspNewPrototype(HEAP32[$2 + 24 >> 2], 1);
     }
     if (HEAP32[$2 + 20 >> 2]) {
      HEAP32[$2 + 16 >> 2] = 0;
      HEAP32[$2 + 12 >> 2] = jsvSkipNameAndUnLock(HEAP32[$2 + 20 >> 2]);
      if (jsvHasChildren(HEAP32[$2 + 12 >> 2]) & 1) {
       HEAP32[$2 + 8 >> 2] = jspGetNamedField(HEAP32[$2 + 12 >> 2], 119810, 0);
       if (HEAP32[$2 + 8 >> 2]) {
        HEAP32[$2 + 16 >> 2] = jsvFindChildFromString(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 36 >> 2]);
        jsvUnLock(HEAP32[$2 + 8 >> 2]);
       }
      }
      jsvUnLock(HEAP32[$2 + 12 >> 2]);
      if (HEAP32[$2 + 16 >> 2]) {
       HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 16 >> 2];
       break label$1;
      }
     }
     HEAP32[$2 + 24 >> 2] = jswGetBasicObjectPrototypeName(HEAP32[$2 + 24 >> 2]);
     continue;
    }
    break;
   }
  }
  HEAP32[$2 + 44 >> 2] = 0;
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function jswrap_spi_write($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 80 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 76 >> 2] = $0;
 HEAP32[$2 + 72 >> 2] = $1;
 label$1: {
  if (!(jsvIsObject(HEAP32[$2 + 76 >> 2]) & 1)) {
   break label$1;
  }
  HEAP8[$2 + 71 | 0] = jsiGetDeviceFromClass(HEAP32[$2 + 76 >> 2]);
  if (!(jsspiGetSendFunction(HEAP32[$2 + 76 >> 2], $2 - -64 | 0, $2 + 48 | 0) & 1)) {
   break label$1;
  }
  HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 64 >> 2];
  $0 = HEAP32[$2 + 52 >> 2];
  $1 = HEAP32[$2 + 48 >> 2];
  $3 = $1;
  $4 = $2 + 24 | 0;
  $1 = $4;
  HEAP8[$1 + 4 | 0] = $3;
  HEAP8[$1 + 5 | 0] = $3 >>> 8;
  HEAP8[$1 + 6 | 0] = $3 >>> 16;
  HEAP8[$1 + 7 | 0] = $3 >>> 24;
  HEAP8[$1 + 8 | 0] = $0;
  HEAP8[$1 + 9 | 0] = $0 >>> 8;
  HEAP8[$1 + 10 | 0] = $0 >>> 16;
  HEAP8[$1 + 11 | 0] = $0 >>> 24;
  $1 = HEAPU16[$2 + 58 >> 1] | HEAPU16[$2 + 60 >> 1] << 16;
  $0 = HEAPU16[$2 + 54 >> 1] | HEAPU16[$2 + 56 >> 1] << 16;
  $3 = $0;
  $0 = $4;
  HEAP8[$0 + 10 | 0] = $3;
  HEAP8[$0 + 11 | 0] = $3 >>> 8;
  HEAP8[$0 + 12 | 0] = $3 >>> 16;
  HEAP8[$0 + 13 | 0] = $3 >>> 24;
  HEAP8[$0 + 14 | 0] = $1;
  HEAP8[$0 + 15 | 0] = $1 >>> 8;
  HEAP8[$0 + 16 | 0] = $1 >>> 16;
  HEAP8[$0 + 17 | 0] = $1 >>> 24;
  HEAP8[$2 + 23 | 0] = 255;
  HEAP32[$2 + 16 >> 2] = jsvGetArrayLength(HEAP32[$2 + 72 >> 2]);
  if (HEAP32[$2 + 16 >> 2] > 0) {
   HEAP32[$2 + 12 >> 2] = jsvGetArrayItem(HEAP32[$2 + 72 >> 2], HEAP32[$2 + 16 >> 2] - 1 | 0);
   if (jsvIsPin(HEAP32[$2 + 12 >> 2]) & 1) {
    HEAP8[$2 + 23 | 0] = jshGetPinFromVar(HEAP32[$2 + 12 >> 2]);
    jsvUnLock(jsvArrayPop(HEAP32[$2 + 72 >> 2]));
   }
   jsvUnLock(HEAP32[$2 + 12 >> 2]);
  }
  if (!(HEAPU8[$2 + 71 | 0] < 25 | HEAPU8[$2 + 71 | 0] > 25)) {
   jshSPISetReceive(HEAPU8[$2 + 71 | 0], 0);
  }
  if (HEAPU8[$2 + 23 | 0] != 255) {
   jshPinOutput(HEAPU8[$2 + 23 | 0], 0);
  }
  jsvIterateBufferCallback(HEAP32[$2 + 72 >> 2], 632, $2 + 24 | 0);
  if (!(HEAPU8[$2 + 71 | 0] < 25 | HEAPU8[$2 + 71 | 0] > 25)) {
   jshSPIWait(HEAPU8[$2 + 71 | 0]);
  }
  if (HEAPU8[$2 + 23 | 0] == 255) {
   break label$1;
  }
  jshPinOutput(HEAPU8[$2 + 23 | 0], 1);
 }
 __stack_pointer = $2 + 80 | 0;
}

function jswrap_encodeURIComponent($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 112 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 104 >> 2] = $0;
 HEAP32[$1 + 100 >> 2] = jsvAsString(HEAP32[$1 + 104 >> 2]);
 label$1: {
  if (!HEAP32[$1 + 100 >> 2]) {
   HEAP32[$1 + 108 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 96 >> 2] = jsvNewFromEmptyString_6();
  if (HEAP32[$1 + 96 >> 2]) {
   jsvStringIteratorNew($1 + 56 | 0, HEAP32[$1 + 100 >> 2], 0);
   jsvStringIteratorNew($1 + 16 | 0, HEAP32[$1 + 96 >> 2], 0);
   while (1) {
    if (jsvStringIteratorHasChar_6($1 + 56 | 0) & 1) {
     HEAP8[$1 + 15 | 0] = jsvStringIteratorGetCharAndNext($1 + 56 | 0);
     label$6: {
      label$7: {
       label$8: {
        if (isAlpha(HEAP8[$1 + 15 | 0]) & 1) {
         break label$8;
        }
        if (isNumeric(HEAP8[$1 + 15 | 0]) & 1 | HEAP8[$1 + 15 | 0] == 45 | (HEAP8[$1 + 15 | 0] == 46 | HEAP8[$1 + 15 | 0] == 33)) {
         break label$8;
        }
        if (HEAP8[$1 + 15 | 0] == 126 | HEAP8[$1 + 15 | 0] == 42 | (HEAP8[$1 + 15 | 0] == 39 | HEAP8[$1 + 15 | 0] == 40)) {
         break label$8;
        }
        if (HEAP8[$1 + 15 | 0] != 41) {
         break label$7;
        }
       }
       jsvStringIteratorAppend($1 + 16 | 0, HEAP8[$1 + 15 | 0]);
       break label$6;
      }
      jsvStringIteratorAppend($1 + 16 | 0, 37);
      HEAP32[$1 + 8 >> 2] = HEAP8[$1 + 15 | 0] >>> 4;
      $2 = $1 + 16 | 0;
      if (HEAPU32[$1 + 8 >> 2] > 9) {
       $0 = HEAP32[$1 + 8 >> 2] + 55 | 0;
      } else {
       $0 = HEAP32[$1 + 8 >> 2] + 48 | 0;
      }
      jsvStringIteratorAppend($2, $0 << 24 >> 24);
      HEAP32[$1 + 8 >> 2] = HEAP8[$1 + 15 | 0] & 15;
      $2 = $1 + 16 | 0;
      if (HEAPU32[$1 + 8 >> 2] > 9) {
       $0 = HEAP32[$1 + 8 >> 2] + 55 | 0;
      } else {
       $0 = HEAP32[$1 + 8 >> 2] + 48 | 0;
      }
      jsvStringIteratorAppend($2, $0 << 24 >> 24);
     }
     continue;
    }
    break;
   }
   jsvStringIteratorFree_7($1 + 16 | 0);
   jsvStringIteratorFree_7($1 + 56 | 0);
  }
  jsvUnLock(HEAP32[$1 + 100 >> 2]);
  HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 96 >> 2];
 }
 __stack_pointer = $1 + 112 | 0;
 return HEAP32[$1 + 108 >> 2];
}

function jswrap_interface_clearWatch($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer + -64 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 60 >> 2] = $0;
 label$1: {
  label$2: {
   if (!(jsvIsUndefined(HEAP32[$1 + 60 >> 2]) & 1)) {
    if (jsvGetArrayLength(HEAP32[$1 + 60 >> 2])) {
     break label$2;
    }
   }
   HEAP32[$1 + 56 >> 2] = jsvLock(HEAPU16[173533]);
   jsvObjectIteratorNew($1 + 48 | 0, HEAP32[$1 + 56 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue_15($1 + 48 | 0) & 1) {
     HEAP32[$1 + 44 >> 2] = jsvObjectIteratorGetValue_13($1 + 48 | 0);
     HEAP32[$1 + 40 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 44 >> 2], 117541);
     HEAP8[$1 + 39 | 0] = jshGetPinFromVar(HEAP32[$1 + 40 >> 2]);
     if (!(jshGetPinShouldStayWatched(HEAPU8[$1 + 39 | 0]) & 1)) {
      jshPinWatch(HEAPU8[$1 + 39 | 0], 0, 0);
     }
     jsvUnLock2(HEAP32[$1 + 40 >> 2], HEAP32[$1 + 44 >> 2]);
     jsvObjectIteratorNext($1 + 48 | 0);
     continue;
    }
    break;
   }
   jsvObjectIteratorFree_15($1 + 48 | 0);
   jsvRemoveAllChildren(HEAP32[$1 + 56 >> 2]);
   jsvUnLock(HEAP32[$1 + 56 >> 2]);
   break label$1;
  }
  HEAP32[$1 + 32 >> 2] = jsvGetArrayItem(HEAP32[$1 + 60 >> 2], 0);
  if (jsvIsUndefined(HEAP32[$1 + 32 >> 2]) & 1) {
   jsExceptionHere(1, 122047, 0);
   break label$1;
  }
  HEAP32[$1 + 28 >> 2] = jsvLock(HEAPU16[173533]);
  HEAP32[$1 + 24 >> 2] = jsvFindChildFromVar(HEAP32[$1 + 28 >> 2], HEAP32[$1 + 32 >> 2], 0);
  jsvUnLock(HEAP32[$1 + 28 >> 2]);
  label$8: {
   if (HEAP32[$1 + 24 >> 2]) {
    HEAP32[$1 + 20 >> 2] = jsvSkipName(HEAP32[$1 + 24 >> 2]);
    HEAP8[$1 + 19 | 0] = jshGetPinFromVarAndUnLock(jsvObjectGetChildIfExists(HEAP32[$1 + 20 >> 2], 117541));
    jsvUnLock(HEAP32[$1 + 20 >> 2]);
    HEAP32[$1 + 12 >> 2] = jsvLock(HEAPU16[173533]);
    jsvRemoveChildAndUnLock(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 24 >> 2]);
    jsvUnLock(HEAP32[$1 + 12 >> 2]);
    if (!(jsiIsWatchingPin(HEAPU8[$1 + 19 | 0]) & 1)) {
     jshPinWatch(HEAPU8[$1 + 19 | 0], 0, 0);
    }
    break label$8;
   }
   HEAP32[$1 >> 2] = HEAP32[$1 + 32 >> 2];
   jsExceptionHere(1, 112256, $1);
  }
  jsvUnLock(HEAP32[$1 + 32 >> 2]);
 }
 __stack_pointer = $1 - -64 | 0;
}

function _jswrap_i2c_readFrom($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $6 = __stack_pointer - 112 | 0;
 $5 = $6;
 __stack_pointer = $5;
 HEAP32[$5 + 104 >> 2] = $0;
 HEAP8[$5 + 103 | 0] = $1;
 HEAP32[$5 + 96 >> 2] = $2;
 HEAP8[$5 + 95 | 0] = $3;
 HEAP32[$5 + 88 >> 2] = $4;
 label$1: {
  if (HEAP32[$5 + 88 >> 2] <= 0) {
   HEAP32[$5 + 108 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$5 + 88 >> 2] + 256 >>> 0 > jsuGetFreeStack() >>> 0) {
   jsExceptionHere(1, 122957, 0);
   HEAP32[$5 + 108 >> 2] = 0;
   break label$1;
  }
  $6 = $6 - (HEAP32[$5 + 88 >> 2] + 15 & -16) | 0;
  __stack_pointer = $6;
  HEAP32[$5 + 84 >> 2] = $6;
  label$4: {
   if (!(HEAPU8[$5 + 103 | 0] < 26 | HEAPU8[$5 + 103 | 0] > 26)) {
    jshI2CRead(HEAPU8[$5 + 103 | 0], HEAP32[$5 + 96 >> 2] & 255, HEAP32[$5 + 88 >> 2], HEAP32[$5 + 84 >> 2], HEAP8[$5 + 95 | 0] & 1);
    break label$4;
   }
   label$6: {
    if (!HEAPU8[$5 + 103 | 0]) {
     HEAP32[$5 + 68 >> 2] = jsvObjectGetChildIfExists(HEAP32[$5 + 104 >> 2], 115339);
     if (jsi2cPopulateI2CInfo($5 + 72 | 0, HEAP32[$5 + 68 >> 2]) & 1) {
      HEAP8[$5 + 78 | 0] = jsvObjectGetBoolChild(HEAP32[$5 + 104 >> 2], 121290) & 1;
      jsi2cRead($5 + 72 | 0, HEAP32[$5 + 96 >> 2] & 255, HEAP32[$5 + 88 >> 2], HEAP32[$5 + 84 >> 2], HEAP8[$5 + 95 | 0] & 1);
     }
     jsvUnLock2(jsvObjectSetChild(HEAP32[$5 + 104 >> 2], 121290, jsvNewFromBool(HEAP8[$5 + 78 | 0] & 1)), HEAP32[$5 + 68 >> 2]);
     break label$6;
    }
    HEAP32[$5 + 108 >> 2] = 0;
    break label$1;
   }
  }
  HEAP32[$5 + 64 >> 2] = jsvNewTypedArray(1, HEAP32[$5 + 88 >> 2]);
  if (HEAP32[$5 + 64 >> 2]) {
   jsvArrayBufferIteratorNew($5 + 8 | 0, HEAP32[$5 + 64 >> 2], 0);
   HEAP32[$5 + 4 >> 2] = 0;
   while (1) {
    if (HEAPU32[$5 + 4 >> 2] < HEAPU32[$5 + 88 >> 2]) {
     jsvArrayBufferIteratorSetByteValue($5 + 8 | 0, HEAP8[HEAP32[$5 + 84 >> 2] + HEAP32[$5 + 4 >> 2] | 0]);
     jsvArrayBufferIteratorNext($5 + 8 | 0);
     HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] + 1;
     continue;
    }
    break;
   }
   jsvArrayBufferIteratorFree($5 + 8 | 0);
  }
  HEAP32[$5 + 108 >> 2] = HEAP32[$5 + 64 >> 2];
 }
 __stack_pointer = $5 + 112 | 0;
 return HEAP32[$5 + 108 >> 2];
}

function jslPrintTokenisedChar($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 96 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 92 >> 2] = $0;
 HEAP32[$6 + 88 >> 2] = $1;
 HEAP32[$6 + 84 >> 2] = $2;
 HEAP32[$6 + 80 >> 2] = $3;
 HEAP32[$6 + 76 >> 2] = $4;
 HEAP32[$6 + 72 >> 2] = $5;
 HEAP8[$6 + 71 | 0] = jsvStringIteratorGetCharAndNext(HEAP32[$6 + 92 >> 2]);
 label$1: {
  if (!(HEAPU8[$6 + 71 | 0] != 209 & HEAPU8[$6 + 71 | 0] != 210)) {
   HEAP32[$6 + 64 >> 2] = jsvStringIteratorGetCharAndNext(HEAP32[$6 + 92 >> 2]) & 255;
   if (HEAPU8[$6 + 71 | 0] == 210) {
    $0 = HEAP32[$6 + 80 >> 2];
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
    HEAP32[$6 + 64 >> 2] = (jsvStringIteratorGetCharAndNext(HEAP32[$6 + 92 >> 2]) & 255) << 8 | HEAP32[$6 + 64 >> 2];
   }
   $0 = HEAP32[$6 + 80 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 2;
   FUNCTION_TABLE[HEAP32[$6 + 76 >> 2]](143507, HEAP32[$6 + 72 >> 2]);
   while (1) {
    $0 = HEAP32[$6 + 64 >> 2];
    HEAP32[$6 + 64 >> 2] = $0 - 1;
    if ($0) {
     HEAP8[$6 + 63 | 0] = jsvStringIteratorGetCharAndNext(HEAP32[$6 + 92 >> 2]);
     HEAP32[$6 + 56 >> 2] = escapeCharacter(HEAP8[$6 + 63 | 0], 0, 0);
     $0 = HEAP32[$6 + 80 >> 2];
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     FUNCTION_TABLE[HEAP32[$6 + 76 >> 2]](HEAP32[$6 + 56 >> 2], HEAP32[$6 + 72 >> 2]);
     continue;
    }
    break;
   }
   FUNCTION_TABLE[HEAP32[$6 + 76 >> 2]](143507, HEAP32[$6 + 72 >> 2]);
   break label$1;
  }
  if (jslNeedSpaceBetween(HEAPU8[HEAP32[$6 + 88 >> 2]], HEAPU8[$6 + 71 | 0]) & 1) {
   $0 = HEAP32[$6 + 84 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
   FUNCTION_TABLE[HEAP32[$6 + 76 >> 2]](144421, HEAP32[$6 + 72 >> 2]);
  }
  jslFunctionCharAsString(HEAPU8[$6 + 71 | 0], $6 + 16 | 0, 32);
  HEAP32[$6 + 12 >> 2] = strlen($6 + 16 | 0);
  if (HEAP32[$6 + 12 >> 2]) {
   $0 = HEAP32[$6 + 84 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + (HEAP32[$6 + 12 >> 2] - 1 | 0);
  }
  FUNCTION_TABLE[HEAP32[$6 + 76 >> 2]]($6 + 16 | 0, HEAP32[$6 + 72 >> 2]);
  $0 = HEAP32[$6 + 80 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
  HEAP8[HEAP32[$6 + 88 >> 2]] = HEAPU8[$6 + 71 | 0];
 }
 __stack_pointer = $6 + 96 | 0;
}

function jsvReplaceWith($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP32[$2 + 40 >> 2] = $1;
 label$1: {
  if (jsvIsArrayBufferName(HEAP32[$2 + 44 >> 2]) & 1) {
   HEAP32[$2 + 36 >> 2] = jsvGetInteger(HEAP32[$2 + 44 >> 2]);
   HEAP32[$2 + 32 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$2 + 44 >> 2]) & 65535);
   jsvArrayBufferSet(HEAP32[$2 + 32 >> 2], HEAP32[$2 + 36 >> 2], HEAP32[$2 + 40 >> 2]);
   jsvUnLock(HEAP32[$2 + 32 >> 2]);
   break label$1;
  }
  if (!(jsvIsName(HEAP32[$2 + 44 >> 2]) & 1)) {
   HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 44 >> 2];
   jsExceptionHere(1, 114556, $2 + 16 | 0);
   break label$1;
  }
  if (jsvIsConstant(HEAP32[$2 + 44 >> 2]) & 1) {
   jsExceptionHere(3, 112977, 0);
   break label$1;
  }
  HEAP32[$2 + 28 >> 2] = jsvGetValueOfName(HEAP32[$2 + 44 >> 2]);
  if (jsvIsGetterOrSetter(HEAP32[$2 + 28 >> 2]) & 1) {
   label$6: {
    if (jsvIsNewChild(HEAP32[$2 + 44 >> 2]) & 1) {
     $0 = jsvLock(jsvGetNextSibling(HEAP32[$2 + 44 >> 2]) & 65535);
     break label$6;
    }
    $0 = 0;
   }
   HEAP32[$2 + 24 >> 2] = $0;
   jsvExecuteSetter(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 40 >> 2]);
   jsvUnLock2(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2]);
   break label$1;
  }
  jsvUnLock(HEAP32[$2 + 28 >> 2]);
  jsvSetValueOfName(HEAP32[$2 + 44 >> 2], HEAP32[$2 + 40 >> 2]);
  if (!(jsvIsNewChild(HEAP32[$2 + 44 >> 2]) & 1)) {
   break label$1;
  }
  HEAP32[$2 + 20 >> 2] = jsvLock(jsvGetNextSibling(HEAP32[$2 + 44 >> 2]) & 65535);
  if (!(jsvIsString(HEAP32[$2 + 20 >> 2]) & 1)) {
   label$9: {
    if (!(jsvHasChildren(HEAP32[$2 + 20 >> 2]) & 1)) {
     $0 = HEAP32[$2 + 44 >> 2];
     HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 20 >> 2];
     HEAP32[$2 >> 2] = $0;
     jsExceptionHere(1, 114449, $2);
     break label$9;
    }
    jsvUnRef(HEAP32[$2 + 20 >> 2]);
    jsvSetNextSibling(HEAP32[$2 + 44 >> 2], 0);
    jsvUnRef(HEAP32[$2 + 20 >> 2]);
    jsvSetPrevSibling(HEAP32[$2 + 44 >> 2], 0);
    jsvAddName(HEAP32[$2 + 20 >> 2], HEAP32[$2 + 44 >> 2]);
   }
  }
  jsvUnLock(HEAP32[$2 + 20 >> 2]);
 }
 __stack_pointer = $2 + 48 | 0;
}

function tflite___28anonymous_20namespace_29__AllocationInfoBuilder__GetOfflinePlannedOffsets_28tflite__Model_20const__2c_20int_20const___29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer + -64 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 56 >> 2] = $0;
 HEAP32[$3 + 52 >> 2] = $1;
 HEAP32[$3 + 48 >> 2] = $2;
 $0 = HEAP32[$3 + 56 >> 2];
 label$1: {
  if (tflite__Model__metadata_28_29_20const(HEAP32[$3 + 52 >> 2])) {
   HEAP32[$3 + 44 >> 2] = 0;
   while (1) {
    if (HEAPU32[$3 + 44 >> 2] < flatbuffers__Vector_flatbuffers__Offset_tflite__Metadata____size_28_29_20const(tflite__Model__metadata_28_29_20const(HEAP32[$3 + 52 >> 2])) >>> 0) {
     HEAP32[$3 + 40 >> 2] = flatbuffers__Vector_flatbuffers__Offset_tflite__Metadata____Get_28unsigned_20int_29_20const(tflite__Model__metadata_28_29_20const(HEAP32[$3 + 52 >> 2]), HEAP32[$3 + 44 >> 2]);
     if (!strncmp(flatbuffers__String__c_str_28_29_20const(tflite__Metadata__name_28_29_20const(HEAP32[$3 + 40 >> 2])), 172752, 23)) {
      HEAP32[$3 + 36 >> 2] = tflite__Model__buffers_28_29_20const(HEAP32[$3 + 52 >> 2]);
      HEAP32[$3 + 32 >> 2] = flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer____operator_5b_5d_28unsigned_20int_29_20const(HEAP32[$3 + 36 >> 2], tflite__Metadata__buffer_28_29_20const(HEAP32[$3 + 40 >> 2]));
      HEAP32[$3 + 28 >> 2] = tflite__Buffer__data_28_29_20const(HEAP32[$3 + 32 >> 2]);
      HEAP32[$3 + 24 >> 2] = flatbuffers__Vector_unsigned_20char___data_28_29_20const(HEAP32[$3 + 28 >> 2]);
      HEAP32[$3 + 20 >> 2] = HEAP32[HEAP32[$3 + 24 >> 2] + 8 >> 2];
      HEAP32[HEAP32[$3 + 48 >> 2] >> 2] = HEAP32[$3 + 24 >> 2] + 12;
      if (HEAP32[$0 + 8 >> 2] != HEAP32[$3 + 20 >> 2]) {
       $1 = HEAP32[$0 >> 2];
       $2 = HEAP32[$3 + 20 >> 2];
       HEAP32[$3 + 4 >> 2] = HEAP32[$0 + 8 >> 2];
       HEAP32[$3 >> 2] = $2;
       tflite__ErrorReporter__Report_28char_20const__2c_20____29($1, 146780, $3);
       HEAP32[$3 + 60 >> 2] = 1;
       break label$1;
      }
     }
     HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 44 >> 2] + 1;
     continue;
    }
    break;
   }
  }
  HEAP32[$3 + 60 >> 2] = 0;
 }
 __stack_pointer = $3 - -64 | 0;
 return HEAP32[$3 + 60 >> 2];
}

function btnHandlerCommon($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP8[$3 + 11 | 0] = $1;
 HEAP8[$3 + 10 | 0] = $2;
 label$1: {
  if (HEAP32[93418] ? 1 : HEAP32[93415] | HEAP32[93417]) {
   if (!(!((HEAP32[$3 + 12 >> 2] == 1 ? HEAP32[93413] & 2 : 0) | (HEAP32[$3 + 12 >> 2] == 2 ? HEAP32[93413] & 4 : 0)) & (!(HEAP32[93413] & 8) | HEAP32[$3 + 12 >> 2] != 3))) {
    if (HEAP8[$3 + 11 | 0] & 1) {
     HEAP8[$3 + 9 | 0] = wakeUpBangle(117122) & 1;
     if (HEAP8[$3 + 9 | 0] & 1) {
      HEAP16[186838] = 0;
      HEAP8[373682] = HEAP32[$3 + 12 >> 2];
      $4 = jshGetSystemTime();
      $2 = i64toi32_i32$HIGH_BITS;
      $0 = $2;
      $2 = jshGetTimeFromMilliseconds(100);
      $1 = $2;
      $4 = $2 + $4 | 0;
      $2 = i64toi32_i32$HIGH_BITS;
      $0 = $2 + $0 | 0;
      HEAP32[93422] = $4;
      $0 = $4 >>> 0 < $1 >>> 0 ? $0 + 1 | 0 : $0;
      HEAP32[93423] = $0;
      break label$1;
     }
    }
   }
  }
  HEAP8[$3 + 8 | 0] = 1;
  label$10: {
   if (HEAP32[93413] & 262144) {
    HEAP8[$3 + 8 | 0] = 0;
    break label$10;
   }
   HEAP16[186838] = 0;
  }
  if (HEAP32[$3 + 12 >> 2] == 1) {
   HEAP16[186848] = 0;
  }
  $0 = jshGetSystemTime();
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
  if (HEAP32[$3 + 12 >> 2] == HEAP8[373682]) {
   $0 = HEAP32[$3 + 4 >> 2];
   $2 = $0;
   $0 = HEAP32[93422];
   $1 = $0;
   $0 = HEAP32[93423];
   if (!(HEAP8[$3 + 11 | 0] & 1 & (($0 | 0) <= ($2 | 0) & $1 >>> 0 <= HEAPU32[$3 >> 2] | ($0 | 0) < ($2 | 0)))) {
    $1 = HEAP32[$3 >> 2];
    $2 = HEAP32[$3 + 4 >> 2];
    $0 = jshGetTimeFromMilliseconds(100);
    $4 = i64toi32_i32$HIGH_BITS + $2 | 0;
    $2 = $1 + $0 | 0;
    $4 = $2 >>> 0 < $0 >>> 0 ? $4 + 1 | 0 : $4;
    HEAP32[93422] = $2;
    HEAP32[93423] = $4;
    break label$1;
   }
   HEAP8[373682] = 0;
   HEAP32[93422] = 0;
   HEAP32[93423] = 0;
  }
  if (!(HEAP8[$3 + 8 | 0] & 1)) {
   break label$1;
  }
  $4 = HEAP32[$3 >> 2];
  $1 = HEAP32[$3 + 4 >> 2];
  jshPushIOEvent((HEAPU8[$3 + 10 | 0] | (HEAP8[$3 + 11 | 0] & 1 ? 32 : 0)) & 255, $4, $1);
 }
 __stack_pointer = $3 + 16 | 0;
}

function jsiSoftInit($0) {
 var $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 47 | 0] = $0;
 HEAP8[346998] = 0;
 HEAP8[347087] = 0;
 HEAP32[86765] = jsvNewEmptyArray();
 HEAP32[86768] = jsvNewFromEmptyString_5();
 HEAP32[86770] = 0;
 HEAP16[173546] = 0;
 jsiInputLineCursorMoved();
 HEAP32[86777] = 0;
 jsfSetFlag(1, 0);
 HEAP8[178545] = 255;
 HEAP8[178546] = 255;
 HEAP16[173532] = _jsiInitNamedArray(115219);
 HEAP16[173533] = _jsiInitNamedArray(115564);
 HEAP32[86784] = jshGetSystemTime();
 HEAP32[86785] = i64toi32_i32$HIGH_BITS;
 HEAP32[$1 + 40 >> 2] = jsvObjectGetChildIfExists(HEAP32[86751], 115438);
 if (HEAP32[$1 + 40 >> 2]) {
  HEAP8[178976] = jsvGetIntegerAndUnLock(HEAP32[$1 + 40 >> 2]);
  jsvObjectRemoveChild(HEAP32[86751], 115438);
 }
 jswInit();
 jsfLoadBootCodeFromFlash(HEAP8[$1 + 47 | 0] & 1);
 HEAP32[$1 + 36 >> 2] = jsvObjectGetChildIfExists(HEAP32[86751], 113046);
 if (HEAP32[$1 + 36 >> 2]) {
  jsvUnLock2(jspEvaluateVar(HEAP32[$1 + 36 >> 2], 0, 0), HEAP32[$1 + 36 >> 2]);
  jsvObjectRemoveChild(HEAP32[86751], 113046);
 }
 if (HEAPU16[173533]) {
  HEAP32[$1 + 32 >> 2] = jsvLock(HEAPU16[173533]);
  jsvObjectIteratorNew($1 + 24 | 0, HEAP32[$1 + 32 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_3($1 + 24 | 0) & 1) {
    HEAP32[$1 + 20 >> 2] = jsvObjectIteratorGetValue_3($1 + 24 | 0);
    HEAP32[$1 + 16 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 20 >> 2], 117541);
    HEAP8[$1 + 15 | 0] = jsvObjectGetBoolChild(HEAP32[$1 + 20 >> 2], 121819) & 1;
    jshPinWatch(jshGetPinFromVar(HEAP32[$1 + 16 >> 2]) & 255, 1, HEAP8[$1 + 15 | 0] & 1);
    jsvUnLock2(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 20 >> 2]);
    jsvObjectIteratorNext($1 + 24 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_3($1 + 24 | 0);
  jsvUnLock(HEAP32[$1 + 32 >> 2]);
 }
 jsiExecuteEventCallbackOn(124964, 113043, 0, 0);
 HEAP32[$1 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[86750], 113051);
 if (HEAP32[$1 + 8 >> 2]) {
  if (jsiEcho() & 1) {
   jsiConsolePrintString(146546);
  }
  jsiExecuteEventCallback(0, HEAP32[$1 + 8 >> 2], 0, 0);
  jsvUnLock(HEAP32[$1 + 8 >> 2]);
 }
 __stack_pointer = $1 + 48 | 0;
}

function jsiHandleDelete($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 31 | 0] = $0;
 HEAP32[$1 + 24 >> 2] = jsvGetStringLength(HEAP32[86768]);
 label$1: {
  if (!(HEAP32[86770] | !(HEAP8[$1 + 31 | 0] & 1)) | !(HEAP8[$1 + 31 | 0] & 1 | HEAPU32[86770] < HEAPU32[$1 + 24 >> 2])) {
   break label$1;
  }
  label$4: {
   if (HEAP8[$1 + 31 | 0] & 1) {
    $0 = 1;
    if ((jsvGetCharInString(HEAP32[86768], HEAP32[86770] - 1 | 0) | 0) == 10) {
     break label$4;
    }
   }
   if (!(HEAP8[$1 + 31 | 0] & 1)) {
    $2 = (jsvGetCharInString(HEAP32[86768], HEAP32[86770]) | 0) == 10;
   }
   $0 = $2;
  }
  HEAP8[$1 + 23 | 0] = $0 & 1;
  label$7: {
   if (!(HEAP8[$1 + 23 | 0] & 1)) {
    break label$7;
   }
   if (!(jsiShowInputLine() & 1)) {
    break label$7;
   }
   jsiConsoleEraseAfterCursor();
   if (HEAP8[$1 + 31 | 0] & 1) {
    jsiConsolePrintString(144420);
    jsiMoveCursorChar(HEAP32[86768], HEAP32[86770], HEAP32[86770] - 1 | 0);
    jsiInputLineCursorMoved();
   }
  }
  HEAP32[$1 + 16 >> 2] = jsvNewFromEmptyString_5();
  HEAP32[$1 + 12 >> 2] = HEAP32[86770];
  if (HEAP8[$1 + 31 | 0] & 1) {
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] - 1;
  }
  if (HEAP32[$1 + 12 >> 2]) {
   jsvAppendStringVar(HEAP32[$1 + 16 >> 2], HEAP32[86768], 0, HEAP32[$1 + 12 >> 2]);
  }
  if (HEAPU32[$1 + 24 >> 2] > HEAP32[$1 + 12 >> 2] + 1 >>> 0) {
   jsvAppendStringVar(HEAP32[$1 + 16 >> 2], HEAP32[86768], HEAP32[$1 + 12 >> 2] + 1 | 0, 2147483647);
  }
  jsiInputLineCursorMoved();
  jsvUnLock(HEAP32[86768]);
  HEAP32[86768] = HEAP32[$1 + 16 >> 2];
  if (HEAP8[$1 + 31 | 0] & 1) {
   HEAP32[86770] = HEAP32[86770] - 1;
  }
  if (!(jsiShowInputLine() & 1)) {
   break label$1;
  }
  label$13: {
   if (HEAP8[$1 + 23 | 0] & 1) {
    jsiConsolePrintStringVarWithNewLineChar(HEAP32[86768], HEAP32[86770], 58);
    jsiMoveCursorChar(HEAP32[86768], jsvGetStringLength(HEAP32[86768]), HEAP32[86770]);
    break label$13;
   }
   if (HEAP8[$1 + 31 | 0] & 1) {
    jsiConsolePrintChar(8);
   }
   jsiConsolePrintStringVarUntilEOL(HEAP32[86768], HEAP32[86770], -1, 1);
  }
 }
 __stack_pointer = $1 + 32 | 0;
}

function jswrap_crypto_SHAx($0, $1) {
 var $2 = 0, $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 $2 = $3;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = jsvGetDataPointer(HEAP32[$2 + 24 >> 2], $2 + 16 | 0);
 if (!(HEAP32[$2 + 12 >> 2] | !HEAP32[$2 + 24 >> 2])) {
  HEAP32[$2 + 16 >> 2] = jsvIterateCallbackCount(HEAP32[$2 + 24 >> 2]);
  label$2: {
   if (HEAP32[$2 + 16 >> 2] + 256 >>> 0 > jsuGetFreeStack() >>> 0) {
    jsExceptionHere(1, 122957, 0);
    break label$2;
   }
   $3 = $3 - (HEAP32[$2 + 16 >> 2] + 15 & -16) | 0;
   __stack_pointer = $3;
   HEAP32[$2 + 12 >> 2] = $3;
   jsvIterateCallbackToBytes(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 16 >> 2]);
  }
 }
 label$4: {
  if (!HEAP32[$2 + 12 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$4;
  }
  HEAP32[$2 + 8 >> 2] = 20;
  if (HEAP32[$2 + 20 >> 2] > 1) {
   HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 20 >> 2] / 8;
  }
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$2 >> 2] = jsvNewArrayBufferWithPtr(HEAP32[$2 + 8 >> 2], $2 + 4 | 0);
  if (!HEAP32[$2 + 4 >> 2]) {
   jsError(113002, 0);
   HEAP32[$2 + 28 >> 2] = 0;
   break label$4;
  }
  label$8: {
   if (HEAP32[$2 + 20 >> 2] == 1) {
    mbedtls_sha1(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 4 >> 2]);
    break label$8;
   }
   label$10: {
    if (HEAP32[$2 + 20 >> 2] == 224) {
     mbedtls_sha256(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 4 >> 2], 1);
     break label$10;
    }
    label$12: {
     if (HEAP32[$2 + 20 >> 2] == 256) {
      mbedtls_sha256(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 4 >> 2], 0);
      break label$12;
     }
     label$14: {
      if (HEAP32[$2 + 20 >> 2] == 384) {
       mbedtls_sha512(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 4 >> 2], 1);
       break label$14;
      }
      if (HEAP32[$2 + 20 >> 2] == 512) {
       mbedtls_sha512(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 4 >> 2], 0);
      }
     }
    }
   }
  }
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jsspiGetSendFunction($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP32[$3 + 32 >> 2] = $2;
 HEAP8[$3 + 31 | 0] = jsiGetDeviceFromClass(HEAP32[$3 + 40 >> 2]);
 label$1: {
  if (!(HEAPU8[$3 + 31 | 0] < 25 | HEAPU8[$3 + 31 | 0] > 25)) {
   if (!(jshIsDeviceInitialised(HEAPU8[$3 + 31 | 0]) & 1)) {
    jshSPIInitInfo($3 + 16 | 0);
    jshSPISetup(HEAPU8[$3 + 31 | 0], $3 + 16 | 0);
   }
   HEAP32[HEAP32[$3 + 36 >> 2] >> 2] = 562;
   HEAP8[HEAP32[$3 + 32 >> 2]] = HEAPU8[$3 + 31 | 0];
   HEAP8[$3 + 47 | 0] = 1;
   break label$1;
  }
  if (!HEAPU8[$3 + 31 | 0]) {
   HEAP32[$3 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 40 >> 2], 115339);
   jsspiPopulateSPIInfo($3 + 16 | 0, HEAP32[$3 + 12 >> 2]);
   jsvUnLock(HEAP32[$3 + 12 >> 2]);
   label$5: {
    label$6: {
     if (HEAPU8[$3 + 23 | 0] == 255 | HEAPU8[$3 + 22 | 0] != 255 | (HEAPU8[$3 + 24 | 0] | HEAPU8[$3 + 21 | 0] == 255)) {
      break label$6;
     }
     if (!(HEAP8[$3 + 25 | 0] & 1)) {
      break label$6;
     }
     HEAP32[HEAP32[$3 + 36 >> 2] >> 2] = 563;
     break label$5;
    }
    HEAP32[HEAP32[$3 + 36 >> 2] >> 2] = 564;
   }
   $0 = HEAP32[$3 + 20 >> 2];
   $1 = HEAP32[$3 + 16 >> 2];
   $4 = $1;
   $2 = HEAP32[$3 + 32 >> 2];
   $1 = $2;
   HEAP8[$1 | 0] = $4;
   HEAP8[$1 + 1 | 0] = $4 >>> 8;
   HEAP8[$1 + 2 | 0] = $4 >>> 16;
   HEAP8[$1 + 3 | 0] = $4 >>> 24;
   HEAP8[$1 + 4 | 0] = $0;
   HEAP8[$1 + 5 | 0] = $0 >>> 8;
   HEAP8[$1 + 6 | 0] = $0 >>> 16;
   HEAP8[$1 + 7 | 0] = $0 >>> 24;
   $1 = HEAPU16[$3 + 26 >> 1] | HEAPU16[$3 + 28 >> 1] << 16;
   $0 = HEAPU16[$3 + 22 >> 1] | HEAPU16[$3 + 24 >> 1] << 16;
   $4 = $0;
   $0 = $2;
   HEAP8[$0 + 6 | 0] = $4;
   HEAP8[$0 + 7 | 0] = $4 >>> 8;
   HEAP8[$0 + 8 | 0] = $4 >>> 16;
   HEAP8[$0 + 9 | 0] = $4 >>> 24;
   HEAP8[$0 + 10 | 0] = $1;
   HEAP8[$0 + 11 | 0] = $1 >>> 8;
   HEAP8[$0 + 12 | 0] = $1 >>> 16;
   HEAP8[$0 + 13 | 0] = $1 >>> 24;
   HEAP8[$3 + 47 | 0] = 1;
   break label$1;
  }
  HEAP8[$3 + 47 | 0] = 0;
 }
 __stack_pointer = $3 + 48 | 0;
 return HEAP8[$3 + 47 | 0] & 1;
}

function tflite__ops__micro__fully_connected___28anonymous_20namespace_29__CalculateOpData_28TfLiteContext__2c_20TfLiteFusedActivation_2c_20TfLiteType_2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20tflite__ops__micro__fully_connected___28anonymous_20namespace_29__OpData__29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0;
 $8 = __stack_pointer + -64 | 0;
 __stack_pointer = $8;
 HEAP32[$8 + 56 >> 2] = $0;
 HEAP32[$8 + 52 >> 2] = $1;
 HEAP32[$8 + 48 >> 2] = $2;
 HEAP32[$8 + 44 >> 2] = $3;
 HEAP32[$8 + 40 >> 2] = $4;
 HEAP32[$8 + 36 >> 2] = $5;
 HEAP32[$8 + 32 >> 2] = $6;
 HEAP32[$8 + 28 >> 2] = $7;
 HEAP32[$8 + 24 >> 2] = 0;
 label$1: {
  if (HEAP32[$8 + 48 >> 2] != 1) {
   HEAPF64[$8 + 16 >> 3] = 0;
   HEAP32[$8 + 12 >> 2] = tflite__GetQuantizedConvolutionMultipler_28TfLiteContext__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20double__29(HEAP32[$8 + 56 >> 2], HEAP32[$8 + 44 >> 2], HEAP32[$8 + 40 >> 2], HEAP32[$8 + 36 >> 2], HEAP32[$8 + 32 >> 2], $8 + 16 | 0);
   if (HEAP32[$8 + 12 >> 2]) {
    HEAP32[$8 + 60 >> 2] = HEAP32[$8 + 12 >> 2];
    break label$1;
   }
   tflite__QuantizeMultiplier_28double_2c_20int__2c_20int__29(HEAPF64[$8 + 16 >> 3], HEAP32[$8 + 28 >> 2], $8 + 8 | 0);
   HEAP32[HEAP32[$8 + 28 >> 2] + 4 >> 2] = 0 - HEAP32[$8 + 8 >> 2];
   HEAP32[$8 + 4 >> 2] = tflite__CalculateActivationRangeQuantized_28TfLiteContext__2c_20TfLiteFusedActivation_2c_20TfLiteTensor__2c_20int__2c_20int__29(HEAP32[$8 + 56 >> 2], HEAP32[$8 + 52 >> 2], HEAP32[$8 + 32 >> 2], HEAP32[$8 + 28 >> 2] + 8 | 0, HEAP32[$8 + 28 >> 2] + 12 | 0);
   if (HEAP32[$8 + 4 >> 2]) {
    HEAP32[$8 + 60 >> 2] = HEAP32[$8 + 4 >> 2];
    break label$1;
   }
   HEAP32[HEAP32[$8 + 28 >> 2] + 20 >> 2] = HEAP32[HEAP32[$8 + 44 >> 2] + 12 >> 2];
   HEAP32[HEAP32[$8 + 28 >> 2] + 24 >> 2] = HEAP32[HEAP32[$8 + 40 >> 2] + 12 >> 2];
   HEAP32[HEAP32[$8 + 28 >> 2] + 28 >> 2] = HEAP32[HEAP32[$8 + 32 >> 2] + 12 >> 2];
  }
  HEAP32[$8 + 60 >> 2] = HEAP32[$8 + 24 >> 2];
 }
 __stack_pointer = $8 - -64 | 0;
 return HEAP32[$8 + 60 >> 2];
}

function lcdScroll_ArrayBuffer_flat8($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $7 = 0;
 $7 = __stack_pointer - 48 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 44 >> 2] = $0;
 HEAP32[$7 + 40 >> 2] = $1;
 HEAP32[$7 + 36 >> 2] = $2;
 HEAP32[$7 + 32 >> 2] = $3;
 HEAP32[$7 + 28 >> 2] = $4;
 HEAP32[$7 + 24 >> 2] = $5;
 HEAP32[$7 + 20 >> 2] = $6;
 HEAP32[$7 + 16 >> 2] = HEAP32[$7 + 24 >> 2] - HEAP32[$7 + 32 >> 2];
 HEAP32[$7 + 12 >> 2] = HEAP32[$7 + 20 >> 2] - HEAP32[$7 + 28 >> 2];
 HEAP32[$7 + 8 >> 2] = 0 - (HEAP32[$7 + 40 >> 2] + Math_imul(HEAP32[$7 + 36 >> 2], HEAP32[$7 + 16 >> 2]) | 0);
 $0 = HEAP32[$7 + 44 >> 2];
 HEAP32[$7 + 4 >> 2] = HEAP32[$7 + 32 >> 2] + Math_imul(HEAP32[$7 + 28 >> 2] - HEAP32[$7 + 36 >> 2] | 0, HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8);
 HEAP32[$7 >> 2] = 0;
 while (1) {
  if (HEAP32[$7 >> 2] < (HEAP32[$7 + 12 >> 2] + HEAP32[$7 + 36 >> 2] | 0)) {
   label$3: {
    if (HEAP32[$7 + 8 >> 2] < 0) {
     $0 = HEAP32[$7 + 44 >> 2];
     $1 = HEAP32[$7 + 44 >> 2];
     __memcpy((HEAP32[$7 + 4 >> 2] - HEAP32[$7 + 8 >> 2] | 0) + (HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24)) | 0, HEAP32[$7 + 4 >> 2] + (HEAPU8[$1 + 48 | 0] | HEAPU8[$1 + 49 | 0] << 8 | (HEAPU8[$1 + 50 | 0] << 16 | HEAPU8[$1 + 51 | 0] << 24)) | 0, HEAP32[$7 + 16 >> 2] + HEAP32[$7 + 40 >> 2] | 0);
     break label$3;
    }
    $0 = HEAP32[$7 + 44 >> 2];
    $1 = HEAP32[$7 + 44 >> 2];
    __memcpy(HEAP32[$7 + 4 >> 2] + (HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24)) | 0, (HEAP32[$7 + 4 >> 2] + HEAP32[$7 + 8 >> 2] | 0) + (HEAPU8[$1 + 48 | 0] | HEAPU8[$1 + 49 | 0] << 8 | (HEAPU8[$1 + 50 | 0] << 16 | HEAPU8[$1 + 51 | 0] << 24)) | 0, HEAP32[$7 + 16 >> 2] - HEAP32[$7 + 40 >> 2] | 0);
   }
   $0 = HEAP32[$7 + 44 >> 2];
   HEAP32[$7 + 4 >> 2] = HEAP32[$7 + 4 >> 2] + (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8);
   HEAP32[$7 >> 2] = HEAP32[$7 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $7 + 48 | 0;
}

function jslPrintPosition($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 128 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 124 >> 2] = $0;
 HEAP32[$3 + 120 >> 2] = $1;
 HEAP32[$3 + 116 >> 2] = $2;
 label$1: {
  label$2: {
   if (!(jsvIsNativeString(HEAP32[HEAP32[44743] + 84 >> 2]) & 1)) {
    if (!(jsvIsFlashString(HEAP32[HEAP32[44743] + 84 >> 2]) & 1)) {
     break label$2;
    }
   }
   $0 = HEAP32[HEAP32[44743] + 84 >> 2];
   HEAP32[$3 + 104 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
   HEAP32[$3 + 68 >> 2] = jsfFindFileFromAddr(HEAP32[$3 + 104 >> 2], $3 + 72 | 0);
   if (HEAP32[$3 + 68 >> 2]) {
    HEAP32[$3 + 64 >> 2] = jsvAddressToVar(HEAP32[$3 + 68 >> 2], jsfGetFileSize($3 + 72 | 0));
    jsvGetLineAndCol(HEAP32[$3 + 64 >> 2], (HEAP32[$3 + 116 >> 2] + HEAP32[$3 + 104 >> 2] | 0) - HEAP32[$3 + 68 >> 2] | 0, $3 + 112 | 0, $3 + 108 | 0);
    $1 = $3 + 72 | 0;
    HEAP32[$3 + 24 >> 2] = HEAP32[$1 + 28 >> 2];
    $0 = HEAP32[$1 + 20 >> 2];
    $2 = HEAP32[$1 + 24 >> 2];
    HEAP32[$3 + 16 >> 2] = $0;
    HEAP32[$3 + 20 >> 2] = $2;
    $0 = HEAP32[$1 + 16 >> 2];
    $2 = HEAP32[$1 + 12 >> 2];
    HEAP32[$3 + 8 >> 2] = $2;
    HEAP32[$3 + 12 >> 2] = $0;
    $2 = HEAP32[$1 + 8 >> 2];
    $0 = HEAP32[$1 + 4 >> 2];
    HEAP32[$3 >> 2] = $0;
    HEAP32[$3 + 4 >> 2] = $2;
    HEAP32[$3 + 60 >> 2] = jsfVarFromName($3);
    $0 = HEAP32[$3 + 124 >> 2];
    $1 = HEAP32[$3 + 120 >> 2];
    $2 = HEAP32[$3 + 112 >> 2];
    $4 = HEAP32[$3 + 108 >> 2];
    HEAP32[$3 + 40 >> 2] = HEAP32[$3 + 60 >> 2];
    HEAP32[$3 + 36 >> 2] = $4;
    HEAP32[$3 + 32 >> 2] = $2;
    cbprintf($0, $1, 144474, $3 + 32 | 0);
    jsvUnLock2(HEAP32[$3 + 64 >> 2], HEAP32[$3 + 60 >> 2]);
    break label$1;
   }
  }
  jsvGetLineAndCol(HEAP32[HEAP32[44743] + 84 >> 2], HEAP32[$3 + 116 >> 2], $3 + 112 | 0, $3 + 108 | 0);
  $0 = HEAP32[$3 + 124 >> 2];
  $1 = HEAP32[$3 + 120 >> 2];
  $2 = HEAP32[$3 + 112 >> 2];
  HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 108 >> 2];
  HEAP32[$3 + 48 >> 2] = $2;
  cbprintf($0, $1, 145732, $3 + 48 | 0);
 }
 __stack_pointer = $3 + 128 | 0;
}

function jswGetBasicObjectName($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1) {
   if (HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 129) {
    HEAP32[$1 + 12 >> 2] = 116488;
    break label$1;
   }
   if (HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 1) {
    HEAP32[$1 + 12 >> 2] = 111734;
    break label$1;
   }
   if (HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 65) {
    HEAP32[$1 + 12 >> 2] = 111716;
    break label$1;
   }
   if (HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 17) {
    HEAP32[$1 + 12 >> 2] = 111745;
    break label$1;
   }
   if (HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 2) {
    HEAP32[$1 + 12 >> 2] = 111755;
    break label$1;
   }
   if (HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 18) {
    HEAP32[$1 + 12 >> 2] = 111767;
    break label$1;
   }
   if (HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 3) {
    HEAP32[$1 + 12 >> 2] = 111791;
    break label$1;
   }
   if (HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 4) {
    HEAP32[$1 + 12 >> 2] = 111803;
    break label$1;
   }
   if (HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 20) {
    HEAP32[$1 + 12 >> 2] = 111815;
    break label$1;
   }
   if (HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 36) {
    HEAP32[$1 + 12 >> 2] = 111826;
    break label$1;
   }
   if (HEAPU8[HEAP32[$1 + 8 >> 2] + 5 | 0] == 40) {
    HEAP32[$1 + 12 >> 2] = 111778;
    break label$1;
   }
  }
  if (jsvIsPin(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 117575;
   break label$1;
  }
  if (jsvIsArray(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 111833;
   break label$1;
  }
  if (jsvIsNumeric(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 116617;
   break label$1;
  }
  if (jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 113254;
   break label$1;
  }
  if (jsvIsFunction(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 117412;
   break label$1;
  }
  if (jsvIsString(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 118935;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_object_defineProperty($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer + -64 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 56 >> 2] = $0;
 HEAP32[$3 + 52 >> 2] = $1;
 HEAP32[$3 + 48 >> 2] = $2;
 label$1: {
  if (!(jsvIsObject(HEAP32[$3 + 56 >> 2]) & 1)) {
   HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 56 >> 2];
   jsExceptionHere(1, 113777, $3 + 16 | 0);
   HEAP32[$3 + 60 >> 2] = 0;
   break label$1;
  }
  if (!(jsvIsObject(HEAP32[$3 + 48 >> 2]) & 1)) {
   HEAP32[$3 >> 2] = HEAP32[$3 + 48 >> 2];
   jsExceptionHere(1, 113854, $3);
   HEAP32[$3 + 60 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 44 >> 2] = jsvAsArrayIndex(HEAP32[$3 + 52 >> 2]);
  HEAP32[$3 + 40 >> 2] = 0;
  HEAP32[$3 + 36 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 48 >> 2], 113243);
  HEAP32[$3 + 32 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 48 >> 2], 113239);
  if (HEAP32[$3 + 32 >> 2] ? 1 : HEAP32[$3 + 36 >> 2]) {
   HEAP32[$3 + 40 >> 2] = jsvNewWithFlags(6);
   if (HEAP32[$3 + 40 >> 2]) {
    if (HEAP32[$3 + 36 >> 2]) {
     jsvObjectSetChild(HEAP32[$3 + 40 >> 2], 113243, HEAP32[$3 + 36 >> 2]);
    }
    if (HEAP32[$3 + 32 >> 2]) {
     jsvObjectSetChild(HEAP32[$3 + 40 >> 2], 113239, HEAP32[$3 + 32 >> 2]);
    }
   }
   jsvUnLock2(HEAP32[$3 + 36 >> 2], HEAP32[$3 + 32 >> 2]);
  }
  if (!HEAP32[$3 + 40 >> 2]) {
   HEAP32[$3 + 40 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 48 >> 2], 119489);
  }
  jsvObjectSetChildVar(HEAP32[$3 + 56 >> 2], HEAP32[$3 + 44 >> 2], HEAP32[$3 + 40 >> 2]);
  HEAP32[$3 + 28 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 48 >> 2], 120159);
  label$10: {
   if (jsvIsUndefined(HEAP32[$3 + 28 >> 2]) & 1) {
    break label$10;
   }
   if (jsvGetBoolAndUnLock(HEAP32[$3 + 28 >> 2]) & 1) {
    break label$10;
   }
   $0 = HEAP32[$3 + 44 >> 2];
   $1 = HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8 | 64;
   HEAP8[$0 + 12 | 0] = $1;
   HEAP8[$0 + 13 | 0] = $1 >>> 8;
  }
  jsvUnLock2(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 40 >> 2]);
  HEAP32[$3 + 60 >> 2] = jsvLockAgain(HEAP32[$3 + 56 >> 2]);
 }
 __stack_pointer = $3 - -64 | 0;
 return HEAP32[$3 + 60 >> 2];
}

function jspeStatementIf() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 48 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 32 >> 2] = 0;
 jslGetNextToken();
 label$1: {
  if (!(jslMatch(40) & 1)) {
   HEAP32[$0 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$0 + 36 >> 2] = jspeExpression();
  if (HEAP32[86758] & 80) {
   HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 36 >> 2];
   break label$1;
  }
  if (!(jslMatch(41) & 1)) {
   HEAP32[$0 + 44 >> 2] = 0;
   break label$1;
  }
  if ((HEAP32[86758] & 63) == 1) {
   $1 = jsvGetBoolAndUnLock(jsvSkipName(HEAP32[$0 + 36 >> 2]));
  }
  HEAP8[$0 + 43 | 0] = $1 & 1;
  jsvUnLock(HEAP32[$0 + 36 >> 2]);
  HEAP32[$0 + 28 >> 2] = HEAP32[86758];
  if (!(HEAP8[$0 + 43 | 0] & 1)) {
   jspSetNoExecute();
  }
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  if (HEAP16[HEAP32[44743] + 2 >> 1] != 59) {
   HEAP32[$0 + 20 >> 2] = jspeBlockOrStatement();
  }
  HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] | HEAP32[86758] & 112;
  label$8: {
   if (!(HEAP8[$0 + 43 | 0] & 1)) {
    jsvUnLock(HEAP32[$0 + 20 >> 2]);
    HEAP32[86758] = HEAP32[86758] & -1664 | HEAP32[$0 + 28 >> 2] & 1663;
    HEAP32[86758] = HEAP32[$0 + 24 >> 2] | HEAP32[86758];
    break label$8;
   }
   HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 20 >> 2];
  }
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 59) {
   jslGetNextToken();
  }
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 164) {
   jslGetNextToken();
   HEAP32[$0 + 16 >> 2] = HEAP32[86758];
   if (HEAP8[$0 + 43 | 0] & 1) {
    jspSetNoExecute();
   }
   HEAP32[$0 + 12 >> 2] = 0;
   if (HEAP16[HEAP32[44743] + 2 >> 1] != 59) {
    HEAP32[$0 + 12 >> 2] = jspeBlockOrStatement();
   }
   HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] | HEAP32[86758] & 112;
   label$14: {
    if (HEAP8[$0 + 43 | 0] & 1) {
     jsvUnLock(HEAP32[$0 + 12 >> 2]);
     HEAP32[86758] = HEAP32[86758] & -1664 | HEAP32[$0 + 16 >> 2] & 1663;
     HEAP32[86758] = HEAP32[$0 + 24 >> 2] | HEAP32[86758];
     break label$14;
    }
    HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 12 >> 2];
   }
  }
  HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 32 >> 2];
 }
 __stack_pointer = $0 + 48 | 0;
 return HEAP32[$0 + 44 >> 2];
}

function jswrap_number_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 label$1: {
  if (!jsvGetArrayLength(HEAP32[$1 + 24 >> 2])) {
   HEAP32[$1 + 28 >> 2] = jsvNewFromInteger(0);
   break label$1;
  }
  HEAP32[$1 + 20 >> 2] = jsvGetArrayItem(HEAP32[$1 + 24 >> 2], 0);
  HEAP32[$1 + 16 >> 2] = 0;
  label$3: {
   if (jsvIsArray(HEAP32[$1 + 20 >> 2]) & 1) {
    HEAP32[$1 + 12 >> 2] = jsvGetArrayLength(HEAP32[$1 + 20 >> 2]);
    label$5: {
     if (!HEAP32[$1 + 12 >> 2]) {
      HEAP32[$1 + 16 >> 2] = jsvNewFromInteger(0);
      break label$5;
     }
     if (HEAP32[$1 + 12 >> 2] == 1) {
      HEAP32[$1 + 8 >> 2] = jsvGetArrayItem(HEAP32[$1 + 20 >> 2], 0);
      label$8: {
       label$9: {
        if (!(jsvIsString(HEAP32[$1 + 8 >> 2]) & 1)) {
         break label$9;
        }
        if (!(jsvIsEmptyString(HEAP32[$1 + 8 >> 2]) & 1)) {
         break label$9;
        }
        HEAP32[$1 + 16 >> 2] = jsvNewFromInteger(0);
        break label$8;
       }
       if (!(jsvIsBoolean(HEAP32[$1 + 8 >> 2]) & 1)) {
        HEAP32[$1 + 16 >> 2] = jsvAsNumber(HEAP32[$1 + 8 >> 2]);
       }
      }
      jsvUnLock(HEAP32[$1 + 8 >> 2]);
     }
    }
    break label$3;
   }
   label$11: {
    label$12: {
     if (!(jsvIsUndefined(HEAP32[$1 + 20 >> 2]) & 1)) {
      if (!(jsvIsObject(HEAP32[$1 + 20 >> 2]) & 1)) {
       break label$12;
      }
     }
     HEAP32[$1 + 16 >> 2] = 0;
     break label$11;
    }
    label$14: {
     label$15: {
      if (!(jsvIsString(HEAP32[$1 + 20 >> 2]) & 1)) {
       break label$15;
      }
      if (!(jsvIsEmptyString(HEAP32[$1 + 20 >> 2]) & 1)) {
       break label$15;
      }
      HEAP32[$1 + 16 >> 2] = jsvNewFromInteger(0);
      break label$14;
     }
     HEAP32[$1 + 16 >> 2] = jsvAsNumber(HEAP32[$1 + 20 >> 2]);
    }
   }
  }
  jsvUnLock(HEAP32[$1 + 20 >> 2]);
  if (HEAP32[$1 + 16 >> 2]) {
   HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 16 >> 2];
   break label$1;
  }
  HEAP32[$1 + 28 >> 2] = jsvNewFromFloat(nan);
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function heatshrink_decoder_poll($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 40 >> 2] = $0;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP32[$4 + 28 >> 2] = $3;
 label$1: {
  if (HEAP32[$4 + 28 >> 2] ? !HEAP32[$4 + 40 >> 2] | !HEAP32[$4 + 36 >> 2] : 1) {
   HEAP32[$4 + 44 >> 2] = -1;
   break label$1;
  }
  HEAP32[HEAP32[$4 + 28 >> 2] >> 2] = 0;
  HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 36 >> 2];
  HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 32 >> 2];
  HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 28 >> 2];
  while (1) {
   HEAP8[$4 + 15 | 0] = HEAPU8[HEAP32[$4 + 40 >> 2] + 10 | 0];
   label$5: {
    label$6: {
     switch (HEAPU8[$4 + 15 | 0]) {
     case 0:
      $0 = st_tag_bit(HEAP32[$4 + 40 >> 2]);
      HEAP8[HEAP32[$4 + 40 >> 2] + 10 | 0] = $0;
      break label$5;

     case 1:
      $0 = st_d_yield_literal(HEAP32[$4 + 40 >> 2], $4 + 16 | 0);
      HEAP8[HEAP32[$4 + 40 >> 2] + 10 | 0] = $0;
      break label$5;

     case 2:
      $0 = st_backref_index_msb(HEAP32[$4 + 40 >> 2]);
      HEAP8[HEAP32[$4 + 40 >> 2] + 10 | 0] = $0;
      break label$5;

     case 3:
      $0 = st_backref_index_lsb(HEAP32[$4 + 40 >> 2]);
      HEAP8[HEAP32[$4 + 40 >> 2] + 10 | 0] = $0;
      break label$5;

     case 4:
      $0 = st_backref_count_msb(HEAP32[$4 + 40 >> 2]);
      HEAP8[HEAP32[$4 + 40 >> 2] + 10 | 0] = $0;
      break label$5;

     case 5:
      $0 = st_backref_count_lsb(HEAP32[$4 + 40 >> 2]);
      HEAP8[HEAP32[$4 + 40 >> 2] + 10 | 0] = $0;
      break label$5;

     case 6:
      $0 = st_yield_backref(HEAP32[$4 + 40 >> 2], $4 + 16 | 0);
      HEAP8[HEAP32[$4 + 40 >> 2] + 10 | 0] = $0;
      break label$5;

     default:
      break label$6;
     }
    }
    HEAP32[$4 + 44 >> 2] = -2;
    break label$1;
   }
   if (HEAPU8[HEAP32[$4 + 40 >> 2] + 10 | 0] != HEAPU8[$4 + 15 | 0]) {
    continue;
   }
   break;
  }
  if (HEAP32[HEAP32[$4 + 28 >> 2] >> 2] == HEAP32[$4 + 32 >> 2]) {
   HEAP32[$4 + 44 >> 2] = 1;
   break label$1;
  }
  HEAP32[$4 + 44 >> 2] = 0;
 }
 __stack_pointer = $4 + 48 | 0;
 return HEAP32[$4 + 44 >> 2];
}

function tflite__ops__micro__pooling__Prepare_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  if (!HEAP32[HEAP32[$2 + 20 >> 2] + 12 >> 2]) {
   break label$1;
  }
 }
 HEAP32[$2 + 16 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] + 12 >> 2];
 label$2: {
  if (!HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2]) {
   break label$2;
  }
 }
 HEAP32[$2 + 12 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2];
 HEAP32[$2 + 8 >> 2] = tflite__GetInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], 0);
 HEAP32[$2 + 4 >> 2] = tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], 0);
 HEAP32[$2 >> 2] = tflite__ops__micro__pooling___28anonymous_20namespace_29__CalculateOpData_28TfLiteContext_20const__2c_20TfLitePoolParams_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData__29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2], HEAP32[$2 + 12 >> 2]);
 label$3: {
  if (HEAP32[$2 >> 2]) {
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 >> 2];
   break label$3;
  }
  label$5: {
   if (HEAP32[HEAP32[$2 + 8 >> 2] + 28 >> 2] == 1) {
    void_20tflite__CalculateActivationRange_float__28TfLiteFusedActivation_2c_20float__2c_20float__29(HEAP32[HEAP32[$2 + 16 >> 2] + 20 >> 2], HEAP32[$2 + 12 >> 2] + 24 | 0, HEAP32[$2 + 12 >> 2] + 28 | 0);
    break label$5;
   }
   if (!(HEAP32[HEAP32[$2 + 8 >> 2] + 28 >> 2] != 9 & HEAP32[HEAP32[$2 + 8 >> 2] + 28 >> 2] != 3)) {
    tflite__CalculateActivationRangeQuantized_28TfLiteContext__2c_20TfLiteFusedActivation_2c_20TfLiteTensor__2c_20int__2c_20int__29(HEAP32[$2 + 24 >> 2], HEAP32[HEAP32[$2 + 16 >> 2] + 20 >> 2], HEAP32[$2 + 4 >> 2], HEAP32[$2 + 12 >> 2] + 16 | 0, HEAP32[$2 + 12 >> 2] + 20 | 0);
   }
  }
  HEAP32[$2 + 28 >> 2] = 0;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function mbedtls_sha512_starts($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 label$1: {
  if (!HEAP32[$2 + 8 >> 2]) {
   $0 = HEAP32[$2 + 12 >> 2];
   HEAP32[$0 + 16 >> 2] = -205731576;
   HEAP32[$0 + 20 >> 2] = 1779033703;
   $0 = HEAP32[$2 + 12 >> 2];
   HEAP32[$0 + 24 >> 2] = -2067093701;
   HEAP32[$0 + 28 >> 2] = -1150833019;
   $0 = HEAP32[$2 + 12 >> 2];
   HEAP32[$0 + 32 >> 2] = -23791573;
   HEAP32[$0 + 36 >> 2] = 1013904242;
   $0 = HEAP32[$2 + 12 >> 2];
   HEAP32[$0 + 40 >> 2] = 1595750129;
   HEAP32[$0 + 44 >> 2] = -1521486534;
   $0 = HEAP32[$2 + 12 >> 2];
   HEAP32[$0 + 48 >> 2] = -1377402159;
   HEAP32[$0 + 52 >> 2] = 1359893119;
   $0 = HEAP32[$2 + 12 >> 2];
   HEAP32[$0 + 56 >> 2] = 725511199;
   HEAP32[$0 + 60 >> 2] = -1694144372;
   $0 = HEAP32[$2 + 12 >> 2];
   HEAP32[$0 + 64 >> 2] = -79577749;
   HEAP32[$0 + 68 >> 2] = 528734635;
   $0 = HEAP32[$2 + 12 >> 2];
   HEAP32[$0 + 72 >> 2] = 327033209;
   HEAP32[$0 + 76 >> 2] = 1541459225;
   break label$1;
  }
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 16 >> 2] = -1056596264;
  HEAP32[$0 + 20 >> 2] = -876896931;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 24 >> 2] = 914150663;
  HEAP32[$0 + 28 >> 2] = 1654270250;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 32 >> 2] = 812702999;
  HEAP32[$0 + 36 >> 2] = -1856437926;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 40 >> 2] = -150054599;
  HEAP32[$0 + 44 >> 2] = 355462360;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 48 >> 2] = -4191439;
  HEAP32[$0 + 52 >> 2] = 1731405415;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 56 >> 2] = 1750603025;
  HEAP32[$0 + 60 >> 2] = -1900787065;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 64 >> 2] = 1694076839;
  HEAP32[$0 + 68 >> 2] = -619958771;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 72 >> 2] = -1090891868;
  HEAP32[$0 + 76 >> 2] = 1203062813;
 }
 HEAP32[HEAP32[$2 + 12 >> 2] + 208 >> 2] = HEAP32[$2 + 8 >> 2];
}

function jsfCompactWriteBuffer($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 48 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 44 >> 2] = $0;
 HEAP32[$6 + 40 >> 2] = $1;
 HEAP32[$6 + 36 >> 2] = $2;
 HEAP32[$6 + 32 >> 2] = $3;
 HEAP32[$6 + 28 >> 2] = $4;
 HEAP32[$6 + 24 >> 2] = $5;
 HEAP32[$6 + 20 >> 2] = jsfGetBankEndAddress(HEAP32[HEAP32[$6 + 44 >> 2] >> 2]);
 HEAP32[$6 + 16 >> 2] = jsfGetAddressOfNextPage(HEAP32[HEAP32[$6 + 44 >> 2] >> 2]);
 if (!HEAP32[$6 + 16 >> 2]) {
  HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 20 >> 2];
 }
 while (1) {
  label$3: {
   if (!HEAP32[HEAP32[$6 + 28 >> 2] >> 2]) {
    break label$3;
   }
   HEAP32[$6 + 12 >> 2] = HEAP32[HEAP32[$6 + 28 >> 2] >> 2];
   if (HEAPU32[$6 + 32 >> 2] < HEAP32[$6 + 12 >> 2] + HEAP32[HEAP32[$6 + 24 >> 2] >> 2] >>> 0) {
    HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 32 >> 2] - HEAP32[HEAP32[$6 + 24 >> 2] >> 2];
   }
   if (HEAPU32[$6 + 16 >> 2] < HEAP32[$6 + 12 >> 2] + HEAP32[HEAP32[$6 + 44 >> 2] >> 2] >>> 0) {
    HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 16 >> 2] - HEAP32[HEAP32[$6 + 44 >> 2] >> 2];
   }
   if (HEAPU32[$6 + 40 >> 2] < HEAPU32[$6 + 16 >> 2]) {
    break label$3;
   }
   if (!(!(jshFlashGetPage(HEAP32[HEAP32[$6 + 44 >> 2] >> 2], $6 + 8 | 0, $6 + 4 | 0) & 1) | HEAP32[$6 + 8 >> 2] != HEAP32[HEAP32[$6 + 44 >> 2] >> 2])) {
    jshFlashErasePage(HEAP32[HEAP32[$6 + 44 >> 2] >> 2]);
   }
   jshFlashWrite(HEAP32[$6 + 36 >> 2] + HEAP32[HEAP32[$6 + 24 >> 2] >> 2] | 0, HEAP32[HEAP32[$6 + 44 >> 2] >> 2], HEAP32[$6 + 12 >> 2]);
   $0 = HEAP32[$6 + 44 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$6 + 12 >> 2] + HEAP32[$0 >> 2];
   HEAP32[$6 + 16 >> 2] = jsfGetAddressOfNextPage(HEAP32[HEAP32[$6 + 44 >> 2] >> 2]);
   if (!HEAP32[$6 + 16 >> 2]) {
    HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 20 >> 2];
   }
   HEAP32[HEAP32[$6 + 24 >> 2] >> 2] = (HEAP32[HEAP32[$6 + 24 >> 2] >> 2] + HEAP32[$6 + 12 >> 2] >>> 0) % HEAPU32[$6 + 32 >> 2];
   $0 = HEAP32[$6 + 28 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] - HEAP32[$6 + 12 >> 2];
   jshKickWatchDog();
   jshKickSoftWatchDog();
   continue;
  }
  break;
 }
 __stack_pointer = $6 + 48 | 0;
}

function jsiCheckErrors() {
 var $0 = 0;
 $0 = __stack_pointer - 48 | 0;
 __stack_pointer = $0;
 if (HEAPU16[173534] & 32768) {
  jspSetInterrupted(0);
  HEAP16[173534] = HEAPU16[173534] & -32769;
  jsiConsoleRemoveInputLine();
  jsiConsolePrintString(146257);
 }
 HEAP8[$0 + 47 | 0] = 0;
 HEAP8[$0 + 46 | 0] = (HEAP32[86758] & 32) != 0;
 HEAP32[$0 + 40 >> 2] = jspGetException();
 if (HEAP8[$0 + 46 | 0] & 1) {
  if (jsiExecuteEventCallbackOn(115138, 117146, 1, $0 + 40 | 0) & 1) {
   jsvUnLock(HEAP32[$0 + 40 >> 2]);
   HEAP32[$0 + 40 >> 2] = jspGetException();
   if (!HEAP32[$0 + 40 >> 2]) {
    HEAP8[$0 + 46 | 0] = 0;
   }
  }
 }
 if (HEAP8[$0 + 46 | 0] & 1) {
  jsiConsoleRemoveInputLine();
  HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 40 >> 2];
  jsiConsolePrintf(144443, $0 + 16 | 0);
  HEAP8[$0 + 47 | 0] = 1;
  if (jsvIsObject(HEAP32[$0 + 40 >> 2]) & 1) {
   HEAP32[$0 + 36 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 40 >> 2], 118167);
   if (HEAP32[$0 + 36 >> 2]) {
    jsiConsolePrintStringVar(HEAP32[$0 + 36 >> 2]);
    jsvUnLock(HEAP32[$0 + 36 >> 2]);
   }
  }
 }
 jsvUnLock(HEAP32[$0 + 40 >> 2]);
 if (!(!(jspIsInterrupted() & 1) | HEAPU16[173534] & 16)) {
  jsiConsoleRemoveInputLine();
  jsiConsolePrintString(145544);
  jspSetInterrupted(0);
  HEAP8[$0 + 47 | 0] = 1;
 }
 HEAP32[$0 + 32 >> 2] = jspGetStackTrace();
 if (HEAP32[$0 + 32 >> 2]) {
  if (HEAP8[$0 + 47 | 0] & 1) {
   jsiConsolePrintStringVar(HEAP32[$0 + 32 >> 2]);
  }
  jsvUnLock(HEAP32[$0 + 32 >> 2]);
 }
 if (jspHasError() & 1) {
  HEAP32[86758] = HEAP32[86758] & -113;
 }
 if (HEAPU8[347087] != HEAPU8[346998]) {
  HEAP8[$0 + 31 | 0] = HEAPU8[346998] & (HEAPU8[347087] ^ -1);
  if (HEAPU8[$0 + 31 | 0] & -9) {
   HEAP32[$0 + 24 >> 2] = jswrap_espruino_getErrorFlagArray(HEAPU8[$0 + 31 | 0]);
   jsiExecuteEventCallbackOn(124964, 119063, 1, $0 + 24 | 0);
   if (HEAP32[$0 + 24 >> 2]) {
    jsiConsoleRemoveInputLine();
    HEAP32[$0 >> 2] = HEAP32[$0 + 24 >> 2];
    jsiConsolePrintf(144496, $0);
    jsvUnLock(HEAP32[$0 + 24 >> 2]);
   }
  }
  HEAP8[347087] = HEAPU8[346998];
 }
 __stack_pointer = $0 + 48 | 0;
}

function _jsvTraceGetLowestLevel($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1: {
  if (HEAP32[$2 + 40 >> 2] == HEAP32[$2 + 36 >> 2]) {
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 32 >> 2] = -1;
  $0 = HEAP32[$2 + 40 >> 2];
  if ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 512) {
   HEAP32[$2 + 44 >> 2] = -1;
   break label$1;
  }
  $0 = HEAP32[$2 + 40 >> 2];
  $1 = HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8 | 512;
  HEAP8[$0 + 12 | 0] = $1;
  HEAP8[$0 + 13 | 0] = $1 >>> 8;
  label$4: {
   if (!(jsvHasSingleChild(HEAP32[$2 + 40 >> 2]) & 1)) {
    break label$4;
   }
   if (!(jsvGetFirstChild(HEAP32[$2 + 40 >> 2]) & 65535)) {
    break label$4;
   }
   HEAP32[$2 + 28 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$2 + 40 >> 2]) & 65535);
   HEAP32[$2 + 24 >> 2] = _jsvTraceGetLowestLevel(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 36 >> 2]);
   jsvUnLock(HEAP32[$2 + 28 >> 2]);
   if (!(HEAP32[$2 + 32 >> 2] >= 0 & HEAP32[$2 + 24 >> 2] >= HEAP32[$2 + 32 >> 2] | HEAP32[$2 + 24 >> 2] < 0)) {
    HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 24 >> 2] + 1;
   }
  }
  if (jsvHasChildren(HEAP32[$2 + 40 >> 2]) & 1) {
   HEAP16[$2 + 22 >> 1] = jsvGetFirstChild(HEAP32[$2 + 40 >> 2]);
   while (1) {
    if (HEAPU16[$2 + 22 >> 1]) {
     HEAP32[$2 + 16 >> 2] = jsvLock(HEAPU16[$2 + 22 >> 1]);
     HEAP32[$2 + 12 >> 2] = _jsvTraceGetLowestLevel(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 36 >> 2]);
     if (!(HEAP32[$2 + 32 >> 2] >= 0 & HEAP32[$2 + 12 >> 2] >= HEAP32[$2 + 32 >> 2] | HEAP32[$2 + 12 >> 2] < 0)) {
      HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
     }
     HEAP16[$2 + 22 >> 1] = jsvGetNextSibling(HEAP32[$2 + 16 >> 2]);
     jsvUnLock(HEAP32[$2 + 16 >> 2]);
     continue;
    }
    break;
   }
  }
  $0 = HEAP32[$2 + 40 >> 2];
  $1 = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & -513;
  HEAP8[$0 + 12 | 0] = $1;
  HEAP8[$0 + 13 | 0] = $1 >>> 8;
  HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function mbedtls_sha512_update($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 label$1: {
  if (!HEAP32[$3 + 20 >> 2]) {
   break label$1;
  }
  $4 = HEAP32[$3 + 28 >> 2];
  $0 = HEAP32[$4 >> 2];
  HEAP32[$3 + 12 >> 2] = $0 & 127;
  HEAP32[$3 + 16 >> 2] = 128 - HEAP32[$3 + 12 >> 2];
  $7 = HEAP32[$3 + 28 >> 2];
  $0 = HEAP32[$3 + 20 >> 2];
  $5 = $0;
  $0 = $7;
  $4 = HEAP32[$0 >> 2];
  $1 = $4;
  $0 = HEAP32[$0 + 4 >> 2];
  $2 = $0;
  $0 = $5;
  $6 = $0 + $1 | 0;
  $0 = $7;
  HEAP32[$0 >> 2] = $6;
  $2 = $1 >>> 0 > $6 >>> 0 ? $2 + 1 | 0 : $2;
  HEAP32[$0 + 4 >> 2] = $2;
  $0 = HEAP32[$3 + 28 >> 2];
  $2 = HEAP32[$0 >> 2];
  $4 = $2;
  $0 = HEAP32[$0 + 4 >> 2];
  $2 = $0;
  $0 = HEAP32[$3 + 20 >> 2];
  $1 = $0;
  $0 = $4;
  if (!$2 & $0 >>> 0 < $1 >>> 0) {
   $5 = HEAP32[$3 + 28 >> 2];
   $1 = $5;
   $0 = HEAP32[$1 + 8 >> 2];
   $2 = HEAP32[$1 + 12 >> 2];
   $1 = $0;
   $4 = $1 + 1 | 0;
   $6 = $4 ? $2 : $2 + 1 | 0;
   $1 = $5;
   HEAP32[$1 + 8 >> 2] = $4;
   HEAP32[$1 + 12 >> 2] = $6;
  }
  if (!(!HEAP32[$3 + 12 >> 2] | HEAPU32[$3 + 20 >> 2] < HEAPU32[$3 + 16 >> 2])) {
   __memcpy(HEAP32[$3 + 12 >> 2] + (HEAP32[$3 + 28 >> 2] + 80 | 0) | 0, HEAP32[$3 + 24 >> 2], HEAP32[$3 + 16 >> 2]);
   mbedtls_sha512_process(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 28 >> 2] + 80 | 0);
   HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 16 >> 2] + HEAP32[$3 + 24 >> 2];
   HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 20 >> 2] - HEAP32[$3 + 16 >> 2];
   HEAP32[$3 + 12 >> 2] = 0;
  }
  while (1) {
   if (HEAPU32[$3 + 20 >> 2] >= 128) {
    mbedtls_sha512_process(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2]);
    HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 24 >> 2] + 128;
    HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 20 >> 2] - 128;
    continue;
   }
   break;
  }
  if (!HEAP32[$3 + 20 >> 2]) {
   break label$1;
  }
  __memcpy(HEAP32[$3 + 12 >> 2] + (HEAP32[$3 + 28 >> 2] + 80 | 0) | 0, HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
 }
 __stack_pointer = $3 + 32 | 0;
}

function jswrap_regexp_exec($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 $2 = $3;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 HEAP32[$2 + 32 >> 2] = jsvAsString(HEAP32[$2 + 36 >> 2]);
 HEAP32[$2 + 28 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 40 >> 2], 111872);
 HEAP32[$2 + 24 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 40 >> 2], 120470);
 label$1: {
  label$2: {
   if (jsvIsString(HEAP32[$2 + 24 >> 2]) & 1) {
    if (HEAP32[$2 + 28 >> 2] <= (jsvGetStringLength(HEAP32[$2 + 32 >> 2]) | 0)) {
     break label$2;
    }
   }
   jsvUnLock2(HEAP32[$2 + 32 >> 2], HEAP32[$2 + 24 >> 2]);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 20 >> 2] = jsvGetStringLength(HEAP32[$2 + 24 >> 2]);
  $3 = $3 - (HEAP32[$2 + 20 >> 2] + 16 & -16) | 0;
  __stack_pointer = $3;
  HEAP32[$2 + 16 >> 2] = $3;
  if (!HEAP32[$2 + 16 >> 2]) {
   jsvUnLock2(HEAP32[$2 + 32 >> 2], HEAP32[$2 + 24 >> 2]);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  jsvGetString(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 20 >> 2] + 1 | 0);
  jsvUnLock(HEAP32[$2 + 24 >> 2]);
  HEAP32[$2 + 12 >> 2] = match(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 32 >> 2], HEAP32[$2 + 28 >> 2], jswrap_regexp_hasFlag(HEAP32[$2 + 40 >> 2], 105) & 1);
  jsvUnLock(HEAP32[$2 + 32 >> 2]);
  label$5: {
   if (!HEAP32[$2 + 12 >> 2]) {
    HEAP32[$2 + 12 >> 2] = jsvNewWithFlags(2);
    HEAP32[$2 + 28 >> 2] = 0;
    break label$5;
   }
   label$7: {
    if (jswrap_regexp_hasFlag(HEAP32[$2 + 40 >> 2], 103) & 1) {
     HEAP32[$2 + 8 >> 2] = jsvGetArrayItem(HEAP32[$2 + 12 >> 2], 0);
     HEAP32[$2 + 28 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 12 >> 2], 111866) + jsvGetStringLength(HEAP32[$2 + 8 >> 2]);
     jsvUnLock(HEAP32[$2 + 8 >> 2]);
     break label$7;
    }
    HEAP32[$2 + 28 >> 2] = 0;
   }
  }
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 40 >> 2], 111872, jsvNewFromInteger(HEAP32[$2 + 28 >> 2]));
  HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function jsfGetStorageStats($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 80 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 76 >> 2] = $1;
 HEAP8[$3 + 75 | 0] = $2;
 if (!HEAP32[$3 + 76 >> 2]) {
  HEAP32[$3 + 76 >> 2] = 134217728;
 }
 HEAP32[$3 + 68 >> 2] = HEAP32[$3 + 76 >> 2];
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$3 + 56 >> 2] = 0;
 HEAP32[$3 + 60 >> 2] = 0;
 HEAP32[$3 + 48 >> 2] = 0;
 HEAP32[$3 + 52 >> 2] = 0;
 HEAP32[$3 + 40 >> 2] = 0;
 HEAP32[$3 + 44 >> 2] = 0;
 HEAP32[$3 + 32 >> 2] = 0;
 HEAP32[$3 + 36 >> 2] = 0;
 HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 76 >> 2];
 HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 76 >> 2];
 if (jsfGetFileHeader(HEAP32[$3 + 76 >> 2], $3 + 32 | 0, 0) & 1) {
  while (1) {
   if (!(!(jshFlashGetPage(HEAP32[$3 + 76 >> 2], $3 + 20 | 0, $3 + 16 | 0) & 1) | HEAP32[$3 + 20 >> 2] != HEAP32[$3 + 76 >> 2])) {
    HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 20 >> 2];
   }
   HEAP32[$3 + 12 >> 2] = jsfAlignAddress(jsfGetFileSize($3 + 32 | 0)) + 32;
   HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 76 >> 2] + HEAP32[$3 + 12 >> 2];
   label$5: {
    if (HEAP32[$3 + 36 >> 2]) {
     HEAP32[$0 >> 2] = HEAP32[$3 + 12 >> 2] + HEAP32[$0 >> 2];
     HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
     break label$5;
    }
    HEAP32[$0 + 8 >> 2] = HEAP32[$3 + 12 >> 2] + HEAP32[$0 + 8 >> 2];
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
    if (!HEAP32[$0 + 24 >> 2]) {
     HEAP32[$0 + 24 >> 2] = HEAP32[$3 + 24 >> 2];
    }
   }
   if (jsfGetNextFileHeader($3 + 76 | 0, $3 + 32 | 0, HEAP8[$3 + 75 | 0] & 1 | 2) & 1) {
    continue;
   }
   break;
  }
 }
 label$8: {
  if (HEAP8[$3 + 75 | 0] & 1) {
   $1 = jsfGetBankEndAddress(HEAP32[$3 + 68 >> 2]);
   break label$8;
  }
  $1 = jsfGetAddressOfNextPage(HEAP32[$3 + 68 >> 2]);
 }
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$0 + 16 >> 2] = HEAP32[$3 + 8 >> 2] - HEAP32[$3 + 68 >> 2];
 HEAP32[$0 + 20 >> 2] = HEAP32[$3 + 8 >> 2] - HEAP32[$3 + 28 >> 2];
 __stack_pointer = $3 + 80 | 0;
}

function jstStartSignal($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0;
 $8 = __stack_pointer + -64 | 0;
 __stack_pointer = $8;
 HEAP32[$8 + 48 >> 2] = $0;
 HEAP32[$8 + 52 >> 2] = $1;
 HEAP32[$8 + 40 >> 2] = $2;
 HEAP32[$8 + 44 >> 2] = $3;
 HEAP8[$8 + 39 | 0] = $4;
 HEAP32[$8 + 32 >> 2] = $5;
 HEAP32[$8 + 28 >> 2] = $6;
 HEAP8[$8 + 27 | 0] = $7;
 label$1: {
  if (!(jshIsPinValid(HEAPU8[$8 + 39 | 0]) & 1)) {
   HEAP8[$8 + 63 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$8 + 40 >> 2];
  HEAP8[$8 + 4 | 0] = $0;
  HEAP8[$8 + 5 | 0] = $0 >>> 8;
  HEAP8[$8 + 6 | 0] = $0 >>> 16;
  HEAP8[$8 + 7 | 0] = $0 >>> 24;
  $2 = HEAP32[$8 + 40 >> 2];
  $0 = $2 + HEAP32[$8 + 48 >> 2] | 0;
  $1 = HEAP32[$8 + 44 >> 2] + HEAP32[$8 + 52 >> 2] | 0;
  HEAP8[$8 | 0] = $0;
  HEAP8[$8 + 1 | 0] = $0 >>> 8;
  HEAP8[$8 + 2 | 0] = $0 >>> 16;
  HEAP8[$8 + 3 | 0] = $0 >>> 24;
  HEAP8[$8 + 24 | 0] = HEAPU8[$8 + 27 | 0];
  label$3: {
   if (!(HEAPU8[$8 + 27 | 0] != 4 & HEAPU8[$8 + 27 | 0] != 6)) {
    $0 = jshGetCurrentPinFunction(HEAPU8[$8 + 39 | 0]);
    HEAP8[$8 + 22 | 0] = $0;
    HEAP8[$8 + 23 | 0] = $0 >>> 8;
    if (!(HEAPU8[$8 + 22 | 0] | HEAPU8[$8 + 23 | 0] << 8)) {
     HEAP8[$8 + 63 | 0] = 0;
     break label$1;
    }
    break label$3;
   }
   label$7: {
    if (!(HEAPU8[$8 + 27 | 0] != 5 & HEAPU8[$8 + 27 | 0] != 7)) {
     if (!HEAPU8[(Math_imul(HEAPU8[$8 + 39 | 0], 3) + 163712 | 0) + 2 | 0]) {
      HEAP8[$8 + 63 | 0] = 0;
      break label$1;
     }
     HEAP8[$8 + 22 | 0] = HEAPU8[$8 + 39 | 0];
     break label$7;
    }
    HEAP8[$8 + 63 | 0] = 0;
    break label$1;
   }
  }
  $0 = jsvGetRef(HEAP32[$8 + 32 >> 2]);
  HEAP8[$8 + 12 | 0] = $0;
  HEAP8[$8 + 13 | 0] = $0 >>> 8;
  label$11: {
   if (HEAP32[$8 + 28 >> 2]) {
    $0 = jsvGetRef(HEAP32[$8 + 28 >> 2]);
    HEAP8[$8 + 14 | 0] = $0;
    HEAP8[$8 + 15 | 0] = $0 >>> 8;
    break label$11;
   }
   HEAP8[$8 + 14 | 0] = 0;
   HEAP8[$8 + 15 | 0] = 0;
  }
  jstUtilTimerSetupBuffer($8);
  HEAP8[$8 + 63 | 0] = utilTimerInsertTask($8, 0) & 1;
 }
 __stack_pointer = $8 - -64 | 0;
 return HEAP8[$8 + 63 | 0] & 1;
}

function jswrap_array_reduce($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 112 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 104 >> 2] = $0;
 HEAP32[$3 + 100 >> 2] = $1;
 HEAP32[$3 + 96 >> 2] = $2;
 label$1: {
  if (!(jsvIsIterable(HEAP32[$3 + 104 >> 2]) & 1)) {
   jsExceptionHere(1, 120181, 0);
   HEAP32[$3 + 108 >> 2] = 0;
   break label$1;
  }
  if (!(jsvIsFunction(HEAP32[$3 + 100 >> 2]) & 1)) {
   jsExceptionHere(1, 117348, 0);
   HEAP32[$3 + 108 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 92 >> 2] = jsvLockAgainSafe(HEAP32[$3 + 96 >> 2]);
  jsvIteratorNew($3 + 32 | 0, HEAP32[$3 + 104 >> 2], 0);
  if (!HEAP32[$3 + 92 >> 2]) {
   HEAP8[$3 + 31 | 0] = 0;
   while (1) {
    $0 = 0;
    if (!(HEAP8[$3 + 31 | 0] & 1)) {
     $0 = jsvIteratorHasElement($3 + 32 | 0);
    }
    if ($0 & 1) {
     HEAP32[$3 + 24 >> 2] = jsvIteratorGetKey($3 + 32 | 0);
     if (jsvIsInt(HEAP32[$3 + 24 >> 2]) & 1) {
      HEAP32[$3 + 92 >> 2] = jsvIteratorGetValue($3 + 32 | 0);
      HEAP8[$3 + 31 | 0] = 1;
     }
     jsvUnLock(HEAP32[$3 + 24 >> 2]);
     jsvIteratorNext($3 + 32 | 0);
     continue;
    }
    break;
   }
   if (!HEAP32[$3 + 92 >> 2]) {
    jsExceptionHere(1, 119453, 0);
   }
  }
  while (1) {
   if (jsvIteratorHasElement($3 + 32 | 0) & 1) {
    HEAP32[$3 + 20 >> 2] = jsvIteratorGetKey($3 + 32 | 0);
    if (jsvIsInt(HEAP32[$3 + 20 >> 2]) & 1) {
     HEAP32[$3 + 16 >> 2] = jsvGetInteger(HEAP32[$3 + 20 >> 2]);
     HEAP32[$3 >> 2] = HEAP32[$3 + 92 >> 2];
     HEAP32[$3 + 4 >> 2] = jsvIteratorGetValue($3 + 32 | 0);
     HEAP32[$3 + 8 >> 2] = jsvNewFromInteger(HEAP32[$3 + 16 >> 2]);
     HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 104 >> 2];
     HEAP32[$3 + 92 >> 2] = jspeFunctionCall(HEAP32[$3 + 100 >> 2], 0, 0, 0, 4, $3);
     jsvUnLockMany(3, $3);
    }
    jsvUnLock(HEAP32[$3 + 20 >> 2]);
    jsvIteratorNext($3 + 32 | 0);
    continue;
   }
   break;
  }
  jsvIteratorFree($3 + 32 | 0);
  HEAP32[$3 + 108 >> 2] = HEAP32[$3 + 92 >> 2];
 }
 __stack_pointer = $3 + 112 | 0;
 return HEAP32[$3 + 108 >> 2];
}

function jswrap_object_getOwnPropertyDescriptor($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1: {
  if (!(jswrap_object_hasOwnProperty(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]) & 1)) {
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 32 >> 2] = jsvAsArrayIndex(HEAP32[$2 + 36 >> 2]);
  HEAP32[$2 + 28 >> 2] = jspGetVarNamedField(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 32 >> 2], 1);
  jsvUnLock(HEAP32[$2 + 32 >> 2]);
  if (!HEAP32[$2 + 28 >> 2]) {
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 24 >> 2] = jsvNewObject();
  if (!HEAP32[$2 + 24 >> 2]) {
   jsvUnLock(HEAP32[$2 + 28 >> 2]);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP8[$2 + 23 | 0] = jsvIsNewChild(HEAP32[$2 + 28 >> 2]) & 1;
  HEAP32[$2 + 16 >> 2] = jsvGetInternalFunctionCheckerFor(HEAP32[$2 + 40 >> 2]);
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 120159, jsvNewFromBool((jsvIsConstant(HEAP32[$2 + 28 >> 2]) ^ -1) & 1));
  $0 = 1;
  $1 = HEAP32[$2 + 24 >> 2];
  if (HEAP32[$2 + 16 >> 2]) {
   $0 = FUNCTION_TABLE[HEAP32[$2 + 16 >> 2]](HEAP32[$2 + 28 >> 2]) ^ -1;
  }
  jsvObjectSetChildAndUnLock($1, 120218, jsvNewFromBool($0 & 1));
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 120168, jsvNewFromBool((HEAPU8[$2 + 23 | 0] ^ -1) & 1));
  HEAP32[$2 + 12 >> 2] = jsvGetValueOfName(HEAP32[$2 + 28 >> 2]);
  label$7: {
   if (jsvIsGetterOrSetter(HEAP32[$2 + 12 >> 2]) & 1) {
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 113243, jsvObjectGetChildIfExists(HEAP32[$2 + 12 >> 2], 113243));
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 113239, jsvObjectGetChildIfExists(HEAP32[$2 + 12 >> 2], 113239));
    break label$7;
   }
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 119489, jsvSkipName(HEAP32[$2 + 28 >> 2]));
  }
  jsvUnLock(HEAP32[$2 + 12 >> 2]);
  jsvUnLock(HEAP32[$2 + 28 >> 2]);
  HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 24 >> 2];
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function graphicsSetPixelDevice($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 label$1: {
  if (HEAP32[$4 + 8 >> 2] < (HEAPU8[$0 + 32 | 0] | HEAPU8[$0 + 33 | 0] << 8)) {
   break label$1;
  }
  $0 = HEAP32[$4 + 12 >> 2];
  if (HEAP32[$4 + 4 >> 2] < (HEAPU8[$0 + 34 | 0] | HEAPU8[$0 + 35 | 0] << 8)) {
   break label$1;
  }
  $0 = HEAP32[$4 + 12 >> 2];
  if (HEAP32[$4 + 8 >> 2] > (HEAPU8[$0 + 36 | 0] | HEAPU8[$0 + 37 | 0] << 8)) {
   break label$1;
  }
  $0 = HEAP32[$4 + 12 >> 2];
  if (HEAP32[$4 + 4 >> 2] > (HEAPU8[$0 + 38 | 0] | HEAPU8[$0 + 39 | 0] << 8)) {
   break label$1;
  }
  $0 = HEAP32[$4 + 12 >> 2];
  if (HEAP32[$4 + 8 >> 2] < (HEAPU8[$0 + 40 | 0] | HEAPU8[$0 + 41 | 0] << 8) << 16 >> 16) {
   $0 = HEAP32[$4 + 12 >> 2];
   $1 = HEAP32[$4 + 8 >> 2];
   HEAP8[$0 + 40 | 0] = $1;
   HEAP8[$0 + 41 | 0] = $1 >>> 8;
  }
  $0 = HEAP32[$4 + 12 >> 2];
  if (HEAP32[$4 + 8 >> 2] > (HEAPU8[$0 + 44 | 0] | HEAPU8[$0 + 45 | 0] << 8) << 16 >> 16) {
   $0 = HEAP32[$4 + 12 >> 2];
   $1 = HEAP32[$4 + 8 >> 2];
   HEAP8[$0 + 44 | 0] = $1;
   HEAP8[$0 + 45 | 0] = $1 >>> 8;
  }
  $0 = HEAP32[$4 + 12 >> 2];
  if (HEAP32[$4 + 4 >> 2] < (HEAPU8[$0 + 42 | 0] | HEAPU8[$0 + 43 | 0] << 8) << 16 >> 16) {
   $0 = HEAP32[$4 + 12 >> 2];
   $1 = HEAP32[$4 + 4 >> 2];
   HEAP8[$0 + 42 | 0] = $1;
   HEAP8[$0 + 43 | 0] = $1 >>> 8;
  }
  $0 = HEAP32[$4 + 12 >> 2];
  if (HEAP32[$4 + 4 >> 2] > (HEAPU8[$0 + 46 | 0] | HEAPU8[$0 + 47 | 0] << 8) << 16 >> 16) {
   $0 = HEAP32[$4 + 12 >> 2];
   $1 = HEAP32[$4 + 4 >> 2];
   HEAP8[$0 + 46 | 0] = $1;
   HEAP8[$0 + 47 | 0] = $1 >>> 8;
  }
  $0 = HEAP32[$4 + 12 >> 2];
  FUNCTION_TABLE[HEAPU8[$0 + 52 | 0] | HEAPU8[$0 + 53 | 0] << 8 | (HEAPU8[$0 + 54 | 0] << 16 | HEAPU8[$0 + 55 | 0] << 24)](HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2] & (1 << HEAPU8[HEAP32[$4 + 12 >> 2] + 16 | 0]) - 1);
 }
 __stack_pointer = $4 + 16 | 0;
}

function tflite__MicroInterpreter__Invoke_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 40 >> 2] = $0;
 $0 = HEAP32[$1 + 40 >> 2];
 label$1: {
  if (HEAP32[$0 + 112 >> 2]) {
   tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$0 + 12 >> 2], 145567, 0);
   HEAP32[$1 + 44 >> 2] = 1;
   break label$1;
  }
  if (!(HEAP8[$0 + 108 | 0] & 1)) {
   HEAP32[$1 + 36 >> 2] = tflite__MicroInterpreter__AllocateTensors_28_29($0);
   if (HEAP32[$1 + 36 >> 2]) {
    HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 36 >> 2];
    break label$1;
   }
  }
  HEAP32[$1 + 32 >> 2] = 0;
  while (1) {
   if (HEAPU32[$1 + 32 >> 2] < flatbuffers__Vector_flatbuffers__Offset_tflite__Operator____size_28_29_20const(tflite__SubGraph__operators_28_29_20const(HEAP32[$0 + 116 >> 2])) >>> 0) {
    HEAP32[$1 + 28 >> 2] = HEAP32[$0 >> 2] + Math_imul(HEAP32[$1 + 32 >> 2], 28);
    HEAP32[$1 + 24 >> 2] = HEAP32[(HEAP32[$0 >> 2] + Math_imul(HEAP32[$1 + 32 >> 2], 28) | 0) + 24 >> 2];
    if (HEAP32[HEAP32[$1 + 24 >> 2] + 12 >> 2]) {
     HEAP32[$1 + 20 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$1 + 24 >> 2] + 12 >> 2]]($0 + 16 | 0, HEAP32[$1 + 28 >> 2]);
     $2 = HEAP32[$0 + 104 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2);
     if (HEAP32[$1 + 20 >> 2] == 1) {
      $0 = HEAP32[$0 + 12 >> 2];
      $2 = tflite___28anonymous_20namespace_29__OpNameFromRegistration_28TfLiteRegistration_20const__29(HEAP32[$1 + 24 >> 2]);
      $3 = HEAP32[$1 + 32 >> 2];
      HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 20 >> 2];
      HEAP32[$1 + 4 >> 2] = $3;
      HEAP32[$1 >> 2] = $2;
      tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 122400, $1);
      HEAP32[$1 + 44 >> 2] = 1;
      break label$1;
     }
     if (HEAP32[$1 + 20 >> 2]) {
      HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 20 >> 2];
      break label$1;
     }
    }
    HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 32 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$1 + 44 >> 2] = 0;
 }
 __stack_pointer = $1 + 48 | 0;
 return HEAP32[$1 + 44 >> 2];
}

function jsfBankListFiles($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 80 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 76 >> 2] = $0;
 HEAP32[$6 + 72 >> 2] = $1;
 HEAP32[$6 + 68 >> 2] = $2;
 HEAP32[$6 + 64 >> 2] = $3;
 HEAP32[$6 + 60 >> 2] = $4;
 HEAP32[$6 + 56 >> 2] = $5;
 HEAP32[$6 + 48 >> 2] = 0;
 HEAP32[$6 + 52 >> 2] = 0;
 HEAP32[$6 + 40 >> 2] = 0;
 HEAP32[$6 + 44 >> 2] = 0;
 HEAP32[$6 + 32 >> 2] = 0;
 HEAP32[$6 + 36 >> 2] = 0;
 HEAP32[$6 + 24 >> 2] = 0;
 HEAP32[$6 + 28 >> 2] = 0;
 label$1: {
  label$2: {
   if (!(!HEAP32[86759] | HEAP32[$6 + 72 >> 2] != 134217728)) {
    HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 72 >> 2];
    HEAP32[$6 + 16 >> 2] = HEAP32[86759];
    HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 16 >> 2] + HEAP32[86760];
    while (1) {
     if (HEAPU32[$6 + 16 >> 2] < HEAPU32[$6 + 12 >> 2]) {
      jshFlashRead($6 + 24 | 0, HEAP32[$6 + 16 >> 2], 4);
      HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 16 >> 2] + 32;
      HEAP32[$6 + 8 >> 2] = HEAP32[$6 + 20 >> 2] + HEAP32[$6 + 24 >> 2];
      label$6: {
       if (!(jsfGetFileHeader(HEAP32[$6 + 8 >> 2], $6 + 24 | 0, 1) & 1)) {
        break label$6;
       }
       if (!(jsfIsRealFile($6 + 24 | 0) & 1)) {
        break label$6;
       }
       jsfBankListFilesHandleFile(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 8 >> 2], $6 + 24 | 0, HEAP32[$6 + 68 >> 2], HEAP32[$6 + 64 >> 2], HEAP32[$6 + 60 >> 2], HEAP32[$6 + 56 >> 2]);
      }
      continue;
     }
     break;
    }
    HEAP32[$6 + 72 >> 2] = HEAP32[86759] - 32;
    HEAP32[$6 + 28 >> 2] = 0;
    HEAP32[$6 + 24 >> 2] = HEAP32[86760];
    break label$2;
   }
   if (!(jsfGetFileHeader(HEAP32[$6 + 72 >> 2], $6 + 24 | 0, 1) & 1)) {
    break label$1;
   }
  }
  while (1) {
   if (jsfIsRealFile($6 + 24 | 0) & 1) {
    jsfBankListFilesHandleFile(HEAP32[$6 + 76 >> 2], HEAP32[$6 + 72 >> 2], $6 + 24 | 0, HEAP32[$6 + 68 >> 2], HEAP32[$6 + 64 >> 2], HEAP32[$6 + 60 >> 2], HEAP32[$6 + 56 >> 2]);
   }
   if (jsfGetNextFileHeader($6 + 72 | 0, $6 + 24 | 0, 1) & 1) {
    continue;
   }
   break;
  }
 }
 __stack_pointer = $6 + 80 | 0;
}

function tflite__internal__InitializeTfLiteEvalTensorFromFlatbuffer_28tflite__SimpleMemoryAllocator__2c_20tflite__Tensor_20const__2c_20flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer___20const__2c_20tflite__ErrorReporter__2c_20TfLiteEvalTensor__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 48 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 40 >> 2] = $0;
 HEAP32[$5 + 36 >> 2] = $1;
 HEAP32[$5 + 32 >> 2] = $2;
 HEAP32[$5 + 28 >> 2] = $3;
 HEAP32[$5 + 24 >> 2] = $4;
 HEAP32[$5 + 8 >> 2] = 0;
 HEAP32[$5 + 12 >> 2] = 0;
 HEAP32[$5 + 16 >> 2] = 0;
 $2 = HEAP32[$5 + 12 >> 2];
 $0 = HEAP32[$5 + 8 >> 2];
 $1 = $0;
 $0 = HEAP32[$5 + 24 >> 2];
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = HEAP32[$5 + 16 >> 2];
 HEAP32[$5 + 4 >> 2] = tflite__ConvertTensorType_28tflite__TensorType_2c_20TfLiteType__2c_20tflite__ErrorReporter__29(tflite__Tensor__type_28_29_20const(HEAP32[$5 + 36 >> 2]), HEAP32[$5 + 24 >> 2] + 8 | 0, HEAP32[$5 + 28 >> 2]);
 label$1: {
  if (HEAP32[$5 + 4 >> 2]) {
   HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 4 >> 2];
   break label$1;
  }
  $0 = tflite__internal__GetFlatbufferTensorBuffer_28tflite__Tensor_20const__2c_20flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer___20const__29(HEAP32[$5 + 36 >> 2], HEAP32[$5 + 32 >> 2]);
  HEAP32[HEAP32[$5 + 24 >> 2] >> 2] = $0;
  label$3: {
   if (!tflite__Tensor__shape_28_29_20const(HEAP32[$5 + 36 >> 2])) {
    HEAP32[HEAP32[$5 + 24 >> 2] + 4 >> 2] = 172640;
    break label$3;
   }
   HEAP32[$5 >> 2] = TfLiteStatus_20tflite__internal__FlatBufferVectorToTfLiteTypeArray_int_2c_20TfLiteIntArray__28tflite__SimpleMemoryAllocator__2c_20tflite__ErrorReporter__2c_20flatbuffers__Vector_int__20const__2c_20TfLiteIntArray___29(HEAP32[$5 + 40 >> 2], HEAP32[$5 + 28 >> 2], tflite__Tensor__shape_28_29_20const(HEAP32[$5 + 36 >> 2]), HEAP32[$5 + 24 >> 2] + 4 | 0);
   if (HEAP32[$5 >> 2]) {
    HEAP32[$5 + 44 >> 2] = HEAP32[$5 >> 2];
    break label$1;
   }
  }
  HEAP32[$5 + 44 >> 2] = 0;
 }
 __stack_pointer = $5 + 48 | 0;
 return HEAP32[$5 + 44 >> 2];
}

function lcdMemLCD_scrollX($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer + -64 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 60 >> 2] = $0;
 HEAP32[$4 + 56 >> 2] = $1;
 HEAP32[$4 + 52 >> 2] = $2;
 HEAP32[$4 + 48 >> 2] = $3;
 HEAP32[$4 + 44 >> 2] = HEAP32[$4 + 56 >> 2] + 2;
 HEAP32[$4 + 40 >> 2] = HEAP32[$4 + 52 >> 2] + 2;
 label$1: {
  if (!HEAP32[$4 + 48 >> 2]) {
   __memcpy(HEAP32[$4 + 56 >> 2], HEAP32[$4 + 52 >> 2], 68);
   break label$1;
  }
  label$3: {
   if (HEAP32[$4 + 48 >> 2] < 0) {
    HEAP32[$4 + 36 >> 2] = Math_imul(HEAP32[$4 + 48 >> 2], -3);
    HEAP32[$4 + 32 >> 2] = HEAP32[$4 + 36 >> 2] >> 5;
    HEAP32[$4 + 36 >> 2] = HEAP32[$4 + 36 >> 2] & 31;
    HEAP32[$4 + 28 >> 2] = 528 - HEAP32[$4 + 36 >> 2] >> 5;
    HEAP32[$4 + 24 >> 2] = 0;
    while (1) {
     if (HEAP32[$4 + 24 >> 2] <= HEAP32[$4 + 28 >> 2]) {
      HEAP32[HEAP32[$4 + 44 >> 2] + (HEAP32[$4 + 24 >> 2] << 2) >> 2] = HEAP32[HEAP32[$4 + 40 >> 2] + ((HEAP32[$4 + 24 >> 2] + HEAP32[$4 + 32 >> 2] | 0) + 1 << 2) >> 2] << 32 - HEAP32[$4 + 36 >> 2] | HEAP32[HEAP32[$4 + 40 >> 2] + (HEAP32[$4 + 24 >> 2] + HEAP32[$4 + 32 >> 2] << 2) >> 2] >>> HEAP32[$4 + 36 >> 2];
      HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 24 >> 2] + 1;
      continue;
     }
     break;
    }
    break label$3;
   }
   HEAP32[$4 + 20 >> 2] = Math_imul(HEAP32[$4 + 48 >> 2], 3);
   HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 20 >> 2] >> 5;
   HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 20 >> 2] & 31;
   HEAP32[$4 + 12 >> 2] = 543 - HEAP32[$4 + 20 >> 2] >> 5;
   HEAP32[$4 + 8 >> 2] = 0;
   while (1) {
    if (HEAP32[$4 + 8 >> 2] <= HEAP32[$4 + 12 >> 2]) {
     HEAP32[HEAP32[$4 + 44 >> 2] + (HEAP32[$4 + 8 >> 2] << 2) >> 2] = HEAP32[HEAP32[$4 + 40 >> 2] + (HEAP32[$4 + 8 >> 2] - HEAP32[$4 + 16 >> 2] << 2) >> 2] << HEAP32[$4 + 20 >> 2] | HEAP32[HEAP32[$4 + 40 >> 2] + (HEAP32[$4 + 8 >> 2] - (HEAP32[$4 + 16 >> 2] + 1 | 0) << 2) >> 2] >>> 32 - HEAP32[$4 + 20 >> 2];
     HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 8 >> 2] + 1;
     continue;
    }
    break;
   }
  }
 }
 __stack_pointer = $4 - -64 | 0;
}

function jswrap_interface_edit($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP32[$1 + 24 >> 2] = 0;
 label$1: {
  if (jsvIsString(HEAP32[$1 + 28 >> 2]) & 1) {
   HEAP32[$1 + 28 >> 2] = jsvLockAgain(HEAP32[$1 + 28 >> 2]);
   HEAP32[$1 + 24 >> 2] = jsvSkipNameAndUnLock(jsvFindChildFromVar(HEAP32[86750], HEAP32[$1 + 28 >> 2], 0));
   break label$1;
  }
  HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 28 >> 2];
  HEAP32[$1 + 28 >> 2] = jsvGetPathTo(HEAP32[86750], HEAP32[$1 + 24 >> 2], 4, 0);
 }
 label$3: {
  if (jsvIsString(HEAP32[$1 + 28 >> 2]) & 1) {
   if (jsvIsFunction(HEAP32[$1 + 24 >> 2]) & 1) {
    HEAP32[$1 + 20 >> 2] = jsvFindChildFromString(HEAP32[$1 + 24 >> 2], 117081);
    HEAP32[$1 + 16 >> 2] = jsvGetIndexOf(HEAP32[86750], HEAP32[$1 + 24 >> 2], 1);
    $2 = HEAP32[$1 + 20 >> 2] ? $2 : HEAP32[$1 + 16 >> 2] != 0;
    HEAP8[$1 + 15 | 0] = $2;
    jsvUnLock2(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 20 >> 2]);
    HEAP32[$1 + 8 >> 2] = jsvNewFromEmptyString_10();
    if (HEAP32[$1 + 8 >> 2]) {
     HEAP32[$1 + 4 >> 2] = jsvAsString(HEAP32[$1 + 24 >> 2]);
     label$8: {
      if (HEAP8[$1 + 15 | 0] & 1) {
       jsvAppendString(HEAP32[$1 + 8 >> 2], 144102);
       jsvAppendStringVarComplete(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 28 >> 2]);
       jsvAppendStringVar(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 4 >> 2], 9, 2147483647);
       break label$8;
      }
      jsvAppendStringVarComplete(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 28 >> 2]);
      jsvAppendString(HEAP32[$1 + 8 >> 2], 143229);
      jsvAppendStringVarComplete(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 4 >> 2]);
      jsvAppendString(HEAP32[$1 + 8 >> 2], 125734);
     }
     jsvUnLock(HEAP32[$1 + 4 >> 2]);
     jsiReplaceInputLine(HEAP32[$1 + 8 >> 2]);
     jsvUnLock(HEAP32[$1 + 8 >> 2]);
    }
    break label$3;
   }
   jsExceptionHere(1, 117246, 0);
   break label$3;
  }
  jsExceptionHere(1, 143132, 0);
 }
 jsvUnLock2(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 28 >> 2]);
 __stack_pointer = $1 + 32 | 0;
}

function atan($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 wasm2js_scratch_store_f64(+$0);
 $4 = wasm2js_scratch_load_i32(1) | 0;
 wasm2js_scratch_load_i32(0) | 0;
 $1 = $4 & 2147483647;
 if ($1 >>> 0 >= 1141899264) {
  wasm2js_scratch_store_f64(1.5707963267948966);
  $1 = wasm2js_scratch_load_i32(1) | 0;
  $4 = wasm2js_scratch_load_i32(0) | 0;
  $7 = $4;
  $2 = $1 & 2147483647;
  $8 = $2;
  wasm2js_scratch_store_f64(+$0);
  $2 = wasm2js_scratch_load_i32(1) | 0;
  wasm2js_scratch_load_i32(0) | 0;
  $4 = $2 & -2147483648;
  $1 = $4;
  $2 = $7;
  wasm2js_scratch_store_i32(0, $9 | $2);
  $4 = $8;
  $1 = $4 | $1;
  wasm2js_scratch_store_i32(1, $1 | 0);
  $5 = +wasm2js_scratch_load_f64();
  $1 = __DOUBLE_BITS_12($0);
  $4 = $1;
  $2 = i64toi32_i32$HIGH_BITS;
  $1 = $2 & 2147483647;
  $2 = $4;
  return ($1 | 0) == 2146435072 & ($2 | 0) != 0 | $1 >>> 0 > 2146435072 ? $0 : $5;
 }
 label$2: {
  label$3: {
   if ($1 >>> 0 <= 1071382527) {
    $2 = -1;
    if ($1 >>> 0 >= 1044381696) {
     break label$3;
    }
    break label$2;
   }
   $0 = fabs($0);
   if ($1 >>> 0 <= 1072889855) {
    if ($1 >>> 0 <= 1072037887) {
     $0 = ($0 + $0 + -1) / ($0 + 2);
     $2 = 0;
     break label$3;
    }
    $0 = ($0 + -1) / ($0 + 1);
    $2 = 1;
    break label$3;
   }
   if ($1 >>> 0 <= 1073971199) {
    $0 = ($0 + -1.5) / ($0 * 1.5 + 1);
    $2 = 2;
    break label$3;
   }
   $0 = -1 / $0;
   $2 = 3;
  }
  $6 = $0 * $0;
  $3 = $6 * $6;
  $5 = $3 * ($3 * ($3 * ($3 * ($3 * -.036531572744216916 + -.058335701337905735) + -.0769187620504483) + -.11111110405462356) + -.19999999999876483);
  $3 = $6 * ($3 * ($3 * ($3 * ($3 * ($3 * .016285820115365782 + .049768779946159324) + .06661073137387531) + .09090887133436507) + .14285714272503466) + .3333333333333293);
  if ($1 >>> 0 <= 1071382527) {
   return $0 - $0 * ($5 + $3);
  }
  $1 = $2 << 3;
  $0 = HEAPF64[$1 + 173056 >> 3] - ($0 * ($5 + $3) - HEAPF64[$1 + 173088 >> 3] - $0);
  $2 = $4;
  $0 = ($2 | 0) < 0 ? -$0 : $0;
 }
 return $0;
}

function jsvCreateConfigObject($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = jsvNewObject();
 label$1: {
  if (!HEAP32[$2 + 16 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 + 12 >> 2] < HEAP32[$2 + 20 >> 2]) {
    if (HEAP32[(HEAP32[$2 + 24 >> 2] + Math_imul(HEAP32[$2 + 12 >> 2], 12) | 0) + 8 >> 2]) {
     HEAP32[$2 + 8 >> 2] = 0;
     label$6: {
      label$7: {
       switch (HEAPU16[(HEAP32[$2 + 24 >> 2] + Math_imul(HEAP32[$2 + 12 >> 2], 12) | 0) + 4 >> 1] - 3 | 0) {
       case 0:
       case 2:
       case 4:
       case 25:
        HEAP32[$2 + 8 >> 2] = jsvLockAgain(HEAP32[HEAP32[(HEAP32[$2 + 24 >> 2] + Math_imul(HEAP32[$2 + 12 >> 2], 12) | 0) + 8 >> 2] >> 2]);
        break label$6;

       case 10:
        HEAP32[$2 + 8 >> 2] = jsvNewFromPin(HEAPU8[HEAP32[(HEAP32[$2 + 24 >> 2] + Math_imul(HEAP32[$2 + 12 >> 2], 12) | 0) + 8 >> 2]]);
        break label$6;

       case 9:
        HEAP32[$2 + 8 >> 2] = jsvNewFromBool(HEAP8[HEAP32[(HEAP32[$2 + 24 >> 2] + Math_imul(HEAP32[$2 + 12 >> 2], 12) | 0) + 8 >> 2]] & 1);
        break label$6;

       case 7:
        HEAP32[$2 + 8 >> 2] = jsvNewFromInteger(HEAP32[HEAP32[(HEAP32[$2 + 24 >> 2] + Math_imul(HEAP32[$2 + 12 >> 2], 12) | 0) + 8 >> 2] >> 2]);
        break label$6;

       case 8:
        break label$7;

       default:
        break label$6;
       }
      }
      HEAP32[$2 + 8 >> 2] = jsvNewFromFloat(HEAPF64[HEAP32[(HEAP32[$2 + 24 >> 2] + Math_imul(HEAP32[$2 + 12 >> 2], 12) | 0) + 8 >> 2] >> 3]);
     }
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 16 >> 2], HEAP32[HEAP32[$2 + 24 >> 2] + Math_imul(HEAP32[$2 + 12 >> 2], 12) >> 2], HEAP32[$2 + 8 >> 2]);
    }
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jsserialEventCallback($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 47 | 0] = $0;
 HEAP8[$2 + 46 | 0] = $1;
 HEAP32[$2 + 40 >> 2] = jsserialGetSerialList(0);
 label$1: {
  if (!HEAP32[$2 + 40 >> 2]) {
   break label$1;
  }
  HEAP32[$2 + 36 >> 2] = jsvGetArrayItem(HEAP32[$2 + 40 >> 2], HEAPU8[$2 + 46 | 0]);
  if (!HEAP32[$2 + 36 >> 2]) {
   break label$1;
  }
  HEAP32[$2 + 32 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 36 >> 2], 122990);
  HEAP32[$2 + 28 >> 2] = jsvGetFlatStringPointer(HEAP32[$2 + 32 >> 2]);
  if (!HEAP32[$2 + 28 >> 2]) {
   break label$1;
  }
  HEAP32[$2 + 16 >> 2] = jshGetSystemTime();
  HEAP32[$2 + 20 >> 2] = i64toi32_i32$HIGH_BITS;
  $5 = HEAP32[$2 + 20 >> 2];
  $3 = HEAP32[$2 + 28 >> 2];
  $1 = HEAP32[$3 + 72 >> 2];
  $0 = HEAP32[$3 + 76 >> 2];
  $3 = HEAP32[$2 + 16 >> 2];
  $0 = $0 + ($1 >>> 0 > $3 >>> 0) | 0;
  HEAP32[$2 + 8 >> 2] = $3 - $1;
  $0 = $5 - $0 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  $3 = HEAP32[$2 + 20 >> 2];
  $0 = HEAP32[$2 + 16 >> 2];
  $1 = $0;
  $0 = HEAP32[$2 + 28 >> 2];
  HEAP32[$0 + 72 >> 2] = $1;
  HEAP32[$0 + 76 >> 2] = $3;
  HEAP8[$2 + 7 | 0] = (HEAPU8[$2 + 47 | 0] ^ -1) & 1;
  $3 = HEAP32[$2 + 8 >> 2];
  $0 = HEAP32[$2 + 12 >> 2];
  $4 = jshGetMillisecondsFromTime($3, $0) * +HEAP32[HEAP32[$2 + 28 >> 2] + 80 >> 2] / 1e3 + .5;
  label$2: {
   if (Math_abs($4) < 2147483648) {
    $0 = ~~$4;
    break label$2;
   }
   $0 = -2147483648;
  }
  HEAP32[$2 >> 2] = $0;
  if (!(HEAPU8[HEAP32[$2 + 28 >> 2] + 88 | 0] | !(HEAP8[$2 + 7 | 0] & 1)) | HEAP32[$2 >> 2] > 12) {
   break label$1;
  }
  if (HEAP8[$2 + 7 | 0] & 1) {
   $0 = HEAP32[$2 + 28 >> 2];
   HEAP32[$0 + 84 >> 2] = HEAP32[$0 + 84 >> 2] | (1 << HEAP32[$2 >> 2]) - 1 << HEAPU8[HEAP32[$2 + 28 >> 2] + 88 | 0];
  }
  $0 = HEAP32[$2 + 28 >> 2];
  HEAP8[$0 + 88 | 0] = HEAP32[$2 >> 2] + HEAPU8[$0 + 88 | 0];
  jsserialCheckForCharacter(HEAP32[$2 + 28 >> 2]);
 }
 __stack_pointer = $2 + 48 | 0;
}

function jsvSkipNameWithParent($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP8[$3 + 23 | 0] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 label$1: {
  if (!HEAP32[$3 + 24 >> 2]) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  if (jsvIsArrayBufferName(HEAP32[$3 + 24 >> 2]) & 1) {
   HEAP32[$3 + 28 >> 2] = jsvArrayBufferGetFromName(HEAP32[$3 + 24 >> 2]);
   break label$1;
  }
  if (jsvIsNameInt(HEAP32[$3 + 24 >> 2]) & 1) {
   HEAP32[$3 + 28 >> 2] = jsvNewFromInteger(jsvGetFirstChildSigned(HEAP32[$3 + 24 >> 2]) << 16 >> 16);
   break label$1;
  }
  if (jsvIsNameIntBool(HEAP32[$3 + 24 >> 2]) & 1) {
   HEAP32[$3 + 28 >> 2] = jsvNewFromBool((jsvGetFirstChild(HEAP32[$3 + 24 >> 2]) & 65535) != 0);
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = jsvLockAgain(HEAP32[$3 + 24 >> 2]);
  while (1) {
   if (jsvIsName(HEAP32[$3 + 12 >> 2]) & 1) {
    HEAP16[$3 + 10 >> 1] = jsvGetFirstChild(HEAP32[$3 + 12 >> 2]);
    jsvUnLock(HEAP32[$3 + 12 >> 2]);
    if (!HEAPU16[$3 + 10 >> 1]) {
     if (HEAP32[$3 + 12 >> 2] == HEAP32[$3 + 24 >> 2]) {
      jsvCheckReferenceError(HEAP32[$3 + 24 >> 2]);
     }
     HEAP32[$3 + 28 >> 2] = 0;
     break label$1;
    }
    HEAP32[$3 + 12 >> 2] = jsvLock(HEAPU16[$3 + 10 >> 1]);
    if (HEAP8[$3 + 23 | 0] & 1) {
     continue;
    }
   }
   break;
  }
  if (jsvIsGetterOrSetter(HEAP32[$3 + 12 >> 2]) & 1) {
   label$11: {
    if (jsvIsNewChild(HEAP32[$3 + 24 >> 2]) & 1) {
     $0 = jsvLock(jsvGetNextSibling(HEAP32[$3 + 24 >> 2]) & 65535);
     break label$11;
    }
    $0 = 0;
   }
   HEAP32[$3 + 4 >> 2] = $0;
   if (HEAP32[$3 + 4 >> 2]) {
    $0 = HEAP32[$3 + 4 >> 2];
   } else {
    $0 = HEAP32[$3 + 16 >> 2];
   }
   HEAP32[$3 >> 2] = jsvExecuteGetter($0, HEAP32[$3 + 12 >> 2]);
   jsvUnLock2(HEAP32[$3 + 4 >> 2], HEAP32[$3 + 12 >> 2]);
   HEAP32[$3 + 12 >> 2] = HEAP32[$3 >> 2];
  }
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2];
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function jswrap_espruino_FFT($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 $3 = $4;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP8[$3 + 39 | 0] = $2;
 label$1: {
  label$2: {
   if (jsvIsIterable(HEAP32[$3 + 44 >> 2]) & 1) {
    if (jsvIsUndefined(HEAP32[$3 + 40 >> 2]) & 1) {
     break label$2;
    }
    if (jsvIsIterable(HEAP32[$3 + 40 >> 2]) & 1) {
     break label$2;
    }
   }
   $0 = HEAP32[$3 + 44 >> 2];
   HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 40 >> 2];
   HEAP32[$3 >> 2] = $0;
   jsExceptionHere(1, 114673, $3);
   break label$1;
  }
  HEAP32[$3 + 32 >> 2] = jsvGetLength(HEAP32[$3 + 44 >> 2]);
  HEAP32[$3 + 28 >> 2] = 1;
  HEAP32[$3 + 24 >> 2] = 0;
  while (1) {
   if (HEAPU32[$3 + 28 >> 2] < HEAPU32[$3 + 32 >> 2]) {
    HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 28 >> 2] << 1;
    HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 24 >> 2] + 1;
    continue;
   }
   break;
  }
  if (jsuGetFreeStack() >>> 0 < (HEAP32[$3 + 28 >> 2] << 4) + 256 >>> 0) {
   jsExceptionHere(1, 123834, 0);
   break label$1;
  }
  $4 = $4 - (HEAP32[$3 + 28 >> 2] << 4) | 0;
  __stack_pointer = $4;
  HEAP32[$3 + 20 >> 2] = $4;
  HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 20 >> 2] + (HEAP32[$3 + 28 >> 2] << 3);
  _jswrap_espruino_FFT_getData(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 44 >> 2], HEAP32[$3 + 28 >> 2]);
  _jswrap_espruino_FFT_getData(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 40 >> 2], HEAP32[$3 + 28 >> 2]);
  FFT((HEAP8[$3 + 39 | 0] & 1 ? -1 : 1) << 16 >> 16, HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2]);
  HEAP8[$3 + 15 | 0] = jsvIsIterable(HEAP32[$3 + 40 >> 2]) & 1;
  _jswrap_espruino_FFT_setData(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 20 >> 2], HEAP8[$3 + 15 | 0] & 1 ? 0 : HEAP32[$3 + 16 >> 2], HEAP32[$3 + 28 >> 2]);
  if (!(HEAP8[$3 + 15 | 0] & 1)) {
   break label$1;
  }
  _jswrap_espruino_FFT_setData(HEAP32[$3 + 40 >> 2], HEAP32[$3 + 16 >> 2], 0, HEAP32[$3 + 28 >> 2]);
 }
 __stack_pointer = $3 + 48 | 0;
}

function jsvGarbageCollectMarkUsed($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 $2 = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 65279;
 HEAP8[$0 + 12 | 0] = $2;
 HEAP8[$0 + 13 | 0] = $2 >>> 8;
 if (jsvHasStringExt(HEAP32[$1 + 8 >> 2]) & 1) {
  HEAP16[$1 + 6 >> 1] = jsvGetLastChild(HEAP32[$1 + 8 >> 2]);
  while (1) {
   if (HEAPU16[$1 + 6 >> 1]) {
    HEAP32[$1 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 6 >> 1]);
    $0 = HEAP32[$1 >> 2];
    $2 = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 65279;
    HEAP8[$0 + 12 | 0] = $2;
    HEAP8[$0 + 13 | 0] = $2 >>> 8;
    HEAP16[$1 + 6 >> 1] = jsvGetLastChild(HEAP32[$1 >> 2]);
    continue;
   }
   break;
  }
 }
 label$4: {
  label$5: {
   if (jsvHasSingleChild(HEAP32[$1 + 8 >> 2]) & 1) {
    if (jsvGetFirstChild(HEAP32[$1 + 8 >> 2]) & 65535) {
     HEAP32[$1 >> 2] = jsvGetAddressOf(jsvGetFirstChild(HEAP32[$1 + 8 >> 2]) & 65535);
     $0 = HEAP32[$1 >> 2];
     if ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 256) {
      if (!(jsvGarbageCollectMarkUsed(HEAP32[$1 >> 2]) & 1)) {
       HEAP8[$1 + 15 | 0] = 0;
       break label$4;
      }
     }
    }
    break label$5;
   }
   if (jsvHasChildren(HEAP32[$1 + 8 >> 2]) & 1) {
    if (jsuGetFreeStack() >>> 0 < 256) {
     HEAP8[$1 + 15 | 0] = 0;
     break label$4;
    }
    HEAP16[$1 + 6 >> 1] = jsvGetFirstChild(HEAP32[$1 + 8 >> 2]);
    while (1) {
     if (HEAPU16[$1 + 6 >> 1]) {
      HEAP32[$1 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 6 >> 1]);
      $0 = HEAP32[$1 >> 2];
      if ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 256) {
       if (!(jsvGarbageCollectMarkUsed(HEAP32[$1 >> 2]) & 1)) {
        HEAP8[$1 + 15 | 0] = 0;
        break label$4;
       }
      }
      HEAP16[$1 + 6 >> 1] = jsvGetNextSibling(HEAP32[$1 >> 2]);
      continue;
     }
     break;
    }
   }
  }
  HEAP8[$1 + 15 | 0] = 1;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}

function tflite__QuantizeMultiplier_28double_2c_20int__2c_20int__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAPF64[$3 + 24 >> 3] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 label$1: {
  if (HEAPF64[$3 + 24 >> 3] == 0) {
   HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 0;
   HEAP32[HEAP32[$3 + 16 >> 2] >> 2] = 0;
   break label$1;
  }
  HEAPF64[$3 + 8 >> 3] = frexp(HEAPF64[$3 + 24 >> 3], HEAP32[$3 + 16 >> 2]);
  $0 = double_20tflite__TfLiteRound_double__28double_29(HEAPF64[$3 + 8 >> 3] * 2147483648);
  label$3: {
   if (Math_abs($0) < 0x8000000000000000) {
    $2 = Math_abs($0) >= 1 ? ~~($0 > 0 ? Math_min(Math_floor($0 * 2.3283064365386963e-10), 4294967295) : Math_ceil(($0 - +(~~$0 >>> 0 >>> 0)) * 2.3283064365386963e-10)) >>> 0 : 0;
    $5 = ~~$0 >>> 0;
    break label$3;
   }
   $2 = -2147483648;
  }
  $4 = $3;
  HEAP32[$4 >> 2] = $5;
  HEAP32[$4 + 4 >> 2] = $2;
  $2 = HEAP32[$3 >> 2];
  $5 = $2;
  $4 = HEAP32[$3 + 4 >> 2];
  if ($5 >>> 0 > 2147483648 & ($4 | 0) >= 0 | ($4 | 0) > 0) {
   abort();
   abort();
  }
  $5 = HEAP32[$3 >> 2];
  $1 = $5;
  $4 = HEAP32[$3 + 4 >> 2];
  if (!$4 & ($1 | 0) == -2147483648) {
   $1 = HEAP32[$3 >> 2];
   $4 = HEAP32[$3 + 4 >> 2];
   $1 = __wasm_i64_sdiv($1, $4, 2, 0);
   HEAP32[$3 >> 2] = $1;
   $4 = i64toi32_i32$HIGH_BITS;
   HEAP32[$3 + 4 >> 2] = $4;
   $1 = HEAP32[$3 + 16 >> 2];
   HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + 1;
  }
  $4 = HEAP32[$3 >> 2];
  $6 = $4;
  $1 = HEAP32[$3 + 4 >> 2];
  $2 = $1;
  $4 = std____2__numeric_limits_int___max_28_29();
  $1 = $4 >> 31;
  $5 = $4;
  $4 = $1;
  $1 = $2;
  $2 = $6;
  if (($4 | 0) <= ($1 | 0) & $2 >>> 0 > $5 >>> 0 | ($1 | 0) > ($4 | 0)) {
   abort();
   abort();
  }
  if (HEAP32[HEAP32[$3 + 16 >> 2] >> 2] < -31) {
   HEAP32[HEAP32[$3 + 16 >> 2] >> 2] = 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
  }
  $2 = HEAP32[$3 >> 2];
  HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = $2;
 }
 __stack_pointer = $3 + 32 | 0;
}

function jswrap_process_memory($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 44 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = -1;
 label$1: {
  if (!(jsvIsUndefined(HEAP32[$1 + 44 >> 2]) & 1)) {
   if (!(jsvGetBool(HEAP32[$1 + 44 >> 2]) & 1)) {
    break label$1;
   }
  }
  HEAP32[$1 + 32 >> 2] = jshGetSystemTime();
  HEAP32[$1 + 36 >> 2] = i64toi32_i32$HIGH_BITS;
  HEAP32[$1 + 20 >> 2] = jsvGarbageCollect();
  HEAP32[$1 + 24 >> 2] = jshGetSystemTime();
  HEAP32[$1 + 28 >> 2] = i64toi32_i32$HIGH_BITS;
 }
 HEAP32[$1 + 16 >> 2] = jsvNewObject();
 if (HEAP32[$1 + 16 >> 2]) {
  HEAP32[$1 + 12 >> 2] = 0;
  HEAP32[$1 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[86751], 111590);
  if (HEAP32[$1 + 8 >> 2]) {
   HEAP32[$1 + 12 >> 2] = jsvCountJsVarsUsed(HEAP32[$1 + 8 >> 2]);
   jsvUnLock(HEAP32[$1 + 8 >> 2]);
  }
  HEAP32[$1 + 4 >> 2] = jsvGetMemoryUsage() - HEAP32[$1 + 12 >> 2];
  HEAP32[$1 >> 2] = jsvGetMemoryTotal();
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 16 >> 2], 120390, jsvNewFromInteger(HEAP32[$1 >> 2] - HEAP32[$1 + 4 >> 2] | 0));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 16 >> 2], 120340, jsvNewFromInteger(HEAP32[$1 + 4 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 16 >> 2], 118098, jsvNewFromInteger(HEAP32[$1 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 16 >> 2], 111590, jsvNewFromInteger(HEAP32[$1 + 12 >> 2]));
  if (HEAP32[$1 + 20 >> 2] >= 0) {
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 16 >> 2], 122849, jsvNewFromInteger(HEAP32[$1 + 20 >> 2]));
   $2 = HEAP32[$1 + 24 >> 2];
   $3 = HEAP32[$1 + 32 >> 2];
   $0 = HEAP32[$1 + 36 >> 2] + ($2 >>> 0 < $3 >>> 0) | 0;
   $0 = HEAP32[$1 + 28 >> 2] - $0 | 0;
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 16 >> 2], 120021, jsvNewFromFloat(jshGetMillisecondsFromTime($2 - $3 | 0, $0)));
  }
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 16 >> 2], 119180, jsvNewFromInteger(14));
 }
 __stack_pointer = $1 + 48 | 0;
 return HEAP32[$1 + 16 >> 2];
}

function _jswrap_array_sort($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 160 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 156 >> 2] = $0;
 HEAP32[$3 + 152 >> 2] = $1;
 HEAP32[$3 + 148 >> 2] = $2;
 label$1: {
  if (HEAP32[$3 + 152 >> 2] < 2) {
   break label$1;
  }
  jsvIteratorClone($3 + 88 | 0, HEAP32[$3 + 156 >> 2]);
  HEAP8[$3 + 87 | 0] = 1;
  HEAP32[$3 + 80 >> 2] = jsvIteratorGetValue($3 + 88 | 0);
  HEAP32[$3 + 76 >> 2] = 0;
  HEAP32[$3 + 72 >> 2] = 0;
  jsvIteratorClone($3 + 8 | 0, HEAP32[$3 + 156 >> 2]);
  jsvIteratorNext($3 + 8 | 0);
  while (1) {
   $0 = HEAP32[$3 + 152 >> 2] - 1 | 0;
   HEAP32[$3 + 152 >> 2] = $0;
   $1 = 0;
   if ($0) {
    $1 = jspIsInterrupted() ^ -1;
   }
   if ($1 & 1) {
    HEAP32[$3 + 4 >> 2] = jsvIteratorGetValue($3 + 8 | 0);
    HEAP32[$3 >> 2] = _jswrap_array_sort_compare(HEAP32[$3 + 4 >> 2], HEAP32[$3 + 80 >> 2], HEAP32[$3 + 148 >> 2]);
    label$5: {
     if (HEAP32[$3 >> 2] <= 0) {
      if (HEAP32[$3 >> 2] < 0) {
       HEAP8[$3 + 87 | 0] = 0;
      }
      HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 76 >> 2] + 1;
      jsvIteratorSetValue($3 + 88 | 0, HEAP32[$3 + 4 >> 2]);
      jsvIteratorNext($3 + 88 | 0);
      jsvUnLock(jsvIteratorSetValue($3 + 8 | 0, jsvIteratorGetValue($3 + 88 | 0)));
      jsvIteratorSetValue($3 + 88 | 0, HEAP32[$3 + 80 >> 2]);
      break label$5;
     }
     HEAP32[$3 + 72 >> 2] = HEAP32[$3 + 72 >> 2] + 1;
    }
    jsvUnLock(HEAP32[$3 + 4 >> 2]);
    jsvIteratorNext($3 + 8 | 0);
    continue;
   }
   break;
  }
  jsvIteratorFree($3 + 8 | 0);
  jsvUnLock(HEAP32[$3 + 80 >> 2]);
  if (jspIsInterrupted() & 1) {
   jsvIteratorFree($3 + 88 | 0);
   break label$1;
  }
  jsvIteratorNext($3 + 88 | 0);
  _jswrap_array_sort($3 + 88 | 0, HEAP32[$3 + 72 >> 2], HEAP32[$3 + 148 >> 2]);
  jsvIteratorFree($3 + 88 | 0);
  if (HEAP8[$3 + 87 | 0] & 1) {
   break label$1;
  }
  _jswrap_array_sort(HEAP32[$3 + 156 >> 2], HEAP32[$3 + 76 >> 2], HEAP32[$3 + 148 >> 2]);
 }
 __stack_pointer = $3 + 160 | 0;
}

function tflite__MicroInterpreter__output_28unsigned_20long_29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 $0 = HEAP32[$2 + 24 >> 2];
 HEAP32[$2 + 16 >> 2] = tflite__MicroInterpreter__outputs_size_28_29_20const($0);
 label$1: {
  if (HEAPU32[$2 + 20 >> 2] >= HEAPU32[$2 + 16 >> 2]) {
   $0 = HEAP32[$0 + 12 >> 2];
   $1 = HEAP32[$2 + 20 >> 2];
   HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 16 >> 2];
   HEAP32[$2 >> 2] = $1;
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 142961, $2);
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$2 + 20 >> 2]) {
   tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$0 + 12 >> 2], 143509, 0);
   $1 = HEAP32[$0 + 104 >> 2];
   HEAP32[$2 + 28 >> 2] = (wasm2js_i32$1 = $1, wasm2js_i32$2 = HEAP32[$0 + 4 >> 2], 
   wasm2js_i32$3 = HEAP32[$0 + 120 >> 2], wasm2js_i32$4 = flatbuffers__Vector_int___Get_28unsigned_20int_29_20const(tflite__MicroInterpreter__outputs_28_29_20const($0), HEAP32[$2 + 20 >> 2]), 
   wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0, wasm2js_i32$4 | 0) | 0);
   break label$1;
  }
  if (!HEAP32[$0 + 148 >> 2]) {
   $1 = HEAP32[$0 + 104 >> 2];
   HEAP32[$0 + 148 >> 2] = (wasm2js_i32$4 = $1, wasm2js_i32$3 = HEAP32[$0 + 4 >> 2], 
   wasm2js_i32$2 = HEAP32[$0 + 120 >> 2], wasm2js_i32$1 = flatbuffers__Vector_int___Get_28unsigned_20int_29_20const(tflite__MicroInterpreter__outputs_28_29_20const($0), HEAP32[$2 + 20 >> 2]), 
   wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$4 | 0, wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0) | 0);
  }
  HEAP32[$2 + 28 >> 2] = HEAP32[$0 + 148 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function tflite__MicroInterpreter__input_28unsigned_20long_29($0, $1) {
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 $0 = HEAP32[$2 + 24 >> 2];
 HEAP32[$2 + 16 >> 2] = tflite__MicroInterpreter__inputs_size_28_29_20const($0);
 label$1: {
  if (HEAPU32[$2 + 20 >> 2] >= HEAPU32[$2 + 16 >> 2]) {
   $0 = HEAP32[$0 + 12 >> 2];
   $1 = HEAP32[$2 + 20 >> 2];
   HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 16 >> 2];
   HEAP32[$2 >> 2] = $1;
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 143005, $2);
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$2 + 20 >> 2]) {
   tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$0 + 12 >> 2], 143630, 0);
   $1 = HEAP32[$0 + 104 >> 2];
   HEAP32[$2 + 28 >> 2] = (wasm2js_i32$1 = $1, wasm2js_i32$2 = HEAP32[$0 + 4 >> 2], 
   wasm2js_i32$3 = HEAP32[$0 + 120 >> 2], wasm2js_i32$4 = flatbuffers__Vector_int___Get_28unsigned_20int_29_20const(tflite__MicroInterpreter__inputs_28_29_20const($0), HEAP32[$2 + 20 >> 2]), 
   wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0, wasm2js_i32$4 | 0) | 0);
   break label$1;
  }
  if (!HEAP32[$0 + 144 >> 2]) {
   $1 = HEAP32[$0 + 104 >> 2];
   HEAP32[$0 + 144 >> 2] = (wasm2js_i32$4 = $1, wasm2js_i32$3 = HEAP32[$0 + 4 >> 2], 
   wasm2js_i32$2 = HEAP32[$0 + 120 >> 2], wasm2js_i32$1 = flatbuffers__Vector_int___Get_28unsigned_20int_29_20const(tflite__MicroInterpreter__inputs_28_29_20const($0), HEAP32[$2 + 20 >> 2]), 
   wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$4 | 0, wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0) | 0);
  }
  HEAP32[$2 + 28 >> 2] = HEAP32[$0 + 144 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jsvIsStringNumericInt($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 80 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP8[$2 + 71 | 0] = $1;
 jsvStringIteratorNew($2 + 32 | 0, HEAP32[$2 + 72 >> 2], 0);
 while (1) {
  $0 = 0;
  if (jsvStringIteratorHasChar_1($2 + 32 | 0) & 1) {
   $0 = isWhitespace(jsvStringIteratorGetChar_1($2 + 32 | 0) << 24 >> 24);
  }
  if ($0 & 1) {
   jsvStringIteratorNext($2 + 32 | 0);
   continue;
  }
  break;
 }
 label$4: {
  if ((jsvStringIteratorGetChar_1($2 + 32 | 0) & 255) != 45) {
   if ((jsvStringIteratorGetChar_1($2 + 32 | 0) & 255) != 43) {
    break label$4;
   }
  }
  jsvStringIteratorNext($2 + 32 | 0);
 }
 HEAP32[$2 + 28 >> 2] = 0;
 if ((jsvStringIteratorGetChar_1($2 + 32 | 0) & 255) == 48) {
  jsvStringIteratorNext($2 + 32 | 0);
  HEAP8[$2 + 25 | 0] = 48;
  HEAP8[$2 + 26 | 0] = jsvStringIteratorGetChar_1($2 + 32 | 0);
  HEAP8[$2 + 27 | 0] = 0;
  HEAP32[$2 + 20 >> 2] = $2 + 25;
  HEAP32[$2 + 28 >> 2] = getRadix($2 + 20 | 0);
  if (HEAPU32[$2 + 20 >> 2] > $2 + 26 >>> 0) {
   jsvStringIteratorNext($2 + 32 | 0);
  }
 }
 if (!HEAP32[$2 + 28 >> 2]) {
  HEAP32[$2 + 28 >> 2] = 10;
 }
 HEAP32[$2 + 16 >> 2] = 0;
 label$9: {
  while (1) {
   if (jsvStringIteratorHasChar_1($2 + 32 | 0) & 1) {
    HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 16 >> 2] + 1;
    HEAP8[$2 + 15 | 0] = jsvStringIteratorGetCharAndNext($2 + 32 | 0);
    label$12: {
     if (!(!(HEAP8[$2 + 71 | 0] & 1) | HEAP8[$2 + 15 | 0] != 46)) {
      HEAP8[$2 + 71 | 0] = 0;
      break label$12;
     }
     HEAP32[$2 + 8 >> 2] = chtod(HEAP8[$2 + 15 | 0]);
     if (!(HEAP32[$2 + 8 >> 2] < HEAP32[$2 + 28 >> 2] & HEAP32[$2 + 8 >> 2] >= 0)) {
      jsvStringIteratorFree_1($2 + 32 | 0);
      HEAP8[$2 + 79 | 0] = 0;
      break label$9;
     }
    }
    continue;
   }
   break;
  }
  jsvStringIteratorFree_1($2 + 32 | 0);
  HEAP8[$2 + 79 | 0] = HEAP32[$2 + 16 >> 2] > 0;
 }
 __stack_pointer = $2 + 80 | 0;
 return HEAP8[$2 + 79 | 0] & 1;
}

function jsiDebuggerLoop() {
 var $0 = 0, $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 if (!(HEAPU16[173534] & 10)) {
  HEAP32[86758] = HEAP32[86758] & -63489;
  jsiClearInputLine(1);
  jsiConsoleRemoveInputLine();
  HEAP16[173534] = HEAPU16[173534] & -4 | 8;
  if (HEAP32[44743]) {
   HEAP8[$1 + 23 | 0] = 0;
   HEAP32[$1 + 16 >> 2] = strlen($1 + 23 | 0);
   while (1) {
    if (HEAPU32[$1 + 16 >> 2] < 8) {
     $0 = HEAP32[$1 + 16 >> 2];
     HEAP32[$1 + 16 >> 2] = $0 + 1;
     HEAP8[($1 + 23 | 0) + $0 | 0] = 32;
     continue;
    }
    break;
   }
   HEAP8[HEAP32[$1 + 16 >> 2] + ($1 + 23 | 0) | 0] = 0;
   jslPrintTokenLineMarker(7, 0, HEAP32[HEAP32[44743] + 8 >> 2], $1 + 23 | 0);
  }
  while (1) {
   $0 = 0;
   $0 = HEAPU16[173534] & 16 ? $0 : (HEAP32[86758] & 6144) != 0 ^ -1;
   if ($0 & 1) {
    jsiConsoleReturnInputLine();
    jshIdle();
    while (1) {
     $0 = 0;
     label$9: {
      if ((jshGetEventsUsed() | 0) <= 127) {
       break label$9;
      }
      $0 = 0;
      if (HEAPU16[173534] & 16) {
       break label$9;
      }
      $0 = (HEAP32[86758] & 6144) != 0 ^ -1;
     }
     if ($0 & 1) {
      if (!(jshPopIOEvent($1 + 8 | 0) & 1) | HEAPU8[178544] != (HEAPU8[$1 + 8 | 0] & 31)) {
       continue;
      }
      jsiHandleIOEventForConsole($1 + 8 | 0);
      continue;
     }
     break;
    }
    while (1) {
     $0 = 0;
     label$12: {
      if (!(jshPopIOEventOfType(HEAPU8[178544], $1 + 8 | 0) & 1)) {
       break label$12;
      }
      $0 = 0;
      if (HEAPU16[173534] & 16) {
       break label$12;
      }
      $0 = (HEAP32[86758] & 6144) != 0 ^ -1;
     }
     if ($0 & 1) {
      jsiHandleIOEventForConsole($1 + 8 | 0);
      continue;
     }
     break;
    }
    continue;
   }
   break;
  }
  jsiConsoleRemoveInputLine();
  if (HEAP32[86758] & 6144) {
   HEAP32[86758] = HEAP32[86758] | 16;
  }
  HEAP16[173534] = HEAPU16[173534] & -25;
 }
 __stack_pointer = $1 + 32 | 0;
}

function _jswrap_graphics_getRect($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 144 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 140 >> 2] = $0;
 HEAP32[$6 + 136 >> 2] = $1;
 HEAP32[$6 + 132 >> 2] = $2;
 HEAP32[$6 + 128 >> 2] = $3;
 HEAP32[$6 + 124 >> 2] = $4;
 HEAP32[$6 + 120 >> 2] = $5;
 HEAP32[HEAP32[$6 + 120 >> 2] >> 2] = 0;
 label$1: {
  if (jsvIsObject(HEAP32[$6 + 140 >> 2]) & 1) {
   HEAP32[$6 + 116 >> 2] = -1;
   HEAP32[$6 + 112 >> 2] = -1;
   HEAP32[$6 >> 2] = 111928;
   HEAP16[$6 + 4 >> 1] = 10;
   HEAP32[$6 + 8 >> 2] = HEAP32[$6 + 136 >> 2];
   HEAP32[$6 + 12 >> 2] = 111841;
   HEAP16[$6 + 16 >> 1] = 10;
   HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 132 >> 2];
   HEAP32[$6 + 24 >> 2] = 126579;
   HEAP16[$6 + 28 >> 1] = 10;
   HEAP32[$6 + 32 >> 2] = HEAP32[$6 + 136 >> 2];
   HEAP32[$6 + 36 >> 2] = 126576;
   HEAP16[$6 + 40 >> 1] = 10;
   HEAP32[$6 + 44 >> 2] = HEAP32[$6 + 132 >> 2];
   HEAP32[$6 + 48 >> 2] = 126272;
   HEAP16[$6 + 52 >> 1] = 10;
   HEAP32[$6 + 56 >> 2] = HEAP32[$6 + 128 >> 2];
   HEAP32[$6 + 60 >> 2] = 126269;
   HEAP16[$6 + 64 >> 1] = 10;
   HEAP32[$6 + 68 >> 2] = HEAP32[$6 + 124 >> 2];
   HEAP32[$6 + 72 >> 2] = 112181;
   HEAP16[$6 + 76 >> 1] = 10;
   HEAP32[$6 + 80 >> 2] = $6 + 116;
   HEAP32[$6 + 84 >> 2] = 118679;
   HEAP16[$6 + 88 >> 1] = 10;
   HEAP32[$6 + 92 >> 2] = $6 + 112;
   HEAP32[$6 + 96 >> 2] = 116640;
   HEAP16[$6 + 100 >> 1] = 10;
   HEAP32[$6 + 104 >> 2] = HEAP32[$6 + 120 >> 2];
   jsvReadConfigObject(HEAP32[$6 + 140 >> 2], $6, 9);
   if (HEAP32[$6 + 116 >> 2] >= 0) {
    HEAP32[HEAP32[$6 + 128 >> 2] >> 2] = HEAP32[HEAP32[$6 + 136 >> 2] >> 2] + HEAP32[$6 + 116 >> 2];
   }
   if (HEAP32[$6 + 112 >> 2] >= 0) {
    HEAP32[HEAP32[$6 + 124 >> 2] >> 2] = HEAP32[HEAP32[$6 + 132 >> 2] >> 2] + HEAP32[$6 + 112 >> 2];
   }
   break label$1;
  }
  $0 = jsvGetInteger(HEAP32[$6 + 140 >> 2]);
  HEAP32[HEAP32[$6 + 136 >> 2] >> 2] = $0;
 }
 __stack_pointer = $6 + 144 | 0;
}

function jshPopIOEventOfType($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 14 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 label$1: {
  if (HEAPU8[$2 + 14 | 0] == (HEAPU8[Math_imul(HEAPU8[347149], 5) + 347744 | 0] & 31)) {
   HEAP8[$2 + 15 | 0] = jshPopIOEvent(HEAP32[$2 + 8 >> 2]) & 1;
   break label$1;
  }
  HEAP8[$2 + 7 | 0] = HEAPU8[347149];
  while (1) {
   if (HEAPU8[347148] != HEAPU8[$2 + 7 | 0]) {
    if (HEAPU8[$2 + 14 | 0] == (HEAPU8[Math_imul(HEAPU8[$2 + 7 | 0], 5) + 347744 | 0] & 31)) {
     jshInterruptOff();
     $0 = HEAP32[$2 + 8 >> 2];
     $1 = Math_imul(HEAPU8[$2 + 7 | 0], 5) + 347744 | 0;
     $3 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
     HEAP8[$0 | 0] = $3;
     HEAP8[$0 + 1 | 0] = $3 >>> 8;
     HEAP8[$0 + 2 | 0] = $3 >>> 16;
     HEAP8[$0 + 3 | 0] = $3 >>> 24;
     HEAP8[$0 + 4 | 0] = HEAPU8[$1 + 4 | 0];
     HEAP8[$2 + 6 | 0] = HEAPU8[$2 + 7 | 0] + 255;
     while (1) {
      if (HEAPU8[$2 + 6 | 0] != HEAPU8[347149]) {
       $0 = Math_imul(HEAPU8[$2 + 7 | 0], 5) + 347744 | 0;
       $1 = Math_imul(HEAPU8[$2 + 6 | 0], 5) + 347744 | 0;
       $3 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
       HEAP8[$0 | 0] = $3;
       HEAP8[$0 + 1 | 0] = $3 >>> 8;
       HEAP8[$0 + 2 | 0] = $3 >>> 16;
       HEAP8[$0 + 3 | 0] = $3 >>> 24;
       HEAP8[$0 + 4 | 0] = HEAPU8[$1 + 4 | 0];
       HEAP8[$2 + 7 | 0] = HEAPU8[$2 + 6 | 0];
       HEAP8[$2 + 6 | 0] = HEAPU8[$2 + 6 | 0] + 255;
       continue;
      }
      break;
     }
     HEAP8[347149] = HEAPU8[347149] + 1;
     jshInterruptOn();
     HEAP8[$2 + 15 | 0] = 1;
     break label$1;
    } else {
     HEAP8[$2 + 7 | 0] = HEAPU8[$2 + 7 | 0] + 1;
     continue;
    }
   }
   break;
  }
  HEAP8[$2 + 15 | 0] = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP8[$2 + 15 | 0] & 1;
}

function jswBinarySearch($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP32[$3 + 32 >> 2] = $2;
 HEAP8[$3 + 31 | 0] = HEAPU8[HEAP32[$3 + 40 >> 2] + 8 | 0];
 HEAP32[$3 + 24 >> 2] = 0;
 HEAP32[$3 + 20 >> 2] = HEAPU8[$3 + 31 | 0] - 1;
 label$1: {
  while (1) {
   if (HEAP32[$3 + 24 >> 2] <= HEAP32[$3 + 20 >> 2]) {
    HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 24 >> 2] + HEAP32[$3 + 20 >> 2] >> 1;
    $0 = HEAP32[$3 + 40 >> 2];
    HEAP32[$3 + 12 >> 2] = (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) + (HEAP32[$3 + 16 >> 2] << 3);
    $0 = HEAP32[$3 + 40 >> 2];
    $1 = HEAP32[$3 + 12 >> 2];
    HEAP32[$3 + 8 >> 2] = strcmp(HEAP32[$3 + 32 >> 2], (HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24)) + (HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8) | 0);
    if (HEAP32[$3 + 8 >> 2]) {
     if (HEAP32[$3 + 8 >> 2] < 0) {
      HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 16 >> 2] - 1;
      continue;
     }
     HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 16 >> 2] + 1;
     continue;
    } else {
     $0 = HEAP32[$3 + 12 >> 2];
     HEAP16[$3 + 6 >> 1] = HEAPU8[$0 + 2 | 0] | HEAPU8[$0 + 3 | 0] << 8;
     if ((HEAPU16[$3 + 6 >> 1] & 32256) == 28672) {
      $0 = HEAP32[$3 + 12 >> 2];
      HEAP32[$3 + 44 >> 2] = jsnCallFunction(HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24), HEAPU16[$3 + 6 >> 1], HEAP32[$3 + 36 >> 2], 0, 0);
      break label$1;
     }
     $0 = HEAP32[$3 + 12 >> 2];
     HEAP32[$3 + 44 >> 2] = jsvNewNativeFunction(HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24), HEAPU16[$3 + 6 >> 1]);
     break label$1;
    }
   }
   break;
  }
  HEAP32[$3 + 44 >> 2] = 0;
 }
 __stack_pointer = $3 + 48 | 0;
 return HEAP32[$3 + 44 >> 2];
}

function jswrap_waveform_constructor($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1: {
  if (HEAP32[$2 + 40 >> 2] <= 0) {
   jsExceptionHere(1, 126716, 0);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP8[$2 + 35 | 0] = 0;
  HEAP8[$2 + 34 | 0] = 0;
  label$3: {
   if (jsvIsObject(HEAP32[$2 + 36 >> 2]) & 1) {
    HEAP8[$2 + 35 | 0] = jsvObjectGetBoolChild(HEAP32[$2 + 36 >> 2], 116514) & 1;
    HEAP32[$2 + 28 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 36 >> 2], 115121);
    if (!(!HEAP32[$2 + 28 >> 2] | HEAP32[$2 + 28 >> 2] == 8 | HEAP32[$2 + 28 >> 2] == 16)) {
     jsExceptionHere(1, 115103, 0);
     HEAP32[$2 + 44 >> 2] = 0;
     break label$1;
    }
    if (HEAP32[$2 + 28 >> 2] == 16) {
     HEAP8[$2 + 34 | 0] = 1;
    }
    break label$3;
   }
   if (!(jsvIsUndefined(HEAP32[$2 + 36 >> 2]) & 1)) {
    HEAP32[$2 >> 2] = HEAP32[$2 + 36 >> 2];
    jsExceptionHere(1, 113343, $2);
   }
  }
  HEAP8[$2 + 27 | 0] = HEAP8[$2 + 34 | 0] & 1 ? 2 : 1;
  HEAP32[$2 + 20 >> 2] = jsvNewTypedArray(HEAPU8[$2 + 27 | 0], HEAP32[$2 + 40 >> 2]);
  HEAP32[$2 + 16 >> 2] = 0;
  if (HEAP8[$2 + 35 | 0] & 1) {
   HEAP32[$2 + 16 >> 2] = jsvNewTypedArray(HEAPU8[$2 + 27 | 0], HEAP32[$2 + 40 >> 2]);
  }
  HEAP32[$2 + 12 >> 2] = jspNewObject(0, 117661);
  if (HEAP32[$2 + 16 >> 2] | !(HEAP8[$2 + 35 | 0] & 1) ? !HEAP32[$2 + 12 >> 2] | !HEAP32[$2 + 20 >> 2] : 1) {
   jsvUnLock3(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 16 >> 2]);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 12 >> 2], 116403, HEAP32[$2 + 20 >> 2]);
  if (HEAP32[$2 + 16 >> 2]) {
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 12 >> 2], 126275, HEAP32[$2 + 16 >> 2]);
  }
  HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function jsvIsStringEqualOrStartsWithOffset($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 80 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 72 >> 2] = $0;
 HEAP32[$5 + 68 >> 2] = $1;
 HEAP8[$5 + 67 | 0] = $2;
 HEAP32[$5 + 60 >> 2] = $3;
 HEAP8[$5 + 59 | 0] = $4;
 label$1: {
  if (!(jsvHasCharacterData(HEAP32[$5 + 72 >> 2]) & 1)) {
   HEAP8[$5 + 79 | 0] = 0;
   break label$1;
  }
  jsvStringIteratorNew($5 + 16 | 0, HEAP32[$5 + 72 >> 2], HEAP32[$5 + 60 >> 2]);
  label$3: {
   if (HEAP8[$5 + 59 | 0] & 1) {
    while (1) {
     $0 = 0;
     label$6: {
      if (!(jsvStringIteratorHasChar_1($5 + 16 | 0) & 1)) {
       break label$6;
      }
      $0 = 0;
      if (!HEAP8[HEAP32[$5 + 68 >> 2]]) {
       break label$6;
      }
      $0 = (charToLowerCase(jsvStringIteratorGetChar_1($5 + 16 | 0) << 24 >> 24) & 255) == (charToLowerCase(HEAP8[HEAP32[$5 + 68 >> 2]]) & 255);
     }
     if ($0) {
      HEAP32[$5 + 68 >> 2] = HEAP32[$5 + 68 >> 2] + 1;
      jsvStringIteratorNext($5 + 16 | 0);
      continue;
     }
     break;
    }
    break label$3;
   }
   while (1) {
    $0 = 0;
    label$9: {
     if (!(jsvStringIteratorHasChar_1($5 + 16 | 0) & 1)) {
      break label$9;
     }
     $0 = 0;
     if (!HEAP8[HEAP32[$5 + 68 >> 2]]) {
      break label$9;
     }
     $0 = (jsvStringIteratorGetChar_1($5 + 16 | 0) & 255) == HEAPU8[HEAP32[$5 + 68 >> 2]];
    }
    if ($0) {
     HEAP32[$5 + 68 >> 2] = HEAP32[$5 + 68 >> 2] + 1;
     jsvStringIteratorNext($5 + 16 | 0);
     continue;
    }
    break;
   }
  }
  label$11: {
   if (HEAP8[$5 + 67 | 0] & 1) {
    $0 = 1;
    if (!HEAPU8[HEAP32[$5 + 68 >> 2]]) {
     break label$11;
    }
   }
   $0 = (jsvStringIteratorGetChar_1($5 + 16 | 0) & 255) == HEAPU8[HEAP32[$5 + 68 >> 2]];
  }
  HEAP8[$5 + 15 | 0] = $0;
  jsvStringIteratorFree_1($5 + 16 | 0);
  HEAP8[$5 + 79 | 0] = HEAP8[$5 + 15 | 0] & 1;
 }
 __stack_pointer = $5 + 80 | 0;
 return HEAP8[$5 + 79 | 0] & 1;
}

function jswrap_banglejs_buzz($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAPF64[$2 + 32 >> 3] = $1;
 __DOUBLE_BITS_2(HEAPF64[$2 + 32 >> 3]);
 $0 = i64toi32_i32$HIGH_BITS & 2147483647;
 if (HEAPF64[$2 + 32 >> 3] > 1 ? 1 : ($0 | 0) == 2146435072 | $0 >>> 0 > 2146435072) {
  HEAPF64[$2 + 32 >> 3] = 1;
 }
 if (HEAPF64[$2 + 32 >> 3] < 0) {
  HEAPF64[$2 + 32 >> 3] = 0;
 }
 if (HEAP32[$2 + 40 >> 2] <= 0) {
  HEAP32[$2 + 40 >> 2] = 200;
 }
 if (HEAP32[$2 + 40 >> 2] > 5e3) {
  HEAP32[$2 + 40 >> 2] = 5e3;
 }
 label$7: {
  if (HEAP32[93454]) {
   HEAP32[$2 + 28 >> 2] = jsvNewNativeFunction(139, 481);
   HEAP32[$2 + 24 >> 2] = jsvNewFromInteger(HEAP32[$2 + 40 >> 2]);
   jsvAddFunctionParameter(HEAP32[$2 + 28 >> 2], 0, HEAP32[$2 + 24 >> 2]);
   jsvUnLock(HEAP32[$2 + 24 >> 2]);
   HEAP32[$2 + 24 >> 2] = jsvNewFromFloat(HEAPF64[$2 + 32 >> 3]);
   jsvAddFunctionParameter(HEAP32[$2 + 28 >> 2], 0, HEAP32[$2 + 24 >> 2]);
   jsvUnLock(HEAP32[$2 + 24 >> 2]);
   HEAP32[$2 + 20 >> 2] = jswrap_promise_then(HEAP32[93454], HEAP32[$2 + 28 >> 2], 0);
   jsvUnLock(HEAP32[$2 + 28 >> 2]);
   HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 20 >> 2];
   break label$7;
  }
  HEAP32[93454] = jspromise_create();
  if (!HEAP32[93454]) {
   HEAP32[$2 + 44 >> 2] = 0;
   break label$7;
  }
  $1 = HEAPF64[$2 + 32 >> 3] * 255;
  label$10: {
   if ($1 < 4294967296 & $1 >= 0) {
    $0 = ~~$1 >>> 0;
    break label$10;
   }
   $0 = 0;
  }
  HEAP8[373792] = $0;
  $3 = jshGetTimeFromMilliseconds(+HEAP32[$2 + 40 >> 2]);
  $0 = i64toi32_i32$HIGH_BITS;
  label$12: {
   if (jstExecuteFn(594, 0, $3, $0, 0, 0) & 1) {
    if (HEAP32[93413] & 512) {
     _jswrap_banglejs_setVibration();
    }
    break label$12;
   }
   HEAP8[373792] = 0;
  }
  HEAP32[$2 + 44 >> 2] = jsvLockAgain(HEAP32[93454]);
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function lcdMemLCD_scroll($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $7 = 0;
 $7 = __stack_pointer - 128 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 124 >> 2] = $0;
 HEAP32[$7 + 120 >> 2] = $1;
 HEAP32[$7 + 116 >> 2] = $2;
 HEAP32[$7 + 112 >> 2] = $3;
 HEAP32[$7 + 108 >> 2] = $4;
 HEAP32[$7 + 104 >> 2] = $5;
 HEAP32[$7 + 100 >> 2] = $6;
 lcdMemLCD_waitForSendComplete();
 label$1: {
  if (!(!HEAP32[$7 + 112 >> 2] & HEAP32[$7 + 104 >> 2] == 175)) {
   graphicsFallbackScroll(HEAP32[$7 + 124 >> 2], HEAP32[$7 + 120 >> 2], HEAP32[$7 + 116 >> 2], HEAP32[$7 + 112 >> 2], HEAP32[$7 + 108 >> 2], HEAP32[$7 + 104 >> 2], HEAP32[$7 + 100 >> 2]);
   break label$1;
  }
  if (HEAP32[$7 + 116 >> 2] <= 0) {
   HEAP32[$7 + 12 >> 2] = HEAP32[$7 + 108 >> 2];
   while (1) {
    if (HEAP32[$7 + 12 >> 2] <= (HEAP32[$7 + 100 >> 2] + HEAP32[$7 + 116 >> 2] | 0)) {
     HEAP32[$7 + 8 >> 2] = HEAP32[$7 + 12 >> 2] - HEAP32[$7 + 116 >> 2];
     lcdMemLCD_scrollX(HEAP32[$7 + 124 >> 2], $7 + 16 | 0, Math_imul(HEAP32[$7 + 8 >> 2], 68) + 361504 | 0, HEAP32[$7 + 120 >> 2]);
     __memcpy(Math_imul(HEAP32[$7 + 12 >> 2], 68) + 361506 | 0, $7 + 18 | 0, 66);
     HEAP32[$7 + 12 >> 2] = HEAP32[$7 + 12 >> 2] + 1;
     continue;
    }
    break;
   }
   break label$1;
  }
  if (HEAP32[$7 + 116 >> 2] > 0) {
   HEAP32[$7 + 4 >> 2] = HEAP32[$7 + 100 >> 2] - HEAP32[$7 + 116 >> 2];
   while (1) {
    if (HEAP32[$7 + 4 >> 2] >= HEAP32[$7 + 108 >> 2]) {
     HEAP32[$7 >> 2] = HEAP32[$7 + 4 >> 2] + HEAP32[$7 + 116 >> 2];
     lcdMemLCD_scrollX(HEAP32[$7 + 124 >> 2], $7 + 16 | 0, Math_imul(HEAP32[$7 + 4 >> 2], 68) + 361504 | 0, HEAP32[$7 + 120 >> 2]);
     __memcpy(Math_imul(HEAP32[$7 >> 2], 68) + 361506 | 0, $7 + 18 | 0, 66);
     HEAP32[$7 + 4 >> 2] = HEAP32[$7 + 4 >> 2] - 1;
     continue;
    }
    break;
   }
  }
 }
 __stack_pointer = $7 + 128 | 0;
}

function jsserialEventCallbackInit($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = jsvNewFlatStringOfLength(96);
 label$1: {
  if (!HEAP32[$2 + 16 >> 2]) {
   jsExceptionHere(1, 123504, 0);
   HEAP8[$2 + 31 | 0] = 0;
   break label$1;
  }
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 122990, HEAP32[$2 + 16 >> 2]);
  HEAP32[$2 + 12 >> 2] = jsvGetFlatStringPointer(HEAP32[$2 + 16 >> 2]);
  HEAP8[HEAP32[$2 + 12 >> 2] + 64 | 0] = 0;
  $0 = jshGetSystemTime();
  $1 = $0;
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 72 >> 2] = $1;
  HEAP32[$0 + 76 >> 2] = i64toi32_i32$HIGH_BITS;
  $0 = HEAP32[$2 + 20 >> 2];
  HEAP32[HEAP32[$2 + 12 >> 2] + 80 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
  HEAP32[HEAP32[$2 + 12 >> 2] + 84 >> 2] = 0;
  HEAP8[HEAP32[$2 + 12 >> 2] + 88 | 0] = 0;
  HEAP8[HEAP32[$2 + 12 >> 2] + 89 | 0] = !!HEAPU8[HEAP32[$2 + 20 >> 2] + 9 | 0] + (HEAPU8[HEAP32[$2 + 20 >> 2] + 8 | 0] + HEAPU8[HEAP32[$2 + 20 >> 2] + 10 | 0] | 0);
  HEAP8[$2 + 11 | 0] = jshPinWatch(HEAPU8[HEAP32[$2 + 20 >> 2] + 4 | 0], 1, 1);
  label$3: {
   if (HEAPU8[$2 + 11 | 0]) {
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 118351, jsvNewFromInteger(HEAPU8[$2 + 11 | 0]));
    HEAP32[$2 + 4 >> 2] = jsserialGetSerialList(1);
    if (!HEAP32[$2 + 4 >> 2]) {
     HEAP8[$2 + 31 | 0] = 0;
     break label$1;
    }
    jsvSetArrayItem(HEAP32[$2 + 4 >> 2], HEAPU8[$2 + 11 | 0], HEAP32[$2 + 24 >> 2]);
    jsvUnLock(HEAP32[$2 + 4 >> 2]);
    jshSetEventCallback(HEAPU8[$2 + 11 | 0], 561);
    break label$3;
   }
   HEAP32[$2 >> 2] = HEAPU8[HEAP32[$2 + 20 >> 2] + 4 | 0];
   jsExceptionHere(1, 123542, $2);
   HEAP8[$2 + 31 | 0] = 0;
   break label$1;
  }
  HEAP8[$2 + 31 | 0] = 1;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP8[$2 + 31 | 0] & 1;
}

function lcdGetPixelIndex_ArrayBuffer($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 $0 = HEAP32[$4 + 24 >> 2];
 if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 1 & (HEAP32[$4 + 16 >> 2] & 1)) {
  $0 = HEAP32[$4 + 24 >> 2];
  HEAP32[$4 + 20 >> 2] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) - (HEAP32[$4 + 20 >> 2] + HEAP32[$4 + 12 >> 2] | 0);
 }
 $0 = HEAP32[$4 + 24 >> 2];
 label$3: {
  if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 8) {
   $0 = HEAP32[$4 + 24 >> 2];
   HEAP32[$4 + 8 >> 2] = (HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8) >>> 1;
   HEAP32[$4 + 4 >> 2] = 0;
   if (HEAP32[$4 + 16 >> 2] >= HEAP32[$4 + 8 >> 2]) {
    HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 16 >> 2] - HEAP32[$4 + 8 >> 2];
    HEAP32[$4 + 4 >> 2] = HEAPU8[HEAP32[$4 + 24 >> 2] + 16 | 0];
   }
   $0 = HEAP32[$4 + 24 >> 2];
   HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 4 >> 2] + Math_imul(HEAP32[$4 + 20 >> 2] + Math_imul(HEAP32[$4 + 16 >> 2], HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) | 0, HEAPU8[HEAP32[$4 + 24 >> 2] + 16 | 0] << 1);
   break label$3;
  }
  $0 = HEAP32[$4 + 24 >> 2];
  if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 2) {
   $0 = HEAP32[$4 + 24 >> 2];
   HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 16 >> 2] & 7 | HEAP32[$4 + 20 >> 2] + Math_imul(HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8, HEAP32[$4 + 16 >> 2] >> 3) << 3;
   break label$3;
  }
  $0 = HEAP32[$4 + 24 >> 2];
  HEAP32[$4 + 28 >> 2] = Math_imul(HEAPU8[HEAP32[$4 + 24 >> 2] + 16 | 0], HEAP32[$4 + 20 >> 2] + Math_imul(HEAP32[$4 + 16 >> 2], HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) | 0);
 }
 return HEAP32[$4 + 28 >> 2];
}

function tflite__ConvertTensorType_28tflite__TensorType_2c_20TfLiteType__2c_20tflite__ErrorReporter__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 label$1: {
  label$2: {
   switch (HEAP32[$3 + 24 >> 2]) {
   case 1:
    HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 10;
    HEAP32[$3 + 28 >> 2] = 0;
    break label$1;

   case 0:
    HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 1;
    HEAP32[$3 + 28 >> 2] = 0;
    break label$1;

   case 10:
    HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 11;
    HEAP32[$3 + 28 >> 2] = 0;
    break label$1;

   case 7:
    HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 7;
    HEAP32[$3 + 28 >> 2] = 0;
    break label$1;

   case 2:
    HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 2;
    HEAP32[$3 + 28 >> 2] = 0;
    break label$1;

   case 3:
    HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 3;
    HEAP32[$3 + 28 >> 2] = 0;
    break label$1;

   case 9:
    HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 9;
    HEAP32[$3 + 28 >> 2] = 0;
    break label$1;

   case 4:
    HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 4;
    HEAP32[$3 + 28 >> 2] = 0;
    break label$1;

   case 5:
    HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 5;
    HEAP32[$3 + 28 >> 2] = 0;
    break label$1;

   case 6:
    HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 6;
    HEAP32[$3 + 28 >> 2] = 0;
    break label$1;

   case 8:
    HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 8;
    HEAP32[$3 + 28 >> 2] = 0;
    break label$1;

   case 11:
    HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 12;
    HEAP32[$3 + 28 >> 2] = 0;
    break label$1;

   default:
    break label$2;
   }
  }
  HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = 0;
  $0 = HEAP32[$3 + 16 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$3 + 24 >> 2];
  tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 145339, $3);
  HEAP32[$3 + 28 >> 2] = 1;
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function jswrap_onewire_select($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = __stack_pointer - 80 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 76 >> 2] = $0;
 HEAP32[$2 + 72 >> 2] = $1;
 HEAP8[$2 + 71 | 0] = onewire_getpin(HEAP32[$2 + 76 >> 2]);
 label$1: {
  if (!(jshIsPinValid(HEAPU8[$2 + 71 | 0]) & 1)) {
   break label$1;
  }
  label$2: {
   if (jsvIsString(HEAP32[$2 + 72 >> 2]) & 1) {
    if ((jsvGetStringLength(HEAP32[$2 + 72 >> 2]) | 0) == 16) {
     break label$2;
    }
   }
   HEAP32[$2 >> 2] = HEAP32[$2 + 72 >> 2];
   jsExceptionHere(3, 116658, $2);
   break label$1;
  }
  OneWireReset(HEAPU8[$2 + 71 | 0]);
  HEAP32[$2 + 56 >> 2] = 0;
  HEAP32[$2 + 60 >> 2] = 0;
  jsvStringIteratorNew($2 + 16 | 0, HEAP32[$2 + 72 >> 2], 0);
  HEAP32[$2 + 12 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 + 12 >> 2] < 8) {
    HEAP8[$2 + 9 | 0] = jsvStringIteratorGetCharAndNext($2 + 16 | 0);
    HEAP8[$2 + 10 | 0] = jsvStringIteratorGetCharAndNext($2 + 16 | 0);
    HEAP8[$2 + 11 | 0] = 0;
    $1 = HEAP32[$2 + 56 >> 2];
    $5 = $1;
    $0 = HEAP32[$2 + 60 >> 2];
    $6 = $0;
    $0 = stringToIntWithRadix($2 + 9 | 0, 16, 0, 0);
    $1 = i64toi32_i32$HIGH_BITS;
    $3 = $0;
    $0 = HEAP32[$2 + 12 >> 2] << 3;
    $4 = $0 & 31;
    if (($0 & 63) >>> 0 >= 32) {
     $0 = $3 << $4;
     $4 = 0;
    } else {
     $0 = (1 << $4) - 1 & $3 >>> 32 - $4 | $1 << $4;
     $4 = $3 << $4;
    }
    $3 = $0;
    $1 = $5;
    $0 = $4;
    $0 = $1 | $0;
    $1 = $2;
    HEAP32[$1 + 56 >> 2] = $0;
    $0 = $6;
    $3 = $0 | $3;
    HEAP32[$1 + 60 >> 2] = $3;
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
    continue;
   }
   break;
  }
  jsvStringIteratorFree_13($2 + 16 | 0);
  OneWireWrite(HEAPU8[$2 + 71 | 0], 8, 85, 0);
  $3 = HEAP32[$2 + 56 >> 2];
  $1 = HEAP32[$2 + 60 >> 2];
  OneWireWrite(HEAPU8[$2 + 71 | 0], 64, $3, $1);
 }
 __stack_pointer = $2 + 80 | 0;
}

function _jswrap_array_reverse_block($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 176 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 172 >> 2] = $0;
 HEAP32[$3 + 168 >> 2] = $1;
 HEAP32[$3 + 164 >> 2] = $2;
 jsvIteratorClone($3 + 104 | 0, HEAP32[$3 + 168 >> 2]);
 jsvIteratorClone($3 + 40 | 0, HEAP32[$3 + 168 >> 2]);
 HEAP32[$3 + 36 >> 2] = (HEAP32[$3 + 164 >> 2] + 1 | 0) / 2;
 while (1) {
  if (HEAP32[$3 + 36 >> 2] > 0) {
   jsvIteratorNext($3 + 40 | 0);
   HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 36 >> 2] - 1;
   continue;
  }
  break;
 }
 if (HEAP32[$3 + 164 >> 2] > 3) {
  _jswrap_array_reverse_block(HEAP32[$3 + 172 >> 2], $3 + 104 | 0, HEAP32[$3 + 164 >> 2] / 2 | 0);
  _jswrap_array_reverse_block(HEAP32[$3 + 172 >> 2], $3 + 40 | 0, HEAP32[$3 + 164 >> 2] / 2 | 0);
 }
 HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 164 >> 2] / 2;
 while (1) {
  if (HEAP32[$3 + 36 >> 2] > 0) {
   HEAP32[$3 + 32 >> 2] = jsvIteratorGetValue($3 + 104 | 0);
   HEAP32[$3 + 28 >> 2] = jsvIteratorGetValue($3 + 40 | 0);
   jsvIteratorSetValue($3 + 104 | 0, HEAP32[$3 + 28 >> 2]);
   jsvIteratorSetValue($3 + 40 | 0, HEAP32[$3 + 32 >> 2]);
   jsvUnLock2(HEAP32[$3 + 32 >> 2], HEAP32[$3 + 28 >> 2]);
   if (jsvIsArray(HEAP32[$3 + 172 >> 2]) & 1) {
    HEAP32[$3 + 24 >> 2] = jsvIteratorGetKey($3 + 104 | 0);
    HEAP32[$3 + 20 >> 2] = jsvIteratorGetKey($3 + 40 | 0);
    HEAP32[$3 + 16 >> 2] = jsvGetInteger(HEAP32[$3 + 24 >> 2]);
    HEAP32[$3 + 12 >> 2] = jsvGetInteger(HEAP32[$3 + 20 >> 2]);
    jsvSetInteger(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 12 >> 2]);
    jsvSetInteger(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2]);
    jsvUnLock2(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
   }
   jsvIteratorNext($3 + 104 | 0);
   jsvIteratorNext($3 + 40 | 0);
   HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 36 >> 2] - 1;
   continue;
  }
  break;
 }
 jsvIteratorFree($3 + 104 | 0);
 jsvIteratorFree($3 + 40 | 0);
 __stack_pointer = $3 + 176 | 0;
}

function jswrap_math_mod($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 80 | 0;
 __stack_pointer = $2;
 HEAPF64[$2 + 64 >> 3] = $0;
 HEAPF64[$2 + 56 >> 3] = $1;
 HEAPF64[$2 + 32 >> 3] = HEAPF64[$2 + 64 >> 3];
 $3 = __DOUBLE_BITS_6(HEAPF64[$2 + 64 >> 3]);
 $5 = $3;
 $4 = i64toi32_i32$HIGH_BITS;
 $3 = $4 & 2147483647;
 label$1: {
  label$2: {
   label$3: {
    if (($3 | 0) == 2146435072 | $3 >>> 0 > 2146435072) {
     break label$3;
    }
    $4 = __DOUBLE_BITS_6(HEAPF64[$2 + 56 >> 3]);
    $5 = $4;
    $3 = i64toi32_i32$HIGH_BITS;
    $4 = $3 & 2147483647;
    $3 = $5;
    if (($4 | 0) == 2146435072 & ($3 | 0) != 0 | $4 >>> 0 > 2146435072) {
     break label$3;
    }
    break label$2;
   }
   HEAPF64[$2 + 72 >> 3] = nan;
   break label$1;
  }
  if (HEAPF64[$2 + 32 >> 3] < 0) {
   HEAPF64[$2 + 64 >> 3] = -HEAPF64[$2 + 64 >> 3];
  }
  if (HEAPF64[$2 + 56 >> 3] < 0) {
   HEAPF64[$2 + 56 >> 3] = -HEAPF64[$2 + 56 >> 3];
  }
  label$7: {
   if (!(!(HEAPF64[$2 + 64 >> 3] <= 17976931348623157e292) | (!(HEAPF64[$2 + 56 >> 3] <= 17976931348623157e292) | HEAPF64[$2 + 56 >> 3] == 0))) {
    while (1) {
     if (HEAPF64[$2 + 64 >> 3] >= HEAPF64[$2 + 56 >> 3]) {
      HEAPF64[$2 + 48 >> 3] = HEAPF64[$2 + 64 >> 3] * .5;
      HEAPF64[$2 + 40 >> 3] = HEAPF64[$2 + 56 >> 3];
      while (1) {
       if (HEAPF64[$2 + 48 >> 3] >= HEAPF64[$2 + 40 >> 3]) {
        $0 = HEAPF64[$2 + 40 >> 3];
        HEAPF64[$2 + 40 >> 3] = $0 + $0;
        continue;
       }
       break;
      }
      HEAPF64[$2 + 64 >> 3] = HEAPF64[$2 + 64 >> 3] - HEAPF64[$2 + 40 >> 3];
      continue;
     }
     break;
    }
    break label$7;
   }
   HEAPF64[$2 + 64 >> 3] = 0;
  }
  if (HEAPF64[$2 + 32 >> 3] < 0) {
   $0 = -HEAPF64[$2 + 64 >> 3];
  } else {
   $0 = HEAPF64[$2 + 64 >> 3];
  }
  HEAPF64[$2 + 72 >> 3] = $0;
 }
 __stack_pointer = $2 + 80 | 0;
 return HEAPF64[$2 + 72 >> 3];
}

function jswGetSymbolListForConstructorProto($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 + 4 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
 label$1: {
  if (HEAP32[$1 + 4 >> 2] == 10) {
   HEAP32[$1 + 12 >> 2] = 157613;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 11) {
   HEAP32[$1 + 12 >> 2] = 157676;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 12) {
   HEAP32[$1 + 12 >> 2] = 157694;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 13) {
   HEAP32[$1 + 12 >> 2] = 157703;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 14) {
   HEAP32[$1 + 12 >> 2] = 157712;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 15) {
   HEAP32[$1 + 12 >> 2] = 157721;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 16) {
   HEAP32[$1 + 12 >> 2] = 157730;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 17) {
   HEAP32[$1 + 12 >> 2] = 157739;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 18) {
   HEAP32[$1 + 12 >> 2] = 157811;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 19) {
   HEAP32[$1 + 12 >> 2] = 157883;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 20) {
   HEAP32[$1 + 12 >> 2] = 157901;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 21) {
   HEAP32[$1 + 12 >> 2] = 157919;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 22) {
   HEAP32[$1 + 12 >> 2] = 157937;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 23) {
   HEAP32[$1 + 12 >> 2] = 157955;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 24) {
   HEAP32[$1 + 12 >> 2] = 157973;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 25) {
   HEAP32[$1 + 12 >> 2] = 157982;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2] == 26) {
   HEAP32[$1 + 12 >> 2] = 158027;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 return HEAP32[$1 + 12 >> 2];
}

function jsvGetDataPointer($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  if (jsvIsArrayBuffer(HEAP32[$2 + 24 >> 2]) & 1) {
   HEAP32[$2 + 16 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$2 + 24 >> 2], 0);
   HEAP32[$2 + 12 >> 2] = jsvGetDataPointer(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 20 >> 2]);
   jsvUnLock(HEAP32[$2 + 16 >> 2]);
   if (HEAP32[$2 + 12 >> 2]) {
    $0 = HEAP32[$2 + 24 >> 2];
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8);
    $0 = HEAP32[$2 + 24 >> 2];
    HEAP32[HEAP32[$2 + 20 >> 2] >> 2] = HEAPU8[$0 + 4 | 0] << 16 | (HEAPU8[$0 + 2 | 0] | HEAPU8[$0 + 3 | 0] << 8);
   }
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
   break label$1;
  }
  if (jsvIsNativeString(HEAP32[$2 + 24 >> 2]) & 1) {
   $0 = HEAP32[$2 + 24 >> 2];
   HEAP32[HEAP32[$2 + 20 >> 2] >> 2] = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
   $0 = HEAP32[$2 + 24 >> 2];
   HEAP32[$2 + 28 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
   break label$1;
  }
  if (jsvIsFlatString(HEAP32[$2 + 24 >> 2]) & 1) {
   $0 = jsvGetStringLength(HEAP32[$2 + 24 >> 2]);
   HEAP32[HEAP32[$2 + 20 >> 2] >> 2] = $0;
   HEAP32[$2 + 28 >> 2] = jsvGetFlatStringPointer(HEAP32[$2 + 24 >> 2]);
   break label$1;
  }
  label$6: {
   if (!(jsvIsBasicString(HEAP32[$2 + 24 >> 2]) & 1)) {
    break label$6;
   }
   if (jsvGetLastChild(HEAP32[$2 + 24 >> 2]) & 65535) {
    break label$6;
   }
   $0 = jsvGetCharactersInVar(HEAP32[$2 + 24 >> 2]);
   HEAP32[HEAP32[$2 + 20 >> 2] >> 2] = $0;
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 24 >> 2];
   break label$1;
  }
  HEAP32[$2 + 28 >> 2] = 0;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function tflite___28anonymous_20namespace_29__CreatePlan_28tflite__ErrorReporter__2c_20tflite__GreedyMemoryPlanner__2c_20tflite___28anonymous_20namespace_29__AllocationInfo_20const__2c_20unsigned_20long_29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 40 >> 2] = $0;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP32[$4 + 28 >> 2] = $3;
 HEAP32[$4 + 24 >> 2] = 0;
 label$1: {
  while (1) {
   if (HEAPU32[$4 + 24 >> 2] < HEAPU32[$4 + 28 >> 2]) {
    HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 32 >> 2] + Math_imul(HEAP32[$4 + 24 >> 2], 24);
    if (HEAP8[HEAP32[$4 + 20 >> 2] + 20 | 0] & 1) {
     HEAP32[$4 + 16 >> 2] = tflite__AlignSizeUp_28unsigned_20long_2c_20unsigned_20long_29(HEAP32[HEAP32[$4 + 20 >> 2] >> 2], 16);
     label$5: {
      if (HEAP32[HEAP32[$4 + 20 >> 2] + 16 >> 2] == -1) {
       $0 = HEAP32[$4 + 36 >> 2];
       HEAP32[$4 + 12 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$4 + 40 >> 2], HEAP32[$4 + 16 >> 2], HEAP32[HEAP32[$4 + 20 >> 2] + 8 >> 2], HEAP32[HEAP32[$4 + 20 >> 2] + 12 >> 2]);
       if (HEAP32[$4 + 12 >> 2]) {
        HEAP32[$4 + 44 >> 2] = HEAP32[$4 + 12 >> 2];
        break label$1;
       }
       break label$5;
      }
      HEAP32[$4 + 8 >> 2] = tflite__GreedyMemoryPlanner__AddBuffer_28tflite__ErrorReporter__2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$4 + 36 >> 2], HEAP32[$4 + 40 >> 2], HEAP32[$4 + 16 >> 2], HEAP32[HEAP32[$4 + 20 >> 2] + 8 >> 2], HEAP32[HEAP32[$4 + 20 >> 2] + 12 >> 2], HEAP32[HEAP32[$4 + 20 >> 2] + 16 >> 2]);
      if (HEAP32[$4 + 8 >> 2]) {
       HEAP32[$4 + 44 >> 2] = HEAP32[$4 + 8 >> 2];
       break label$1;
      }
     }
    }
    HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 24 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$4 + 44 >> 2] = 0;
 }
 __stack_pointer = $4 + 48 | 0;
 return HEAP32[$4 + 44 >> 2];
}

function _jswrap_interface_clearTimeoutOrInterval($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP8[$2 + 43 | 0] = $1;
 HEAP32[$2 + 36 >> 2] = jsvLock(HEAPU16[173532]);
 label$1: {
  label$2: {
   if (!(jsvIsUndefined(HEAP32[$2 + 44 >> 2]) & 1)) {
    if (jsvGetArrayLength(HEAP32[$2 + 44 >> 2])) {
     break label$2;
    }
   }
   jsvObjectIteratorNew($2 + 32 | 0, HEAP32[$2 + 36 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue_14($2 + 32 | 0) & 1) {
     HEAP32[$2 + 28 >> 2] = jsvObjectIteratorGetValue_12($2 + 32 | 0);
     HEAP32[$2 + 24 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 28 >> 2], 118675);
     label$6: {
      if (!HEAP32[$2 + 24 >> 2]) {
       jsvObjectIteratorRemoveAndGotoNext($2 + 32 | 0, HEAP32[$2 + 36 >> 2]);
       break label$6;
      }
      jsvObjectIteratorNext($2 + 32 | 0);
     }
     jsvUnLock2(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 28 >> 2]);
     continue;
    }
    break;
   }
   jsvObjectIteratorFree_14($2 + 32 | 0);
   break label$1;
  }
  HEAP32[$2 + 20 >> 2] = jsvGetArrayItem(HEAP32[$2 + 44 >> 2], 0);
  label$8: {
   if (jsvIsUndefined(HEAP32[$2 + 20 >> 2]) & 1) {
    HEAP32[$2 + 16 >> 2] = HEAP8[$2 + 43 | 0] & 1 ? 112645 : 118089;
    $0 = HEAP32[$2 + 16 >> 2];
    HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 16 >> 2];
    HEAP32[$2 >> 2] = $0;
    jsExceptionHere(1, 121993, $2);
    break label$8;
   }
   label$10: {
    if (jsvIsBasic(HEAP32[$2 + 20 >> 2]) & 1) {
     $0 = jsvFindChildFromVar(HEAP32[$2 + 36 >> 2], HEAP32[$2 + 20 >> 2], 0);
     break label$10;
    }
    $0 = 0;
   }
   HEAP32[$2 + 12 >> 2] = $0;
   if (HEAP32[$2 + 12 >> 2]) {
    jsvRemoveChildAndUnLock(HEAP32[$2 + 36 >> 2], HEAP32[$2 + 12 >> 2]);
   }
   jsvUnLock(HEAP32[$2 + 20 >> 2]);
  }
 }
 jsvUnLock(HEAP32[$2 + 36 >> 2]);
 jsiTimersChanged();
 __stack_pointer = $2 + 48 | 0;
}

function tflite__CalculateActivationRangeQuantized_28TfLiteContext__2c_20TfLiteFusedActivation_2c_20TfLiteTensor__2c_20int__2c_20int__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 48 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 40 >> 2] = $0;
 HEAP32[$5 + 36 >> 2] = $1;
 HEAP32[$5 + 32 >> 2] = $2;
 HEAP32[$5 + 28 >> 2] = $3;
 HEAP32[$5 + 24 >> 2] = $4;
 HEAP32[$5 + 20 >> 2] = 0;
 HEAP32[$5 + 16 >> 2] = 0;
 label$1: {
  label$2: {
   if (HEAP32[HEAP32[$5 + 32 >> 2] + 28 >> 2] == 3) {
    HEAP32[$5 + 20 >> 2] = std____2__numeric_limits_unsigned_20char___min_28_29() & 255;
    HEAP32[$5 + 16 >> 2] = std____2__numeric_limits_unsigned_20char___max_28_29() & 255;
    break label$2;
   }
   label$4: {
    if (HEAP32[HEAP32[$5 + 32 >> 2] + 28 >> 2] == 9) {
     HEAP32[$5 + 20 >> 2] = std____2__numeric_limits_signed_20char___min_28_29() << 24 >> 24;
     HEAP32[$5 + 16 >> 2] = std____2__numeric_limits_signed_20char___max_28_29() << 24 >> 24;
     break label$4;
    }
    label$6: {
     if (HEAP32[HEAP32[$5 + 32 >> 2] + 28 >> 2] == 7) {
      HEAP32[$5 + 20 >> 2] = std____2__numeric_limits_short___min_28_29() << 16 >> 16;
      HEAP32[$5 + 16 >> 2] = std____2__numeric_limits_short___max_28_29() << 16 >> 16;
      break label$6;
     }
     $0 = HEAP32[HEAP32[$5 + 40 >> 2] + 20 >> 2];
     $1 = HEAP32[$5 + 40 >> 2];
     HEAP32[$5 >> 2] = 119736;
     FUNCTION_TABLE[$0 | 0]($1, 127303, $5);
     HEAP32[$5 + 44 >> 2] = 1;
     break label$1;
    }
   }
  }
  tflite___28anonymous_20namespace_29__CalculateActivationRangeQuantizedImpl_28TfLiteFusedActivation_2c_20int_2c_20int_2c_20TfLiteTensor__2c_20int__2c_20int__29(HEAP32[$5 + 36 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 32 >> 2], HEAP32[$5 + 28 >> 2], HEAP32[$5 + 24 >> 2]);
  HEAP32[$5 + 44 >> 2] = 0;
 }
 __stack_pointer = $5 + 48 | 0;
 return HEAP32[$5 + 44 >> 2];
}

function jslLexRegex() {
 var $0 = 0, $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 20 >> 2] = 0;
 label$1: {
  if ((HEAP32[86758] & 63) == 1) {
   $0 = jsvNewFromEmptyString();
   HEAP32[HEAP32[44743] + 76 >> 2] = $0;
   if (!HEAP32[HEAP32[44743] + 76 >> 2]) {
    HEAP16[HEAP32[44743] + 2 >> 1] = 0;
    break label$1;
   }
   jsvStringIteratorNew($1 + 8 | 0, HEAP32[HEAP32[44743] + 76 >> 2], 0);
   jsvStringIteratorAppend($1 + 8 | 0, 47);
  }
  jslGetNextCh();
  while (1) {
   $0 = 0;
   label$6: {
    $0 = HEAP8[HEAP32[44743]] ? HEAP8[HEAP32[44743]] != 47 : $0;
    if (!$0) {
     break label$6;
    }
    label$7: {
     if (HEAP8[HEAP32[44743]] == 92) {
      jsvStringIteratorAppend($1 + 8 | 0, HEAP8[HEAP32[44743]]);
      jslGetNextCh();
      break label$7;
     }
     if (HEAP8[HEAP32[44743]] == 10) {
      break label$6;
     }
    }
    jsvStringIteratorAppend($1 + 8 | 0, HEAP8[HEAP32[44743]]);
    jslGetNextCh();
    continue;
   }
   break;
  }
  HEAP16[HEAP32[44743] + 2 >> 1] = 135;
  label$9: {
   if (HEAP8[HEAP32[44743]] != 47) {
    $0 = HEAP32[44743];
    HEAP16[$0 + 2 >> 1] = HEAPU16[$0 + 2 >> 1] + 1;
    break label$9;
   }
   jsvStringIteratorAppend($1 + 8 | 0, 47);
   jslGetNextCh();
   while (1) {
    $0 = 1;
    label$12: {
     if (HEAP8[HEAP32[44743]] == 103) {
      break label$12;
     }
     $0 = 1;
     if (HEAP8[HEAP32[44743]] == 105) {
      break label$12;
     }
     $0 = 1;
     if (HEAP8[HEAP32[44743]] == 109) {
      break label$12;
     }
     $0 = 1;
     if (HEAP8[HEAP32[44743]] == 121) {
      break label$12;
     }
     $0 = HEAP8[HEAP32[44743]] == 117;
    }
    if ($0) {
     jsvStringIteratorAppend($1 + 8 | 0, HEAP8[HEAP32[44743]]);
     jslGetNextCh();
     continue;
    }
    break;
   }
  }
  jsvStringIteratorFree($1 + 8 | 0);
 }
 __stack_pointer = $1 + 48 | 0;
}

function graphicsFallbackScrollX($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP32[$6 + 8 >> 2] = $5;
 label$1: {
  if (HEAP32[$6 + 24 >> 2] <= 0) {
   HEAP32[$6 >> 2] = HEAP32[$6 + 8 >> 2] + HEAP32[$6 + 24 >> 2];
   HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 12 >> 2];
   while (1) {
    if (HEAP32[$6 + 4 >> 2] <= HEAP32[$6 >> 2]) {
     $0 = HEAP32[$6 + 28 >> 2];
     $1 = HEAPU8[$0 + 52 | 0] | HEAPU8[$0 + 53 | 0] << 8 | (HEAPU8[$0 + 54 | 0] << 16 | HEAPU8[$0 + 55 | 0] << 24);
     $0 = HEAP32[$6 + 28 >> 2];
     FUNCTION_TABLE[$1 | 0](HEAP32[$6 + 28 >> 2], HEAP32[$6 + 4 >> 2], HEAP32[$6 + 16 >> 2], FUNCTION_TABLE[HEAPU8[$0 + 60 | 0] | HEAPU8[$0 + 61 | 0] << 8 | (HEAPU8[$0 + 62 | 0] << 16 | HEAPU8[$0 + 63 | 0] << 24)](HEAP32[$6 + 28 >> 2], HEAP32[$6 + 4 >> 2] - HEAP32[$6 + 24 >> 2] | 0, HEAP32[$6 + 20 >> 2]) | 0);
     HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 4 >> 2] + 1;
     continue;
    }
    break;
   }
   break label$1;
  }
  HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 8 >> 2] - HEAP32[$6 + 24 >> 2];
  while (1) {
   if (HEAP32[$6 + 4 >> 2] >= HEAP32[$6 + 12 >> 2]) {
    $0 = HEAP32[$6 + 28 >> 2];
    $1 = HEAPU8[$0 + 52 | 0] | HEAPU8[$0 + 53 | 0] << 8 | (HEAPU8[$0 + 54 | 0] << 16 | HEAPU8[$0 + 55 | 0] << 24);
    $0 = HEAP32[$6 + 28 >> 2];
    FUNCTION_TABLE[$1 | 0](HEAP32[$6 + 28 >> 2], HEAP32[$6 + 4 >> 2] + HEAP32[$6 + 24 >> 2] | 0, HEAP32[$6 + 16 >> 2], FUNCTION_TABLE[HEAPU8[$0 + 60 | 0] | HEAPU8[$0 + 61 | 0] << 8 | (HEAPU8[$0 + 62 | 0] << 16 | HEAPU8[$0 + 63 | 0] << 24)](HEAP32[$6 + 28 >> 2], HEAP32[$6 + 4 >> 2], HEAP32[$6 + 20 >> 2]) | 0);
    HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 4 >> 2] - 1;
    continue;
   }
   break;
  }
 }
 __stack_pointer = $6 + 32 | 0;
}

function tflite__MicroAllocator__AllocateVariables_28tflite__SubGraph_20const__2c_20TfLiteEvalTensor__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP32[$3 + 32 >> 2] = $2;
 $0 = HEAP32[$3 + 40 >> 2];
 HEAP32[$3 + 28 >> 2] = 0;
 label$1: {
  while (1) {
   if (HEAPU32[$3 + 28 >> 2] < flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor____size_28_29_20const(tflite__SubGraph__tensors_28_29_20const(HEAP32[$3 + 36 >> 2])) >>> 0) {
    HEAP32[$3 + 24 >> 2] = flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor____Get_28unsigned_20int_29_20const(tflite__SubGraph__tensors_28_29_20const(HEAP32[$3 + 36 >> 2]), HEAP32[$3 + 28 >> 2]);
    if (tflite__Tensor__is_variable_28_29_20const(HEAP32[$3 + 24 >> 2]) & 1) {
     HEAP32[$3 + 16 >> 2] = tflite__TfLiteEvalTensorByteLength_28TfLiteEvalTensor_20const__2c_20unsigned_20long__29(HEAP32[$3 + 32 >> 2] + Math_imul(HEAP32[$3 + 28 >> 2], 12) | 0, $3 + 20 | 0);
     if (HEAP32[$3 + 16 >> 2]) {
      HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 16 >> 2];
      break label$1;
     }
     $1 = HEAP32[$0 + 4 >> 2];
     $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, HEAP32[$3 + 20 >> 2], 16) | 0;
     HEAP32[HEAP32[$3 + 32 >> 2] + Math_imul(HEAP32[$3 + 28 >> 2], 12) >> 2] = $1;
     if (!HEAP32[HEAP32[$3 + 32 >> 2] + Math_imul(HEAP32[$3 + 28 >> 2], 12) >> 2]) {
      $0 = HEAP32[$0 + 8 >> 2];
      HEAP32[$3 >> 2] = HEAP32[$3 + 20 >> 2];
      tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 122599, $3);
      HEAP32[$3 + 44 >> 2] = 1;
      break label$1;
     }
    }
    HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 28 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$3 + 44 >> 2] = 0;
 }
 __stack_pointer = $3 + 48 | 0;
 return HEAP32[$3 + 44 >> 2];
}

function jswrap_espruino_getSizeOf($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1: {
  label$2: {
   if (HEAP32[$2 + 36 >> 2] <= 0) {
    break label$2;
   }
   if (!(jsvHasChildren(HEAP32[$2 + 40 >> 2]) & 1)) {
    break label$2;
   }
   HEAP32[$2 + 32 >> 2] = jsvNewEmptyArray();
   if (!HEAP32[$2 + 32 >> 2]) {
    HEAP32[$2 + 44 >> 2] = 0;
    break label$1;
   }
   jsvObjectIteratorNew($2 + 24 | 0, HEAP32[$2 + 40 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue_13($2 + 24 | 0) & 1) {
     HEAP32[$2 + 20 >> 2] = jsvObjectIteratorGetKey_8($2 + 24 | 0);
     HEAP32[$2 + 16 >> 2] = jsvSkipName(HEAP32[$2 + 20 >> 2]);
     HEAP32[$2 + 12 >> 2] = jsvNewObject();
     if (HEAP32[$2 + 12 >> 2]) {
      jsvObjectSetChildAndUnLock(HEAP32[$2 + 12 >> 2], 120049, jsvAsString(HEAP32[$2 + 20 >> 2]));
      jsvObjectSetChildAndUnLock(HEAP32[$2 + 12 >> 2], 119313, jswrap_espruino_getSizeOf(HEAP32[$2 + 20 >> 2], 0));
      label$7: {
       if (HEAP32[$2 + 36 >> 2] <= 1) {
        break label$7;
       }
       if (!(jsvHasChildren(HEAP32[$2 + 16 >> 2]) & 1)) {
        break label$7;
       }
       jsvObjectSetChildAndUnLock(HEAP32[$2 + 12 >> 2], 119796, jswrap_espruino_getSizeOf(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 36 >> 2] - 1 | 0));
      }
      jsvArrayPushAndUnLock(HEAP32[$2 + 32 >> 2], HEAP32[$2 + 12 >> 2]);
     }
     jsvUnLock2(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 20 >> 2]);
     jsvObjectIteratorNext($2 + 24 | 0);
     continue;
    }
    break;
   }
   jsvObjectIteratorFree_13($2 + 24 | 0);
   HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
   break label$1;
  }
  HEAP32[$2 + 44 >> 2] = jsvNewFromInteger(jsvCountJsVarsUsed(HEAP32[$2 + 40 >> 2]));
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function jsfBankFindFileFromAddr($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer + -64 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 56 >> 2] = $0;
 HEAP32[$4 + 52 >> 2] = $1;
 HEAP32[$4 + 48 >> 2] = $2;
 HEAP32[$4 + 44 >> 2] = $3;
 HEAP32[$4 + 40 >> 2] = HEAP32[$4 + 56 >> 2];
 HEAP32[$4 + 32 >> 2] = 0;
 HEAP32[$4 + 36 >> 2] = 0;
 HEAP32[$4 + 24 >> 2] = 0;
 HEAP32[$4 + 28 >> 2] = 0;
 HEAP32[$4 + 16 >> 2] = 0;
 HEAP32[$4 + 20 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = 0;
 HEAP32[$4 + 12 >> 2] = 0;
 label$1: {
  if (jsfGetFileHeader(HEAP32[$4 + 40 >> 2], $4 + 8 | 0, 0) & 1) {
   while (1) {
    HEAP32[$4 + 4 >> 2] = (HEAP32[$4 + 40 >> 2] + 32 | 0) + jsfGetFileSize($4 + 8 | 0);
    if (!(!HEAP32[$4 + 12 >> 2] | HEAPU32[$4 + 40 >> 2] > HEAPU32[$4 + 48 >> 2] | HEAPU32[$4 + 48 >> 2] > HEAPU32[$4 + 4 >> 2])) {
     jsfGetFileHeader(HEAP32[$4 + 40 >> 2], $4 + 8 | 0, 1);
     if (HEAP32[$4 + 44 >> 2]) {
      $0 = HEAP32[$4 + 12 >> 2];
      $1 = HEAP32[$4 + 8 >> 2];
      $3 = $1;
      $2 = HEAP32[$4 + 44 >> 2];
      $1 = $2;
      HEAP32[$1 >> 2] = $3;
      HEAP32[$1 + 4 >> 2] = $0;
      $1 = HEAP32[$4 + 36 >> 2];
      $0 = HEAP32[$4 + 32 >> 2];
      $3 = $0;
      $0 = $2;
      HEAP32[$0 + 24 >> 2] = $3;
      HEAP32[$0 + 28 >> 2] = $1;
      $0 = HEAP32[$4 + 28 >> 2];
      $1 = HEAP32[$4 + 24 >> 2];
      $3 = $1;
      $1 = $2;
      HEAP32[$1 + 16 >> 2] = $3;
      HEAP32[$1 + 20 >> 2] = $0;
      $1 = HEAP32[$4 + 20 >> 2];
      $0 = HEAP32[$4 + 16 >> 2];
      $3 = $0;
      $0 = $2;
      HEAP32[$0 + 8 >> 2] = $3;
      HEAP32[$0 + 12 >> 2] = $1;
     }
     HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 40 >> 2] + 32;
     break label$1;
    }
    if (jsfGetNextFileHeader($4 + 40 | 0, $4 + 8 | 0, 3) & 1) {
     continue;
    }
    break;
   }
  }
  HEAP32[$4 + 60 >> 2] = 0;
 }
 __stack_pointer = $4 - -64 | 0;
 return HEAP32[$4 + 60 >> 2];
}

function vfGetCharFromPtr($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0;
 $8 = __stack_pointer - 256 | 0;
 __stack_pointer = $8;
 HEAP32[$8 + 252 >> 2] = $0;
 HEAP32[$8 + 248 >> 2] = $1;
 HEAP32[$8 + 244 >> 2] = $2;
 HEAP32[$8 + 240 >> 2] = $3;
 HEAP32[$8 + 236 >> 2] = $4;
 HEAP32[$8 + 232 >> 2] = $5;
 HEAP32[$8 + 228 >> 2] = $6;
 HEAP32[$8 + 224 >> 2] = $7;
 HEAP32[$8 + 244 >> 2] = (HEAP32[$8 + 244 >> 2] << 4) - 8;
 HEAP32[$8 + 240 >> 2] = (HEAP32[$8 + 240 >> 2] << 4) - 8;
 HEAP32[$8 + 220 >> 2] = 0;
 HEAP32[$8 + 216 >> 2] = 0;
 while (1) {
  if (HEAP32[$8 + 216 >> 2] < HEAP32[$8 + 224 >> 2]) {
   HEAP32[$8 + 24 >> 2] = vfGetPolyPtr(HEAPU8[HEAP32[$8 + 228 >> 2] + HEAP32[$8 + 216 >> 2] | 0], $8 + 28 | 0);
   HEAP32[$8 + 20 >> 2] = 0;
   while (1) {
    if (HEAP32[$8 + 20 >> 2] < HEAP32[$8 + 28 >> 2]) {
     HEAP8[$8 + 19 | 0] = HEAPU8[HEAP32[$8 + 24 >> 2] + HEAP32[$8 + 20 >> 2] | 0];
     HEAP32[$8 + 12 >> 2] = HEAPU8[$8 + 19 | 0] % 13;
     HEAP32[$8 + 8 >> 2] = HEAPU8[$8 + 19 | 0] / 13;
     if (HEAP32[$8 + 12 >> 2] > HEAP32[$8 + 220 >> 2]) {
      HEAP32[$8 + 220 >> 2] = HEAP32[$8 + 12 >> 2];
     }
     HEAP16[($8 + 32 | 0) + (HEAP32[$8 + 20 >> 2] << 2) >> 1] = HEAP32[$8 + 244 >> 2] + ((Math_imul(HEAP32[$8 + 12 >> 2], HEAP32[$8 + 236 >> 2]) << 4) / 16 | 0);
     HEAP16[((HEAP32[$8 + 20 >> 2] << 2) + $8 | 0) + 34 >> 1] = HEAP32[$8 + 240 >> 2] + ((Math_imul(HEAP32[$8 + 232 >> 2], HEAP32[$8 + 8 >> 2] - 2 | 0) << 4) / 16 | 0);
     HEAP32[$8 + 20 >> 2] = HEAP32[$8 + 20 >> 2] + 1;
     continue;
    }
    break;
   }
   FUNCTION_TABLE[HEAP32[$8 + 252 >> 2]](HEAP32[$8 + 248 >> 2], HEAP32[$8 + 28 >> 2], $8 + 32 | 0);
   HEAP32[$8 + 216 >> 2] = HEAP32[$8 + 216 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $8 + 256 | 0;
 return ((Math_imul(HEAP32[$8 + 236 >> 2], HEAP32[$8 + 220 >> 2] + 2 | 0) << 4) / 16 | 0) + 7 >> 4;
}

function jshFlashWriteAligned($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 label$1: {
  if (!(HEAPU32[$3 + 24 >> 2] < 134217728 | HEAPU32[$3 + 24 >> 2] >= 142606336)) {
   jshFlashWrite(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
   break label$1;
  }
  HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 28 >> 2];
  HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 24 >> 2] & 3;
  if (HEAP32[$3 + 12 >> 2]) {
   jshFlashRead($3 + 8 | 0, HEAP32[$3 + 24 >> 2] - HEAP32[$3 + 12 >> 2] | 0, 4);
   HEAP32[$3 + 4 >> 2] = 4 - HEAP32[$3 + 12 >> 2];
   if (HEAPU32[$3 + 4 >> 2] > HEAPU32[$3 + 20 >> 2]) {
    HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 20 >> 2];
   }
   __memcpy(HEAP32[$3 + 12 >> 2] + ($3 + 8 | 0) | 0, HEAP32[$3 + 16 >> 2], HEAP32[$3 + 4 >> 2]);
   HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 4 >> 2] + HEAP32[$3 + 16 >> 2];
   jshFlashWrite($3 + 8 | 0, HEAP32[$3 + 24 >> 2] - HEAP32[$3 + 12 >> 2] | 0, 4);
   HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 4 >> 2] + HEAP32[$3 + 24 >> 2];
   if (HEAPU32[$3 + 4 >> 2] >= HEAPU32[$3 + 20 >> 2]) {
    break label$1;
   }
   HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 20 >> 2] - HEAP32[$3 + 4 >> 2];
  }
  HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 20 >> 2] & 3;
  HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 20 >> 2] - HEAP32[$3 + 12 >> 2];
  if (HEAP32[$3 + 20 >> 2]) {
   jshFlashWrite(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
  }
  HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 20 >> 2] + HEAP32[$3 + 24 >> 2];
  HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 20 >> 2] + HEAP32[$3 + 16 >> 2];
  if (!HEAP32[$3 + 12 >> 2]) {
   break label$1;
  }
  jshFlashRead($3, HEAP32[$3 + 24 >> 2], 4);
  __memcpy($3, HEAP32[$3 + 16 >> 2], HEAP32[$3 + 12 >> 2]);
  jshFlashWrite($3, HEAP32[$3 + 24 >> 2], 4);
 }
 __stack_pointer = $3 + 32 | 0;
}

function tflite__ops__micro__pooling___28anonymous_20namespace_29__AverageEvalFloat_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20TfLitePoolParams_20const__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 128 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 124 >> 2] = $0;
 HEAP32[$6 + 120 >> 2] = $1;
 HEAP32[$6 + 116 >> 2] = $2;
 HEAP32[$6 + 112 >> 2] = $3;
 HEAP32[$6 + 108 >> 2] = $4;
 HEAP32[$6 + 104 >> 2] = $5;
 HEAP32[$6 + 68 >> 2] = HEAP32[HEAP32[$6 + 116 >> 2] + 8 >> 2];
 HEAP32[$6 + 72 >> 2] = HEAP32[HEAP32[$6 + 116 >> 2] + 4 >> 2];
 HEAP32[$6 + 76 >> 2] = HEAP32[HEAP32[$6 + 116 >> 2] + 16 >> 2];
 HEAP32[$6 + 80 >> 2] = HEAP32[HEAP32[$6 + 116 >> 2] + 12 >> 2];
 HEAP16[$6 + 60 >> 1] = HEAP32[HEAP32[$6 + 112 >> 2] + 4 >> 2];
 HEAP16[$6 + 58 >> 1] = HEAP32[HEAP32[$6 + 112 >> 2] >> 2];
 HEAPF32[$6 + 92 >> 2] = HEAPF32[HEAP32[$6 + 112 >> 2] + 24 >> 2];
 HEAPF32[$6 + 96 >> 2] = HEAPF32[HEAP32[$6 + 112 >> 2] + 28 >> 2];
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($6 + 32 | 0, HEAP32[$6 + 108 >> 2]);
 $0 = float_20const__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor_20const__29(HEAP32[$6 + 108 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($6 + 8 | 0, HEAP32[$6 + 104 >> 2]);
 tflite__reference_ops__AveragePool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($6 + 56 | 0, $6 + 32 | 0, $0, $6 + 8 | 0, float__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor__29(HEAP32[$6 + 104 >> 2]));
 tflite__RuntimeShape___RuntimeShape_28_29($6 + 8 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($6 + 32 | 0);
 __stack_pointer = $6 + 128 | 0;
}

function tflite__MicroInterpreter__MicroInterpreter_28tflite__Model_20const__2c_20tflite__MicroOpResolver_20const__2c_20unsigned_20char__2c_20unsigned_20long_2c_20tflite__ErrorReporter__2c_20tflite__Profiler__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0;
 $7 = __stack_pointer - 32 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 28 >> 2] = $0;
 HEAP32[$7 + 24 >> 2] = $1;
 HEAP32[$7 + 20 >> 2] = $2;
 HEAP32[$7 + 16 >> 2] = $3;
 HEAP32[$7 + 12 >> 2] = $4;
 HEAP32[$7 + 8 >> 2] = $5;
 HEAP32[$7 + 4 >> 2] = $6;
 $0 = HEAP32[$7 + 28 >> 2];
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = HEAP32[$7 + 24 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$7 + 20 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$7 + 8 >> 2];
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP32[$0 + 40 >> 2] = 0;
 HEAP32[$0 + 44 >> 2] = 0;
 HEAP32[$0 + 48 >> 2] = 0;
 HEAP32[$0 + 52 >> 2] = 0;
 HEAP32[$0 + 56 >> 2] = 0;
 HEAP32[$0 + 60 >> 2] = 0;
 HEAP8[$0 + 64 | 0] = 0;
 HEAP32[$0 + 68 >> 2] = 0;
 HEAP32[$0 + 72 >> 2] = 0;
 HEAP32[$0 + 76 >> 2] = 0;
 HEAP32[$0 + 80 >> 2] = 0;
 HEAP32[$0 + 84 >> 2] = 0;
 HEAP32[$0 + 88 >> 2] = 0;
 HEAP32[$0 + 92 >> 2] = 0;
 HEAP32[$0 + 96 >> 2] = 0;
 HEAP32[$0 + 100 >> 2] = 0;
 HEAP32[$0 + 104 >> 2] = tflite__MicroAllocator__Create_28unsigned_20char__2c_20unsigned_20long_2c_20tflite__ErrorReporter__29(HEAP32[$7 + 16 >> 2], HEAP32[$7 + 12 >> 2], HEAP32[$7 + 8 >> 2]);
 HEAP8[$0 + 108 | 0] = 0;
 HEAP32[$0 + 112 >> 2] = 1;
 HEAP32[$0 + 120 >> 2] = 0;
 FUNCTION_TABLE[647]($0 + 124 | 0, HEAP32[$0 + 12 >> 2], HEAP32[$0 + 104 >> 2], HEAP32[$7 + 24 >> 2]) | 0;
 HEAP32[$0 + 144 >> 2] = 0;
 HEAP32[$0 + 148 >> 2] = 0;
 tflite__MicroInterpreter__Init_28tflite__Profiler__29($0, HEAP32[$7 + 4 >> 2]);
 __stack_pointer = $7 + 32 | 0;
 return $0;
}

function jsvNewStringOfLength($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  if (HEAPU32[$2 + 24 >> 2] > 19) {
   HEAP32[$2 + 16 >> 2] = jsvNewFlatStringOfLength(HEAP32[$2 + 24 >> 2]);
   if (HEAP32[$2 + 16 >> 2]) {
    if (HEAP32[$2 + 20 >> 2]) {
     jsvSetString(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 24 >> 2]);
    }
    HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
    break label$1;
   }
  }
  HEAP32[$2 + 12 >> 2] = jsvNewWithFlags(28);
  if (!HEAP32[$2 + 12 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 8 >> 2] = jsvLockAgain(HEAP32[$2 + 12 >> 2]);
  while (1) {
   label$7: {
    HEAP32[$2 + 4 >> 2] = jsvGetMaxCharactersInVar(HEAP32[$2 + 8 >> 2]);
    if (HEAPU32[$2 + 4 >> 2] >= HEAPU32[$2 + 24 >> 2]) {
     if (HEAP32[$2 + 20 >> 2]) {
      __memcpy(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 24 >> 2]);
     }
     jsvSetCharactersInVar(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 24 >> 2]);
     break label$7;
    }
    if (HEAP32[$2 + 20 >> 2]) {
     __memcpy(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 4 >> 2]);
     HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 4 >> 2] + HEAP32[$2 + 20 >> 2];
    }
    jsvSetCharactersInVar(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]);
    HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 24 >> 2] - HEAP32[$2 + 4 >> 2];
    HEAP32[$2 >> 2] = jsvNewWithFlags(41);
    if (!HEAP32[$2 >> 2]) {
     break label$7;
    }
    jsvSetLastChild(HEAP32[$2 + 8 >> 2], jsvGetRef(HEAP32[$2 >> 2]) & 65535);
    jsvUnLock(HEAP32[$2 + 8 >> 2]);
    HEAP32[$2 + 8 >> 2] = HEAP32[$2 >> 2];
    continue;
   }
   break;
  }
  jsvUnLock(HEAP32[$2 + 8 >> 2]);
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jswrap_serial_setup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 label$1: {
  if (!(jsvIsObject(HEAP32[$3 + 44 >> 2]) & 1)) {
   break label$1;
  }
  HEAP8[$3 + 35 | 0] = jsiGetDeviceFromClass(HEAP32[$3 + 44 >> 2]);
  label$2: {
   if (jsvIsUndefined(HEAP32[$3 + 36 >> 2]) & 1) {
    HEAP32[$3 + 36 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 44 >> 2], 115339);
    break label$2;
   }
   jsvLockAgain(HEAP32[$3 + 36 >> 2]);
  }
  HEAP8[$3 + 15 | 0] = jsserialPopulateUSARTInfo($3 + 16 | 0, HEAP32[$3 + 40 >> 2], HEAP32[$3 + 36 >> 2]) & 1;
  if (!(HEAP8[$3 + 15 | 0] & 1)) {
   jsvUnLock(HEAP32[$3 + 36 >> 2]);
   break label$1;
  }
  jsvObjectSetChildAndUnLock(HEAP32[$3 + 44 >> 2], 119685, jsvNewFromInteger(HEAPU8[$3 + 16 | 0] | HEAPU8[$3 + 17 | 0] << 8 | (HEAPU8[$3 + 18 | 0] << 16 | HEAPU8[$3 + 19 | 0] << 24)));
  label$5: {
   if (HEAP32[$3 + 36 >> 2]) {
    jsvObjectSetChildAndUnLock(HEAP32[$3 + 44 >> 2], 115339, HEAP32[$3 + 36 >> 2]);
    break label$5;
   }
   jsvObjectRemoveChild(HEAP32[$3 + 44 >> 2], 115339);
  }
  if (!(HEAPU8[$3 + 35 | 0] < 17 | HEAPU8[$3 + 35 | 0] > 22)) {
   if (!(HEAPU8[$3 + 35 | 0] < 22 | HEAPU8[$3 + 35 | 0] > 22)) {
    jshUSARTSetup(HEAPU8[$3 + 35 | 0], $3 + 16 | 0);
   }
   break label$1;
  }
  if (!HEAPU8[$3 + 35 | 0]) {
   if (HEAPU8[$3 + 21 | 0] != 255) {
    jshPinSetState(HEAPU8[$3 + 21 | 0], 1);
    jshPinOutput(HEAPU8[$3 + 21 | 0], 1);
   }
   if (HEAPU8[$3 + 20 | 0] != 255) {
    jshPinSetState(HEAPU8[$3 + 20 | 0], 5);
    jsserialEventCallbackInit(HEAP32[$3 + 44 >> 2], $3 + 16 | 0);
   }
   if (HEAPU8[$3 + 22 | 0] != 255) {
    jsExceptionHere(1, 113180, 0);
   }
  }
 }
 __stack_pointer = $3 + 48 | 0;
}

function jswrap_date_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 80 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 76 >> 2] = $0;
 HEAPF64[$1 + 64 >> 3] = 0;
 label$1: {
  if (!jsvGetArrayLength(HEAP32[$1 + 76 >> 2])) {
   HEAPF64[$1 + 64 >> 3] = jswrap_date_now();
   break label$1;
  }
  label$3: {
   if ((jsvGetArrayLength(HEAP32[$1 + 76 >> 2]) | 0) == 1) {
    HEAP32[$1 + 60 >> 2] = jsvGetArrayItem(HEAP32[$1 + 76 >> 2], 0);
    label$5: {
     if (jsvIsNumeric(HEAP32[$1 + 60 >> 2]) & 1) {
      HEAPF64[$1 + 64 >> 3] = jsvGetFloat(HEAP32[$1 + 60 >> 2]);
      break label$5;
     }
     label$7: {
      if (jsvIsString(HEAP32[$1 + 60 >> 2]) & 1) {
       HEAPF64[$1 + 64 >> 3] = jswrap_date_parse(HEAP32[$1 + 60 >> 2]);
       break label$7;
      }
      HEAP32[$1 >> 2] = HEAP32[$1 + 60 >> 2];
      jsExceptionHere(3, 116024, $1);
     }
    }
    jsvUnLock(HEAP32[$1 + 60 >> 2]);
    break label$3;
   }
   HEAP32[$1 + 52 >> 2] = jsvGetIntegerAndUnLock(jsvGetArrayItem(HEAP32[$1 + 76 >> 2], 0));
   HEAP32[$1 + 48 >> 2] = jsvGetIntegerAndUnLock(jsvGetArrayItem(HEAP32[$1 + 76 >> 2], 1));
   HEAP32[$1 + 44 >> 2] = jsvGetIntegerAndUnLock(jsvGetArrayItem(HEAP32[$1 + 76 >> 2], 2));
   HEAP32[$1 + 8 >> 2] = fromCalendarDate($1 + 40 | 0);
   HEAP32[$1 + 24 >> 2] = jsvGetIntegerAndUnLock(jsvGetArrayItem(HEAP32[$1 + 76 >> 2], 3));
   HEAP32[$1 + 20 >> 2] = jsvGetIntegerAndUnLock(jsvGetArrayItem(HEAP32[$1 + 76 >> 2], 4));
   HEAP32[$1 + 16 >> 2] = jsvGetIntegerAndUnLock(jsvGetArrayItem(HEAP32[$1 + 76 >> 2], 5));
   HEAP32[$1 + 12 >> 2] = jsvGetIntegerAndUnLock(jsvGetArrayItem(HEAP32[$1 + 76 >> 2], 6));
   setCorrectTimeZone($1 + 8 | 0);
   HEAPF64[$1 + 64 >> 3] = fromTimeInDay($1 + 8 | 0);
  }
 }
 $0 = jswrap_date_from_milliseconds(HEAPF64[$1 + 64 >> 3]);
 __stack_pointer = $1 + 80 | 0;
 return $0 | 0;
}
function tflite__ops__micro__reshape__Prepare_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1: {
  label$2: {
   if ((tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 36 >> 2]) | 0) == 1) {
    break label$2;
   }
   if ((tflite__NumInputs_28TfLiteNode_20const__29(HEAP32[$2 + 36 >> 2]) | 0) == 2) {
    break label$2;
   }
   $0 = HEAP32[HEAP32[$2 + 40 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 40 >> 2];
   HEAP32[$2 + 32 >> 2] = 126531;
   FUNCTION_TABLE[$0 | 0]($1, 127303, $2 + 32 | 0);
   HEAP32[$2 + 44 >> 2] = 1;
   break label$1;
  }
  if ((tflite__NumOutputs_28TfLiteNode_20const__29(HEAP32[$2 + 36 >> 2]) | 0) != 1) {
   $0 = HEAP32[HEAP32[$2 + 40 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 40 >> 2];
   $3 = tflite__NumOutputs_28TfLiteNode_20const__29(HEAP32[$2 + 36 >> 2]);
   HEAP32[$2 + 12 >> 2] = 1;
   HEAP32[$2 + 8 >> 2] = $3;
   HEAP32[$2 + 4 >> 2] = 126714;
   HEAP32[$2 >> 2] = 142821;
   FUNCTION_TABLE[$0 | 0]($1, 143069, $2);
   HEAP32[$2 + 44 >> 2] = 1;
   break label$1;
  }
  if (tflite__ops__micro__reshape__ReshapeOutput_28TfLiteContext__2c_20TfLiteNode__29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2])) {
   $0 = HEAP32[HEAP32[$2 + 40 >> 2] + 20 >> 2];
   $1 = HEAP32[$2 + 40 >> 2];
   $3 = tflite__ops__micro__reshape__ReshapeOutput_28TfLiteContext__2c_20TfLiteNode__29(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 36 >> 2]);
   HEAP32[$2 + 28 >> 2] = 0;
   HEAP32[$2 + 24 >> 2] = $3;
   HEAP32[$2 + 20 >> 2] = 118187;
   HEAP32[$2 + 16 >> 2] = 142854;
   FUNCTION_TABLE[$0 | 0]($1, 143069, $2 + 16 | 0);
   HEAP32[$2 + 44 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 44 >> 2] = 0;
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function jsfSaveBootCodeToFlash($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 208 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 204 >> 2] = $0;
 HEAP8[$2 + 203 | 0] = $1;
 jsfNameFromString($2 + 168 | 0, 120461);
 HEAP32[$2 + 64 >> 2] = HEAP32[$2 + 192 >> 2];
 $0 = HEAP32[$2 + 188 >> 2];
 $1 = HEAP32[$2 + 184 >> 2];
 HEAP32[$2 + 56 >> 2] = $1;
 HEAP32[$2 + 60 >> 2] = $0;
 $1 = HEAP32[$2 + 180 >> 2];
 $0 = HEAP32[$2 + 176 >> 2];
 HEAP32[$2 + 48 >> 2] = $0;
 HEAP32[$2 + 52 >> 2] = $1;
 $0 = HEAP32[$2 + 172 >> 2];
 $1 = HEAP32[$2 + 168 >> 2];
 HEAP32[$2 + 40 >> 2] = $1;
 HEAP32[$2 + 44 >> 2] = $0;
 jsfEraseFile($2 + 40 | 0);
 jsfNameFromString($2 + 136 | 0, 112653);
 HEAP32[$2 + 96 >> 2] = HEAP32[$2 + 160 >> 2];
 $1 = HEAP32[$2 + 156 >> 2];
 $0 = HEAP32[$2 + 152 >> 2];
 HEAP32[$2 + 88 >> 2] = $0;
 HEAP32[$2 + 92 >> 2] = $1;
 $0 = HEAP32[$2 + 148 >> 2];
 $1 = HEAP32[$2 + 144 >> 2];
 HEAP32[$2 + 80 >> 2] = $1;
 HEAP32[$2 + 84 >> 2] = $0;
 $1 = HEAP32[$2 + 140 >> 2];
 $0 = HEAP32[$2 + 136 >> 2];
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP32[$2 + 76 >> 2] = $1;
 jsfEraseFile($2 + 72 | 0);
 label$1: {
  if (jsvIsUndefined(HEAP32[$2 + 204 >> 2]) & 1) {
   break label$1;
  }
  if (!jsvGetLength(HEAP32[$2 + 204 >> 2])) {
   break label$1;
  }
  jsfNameFromString($2 + 104 | 0, HEAP8[$2 + 203 | 0] & 1 ? 112653 : 120461);
  $3 = HEAP32[$2 + 204 >> 2];
  HEAP32[$2 + 32 >> 2] = HEAP32[$2 + 128 >> 2];
  $0 = HEAP32[$2 + 124 >> 2];
  $1 = HEAP32[$2 + 120 >> 2];
  HEAP32[$2 + 24 >> 2] = $1;
  HEAP32[$2 + 28 >> 2] = $0;
  $1 = HEAP32[$2 + 116 >> 2];
  $0 = HEAP32[$2 + 112 >> 2];
  HEAP32[$2 + 16 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  $0 = HEAP32[$2 + 108 >> 2];
  $1 = HEAP32[$2 + 104 >> 2];
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 12 >> 2] = $0;
  jsfWriteFile($2 + 8 | 0, $3, 0, 0, 0);
 }
 __stack_pointer = $2 + 208 | 0;
}

function jswrap_array_reverse($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 144 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 136 >> 2] = $0;
 label$1: {
  label$2: {
   if (jsvIsIterable(HEAP32[$1 + 136 >> 2]) & 1) {
    if (!(jsvIsObject(HEAP32[$1 + 136 >> 2]) & 1)) {
     break label$2;
    }
   }
   HEAP32[$1 + 140 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 132 >> 2] = 0;
  label$4: {
   if (jsvIsArray(HEAP32[$1 + 136 >> 2]) & 1) {
    jsvIteratorNew($1 + 72 | 0, HEAP32[$1 + 136 >> 2], 0);
    while (1) {
     if (jsvIteratorHasElement($1 + 72 | 0) & 1) {
      HEAP32[$1 + 68 >> 2] = jsvIteratorGetKey($1 + 72 | 0);
      if (jsvIsInt(HEAP32[$1 + 68 >> 2]) & 1) {
       HEAP32[$1 + 132 >> 2] = HEAP32[$1 + 132 >> 2] + 1;
      }
      jsvUnLock(HEAP32[$1 + 68 >> 2]);
      jsvIteratorNext($1 + 72 | 0);
      continue;
     }
     break;
    }
    jsvIteratorFree($1 + 72 | 0);
    break label$4;
   }
   HEAP32[$1 + 132 >> 2] = jsvGetLength(HEAP32[$1 + 136 >> 2]);
  }
  jsvIteratorNew($1 + 8 | 0, HEAP32[$1 + 136 >> 2], 0);
  if (HEAP32[$1 + 132 >> 2] > 1) {
   _jswrap_array_reverse_block(HEAP32[$1 + 136 >> 2], $1 + 8 | 0, HEAP32[$1 + 132 >> 2]);
  }
  if (jsvIsArray(HEAP32[$1 + 136 >> 2]) & 1) {
   HEAP32[$1 + 4 >> 2] = jsvGetArrayLength(HEAP32[$1 + 136 >> 2]) - 1;
   while (1) {
    if (jsvIteratorHasElement($1 + 8 | 0) & 1) {
     HEAP32[$1 >> 2] = jsvIteratorGetKey($1 + 8 | 0);
     if (jsvIsInt(HEAP32[$1 >> 2]) & 1) {
      jsvSetInteger(HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2] - jsvGetInteger(HEAP32[$1 >> 2]) | 0);
     }
     jsvUnLock(HEAP32[$1 >> 2]);
     jsvIteratorNext($1 + 8 | 0);
     continue;
    }
    break;
   }
  }
  jsvIteratorFree($1 + 8 | 0);
  HEAP32[$1 + 140 >> 2] = jsvLockAgain(HEAP32[$1 + 136 >> 2]);
 }
 __stack_pointer = $1 + 144 | 0;
 return HEAP32[$1 + 140 >> 2];
}

function find_longest_match($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 48 | 0;
 HEAP32[$5 + 40 >> 2] = $0;
 HEAP16[$5 + 38 >> 1] = $1;
 HEAP16[$5 + 36 >> 1] = $2;
 HEAP16[$5 + 34 >> 1] = $3;
 HEAP32[$5 + 28 >> 2] = $4;
 HEAP32[$5 + 24 >> 2] = HEAP32[$5 + 40 >> 2] + 15;
 HEAP16[$5 + 22 >> 1] = 0;
 HEAP16[$5 + 20 >> 1] = 65535;
 HEAP16[$5 + 18 >> 1] = 0;
 HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 24 >> 2] + HEAPU16[$5 + 36 >> 1];
 HEAP16[$5 + 10 >> 1] = HEAPU16[$5 + 36 >> 1] - 1;
 while (1) {
  label$2: {
   if ((HEAP16[$5 + 10 >> 1] - HEAP16[$5 + 38 >> 1] | 0) < 0) {
    break label$2;
   }
   HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 24 >> 2] + HEAP16[$5 + 10 >> 1];
   if (!(HEAPU8[HEAP32[$5 + 4 >> 2] + HEAPU16[$5 + 22 >> 1] | 0] != HEAPU8[HEAP32[$5 + 12 >> 2] + HEAPU16[$5 + 22 >> 1] | 0] | HEAPU8[HEAP32[$5 + 4 >> 2]] != HEAPU8[HEAP32[$5 + 12 >> 2]])) {
    HEAP16[$5 + 18 >> 1] = 1;
    while (1) {
     if (!(HEAPU8[HEAP32[$5 + 4 >> 2] + HEAPU16[$5 + 18 >> 1] | 0] != HEAPU8[HEAP32[$5 + 12 >> 2] + HEAPU16[$5 + 18 >> 1] | 0] | HEAPU16[$5 + 18 >> 1] >= HEAPU16[$5 + 34 >> 1])) {
      HEAP16[$5 + 18 >> 1] = HEAPU16[$5 + 18 >> 1] + 1;
      continue;
     }
     break;
    }
    if (HEAPU16[$5 + 18 >> 1] > HEAPU16[$5 + 22 >> 1]) {
     HEAP16[$5 + 22 >> 1] = HEAPU16[$5 + 18 >> 1];
     HEAP16[$5 + 20 >> 1] = HEAPU16[$5 + 10 >> 1];
     if (HEAPU16[$5 + 18 >> 1] == HEAPU16[$5 + 34 >> 1]) {
      break label$2;
     }
    }
   }
   HEAP16[$5 + 10 >> 1] = HEAPU16[$5 + 10 >> 1] - 1;
   continue;
  }
  break;
 }
 HEAP32[$5 >> 2] = 15;
 label$7: {
  if (HEAPU16[$5 + 22 >> 1] > 1) {
   HEAP16[HEAP32[$5 + 28 >> 2] >> 1] = HEAPU16[$5 + 22 >> 1];
   HEAP16[$5 + 46 >> 1] = HEAPU16[$5 + 36 >> 1] - HEAPU16[$5 + 20 >> 1];
   break label$7;
  }
  HEAP16[$5 + 46 >> 1] = 65535;
 }
 return HEAPU16[$5 + 46 >> 1];
}

function tflite__ops__micro__pooling___28anonymous_20namespace_29__MaxEvalFloat_28TfLiteContext__2c_20TfLiteNode__2c_20TfLitePoolParams__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData_20const__2c_20TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 128 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 124 >> 2] = $0;
 HEAP32[$6 + 120 >> 2] = $1;
 HEAP32[$6 + 116 >> 2] = $2;
 HEAP32[$6 + 112 >> 2] = $3;
 HEAP32[$6 + 108 >> 2] = $4;
 HEAP32[$6 + 104 >> 2] = $5;
 HEAP32[$6 + 68 >> 2] = HEAP32[HEAP32[$6 + 116 >> 2] + 8 >> 2];
 HEAP32[$6 + 72 >> 2] = HEAP32[HEAP32[$6 + 116 >> 2] + 4 >> 2];
 HEAP32[$6 + 76 >> 2] = HEAP32[HEAP32[$6 + 116 >> 2] + 16 >> 2];
 HEAP32[$6 + 80 >> 2] = HEAP32[HEAP32[$6 + 116 >> 2] + 12 >> 2];
 HEAP16[$6 + 60 >> 1] = HEAP32[HEAP32[$6 + 112 >> 2] + 4 >> 2];
 HEAP16[$6 + 58 >> 1] = HEAP32[HEAP32[$6 + 112 >> 2] >> 2];
 HEAPF32[$6 + 92 >> 2] = HEAPF32[HEAP32[$6 + 112 >> 2] + 24 >> 2];
 HEAPF32[$6 + 96 >> 2] = HEAPF32[HEAP32[$6 + 112 >> 2] + 28 >> 2];
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($6 + 32 | 0, HEAP32[$6 + 108 >> 2]);
 $0 = float_20const__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor_20const__29(HEAP32[$6 + 108 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($6 + 8 | 0, HEAP32[$6 + 104 >> 2]);
 tflite__reference_ops__MaxPool_28tflite__PoolParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($6 + 56 | 0, $6 + 32 | 0, $0, $6 + 8 | 0, float__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor__29(HEAP32[$6 + 104 >> 2]));
 tflite__RuntimeShape___RuntimeShape_28_29($6 + 8 | 0);
 tflite__RuntimeShape___RuntimeShape_28_29($6 + 32 | 0);
 __stack_pointer = $6 + 128 | 0;
}

function jswrap_espruino_convolve($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 176 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 164 >> 2] = $0;
 HEAP32[$3 + 160 >> 2] = $1;
 HEAP32[$3 + 156 >> 2] = $2;
 label$1: {
  label$2: {
   if (jsvIsIterable(HEAP32[$3 + 164 >> 2]) & 1) {
    if (jsvIsIterable(HEAP32[$3 + 160 >> 2]) & 1) {
     break label$2;
    }
   }
   $0 = HEAP32[$3 + 164 >> 2];
   HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 160 >> 2];
   HEAP32[$3 >> 2] = $0;
   jsExceptionHere(1, 114615, $3);
   HEAPF64[$3 + 168 >> 3] = nan;
   break label$1;
  }
  HEAPF64[$3 + 144 >> 3] = 0;
  jsvIteratorNew($3 + 80 | 0, HEAP32[$3 + 164 >> 2], 1);
  jsvIteratorNew($3 + 16 | 0, HEAP32[$3 + 160 >> 2], 1);
  HEAP32[$3 + 12 >> 2] = jsvGetLength(HEAP32[$3 + 160 >> 2]);
  HEAP32[$3 + 156 >> 2] = HEAP32[$3 + 156 >> 2] % HEAP32[$3 + 12 >> 2];
  if (HEAP32[$3 + 156 >> 2] < 0) {
   HEAP32[$3 + 156 >> 2] = HEAP32[$3 + 12 >> 2] + HEAP32[$3 + 156 >> 2];
  }
  while (1) {
   $0 = HEAP32[$3 + 156 >> 2];
   HEAP32[$3 + 156 >> 2] = $0 - 1;
   if (($0 | 0) > 0) {
    jsvIteratorNext($3 + 16 | 0);
    continue;
   }
   break;
  }
  while (1) {
   if (jsvIteratorHasElement($3 + 80 | 0) & 1) {
    HEAPF64[$3 + 144 >> 3] = jsvIteratorGetFloatValue($3 + 80 | 0) * jsvIteratorGetFloatValue($3 + 16 | 0) + HEAPF64[$3 + 144 >> 3];
    jsvIteratorNext($3 + 80 | 0);
    jsvIteratorNext($3 + 16 | 0);
    if (!(jsvIteratorHasElement($3 + 16 | 0) & 1)) {
     jsvIteratorFree($3 + 16 | 0);
     jsvIteratorNew($3 + 16 | 0, HEAP32[$3 + 160 >> 2], 1);
    }
    continue;
   }
   break;
  }
  jsvIteratorFree($3 + 80 | 0);
  jsvIteratorFree($3 + 16 | 0);
  HEAPF64[$3 + 168 >> 3] = HEAPF64[$3 + 144 >> 3];
 }
 __stack_pointer = $3 + 176 | 0;
 return +HEAPF64[$3 + 168 >> 3];
}

function __stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 $3 = HEAP32[$0 + 28 >> 2];
 HEAP32[$4 + 16 >> 2] = $3;
 $5 = HEAP32[$0 + 20 >> 2];
 HEAP32[$4 + 28 >> 2] = $2;
 HEAP32[$4 + 24 >> 2] = $1;
 $1 = $5 - $3 | 0;
 HEAP32[$4 + 20 >> 2] = $1;
 $7 = $1 + $2 | 0;
 $3 = $4 + 16 | 0;
 $8 = 2;
 label$1: {
  label$2: {
   label$3: {
    label$4: {
     if (__wasi_syscall_ret(__wasi_fd_write(HEAP32[$0 + 60 >> 2], $4 + 16 | 0, 2, $4 + 12 | 0) | 0)) {
      $5 = $3;
      break label$4;
     }
     while (1) {
      $1 = HEAP32[$4 + 12 >> 2];
      if (($7 | 0) == ($1 | 0)) {
       break label$3;
      }
      if (($1 | 0) < 0) {
       $5 = $3;
       break label$2;
      }
      $6 = HEAP32[$3 + 4 >> 2];
      $9 = $6 >>> 0 < $1 >>> 0;
      $5 = ($9 << 3) + $3 | 0;
      $6 = $1 - ($9 ? $6 : 0) | 0;
      HEAP32[$5 >> 2] = $6 + HEAP32[$5 >> 2];
      $3 = ($9 ? 12 : 4) + $3 | 0;
      HEAP32[$3 >> 2] = HEAP32[$3 >> 2] - $6;
      $7 = $7 - $1 | 0;
      $3 = $5;
      $8 = $8 - $9 | 0;
      if (!__wasi_syscall_ret(__wasi_fd_write(HEAP32[$0 + 60 >> 2], $3 | 0, $8 | 0, $4 + 12 | 0) | 0)) {
       continue;
      }
      break;
     }
    }
    if (($7 | 0) != -1) {
     break label$2;
    }
   }
   $1 = HEAP32[$0 + 44 >> 2];
   HEAP32[$0 + 28 >> 2] = $1;
   HEAP32[$0 + 20 >> 2] = $1;
   HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 48 >> 2] + $1;
   $1 = $2;
   break label$1;
  }
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32;
  $1 = 0;
  if (($8 | 0) == 2) {
   break label$1;
  }
  $1 = $2 - HEAP32[$5 + 4 >> 2] | 0;
 }
 __stack_pointer = $4 + 32 | 0;
 return $1 | 0;
}

function tflite__ops__micro__activations__SoftmaxEval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = tflite__micro__GetEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], 0);
 HEAP32[$2 + 12 >> 2] = tflite__micro__GetEvalOutput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], 0);
 label$1: {
  if (!HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2]) {
   break label$1;
  }
 }
 HEAP32[$2 + 8 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2];
 label$2: {
  label$3: {
   switch (HEAP32[HEAP32[$2 + 16 >> 2] + 8 >> 2] - 1 | 0) {
   case 0:
    tflite__ops__micro__activations__SoftmaxFloat_28TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__2c_20tflite__SoftmaxParams_20const__29(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
    HEAP32[$2 + 28 >> 2] = 0;
    break label$2;

   case 2:
   case 8:
    tflite__ops__micro__activations__SoftmaxQuantized_28TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__2c_20tflite__SoftmaxParams_20const__29(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
    HEAP32[$2 + 28 >> 2] = 0;
    break label$2;

   default:
    break label$3;
   }
  }
  $0 = HEAP32[HEAP32[$2 + 24 >> 2] + 20 >> 2];
  $1 = HEAP32[$2 + 24 >> 2];
  $3 = TfLiteTypeGetName(HEAP32[HEAP32[$2 + 16 >> 2] + 8 >> 2]);
  HEAP32[$2 + 4 >> 2] = HEAP32[HEAP32[$2 + 16 >> 2] + 8 >> 2];
  HEAP32[$2 >> 2] = $3;
  FUNCTION_TABLE[$0 | 0]($1, 127536, $2);
  HEAP32[$2 + 28 >> 2] = 1;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jsvIteratorGetIntegerValue($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  label$2: {
   switch (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] - 1 | 0) {
   case 3:
    label$7: {
     if (!(jsvIsNameInt(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) & 1)) {
      break label$7;
     }
     if ((jsvGetInteger(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) | 0) != HEAP32[HEAP32[$1 + 8 >> 2] + 12 >> 2]) {
      break label$7;
     }
     HEAP32[$1 + 12 >> 2] = jsvGetFirstChildSigned(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) << 16 >> 16;
     break label$1;
    }
    label$8: {
     if (!(jsvIsIntegerish(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) & 1)) {
      break label$8;
     }
     if ((jsvGetInteger(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) | 0) != HEAP32[HEAP32[$1 + 8 >> 2] + 12 >> 2]) {
      break label$8;
     }
     HEAP32[$1 + 12 >> 2] = jsvGetIntegerAndUnLock(jsvObjectIteratorGetValue_1(HEAP32[$1 + 8 >> 2] + 4 | 0));
     break label$1;
    }
    HEAP32[$1 + 12 >> 2] = 0;
    break label$1;

   case 1:
    if (jsvIsNameInt(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) & 1) {
     HEAP32[$1 + 12 >> 2] = jsvGetFirstChildSigned(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) << 16 >> 16;
     break label$1;
    }
    HEAP32[$1 + 12 >> 2] = jsvGetIntegerAndUnLock(jsvObjectIteratorGetValue_1(HEAP32[$1 + 8 >> 2] + 4 | 0));
    break label$1;

   case 0:
    HEAP32[$1 + 12 >> 2] = jsvStringIteratorGetChar_2(HEAP32[$1 + 8 >> 2] + 4 | 0) << 24 >> 24;
    break label$1;

   case 2:
    HEAP32[$1 + 12 >> 2] = jsvArrayBufferIteratorGetIntegerValue(HEAP32[$1 + 8 >> 2] + 4 | 0);
    break label$1;

   default:
    break label$2;
   }
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jspeFactorArray() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 32 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 label$1: {
  if ((HEAP32[86758] & 63) == 1) {
   HEAP32[$0 + 20 >> 2] = jsvNewEmptyArray();
   if (!HEAP32[$0 + 20 >> 2]) {
    jspSetError(0);
    HEAP32[$0 + 28 >> 2] = 0;
    break label$1;
   }
  }
  if (!(jslMatch(91) & 1)) {
   HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 20 >> 2];
   break label$1;
  }
  while (1) {
   $1 = 0;
   $1 = HEAP32[86758] & 80 ? $1 : HEAP16[HEAP32[44743] + 2 >> 1] != 93;
   if ($1) {
    label$8: {
     if ((HEAP32[86758] & 63) == 1) {
      if (HEAP16[HEAP32[44743] + 2 >> 1] != 44) {
       $1 = jsvSkipNameAndUnLock(jspeAssignmentExpression());
       HEAP32[$0 + 16 >> 2] = $1;
       HEAP32[$0 + 16 >> 2] = $1;
       HEAP32[$0 + 12 >> 2] = jsvMakeIntoVariableName(jsvNewFromInteger(HEAP32[$0 + 24 >> 2]), HEAP32[$0 + 16 >> 2]);
       if (HEAP32[$0 + 12 >> 2]) {
        jsvAddName(HEAP32[$0 + 20 >> 2], HEAP32[$0 + 12 >> 2]);
        jsvUnLock(HEAP32[$0 + 12 >> 2]);
       }
       jsvUnLock(HEAP32[$0 + 16 >> 2]);
      }
      break label$8;
     }
     jsvUnLock(jspeAssignmentExpression());
    }
    if (HEAP16[HEAP32[44743] + 2 >> 1] != 93) {
     if (!(jslMatch(44) & 1)) {
      HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 20 >> 2];
      break label$1;
     }
    }
    HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP32[$0 + 20 >> 2]) {
   jsvSetArrayLength(HEAP32[$0 + 20 >> 2], HEAP32[$0 + 24 >> 2], 0);
  }
  if (!(jslMatch(93) & 1)) {
   HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 20 >> 2];
   break label$1;
  }
  HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 20 >> 2];
 }
 __stack_pointer = $0 + 32 | 0;
 return HEAP32[$0 + 28 >> 2];
}

function escapeCharacter($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP8[$3 + 19 | 0] = $2;
 label$1: {
  if (HEAP32[$3 + 24 >> 2] == 10) {
   HEAP32[$3 + 28 >> 2] = 117615;
   break label$1;
  }
  if (HEAP32[$3 + 24 >> 2] == 9) {
   HEAP32[$3 + 28 >> 2] = 113303;
   break label$1;
  }
  if (HEAP32[$3 + 24 >> 2] == 8) {
   HEAP32[$3 + 28 >> 2] = 122905;
   break label$1;
  }
  if (!(HEAP8[$3 + 19 | 0] & 1 | HEAP32[$3 + 24 >> 2] != 11)) {
   HEAP32[$3 + 28 >> 2] = 112194;
   break label$1;
  }
  if (HEAP32[$3 + 24 >> 2] == 12) {
   HEAP32[$3 + 28 >> 2] = 119112;
   break label$1;
  }
  if (HEAP32[$3 + 24 >> 2] == 13) {
   HEAP32[$3 + 28 >> 2] = 116639;
   break label$1;
  }
  if (HEAP32[$3 + 24 >> 2] == 92) {
   HEAP32[$3 + 28 >> 2] = 123396;
   break label$1;
  }
  if (HEAP32[$3 + 24 >> 2] == 34) {
   HEAP32[$3 + 28 >> 2] = 143506;
   break label$1;
  }
  if (!(HEAP32[$3 + 20 >> 2] <= 55 & HEAP32[$3 + 20 >> 2] >= 48 | (HEAP8[$3 + 19 | 0] & 1 | HEAP32[$3 + 24 >> 2] >= 8))) {
   HEAP8[346984] = 92;
   HEAP8[346985] = HEAP32[$3 + 24 >> 2] + 48;
   HEAP8[346986] = 0;
   HEAP32[$3 + 28 >> 2] = 346984;
   break label$1;
  }
  if (!(HEAP32[$3 + 24 >> 2] < 127 & HEAP32[$3 + 24 >> 2] >= 32)) {
   HEAP32[$3 + 12 >> 2] = 346984;
   $0 = 1;
   $0 = HEAP8[$3 + 19 | 0] & 1 ? $0 : HEAP32[$3 + 24 >> 2] > 255;
   HEAP32[$3 + 12 >> 2] = numericEscapeChar(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 24 >> 2], $0);
   HEAP8[HEAP32[$3 + 12 >> 2]] = 0;
   HEAP32[$3 + 28 >> 2] = 346984;
   break label$1;
  }
  HEAP8[346985] = 0;
  HEAP8[346984] = HEAP32[$3 + 24 >> 2];
  HEAP32[$3 + 28 >> 2] = 346984;
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function jswrap_math_pow($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAPF64[$2 + 32 >> 3] = $0;
 HEAPF64[$2 + 24 >> 3] = $1;
 $0 = HEAPF64[$2 + 24 >> 3];
 label$1: {
  if (Math_abs($0) < 2147483648) {
   $3 = ~~$0;
   break label$1;
  }
  $3 = -2147483648;
 }
 HEAP32[$2 + 12 >> 2] = $3;
 label$3: {
  if (!(HEAP32[$2 + 12 >> 2] < 0 | HEAP32[$2 + 12 >> 2] >= 10 | HEAPF64[$2 + 24 >> 3] != +HEAP32[$2 + 12 >> 2])) {
   if (!HEAP32[$2 + 12 >> 2]) {
    HEAPF64[$2 + 40 >> 3] = 1;
    break label$3;
   }
   HEAPF64[$2 + 16 >> 3] = HEAPF64[$2 + 32 >> 3];
   while (1) {
    if (HEAP32[$2 + 12 >> 2] > 1) {
     HEAPF64[$2 + 16 >> 3] = HEAPF64[$2 + 16 >> 3] * HEAPF64[$2 + 32 >> 3];
     HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] - 1;
     continue;
    }
    break;
   }
   HEAPF64[$2 + 40 >> 3] = HEAPF64[$2 + 16 >> 3];
   break label$3;
  }
  label$8: {
   label$9: {
    if (!(HEAPF64[$2 + 32 >> 3] < 0)) {
     break label$9;
    }
    if (jswrap_math_mod(HEAPF64[$2 + 24 >> 3], 1) != 0) {
     break label$9;
    }
    label$10: {
     if (jswrap_math_mod(HEAPF64[$2 + 24 >> 3], 2) == 0) {
      HEAPF64[$2 + 16 >> 3] = exp(log(-HEAPF64[$2 + 32 >> 3]) * HEAPF64[$2 + 24 >> 3]);
      break label$10;
     }
     HEAPF64[$2 + 16 >> 3] = -exp(log(-HEAPF64[$2 + 32 >> 3]) * HEAPF64[$2 + 24 >> 3]);
    }
    break label$8;
   }
   label$12: {
    if (!(HEAPF64[$2 + 24 >> 3] <= 0 ? 0 : HEAPF64[$2 + 32 >> 3] == 0)) {
     HEAPF64[$2 + 16 >> 3] = exp(log(HEAPF64[$2 + 32 >> 3]) * HEAPF64[$2 + 24 >> 3]);
     break label$12;
    }
    HEAPF64[$2 + 16 >> 3] = 0;
   }
  }
  HEAPF64[$2 + 40 >> 3] = HEAPF64[$2 + 16 >> 3];
 }
 __stack_pointer = $2 + 48 | 0;
 return +HEAPF64[$2 + 40 >> 3];
}

function jsvArrayJoin($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 144 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 136 >> 2] = $0;
 HEAP32[$3 + 132 >> 2] = $1;
 HEAP8[$3 + 131 | 0] = $2;
 HEAP32[$3 + 124 >> 2] = jsvNewFromEmptyString_1();
 label$1: {
  if (!HEAP32[$3 + 124 >> 2]) {
   HEAP32[$3 + 140 >> 2] = 0;
   break label$1;
  }
  jsvIteratorNew($3 - -64 | 0, HEAP32[$3 + 136 >> 2], 1);
  jsvStringIteratorNew($3 + 24 | 0, HEAP32[$3 + 124 >> 2], 0);
  HEAP8[$3 + 23 | 0] = 1;
  while (1) {
   $0 = 0;
   if (!(jspIsInterrupted() & 1)) {
    $0 = jsvIteratorHasElement($3 - -64 | 0);
   }
   if ($0 & 1) {
    HEAP32[$3 + 16 >> 2] = jsvIteratorGetKey($3 - -64 | 0);
    if (jsvIsInt(HEAP32[$3 + 16 >> 2]) & 1) {
     if (!(!HEAP32[$3 + 132 >> 2] | HEAP8[$3 + 23 | 0] & 1)) {
      jsvStringIteratorAppendString($3 + 24 | 0, HEAP32[$3 + 132 >> 2], 0, 2147483647);
     }
     HEAP8[$3 + 23 | 0] = 0;
     HEAP32[$3 + 12 >> 2] = jsvIteratorGetValue($3 - -64 | 0);
     label$8: {
      if (!HEAP32[$3 + 12 >> 2]) {
       break label$8;
      }
      if (HEAP8[$3 + 131 | 0] & 1) {
       if (jsvIsNull(HEAP32[$3 + 12 >> 2]) & 1) {
        break label$8;
       }
      }
      HEAP32[$3 + 8 >> 2] = jsvAsString(HEAP32[$3 + 12 >> 2]);
      if (HEAP32[$3 + 8 >> 2]) {
       jsvStringIteratorAppendString($3 + 24 | 0, HEAP32[$3 + 8 >> 2], 0, 2147483647);
       jsvUnLock(HEAP32[$3 + 8 >> 2]);
      }
     }
     jsvUnLock(HEAP32[$3 + 12 >> 2]);
    }
    jsvUnLock(HEAP32[$3 + 16 >> 2]);
    jsvIteratorNext($3 - -64 | 0);
    continue;
   }
   break;
  }
  jsvIteratorFree($3 - -64 | 0);
  jsvStringIteratorFree_1($3 + 24 | 0);
  HEAP32[$3 + 140 >> 2] = HEAP32[$3 + 124 >> 2];
 }
 __stack_pointer = $3 + 144 | 0;
 return HEAP32[$3 + 140 >> 2];
}

function jswrap_arraybufferview_subarray($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 label$1: {
  if (!(jsvIsArrayBuffer(HEAP32[$3 + 24 >> 2]) & 1)) {
   jsExceptionHere(1, 112067, 0);
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = jsvGetInteger(HEAP32[$3 + 16 >> 2]);
  if (!(jsvIsNumeric(HEAP32[$3 + 16 >> 2]) & 1)) {
   HEAP32[$3 + 12 >> 2] = jsvGetArrayBufferLength(HEAP32[$3 + 24 >> 2]);
  }
  if (HEAP32[$3 + 20 >> 2] < 0) {
   HEAP32[$3 + 20 >> 2] = jsvGetArrayBufferLength(HEAP32[$3 + 24 >> 2]) + HEAP32[$3 + 20 >> 2];
  }
  if (HEAP32[$3 + 12 >> 2] < 0) {
   HEAP32[$3 + 12 >> 2] = jsvGetArrayBufferLength(HEAP32[$3 + 24 >> 2]) + HEAP32[$3 + 12 >> 2];
  }
  if (HEAP32[$3 + 12 >> 2] < 0) {
   HEAP32[$3 + 12 >> 2] = 0;
  }
  if (HEAP32[$3 + 20 >> 2] > HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 20 >> 2] = 0;
   HEAP32[$3 + 12 >> 2] = 0;
  }
  HEAP8[$3 + 11 | 0] = HEAPU8[HEAP32[$3 + 24 >> 2] + 5 | 0];
  if (HEAP32[$3 + 20 >> 2] == HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 28 >> 2] = jsvNewTypedArray(HEAPU8[$3 + 11 | 0], 0);
   break label$1;
  }
  HEAP32[$3 + 4 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$3 + 24 >> 2]) & 65535);
  $0 = HEAP32[$3 + 24 >> 2];
  HEAP32[$3 >> 2] = jswrap_typedarray_constructor(HEAPU8[$3 + 11 | 0], HEAP32[$3 + 4 >> 2], Math_imul(HEAP32[$3 + 20 >> 2], HEAPU8[$3 + 11 | 0] & 15) + (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8) | 0, HEAP32[$3 + 12 >> 2] - HEAP32[$3 + 20 >> 2] | 0);
  jsvUnLock(HEAP32[$3 + 4 >> 2]);
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 >> 2];
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function jsExceptionHere($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer + -64 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 60 >> 2] = $0;
 HEAP32[$3 + 56 >> 2] = $1;
 label$1: {
  if (jspHasError() & 1) {
   break label$1;
  }
  jsiConsoleRemoveInputLine();
  HEAP32[$3 + 52 >> 2] = jsvNewFromEmptyString_2();
  if (!HEAP32[$3 + 52 >> 2]) {
   jspSetError(0);
   break label$1;
  }
  jsvStringIteratorNew($3 + 16 | 0, HEAP32[$3 + 52 >> 2], 0);
  jsvStringIteratorGotoEnd($3 + 16 | 0);
  HEAP32[$3 + 12 >> 2] = 2;
  HEAP32[$3 + 8 >> 2] = $2;
  vcbprintf(HEAP32[$3 + 12 >> 2], $3 + 16 | 0, HEAP32[$3 + 56 >> 2], HEAP32[$3 + 8 >> 2]);
  jsvStringIteratorFree_3($3 + 16 | 0);
  if (HEAP32[$3 + 60 >> 2]) {
   HEAP32[$3 + 4 >> 2] = 0;
   label$4: {
    if (HEAP32[$3 + 60 >> 2] == 1) {
     HEAP32[$3 + 4 >> 2] = jswrap_error_constructor(HEAP32[$3 + 52 >> 2]);
     break label$4;
    }
    label$6: {
     if (HEAP32[$3 + 60 >> 2] == 2) {
      HEAP32[$3 + 4 >> 2] = jswrap_syntaxerror_constructor(HEAP32[$3 + 52 >> 2]);
      break label$6;
     }
     label$8: {
      if (HEAP32[$3 + 60 >> 2] == 3) {
       HEAP32[$3 + 4 >> 2] = jswrap_typeerror_constructor(HEAP32[$3 + 52 >> 2]);
       break label$8;
      }
      label$10: {
       if (HEAP32[$3 + 60 >> 2] == 4) {
        HEAP32[$3 + 4 >> 2] = jswrap_internalerror_constructor(HEAP32[$3 + 52 >> 2]);
        break label$10;
       }
       if (HEAP32[$3 + 60 >> 2] == 5) {
        HEAP32[$3 + 4 >> 2] = jswrap_referenceerror_constructor(HEAP32[$3 + 52 >> 2]);
       }
      }
     }
    }
   }
   jsvUnLock(HEAP32[$3 + 52 >> 2]);
   HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 4 >> 2];
  }
  jspSetException(HEAP32[$3 + 52 >> 2]);
  jsvUnLock(HEAP32[$3 + 52 >> 2]);
 }
 __stack_pointer = $3 - -64 | 0;
}

function jsvRemoveChild($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP16[$2 + 22 >> 1] = jsvGetRef(HEAP32[$2 + 24 >> 2]);
 HEAP8[$2 + 21 | 0] = 0;
 if ((jsvGetFirstChild(HEAP32[$2 + 28 >> 2]) & 65535) == HEAPU16[$2 + 22 >> 1]) {
  jsvSetFirstChild(HEAP32[$2 + 28 >> 2], jsvGetNextSibling(HEAP32[$2 + 24 >> 2]) & 65535);
  HEAP8[$2 + 21 | 0] = 1;
 }
 if ((jsvGetLastChild(HEAP32[$2 + 28 >> 2]) & 65535) == HEAPU16[$2 + 22 >> 1]) {
  jsvSetLastChild(HEAP32[$2 + 28 >> 2], jsvGetPrevSibling(HEAP32[$2 + 24 >> 2]) & 65535);
  HEAP8[$2 + 21 | 0] = 1;
  if (jsvIsArray(HEAP32[$2 + 28 >> 2]) & 1) {
   HEAP32[$2 + 16 >> 2] = 0;
   if (jsvGetLastChild(HEAP32[$2 + 28 >> 2]) & 65535) {
    HEAP32[$2 + 16 >> 2] = jsvGetIntegerAndUnLock(jsvLock(jsvGetLastChild(HEAP32[$2 + 28 >> 2]) & 65535)) + 1;
   }
   jsvSetArrayLength(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 16 >> 2], 0);
  }
 }
 if (jsvGetPrevSibling(HEAP32[$2 + 24 >> 2]) & 65535) {
  HEAP32[$2 + 12 >> 2] = jsvLock(jsvGetPrevSibling(HEAP32[$2 + 24 >> 2]) & 65535);
  jsvSetNextSibling(HEAP32[$2 + 12 >> 2], jsvGetNextSibling(HEAP32[$2 + 24 >> 2]) & 65535);
  jsvUnLock(HEAP32[$2 + 12 >> 2]);
  HEAP8[$2 + 21 | 0] = 1;
 }
 if (jsvGetNextSibling(HEAP32[$2 + 24 >> 2]) & 65535) {
  HEAP32[$2 + 8 >> 2] = jsvLock(jsvGetNextSibling(HEAP32[$2 + 24 >> 2]) & 65535);
  jsvSetPrevSibling(HEAP32[$2 + 8 >> 2], jsvGetPrevSibling(HEAP32[$2 + 24 >> 2]) & 65535);
  jsvUnLock(HEAP32[$2 + 8 >> 2]);
  HEAP8[$2 + 21 | 0] = 1;
 }
 jsvSetPrevSibling(HEAP32[$2 + 24 >> 2], 0);
 jsvSetNextSibling(HEAP32[$2 + 24 >> 2], 0);
 if (HEAP8[$2 + 21 | 0] & 1) {
  jsvUnRef(HEAP32[$2 + 24 >> 2]);
 }
 __stack_pointer = $2 + 32 | 0;
}

function jswrap_string_padX($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP8[$4 + 15 | 0] = $3;
 label$1: {
  label$2: {
   if (jsvIsString(HEAP32[$4 + 24 >> 2]) & 1) {
    if ((jsvGetStringLength(HEAP32[$4 + 24 >> 2]) | 0) < HEAP32[$4 + 20 >> 2]) {
     break label$2;
    }
   }
   HEAP32[$4 + 28 >> 2] = jsvLockAgain(HEAP32[$4 + 24 >> 2]);
   break label$1;
  }
  HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 20 >> 2] - jsvGetStringLength(HEAP32[$4 + 24 >> 2]);
  label$4: {
   if (HEAP8[$4 + 15 | 0] & 1) {
    $0 = jsvNewFromEmptyString_8();
    break label$4;
   }
   $0 = jsvNewFromStringVarComplete(HEAP32[$4 + 24 >> 2]);
  }
  HEAP32[$4 + 4 >> 2] = $0;
  if (!HEAP32[$4 + 4 >> 2]) {
   HEAP32[$4 + 28 >> 2] = 0;
   break label$1;
  }
  label$7: {
   if (HEAP32[$4 + 16 >> 2]) {
    $0 = jsvAsString(HEAP32[$4 + 16 >> 2]);
    break label$7;
   }
   $0 = jsvNewFromString(144421);
  }
  HEAP32[$4 + 16 >> 2] = $0;
  HEAP32[$4 >> 2] = jsvGetStringLength(HEAP32[$4 + 16 >> 2]);
  while (1) {
   if (HEAP32[$4 + 8 >> 2] > 0) {
    $1 = HEAP32[$4 + 4 >> 2];
    $2 = HEAP32[$4 + 16 >> 2];
    if (HEAP32[$4 >> 2] > HEAP32[$4 + 8 >> 2]) {
     $0 = HEAP32[$4 + 8 >> 2];
    } else {
     $0 = HEAP32[$4 >> 2];
    }
    jsvAppendStringVar($1, $2, 0, $0);
    HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 8 >> 2] - HEAP32[$4 >> 2];
    continue;
   }
   break;
  }
  if (HEAP8[$4 + 15 | 0] & 1) {
   jsvAppendStringVarComplete(HEAP32[$4 + 4 >> 2], HEAP32[$4 + 24 >> 2]);
  }
  jsvUnLock(HEAP32[$4 + 16 >> 2]);
  HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 4 >> 2];
 }
 __stack_pointer = $4 + 32 | 0;
 return HEAP32[$4 + 28 >> 2];
}

function jsiExecuteEventCallbackInner($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 40 >> 2] = $0;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP32[$4 + 28 >> 2] = $3;
 label$1: {
  if (!HEAP32[$4 + 36 >> 2]) {
   HEAP8[$4 + 47 | 0] = 0;
   break label$1;
  }
  HEAP8[$4 + 27 | 0] = 1;
  label$3: {
   if (jsvIsArray(HEAP32[$4 + 36 >> 2]) & 1) {
    jsvObjectIteratorNew($4 + 16 | 0, HEAP32[$4 + 36 >> 2]);
    while (1) {
     $0 = 0;
     label$6: {
      if (!(HEAP8[$4 + 27 | 0] & 1)) {
       break label$6;
      }
      $0 = 0;
      if (!(jsvObjectIteratorHasValue_3($4 + 16 | 0) & 1)) {
       break label$6;
      }
      $0 = (HEAPU16[173534] & 16384) != 0 ^ -1;
     }
     if ($0 & 1) {
      HEAP32[$4 + 12 >> 2] = jsvObjectIteratorGetValue_3($4 + 16 | 0);
      HEAP8[$4 + 27 | 0] = jsiExecuteEventCallbackInner(HEAP32[$4 + 40 >> 2], HEAP32[$4 + 12 >> 2], HEAP32[$4 + 32 >> 2], HEAP32[$4 + 28 >> 2]) & 1 & (HEAP8[$4 + 27 | 0] & 1);
      jsvUnLock(HEAP32[$4 + 12 >> 2]);
      jsvObjectIteratorNext($4 + 16 | 0);
      continue;
     }
     break;
    }
    jsvObjectIteratorFree_3($4 + 16 | 0);
    break label$3;
   }
   label$8: {
    if (jsvIsFunction(HEAP32[$4 + 36 >> 2]) & 1) {
     jsvUnLock(jspExecuteFunction(HEAP32[$4 + 36 >> 2], HEAP32[$4 + 40 >> 2], HEAP32[$4 + 32 >> 2], HEAP32[$4 + 28 >> 2]));
     break label$8;
    }
    label$10: {
     if (jsvIsString(HEAP32[$4 + 36 >> 2]) & 1) {
      jsvUnLock(jspEvaluateVar(HEAP32[$4 + 36 >> 2], 0, 0));
      break label$10;
     }
     jsError(119495, 0);
    }
   }
  }
  HEAP8[$4 + 47 | 0] = HEAP8[$4 + 27 | 0] & 1;
 }
 __stack_pointer = $4 + 48 | 0;
 return HEAP8[$4 + 47 | 0] & 1;
}

function jshTransmit($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 label$1: {
  if (!(HEAPU8[$2 + 15 | 0] != 17 & HEAPU8[$2 + 15 | 0] != 18)) {
   jshPushIOCharEvent((HEAPU8[$2 + 15 | 0] == 18 ? 17 : 18) & 255, HEAP8[$2 + 14 | 0]);
   break label$1;
  }
  if (HEAPU8[$2 + 15 | 0] == 20) {
   terminalSendChar(HEAP8[$2 + 14 | 0]);
   break label$1;
  }
  label$5: {
   if (HEAPU8[$2 + 15 | 0] != 21) {
    break label$5;
   }
   if (jshIsUSBSERIALConnected() & 1) {
    break label$5;
   }
   jshTransmitClearDevice(21);
   break label$1;
  }
  if (!HEAPU8[$2 + 15 | 0]) {
   break label$1;
  }
  HEAP8[$2 + 13 | 0] = HEAPU8[347146] + 1;
  if (HEAPU8[$2 + 13 | 0] == HEAPU8[347147]) {
   jsiSetBusy(2, 1);
   if (HEAPU8[$2 + 15 | 0] == 19) {
    $3 = (jsiGetConsoleDevice() & 255) == 19;
   }
   HEAP8[$2 + 12 | 0] = $3;
   while (1) {
    if (HEAPU8[$2 + 13 | 0] == HEAPU8[347147]) {
     if (jshIsInInterrupt() & 1) {
      HEAP8[346998] = HEAPU8[346998] | 2;
      break label$1;
     }
     jshBusyIdle();
     if (!(jshIsUSBSERIALConnected() & 1)) {
      jshTransmitClearDevice(21);
     }
     continue;
    }
    break;
   }
   label$12: {
    if (!(HEAP8[$2 + 12 | 0] & 1)) {
     break label$12;
    }
    if ((jsiGetConsoleDevice() & 255) == 19) {
     break label$12;
    }
    HEAP8[$2 + 15 | 0] = jsiGetConsoleDevice();
   }
   jsiSetBusy(2, 0);
  }
  HEAP8[(HEAPU8[347146] << 1) + 347232 | 0] = HEAPU8[$2 + 15 | 0];
  HEAP8[((HEAPU8[347146] << 1) + 347232 | 0) + 1 | 0] = HEAPU8[$2 + 14 | 0];
  HEAP8[347146] = HEAPU8[$2 + 13 | 0];
  jshUSARTKick(HEAPU8[$2 + 15 | 0]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function getRadix($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 10;
 if (HEAP8[HEAP32[HEAP32[$1 + 12 >> 2] >> 2]] == 48) {
  HEAP32[$1 + 8 >> 2] = 8;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
  label$2: {
   if (!(HEAP8[HEAP32[HEAP32[$1 + 12 >> 2] >> 2]] != 111 & HEAP8[HEAP32[HEAP32[$1 + 12 >> 2] >> 2]] != 79)) {
    HEAP32[$1 + 8 >> 2] = 8;
    $0 = HEAP32[$1 + 12 >> 2];
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
    break label$2;
   }
   label$5: {
    if (!(HEAP8[HEAP32[HEAP32[$1 + 12 >> 2] >> 2]] != 120 & HEAP8[HEAP32[HEAP32[$1 + 12 >> 2] >> 2]] != 88)) {
     HEAP32[$1 + 8 >> 2] = 16;
     $0 = HEAP32[$1 + 12 >> 2];
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
     break label$5;
    }
    label$8: {
     if (!(HEAP8[HEAP32[HEAP32[$1 + 12 >> 2] >> 2]] != 98 & HEAP8[HEAP32[HEAP32[$1 + 12 >> 2] >> 2]] != 66)) {
      HEAP32[$1 + 8 >> 2] = 2;
      $0 = HEAP32[$1 + 12 >> 2];
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
      break label$8;
     }
     HEAP32[$1 + 4 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
     while (1) {
      label$12: {
       if (!HEAPU8[HEAP32[$1 + 4 >> 2]]) {
        break label$12;
       }
       label$13: {
        if (!(!(HEAP8[HEAP32[$1 + 4 >> 2]] == 46 | HEAP8[HEAP32[$1 + 4 >> 2]] == 56) & HEAP8[HEAP32[$1 + 4 >> 2]] != 57)) {
         HEAP32[$1 + 8 >> 2] = 10;
         break label$13;
        }
        if (HEAP8[HEAP32[$1 + 4 >> 2]] < 48 | HEAP8[HEAP32[$1 + 4 >> 2]] > 57) {
         break label$12;
        }
       }
       HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
       continue;
      }
      break;
     }
    }
   }
  }
 }
 return HEAP32[$1 + 8 >> 2];
}

function tflite__ComputePaddingHeightWidth_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20TfLitePadding_2c_20int__2c_20int__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
 var $12 = 0;
 $12 = __stack_pointer - 48 | 0;
 __stack_pointer = $12;
 HEAP32[$12 + 44 >> 2] = $1;
 HEAP32[$12 + 40 >> 2] = $2;
 HEAP32[$12 + 36 >> 2] = $3;
 HEAP32[$12 + 32 >> 2] = $4;
 HEAP32[$12 + 28 >> 2] = $5;
 HEAP32[$12 + 24 >> 2] = $6;
 HEAP32[$12 + 20 >> 2] = $7;
 HEAP32[$12 + 16 >> 2] = $8;
 HEAP32[$12 + 12 >> 2] = $9;
 HEAP32[$12 + 8 >> 2] = $10;
 HEAP32[$12 + 4 >> 2] = $11;
 $1 = tflite__ComputeOutSize_28TfLitePadding_2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$12 + 12 >> 2], HEAP32[$12 + 24 >> 2], HEAP32[$12 + 16 >> 2], HEAP32[$12 + 40 >> 2], HEAP32[$12 + 32 >> 2]);
 HEAP32[HEAP32[$12 + 4 >> 2] >> 2] = $1;
 $1 = tflite__ComputeOutSize_28TfLitePadding_2c_20int_2c_20int_2c_20int_2c_20int_29(HEAP32[$12 + 12 >> 2], HEAP32[$12 + 28 >> 2], HEAP32[$12 + 20 >> 2], HEAP32[$12 + 44 >> 2], HEAP32[$12 + 36 >> 2]);
 HEAP32[HEAP32[$12 + 8 >> 2] >> 2] = $1;
 HEAP32[$12 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = tflite__ComputePaddingWithOffset_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__29(HEAP32[$12 + 44 >> 2], HEAP32[$12 + 36 >> 2], HEAP32[$12 + 28 >> 2], HEAP32[$12 + 20 >> 2], HEAP32[HEAP32[$12 + 8 >> 2] >> 2], $12);
 HEAP32[$0 + 12 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$0 >> 2] = tflite__ComputePaddingWithOffset_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__29(HEAP32[$12 + 40 >> 2], HEAP32[$12 + 32 >> 2], HEAP32[$12 + 24 >> 2], HEAP32[$12 + 16 >> 2], HEAP32[HEAP32[$12 + 4 >> 2] >> 2], $12);
 HEAP32[$0 + 8 >> 2] = HEAP32[$12 >> 2];
 __stack_pointer = $12 + 48 | 0;
}

function jswrap_tfmicrointerpreter_tensorToArrayBuffer($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 56 >> 2] = $0;
 HEAP8[$2 + 55 | 0] = $1;
 HEAP32[$2 + 48 >> 2] = jswrap_tfmicrointerpreter_getTFMI(HEAP32[$2 + 56 >> 2]);
 HEAP32[$2 + 44 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 56 >> 2], 118361);
 tf_get($2 + 32 | 0, HEAP32[$2 + 48 >> 2], HEAP8[$2 + 55 | 0] & 1);
 label$1: {
  if (!(HEAP32[$2 + 44 >> 2] ? HEAP32[$2 + 32 >> 2] : 0)) {
   jsExceptionHere(1, 116123, 0);
   HEAP32[$2 + 60 >> 2] = 0;
   break label$1;
  }
  HEAP8[$2 + 31 | 0] = 0;
  label$4: {
   label$5: {
    switch (HEAP32[$2 + 36 >> 2] - 1 | 0) {
    case 0:
     HEAP8[$2 + 31 | 0] = 36;
     break label$4;

    case 1:
     HEAP8[$2 + 31 | 0] = 20;
     break label$4;

    case 2:
     HEAP8[$2 + 31 | 0] = 1;
     break label$4;

    case 6:
     HEAP8[$2 + 31 | 0] = 18;
     break label$4;

    case 8:
     HEAP8[$2 + 31 | 0] = 17;
     break label$4;

    default:
     break label$5;
    }
   }
   HEAP32[$2 >> 2] = HEAP32[$2 + 36 >> 2];
   jsExceptionHere(3, 122203, $2);
   HEAP32[$2 + 60 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 20 >> 2] = jsvGetDataPointer(HEAP32[$2 + 44 >> 2], $2 + 24 | 0);
  HEAP32[$2 + 16 >> 2] = jsvNewArrayBufferFromString(HEAP32[$2 + 44 >> 2], 0);
  HEAP32[$2 + 12 >> 2] = jswrap_typedarray_constructor(HEAPU8[$2 + 31 | 0], HEAP32[$2 + 16 >> 2], HEAP32[$2 + 32 >> 2] - HEAP32[$2 + 20 >> 2] | 0, HEAPU32[$2 + 40 >> 2] / ((HEAPU8[$2 + 31 | 0] & 15) >>> 0) | 0);
  jsvUnLock2(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 44 >> 2]);
  HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 __stack_pointer = $2 - -64 | 0;
 return HEAP32[$2 + 60 >> 2];
}

function jsiSoftKill() {
 var $0 = 0;
 $0 = __stack_pointer + -64 | 0;
 __stack_pointer = $0;
 jsiExecuteEventCallbackOn(124964, 117785, 0, 0);
 jsiCheckErrors();
 HEAP32[86770] = 0;
 jsiInputLineCursorMoved();
 jsvUnLock(HEAP32[86768]);
 HEAP32[86768] = 0;
 jswKill();
 jstReset();
 if (HEAP32[86765]) {
  jsvUnLock(HEAP32[86765]);
  HEAP32[86765] = 0;
 }
 if (HEAPU16[173532]) {
  jsvUnRefRef(HEAPU16[173532]);
  HEAP16[173532] = 0;
 }
 if (HEAPU16[173533]) {
  HEAP32[$0 + 60 >> 2] = jsvLock(HEAPU16[173533]);
  jsvObjectIteratorNew($0 + 56 | 0, HEAP32[$0 + 60 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_3($0 + 56 | 0) & 1) {
    HEAP32[$0 + 52 >> 2] = jsvObjectIteratorGetValue_3($0 + 56 | 0);
    HEAP32[$0 + 48 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 52 >> 2], 117541);
    jshPinWatch(jshGetPinFromVar(HEAP32[$0 + 48 >> 2]) & 255, 0, 0);
    jsvUnLock2(HEAP32[$0 + 48 >> 2], HEAP32[$0 + 52 >> 2]);
    jsvObjectIteratorNext($0 + 56 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_3($0 + 56 | 0);
  jsvUnRef(HEAP32[$0 + 60 >> 2]);
  jsvUnLock(HEAP32[$0 + 60 >> 2]);
  HEAP16[173533] = 0;
 }
 if (HEAPU8[178976]) {
  jsvObjectSetChildAndUnLock(HEAP32[86751], 115438, jsvNewFromInteger(HEAPU8[178976]));
 }
 HEAP32[$0 + 44 >> 2] = jsvNewFromEmptyString_5();
 if (HEAP32[$0 + 44 >> 2]) {
  jsvStringIteratorNew($0 + 8 | 0, HEAP32[$0 + 44 >> 2], 0);
  jsiDumpHardwareInitialisation(2, $0 + 8 | 0, 0);
  jsvStringIteratorFree_5($0 + 8 | 0);
  jsvObjectSetChild(HEAP32[86751], 113046, HEAP32[$0 + 44 >> 2]);
  jsvUnLock(HEAP32[$0 + 44 >> 2]);
 }
 HEAP16[173534] = HEAPU16[173534] & -2049;
 HEAP16[173534] = HEAPU16[173534] & -4097;
 __stack_pointer = $0 - -64 | 0;
}

function tflite__MicroAllocator__RequestScratchBufferInArena_28int_2c_20unsigned_20long_2c_20int__29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 40 >> 2] = $0;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP32[$4 + 28 >> 2] = $3;
 label$1: {
  label$2: {
   $2 = HEAP32[$4 + 40 >> 2];
   if (!HEAP32[$2 + 16 >> 2]) {
    break label$2;
   }
   if (HEAP32[$2 + 16 >> 2] == (tflite__SimpleMemoryAllocator__GetTail_28_29_20const(HEAP32[$2 + 4 >> 2]) | 0)) {
    break label$2;
   }
   tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$2 + 8 >> 2], 127046, 0);
   HEAP32[$4 + 44 >> 2] = 1;
   break label$1;
  }
  $0 = HEAP32[$2 + 4 >> 2];
  HEAP32[$4 + 24 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, 12, 4);
  if (!HEAP32[$4 + 24 >> 2]) {
   $0 = HEAP32[$2 + 8 >> 2];
   HEAP32[$4 >> 2] = HEAP32[$4 + 36 >> 2];
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 115876, $4);
   HEAP32[$4 + 44 >> 2] = 1;
   break label$1;
  }
  HEAP32[$4 + 8 >> 2] = 0;
  HEAP32[$4 + 12 >> 2] = 0;
  HEAP32[$4 + 16 >> 2] = 0;
  $3 = HEAP32[$4 + 12 >> 2];
  $0 = HEAP32[$4 + 8 >> 2];
  $1 = $0;
  $0 = HEAP32[$4 + 24 >> 2];
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $3;
  HEAP32[$0 + 8 >> 2] = HEAP32[$4 + 16 >> 2];
  HEAP32[HEAP32[$4 + 24 >> 2] + 4 >> 2] = HEAP32[$4 + 32 >> 2];
  HEAP32[HEAP32[$4 + 24 >> 2] + 8 >> 2] = HEAP32[$4 + 36 >> 2];
  HEAP32[HEAP32[$4 + 28 >> 2] >> 2] = HEAP32[$2 + 20 >> 2];
  HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 20 >> 2] + 1;
  HEAP32[$2 + 16 >> 2] = HEAP32[$4 + 24 >> 2];
  HEAP32[$4 + 44 >> 2] = 0;
 }
 __stack_pointer = $4 + 48 | 0;
 return HEAP32[$4 + 44 >> 2];
}

function jswrap_array_fill($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 96 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 88 >> 2] = $0;
 HEAP32[$4 + 84 >> 2] = $1;
 HEAP32[$4 + 80 >> 2] = $2;
 HEAP32[$4 + 76 >> 2] = $3;
 label$1: {
  if (!(jsvIsIterable(HEAP32[$4 + 88 >> 2]) & 1)) {
   HEAP32[$4 + 92 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 72 >> 2] = jsvGetLength(HEAP32[$4 + 88 >> 2]);
  if (HEAP32[$4 + 80 >> 2] < 0) {
   HEAP32[$4 + 80 >> 2] = HEAP32[$4 + 80 >> 2] + HEAP32[$4 + 72 >> 2];
  }
  if (HEAP32[$4 + 80 >> 2] < 0) {
   HEAP32[$4 + 92 >> 2] = 0;
   break label$1;
  }
  label$5: {
   if (jsvIsNumeric(HEAP32[$4 + 76 >> 2]) & 1) {
    $0 = jsvGetInteger(HEAP32[$4 + 76 >> 2]);
    break label$5;
   }
   $0 = HEAP32[$4 + 72 >> 2];
  }
  HEAP32[$4 + 68 >> 2] = $0;
  if (HEAP32[$4 + 68 >> 2] < 0) {
   HEAP32[$4 + 68 >> 2] = HEAP32[$4 + 68 >> 2] + HEAP32[$4 + 72 >> 2];
  }
  if (HEAP32[$4 + 68 >> 2] < 0) {
   HEAP32[$4 + 92 >> 2] = 0;
   break label$1;
  }
  jsvIteratorNew($4 + 8 | 0, HEAP32[$4 + 88 >> 2], 1);
  while (1) {
   $0 = 0;
   if (jsvIteratorHasElement($4 + 8 | 0) & 1) {
    $0 = jspIsInterrupted() ^ -1;
   }
   if ($0 & 1) {
    HEAP32[$4 + 4 >> 2] = jsvGetIntegerAndUnLock(jsvIteratorGetKey($4 + 8 | 0));
    if (!(HEAP32[$4 + 4 >> 2] < HEAP32[$4 + 80 >> 2] | HEAP32[$4 + 4 >> 2] >= HEAP32[$4 + 68 >> 2])) {
     jsvIteratorSetValue($4 + 8 | 0, HEAP32[$4 + 84 >> 2]);
    }
    jsvIteratorNext($4 + 8 | 0);
    continue;
   }
   break;
  }
  jsvIteratorFree($4 + 8 | 0);
  HEAP32[$4 + 92 >> 2] = jsvLockAgain(HEAP32[$4 + 88 >> 2]);
 }
 __stack_pointer = $4 + 96 | 0;
 return HEAP32[$4 + 92 >> 2];
}

function void_20tflite__reference_ops__AffineQuantize_float_2c_20unsigned_20char__28tflite__QuantizationParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = Math_fround(0);
 $5 = __stack_pointer + -64 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 60 >> 2] = $0;
 HEAP32[$5 + 56 >> 2] = $1;
 HEAP32[$5 + 52 >> 2] = $2;
 HEAP32[$5 + 48 >> 2] = $3;
 HEAP32[$5 + 44 >> 2] = $4;
 HEAP32[$5 + 40 >> 2] = HEAP32[HEAP32[$5 + 60 >> 2] >> 2];
 HEAPF64[$5 + 32 >> 3] = HEAPF64[HEAP32[$5 + 60 >> 2] + 8 >> 3];
 HEAP32[$5 + 28 >> 2] = tflite__MatchingFlatSize_28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__29(HEAP32[$5 + 56 >> 2], HEAP32[$5 + 48 >> 2]);
 HEAP32[$5 + 24 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 24 >> 2] < HEAP32[$5 + 28 >> 2]) {
   HEAPF32[$5 + 20 >> 2] = HEAPF32[HEAP32[$5 + 52 >> 2] + (HEAP32[$5 + 24 >> 2] << 2) >> 2];
   $6 = float_20tflite__TfLiteRound_float__28float_29(Math_fround(HEAPF32[$5 + 20 >> 2] / Math_fround(HEAPF64[$5 + 32 >> 3])));
   label$3: {
    if (Math_fround(Math_abs($6)) < Math_fround(2147483648)) {
     $0 = ~~$6;
     break label$3;
    }
    $0 = -2147483648;
   }
   HEAP32[$5 + 16 >> 2] = $0 + HEAP32[$5 + 40 >> 2];
   HEAP32[$5 + 12 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29(int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 16 | 0, 172784), 172788) >> 2];
   HEAP8[HEAP32[$5 + 44 >> 2] + HEAP32[$5 + 24 >> 2] | 0] = HEAP32[$5 + 12 >> 2];
   HEAP32[$5 + 24 >> 2] = HEAP32[$5 + 24 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 - -64 | 0;
}

function jswrap_e_dumpFragmentation() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 while (1) {
  if (HEAPU32[$0 + 8 >> 2] < jsvGetMemoryTotal() >>> 0) {
   HEAP32[$0 + 4 >> 2] = _jsvGetAddressOf(HEAP32[$0 + 8 >> 2] + 1 & 65535);
   $1 = HEAP32[$0 + 4 >> 2];
   label$3: {
    if (!((HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & 63)) {
     jsiConsolePrintString(144421);
     $1 = HEAP32[$0 + 12 >> 2];
     HEAP32[$0 + 12 >> 2] = $1 + 1;
     if (($1 | 0) > 80) {
      jsiConsolePrintString(146977);
      HEAP32[$0 + 12 >> 2] = 0;
     }
     break label$3;
    }
    label$6: {
     if (jsvGetLocks(HEAP32[$0 + 4 >> 2]) & 255) {
      jsiConsolePrintString(124497);
      break label$6;
     }
     jsiConsolePrintString(143504);
    }
    $1 = HEAP32[$0 + 12 >> 2];
    HEAP32[$0 + 12 >> 2] = $1 + 1;
    if (($1 | 0) > 80) {
     jsiConsolePrintString(146977);
     HEAP32[$0 + 12 >> 2] = 0;
    }
    if (jsvIsFlatString(HEAP32[$0 + 4 >> 2]) & 1) {
     HEAP32[$0 >> 2] = jsvGetFlatStringBlocks(HEAP32[$0 + 4 >> 2]);
     HEAP32[$0 + 8 >> 2] = HEAP32[$0 >> 2] + HEAP32[$0 + 8 >> 2];
     while (1) {
      $1 = HEAP32[$0 >> 2];
      HEAP32[$0 >> 2] = $1 - 1;
      if ($1) {
       jsiConsolePrintString(125412);
       $1 = HEAP32[$0 + 12 >> 2];
       HEAP32[$0 + 12 >> 2] = $1 + 1;
       if (($1 | 0) > 80) {
        jsiConsolePrintString(146977);
        HEAP32[$0 + 12 >> 2] = 0;
       }
       continue;
      }
      break;
     }
    }
   }
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 jsiConsolePrintString(146977);
 __stack_pointer = $0 + 16 | 0;
}

function void_20tflite__reference_ops__AffineQuantize_float_2c_20signed_20char__28tflite__QuantizationParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = Math_fround(0);
 $5 = __stack_pointer + -64 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 60 >> 2] = $0;
 HEAP32[$5 + 56 >> 2] = $1;
 HEAP32[$5 + 52 >> 2] = $2;
 HEAP32[$5 + 48 >> 2] = $3;
 HEAP32[$5 + 44 >> 2] = $4;
 HEAP32[$5 + 40 >> 2] = HEAP32[HEAP32[$5 + 60 >> 2] >> 2];
 HEAPF64[$5 + 32 >> 3] = HEAPF64[HEAP32[$5 + 60 >> 2] + 8 >> 3];
 HEAP32[$5 + 28 >> 2] = tflite__MatchingFlatSize_28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__29(HEAP32[$5 + 56 >> 2], HEAP32[$5 + 48 >> 2]);
 HEAP32[$5 + 24 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 24 >> 2] < HEAP32[$5 + 28 >> 2]) {
   HEAPF32[$5 + 20 >> 2] = HEAPF32[HEAP32[$5 + 52 >> 2] + (HEAP32[$5 + 24 >> 2] << 2) >> 2];
   $6 = float_20tflite__TfLiteRound_float__28float_29(Math_fround(HEAPF32[$5 + 20 >> 2] / Math_fround(HEAPF64[$5 + 32 >> 3])));
   label$3: {
    if (Math_fround(Math_abs($6)) < Math_fround(2147483648)) {
     $0 = ~~$6;
     break label$3;
    }
    $0 = -2147483648;
   }
   HEAP32[$5 + 16 >> 2] = $0 + HEAP32[$5 + 40 >> 2];
   HEAP32[$5 + 12 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29(int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 16 | 0, 172776), 172780) >> 2];
   HEAP8[HEAP32[$5 + 44 >> 2] + HEAP32[$5 + 24 >> 2] | 0] = HEAP32[$5 + 12 >> 2];
   HEAP32[$5 + 24 >> 2] = HEAP32[$5 + 24 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 - -64 | 0;
}

function void_20tflite__reference_ops__AffineQuantize_float_2c_20short__28tflite__QuantizationParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20short__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = Math_fround(0);
 $5 = __stack_pointer + -64 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 60 >> 2] = $0;
 HEAP32[$5 + 56 >> 2] = $1;
 HEAP32[$5 + 52 >> 2] = $2;
 HEAP32[$5 + 48 >> 2] = $3;
 HEAP32[$5 + 44 >> 2] = $4;
 HEAP32[$5 + 40 >> 2] = HEAP32[HEAP32[$5 + 60 >> 2] >> 2];
 HEAPF64[$5 + 32 >> 3] = HEAPF64[HEAP32[$5 + 60 >> 2] + 8 >> 3];
 HEAP32[$5 + 28 >> 2] = tflite__MatchingFlatSize_28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__29(HEAP32[$5 + 56 >> 2], HEAP32[$5 + 48 >> 2]);
 HEAP32[$5 + 24 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 24 >> 2] < HEAP32[$5 + 28 >> 2]) {
   HEAPF32[$5 + 20 >> 2] = HEAPF32[HEAP32[$5 + 52 >> 2] + (HEAP32[$5 + 24 >> 2] << 2) >> 2];
   $6 = float_20tflite__TfLiteRound_float__28float_29(Math_fround(HEAPF32[$5 + 20 >> 2] / Math_fround(HEAPF64[$5 + 32 >> 3])));
   label$3: {
    if (Math_fround(Math_abs($6)) < Math_fround(2147483648)) {
     $0 = ~~$6;
     break label$3;
    }
    $0 = -2147483648;
   }
   HEAP32[$5 + 16 >> 2] = $0 + HEAP32[$5 + 40 >> 2];
   HEAP32[$5 + 12 >> 2] = HEAP32[int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29(int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($5 + 16 | 0, 172792), 172796) >> 2];
   HEAP16[HEAP32[$5 + 44 >> 2] + (HEAP32[$5 + 24 >> 2] << 1) >> 1] = HEAP32[$5 + 12 >> 2];
   HEAP32[$5 + 24 >> 2] = HEAP32[$5 + 24 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 - -64 | 0;
}

function jswrap_object_emit($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $4 = __stack_pointer + -64 | 0;
 $3 = $4;
 __stack_pointer = $3;
 HEAP32[$3 + 60 >> 2] = $0;
 HEAP32[$3 + 56 >> 2] = $1;
 HEAP32[$3 + 52 >> 2] = $2;
 label$1: {
  if (!(jsvHasChildren(HEAP32[$3 + 60 >> 2]) & 1)) {
   jsExceptionHere(3, 122784, 0);
   break label$1;
  }
  if (!(jsvIsString(HEAP32[$3 + 56 >> 2]) & 1)) {
   jsExceptionHere(3, 118836, 0);
   break label$1;
  }
  HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 56 >> 2];
  HEAP32[$3 + 48 >> 2] = jsvVarPrintf(112207, $3 + 16 | 0);
  if (!HEAP32[$3 + 48 >> 2]) {
   break label$1;
  }
  HEAP32[$3 + 44 >> 2] = 4;
  HEAP32[$3 + 40 >> 2] = $4;
  $4 = $4 - 16 | 0;
  __stack_pointer = $4;
  HEAP32[$3 + 36 >> 2] = 0;
  jsvObjectIteratorNew($3 + 32 | 0, HEAP32[$3 + 52 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_9($3 + 32 | 0) & 1) {
    if (HEAPU32[$3 + 36 >> 2] >= 4) {
     HEAP32[$3 >> 2] = 4;
     jsExceptionHere(3, 142896, $3);
    } else {
     $0 = jsvObjectIteratorGetValue_9($3 + 32 | 0);
     $1 = HEAP32[$3 + 36 >> 2];
     HEAP32[$3 + 36 >> 2] = $1 + 1;
     HEAP32[($1 << 2) + $4 >> 2] = $0;
     jsvObjectIteratorNext($3 + 32 | 0);
     continue;
    }
   }
   break;
  }
  jsvObjectIteratorFree_9($3 + 32 | 0);
  HEAP32[$3 + 28 >> 2] = jsvSkipNameAndUnLock(jsvFindChildFromVar(HEAP32[$3 + 60 >> 2], HEAP32[$3 + 48 >> 2], 0));
  jsvUnLock(HEAP32[$3 + 48 >> 2]);
  if (HEAP32[$3 + 28 >> 2]) {
   jsiQueueEvents(HEAP32[$3 + 60 >> 2], HEAP32[$3 + 28 >> 2], $4, HEAP32[$3 + 36 >> 2]);
  }
  jsvUnLock(HEAP32[$3 + 28 >> 2]);
  jsvUnLockMany(HEAP32[$3 + 36 >> 2], $4);
 }
 __stack_pointer = $3 - -64 | 0;
}

function jswrap_tensorflow_create($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1: {
  if (HEAP32[$2 + 40 >> 2] < 512) {
   jsExceptionHere(1, 119341, 0);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 32 >> 2] = 0;
  HEAP32[$2 + 28 >> 2] = jsvGetDataPointer(HEAP32[$2 + 36 >> 2], $2 + 32 | 0);
  if (!HEAP32[$2 + 28 >> 2]) {
   jsExceptionHere(3, 116410, 0);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 24 >> 2] = jspNewObject(0, 116229);
  if (!HEAP32[$2 + 24 >> 2]) {
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 20 >> 2] = tf_get_size(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 28 >> 2]);
  HEAP32[$2 + 16 >> 2] = jsvNewFlatStringOfLength(HEAP32[$2 + 20 >> 2] + 15 | 0);
  if (!HEAP32[$2 + 16 >> 2]) {
   jsExceptionHere(1, 111998, 0);
   jsvUnLock(HEAP32[$2 + 24 >> 2]);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  if (!jsvGetDataPointer(HEAP32[$2 + 16 >> 2], $2 + 20 | 0)) {
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  jsvObjectSetChild(HEAP32[$2 + 24 >> 2], 118032, HEAP32[$2 + 36 >> 2]);
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 118361, HEAP32[$2 + 16 >> 2]);
  HEAP32[$2 + 12 >> 2] = jswrap_tfmicrointerpreter_getTFMI(HEAP32[$2 + 24 >> 2]);
  if (!(tf_create(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 40 >> 2], HEAP32[$2 + 28 >> 2]) & 1)) {
   jsExceptionHere(1, 121727, 0);
   jsvUnLock(HEAP32[$2 + 24 >> 2]);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 24 >> 2];
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function jsvNewFromStringVar($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 label$1: {
  label$2: {
   if (!(jsvIsNativeString(HEAP32[$3 + 24 >> 2]) & 1)) {
    if (!(jsvIsFlashString(HEAP32[$3 + 24 >> 2]) & 1)) {
     break label$2;
    }
   }
   HEAP32[$3 + 12 >> 2] = jsvGetStringLength(HEAP32[$3 + 24 >> 2]);
   if (HEAPU32[$3 + 20 >> 2] > HEAPU32[$3 + 12 >> 2]) {
    HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 12 >> 2];
   }
   if (HEAPU32[$3 + 12 >> 2] < HEAP32[$3 + 20 >> 2] + HEAP32[$3 + 16 >> 2] >>> 0) {
    HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 12 >> 2] - HEAP32[$3 + 20 >> 2];
   }
   $0 = HEAP32[$3 + 24 >> 2];
   HEAP32[$3 + 8 >> 2] = jsvNewWithFlags((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63);
   $0 = HEAP32[$3 + 8 >> 2];
   $1 = HEAP32[$3 + 24 >> 2];
   $1 = HEAP32[$3 + 20 >> 2] + (HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24)) | 0;
   HEAP8[$0 | 0] = $1;
   HEAP8[$0 + 1 | 0] = $1 >>> 8;
   HEAP8[$0 + 2 | 0] = $1 >>> 16;
   HEAP8[$0 + 3 | 0] = $1 >>> 24;
   $0 = HEAP32[$3 + 8 >> 2];
   $1 = HEAP32[$3 + 16 >> 2];
   HEAP8[$0 + 4 | 0] = $1;
   HEAP8[$0 + 5 | 0] = $1 >>> 8;
   HEAP8[$0 + 6 | 0] = $1 >>> 16;
   HEAP8[$0 + 7 | 0] = $1 >>> 24;
   HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 8 >> 2];
   break label$1;
  }
  HEAP32[$3 + 4 >> 2] = jsvNewFromEmptyString_1();
  jsvAppendStringVar(HEAP32[$3 + 4 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2]);
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 4 >> 2];
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function void_20tflite__reference_ops__Requantize_signed_20char_2c_20signed_20char__28signed_20char_20const__2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20signed_20char__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0;
 $7 = __stack_pointer + -64 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 60 >> 2] = $0;
 HEAP32[$7 + 56 >> 2] = $1;
 HEAP32[$7 + 52 >> 2] = $2;
 HEAP32[$7 + 48 >> 2] = $3;
 HEAP32[$7 + 44 >> 2] = $4;
 HEAP32[$7 + 40 >> 2] = $5;
 HEAP32[$7 + 36 >> 2] = $6;
 ruy__profiler__ScopeLabel__ScopeLabel_char_20const___28char_20const__29($7 + 32 | 0, 119169);
 $8 = HEAP32[$7 + 52 >> 2] == 1073741824 ? HEAP32[$7 + 48 >> 2] == 1 : $8;
 HEAP8[$7 + 31 | 0] = $8;
 if (HEAP8[$7 + 31 | 0] & 1) {
  HEAP8[$7 + 30 | 0] = 0;
  HEAP8[$7 + 29 | 0] = 0;
  HEAP32[$7 + 24 >> 2] = HEAP32[$7 + 44 >> 2] - HEAP32[$7 + 40 >> 2];
 }
 HEAP32[$7 + 20 >> 2] = 0;
 while (1) {
  if (HEAP32[$7 + 20 >> 2] < HEAP32[$7 + 56 >> 2]) {
   HEAP32[$7 + 16 >> 2] = HEAP8[HEAP32[$7 + 60 >> 2] + HEAP32[$7 + 20 >> 2] | 0] - HEAP32[$7 + 44 >> 2];
   HEAP32[$7 + 12 >> 2] = tflite__MultiplyByQuantizedMultiplier_28int_2c_20int_2c_20int_29(HEAP32[$7 + 16 >> 2], HEAP32[$7 + 52 >> 2], HEAP32[$7 + 48 >> 2]) + HEAP32[$7 + 40 >> 2];
   HEAP32[$7 + 8 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29(int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($7 + 12 | 0, 172820), 172816) >> 2];
   HEAP8[HEAP32[$7 + 36 >> 2] + HEAP32[$7 + 20 >> 2] | 0] = HEAP32[$7 + 8 >> 2];
   HEAP32[$7 + 20 >> 2] = HEAP32[$7 + 20 >> 2] + 1;
   continue;
  }
  break;
 }
 ruy__profiler__ScopeLabel___ScopeLabel_28_29($7 + 32 | 0);
 __stack_pointer = $7 - -64 | 0;
}

function st_step_search($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP16[$1 + 22 >> 1] = get_input_buffer_size(HEAP32[$1 + 24 >> 2]);
 HEAP16[$1 + 20 >> 1] = get_lookahead_size(HEAP32[$1 + 24 >> 2]);
 HEAP16[$1 + 18 >> 1] = HEAPU16[HEAP32[$1 + 24 >> 2] + 2 >> 1];
 HEAP8[$1 + 17 | 0] = (is_finishing(HEAP32[$1 + 24 >> 2]) | 0) != 0;
 label$1: {
  if (HEAPU16[$1 + 18 >> 1] > (HEAPU16[HEAP32[$1 + 24 >> 2] >> 1] - (HEAP8[$1 + 17 | 0] & 1 ? 1 : HEAPU16[$1 + 20 >> 1]) | 0)) {
   HEAP32[$1 + 28 >> 2] = HEAP8[$1 + 17 | 0] & 1 ? 8 : 7;
   break label$1;
  }
  HEAP16[$1 + 14 >> 1] = get_input_offset(HEAP32[$1 + 24 >> 2]);
  HEAP16[$1 + 12 >> 1] = HEAPU16[$1 + 14 >> 1] + HEAPU16[$1 + 18 >> 1];
  HEAP16[$1 + 10 >> 1] = HEAPU16[$1 + 12 >> 1] - HEAPU16[$1 + 22 >> 1];
  HEAP16[$1 + 8 >> 1] = HEAPU16[$1 + 20 >> 1];
  if (HEAPU16[$1 + 20 >> 1] > (HEAPU16[HEAP32[$1 + 24 >> 2] >> 1] - HEAPU16[$1 + 18 >> 1] | 0)) {
   HEAP16[$1 + 8 >> 1] = HEAPU16[HEAP32[$1 + 24 >> 2] >> 1] - HEAPU16[$1 + 18 >> 1];
  }
  HEAP16[$1 + 6 >> 1] = 0;
  HEAP16[$1 + 4 >> 1] = find_longest_match(HEAP32[$1 + 24 >> 2], HEAPU16[$1 + 10 >> 1], HEAPU16[$1 + 12 >> 1], HEAPU16[$1 + 8 >> 1], $1 + 6 | 0);
  if (HEAPU16[$1 + 4 >> 1] == 65535) {
   $0 = HEAP32[$1 + 24 >> 2];
   HEAP16[$0 + 2 >> 1] = HEAPU16[$0 + 2 >> 1] + 1;
   HEAP16[HEAP32[$1 + 24 >> 2] + 4 >> 1] = 0;
   HEAP32[$1 + 28 >> 2] = 3;
   break label$1;
  }
  HEAP16[HEAP32[$1 + 24 >> 2] + 6 >> 1] = HEAPU16[$1 + 4 >> 1];
  HEAP16[HEAP32[$1 + 24 >> 2] + 4 >> 1] = HEAPU16[$1 + 6 >> 1];
  HEAP32[$1 + 28 >> 2] = 3;
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function void_20tflite__reference_ops__Requantize_short_2c_20signed_20char__28short_20const__2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20signed_20char__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0;
 $7 = __stack_pointer + -64 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 60 >> 2] = $0;
 HEAP32[$7 + 56 >> 2] = $1;
 HEAP32[$7 + 52 >> 2] = $2;
 HEAP32[$7 + 48 >> 2] = $3;
 HEAP32[$7 + 44 >> 2] = $4;
 HEAP32[$7 + 40 >> 2] = $5;
 HEAP32[$7 + 36 >> 2] = $6;
 ruy__profiler__ScopeLabel__ScopeLabel_char_20const___28char_20const__29($7 + 32 | 0, 119169);
 $8 = HEAP32[$7 + 52 >> 2] == 1073741824 ? HEAP32[$7 + 48 >> 2] == 1 : $8;
 HEAP8[$7 + 31 | 0] = $8;
 if (HEAP8[$7 + 31 | 0] & 1) {
  HEAP8[$7 + 30 | 0] = 0;
  HEAP8[$7 + 29 | 0] = 0;
  HEAP32[$7 + 24 >> 2] = HEAP32[$7 + 44 >> 2] - HEAP32[$7 + 40 >> 2];
 }
 HEAP32[$7 + 20 >> 2] = 0;
 while (1) {
  if (HEAP32[$7 + 20 >> 2] < HEAP32[$7 + 56 >> 2]) {
   HEAP32[$7 + 16 >> 2] = HEAP16[HEAP32[$7 + 60 >> 2] + (HEAP32[$7 + 20 >> 2] << 1) >> 1] - HEAP32[$7 + 44 >> 2];
   HEAP32[$7 + 12 >> 2] = tflite__MultiplyByQuantizedMultiplier_28int_2c_20int_2c_20int_29(HEAP32[$7 + 16 >> 2], HEAP32[$7 + 52 >> 2], HEAP32[$7 + 48 >> 2]) + HEAP32[$7 + 40 >> 2];
   HEAP32[$7 + 8 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29(int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($7 + 12 | 0, 172804), 172800) >> 2];
   HEAP8[HEAP32[$7 + 36 >> 2] + HEAP32[$7 + 20 >> 2] | 0] = HEAP32[$7 + 8 >> 2];
   HEAP32[$7 + 20 >> 2] = HEAP32[$7 + 20 >> 2] + 1;
   continue;
  }
  break;
 }
 ruy__profiler__ScopeLabel___ScopeLabel_28_29($7 + 32 | 0);
 __stack_pointer = $7 - -64 | 0;
}

function tflite__MicroInterpreter__ResetVariableTensors_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 $0 = HEAP32[$1 + 24 >> 2];
 HEAP32[$1 + 20 >> 2] = 0;
 label$1: {
  while (1) {
   if (HEAPU32[$1 + 20 >> 2] < flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor____size_28_29_20const(tflite__SubGraph__tensors_28_29_20const(HEAP32[$0 + 116 >> 2])) >>> 0) {
    HEAP32[$1 + 16 >> 2] = flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor____Get_28unsigned_20int_29_20const(tflite__SubGraph__tensors_28_29_20const(HEAP32[$0 + 116 >> 2]), HEAP32[$1 + 20 >> 2]);
    if (tflite__Tensor__is_variable_28_29_20const(HEAP32[$1 + 16 >> 2]) & 1) {
     HEAP32[$1 + 8 >> 2] = tflite__TfLiteEvalTensorByteLength_28TfLiteEvalTensor_20const__2c_20unsigned_20long__29(HEAP32[$0 + 120 >> 2] + Math_imul(HEAP32[$1 + 20 >> 2], 12) | 0, $1 + 12 | 0);
     if (HEAP32[$1 + 8 >> 2]) {
      HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 8 >> 2];
      break label$1;
     }
     HEAP32[$1 + 4 >> 2] = 0;
     if ((tflite__Tensor__type_28_29_20const(HEAP32[$1 + 16 >> 2]) | 0) == 9) {
      HEAP32[$1 + 4 >> 2] = flatbuffers__Vector_long_20long___Get_28unsigned_20int_29_20const(tflite__QuantizationParameters__zero_point_28_29_20const(tflite__Tensor__quantization_28_29_20const(HEAP32[$1 + 16 >> 2])), 0);
     }
     memset(HEAP32[HEAP32[$0 + 120 >> 2] + Math_imul(HEAP32[$1 + 20 >> 2], 12) >> 2], HEAP32[$1 + 4 >> 2], HEAP32[$1 + 12 >> 2]);
    }
    HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 20 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$1 + 28 >> 2] = 0;
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function void_20tflite__reference_ops__Requantize_signed_20char_2c_20int__28signed_20char_20const__2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0;
 $7 = __stack_pointer + -64 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 60 >> 2] = $0;
 HEAP32[$7 + 56 >> 2] = $1;
 HEAP32[$7 + 52 >> 2] = $2;
 HEAP32[$7 + 48 >> 2] = $3;
 HEAP32[$7 + 44 >> 2] = $4;
 HEAP32[$7 + 40 >> 2] = $5;
 HEAP32[$7 + 36 >> 2] = $6;
 ruy__profiler__ScopeLabel__ScopeLabel_char_20const___28char_20const__29($7 + 32 | 0, 119169);
 $8 = HEAP32[$7 + 52 >> 2] == 1073741824 ? HEAP32[$7 + 48 >> 2] == 1 : $8;
 HEAP8[$7 + 31 | 0] = $8;
 if (HEAP8[$7 + 31 | 0] & 1) {
  HEAP8[$7 + 30 | 0] = 0;
  HEAP8[$7 + 29 | 0] = 0;
  HEAP32[$7 + 24 >> 2] = HEAP32[$7 + 44 >> 2] - HEAP32[$7 + 40 >> 2];
 }
 HEAP32[$7 + 20 >> 2] = 0;
 while (1) {
  if (HEAP32[$7 + 20 >> 2] < HEAP32[$7 + 56 >> 2]) {
   HEAP32[$7 + 16 >> 2] = HEAP8[HEAP32[$7 + 60 >> 2] + HEAP32[$7 + 20 >> 2] | 0] - HEAP32[$7 + 44 >> 2];
   HEAP32[$7 + 12 >> 2] = tflite__MultiplyByQuantizedMultiplier_28int_2c_20int_2c_20int_29(HEAP32[$7 + 16 >> 2], HEAP32[$7 + 52 >> 2], HEAP32[$7 + 48 >> 2]) + HEAP32[$7 + 40 >> 2];
   HEAP32[$7 + 8 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29(int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($7 + 12 | 0, 172836), 172832) >> 2];
   HEAP32[HEAP32[$7 + 36 >> 2] + (HEAP32[$7 + 20 >> 2] << 2) >> 2] = HEAP32[$7 + 8 >> 2];
   HEAP32[$7 + 20 >> 2] = HEAP32[$7 + 20 >> 2] + 1;
   continue;
  }
  break;
 }
 ruy__profiler__ScopeLabel___ScopeLabel_28_29($7 + 32 | 0);
 __stack_pointer = $7 - -64 | 0;
}

function tflite__BytesRequiredForTensor_28tflite__Tensor_20const__2c_20unsigned_20long__2c_20unsigned_20long__2c_20tflite__ErrorReporter__29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 40 >> 2] = $0;
 HEAP32[$4 + 36 >> 2] = $1;
 HEAP32[$4 + 32 >> 2] = $2;
 HEAP32[$4 + 28 >> 2] = $3;
 HEAP32[$4 + 24 >> 2] = 1;
 if (tflite__Tensor__shape_28_29_20const(HEAP32[$4 + 40 >> 2])) {
  HEAP32[$4 + 20 >> 2] = 0;
  while (1) {
   if (HEAPU32[$4 + 20 >> 2] < flatbuffers__Vector_int___Length_28_29_20const(tflite__Tensor__shape_28_29_20const(HEAP32[$4 + 40 >> 2])) >>> 0) {
    HEAP32[$4 + 24 >> 2] = Math_imul(flatbuffers__Vector_int___Get_28unsigned_20int_29_20const(tflite__Tensor__shape_28_29_20const(HEAP32[$4 + 40 >> 2]), HEAP32[$4 + 20 >> 2]), HEAP32[$4 + 24 >> 2]);
    HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 20 >> 2] + 1;
    continue;
   }
   break;
  }
 }
 HEAP32[$4 + 12 >> 2] = tflite__ConvertTensorType_28tflite__TensorType_2c_20TfLiteType__2c_20tflite__ErrorReporter__29(tflite__Tensor__type_28_29_20const(HEAP32[$4 + 40 >> 2]), $4 + 16 | 0, HEAP32[$4 + 28 >> 2]);
 label$4: {
  if (HEAP32[$4 + 12 >> 2]) {
   HEAP32[$4 + 44 >> 2] = HEAP32[$4 + 12 >> 2];
   break label$4;
  }
  HEAP32[$4 + 8 >> 2] = tflite__TfLiteTypeSizeOf_28TfLiteType_2c_20unsigned_20long__29(HEAP32[$4 + 16 >> 2], HEAP32[$4 + 32 >> 2]);
  if (HEAP32[$4 + 8 >> 2]) {
   HEAP32[$4 + 44 >> 2] = HEAP32[$4 + 8 >> 2];
   break label$4;
  }
  HEAP32[HEAP32[$4 + 36 >> 2] >> 2] = Math_imul(HEAP32[$4 + 24 >> 2], HEAP32[HEAP32[$4 + 32 >> 2] >> 2]);
  HEAP32[$4 + 44 >> 2] = 0;
 }
 __stack_pointer = $4 + 48 | 0;
 return HEAP32[$4 + 44 >> 2];
}

function void_20tflite__reference_ops__Requantize_short_2c_20short__28short_20const__2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20short__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0;
 $7 = __stack_pointer + -64 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 60 >> 2] = $0;
 HEAP32[$7 + 56 >> 2] = $1;
 HEAP32[$7 + 52 >> 2] = $2;
 HEAP32[$7 + 48 >> 2] = $3;
 HEAP32[$7 + 44 >> 2] = $4;
 HEAP32[$7 + 40 >> 2] = $5;
 HEAP32[$7 + 36 >> 2] = $6;
 ruy__profiler__ScopeLabel__ScopeLabel_char_20const___28char_20const__29($7 + 32 | 0, 119169);
 $8 = HEAP32[$7 + 52 >> 2] == 1073741824 ? HEAP32[$7 + 48 >> 2] == 1 : $8;
 HEAP8[$7 + 31 | 0] = $8;
 if (HEAP8[$7 + 31 | 0] & 1) {
  HEAP8[$7 + 30 | 0] = 0;
  HEAP8[$7 + 29 | 0] = 0;
  HEAP32[$7 + 24 >> 2] = HEAP32[$7 + 44 >> 2] - HEAP32[$7 + 40 >> 2];
 }
 HEAP32[$7 + 20 >> 2] = 0;
 while (1) {
  if (HEAP32[$7 + 20 >> 2] < HEAP32[$7 + 56 >> 2]) {
   HEAP32[$7 + 16 >> 2] = HEAP16[HEAP32[$7 + 60 >> 2] + (HEAP32[$7 + 20 >> 2] << 1) >> 1] - HEAP32[$7 + 44 >> 2];
   HEAP32[$7 + 12 >> 2] = tflite__MultiplyByQuantizedMultiplier_28int_2c_20int_2c_20int_29(HEAP32[$7 + 16 >> 2], HEAP32[$7 + 52 >> 2], HEAP32[$7 + 48 >> 2]) + HEAP32[$7 + 40 >> 2];
   HEAP32[$7 + 8 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29(int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($7 + 12 | 0, 172812), 172808) >> 2];
   HEAP16[HEAP32[$7 + 36 >> 2] + (HEAP32[$7 + 20 >> 2] << 1) >> 1] = HEAP32[$7 + 8 >> 2];
   HEAP32[$7 + 20 >> 2] = HEAP32[$7 + 20 >> 2] + 1;
   continue;
  }
  break;
 }
 ruy__profiler__ScopeLabel___ScopeLabel_28_29($7 + 32 | 0);
 __stack_pointer = $7 - -64 | 0;
}

function jswrap_io_digitalRead($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 40 >> 2] = $0;
 label$1: {
  if (jsvIsArray(HEAP32[$1 + 40 >> 2]) & 1) {
   HEAP32[$1 + 36 >> 2] = 0;
   HEAP32[$1 + 32 >> 2] = 0;
   jsvObjectIteratorNew($1 + 24 | 0, HEAP32[$1 + 40 >> 2]);
   while (1) {
    if (jsvObjectIteratorHasValue_15($1 + 24 | 0) & 1) {
     HEAP32[$1 + 20 >> 2] = jsvObjectIteratorGetValue_13($1 + 24 | 0);
     HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 32 >> 2] << 1 | jshPinInput(jshGetPinFromVar(HEAP32[$1 + 20 >> 2]) & 255) & 1;
     jsvUnLock(HEAP32[$1 + 20 >> 2]);
     jsvObjectIteratorNext($1 + 24 | 0);
     HEAP32[$1 + 36 >> 2] = HEAP32[$1 + 36 >> 2] + 1;
     continue;
    }
    break;
   }
   jsvObjectIteratorFree_15($1 + 24 | 0);
   if (!HEAP32[$1 + 36 >> 2]) {
    HEAP32[$1 + 44 >> 2] = 0;
    break label$1;
   }
   HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 32 >> 2];
   break label$1;
  }
  if (jsvIsObject(HEAP32[$1 + 40 >> 2]) & 1) {
   HEAP32[$1 + 16 >> 2] = 0;
   HEAP32[$1 + 12 >> 2] = jspGetNamedField(HEAP32[$1 + 40 >> 2], 122107, 0);
   label$7: {
    if (jsvIsFunction(HEAP32[$1 + 12 >> 2]) & 1) {
     HEAP32[$1 + 16 >> 2] = jsvGetIntegerAndUnLock(jspeFunctionCall(HEAP32[$1 + 12 >> 2], 0, HEAP32[$1 + 40 >> 2], 0, 0, 0));
     break label$7;
    }
    jsExceptionHere(1, 117533, 0);
   }
   jsvUnLock(HEAP32[$1 + 12 >> 2]);
   HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 16 >> 2];
   break label$1;
  }
  HEAP8[$1 + 11 | 0] = jshGetPinFromVar(HEAP32[$1 + 40 >> 2]);
  HEAP32[$1 + 44 >> 2] = jshPinInput(HEAPU8[$1 + 11 | 0]) & 1;
 }
 __stack_pointer = $1 + 48 | 0;
 return HEAP32[$1 + 44 >> 2];
}

function jswrap_parseInt($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 144 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 136 >> 2] = $0;
 HEAP32[$2 + 132 >> 2] = $1;
 HEAP32[$2 + 128 >> 2] = 0;
 if (jsvIsNumeric(HEAP32[$2 + 132 >> 2]) & 1) {
  HEAP32[$2 + 128 >> 2] = jsvGetInteger(HEAP32[$2 + 132 >> 2]);
 }
 label$2: {
  label$3: {
   if (!(jsvIsFloat(HEAP32[$2 + 136 >> 2]) & 1)) {
    break label$3;
   }
   __DOUBLE_BITS_4(jsvGetFloat(HEAP32[$2 + 136 >> 2]));
   if ((i64toi32_i32$HIGH_BITS & 2147483647) >>> 0 < 2146435072) {
    break label$3;
   }
   HEAP32[$2 + 140 >> 2] = jsvNewFromFloat(nan);
   break label$2;
  }
  HEAP32[$2 + 44 >> 2] = $2 + 48;
  jsvGetString(HEAP32[$2 + 136 >> 2], $2 + 48 | 0, 70);
  HEAP8[$2 + 43 | 0] = 0;
  if (!(HEAP8[$2 + 49 | 0] != 120 & HEAP8[$2 + 49 | 0] != 88 | (HEAP8[$2 + 48 | 0] != 48 | (HEAP32[$2 + 128 >> 2] != 16 ? HEAP32[$2 + 128 >> 2] : 0)))) {
   HEAP32[$2 + 128 >> 2] = 16;
   HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 44 >> 2] + 2;
  }
  if (!HEAP32[$2 + 128 >> 2]) {
   HEAP32[$2 + 128 >> 2] = 10;
  }
  HEAP32[$2 + 24 >> 2] = stringToIntWithRadix(HEAP32[$2 + 44 >> 2], HEAP32[$2 + 128 >> 2], $2 + 43 | 0, $2 + 36 | 0);
  HEAP32[$2 + 28 >> 2] = i64toi32_i32$HIGH_BITS;
  if (HEAP8[$2 + 43 | 0] & 1) {
   HEAP32[$2 + 140 >> 2] = jsvNewFromFloat(nan);
   break label$2;
  }
  if (HEAP32[$2 + 36 >> 2] == ($2 + 117 | 0)) {
   jsExceptionHere(1, 116539, 0);
   HEAP32[$2 + 140 >> 2] = jsvNewFromFloat(nan);
   break label$2;
  }
  HEAP32[$2 + 140 >> 2] = jsvNewFromLongInteger(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 28 >> 2]);
 }
 __stack_pointer = $2 + 144 | 0;
 return HEAP32[$2 + 140 >> 2];
}

function void_20tflite__reference_ops__Requantize_short_2c_20int__28short_20const__2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0;
 $7 = __stack_pointer + -64 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 60 >> 2] = $0;
 HEAP32[$7 + 56 >> 2] = $1;
 HEAP32[$7 + 52 >> 2] = $2;
 HEAP32[$7 + 48 >> 2] = $3;
 HEAP32[$7 + 44 >> 2] = $4;
 HEAP32[$7 + 40 >> 2] = $5;
 HEAP32[$7 + 36 >> 2] = $6;
 ruy__profiler__ScopeLabel__ScopeLabel_char_20const___28char_20const__29($7 + 32 | 0, 119169);
 $8 = HEAP32[$7 + 52 >> 2] == 1073741824 ? HEAP32[$7 + 48 >> 2] == 1 : $8;
 HEAP8[$7 + 31 | 0] = $8;
 if (HEAP8[$7 + 31 | 0] & 1) {
  HEAP8[$7 + 30 | 0] = 0;
  HEAP8[$7 + 29 | 0] = 0;
  HEAP32[$7 + 24 >> 2] = HEAP32[$7 + 44 >> 2] - HEAP32[$7 + 40 >> 2];
 }
 HEAP32[$7 + 20 >> 2] = 0;
 while (1) {
  if (HEAP32[$7 + 20 >> 2] < HEAP32[$7 + 56 >> 2]) {
   HEAP32[$7 + 16 >> 2] = HEAP16[HEAP32[$7 + 60 >> 2] + (HEAP32[$7 + 20 >> 2] << 1) >> 1] - HEAP32[$7 + 44 >> 2];
   HEAP32[$7 + 12 >> 2] = tflite__MultiplyByQuantizedMultiplier_28int_2c_20int_2c_20int_29(HEAP32[$7 + 16 >> 2], HEAP32[$7 + 52 >> 2], HEAP32[$7 + 48 >> 2]) + HEAP32[$7 + 40 >> 2];
   HEAP32[$7 + 8 >> 2] = HEAP32[int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29(int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($7 + 12 | 0, 172828), 172824) >> 2];
   HEAP32[HEAP32[$7 + 36 >> 2] + (HEAP32[$7 + 20 >> 2] << 2) >> 2] = HEAP32[$7 + 8 >> 2];
   HEAP32[$7 + 20 >> 2] = HEAP32[$7 + 20 >> 2] + 1;
   continue;
  }
  break;
 }
 ruy__profiler__ScopeLabel___ScopeLabel_28_29($7 + 32 | 0);
 __stack_pointer = $7 - -64 | 0;
}

function jsvStringIteratorAppend($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 label$1: {
  if (!HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2]) {
   break label$1;
  }
  if (HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2]) {
   $0 = HEAP32[$2 + 12 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
  }
  if (HEAPU32[HEAP32[$2 + 12 >> 2] >> 2] >= jsvGetMaxCharactersInVar(HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2]) >>> 0) {
   if (!(jsvHasStringExt(HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2]) & 1)) {
    break label$1;
   }
   HEAP32[$2 + 4 >> 2] = jsvNewWithFlags(41);
   if (!HEAP32[$2 + 4 >> 2]) {
    jsvUnLock(HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2]);
    HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2] = 0;
    HEAP32[HEAP32[$2 + 12 >> 2] + 16 >> 2] = 0;
    HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = 0;
    break label$1;
   }
   jsvSetLastChild(HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2], jsvGetRef(HEAP32[$2 + 4 >> 2]) & 65535);
   jsvUnLock(HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2]);
   HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2] = HEAP32[$2 + 4 >> 2];
   HEAP32[HEAP32[$2 + 12 >> 2] + 16 >> 2] = HEAP32[$2 + 4 >> 2];
   $0 = HEAP32[$2 + 12 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[HEAP32[$2 + 12 >> 2] >> 2] + HEAP32[$0 + 8 >> 2];
   HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = 0;
  }
  HEAP8[HEAP32[HEAP32[$2 + 12 >> 2] + 16 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0] = HEAPU8[$2 + 11 | 0];
  HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2] = HEAP32[HEAP32[$2 + 12 >> 2] >> 2] + 1;
  jsvSetCharactersInVar(HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2], HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function graphicsSetCallbacks($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP8[$0 + 52 | 0] = 54;
 HEAP8[$0 + 53 | 0] = 2;
 HEAP8[$0 + 54 | 0] = 0;
 HEAP8[$0 + 55 | 0] = 0;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP8[$0 + 60 | 0] = 55;
 HEAP8[$0 + 61 | 0] = 2;
 HEAP8[$0 + 62 | 0] = 0;
 HEAP8[$0 + 63 | 0] = 0;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP8[$0 + 56 | 0] = 56;
 HEAP8[$0 + 57 | 0] = 2;
 HEAP8[$0 + 58 | 0] = 0;
 HEAP8[$0 + 59 | 0] = 0;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP8[$0 + 64 | 0] = 57;
 HEAP8[$0 + 65 | 0] = 2;
 HEAP8[$0 + 66 | 0] = 0;
 HEAP8[$0 + 67 | 0] = 0;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP8[$0 + 68 | 0] = 58;
 HEAP8[$0 + 69 | 0] = 2;
 HEAP8[$0 + 70 | 0] = 0;
 HEAP8[$0 + 71 | 0] = 0;
 $0 = HEAP32[$1 + 8 >> 2];
 label$1: {
  label$2: {
   if (!(HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24))) {
    lcdSetCallbacks_ArrayBuffer(HEAP32[$1 + 8 >> 2]);
    break label$2;
   }
   $0 = HEAP32[$1 + 8 >> 2];
   label$4: {
    if ((HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24)) == 1) {
     lcdSetCallbacks_JS(HEAP32[$1 + 8 >> 2]);
     break label$4;
    }
    label$6: {
     $0 = HEAP32[$1 + 8 >> 2];
     if ((HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24)) == 6) {
      lcdMemLCD_setCallbacks(HEAP32[$1 + 8 >> 2]);
      break label$6;
     }
     HEAP8[$1 + 15 | 0] = 0;
     break label$1;
    }
   }
  }
  HEAP8[$1 + 15 | 0] = 1;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}

function _jswrap_graphics_getFontInfo($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[HEAP32[$2 + 8 >> 2] >> 2] = (HEAPU8[$0 + 25 | 0] | HEAPU8[$0 + 26 | 0] << 8) & 57344;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP16[HEAP32[$2 + 8 >> 2] + 4 >> 1] = (HEAPU8[$0 + 25 | 0] | HEAPU8[$0 + 26 | 0] << 8) & 8191;
 HEAP16[HEAP32[$2 + 8 >> 2] + 6 >> 1] = HEAPU16[HEAP32[$2 + 8 >> 2] + 4 >> 1];
 HEAP16[HEAP32[$2 + 8 >> 2] + 8 >> 1] = HEAPU16[HEAP32[$2 + 8 >> 2] + 4 >> 1];
 if (HEAPU16[HEAP32[$2 + 8 >> 2] + 4 >> 1] & 4096) {
  HEAP16[HEAP32[$2 + 8 >> 2] + 6 >> 1] = HEAPU16[HEAP32[$2 + 8 >> 2] + 4 >> 1] & 63;
  HEAP16[HEAP32[$2 + 8 >> 2] + 8 >> 1] = (HEAPU16[HEAP32[$2 + 8 >> 2] + 4 >> 1] & 4032) >>> 6;
 }
 label$2: {
  if (HEAP32[HEAP32[$2 + 8 >> 2] >> 2] & 32768) {
   $0 = HEAP32[$2 + 12 >> 2];
   $0 = jsvGetIntegerAndUnLock(jsvObjectGetChildIfExists(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 126582));
   HEAP8[HEAP32[$2 + 8 >> 2] + 10 | 0] = $0;
   $0 = HEAP32[$2 + 12 >> 2];
   $0 = jsvObjectGetChildIfExists(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 123636);
   HEAP32[HEAP32[$2 + 8 >> 2] + 12 >> 2] = $0;
   $0 = HEAP32[$2 + 12 >> 2];
   $0 = jsvObjectGetChildIfExists(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 125185);
   HEAP32[HEAP32[$2 + 8 >> 2] + 16 >> 2] = $0;
   break label$2;
  }
  HEAP8[HEAP32[$2 + 8 >> 2] + 10 | 0] = 0;
 }
 __stack_pointer = $2 + 16 | 0;
}

function jswrap_json_stringify($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 HEAP32[$3 + 32 >> 2] = 15568;
 HEAP32[$3 + 28 >> 2] = jsvNewFromEmptyString_7();
 if (HEAP32[$3 + 28 >> 2]) {
  HEAP8[$3 + 23 | 0] = 0;
  HEAP8[$3 + 24 | 0] = 0;
  HEAP8[$3 + 25 | 0] = 0;
  HEAP8[$3 + 26 | 0] = 0;
  HEAP32[$3 + 16 >> 2] = 0;
  HEAP32[$3 + 20 >> 2] = 0;
  label$2: {
   if (jsvIsUndefined(HEAP32[$3 + 36 >> 2]) & 1) {
    break label$2;
   }
   if (jsvIsNull(HEAP32[$3 + 36 >> 2]) & 1) {
    break label$2;
   }
   label$4: {
    if (jsvIsNumeric(HEAP32[$3 + 36 >> 2]) & 1) {
     HEAP32[$3 + 12 >> 2] = jsvGetInteger(HEAP32[$3 + 36 >> 2]);
     if (HEAP32[$3 + 12 >> 2] < 0) {
      HEAP32[$3 + 12 >> 2] = 0;
     }
     if (HEAP32[$3 + 12 >> 2] > 10) {
      HEAP32[$3 + 12 >> 2] = 10;
     }
     HEAP8[HEAP32[$3 + 12 >> 2] + ($3 + 16 | 0) | 0] = 0;
     while (1) {
      if (HEAP32[$3 + 12 >> 2]) {
       $0 = HEAP32[$3 + 12 >> 2] - 1 | 0;
       HEAP32[$3 + 12 >> 2] = $0;
       HEAP8[($3 + 16 | 0) + $0 | 0] = 32;
       continue;
      }
      break;
     }
     break label$4;
    }
    HEAP32[$3 + 8 >> 2] = jsvGetString(HEAP32[$3 + 36 >> 2], $3 + 16 | 0, 10);
    HEAP8[HEAP32[$3 + 8 >> 2] + ($3 + 16 | 0) | 0] = 0;
   }
  }
  if (strlen($3 + 16 | 0)) {
   HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 32 >> 2] | 6;
  }
  jsfGetJSONWhitespace(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 28 >> 2], HEAP32[$3 + 32 >> 2], $3 + 16 | 0);
 }
 __stack_pointer = $3 + 48 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function jspEvaluateVar($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 192 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 188 >> 2] = $0;
 HEAP32[$3 + 184 >> 2] = $1;
 HEAP16[$3 + 182 >> 1] = $2;
 HEAP32[$3 + 52 >> 2] = jslSetLex($3 + 56 | 0);
 jslInit(HEAP32[$3 + 188 >> 2]);
 HEAP32[$3 + 48 >> 2] = HEAP32[86758];
 $0 = HEAP32[86757];
 $1 = HEAP32[86756];
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 44 >> 2] = $0;
 $1 = HEAP32[86755];
 $0 = HEAP32[86754];
 HEAP32[$3 + 32 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 $0 = HEAP32[86753];
 $1 = HEAP32[86752];
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 28 >> 2] = $0;
 $1 = HEAP32[86751];
 $0 = HEAP32[86750];
 HEAP32[$3 + 16 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[86758] = 1;
 if (HEAP32[$3 + 184 >> 2]) {
  HEAP32[86752] = 0;
  if (HEAP32[$3 + 184 >> 2] != HEAP32[86750]) {
   jspeiAddScope(HEAP32[$3 + 184 >> 2]);
   HEAP32[86753] = HEAP32[$3 + 184 >> 2];
  }
 }
 HEAP32[$3 + 12 >> 2] = jspParse();
 if (HEAP32[$3 + 184 >> 2]) {
  jspeiClearScopes();
 }
 jslKill();
 jslSetLex(HEAP32[$3 + 52 >> 2]);
 HEAP32[$3 + 48 >> 2] = HEAP32[$3 + 48 >> 2] | HEAP32[86758] & 6256;
 $0 = HEAP32[$3 + 20 >> 2];
 $1 = HEAP32[$3 + 16 >> 2];
 HEAP32[86750] = $1;
 HEAP32[86751] = $0;
 HEAP32[86758] = HEAP32[$3 + 48 >> 2];
 $1 = HEAP32[$3 + 44 >> 2];
 $0 = HEAP32[$3 + 40 >> 2];
 HEAP32[86756] = $0;
 HEAP32[86757] = $1;
 $0 = HEAP32[$3 + 36 >> 2];
 $1 = HEAP32[$3 + 32 >> 2];
 HEAP32[86754] = $1;
 HEAP32[86755] = $0;
 $1 = HEAP32[$3 + 28 >> 2];
 $0 = HEAP32[$3 + 24 >> 2];
 HEAP32[86752] = $0;
 HEAP32[86753] = $1;
 $0 = jsvSkipNameAndUnLock(HEAP32[$3 + 12 >> 2]);
 __stack_pointer = $3 + 192 | 0;
 return $0;
}

function jswrap_isNaN($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer + -64 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 56 >> 2] = $0;
 label$1: {
  label$2: {
   label$3: {
    if (jsvIsUndefined(HEAP32[$1 + 56 >> 2]) & 1) {
     break label$3;
    }
    if (jsvIsObject(HEAP32[$1 + 56 >> 2]) & 1) {
     break label$3;
    }
    if (!(jsvIsFloat(HEAP32[$1 + 56 >> 2]) & 1)) {
     if (!(jsvIsArray(HEAP32[$1 + 56 >> 2]) & 1)) {
      break label$2;
     }
    }
    $0 = __DOUBLE_BITS_4(jsvGetFloat(HEAP32[$1 + 56 >> 2]));
    $3 = $0;
    $2 = i64toi32_i32$HIGH_BITS;
    $0 = $2 & 2147483647;
    $2 = $3;
    if (($0 | 0) == 2146435072 & ($2 | 0) != 0 | $0 >>> 0 > 2146435072) {
     break label$3;
    }
    break label$2;
   }
   HEAP8[$1 + 63 | 0] = 1;
   break label$1;
  }
  if (jsvIsString(HEAP32[$1 + 56 >> 2]) & 1) {
   HEAP8[$1 + 55 | 0] = 1;
   jsvStringIteratorNew($1 + 16 | 0, HEAP32[$1 + 56 >> 2], 0);
   while (1) {
    if (jsvStringIteratorHasChar_6($1 + 16 | 0) & 1) {
     if (isWhitespace(jsvStringIteratorGetCharAndNext($1 + 16 | 0) << 24 >> 24) & 1) {
      continue;
     }
     HEAP8[$1 + 55 | 0] = 0;
    }
    break;
   }
   jsvStringIteratorFree_7($1 + 16 | 0);
   if (HEAP8[$1 + 55 | 0] & 1) {
    HEAP8[$1 + 63 | 0] = 0;
    break label$1;
   }
   $2 = __DOUBLE_BITS_4(jsvGetFloat(HEAP32[$1 + 56 >> 2]));
   $3 = $2;
   $0 = i64toi32_i32$HIGH_BITS;
   $2 = $0 & 2147483647;
   $0 = $3;
   HEAP8[$1 + 63 | 0] = ($2 | 0) == 2146435072 & ($0 | 0) != 0 | $2 >>> 0 > 2146435072;
   break label$1;
  }
  HEAP8[$1 + 63 | 0] = 0;
 }
 __stack_pointer = $1 - -64 | 0;
 return HEAP8[$1 + 63 | 0] & 1;
}

function jspeExpressionOrArrowFunction() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP8[$0 + 3 | 0] = 1;
 label$1: {
  while (1) {
   $1 = 0;
   $1 = HEAP16[HEAP32[44743] + 2 >> 1] != 41 ? (HEAP32[86758] & 80) != 0 ^ -1 : $1;
   if ($1 & 1) {
    if (!(!(HEAP8[$0 + 3 | 0] & 1) | !HEAP32[$0 + 8 >> 2])) {
     HEAP32[$0 + 4 >> 2] = jspeAddNamedFunctionParameter(HEAP32[$0 + 4 >> 2], HEAP32[$0 + 8 >> 2]);
    }
    jsvUnLock(HEAP32[$0 + 8 >> 2]);
    HEAP32[$0 + 8 >> 2] = jspeAssignmentExpression();
    label$6: {
     if ((HEAP32[86758] & 63) != 1) {
      break label$6;
     }
     if (jsvIsName(HEAP32[$0 + 8 >> 2]) & 1) {
      if (jsvIsString(HEAP32[$0 + 8 >> 2]) & 1) {
       break label$6;
      }
     }
     HEAP8[$0 + 3 | 0] = 0;
    }
    if (HEAP16[HEAP32[44743] + 2 >> 1] != 41) {
     if (!(jslMatch(44) & 1)) {
      jsvUnLock2(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 4 >> 2]);
      HEAP32[$0 + 12 >> 2] = 0;
      break label$1;
     }
    }
    continue;
   }
   break;
  }
  if (!(jslMatch(41) & 1)) {
   jsvUnLock2(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 4 >> 2]);
   HEAP32[$0 + 12 >> 2] = 0;
   break label$1;
  }
  if (!(!(HEAP8[$0 + 3 | 0] & 1) | HEAP16[HEAP32[44743] + 2 >> 1] != 162)) {
   HEAP32[$0 + 4 >> 2] = jspeArrowFunction(HEAP32[$0 + 4 >> 2], HEAP32[$0 + 8 >> 2]);
   jsvUnLock(HEAP32[$0 + 8 >> 2]);
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 4 >> 2];
   break label$1;
  }
  jsvUnLock(HEAP32[$0 + 4 >> 2]);
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function exp($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 wasm2js_scratch_store_f64(+$0);
 $3 = wasm2js_scratch_load_i32(1) | 0;
 $4 = wasm2js_scratch_load_i32(0) | 0;
 label$1: {
  label$2: {
   $6 = $3;
   $1 = $3 >>> 20 & 2047;
   if ($1 - 969 >>> 0 < 63) {
    $8 = $1;
    break label$2;
   }
   if ($1 >>> 0 <= 968) {
    return +($0 + 1);
   }
   if ($1 >>> 0 < 1033) {
    break label$2;
   }
   $3 = $4;
   $2 = 0;
   if (!$3 & ($6 | 0) == -1048576) {
    break label$1;
   }
   if (($1 | 0) == 2047) {
    return +($0 + 1);
   }
   $3 = $6;
   if (($3 | 0) < 0) {
    return +__math_uflow(0);
   }
   return +__math_oflow(0);
  }
  $2 = HEAPF64[21649];
  $7 = HEAPF64[21648] * $0 + $2;
  $2 = $7 - $2;
  $0 = $2 * HEAPF64[21651] + ($2 * HEAPF64[21650] + $0);
  $2 = $0 * $0;
  $9 = $2 * $2 * ($0 * HEAPF64[21655] + HEAPF64[21654]);
  $2 = $2 * ($0 * HEAPF64[21653] + HEAPF64[21652]);
  wasm2js_scratch_store_f64(+$7);
  $1 = wasm2js_scratch_load_i32(1) | 0;
  $4 = wasm2js_scratch_load_i32(0) | 0;
  $6 = $1;
  $1 = $4 << 4 & 2032;
  $0 = $9 + ($2 + (HEAPF64[$1 + 173296 >> 3] + $0));
  $5 = $1 + 173304 | 0;
  $1 = HEAP32[$5 >> 2];
  $10 = $1;
  $3 = HEAP32[$5 + 4 >> 2];
  $1 = $4 << 13;
  $5 = $1;
  $1 = $5 + $3 | 0;
  $3 = $10;
  $5 = $3 + 0 | 0;
  $1 = $11 >>> 0 > $5 >>> 0 ? $1 + 1 | 0 : $1;
  $3 = $1;
  if (!$8) {
   $1 = $3;
   $3 = $6;
   return +specialcase($0, $5, $1, $4, $3);
  }
  wasm2js_scratch_store_i32(0, $5 | 0);
  wasm2js_scratch_store_i32(1, $3 | 0);
  $2 = +wasm2js_scratch_load_f64();
  $2 = $2 * $0 + $2;
 }
 return +$2;
}

function _jswrap_promise_add($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP8[$3 + 39 | 0] = $2;
 label$1: {
  if (!(jsvIsFunction(HEAP32[$3 + 40 >> 2]) & 1)) {
   jsExceptionHere(3, 117219, 0);
   break label$1;
  }
  HEAP8[$3 + 38 | 0] = 0;
  HEAP32[$3 + 32 >> 2] = 0;
  if (HEAP8[$3 + 39 | 0] & 1) {
   HEAP32[$3 + 28 >> 2] = jsvFindChildFromString(HEAP32[$3 + 44 >> 2], 120994);
   if (HEAP32[$3 + 28 >> 2]) {
    HEAP8[$3 + 38 | 0] = 1;
    HEAP32[$3 + 32 >> 2] = jsvSkipNameAndUnLock(HEAP32[$3 + 28 >> 2]);
   }
  }
  HEAP32[$3 + 24 >> 2] = HEAP8[$3 + 39 | 0] & 1 ? 117579 : 113298;
  HEAP32[$3 + 20 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 24 >> 2]);
  label$5: {
   if (!HEAP32[$3 + 20 >> 2]) {
    jsvObjectSetChild(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 40 >> 2]);
    break label$5;
   }
   label$7: {
    if (jsvIsArray(HEAP32[$3 + 20 >> 2]) & 1) {
     jsvArrayPush(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 40 >> 2]);
     break label$7;
    }
    HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 20 >> 2];
    HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 40 >> 2];
    HEAP32[$3 + 8 >> 2] = jsvNewArray($3 + 12 | 0, 2);
    jsvObjectSetChild(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 8 >> 2]);
    jsvUnLock(HEAP32[$3 + 8 >> 2]);
   }
   jsvUnLock(HEAP32[$3 + 20 >> 2]);
  }
  if (!(HEAP8[$3 + 38 | 0] & 1)) {
   break label$1;
  }
  _jswrap_promise_queueresolve(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 32 >> 2]);
  jsvUnLock(HEAP32[$3 + 32 >> 2]);
 }
 __stack_pointer = $3 + 48 | 0;
}

function jsiSemiInit($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 47 | 0] = $0;
 HEAP32[$2 + 40 >> 2] = $1;
 jspInit();
 HEAP16[173534] = HEAPU16[173534] & 7904;
 HEAP8[178545] = 255;
 HEAP8[$2 + 39 | 0] = 0;
 if (HEAP32[$2 + 40 >> 2]) {
  $4 = HEAP32[86750];
  $0 = HEAP32[$2 + 40 >> 2];
  HEAP32[$2 + 24 >> 2] = HEAP32[$0 + 24 >> 2];
  $1 = HEAP32[$0 + 16 >> 2];
  $3 = HEAP32[$0 + 20 >> 2];
  HEAP32[$2 + 16 >> 2] = $1;
  HEAP32[$2 + 20 >> 2] = $3;
  $1 = HEAP32[$0 + 12 >> 2];
  $3 = HEAP32[$0 + 8 >> 2];
  HEAP32[$2 + 8 >> 2] = $3;
  HEAP32[$2 + 12 >> 2] = $1;
  $3 = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$0 >> 2];
  HEAP32[$2 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = $3;
  jsvObjectSetChildAndUnLock($4, 123017, jsfVarFromName($2));
 }
 if (HEAP8[$2 + 47 | 0] & 1) {
  $5 = jsfFlashContainsCode();
 }
 HEAP8[$2 + 38 | 0] = $5 & 1;
 if (HEAP8[$2 + 38 | 0] & 1) {
  HEAP16[173534] = HEAPU16[173534] & -2049;
  jspSoftKill();
  jsvSoftKill();
  jsfLoadStateFromFlash();
  jsvSoftInit();
  jspSoftInit();
 }
 HEAP32[$2 + 32 >> 2] = jsvObjectGetChildIfExists(HEAP32[86751], 120564);
 if (HEAP32[$2 + 32 >> 2]) {
  HEAP16[173534] = HEAPU16[173534] | 1024;
 }
 jsvUnLock(HEAP32[$2 + 32 >> 2]);
 jsiSoftInit((HEAPU8[$2 + 47 | 0] ^ -1) & 1);
 if (jsiEcho() & 1) {
  if (!(HEAP8[$2 + 38 | 0] & 1) & HEAPU8[178544] != 20) {
   jsiConsolePrintString(144594);
  }
  if (HEAPU8[178544] != 20) {
   jsiConsolePrintString(146977);
  }
  HEAP8[347076] = 1;
 }
 if (HEAP8[$2 + 39 | 0] & 1) {
  jsvUnLock(jspEvaluate(143092, 1));
 }
 __stack_pointer = $2 + 48 | 0;
}

function get_bits($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP8[$2 + 7 | 0] = $1;
 HEAP16[$2 + 4 >> 1] = 0;
 HEAP32[$2 >> 2] = 0;
 label$1: {
  if (HEAPU8[$2 + 7 | 0] > 15) {
   HEAP16[$2 + 14 >> 1] = 65535;
   break label$1;
  }
  if (!HEAPU16[HEAP32[$2 + 8 >> 2] >> 1] & HEAPU8[HEAP32[$2 + 8 >> 2] + 12 | 0] < 1 << HEAPU8[$2 + 7 | 0] - 1) {
   HEAP16[$2 + 14 >> 1] = 65535;
   break label$1;
  }
  HEAP32[$2 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 >> 2] < HEAPU8[$2 + 7 | 0]) {
    if (!HEAPU8[HEAP32[$2 + 8 >> 2] + 12 | 0]) {
     if (!HEAPU16[HEAP32[$2 + 8 >> 2] >> 1]) {
      HEAP16[$2 + 14 >> 1] = 65535;
      break label$1;
     }
     $0 = HEAP32[$2 + 8 >> 2];
     $1 = HEAPU16[$0 + 2 >> 1];
     HEAP16[$0 + 2 >> 1] = $1 + 1;
     HEAP8[HEAP32[$2 + 8 >> 2] + 11 | 0] = HEAPU8[($0 + 13 | 0) + $1 | 0];
     if (HEAPU16[HEAP32[$2 + 8 >> 2] + 2 >> 1] == HEAPU16[HEAP32[$2 + 8 >> 2] >> 1]) {
      HEAP16[HEAP32[$2 + 8 >> 2] + 2 >> 1] = 0;
      HEAP16[HEAP32[$2 + 8 >> 2] >> 1] = 0;
     }
     HEAP8[HEAP32[$2 + 8 >> 2] + 12 | 0] = 128;
    }
    HEAP16[$2 + 4 >> 1] = HEAPU16[$2 + 4 >> 1] << 1;
    if (HEAPU8[HEAP32[$2 + 8 >> 2] + 11 | 0] & HEAPU8[HEAP32[$2 + 8 >> 2] + 12 | 0]) {
     HEAP16[$2 + 4 >> 1] = HEAPU16[$2 + 4 >> 1] | 1;
    }
    $0 = HEAP32[$2 + 8 >> 2];
    HEAP8[$0 + 12 | 0] = HEAPU8[$0 + 12 | 0] >>> 1;
    HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
    continue;
   }
   break;
  }
  label$11: {
   if (HEAPU8[$2 + 7 | 0] <= 1) {
    break label$11;
   }
  }
  HEAP16[$2 + 14 >> 1] = HEAPU16[$2 + 4 >> 1];
 }
 return HEAPU16[$2 + 14 >> 1];
}

function mbedtls_sha256_update($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 label$1: {
  if (!HEAP32[$3 + 20 >> 2]) {
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = HEAP32[HEAP32[$3 + 28 >> 2] >> 2] & 63;
  HEAP32[$3 + 16 >> 2] = 64 - HEAP32[$3 + 12 >> 2];
  $0 = HEAP32[$3 + 28 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$3 + 20 >> 2] + HEAP32[$0 >> 2];
  $0 = HEAP32[$3 + 28 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2];
  if (HEAPU32[HEAP32[$3 + 28 >> 2] >> 2] < HEAPU32[$3 + 20 >> 2]) {
   $0 = HEAP32[$3 + 28 >> 2];
   HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
  }
  if (!(!HEAP32[$3 + 12 >> 2] | HEAPU32[$3 + 20 >> 2] < HEAPU32[$3 + 16 >> 2])) {
   __memcpy(HEAP32[$3 + 12 >> 2] + (HEAP32[$3 + 28 >> 2] + 40 | 0) | 0, HEAP32[$3 + 24 >> 2], HEAP32[$3 + 16 >> 2]);
   mbedtls_sha256_process(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 28 >> 2] + 40 | 0);
   HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 16 >> 2] + HEAP32[$3 + 24 >> 2];
   HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 20 >> 2] - HEAP32[$3 + 16 >> 2];
   HEAP32[$3 + 12 >> 2] = 0;
  }
  while (1) {
   if (HEAPU32[$3 + 20 >> 2] >= 64) {
    mbedtls_sha256_process(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2]);
    HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 24 >> 2] - -64;
    HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 20 >> 2] + -64;
    continue;
   }
   break;
  }
  if (!HEAP32[$3 + 20 >> 2]) {
   break label$1;
  }
  __memcpy(HEAP32[$3 + 12 >> 2] + (HEAP32[$3 + 28 >> 2] + 40 | 0) | 0, HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
 }
 __stack_pointer = $3 + 32 | 0;
}

function lcdFillRect_ArrayBuffer_flat1($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = __stack_pointer - 48 | 0;
 HEAP32[$6 + 44 >> 2] = $0;
 HEAP32[$6 + 40 >> 2] = $1;
 HEAP32[$6 + 36 >> 2] = $2;
 HEAP32[$6 + 32 >> 2] = $3;
 HEAP32[$6 + 28 >> 2] = $4;
 HEAP32[$6 + 24 >> 2] = $5;
 HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 36 >> 2];
 while (1) {
  if (HEAP32[$6 + 20 >> 2] <= HEAP32[$6 + 28 >> 2]) {
   $0 = HEAP32[$6 + 44 >> 2];
   HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 40 >> 2] + Math_imul(HEAP32[$6 + 20 >> 2], HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8);
   HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 40 >> 2];
   while (1) {
    if (HEAP32[$6 + 12 >> 2] <= HEAP32[$6 + 32 >> 2]) {
     label$5: {
      if (HEAP32[$6 + 24 >> 2]) {
       $0 = HEAP32[$6 + 44 >> 2];
       $0 = (HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24)) + (HEAP32[$6 + 16 >> 2] >> 3) | 0;
       HEAP8[$0 | 0] = HEAPU8[$0 | 0] | 128 >> (HEAP32[$6 + 16 >> 2] & 7) & 255;
       break label$5;
      }
      $0 = HEAP32[$6 + 44 >> 2];
      $0 = (HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24)) + (HEAP32[$6 + 16 >> 2] >> 3) | 0;
      HEAP8[$0 | 0] = HEAPU8[$0 | 0] & (65407 >> (HEAP32[$6 + 16 >> 2] & 7) & 255);
     }
     HEAP32[$6 + 16 >> 2] = HEAP32[$6 + 16 >> 2] + 1;
     HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 12 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 20 >> 2] + 1;
   continue;
  }
  break;
 }
}

function mbedtls_sha1_update($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 label$1: {
  if (!HEAP32[$3 + 20 >> 2]) {
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = HEAP32[HEAP32[$3 + 28 >> 2] >> 2] & 63;
  HEAP32[$3 + 16 >> 2] = 64 - HEAP32[$3 + 12 >> 2];
  $0 = HEAP32[$3 + 28 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$3 + 20 >> 2] + HEAP32[$0 >> 2];
  $0 = HEAP32[$3 + 28 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2];
  if (HEAPU32[HEAP32[$3 + 28 >> 2] >> 2] < HEAPU32[$3 + 20 >> 2]) {
   $0 = HEAP32[$3 + 28 >> 2];
   HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
  }
  if (!(!HEAP32[$3 + 12 >> 2] | HEAPU32[$3 + 20 >> 2] < HEAPU32[$3 + 16 >> 2])) {
   __memcpy(HEAP32[$3 + 12 >> 2] + (HEAP32[$3 + 28 >> 2] + 28 | 0) | 0, HEAP32[$3 + 24 >> 2], HEAP32[$3 + 16 >> 2]);
   mbedtls_sha1_process(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 28 >> 2] + 28 | 0);
   HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 16 >> 2] + HEAP32[$3 + 24 >> 2];
   HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 20 >> 2] - HEAP32[$3 + 16 >> 2];
   HEAP32[$3 + 12 >> 2] = 0;
  }
  while (1) {
   if (HEAPU32[$3 + 20 >> 2] >= 64) {
    mbedtls_sha1_process(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2]);
    HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 24 >> 2] - -64;
    HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 20 >> 2] + -64;
    continue;
   }
   break;
  }
  if (!HEAP32[$3 + 20 >> 2]) {
   break label$1;
  }
  __memcpy(HEAP32[$3 + 12 >> 2] + (HEAP32[$3 + 28 >> 2] + 28 | 0) | 0, HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
 }
 __stack_pointer = $3 + 32 | 0;
}

function jswrap_graphics_getFont($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 128 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 120 >> 2] = $0;
 label$1: {
  if (!(graphicsGetFromVar($1 + 48 | 0, HEAP32[$1 + 120 >> 2]) & 1)) {
   HEAP32[$1 + 124 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 44 >> 2] = (HEAPU8[$1 + 73 | 0] | HEAPU8[$1 + 74 | 0] << 8) & 57344;
  HEAP32[$1 + 40 >> 2] = 0;
  if (!HEAP32[$1 + 44 >> 2]) {
   HEAP32[$1 + 40 >> 2] = 116083;
  }
  if (HEAP32[$1 + 44 >> 2] == 8192) {
   HEAP32[$1 + 40 >> 2] = 125901;
  }
  if (HEAP32[$1 + 44 >> 2] == 16384) {
   HEAP32[$1 + 40 >> 2] = 125757;
  }
  if (HEAP32[$1 + 44 >> 2] & 32768) {
   HEAP32[$1 + 40 >> 2] = 117740;
  }
  if (HEAP32[$1 + 40 >> 2]) {
   HEAP32[$1 + 36 >> 2] = (HEAPU8[$1 + 73 | 0] | HEAPU8[$1 + 74 | 0] << 8) & 8191;
   if (HEAP32[$1 + 36 >> 2] & 4096) {
    $0 = HEAP32[$1 + 40 >> 2];
    $2 = HEAP32[$1 + 36 >> 2];
    HEAP32[$1 + 8 >> 2] = (HEAP32[$1 + 36 >> 2] & 4032) >>> 6;
    HEAP32[$1 + 4 >> 2] = $2 & 63;
    HEAP32[$1 >> 2] = $0;
    HEAP32[$1 + 124 >> 2] = jsvVarPrintf(122188, $1);
    break label$1;
   }
   if (HEAP32[$1 + 36 >> 2] > 1) {
    $0 = HEAP32[$1 + 40 >> 2];
    HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 36 >> 2];
    HEAP32[$1 + 16 >> 2] = $0;
    HEAP32[$1 + 124 >> 2] = jsvVarPrintf(122197, $1 + 16 | 0);
    break label$1;
   }
   HEAP32[$1 + 124 >> 2] = jsvNewFromString(HEAP32[$1 + 40 >> 2]);
   break label$1;
  }
  HEAP32[$1 + 124 >> 2] = jsvNewFromInteger(HEAPU8[$1 + 73 | 0] | HEAPU8[$1 + 74 | 0] << 8);
 }
 __stack_pointer = $1 + 128 | 0;
 return HEAP32[$1 + 124 >> 2];
}
function jshGetCharToTransmit($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 11 | 0] = $0;
 label$1: {
  if (!(HEAPU8[$1 + 11 | 0] < 21 | HEAPU8[$1 + 11 | 0] > 22)) {
   HEAP32[$1 + 4 >> 2] = HEAPU8[$1 + 11 | 0] + 347129;
   if (HEAP8[HEAP32[$1 + 4 >> 2]] & 1) {
    HEAP8[HEAP32[$1 + 4 >> 2]] = HEAPU8[HEAP32[$1 + 4 >> 2]] & -2 | 4;
    HEAP32[$1 + 12 >> 2] = 19;
    break label$1;
   }
   if (HEAPU8[HEAP32[$1 + 4 >> 2]] & 2) {
    HEAP8[HEAP32[$1 + 4 >> 2]] = HEAPU8[HEAP32[$1 + 4 >> 2]] & -7;
    HEAP32[$1 + 12 >> 2] = 17;
    break label$1;
   }
  }
  HEAP8[$1 + 3 | 0] = HEAPU8[347147];
  while (1) {
   if (HEAPU8[347146] != HEAPU8[$1 + 3 | 0]) {
    if (HEAPU8[$1 + 11 | 0] == (HEAPU8[(HEAPU8[$1 + 3 | 0] << 1) + 347232 | 0] & 31)) {
     HEAP8[$1 + 2 | 0] = HEAPU8[((HEAPU8[$1 + 3 | 0] << 1) + 347232 | 0) + 1 | 0];
     if (HEAPU8[$1 + 3 | 0] != HEAPU8[347147]) {
      HEAP8[$1 + 1 | 0] = HEAPU8[$1 + 3 | 0];
      HEAP8[$1 | 0] = HEAPU8[$1 + 1 | 0] + 255;
      while (1) {
       if (HEAPU8[$1 + 1 | 0] != HEAPU8[347147]) {
        HEAP16[(HEAPU8[$1 + 1 | 0] << 1) + 347232 >> 1] = HEAPU16[(HEAPU8[$1 | 0] << 1) + 347232 >> 1];
        HEAP8[$1 + 1 | 0] = HEAPU8[$1 | 0];
        HEAP8[$1 | 0] = HEAPU8[$1 + 1 | 0] + 255;
        continue;
       }
       break;
      }
     }
     HEAP8[347147] = HEAPU8[347147] + 1;
     HEAP32[$1 + 12 >> 2] = HEAPU8[$1 + 2 | 0];
     break label$1;
    } else {
     HEAP8[$1 + 3 | 0] = HEAPU8[$1 + 3 | 0] + 1;
     continue;
    }
   }
   break;
  }
  HEAP32[$1 + 12 >> 2] = -1;
 }
 return HEAP32[$1 + 12 >> 2];
}

function log($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 wasm2js_scratch_store_f64(+$0);
 $1 = wasm2js_scratch_load_i32(1) | 0;
 $3 = wasm2js_scratch_load_i32(0) | 0;
 label$1: {
  label$2: {
   label$3: {
    label$4: {
     if (($1 | 0) > 0 | ($1 | 0) >= 0) {
      if ($1 >>> 0 > 1048575) {
       break label$4;
      }
     }
     if (!($1 & 2147483647 | $3)) {
      return +(-1 / ($0 * $0));
     }
     if (($1 | 0) > 0 | ($1 | 0) >= 0) {
      break label$3;
     }
     return +(($0 - $0) / 0);
    }
    if ($1 >>> 0 > 2146435071) {
     break label$1;
    }
    $4 = 1072693248;
    $5 = -1023;
    if (($1 | 0) != 1072693248) {
     $4 = $1;
     break label$2;
    }
    if ($3) {
     break label$2;
    }
    return 0;
   }
   wasm2js_scratch_store_f64(+($0 * 0x40000000000000));
   $1 = wasm2js_scratch_load_i32(1) | 0;
   $3 = wasm2js_scratch_load_i32(0) | 0;
   $4 = $1;
   $5 = -1077;
  }
  $1 = $4 + 614242 | 0;
  $6 = +(($1 >>> 20 | 0) + $5 | 0);
  $1 = ($1 & 1048575) + 1072079006 | 0;
  wasm2js_scratch_store_i32(0, $3 | 0);
  $4 = $1;
  $1 = 0;
  wasm2js_scratch_store_i32(1, $4 | $1);
  $0 = +wasm2js_scratch_load_f64() + -1;
  $8 = $0;
  $2 = $0 / ($0 + 2);
  $9 = $2;
  $7 = $0 * ($0 * .5);
  $2 = $2 * $2;
  $0 = $2 * $2;
  $0 = $6 * .6931471803691238 + ($8 + ($9 * ($7 + ($0 * ($0 * ($0 * .15313837699209373 + .22222198432149784) + .3999999999940942) + $2 * ($0 * ($0 * ($0 * .14798198605116586 + .1818357216161805) + .2857142874366239) + .6666666666666735))) + $6 * 1.9082149292705877e-10 - $7));
 }
 return +$0;
}

function jstPinOutputAtTime($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer + -64 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 56 >> 2] = $0;
 HEAP32[$6 + 60 >> 2] = $1;
 HEAP32[$6 + 52 >> 2] = $2;
 HEAP32[$6 + 48 >> 2] = $3;
 HEAP32[$6 + 44 >> 2] = $4;
 HEAP8[$6 + 43 | 0] = $5;
 $0 = HEAP32[$6 + 56 >> 2];
 HEAP8[$6 + 16 | 0] = $0;
 HEAP8[$6 + 17 | 0] = $0 >>> 8;
 HEAP8[$6 + 18 | 0] = $0 >>> 16;
 HEAP8[$6 + 19 | 0] = $0 >>> 24;
 HEAP8[$6 + 20 | 0] = 0;
 HEAP8[$6 + 21 | 0] = 0;
 HEAP8[$6 + 22 | 0] = 0;
 HEAP8[$6 + 23 | 0] = 0;
 HEAP8[$6 + 40 | 0] = 2;
 HEAP32[$6 + 12 >> 2] = 0;
 while (1) {
  if (HEAP32[$6 + 12 >> 2] < 4) {
   $1 = HEAP32[$6 + 12 >> 2] + ($6 + 24 | 0) | 0;
   if (HEAP32[$6 + 12 >> 2] < HEAP32[$6 + 44 >> 2]) {
    $0 = HEAPU8[HEAP32[$6 + 48 >> 2] + HEAP32[$6 + 12 >> 2] | 0];
   } else {
    $0 = 255;
   }
   HEAP8[$1 | 0] = $0;
   HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP8[$6 + 28 | 0] = HEAPU8[$6 + 43 | 0];
 HEAP32[$6 + 8 >> 2] = 2e6;
 while (1) {
  $0 = 0;
  label$6: {
   if (!(utilTimerIsFull() & 1)) {
    break label$6;
   }
   $0 = 0;
   if (jspIsInterrupted() & 1) {
    break label$6;
   }
   $0 = HEAP32[$6 + 8 >> 2];
   HEAP32[$6 + 8 >> 2] = $0 - 1;
   $0 = ($0 | 0) > 0;
  }
  if ($0) {
   continue;
  }
  break;
 }
 label$7: {
  if (jspIsInterrupted() & 1) {
   jsExceptionHere(4, 116305, 0);
   break label$7;
  }
  if (HEAP32[$6 + 8 >> 2] <= 0) {
   jsExceptionHere(4, 116280, 0);
  }
 }
 $0 = utilTimerInsertTask($6 + 16 | 0, HEAP32[$6 + 52 >> 2]);
 __stack_pointer = $6 - -64 | 0;
 return $0 & 1;
}

function jsvNewNameOrString($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP8[$2 + 23 | 0] = $1;
 HEAP32[$2 + 16 >> 2] = jsvNewWithFlags((HEAP8[$2 + 23 | 0] & 1 ? 23 : 28) & 65535);
 label$1: {
  if (!HEAP32[$2 + 16 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jsvLockAgain(HEAP32[$2 + 16 >> 2]);
  while (1) {
   if (HEAPU8[HEAP32[$2 + 24 >> 2]]) {
    HEAP32[$2 + 4 >> 2] = jsvGetMaxCharactersInVar(HEAP32[$2 + 12 >> 2]);
    HEAP32[$2 + 8 >> 2] = 0;
    while (1) {
     $0 = 0;
     $0 = HEAPU32[$2 + 8 >> 2] < HEAPU32[$2 + 4 >> 2] ? HEAP8[HEAP32[$2 + 24 >> 2]] != 0 : $0;
     if ($0) {
      $0 = HEAP32[$2 + 24 >> 2];
      HEAP32[$2 + 24 >> 2] = $0 + 1;
      HEAP8[HEAP32[$2 + 12 >> 2] + HEAP32[$2 + 8 >> 2] | 0] = HEAPU8[$0 | 0];
      HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] + 1;
      continue;
     }
     break;
    }
    jsvSetCharactersInVar(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
    if (HEAPU8[HEAP32[$2 + 24 >> 2]]) {
     HEAP32[$2 >> 2] = jsvNewWithFlags(41);
     if (!HEAP32[$2 >> 2]) {
      jsvUnLock(HEAP32[$2 + 12 >> 2]);
      HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
      break label$1;
     }
     jsvSetLastChild(HEAP32[$2 + 12 >> 2], jsvGetRef(HEAP32[$2 >> 2]) & 65535);
     jsvUnLock(HEAP32[$2 + 12 >> 2]);
     HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
    }
    continue;
   }
   break;
  }
  jsvUnLock(HEAP32[$2 + 12 >> 2]);
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jswrap_banglejs_beep($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 if (HEAP32[$2 + 20 >> 2] <= 0) {
  HEAP32[$2 + 20 >> 2] = 4e3;
 }
 if (HEAP32[$2 + 20 >> 2] > 6e4) {
  HEAP32[$2 + 20 >> 2] = 6e4;
 }
 if (HEAP32[$2 + 24 >> 2] <= 0) {
  HEAP32[$2 + 24 >> 2] = 200;
 }
 if (HEAP32[$2 + 24 >> 2] > 5e3) {
  HEAP32[$2 + 24 >> 2] = 5e3;
 }
 label$5: {
  if (HEAP32[93453]) {
   HEAP32[$2 + 16 >> 2] = jsvNewNativeFunction(138, 289);
   HEAP32[$2 + 12 >> 2] = jsvNewFromInteger(HEAP32[$2 + 24 >> 2]);
   jsvAddFunctionParameter(HEAP32[$2 + 16 >> 2], 0, HEAP32[$2 + 12 >> 2]);
   jsvUnLock(HEAP32[$2 + 12 >> 2]);
   HEAP32[$2 + 12 >> 2] = jsvNewFromInteger(HEAP32[$2 + 20 >> 2]);
   jsvAddFunctionParameter(HEAP32[$2 + 16 >> 2], 0, HEAP32[$2 + 12 >> 2]);
   jsvUnLock(HEAP32[$2 + 12 >> 2]);
   HEAP32[$2 + 8 >> 2] = jswrap_promise_then(HEAP32[93453], HEAP32[$2 + 16 >> 2], 0);
   jsvUnLock(HEAP32[$2 + 16 >> 2]);
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 8 >> 2];
   break label$5;
  }
  HEAP32[93453] = jspromise_create();
  if (!HEAP32[93453]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$5;
  }
  if (HEAP32[93413] & 256) {
   HEAP16[186897] = HEAP32[$2 + 20 >> 2];
   if (HEAP32[93413] & 128) {
    _jswrap_banglejs_setVibration();
   }
  }
  jstExecuteFn(593, 0, jshGetTimeFromMilliseconds(+HEAP32[$2 + 24 >> 2]), i64toi32_i32$HIGH_BITS, 0, 0);
  HEAP32[$2 + 28 >> 2] = jsvLockAgain(HEAP32[93453]);
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jswrap_interface_changeInterval($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAPF64[$2 + 32 >> 3] = $1;
 HEAP32[$2 + 28 >> 2] = jsvLock(HEAPU16[173532]);
 if (HEAPF64[$2 + 32 >> 3] < .1) {
  HEAPF64[$2 + 32 >> 3] = .1;
 }
 label$2: {
  if (jsvIsBasic(HEAP32[$2 + 44 >> 2]) & 1) {
   $0 = jsvFindChildFromVar(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 44 >> 2], 0);
   break label$2;
  }
  $0 = 0;
 }
 HEAP32[$2 + 24 >> 2] = $0;
 label$4: {
  if (HEAP32[$2 + 24 >> 2]) {
   HEAP32[$2 + 20 >> 2] = jsvSkipNameAndUnLock(HEAP32[$2 + 24 >> 2]);
   HEAP32[$2 + 8 >> 2] = jshGetTimeFromMilliseconds(HEAPF64[$2 + 32 >> 3]);
   $0 = i64toi32_i32$HIGH_BITS;
   HEAP32[$2 + 12 >> 2] = $0;
   $0 = HEAP32[$2 + 8 >> 2];
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 20 >> 2], 118059, jsvNewFromLongInteger($0, HEAP32[$2 + 12 >> 2]));
   $6 = HEAP32[$2 + 20 >> 2];
   $5 = jshGetSystemTime();
   $0 = i64toi32_i32$HIGH_BITS;
   $7 = $0;
   $0 = HEAP32[86784];
   $4 = $0;
   $3 = $5 - $0 | 0;
   $8 = $3;
   $0 = HEAP32[86785];
   $3 = HEAP32[$2 + 12 >> 2] + ($7 - ($0 + ($4 >>> 0 > $5 >>> 0) | 0) | 0) | 0;
   $4 = HEAP32[$2 + 8 >> 2];
   $0 = $4 + $8 | 0;
   $3 = $0 >>> 0 < $4 >>> 0 ? $3 + 1 | 0 : $3;
   jsvObjectSetChildAndUnLock($6, 120023, jsvNewFromLongInteger($0, $3));
   jsvUnLock(HEAP32[$2 + 20 >> 2]);
   jsiTimersChanged();
   break label$4;
  }
  jsExceptionHere(1, 118081, 0);
 }
 jsvUnLock(HEAP32[$2 + 28 >> 2]);
 __stack_pointer = $2 + 48 | 0;
}

function jswrap_decodeURIComponent($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 112 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 104 >> 2] = $0;
 HEAP32[$1 + 100 >> 2] = jsvAsString(HEAP32[$1 + 104 >> 2]);
 label$1: {
  if (!HEAP32[$1 + 100 >> 2]) {
   HEAP32[$1 + 108 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 96 >> 2] = jsvNewFromEmptyString_6();
  if (HEAP32[$1 + 96 >> 2]) {
   jsvStringIteratorNew($1 + 56 | 0, HEAP32[$1 + 100 >> 2], 0);
   jsvStringIteratorNew($1 + 16 | 0, HEAP32[$1 + 96 >> 2], 0);
   while (1) {
    label$5: {
     if (!(jsvStringIteratorHasChar_6($1 + 56 | 0) & 1)) {
      break label$5;
     }
     HEAP8[$1 + 15 | 0] = jsvStringIteratorGetCharAndNext($1 + 56 | 0);
     if (HEAP8[$1 + 15 | 0] >> 7) {
      jsExceptionHere(1, 111650, 0);
      break label$5;
     }
     if (HEAP8[$1 + 15 | 0] == 37) {
      HEAP8[$1 + 14 | 0] = jsvStringIteratorGetCharAndNext($1 + 56 | 0);
      HEAP8[$1 + 13 | 0] = jsvStringIteratorGetCharAndNext($1 + 56 | 0);
      HEAP32[$1 + 8 >> 2] = hexToByte(HEAP8[$1 + 14 | 0], HEAP8[$1 + 13 | 0]) << 24 >> 24;
      if (HEAP32[$1 + 8 >> 2] < 0) {
       jsExceptionHere(1, 124533, 0);
       break label$5;
      }
      HEAP8[$1 + 15 | 0] = HEAP32[$1 + 8 >> 2];
     }
     jsvStringIteratorAppend($1 + 16 | 0, HEAP8[$1 + 15 | 0]);
     continue;
    }
    break;
   }
   jsvStringIteratorFree_7($1 + 16 | 0);
   jsvStringIteratorFree_7($1 + 56 | 0);
  }
  jsvUnLock(HEAP32[$1 + 100 >> 2]);
  HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 96 >> 2];
 }
 __stack_pointer = $1 + 112 | 0;
 return HEAP32[$1 + 108 >> 2];
}

function jsfBankCompact($0, $1) {
 var $2 = 0, $3 = 0;
 $3 = __stack_pointer - 80 | 0;
 $2 = $3;
 __stack_pointer = $2;
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP8[$2 + 71 | 0] = $1;
 label$1: {
  if (!(jshFlashGetPage(HEAP32[$2 + 72 >> 2], $2 - -64 | 0, $2 + 60 | 0) & 1)) {
   HEAP8[$2 + 79 | 0] = 0;
   break label$1;
  }
  HEAP32[$2 + 56 >> 2] = HEAP32[$2 + 60 >> 2] + 32;
  jsfGetStorageStats($2 + 24 | 0, HEAP32[$2 + 72 >> 2], 1);
  if (!HEAP32[$2 + 32 >> 2]) {
   HEAP8[$2 + 79 | 0] = 0;
   break label$1;
  }
  if (HEAP8[$2 + 71 | 0] & 1) {
   jsvUnLock(jspEvaluate(125423, 1));
  }
  HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 24 >> 2];
  if (HEAPU32[$2 + 20 >> 2] > HEAPU32[$2 + 56 >> 2]) {
   HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 56 >> 2];
  }
  HEAP8[$2 + 19 | 0] = 0;
  label$6: {
   if (HEAP32[$2 + 20 >> 2] + 256 >>> 0 < jsuGetFreeStack() >>> 0) {
    $3 = $3 - (HEAP32[$2 + 20 >> 2] + 15 & -16) | 0;
    __stack_pointer = $3;
    HEAP32[$2 + 12 >> 2] = $3;
    HEAP8[$2 + 19 | 0] = jsfCompactInternal(HEAP32[$2 + 48 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 20 >> 2]) & 1;
    break label$6;
   }
   HEAP32[$2 + 8 >> 2] = jsvNewFlatStringOfLength(HEAP32[$2 + 20 >> 2]);
   if (HEAP32[$2 + 8 >> 2]) {
    HEAP32[$2 + 4 >> 2] = jsvGetFlatStringPointer(HEAP32[$2 + 8 >> 2]);
    HEAP8[$2 + 19 | 0] = jsfCompactInternal(HEAP32[$2 + 48 >> 2], HEAP32[$2 + 4 >> 2], HEAP32[$2 + 20 >> 2]) & 1;
    jsvUnLock(HEAP32[$2 + 8 >> 2]);
   }
  }
  jsvUnLock(jspEvaluate(125704, 1));
  HEAP8[$2 + 79 | 0] = HEAP8[$2 + 19 | 0] & 1;
 }
 __stack_pointer = $2 + 80 | 0;
 return HEAP8[$2 + 79 | 0] & 1;
}

function getDstChangeTime($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 var $10 = 0;
 $10 = __stack_pointer - 48 | 0;
 __stack_pointer = $10;
 HEAP32[$10 + 44 >> 2] = $0;
 HEAP32[$10 + 40 >> 2] = $1;
 HEAP32[$10 + 36 >> 2] = $2;
 HEAP32[$10 + 32 >> 2] = $3;
 HEAP32[$10 + 28 >> 2] = $4;
 HEAP32[$10 + 24 >> 2] = $5;
 HEAP8[$10 + 23 | 0] = $6;
 HEAP32[$10 + 16 >> 2] = $7;
 HEAP32[$10 + 12 >> 2] = $8;
 HEAP8[$10 + 11 | 0] = $9;
 if (HEAP32[$10 + 40 >> 2] == 4) {
  $0 = HEAP32[$10 + 32 >> 2] + 1 | 0;
  HEAP32[$10 + 32 >> 2] = $0;
  if (($0 | 0) > 11) {
   HEAP32[$10 + 44 >> 2] = HEAP32[$10 + 44 >> 2] + 1;
   HEAP32[$10 + 32 >> 2] = HEAP32[$10 + 32 >> 2] - 12;
  }
 }
 HEAP32[$10 + 4 >> 2] = getDayNumberFromDate(HEAP32[$10 + 44 >> 2], HEAP32[$10 + 32 >> 2], 1);
 label$3: {
  if (HEAP32[$10 + 40 >> 2] == 4) {
   HEAP32[$10 + 4 >> 2] = HEAP32[$10 + 4 >> 2] + (((HEAP32[$10 + 36 >> 2] + (14 - ((HEAP32[$10 + 4 >> 2] + 4 | 0) % 7 | 0) | 0) | 0) % 7 | 0) - 7 | 0);
   break label$3;
  }
  HEAP32[$10 + 4 >> 2] = HEAP32[$10 + 4 >> 2] + (Math_imul(HEAP32[$10 + 40 >> 2], 7) + ((HEAP32[$10 + 36 >> 2] + (14 - ((HEAP32[$10 + 4 >> 2] + 4 | 0) % 7 | 0) | 0) | 0) % 7 | 0) | 0);
 }
 HEAP32[$10 + 4 >> 2] = HEAP32[$10 + 24 >> 2] + Math_imul(HEAP32[$10 + 4 >> 2] + HEAP32[$10 + 28 >> 2] | 0, 1440);
 if (!(HEAP8[$10 + 11 | 0] & 1)) {
  HEAP32[$10 + 4 >> 2] = HEAP32[$10 + 4 >> 2] - HEAP32[$10 + 12 >> 2];
  if (!(HEAP8[$10 + 23 | 0] & 1)) {
   HEAP32[$10 + 4 >> 2] = HEAP32[$10 + 4 >> 2] - HEAP32[$10 + 16 >> 2];
  }
 }
 __stack_pointer = $10 + 48 | 0;
 return +HEAP32[$10 + 4 >> 2] * 60;
}

function st_yield_backref($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] + 4 >> 2] - HEAP32[HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2] >> 2];
 label$1: {
  if (HEAP32[$2 + 16 >> 2]) {
   HEAP32[$2 + 12 >> 2] = 0;
   if (HEAPU16[HEAP32[$2 + 24 >> 2] + 4 >> 1] < HEAPU32[$2 + 16 >> 2]) {
    HEAP32[$2 + 16 >> 2] = HEAPU16[HEAP32[$2 + 24 >> 2] + 4 >> 1];
   }
   HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 24 >> 2] + 45;
   HEAP16[$2 + 6 >> 1] = 255;
   HEAP16[$2 + 4 >> 1] = HEAPU16[HEAP32[$2 + 24 >> 2] + 6 >> 1];
   HEAP32[$2 + 12 >> 2] = 0;
   while (1) {
    if (HEAPU32[$2 + 12 >> 2] < HEAPU32[$2 + 16 >> 2]) {
     HEAP8[$2 + 3 | 0] = HEAPU8[HEAP32[$2 + 8 >> 2] + (HEAPU16[$2 + 6 >> 1] & HEAPU16[HEAP32[$2 + 24 >> 2] + 8 >> 1] - HEAPU16[$2 + 4 >> 1]) | 0];
     push_byte(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], HEAPU8[$2 + 3 | 0]);
     HEAP8[HEAP32[$2 + 8 >> 2] + (HEAPU16[HEAP32[$2 + 24 >> 2] + 8 >> 1] & HEAPU16[$2 + 6 >> 1]) | 0] = HEAPU8[$2 + 3 | 0];
     $0 = HEAP32[$2 + 24 >> 2];
     HEAP16[$0 + 8 >> 1] = HEAPU16[$0 + 8 >> 1] + 1;
     HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
     continue;
    }
    break;
   }
   $0 = HEAP32[$2 + 24 >> 2];
   HEAP16[$0 + 4 >> 1] = HEAPU16[$0 + 4 >> 1] - HEAP32[$2 + 16 >> 2];
   if (!HEAPU16[HEAP32[$2 + 24 >> 2] + 4 >> 1]) {
    HEAP32[$2 + 28 >> 2] = 0;
    break label$1;
   }
  }
  HEAP32[$2 + 28 >> 2] = 6;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function _jswrap_graphics_getCharWidth($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (!(HEAP32[HEAP32[$2 + 8 >> 2] >> 2] | HEAP32[$2 + 4 >> 2] >= 256)) {
   HEAP32[$2 + 12 >> 2] = graphicsVectorCharWidth(HEAPU16[HEAP32[$2 + 8 >> 2] + 6 >> 1], HEAP32[$2 + 4 >> 2] << 24 >> 24);
   break label$1;
  }
  if (!(HEAP32[HEAP32[$2 + 8 >> 2] >> 2] != 8192 | HEAP32[$2 + 4 >> 2] >= 256)) {
   HEAP32[$2 + 12 >> 2] = HEAPU16[HEAP32[$2 + 8 >> 2] + 6 >> 1] << 2;
   break label$1;
  }
  if (!(HEAP32[HEAP32[$2 + 8 >> 2] >> 2] != 16384 | HEAP32[$2 + 4 >> 2] >= 256)) {
   HEAP32[$2 + 12 >> 2] = Math_imul(HEAPU16[HEAP32[$2 + 8 >> 2] + 6 >> 1], 6);
   break label$1;
  }
  if (HEAP32[HEAP32[$2 + 8 >> 2] >> 2] & 32768) {
   HEAP32[$2 >> 2] = 0;
   if (HEAP32[$2 + 4 >> 2] < 256) {
    label$7: {
     if (jsvIsString(HEAP32[HEAP32[$2 + 8 >> 2] + 12 >> 2]) & 1) {
      if (HEAP32[$2 + 4 >> 2] >= HEAPU8[HEAP32[$2 + 8 >> 2] + 10 | 0]) {
       HEAP32[$2 >> 2] = Math_imul(HEAPU16[HEAP32[$2 + 8 >> 2] + 6 >> 1], jsvGetCharInString(HEAP32[HEAP32[$2 + 8 >> 2] + 12 >> 2], HEAP32[$2 + 4 >> 2] - HEAPU8[HEAP32[$2 + 8 >> 2] + 10 | 0] | 0) & 255);
      }
      break label$7;
     }
     HEAP32[$2 >> 2] = Math_imul(HEAPU16[HEAP32[$2 + 8 >> 2] + 6 >> 1], jsvGetInteger(HEAP32[HEAP32[$2 + 8 >> 2] + 12 >> 2]));
    }
   }
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jsiDumpSerialInitialisation($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 44 >> 2] = $0;
 HEAP32[$4 + 40 >> 2] = $1;
 HEAP32[$4 + 36 >> 2] = $2;
 HEAP8[$4 + 35 | 0] = $3;
 HEAP32[$4 + 28 >> 2] = jsvFindChildFromString(HEAP32[86750], HEAP32[$4 + 36 >> 2]);
 HEAP32[$4 + 24 >> 2] = jsvSkipName(HEAP32[$4 + 28 >> 2]);
 if (HEAP32[$4 + 24 >> 2]) {
  if (HEAP8[$4 + 35 | 0] & 1) {
   jsiDumpObjectState(HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2], HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2]);
  }
  HEAP32[$4 + 20 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 24 >> 2], 119685);
  HEAP32[$4 + 16 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 24 >> 2], 115339);
  if (HEAP32[$4 + 16 >> 2] ? 1 : HEAP32[$4 + 20 >> 2]) {
   HEAP32[$4 + 12 >> 2] = jsvGetInteger(HEAP32[$4 + 20 >> 2]);
   if (HEAP32[$4 + 12 >> 2] <= 0) {
    HEAP32[$4 + 12 >> 2] = 9600;
   }
   $0 = HEAP32[$4 + 44 >> 2];
   $1 = HEAP32[$4 + 40 >> 2];
   $2 = HEAP32[$4 + 36 >> 2];
   HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 12 >> 2];
   HEAP32[$4 >> 2] = $2;
   cbprintf($0, $1, 122243, $4);
   if (jsvIsObject(HEAP32[$4 + 16 >> 2]) & 1) {
    FUNCTION_TABLE[HEAP32[$4 + 44 >> 2]](144359, HEAP32[$4 + 40 >> 2]);
    jsfGetJSONWithCallback(HEAP32[$4 + 16 >> 2], 0, 32, 0, HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2]);
   }
   FUNCTION_TABLE[HEAP32[$4 + 44 >> 2]](145976, HEAP32[$4 + 40 >> 2]);
  }
  jsvUnLock3(HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2], HEAP32[$4 + 24 >> 2]);
 }
 jsvUnLock(HEAP32[$4 + 28 >> 2]);
 __stack_pointer = $4 + 48 | 0;
}

function jswrap_function_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = jsvNewWithFlags(7);
 label$1: {
  if (!HEAP32[$1 + 20 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  jsvObjectIteratorNew($1 + 16 | 0, HEAP32[$1 + 24 >> 2]);
  HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetValue_7($1 + 16 | 0);
  jsvObjectIteratorNext($1 + 16 | 0);
  while (1) {
   if (jsvObjectIteratorHasValue_7($1 + 16 | 0) & 1) {
    HEAP32[$1 + 8 >> 2] = jsvAsString(HEAP32[$1 + 12 >> 2]);
    if (HEAP32[$1 + 8 >> 2]) {
     HEAP32[$1 + 4 >> 2] = jsvNewFromString(110430);
     if (HEAP32[$1 + 4 >> 2]) {
      jsvAppendStringVarComplete(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 8 >> 2]);
      jsvAddFunctionParameter(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 4 >> 2], 0);
     }
     jsvUnLock(HEAP32[$1 + 8 >> 2]);
    }
    jsvUnLock(HEAP32[$1 + 12 >> 2]);
    HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetValue_7($1 + 16 | 0);
    jsvObjectIteratorNext($1 + 16 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_7($1 + 16 | 0);
  if (!(jsvIsString(HEAP32[$1 + 12 >> 2]) & 1)) {
   HEAP32[$1 >> 2] = HEAP32[$1 + 12 >> 2];
   jsExceptionHere(3, 143253, $1);
   jsvUnLock2(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 20 >> 2]);
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 20 >> 2], 120874, HEAP32[$1 + 12 >> 2]);
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function jsvAsNumber($0) {
 var $1 = 0;
 $1 = __stack_pointer - 80 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 72 >> 2] = $0;
 label$1: {
  label$2: {
   if (!(jsvIsInt(HEAP32[$1 + 72 >> 2]) & 1)) {
    if (!(jsvIsFloat(HEAP32[$1 + 72 >> 2]) & 1)) {
     break label$2;
    }
   }
   HEAP32[$1 + 76 >> 2] = jsvLockAgain(HEAP32[$1 + 72 >> 2]);
   break label$1;
  }
  label$4: {
   label$5: {
    if (jsvIsBoolean(HEAP32[$1 + 72 >> 2]) & 1) {
     break label$5;
    }
    if (jsvIsPin(HEAP32[$1 + 72 >> 2]) & 1) {
     break label$5;
    }
    if (jsvIsNull(HEAP32[$1 + 72 >> 2]) & 1) {
     break label$5;
    }
    if (jsvIsBoolean(HEAP32[$1 + 72 >> 2]) & 1) {
     break label$5;
    }
    if (!(jsvIsArrayBufferName(HEAP32[$1 + 72 >> 2]) & 1)) {
     break label$4;
    }
   }
   HEAP32[$1 + 76 >> 2] = jsvNewFromInteger(jsvGetInteger(HEAP32[$1 + 72 >> 2]));
   break label$1;
  }
  label$6: {
   if (!(jsvIsString(HEAP32[$1 + 72 >> 2]) & 1)) {
    break label$6;
   }
   if (!(jsvIsEmptyString(HEAP32[$1 + 72 >> 2]) & 1)) {
    if (!(jsvIsStringNumericInt(HEAP32[$1 + 72 >> 2], 0) & 1)) {
     break label$6;
    }
   }
   if ((jsvGetString(HEAP32[$1 + 72 >> 2], $1, 64) | 0) == 64) {
    jsExceptionHere(1, 116539, 0);
    HEAP32[$1 + 76 >> 2] = jsvNewFromFloat(nan);
    break label$1;
   }
   HEAP32[$1 + 76 >> 2] = jsvNewFromLongInteger(stringToInt($1), i64toi32_i32$HIGH_BITS);
   break label$1;
  }
  HEAP32[$1 + 76 >> 2] = jsvNewFromFloat(jsvGetFloat(HEAP32[$1 + 72 >> 2]));
 }
 __stack_pointer = $1 + 80 | 0;
 return HEAP32[$1 + 76 >> 2];
}

function jswrap_graphics_getModified($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 96 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 88 >> 2] = $0;
 HEAP8[$2 + 87 | 0] = $1;
 label$1: {
  if (!(graphicsGetFromVar($2 + 8 | 0, HEAP32[$2 + 88 >> 2]) & 1)) {
   HEAP32[$2 + 92 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 4 >> 2] = 0;
  if ((HEAPU8[$2 + 48 | 0] | HEAPU8[$2 + 49 | 0] << 8) << 16 >> 16 <= (HEAPU8[$2 + 52 | 0] | HEAPU8[$2 + 53 | 0] << 8) << 16 >> 16) {
   HEAP32[$2 + 4 >> 2] = jsvNewObject();
   if (HEAP32[$2 + 4 >> 2]) {
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 4 >> 2], 126579, jsvNewFromInteger((HEAPU8[$2 + 48 | 0] | HEAPU8[$2 + 49 | 0] << 8) << 16 >> 16));
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 4 >> 2], 126576, jsvNewFromInteger((HEAPU8[$2 + 50 | 0] | HEAPU8[$2 + 51 | 0] << 8) << 16 >> 16));
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 4 >> 2], 126272, jsvNewFromInteger((HEAPU8[$2 + 52 | 0] | HEAPU8[$2 + 53 | 0] << 8) << 16 >> 16));
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 4 >> 2], 126269, jsvNewFromInteger((HEAPU8[$2 + 54 | 0] | HEAPU8[$2 + 55 | 0] << 8) << 16 >> 16));
   }
  }
  if (HEAP8[$2 + 87 | 0] & 1) {
   HEAP8[$2 + 52 | 0] = 0;
   HEAP8[$2 + 53 | 0] = 128;
   HEAP8[$2 + 54 | 0] = 0;
   HEAP8[$2 + 55 | 0] = 128;
   HEAP8[$2 + 48 | 0] = 255;
   HEAP8[$2 + 49 | 0] = 127;
   HEAP8[$2 + 50 | 0] = 255;
   HEAP8[$2 + 51 | 0] = 127;
   graphicsSetVar($2 + 8 | 0);
  }
  HEAP32[$2 + 92 >> 2] = HEAP32[$2 + 4 >> 2];
 }
 __stack_pointer = $2 + 96 | 0;
 return HEAP32[$2 + 92 >> 2];
}

function jsvGetIndexOfFull($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 96 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 88 >> 2] = $0;
 HEAP32[$5 + 84 >> 2] = $1;
 HEAP8[$5 + 83 | 0] = $2;
 HEAP8[$5 + 82 | 0] = $3;
 HEAP32[$5 + 76 >> 2] = $4;
 label$1: {
  if (!(jsvIsIterable(HEAP32[$5 + 88 >> 2]) & 1)) {
   HEAP32[$5 + 92 >> 2] = 0;
   break label$1;
  }
  jsvIteratorNew($5 + 16 | 0, HEAP32[$5 + 88 >> 2], 0);
  while (1) {
   if (jsvIteratorHasElement($5 + 16 | 0) & 1) {
    HEAP32[$5 + 12 >> 2] = jsvIteratorGetKey($5 + 16 | 0);
    label$5: {
     if (HEAP8[$5 + 82 | 0] & 1) {
      if (!(jsvIsInt(HEAP32[$5 + 12 >> 2]) & 1)) {
       break label$5;
      }
      if ((jsvGetInteger(HEAP32[$5 + 12 >> 2]) | 0) < HEAP32[$5 + 76 >> 2]) {
       break label$5;
      }
     }
     HEAP32[$5 + 8 >> 2] = jsvIteratorGetValue($5 + 16 | 0);
     label$7: {
      if (HEAP32[$5 + 8 >> 2] != HEAP32[$5 + 84 >> 2]) {
       if (HEAP8[$5 + 83 | 0] & 1) {
        break label$7;
       }
       if (!(jsvMathsOpTypeEqual(HEAP32[$5 + 8 >> 2], HEAP32[$5 + 84 >> 2]) & 1)) {
        break label$7;
       }
      }
      jsvUnLock(HEAP32[$5 + 8 >> 2]);
      jsvIteratorFree($5 + 16 | 0);
      HEAP32[$5 + 92 >> 2] = HEAP32[$5 + 12 >> 2];
      break label$1;
     }
     jsvUnLock(HEAP32[$5 + 8 >> 2]);
    }
    jsvUnLock(HEAP32[$5 + 12 >> 2]);
    jsvIteratorNext($5 + 16 | 0);
    continue;
   }
   break;
  }
  jsvIteratorFree($5 + 16 | 0);
  HEAP32[$5 + 92 >> 2] = 0;
 }
 __stack_pointer = $5 + 96 | 0;
 return HEAP32[$5 + 92 >> 2];
}

function jswrap_io_digitalWrite($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 label$1: {
  if (jsvIsArray(HEAP32[$2 + 28 >> 2]) & 1) {
   HEAP16[$2 + 22 >> 1] = jsvGetLastChild(HEAP32[$2 + 28 >> 2]);
   while (1) {
    if (HEAPU16[$2 + 22 >> 1]) {
     HEAP32[$2 + 16 >> 2] = jsvLock(HEAPU16[$2 + 22 >> 1]);
     HEAP32[$2 + 12 >> 2] = jsvSkipName(HEAP32[$2 + 16 >> 2]);
     jshPinOutput(jshGetPinFromVar(HEAP32[$2 + 12 >> 2]) & 255, HEAP32[$2 + 24 >> 2] & 1);
     jsvUnLock(HEAP32[$2 + 12 >> 2]);
     HEAP16[$2 + 22 >> 1] = jsvGetPrevSibling(HEAP32[$2 + 16 >> 2]);
     jsvUnLock(HEAP32[$2 + 16 >> 2]);
     HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 24 >> 2] >> 1;
     continue;
    }
    break;
   }
   break label$1;
  }
  label$5: {
   if (jsvIsObject(HEAP32[$2 + 28 >> 2]) & 1) {
    HEAP32[$2 + 8 >> 2] = jspGetNamedField(HEAP32[$2 + 28 >> 2], 119628, 0);
    label$7: {
     if (jsvIsFunction(HEAP32[$2 + 8 >> 2]) & 1) {
      HEAP32[$2 + 4 >> 2] = jsvNewFromInteger(HEAP32[$2 + 24 >> 2]);
      jsvUnLock2(jspeFunctionCall(HEAP32[$2 + 8 >> 2], 0, HEAP32[$2 + 28 >> 2], 0, 1, $2 + 4 | 0), HEAP32[$2 + 4 >> 2]);
      break label$7;
     }
     jsExceptionHere(1, 117533, 0);
    }
    jsvUnLock(HEAP32[$2 + 8 >> 2]);
    break label$5;
   }
   HEAP8[$2 + 3 | 0] = jshGetPinFromVar(HEAP32[$2 + 28 >> 2]);
   jshPinOutput(HEAPU8[$2 + 3 | 0], HEAP32[$2 + 24 >> 2] != 0);
  }
 }
 __stack_pointer = $2 + 32 | 0;
}

function getDateFromDayNumber($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 28 >> 2] + 135081;
 HEAP32[$4 + 12 >> 2] = integerDivideFloor((HEAP32[$4 + 12 >> 2] - integerDivideFloor(HEAP32[$4 + 12 >> 2], 146097) | 0) + 146095 | 0, 36524);
 HEAP32[$4 + 12 >> 2] = (HEAP32[$4 + 28 >> 2] + HEAP32[$4 + 12 >> 2] | 0) - integerDivideFloor(HEAP32[$4 + 12 >> 2], 4);
 HEAP32[$4 + 8 >> 2] = integerDivideFloor((HEAP32[$4 + 12 >> 2] << 2) + 2877911 | 0, 1461);
 HEAP32[$4 + 4 >> 2] = ((HEAP32[$4 + 12 >> 2] + 719600 | 0) - Math_imul(HEAP32[$4 + 8 >> 2], 365) | 0) - integerDivideFloor(HEAP32[$4 + 8 >> 2], 4);
 HEAP32[$4 >> 2] = (Math_imul(HEAP32[$4 + 4 >> 2], 5) - 1 | 0) / 153;
 if (HEAP32[$4 + 16 >> 2]) {
  HEAP32[HEAP32[$4 + 16 >> 2] >> 2] = (HEAP32[$4 + 4 >> 2] - Math_imul(HEAP32[$4 >> 2], 30) | 0) - ((Math_imul(HEAP32[$4 >> 2], 3) | 0) / 5 | 0);
 }
 if (HEAP32[$4 + 20 >> 2]) {
  label$3: {
   if (HEAP32[$4 >> 2] < 14) {
    HEAP32[HEAP32[$4 + 20 >> 2] >> 2] = HEAP32[$4 >> 2] - 2;
    break label$3;
   }
   HEAP32[HEAP32[$4 + 20 >> 2] >> 2] = HEAP32[$4 >> 2] - 14;
  }
 }
 if (HEAP32[$4 + 24 >> 2]) {
  label$6: {
   if (HEAP32[$4 >> 2] > 13) {
    HEAP32[HEAP32[$4 + 24 >> 2] >> 2] = HEAP32[$4 + 8 >> 2] + 1;
    break label$6;
   }
   HEAP32[HEAP32[$4 + 24 >> 2] >> 2] = HEAP32[$4 + 8 >> 2];
  }
 }
 __stack_pointer = $4 + 32 | 0;
}

function __jspeConditionalExpression($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 label$1: {
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 63) {
   jslGetNextToken();
   label$3: {
    if ((HEAP32[86758] & 63) != 1) {
     jsvUnLock(jspeAssignmentExpression());
     if (!(jslMatch(58) & 1)) {
      HEAP32[$1 + 28 >> 2] = 0;
      break label$1;
     }
     jsvUnLock(jspeAssignmentExpression());
     break label$3;
    }
    HEAP8[$1 + 23 | 0] = jsvGetBoolAndUnLock(jsvSkipName(HEAP32[$1 + 24 >> 2])) & 1;
    jsvUnLock(HEAP32[$1 + 24 >> 2]);
    label$6: {
     if (HEAP8[$1 + 23 | 0] & 1) {
      HEAP32[$1 + 24 >> 2] = jsvSkipNameAndUnLock(jspeAssignmentExpression());
      if (!(jslMatch(58) & 1)) {
       HEAP32[$1 + 28 >> 2] = 0;
       break label$1;
      }
      HEAP32[$1 + 16 >> 2] = HEAP32[86758];
      jspSetNoExecute();
      jsvUnLock(jspeAssignmentExpression());
      HEAP32[86758] = HEAP32[86758] & -1664 | HEAP32[$1 + 16 >> 2] & 1663;
      break label$6;
     }
     HEAP32[$1 + 12 >> 2] = HEAP32[86758];
     jspSetNoExecute();
     jsvUnLock(jspeAssignmentExpression());
     HEAP32[86758] = HEAP32[86758] & -1664 | HEAP32[$1 + 12 >> 2] & 1663;
     if (!(jslMatch(58) & 1)) {
      HEAP32[$1 + 28 >> 2] = 0;
      break label$1;
     }
     HEAP32[$1 + 24 >> 2] = jsvSkipNameAndUnLock(jspeAssignmentExpression());
    }
   }
  }
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 24 >> 2];
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function jstExecuteFn($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer + -64 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 60 >> 2] = $0;
 HEAP32[$6 + 56 >> 2] = $1;
 HEAP32[$6 + 48 >> 2] = $2;
 HEAP32[$6 + 52 >> 2] = $3;
 HEAP32[$6 + 44 >> 2] = $4;
 HEAP32[$6 + 40 >> 2] = $5;
 $0 = HEAP32[$6 + 48 >> 2];
 HEAP8[$6 + 8 | 0] = $0;
 HEAP8[$6 + 9 | 0] = $0 >>> 8;
 HEAP8[$6 + 10 | 0] = $0 >>> 16;
 HEAP8[$6 + 11 | 0] = $0 >>> 24;
 $0 = HEAP32[$6 + 44 >> 2];
 HEAP8[$6 + 12 | 0] = $0;
 HEAP8[$6 + 13 | 0] = $0 >>> 8;
 HEAP8[$6 + 14 | 0] = $0 >>> 16;
 HEAP8[$6 + 15 | 0] = $0 >>> 24;
 HEAP8[$6 + 32 | 0] = 3;
 $0 = HEAP32[$6 + 60 >> 2];
 HEAP8[$6 + 16 | 0] = $0;
 HEAP8[$6 + 17 | 0] = $0 >>> 8;
 HEAP8[$6 + 18 | 0] = $0 >>> 16;
 HEAP8[$6 + 19 | 0] = $0 >>> 24;
 $0 = HEAP32[$6 + 56 >> 2];
 HEAP8[$6 + 20 | 0] = $0;
 HEAP8[$6 + 21 | 0] = $0 >>> 8;
 HEAP8[$6 + 22 | 0] = $0 >>> 16;
 HEAP8[$6 + 23 | 0] = $0 >>> 24;
 HEAP32[$6 + 4 >> 2] = 2e6;
 while (1) {
  $0 = 0;
  label$2: {
   if (!(utilTimerIsFull() & 1)) {
    break label$2;
   }
   $0 = 0;
   if (jspIsInterrupted() & 1) {
    break label$2;
   }
   $0 = HEAP32[$6 + 4 >> 2];
   HEAP32[$6 + 4 >> 2] = $0 - 1;
   $0 = ($0 | 0) > 0;
  }
  if ($0) {
   continue;
  }
  break;
 }
 label$3: {
  if (jspIsInterrupted() & 1) {
   jsExceptionHere(4, 116305, 0);
   break label$3;
  }
  if (HEAP32[$6 + 4 >> 2] <= 0) {
   jsExceptionHere(4, 116280, 0);
  }
 }
 $0 = utilTimerInsertTask($6 + 8 | 0, HEAP32[$6 + 40 >> 2]);
 __stack_pointer = $6 - -64 | 0;
 return $0 & 1;
}

function tflite__MicroAllocator__StartModelAllocation_28tflite__Model_20const__2c_20tflite__MicroOpResolver_20const__2c_20tflite__NodeAndRegistration___2c_20TfLiteEvalTensor___29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 48 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 40 >> 2] = $0;
 HEAP32[$5 + 36 >> 2] = $1;
 HEAP32[$5 + 32 >> 2] = $2;
 HEAP32[$5 + 28 >> 2] = $3;
 HEAP32[$5 + 24 >> 2] = $4;
 $0 = HEAP32[$5 + 40 >> 2];
 label$1: {
  if (!HEAP32[$5 + 36 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if (HEAP8[$0 + 12 | 0] & 1) {
   tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$0 + 8 >> 2], 117953, 0);
   HEAP32[$5 + 44 >> 2] = 1;
   break label$2;
  }
  HEAP8[$0 + 12 | 0] = 1;
  HEAP32[$5 + 20 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, HEAP32[$5 + 36 >> 2], HEAP32[$5 + 24 >> 2]);
  if (HEAP32[$5 + 20 >> 2]) {
   HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 20 >> 2];
   break label$2;
  }
  HEAP32[$5 + 16 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, HEAP32[$5 + 36 >> 2], HEAP32[$5 + 28 >> 2]);
  if (HEAP32[$5 + 16 >> 2]) {
   HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 16 >> 2];
   break label$2;
  }
  HEAP32[$5 + 12 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, HEAP32[$5 + 36 >> 2], HEAP32[$5 + 32 >> 2], HEAP32[HEAP32[$5 + 28 >> 2] >> 2]);
  if (HEAP32[$5 + 12 >> 2]) {
   HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 12 >> 2];
   break label$2;
  }
  HEAP32[$5 + 44 >> 2] = 0;
 }
 __stack_pointer = $5 + 48 | 0;
 return HEAP32[$5 + 44 >> 2];
}

function graphicsDrawRect($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 graphicsToDeviceCoordinates(HEAP32[$5 + 28 >> 2], $5 + 24 | 0, $5 + 20 | 0);
 graphicsToDeviceCoordinates(HEAP32[$5 + 28 >> 2], $5 + 16 | 0, $5 + 12 | 0);
 $0 = HEAP32[$5 + 28 >> 2];
 graphicsFillRectDevice(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 20 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
 $0 = HEAP32[$5 + 28 >> 2];
 graphicsFillRectDevice(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 12 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
 $0 = HEAP32[$5 + 28 >> 2];
 graphicsFillRectDevice(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 12 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 12 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
 $0 = HEAP32[$5 + 28 >> 2];
 graphicsFillRectDevice(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 12 >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 20 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24));
 __stack_pointer = $5 + 32 | 0;
}

function int_20gemmlowp__SaturatingRoundingDoublingHighMul_int__28int_2c_20int_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP32[$2 + 40 >> 2] = $1;
 if (HEAP32[$2 + 44 >> 2] == HEAP32[$2 + 40 >> 2]) {
  $3 = HEAP32[$2 + 44 >> 2] == (std____2__numeric_limits_int___min_28_29() | 0);
 }
 HEAP8[$2 + 39 | 0] = $3;
 $1 = HEAP32[$2 + 44 >> 2];
 $0 = $1 >> 31;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 28 >> 2] = $0;
 $0 = HEAP32[$2 + 40 >> 2];
 $1 = $0 >> 31;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 $1 = HEAP32[$2 + 24 >> 2];
 $4 = $1;
 $1 = HEAP32[$2 + 20 >> 2];
 $3 = $1;
 $0 = HEAP32[$2 + 28 >> 2];
 $1 = $0;
 $0 = HEAP32[$2 + 16 >> 2];
 $5 = $0;
 $0 = $3;
 $0 = __wasm_i64_mul($4, $1, $5, $0);
 HEAP32[$2 + 8 >> 2] = $0;
 $1 = i64toi32_i32$HIGH_BITS;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = ($0 | 0) > 0 | ($0 | 0) >= 0 ? 1073741824 : -1073741823;
 $3 = HEAP32[$2 + 8 >> 2];
 $4 = $3;
 $0 = HEAP32[$2 + 12 >> 2];
 $5 = $0;
 $0 = HEAP32[$2 + 4 >> 2];
 $3 = $0 >> 31;
 $1 = $0;
 $4 = $0 + $4 | 0;
 $0 = $3;
 $3 = $5;
 $0 = $0 + $3 | 0;
 $0 = $1 >>> 0 > $4 >>> 0 ? $0 + 1 | 0 : $0;
 $4 = __wasm_i64_sdiv($4, $0, -2147483648, 0);
 HEAP32[$2 >> 2] = $4;
 label$2: {
  if (HEAP8[$2 + 39 | 0] & 1) {
   $0 = std____2__numeric_limits_int___max_28_29();
   break label$2;
  }
  $0 = HEAP32[$2 >> 2];
 }
 __stack_pointer = $2 + 48 | 0;
 return $0;
}

function jsvStringIteratorLoadInline($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] - HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] + HEAP32[$0 + 8 >> 2];
 label$1: {
  if (jsvIsFlashString(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) & 1) {
   jsvStringIteratorLoadFlashString_1(HEAP32[$1 + 12 >> 2]);
   break label$1;
  }
  label$3: {
   if (!HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) {
    break label$3;
   }
   if (!(jsvGetLastChild(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) & 65535)) {
    break label$3;
   }
   HEAP32[$1 + 8 >> 2] = jsvLock(jsvGetLastChild(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) & 65535);
   jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
   HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = HEAP32[$1 + 8 >> 2];
   $0 = jsvGetCharactersInVar(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
   HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] = $0;
   break label$1;
  }
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
  HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2] = 0;
  HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = 0;
  HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] = 0;
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2] + HEAP32[$0 + 8 >> 2];
  HEAP32[HEAP32[$1 + 12 >> 2] >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
}

function jshSPISendMany($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 48 | 0;
 __stack_pointer = $5;
 HEAP8[$5 + 47 | 0] = $0;
 HEAP32[$5 + 40 >> 2] = $1;
 HEAP32[$5 + 36 >> 2] = $2;
 HEAP32[$5 + 32 >> 2] = $3;
 HEAP32[$5 + 28 >> 2] = $4;
 HEAP32[$5 + 24 >> 2] = 0;
 HEAP32[$5 + 20 >> 2] = 0;
 while (1) {
  $0 = 0;
  if (HEAPU32[$5 + 24 >> 2] < HEAPU32[$5 + 32 >> 2]) {
   $0 = jspIsInterrupted() ^ -1;
  }
  if ($0 & 1) {
   $1 = HEAPU8[$5 + 47 | 0];
   $2 = HEAP32[$5 + 40 >> 2];
   $0 = HEAP32[$5 + 24 >> 2];
   HEAP32[$5 + 24 >> 2] = $0 + 1;
   HEAP32[$5 + 16 >> 2] = jshSPISend($1, HEAPU8[$2 + $0 | 0]);
   if (HEAP32[$5 + 36 >> 2] ? HEAP32[$5 + 16 >> 2] >= 0 : 0) {
    $1 = HEAP32[$5 + 16 >> 2];
    $2 = HEAP32[$5 + 36 >> 2];
    $0 = HEAP32[$5 + 20 >> 2];
    HEAP32[$5 + 20 >> 2] = $0 + 1;
    HEAP8[$2 + $0 | 0] = $1;
   }
   continue;
  }
  break;
 }
 label$6: {
  if (HEAP32[$5 + 36 >> 2]) {
   while (1) {
    $0 = 0;
    if (HEAPU32[$5 + 20 >> 2] < HEAPU32[$5 + 32 >> 2]) {
     $0 = jspIsInterrupted() ^ -1;
    }
    if ($0 & 1) {
     HEAP32[$5 + 12 >> 2] = jshSPISend(HEAPU8[$5 + 47 | 0], -1);
     $1 = HEAP32[$5 + 12 >> 2];
     $2 = HEAP32[$5 + 36 >> 2];
     $0 = HEAP32[$5 + 20 >> 2];
     HEAP32[$5 + 20 >> 2] = $0 + 1;
     HEAP8[$2 + $0 | 0] = $1;
     continue;
    }
    break;
   }
   break label$6;
  }
  jshSPIWait(HEAPU8[$5 + 47 | 0]);
 }
 if (HEAP32[$5 + 28 >> 2]) {
  FUNCTION_TABLE[HEAP32[$5 + 28 >> 2]]();
 }
 __stack_pointer = $5 + 48 | 0;
 return 1;
}

function jsfReadFile($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 96 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 88 >> 2] = $1;
 HEAP32[$3 + 84 >> 2] = $2;
 HEAP32[$3 + 32 >> 2] = HEAP32[$0 + 24 >> 2];
 $1 = $0;
 $0 = HEAP32[$1 + 16 >> 2];
 $2 = HEAP32[$1 + 20 >> 2];
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 28 >> 2] = $2;
 $0 = HEAP32[$1 + 12 >> 2];
 $2 = HEAP32[$1 + 8 >> 2];
 HEAP32[$3 + 16 >> 2] = $2;
 HEAP32[$3 + 20 >> 2] = $0;
 $2 = HEAP32[$1 + 4 >> 2];
 $0 = HEAP32[$1 >> 2];
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP32[$3 + 12 >> 2] = $2;
 HEAP32[$3 + 44 >> 2] = jsfFindFile($3 + 8 | 0, $3 + 48 | 0);
 label$1: {
  if (!HEAP32[$3 + 44 >> 2]) {
   HEAP32[$3 + 92 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$3 + 88 >> 2] < 0) {
   HEAP32[$3 + 88 >> 2] = 0;
  }
  HEAP32[$3 + 40 >> 2] = jsfGetFileSize($3 + 48 | 0);
  if (HEAP32[$3 + 84 >> 2] <= 0) {
   HEAP32[$3 + 84 >> 2] = HEAP32[$3 + 40 >> 2];
  }
  if (HEAP32[$3 + 88 >> 2] > HEAP32[$3 + 40 >> 2]) {
   HEAP32[$3 + 88 >> 2] = HEAP32[$3 + 40 >> 2];
  }
  if (HEAP32[$3 + 40 >> 2] < (HEAP32[$3 + 88 >> 2] + HEAP32[$3 + 84 >> 2] | 0)) {
   HEAP32[$3 + 84 >> 2] = HEAP32[$3 + 40 >> 2] - HEAP32[$3 + 88 >> 2];
  }
  if (HEAP32[$3 + 84 >> 2] <= 0) {
   HEAP32[$3 + 92 >> 2] = jsvNewFromEmptyString_4();
   break label$1;
  }
  HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 88 >> 2] + HEAP32[$3 + 44 >> 2];
  HEAP32[$3 + 92 >> 2] = jsvAddressToVar(HEAP32[$3 + 44 >> 2], HEAP32[$3 + 84 >> 2]);
 }
 __stack_pointer = $3 + 96 | 0;
 return HEAP32[$3 + 92 >> 2];
}

function jswrap_stream_pushData($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP8[$3 + 23 | 0] = $2;
 HEAP8[$3 + 22 | 0] = 1;
 HEAP32[$3 + 16 >> 2] = jsvFindChildFromString(HEAP32[$3 + 28 >> 2], 122908);
 label$1: {
  if (HEAP32[$3 + 16 >> 2]) {
   if (!(jsiExecuteEventCallback(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 16 >> 2], 1, $3 + 24 | 0) & 1)) {
    jsError(126805, 0);
    HEAP8[346998] = HEAPU8[346998] | 4;
    jsvObjectRemoveChild(HEAP32[$3 + 28 >> 2], 122908);
   }
   jsvUnLock(HEAP32[$3 + 16 >> 2]);
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 28 >> 2], 119076);
  label$4: {
   if (!(jsvIsString(HEAP32[$3 + 12 >> 2]) & 1)) {
    jsvObjectSetChild(HEAP32[$3 + 28 >> 2], 119076, HEAP32[$3 + 24 >> 2]);
    break label$4;
   }
   HEAP32[$3 + 8 >> 2] = jsvGetStringLength(HEAP32[$3 + 12 >> 2]);
   HEAP32[$3 + 4 >> 2] = jsvGetStringLength(HEAP32[$3 + 24 >> 2]);
   if (HEAP32[$3 + 8 >> 2] + HEAP32[$3 + 4 >> 2] >>> 0 > 512) {
    if (HEAP8[$3 + 23 | 0] & 1) {
     HEAP8[346998] = HEAPU8[346998] | 2;
    }
    HEAP8[$3 + 22 | 0] = 0;
   }
   if (!(!(HEAP8[$3 + 23 | 0] & 1 ? 1 : HEAP8[$3 + 22 | 0] & 1) | HEAPU32[$3 + 8 >> 2] >= 512)) {
    jsvAppendStringVar(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 24 >> 2], 0, 512 - HEAP32[$3 + 8 >> 2] | 0);
   }
   jsvUnLock(HEAP32[$3 + 12 >> 2]);
  }
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP8[$3 + 22 | 0] & 1;
}

function tflite___28anonymous_20namespace_29__FlatBufferIntVectorToArray_28int_2c_20flatbuffers__Vector_int__20const__2c_20int__2c_20tflite__ErrorReporter__2c_20char_20const__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer + -64 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 56 >> 2] = $0;
 HEAP32[$5 + 52 >> 2] = $1;
 HEAP32[$5 + 48 >> 2] = $2;
 HEAP32[$5 + 44 >> 2] = $3;
 HEAP32[$5 + 40 >> 2] = $4;
 label$1: {
  if (!HEAP32[$5 + 52 >> 2]) {
   $0 = HEAP32[$5 + 44 >> 2];
   HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 40 >> 2];
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 146567, $5 + 16 | 0);
   HEAP32[$5 + 60 >> 2] = 1;
   break label$1;
  }
  HEAP32[$5 + 36 >> 2] = flatbuffers__Vector_int___size_28_29_20const(HEAP32[$5 + 52 >> 2]);
  if (HEAPU32[$5 + 36 >> 2] > HEAP32[$5 + 56 >> 2] >>> 2 >>> 0) {
   $0 = HEAP32[$5 + 44 >> 2];
   HEAP32[$5 >> 2] = HEAP32[$5 + 40 >> 2];
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 146613, $5);
   HEAP32[$5 + 60 >> 2] = 1;
   break label$1;
  }
  HEAP32[$5 + 32 >> 2] = 0;
  while (1) {
   if (HEAPU32[$5 + 32 >> 2] < HEAPU32[$5 + 36 >> 2]) {
    $0 = flatbuffers__Vector_int___Get_28unsigned_20int_29_20const(HEAP32[$5 + 52 >> 2], HEAP32[$5 + 32 >> 2]);
    HEAP32[HEAP32[$5 + 48 >> 2] + (HEAP32[$5 + 32 >> 2] << 2) >> 2] = $0;
    HEAP32[$5 + 32 >> 2] = HEAP32[$5 + 32 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$5 + 60 >> 2] = 0;
 }
 __stack_pointer = $5 - -64 | 0;
 return HEAP32[$5 + 60 >> 2];
}

function tflite__SimpleMemoryAllocator__EnsureHeadSize_28unsigned_20long_2c_20unsigned_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP32[$3 + 32 >> 2] = $2;
 $0 = HEAP32[$3 + 40 >> 2];
 label$1: {
  if (HEAP32[$0 + 16 >> 2] != HEAP32[$0 + 24 >> 2]) {
   tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$0 + 4 >> 2], 127899, 0);
   HEAP32[$3 + 44 >> 2] = 1;
   break label$1;
  }
  HEAP32[$3 + 28 >> 2] = tflite__AlignPointerUp_28unsigned_20char__2c_20unsigned_20long_29(HEAP32[$0 + 8 >> 2], HEAP32[$3 + 32 >> 2]);
  if (HEAPU32[$0 + 16 >> 2] > HEAP32[$3 + 28 >> 2] + HEAP32[$3 + 36 >> 2] >>> 0) {
   HEAP32[$3 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 24 >> 2] = HEAP32[$0 + 20 >> 2] - HEAP32[$3 + 28 >> 2];
  if (HEAPU32[$3 + 24 >> 2] < HEAPU32[$3 + 36 >> 2]) {
   $0 = HEAP32[$0 + 4 >> 2];
   $1 = HEAP32[$3 + 36 >> 2];
   $2 = HEAP32[$3 + 24 >> 2];
   HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 36 >> 2] - HEAP32[$3 + 24 >> 2];
   HEAP32[$3 + 4 >> 2] = $2;
   HEAP32[$3 >> 2] = $1;
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 112458, $3);
   HEAP32[$3 + 44 >> 2] = 1;
   break label$1;
  }
  HEAP32[$0 + 16 >> 2] = HEAP32[$3 + 28 >> 2] + HEAP32[$3 + 36 >> 2];
  HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 16 >> 2];
  HEAP32[$3 + 44 >> 2] = 0;
 }
 __stack_pointer = $3 + 48 | 0;
 return HEAP32[$3 + 44 >> 2];
}

function graphicsFallbackScroll($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $7 = 0;
 $7 = __stack_pointer - 48 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 44 >> 2] = $0;
 HEAP32[$7 + 40 >> 2] = $1;
 HEAP32[$7 + 36 >> 2] = $2;
 HEAP32[$7 + 32 >> 2] = $3;
 HEAP32[$7 + 28 >> 2] = $4;
 HEAP32[$7 + 24 >> 2] = $5;
 HEAP32[$7 + 20 >> 2] = $6;
 label$1: {
  if (!(HEAP32[$7 + 40 >> 2] | HEAP32[$7 + 36 >> 2])) {
   break label$1;
  }
  if (HEAP32[$7 + 36 >> 2] <= 0) {
   HEAP32[$7 + 12 >> 2] = HEAP32[$7 + 20 >> 2] + HEAP32[$7 + 36 >> 2];
   HEAP32[$7 + 16 >> 2] = HEAP32[$7 + 28 >> 2];
   while (1) {
    if (HEAP32[$7 + 16 >> 2] <= HEAP32[$7 + 12 >> 2]) {
     graphicsFallbackScrollX(HEAP32[$7 + 44 >> 2], HEAP32[$7 + 40 >> 2], HEAP32[$7 + 16 >> 2] - HEAP32[$7 + 36 >> 2] | 0, HEAP32[$7 + 16 >> 2], HEAP32[$7 + 32 >> 2], HEAP32[$7 + 24 >> 2]);
     HEAP32[$7 + 16 >> 2] = HEAP32[$7 + 16 >> 2] + 1;
     continue;
    }
    break;
   }
   break label$1;
  }
  HEAP32[$7 + 16 >> 2] = HEAP32[$7 + 20 >> 2] - HEAP32[$7 + 36 >> 2];
  while (1) {
   if (HEAP32[$7 + 16 >> 2] >= HEAP32[$7 + 28 >> 2]) {
    graphicsFallbackScrollX(HEAP32[$7 + 44 >> 2], HEAP32[$7 + 40 >> 2], HEAP32[$7 + 16 >> 2], HEAP32[$7 + 16 >> 2] + HEAP32[$7 + 36 >> 2] | 0, HEAP32[$7 + 32 >> 2], HEAP32[$7 + 24 >> 2]);
    HEAP32[$7 + 16 >> 2] = HEAP32[$7 + 16 >> 2] - 1;
    continue;
   }
   break;
  }
 }
 __stack_pointer = $7 + 48 | 0;
}

function jswrap_graphics_getVectorFontPolys($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 128 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 124 >> 2] = $0;
 HEAP32[$3 + 120 >> 2] = $1;
 HEAP32[$3 + 116 >> 2] = $2;
 HEAP32[$3 + 112 >> 2] = 0;
 HEAP32[$3 + 108 >> 2] = 0;
 HEAP32[$3 + 104 >> 2] = 256;
 HEAP32[$3 + 100 >> 2] = 256;
 HEAP32[$3 + 48 >> 2] = 111928;
 HEAP16[$3 + 52 >> 1] = 10;
 HEAP32[$3 + 56 >> 2] = $3 + 112;
 HEAP32[$3 + 60 >> 2] = 111841;
 HEAP16[$3 + 64 >> 1] = 10;
 HEAP32[$3 + 68 >> 2] = $3 + 108;
 HEAP32[$3 + 72 >> 2] = 112181;
 HEAP16[$3 + 76 >> 1] = 10;
 HEAP32[$3 + 80 >> 2] = $3 + 104;
 HEAP32[$3 + 84 >> 2] = 118679;
 HEAP16[$3 + 88 >> 1] = 10;
 HEAP32[$3 + 92 >> 2] = $3 + 100;
 jsvReadConfigObject(HEAP32[$3 + 116 >> 2], $3 + 48 | 0, 4);
 HEAP32[$3 + 120 >> 2] = jsvAsString(HEAP32[$3 + 120 >> 2]);
 HEAP32[$3 + 44 >> 2] = jsvNewEmptyArray();
 jsvStringIteratorNew($3 + 8 | 0, HEAP32[$3 + 120 >> 2], 0);
 while (1) {
  if (jsvStringIteratorHasChar_12($3 + 8 | 0) & 1) {
   HEAP8[$3 + 7 | 0] = jsvStringIteratorGetCharAndNext($3 + 8 | 0);
   HEAP32[$3 + 112 >> 2] = graphicsGetVectorChar(637, HEAP32[$3 + 44 >> 2], HEAP32[$3 + 112 >> 2], HEAP32[$3 + 108 >> 2], HEAP32[$3 + 104 >> 2], HEAP32[$3 + 100 >> 2], HEAP8[$3 + 7 | 0]) + HEAP32[$3 + 112 >> 2];
   continue;
  }
  break;
 }
 jsvStringIteratorFree_16($3 + 8 | 0);
 jsvUnLock(HEAP32[$3 + 120 >> 2]);
 __stack_pointer = $3 + 128 | 0;
 return HEAP32[$3 + 44 >> 2];
}

function jspeStatementFunctionDecl($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 27 | 0] = $0;
 HEAP32[$1 + 20 >> 2] = 0;
 jslGetNextToken();
 HEAP8[$1 + 15 | 0] = (HEAP32[86758] & 63) == 1;
 label$1: {
  if (HEAP8[$1 + 15 | 0] & 1) {
   HEAP32[$1 + 20 >> 2] = jsvNewNameFromString(jslGetTokenValueAsString());
   if (!HEAP32[$1 + 20 >> 2]) {
    HEAP32[$1 + 28 >> 2] = 0;
    break label$1;
   }
  }
  if (!(jslMatch(128) & 1)) {
   jsvUnLock(HEAP32[$1 + 20 >> 2]);
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  label$5: {
   if (HEAP8[$1 + 27 | 0] & 1) {
    $0 = jspeClassDefinition(0);
    break label$5;
   }
   $0 = jspeFunctionDefinition(0);
  }
  HEAP32[$1 + 16 >> 2] = $0;
  if (HEAP8[$1 + 15 | 0] & 1) {
   HEAP32[$1 + 8 >> 2] = jsvFindChildFromVar(HEAP32[86753], HEAP32[$1 + 20 >> 2], 1);
   HEAP32[$1 + 4 >> 2] = jsvSkipName(HEAP32[$1 + 8 >> 2]);
   label$8: {
    if (jsvIsFunction(HEAP32[$1 + 4 >> 2]) & 1) {
     HEAP32[$1 + 16 >> 2] = jsvSkipNameAndUnLock(HEAP32[$1 + 16 >> 2]);
     jswrap_function_replaceWith(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 16 >> 2]);
     break label$8;
    }
    jsvReplaceWith(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 16 >> 2]);
   }
   jsvUnLock(HEAP32[$1 + 20 >> 2]);
   HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 8 >> 2];
   jsvUnLock(HEAP32[$1 + 4 >> 2]);
  }
  jsvUnLock(HEAP32[$1 + 16 >> 2]);
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function jspeFactorDelete() {
 var $0 = 0;
 $0 = __stack_pointer - 32 | 0;
 __stack_pointer = $0;
 jslGetNextToken();
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = jspeFactorMember(jspeFactor(), $0 + 28 | 0);
 HEAP32[$0 + 20 >> 2] = 0;
 if ((HEAP32[86758] & 63) == 1) {
  HEAP8[$0 + 19 | 0] = 0;
  label$2: {
   if (!(jsvIsName(HEAP32[$0 + 24 >> 2]) & 1)) {
    break label$2;
   }
   if (jsvIsNewChild(HEAP32[$0 + 24 >> 2]) & 1) {
    break label$2;
   }
   label$3: {
    if (HEAP32[$0 + 28 >> 2]) {
     break label$3;
    }
    if (!(jsvIsChild(HEAP32[86750], HEAP32[$0 + 24 >> 2]) & 1)) {
     break label$3;
    }
    HEAP32[$0 + 28 >> 2] = jsvLockAgain(HEAP32[86750]);
   }
   label$4: {
    if (!(jsvHasChildren(HEAP32[$0 + 28 >> 2]) & 1)) {
     break label$4;
    }
    if (!(jsvIsChild(HEAP32[$0 + 28 >> 2], HEAP32[$0 + 24 >> 2]) & 1)) {
     break label$4;
    }
    label$5: {
     if (jsvIsArray(HEAP32[$0 + 28 >> 2]) & 1) {
      HEAP32[$0 + 12 >> 2] = jsvGetArrayLength(HEAP32[$0 + 28 >> 2]);
      jsvRemoveChild(HEAP32[$0 + 28 >> 2], HEAP32[$0 + 24 >> 2]);
      jsvSetArrayLength(HEAP32[$0 + 28 >> 2], HEAP32[$0 + 12 >> 2], 0);
      break label$5;
     }
     jsvRemoveChild(HEAP32[$0 + 28 >> 2], HEAP32[$0 + 24 >> 2]);
    }
    HEAP8[$0 + 19 | 0] = 1;
   }
  }
  HEAP32[$0 + 20 >> 2] = jsvNewFromBool(HEAP8[$0 + 19 | 0] & 1);
 }
 jsvUnLock2(HEAP32[$0 + 24 >> 2], HEAP32[$0 + 28 >> 2]);
 __stack_pointer = $0 + 32 | 0;
 return HEAP32[$0 + 20 >> 2];
}

function tflite__ops__micro__pooling___28anonymous_20namespace_29__CalculateOpData_28TfLiteContext_20const__2c_20TfLitePoolParams_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20tflite__ops__micro__pooling___28anonymous_20namespace_29__OpData__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer + -64 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 60 >> 2] = $0;
 HEAP32[$5 + 56 >> 2] = $1;
 HEAP32[$5 + 52 >> 2] = $2;
 HEAP32[$5 + 48 >> 2] = $3;
 HEAP32[$5 + 44 >> 2] = $4;
 HEAP32[$5 + 40 >> 2] = tflite__SizeOfDimension_28TfLiteTensor_20const__2c_20int_29(HEAP32[$5 + 52 >> 2], 1);
 HEAP32[$5 + 36 >> 2] = tflite__SizeOfDimension_28TfLiteTensor_20const__2c_20int_29(HEAP32[$5 + 52 >> 2], 2);
 tflite__ComputePaddingHeightWidth_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20TfLitePadding_2c_20int__2c_20int__29($5 + 8 | 0, HEAP32[HEAP32[$5 + 56 >> 2] + 8 >> 2], HEAP32[HEAP32[$5 + 56 >> 2] + 4 >> 2], 1, 1, HEAP32[$5 + 40 >> 2], HEAP32[$5 + 36 >> 2], HEAP32[HEAP32[$5 + 56 >> 2] + 16 >> 2], HEAP32[HEAP32[$5 + 56 >> 2] + 12 >> 2], HEAP32[HEAP32[$5 + 56 >> 2] >> 2], $5 + 32 | 0, $5 + 28 | 0);
 $0 = HEAP32[$5 + 12 >> 2];
 $1 = HEAP32[$5 + 8 >> 2];
 $3 = $1;
 $2 = HEAP32[$5 + 44 >> 2];
 $1 = $2;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$1 + 4 >> 2] = $0;
 $1 = HEAP32[$5 + 20 >> 2];
 $0 = HEAP32[$5 + 16 >> 2];
 $3 = $0;
 $0 = $2;
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $1;
 __stack_pointer = $5 - -64 | 0;
 return 0;
}

function jsvIteratorNew($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  label$2: {
   label$3: {
    if (jsvIsArray(HEAP32[$3 + 8 >> 2]) & 1) {
     break label$3;
    }
    if (jsvIsObject(HEAP32[$3 + 8 >> 2]) & 1) {
     break label$3;
    }
    if (jsvIsFunction(HEAP32[$3 + 8 >> 2]) & 1) {
     break label$3;
    }
    if (!(jsvIsGetterOrSetter(HEAP32[$3 + 8 >> 2]) & 1)) {
     break label$2;
    }
   }
   HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = 2;
   if (!(!(jsvIsArray(HEAP32[$3 + 8 >> 2]) & 1) | !(HEAP32[$3 + 4 >> 2] & 1))) {
    HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = 4;
    HEAP32[HEAP32[$3 + 12 >> 2] + 12 >> 2] = 0;
    $0 = jsvLockAgain(HEAP32[$3 + 8 >> 2]);
    HEAP32[HEAP32[$3 + 12 >> 2] + 8 >> 2] = $0;
   }
   jsvObjectIteratorNew(HEAP32[$3 + 12 >> 2] + 4 | 0, HEAP32[$3 + 8 >> 2]);
   break label$1;
  }
  label$5: {
   if (jsvIsArrayBuffer(HEAP32[$3 + 8 >> 2]) & 1) {
    HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = 3;
    jsvArrayBufferIteratorNew(HEAP32[$3 + 12 >> 2] + 4 | 0, HEAP32[$3 + 8 >> 2], 0);
    break label$5;
   }
   label$7: {
    if (jsvHasCharacterData(HEAP32[$3 + 8 >> 2]) & 1) {
     HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = 1;
     jsvStringIteratorNew(HEAP32[$3 + 12 >> 2] + 4 | 0, HEAP32[$3 + 8 >> 2], 0);
     break label$7;
    }
    HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = 0;
   }
  }
 }
 __stack_pointer = $3 + 16 | 0;
}

function jsvArrayBufferIteratorNew($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[HEAP32[$3 + 12 >> 2] + 48 >> 2] = HEAP32[$3 + 4 >> 2];
 HEAP8[HEAP32[$3 + 12 >> 2] + 36 | 0] = HEAPU8[HEAP32[$3 + 8 >> 2] + 5 | 0];
 $0 = HEAP32[$3 + 8 >> 2];
 HEAP32[HEAP32[$3 + 12 >> 2] + 40 >> 2] = Math_imul(HEAPU8[HEAP32[$3 + 12 >> 2] + 36 | 0] & 15, HEAPU8[$0 + 4 | 0] << 16 | (HEAPU8[$0 + 2 | 0] | HEAPU8[$0 + 3 | 0] << 8));
 $0 = HEAP32[$3 + 8 >> 2];
 HEAP32[HEAP32[$3 + 12 >> 2] + 44 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8;
 HEAP32[$3 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$3 + 8 >> 2], 0);
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 + 40 >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] + 44 >> 2] + HEAP32[$0 + 40 >> 2];
 HEAP32[HEAP32[$3 + 12 >> 2] + 44 >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] + 44 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], HEAPU8[HEAP32[$3 + 12 >> 2] + 36 | 0] & 15);
 label$1: {
  if (HEAPU32[HEAP32[$3 + 12 >> 2] + 44 >> 2] >= (HEAP32[HEAP32[$3 + 12 >> 2] + 40 >> 2] + 1 | 0) - (HEAPU8[HEAP32[$3 + 12 >> 2] + 36 | 0] & 15) >>> 0) {
   jsvUnLock(HEAP32[$3 >> 2]);
   HEAP8[HEAP32[$3 + 12 >> 2] + 36 | 0] = 0;
   break label$1;
  }
  jsvStringIteratorNew(HEAP32[$3 + 12 >> 2], HEAP32[$3 >> 2], HEAP32[HEAP32[$3 + 12 >> 2] + 44 >> 2]);
  jsvUnLock(HEAP32[$3 >> 2]);
  HEAP8[HEAP32[$3 + 12 >> 2] + 52 | 0] = 0;
 }
 __stack_pointer = $3 + 16 | 0;
}

function jswrap_storagefile_erase($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 80 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 76 >> 2] = $0;
 jsfNameFromVarAndUnLock($1 + 48 | 0, jsvObjectGetChildIfExists(HEAP32[$1 + 76 >> 2], 120049));
 HEAP32[$1 + 44 >> 2] = 27;
 while (1) {
  $0 = 0;
  $0 = HEAP32[$1 + 44 >> 2] ? !HEAP8[(HEAP32[$1 + 44 >> 2] + $1 | 0) + 47 | 0] : $0;
  if ($0) {
   HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 44 >> 2] - 1;
   continue;
  }
  break;
 }
 HEAP32[$1 + 40 >> 2] = 1;
 HEAP8[$1 + 39 | 0] = 1;
 while (1) {
  if (HEAP8[$1 + 39 | 0] & 1) {
   HEAP8[HEAP32[$1 + 44 >> 2] + ($1 + 48 | 0) | 0] = HEAP32[$1 + 40 >> 2];
   HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 72 >> 2];
   $2 = HEAP32[$1 + 68 >> 2];
   $0 = HEAP32[$1 + 64 >> 2];
   HEAP32[$1 + 24 >> 2] = $0;
   HEAP32[$1 + 28 >> 2] = $2;
   $0 = HEAP32[$1 + 60 >> 2];
   $2 = HEAP32[$1 + 56 >> 2];
   HEAP32[$1 + 16 >> 2] = $2;
   HEAP32[$1 + 20 >> 2] = $0;
   $2 = HEAP32[$1 + 52 >> 2];
   $0 = HEAP32[$1 + 48 >> 2];
   HEAP32[$1 + 8 >> 2] = $0;
   HEAP32[$1 + 12 >> 2] = $2;
   HEAP8[$1 + 39 | 0] = jsfEraseFile($1 + 8 | 0) & 1;
   HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
   continue;
  }
  break;
 }
 jsvObjectSetChildAndUnLock(HEAP32[$1 + 76 >> 2], 118134, jsvNewFromInteger(1));
 jsvObjectSetChildAndUnLock(HEAP32[$1 + 76 >> 2], 113219, jsvNewFromInteger(0));
 jsvObjectSetChildAndUnLock(HEAP32[$1 + 76 >> 2], 120456, jsvNewFromInteger(0));
 __stack_pointer = $1 + 80 | 0;
}

function jsiDebuggerPrintScope($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 jsvObjectIteratorNew($1 + 24 | 0, HEAP32[$1 + 28 >> 2]);
 HEAP8[$1 + 23 | 0] = 0;
 while (1) {
  if (jsvObjectIteratorHasValue_3($1 + 24 | 0) & 1) {
   HEAP32[$1 + 16 >> 2] = jsvObjectIteratorGetKey_3($1 + 24 | 0);
   HEAP32[$1 + 12 >> 2] = jsvAsString(HEAP32[$1 + 16 >> 2]);
   HEAP32[$1 + 8 >> 2] = jsvObjectIteratorGetValue_3($1 + 24 | 0);
   HEAP32[$1 + 4 >> 2] = jsvGetStringLength(HEAP32[$1 + 12 >> 2]);
   if (!(jsvIsStringEqual(HEAP32[$1 + 12 >> 2], 117107) & 1)) {
    HEAP8[$1 + 23 | 0] = 1;
    jsiConsolePrintChar(32);
    if (jsvIsFunctionParameter(HEAP32[$1 + 16 >> 2]) & 1) {
     jsiConsolePrintString(144165);
     HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 6;
    }
    jsiConsolePrintStringVar(HEAP32[$1 + 12 >> 2]);
    while (1) {
     if (HEAPU32[$1 + 4 >> 2] < 20) {
      jsiConsolePrintChar(32);
      HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
      continue;
     }
     break;
    }
    jsiConsolePrintString(144289);
    jsfPrintJSON(HEAP32[$1 + 8 >> 2], 301);
    jsiConsolePrintString(146977);
   }
   jsvUnLock3(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 12 >> 2], HEAP32[$1 + 8 >> 2]);
   jsvObjectIteratorNext($1 + 24 | 0);
   continue;
  }
  break;
 }
 jsvObjectIteratorFree_3($1 + 24 | 0);
 if (!(HEAP8[$1 + 23 | 0] & 1)) {
  jsiConsolePrintString(145774);
 }
 __stack_pointer = $1 + 32 | 0;
}

function jswrap_object_removeAllListeners($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 label$1: {
  if (!(jsvHasChildren(HEAP32[$2 + 28 >> 2]) & 1)) {
   jsExceptionHere(3, 122784, 0);
   break label$1;
  }
  if (jsvIsString(HEAP32[$2 + 24 >> 2]) & 1) {
   HEAP32[$2 >> 2] = HEAP32[$2 + 24 >> 2];
   HEAP32[$2 + 20 >> 2] = jsvVarPrintf(112207, $2);
   if (!HEAP32[$2 + 20 >> 2]) {
    break label$1;
   }
   HEAP32[$2 + 16 >> 2] = jsvFindChildFromVar(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 20 >> 2], 1);
   jsvUnLock(HEAP32[$2 + 20 >> 2]);
   if (HEAP32[$2 + 16 >> 2]) {
    jsvRemoveChildAndUnLock(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 16 >> 2]);
   }
   break label$1;
  }
  label$5: {
   if (jsvIsUndefined(HEAP32[$2 + 24 >> 2]) & 1) {
    jsvObjectIteratorNew($2 + 8 | 0, HEAP32[$2 + 28 >> 2]);
    while (1) {
     if (jsvObjectIteratorHasValue_9($2 + 8 | 0) & 1) {
      HEAP32[$2 + 4 >> 2] = jsvObjectIteratorGetKey_6($2 + 8 | 0);
      jsvObjectIteratorNext($2 + 8 | 0);
      if (jsvIsStringEqualOrStartsWith(HEAP32[$2 + 4 >> 2], 117529, 1) & 1) {
       jsvRemoveChild(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 4 >> 2]);
      }
      jsvUnLock(HEAP32[$2 + 4 >> 2]);
      continue;
     }
     break;
    }
    jsvObjectIteratorFree_9($2 + 8 | 0);
    break label$5;
   }
   jsExceptionHere(3, 121595, 0);
  }
 }
 __stack_pointer = $2 + 32 | 0;
}

function jswrap_espruino_HSBtoRGB($0, $1, $2, $3) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 80 | 0;
 __stack_pointer = $4;
 HEAPF64[$4 + 64 >> 3] = $0;
 HEAPF64[$4 + 56 >> 3] = $1;
 HEAPF64[$4 + 48 >> 3] = $2;
 HEAP32[$4 + 44 >> 2] = $3;
 HEAP32[$4 + 40 >> 2] = jswrap_espruino_HSBtoRGB_int(HEAPF64[$4 + 64 >> 3], HEAPF64[$4 + 56 >> 3], HEAPF64[$4 + 48 >> 3]);
 label$1: {
  if (!(HEAP32[$4 + 44 >> 2] != 24 ? HEAP32[$4 + 44 >> 2] : 0)) {
   HEAP32[$4 + 76 >> 2] = jsvNewFromInteger(HEAP32[$4 + 40 >> 2]);
   break label$1;
  }
  HEAP32[$4 + 36 >> 2] = HEAP32[$4 + 40 >> 2] & 255;
  HEAP32[$4 + 32 >> 2] = HEAP32[$4 + 40 >> 2] >> 8 & 255;
  HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 40 >> 2] >> 16 & 255;
  if (HEAP32[$4 + 44 >> 2] == 16) {
   HEAP32[$4 + 76 >> 2] = jsvNewFromInteger(HEAP32[$4 + 32 >> 2] >> 2 << 5 | HEAP32[$4 + 28 >> 2] >> 3 | HEAP32[$4 + 36 >> 2] >> 3 << 11);
   break label$1;
  }
  if (HEAP32[$4 + 44 >> 2] != 1) {
   jsExceptionHere(1, 126210, 0);
   HEAP32[$4 + 76 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 16 >> 2] = jsvNewFromInteger(HEAP32[$4 + 36 >> 2]);
  HEAP32[$4 + 20 >> 2] = jsvNewFromInteger(HEAP32[$4 + 32 >> 2]);
  HEAP32[$4 + 24 >> 2] = jsvNewFromInteger(HEAP32[$4 + 28 >> 2]);
  HEAP32[$4 + 12 >> 2] = jsvNewArray($4 + 16 | 0, 3);
  jsvUnLockMany(3, $4 + 16 | 0);
  HEAP32[$4 + 76 >> 2] = HEAP32[$4 + 12 >> 2];
 }
 __stack_pointer = $4 + 80 | 0;
 return HEAP32[$4 + 76 >> 2];
}

function heatshrink_encoder_sink($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 label$1: {
  if (HEAP32[$4 + 12 >> 2] ? !HEAP32[$4 + 24 >> 2] | !HEAP32[$4 + 20 >> 2] : 1) {
   HEAP32[$4 + 28 >> 2] = -1;
   break label$1;
  }
  if (is_finishing(HEAP32[$4 + 24 >> 2])) {
   HEAP32[$4 + 28 >> 2] = -2;
   break label$1;
  }
  if (HEAPU8[HEAP32[$4 + 24 >> 2] + 12 | 0]) {
   HEAP32[$4 + 28 >> 2] = -2;
   break label$1;
  }
  HEAP16[$4 + 10 >> 1] = (get_input_offset(HEAP32[$4 + 24 >> 2]) & 65535) + HEAPU16[HEAP32[$4 + 24 >> 2] >> 1];
  HEAP16[$4 + 8 >> 1] = get_input_buffer_size(HEAP32[$4 + 24 >> 2]);
  HEAP16[$4 + 6 >> 1] = HEAPU16[$4 + 8 >> 1] - HEAPU16[HEAP32[$4 + 24 >> 2] >> 1];
  if (HEAPU16[$4 + 6 >> 1] < HEAPU32[$4 + 16 >> 2]) {
   $0 = HEAPU16[$4 + 6 >> 1];
  } else {
   $0 = HEAP32[$4 + 16 >> 2];
  }
  HEAP16[$4 + 4 >> 1] = $0;
  __memcpy(HEAPU16[$4 + 10 >> 1] + (HEAP32[$4 + 24 >> 2] + 15 | 0) | 0, HEAP32[$4 + 20 >> 2], HEAPU16[$4 + 4 >> 1]);
  HEAP32[HEAP32[$4 + 12 >> 2] >> 2] = HEAPU16[$4 + 4 >> 1];
  $0 = HEAP32[$4 + 24 >> 2];
  HEAP16[$0 >> 1] = HEAPU16[$4 + 4 >> 1] + HEAPU16[$0 >> 1];
  if (HEAPU16[$4 + 4 >> 1] == HEAPU16[$4 + 6 >> 1]) {
   HEAP8[HEAP32[$4 + 24 >> 2] + 12 | 0] = 1;
  }
  HEAP32[$4 + 28 >> 2] = 0;
 }
 __stack_pointer = $4 + 32 | 0;
 return HEAP32[$4 + 28 >> 2];
}

function jspExecuteFunction($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer + -64 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 60 >> 2] = $0;
 HEAP32[$4 + 56 >> 2] = $1;
 HEAP32[$4 + 52 >> 2] = $2;
 HEAP32[$4 + 48 >> 2] = $3;
 HEAP32[$4 + 40 >> 2] = HEAP32[86758];
 $0 = HEAP32[86757];
 $1 = HEAP32[86756];
 HEAP32[$4 + 32 >> 2] = $1;
 HEAP32[$4 + 36 >> 2] = $0;
 $1 = HEAP32[86755];
 $0 = HEAP32[86754];
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 28 >> 2] = $1;
 $0 = HEAP32[86753];
 $1 = HEAP32[86752];
 HEAP32[$4 + 16 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $0;
 $1 = HEAP32[86751];
 $0 = HEAP32[86750];
 HEAP32[$4 + 8 >> 2] = $0;
 HEAP32[$4 + 12 >> 2] = $1;
 HEAP32[86752] = 0;
 HEAP32[86758] = 1;
 HEAP32[86756] = 0;
 HEAP32[$4 + 4 >> 2] = jspeFunctionCall(HEAP32[$4 + 60 >> 2], 0, HEAP32[$4 + 56 >> 2], 0, HEAP32[$4 + 52 >> 2], HEAP32[$4 + 48 >> 2]);
 jspeiClearScopes();
 HEAP32[$4 + 40 >> 2] = HEAP32[$4 + 40 >> 2] | HEAP32[86758] & 6256;
 jspeiClearScopes();
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$4 + 8 >> 2];
 HEAP32[86750] = $1;
 HEAP32[86751] = $0;
 HEAP32[86758] = HEAP32[$4 + 40 >> 2];
 $1 = HEAP32[$4 + 36 >> 2];
 $0 = HEAP32[$4 + 32 >> 2];
 HEAP32[86756] = $0;
 HEAP32[86757] = $1;
 $0 = HEAP32[$4 + 28 >> 2];
 $1 = HEAP32[$4 + 24 >> 2];
 HEAP32[86754] = $1;
 HEAP32[86755] = $0;
 $1 = HEAP32[$4 + 20 >> 2];
 $0 = HEAP32[$4 + 16 >> 2];
 HEAP32[86752] = $0;
 HEAP32[86753] = $1;
 __stack_pointer = $4 - -64 | 0;
 return HEAP32[$4 + 4 >> 2];
}

function tflite__MicroAllocator__AllocateNodeAndRegistrations_28tflite__Model_20const__2c_20tflite__NodeAndRegistration___29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 $0 = HEAP32[$3 + 24 >> 2];
 label$1: {
  if (!HEAP32[$3 + 16 >> 2]) {
   break label$1;
  }
 }
 HEAP32[$3 + 12 >> 2] = tflite__MicroAllocator__GetSubGraphFromModel_28tflite__Model_20const__29($0, HEAP32[$3 + 20 >> 2]);
 label$2: {
  if (!HEAP32[$3 + 12 >> 2]) {
   break label$2;
  }
 }
 $1 = HEAP32[$0 + 4 >> 2];
 HEAP32[$3 + 8 >> 2] = (wasm2js_i32$1 = $1, wasm2js_i32$2 = Math_imul(flatbuffers__Vector_flatbuffers__Offset_tflite__Operator____size_28_29_20const(tflite__SubGraph__operators_28_29_20const(HEAP32[$3 + 12 >> 2])), 28), 
 wasm2js_i32$3 = 4, wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 12 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
 label$3: {
  if (!HEAP32[$3 + 8 >> 2]) {
   tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$0 + 8 >> 2], 126992, 0);
   HEAP32[$3 + 28 >> 2] = 1;
   break label$3;
  }
  HEAP32[HEAP32[$3 + 16 >> 2] >> 2] = HEAP32[$3 + 8 >> 2];
  HEAP32[$3 + 28 >> 2] = 0;
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function tflite__GetQuantizedConvolutionMultipler_28TfLiteContext__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20double__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 80 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 72 >> 2] = $0;
 HEAP32[$6 + 68 >> 2] = $1;
 HEAP32[$6 + 64 >> 2] = $2;
 HEAP32[$6 + 60 >> 2] = $3;
 HEAP32[$6 + 56 >> 2] = $4;
 HEAP32[$6 + 52 >> 2] = $5;
 HEAPF64[$6 + 40 >> 3] = +HEAPF32[HEAP32[$6 + 68 >> 2] + 8 >> 2] * +HEAPF32[HEAP32[$6 + 64 >> 2] + 8 >> 2];
 label$1: {
  if (HEAP32[$6 + 60 >> 2]) {
   HEAPF64[$6 + 32 >> 3] = HEAPF32[HEAP32[$6 + 60 >> 2] + 8 >> 2];
   HEAPF64[$6 + 24 >> 3] = abs_28double_29(HEAPF64[$6 + 40 >> 3] - HEAPF64[$6 + 32 >> 3]);
   HEAPF64[$6 + 16 >> 3] = HEAPF32[HEAP32[$6 + 56 >> 2] + 8 >> 2];
   if (!(HEAPF64[$6 + 24 >> 3] / HEAPF64[$6 + 16 >> 3] <= .02)) {
    $0 = HEAP32[HEAP32[$6 + 72 >> 2] + 20 >> 2];
    $1 = HEAP32[$6 + 72 >> 2];
    HEAP32[$6 >> 2] = 126461;
    FUNCTION_TABLE[$0 | 0]($1, 127303, $6);
    HEAP32[$6 + 76 >> 2] = 1;
    break label$1;
   }
  }
  HEAP32[$6 + 76 >> 2] = tflite__GetQuantizedConvolutionMultipler_28TfLiteContext__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20double__29(HEAP32[$6 + 72 >> 2], HEAP32[$6 + 68 >> 2], HEAP32[$6 + 64 >> 2], HEAP32[$6 + 56 >> 2], HEAP32[$6 + 52 >> 2]);
 }
 __stack_pointer = $6 + 80 | 0;
 return HEAP32[$6 + 76 >> 2];
}

function tflite__ops__micro__reshape__Eval_28TfLiteContext__2c_20TfLiteNode__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = tflite__micro__GetEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], 0);
 HEAP32[$2 + 12 >> 2] = tflite__micro__GetEvalOutput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], 0);
 HEAP32[$2 + 4 >> 2] = tflite__TfLiteTypeSizeOf_28TfLiteType_2c_20unsigned_20long__29(HEAP32[HEAP32[$2 + 16 >> 2] + 8 >> 2], $2 + 8 | 0);
 label$1: {
  if (HEAP32[$2 + 4 >> 2]) {
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 4 >> 2];
   break label$1;
  }
  HEAP32[$2 + 8 >> 2] = Math_imul(tflite__ElementCount_28TfLiteIntArray_20const__29(HEAP32[HEAP32[$2 + 16 >> 2] + 4 >> 2]), HEAP32[$2 + 8 >> 2]);
  if (HEAP32[HEAP32[$2 + 16 >> 2] >> 2] != HEAP32[HEAP32[$2 + 12 >> 2] >> 2]) {
   HEAP32[$2 >> 2] = 0;
   while (1) {
    if (HEAPU32[$2 >> 2] < HEAPU32[$2 + 8 >> 2]) {
     HEAP8[HEAP32[HEAP32[$2 + 12 >> 2] >> 2] + HEAP32[$2 >> 2] | 0] = HEAPU8[HEAP32[HEAP32[$2 + 16 >> 2] >> 2] + HEAP32[$2 >> 2] | 0];
     HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
     continue;
    }
    break;
   }
  }
  HEAP32[$2 + 28 >> 2] = 0;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jsvAsArrayIndex($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 label$1: {
  label$2: {
   if (!(jsvIsSimpleInt(HEAP32[$1 + 24 >> 2]) & 1)) {
    break label$2;
   }
   if ((jsvGetInteger(HEAP32[$1 + 24 >> 2]) | 0) < 0) {
    break label$2;
   }
   HEAP32[$1 + 28 >> 2] = jsvLockAgain(HEAP32[$1 + 24 >> 2]);
   break label$1;
  }
  if (jsvIsString(HEAP32[$1 + 24 >> 2]) & 1) {
   if (jsvIsStringNumericStrict(HEAP32[$1 + 24 >> 2]) & 1) {
    HEAP32[$1 + 20 >> 2] = jsvNewFromInteger(jsvGetInteger(HEAP32[$1 + 24 >> 2]));
    HEAP32[$1 + 16 >> 2] = jsvAsString(HEAP32[$1 + 20 >> 2]);
    if (!jsvCompareString(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 16 >> 2], 0, 0, 0)) {
     jsvUnLock(HEAP32[$1 + 16 >> 2]);
     HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
     break label$1;
    }
    jsvUnLock2(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 16 >> 2]);
   }
   HEAP32[$1 + 28 >> 2] = jsvLockAgain(HEAP32[$1 + 24 >> 2]);
   break label$1;
  }
  if (jsvIsFloat(HEAP32[$1 + 24 >> 2]) & 1) {
   HEAPF64[$1 + 8 >> 3] = jsvGetFloat(HEAP32[$1 + 24 >> 2]);
   HEAP32[$1 + 4 >> 2] = jsvGetInteger(HEAP32[$1 + 24 >> 2]);
   if (HEAPF64[$1 + 8 >> 3] == +HEAP32[$1 + 4 >> 2]) {
    HEAP32[$1 + 28 >> 2] = jsvNewFromInteger(HEAP32[$1 + 4 >> 2]);
    break label$1;
   }
  }
  HEAP32[$1 + 28 >> 2] = jsvAsString(HEAP32[$1 + 24 >> 2]);
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function jsiGetHistoryLine($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 27 | 0] = $0;
 HEAP32[$1 + 20 >> 2] = jsiGetHistory();
 label$1: {
  if (!HEAP32[$1 + 20 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 16 >> 2] = 0;
  HEAP32[$1 + 12 >> 2] = jsvGetIndexOf(HEAP32[$1 + 20 >> 2], HEAP32[86768], 1);
  label$3: {
   if (HEAP32[$1 + 12 >> 2]) {
    label$5: {
     label$6: {
      if (!(HEAP8[$1 + 27 | 0] & 1)) {
       break label$6;
      }
      if (!(jsvGetPrevSibling(HEAP32[$1 + 12 >> 2]) & 65535)) {
       break label$6;
      }
      HEAP32[$1 + 16 >> 2] = jsvSkipNameAndUnLock(jsvLock(jsvGetPrevSibling(HEAP32[$1 + 12 >> 2]) & 65535));
      break label$5;
     }
     label$7: {
      if (HEAP8[$1 + 27 | 0] & 1) {
       break label$7;
      }
      if (!(jsvGetNextSibling(HEAP32[$1 + 12 >> 2]) & 65535)) {
       break label$7;
      }
      HEAP32[$1 + 16 >> 2] = jsvSkipNameAndUnLock(jsvLock(jsvGetNextSibling(HEAP32[$1 + 12 >> 2]) & 65535));
     }
    }
    jsvUnLock(HEAP32[$1 + 12 >> 2]);
    break label$3;
   }
   if (HEAP8[$1 + 27 | 0] & 1) {
    HEAP32[$1 + 16 >> 2] = jsvSkipNameAndUnLock(jsvGetArrayItem(HEAP32[$1 + 20 >> 2], jsvGetArrayLength(HEAP32[$1 + 20 >> 2]) - 1 | 0));
   }
  }
  jsvUnLock(HEAP32[$1 + 20 >> 2]);
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 16 >> 2];
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function int_20gemmlowp__RoundingDivideByPOT_int__28int_2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 $0 = HEAP32[$2 + 24 >> 2];
 $1 = $0 & 31;
 $0 = ($0 & 63) >>> 0 >= 32 ? 0 : 1 << $1;
 $1 = $0 - 1 | 0;
 HEAP32[$2 + 20 >> 2] = int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29($1);
 HEAP32[$2 + 16 >> 2] = int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(0);
 HEAP32[$2 + 12 >> 2] = int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(1);
 HEAP32[$2 + 8 >> 2] = int_20gemmlowp__BitAnd_int__28int_2c_20int_29(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 20 >> 2]);
 HEAP32[$2 + 4 >> 2] = int_20gemmlowp__Add_int__28int_2c_20int_29(int_20gemmlowp__ShiftRight_int__28int_2c_20int_29(HEAP32[$2 + 20 >> 2], 1), int_20gemmlowp__BitAnd_int__28int_2c_20int_29(int_20gemmlowp__MaskIfLessThan_int__28int_2c_20int_29(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 16 >> 2]), HEAP32[$2 + 12 >> 2]));
 $0 = int_20gemmlowp__Add_int__28int_2c_20int_29(int_20gemmlowp__ShiftRight_int__28int_2c_20int_29(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2]), int_20gemmlowp__BitAnd_int__28int_2c_20int_29(int_20gemmlowp__MaskIfGreaterThan_int__28int_2c_20int_29(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]), HEAP32[$2 + 12 >> 2]));
 __stack_pointer = $2 + 32 | 0;
 return $0;
}

function jslGetNextCh() {
 var $0 = 0;
 $0 = jslNextCh();
 HEAP8[HEAP32[44743]] = $0;
 $0 = HEAP32[44743];
 HEAP32[$0 + 88 >> 2] = HEAP32[$0 + 88 >> 2] + 1;
 label$1: {
  if (HEAPU32[HEAP32[44743] + 88 >> 2] < HEAPU32[HEAP32[44743] + 92 >> 2]) {
   break label$1;
  }
  $0 = HEAP32[44743];
  HEAP32[$0 + 88 >> 2] = HEAP32[$0 + 88 >> 2] - HEAP32[HEAP32[44743] + 92 >> 2];
  $0 = HEAP32[44743];
  HEAP32[$0 + 96 >> 2] = HEAP32[HEAP32[44743] + 92 >> 2] + HEAP32[$0 + 96 >> 2];
  if (jsvIsFlashString(HEAP32[HEAP32[44743] + 100 >> 2]) & 1) {
   jsvStringIteratorLoadFlashString(HEAP32[44743] + 88 | 0);
   break label$1;
  }
  label$3: {
   label$4: {
    if (!HEAP32[HEAP32[44743] + 100 >> 2]) {
     break label$4;
    }
    if (!(jsvGetLastChild(HEAP32[HEAP32[44743] + 100 >> 2]) & 65535)) {
     break label$4;
    }
    $0 = _jsvGetAddressOf(jsvGetLastChild(HEAP32[HEAP32[44743] + 100 >> 2]) & 65535);
    HEAP32[HEAP32[44743] + 100 >> 2] = $0;
    HEAP32[HEAP32[44743] + 104 >> 2] = HEAP32[HEAP32[44743] + 100 >> 2];
    $0 = jsvGetCharactersInVar(HEAP32[HEAP32[44743] + 100 >> 2]);
    HEAP32[HEAP32[44743] + 92 >> 2] = $0;
    break label$3;
   }
   HEAP32[HEAP32[44743] + 100 >> 2] = 0;
   HEAP32[HEAP32[44743] + 104 >> 2] = 0;
   HEAP32[HEAP32[44743] + 92 >> 2] = 0;
   $0 = HEAP32[44743];
   HEAP32[$0 + 96 >> 2] = HEAP32[HEAP32[44743] + 88 >> 2] + HEAP32[$0 + 96 >> 2];
   HEAP32[HEAP32[44743] + 88 >> 2] = 0;
  }
 }
}

function jsfGetNextFileHeader($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = HEAP32[HEAP32[$3 + 24 >> 2] >> 2];
 HEAP32[HEAP32[$3 + 24 >> 2] >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = (HEAP32[$3 + 12 >> 2] + jsfGetFileSize(HEAP32[$3 + 20 >> 2]) | 0) + 32;
 HEAP32[$3 + 8 >> 2] = jsfAlignAddress(HEAP32[$3 + 8 >> 2]);
 label$1: {
  if (HEAPU32[$3 + 8 >> 2] < HEAPU32[$3 + 12 >> 2]) {
   HEAP8[$3 + 31 | 0] = 0;
   break label$1;
  }
  if (HEAP32[$3 + 8 >> 2] + 32 >>> 0 > jsfGetBankEndAddress(HEAP32[$3 + 12 >> 2]) >>> 0) {
   HEAP8[$3 + 31 | 0] = 0;
   break label$1;
  }
  HEAP32[HEAP32[$3 + 24 >> 2] >> 2] = HEAP32[$3 + 8 >> 2];
  HEAP8[$3 + 7 | 0] = jsfGetFileHeader(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 20 >> 2], ((HEAP32[$3 + 16 >> 2] & 2) != 0 ^ -1) & 1) & 1;
  if (!(!(HEAP32[$3 + 16 >> 2] & 1) | HEAP8[$3 + 7 | 0] & 1)) {
   HEAP32[$3 + 8 >> 2] = jsfGetAddressOfNextPage(HEAP32[$3 + 8 >> 2]);
   HEAP32[HEAP32[$3 + 24 >> 2] >> 2] = HEAP32[$3 + 8 >> 2];
   if (!HEAP32[$3 + 8 >> 2]) {
    HEAP8[$3 + 31 | 0] = 0;
    break label$1;
   }
   HEAP8[$3 + 7 | 0] = jsfGetFileHeader(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 20 >> 2], ((HEAP32[$3 + 16 >> 2] & 2) != 0 ^ -1) & 1) & 1;
  }
  HEAP8[$3 + 31 | 0] = HEAP8[$3 + 7 | 0] & 1;
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP8[$3 + 31 | 0] & 1;
}

function jswrap_serial_unsetup($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 label$1: {
  if (!(jsvIsObject(HEAP32[$1 + 28 >> 2]) & 1)) {
   break label$1;
  }
  HEAP8[$1 + 27 | 0] = jsiGetDeviceFromClass(HEAP32[$1 + 28 >> 2]);
  HEAP32[$1 + 20 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 28 >> 2], 115339);
  HEAP32[$1 + 16 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 28 >> 2], 119685);
  if (HEAP32[$1 + 20 >> 2]) {
   jsserialPopulateUSARTInfo($1, HEAP32[$1 + 16 >> 2], HEAP32[$1 + 20 >> 2]);
   if (HEAPU8[$1 + 6 | 0] != 255) {
    jshPinSetState(HEAPU8[$1 + 6 | 0], 0);
   }
   if (HEAPU8[$1 + 7 | 0] != 255) {
    jshPinSetState(HEAPU8[$1 + 7 | 0], 0);
   }
   if (HEAPU8[$1 + 4 | 0] != 255) {
    jshPinSetState(HEAPU8[$1 + 4 | 0], 0);
   }
   if (HEAPU8[$1 + 5 | 0] != 255) {
    jshPinSetState(HEAPU8[$1 + 5 | 0], 0);
   }
   if (!(HEAPU8[$1 + 27 | 0] <= 22 & HEAPU8[$1 + 27 | 0] >= 17)) {
    jsserialEventCallbackKill(HEAP32[$1 + 28 >> 2], $1);
   }
  }
  jsvUnLock2(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 16 >> 2]);
  jsvObjectRemoveChild(HEAP32[$1 + 28 >> 2], 119685);
  jsvObjectRemoveChild(HEAP32[$1 + 28 >> 2], 115339);
  if (HEAPU8[$1 + 27 | 0] < 17 | HEAPU8[$1 + 27 | 0] > 22) {
   break label$1;
  }
  jshUSARTUnSetup(HEAPU8[$1 + 27 | 0]);
  jshSetFlowControlEnabled(HEAPU8[$1 + 27 | 0], 0, 255);
 }
 __stack_pointer = $1 + 32 | 0;
}

function jswrap_graphics_imageMetrics($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 192 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 184 >> 2] = $0;
 HEAP32[$2 + 180 >> 2] = $1;
 label$1: {
  if (!(graphicsGetFromVar($2 + 104 | 0, HEAP32[$2 + 184 >> 2]) & 1)) {
   HEAP32[$2 + 188 >> 2] = 0;
   break label$1;
  }
  if (!(_jswrap_graphics_parseImage($2 + 104 | 0, HEAP32[$2 + 180 >> 2], 0, $2 + 16 | 0) & 1)) {
   HEAP32[$2 + 188 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jsvGetLength(HEAP32[$2 + 36 >> 2]) - HEAP32[$2 + 40 >> 2];
  _jswrap_graphics_freeImageInfo($2 + 16 | 0);
  HEAP32[$2 + 8 >> 2] = jsvNewObject();
  if (HEAP32[$2 + 8 >> 2]) {
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 8 >> 2], 118428, jsvNewFromInteger(HEAP32[$2 + 16 >> 2]));
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 8 >> 2], 113099, jsvNewFromInteger(HEAP32[$2 + 20 >> 2]));
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 8 >> 2], 116866, jsvNewFromInteger(HEAP32[$2 + 24 >> 2]));
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 8 >> 2], 112883, jsvNewFromBool(HEAP8[$2 + 28 | 0] & 1));
   HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 12 >> 2] / HEAPU16[$2 + 66 >> 1];
   if (HEAP32[$2 + 4 >> 2] > 1) {
    jsvObjectSetChildAndUnLock(HEAP32[$2 + 8 >> 2], 115497, jsvNewFromInteger(HEAP32[$2 + 4 >> 2]));
   }
  }
  HEAP32[$2 + 188 >> 2] = HEAP32[$2 + 8 >> 2];
 }
 __stack_pointer = $2 + 192 | 0;
 return HEAP32[$2 + 188 >> 2];
}

function tflite__GreedyMemoryPlanner__NextSimultaneouslyActiveBuffer_28tflite__GreedyMemoryPlanner__ListEntry_20const__2c_20int_2c_20int_29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 $0 = HEAP32[$4 + 24 >> 2];
 HEAP32[$4 + 8 >> 2] = 0;
 label$1: {
  label$2: {
   if (!HEAP32[$4 + 20 >> 2]) {
    HEAP32[$4 + 4 >> 2] = HEAP32[$0 + 24 >> 2] + Math_imul(HEAP32[$0 + 32 >> 2], 12);
    break label$2;
   }
   if (HEAP32[HEAP32[$4 + 20 >> 2] + 8 >> 2] == -1) {
    HEAP32[$4 + 28 >> 2] = 0;
    break label$1;
   }
   HEAP32[$4 + 4 >> 2] = HEAP32[$0 + 24 >> 2] + Math_imul(HEAP32[HEAP32[$4 + 20 >> 2] + 8 >> 2], 12);
  }
  while (1) {
   label$6: {
    if (tflite__GreedyMemoryPlanner__DoesEntryOverlapInTime_28tflite__GreedyMemoryPlanner__ListEntry_20const__2c_20int_2c_20int_29_20const($0, HEAP32[$4 + 4 >> 2], HEAP32[$4 + 16 >> 2], HEAP32[$4 + 12 >> 2]) & 1) {
     HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 4 >> 2];
     break label$6;
    }
    if (HEAP32[HEAP32[$4 + 4 >> 2] + 8 >> 2] == -1) {
     break label$6;
    }
    HEAP32[$4 + 4 >> 2] = HEAP32[$0 + 24 >> 2] + Math_imul(HEAP32[HEAP32[$4 + 4 >> 2] + 8 >> 2], 12);
    continue;
   }
   break;
  }
  HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 8 >> 2];
 }
 __stack_pointer = $4 + 32 | 0;
 return HEAP32[$4 + 28 >> 2];
}

function push_bits($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP8[$4 + 27 | 0] = $1;
 HEAP8[$4 + 26 | 0] = $2;
 HEAP32[$4 + 20 >> 2] = $3;
 label$1: {
  if (!(HEAPU8[$4 + 27 | 0] != 8 | HEAPU8[HEAP32[$4 + 28 >> 2] + 14 | 0] != 128)) {
   $2 = HEAPU8[$4 + 26 | 0];
   $3 = HEAP32[HEAP32[$4 + 20 >> 2] >> 2];
   $0 = HEAP32[HEAP32[$4 + 20 >> 2] + 8 >> 2];
   $1 = HEAP32[$0 >> 2];
   HEAP32[$0 >> 2] = $1 + 1;
   HEAP8[$1 + $3 | 0] = $2;
   break label$1;
  }
  HEAP32[$4 + 16 >> 2] = HEAPU8[$4 + 27 | 0] - 1;
  while (1) {
   if (HEAP32[$4 + 16 >> 2] >= 0) {
    HEAP8[$4 + 15 | 0] = (HEAPU8[$4 + 26 | 0] & 1 << HEAP32[$4 + 16 >> 2]) != 0;
    if (HEAP8[$4 + 15 | 0] & 1) {
     $0 = HEAP32[$4 + 28 >> 2];
     HEAP8[$0 + 13 | 0] = HEAPU8[HEAP32[$4 + 28 >> 2] + 14 | 0] | HEAPU8[$0 + 13 | 0];
    }
    $0 = HEAP32[$4 + 28 >> 2];
    HEAP8[$0 + 14 | 0] = HEAPU8[$0 + 14 | 0] >>> 1;
    if (!HEAPU8[HEAP32[$4 + 28 >> 2] + 14 | 0]) {
     HEAP8[HEAP32[$4 + 28 >> 2] + 14 | 0] = 128;
     $2 = HEAPU8[HEAP32[$4 + 28 >> 2] + 13 | 0];
     $3 = HEAP32[HEAP32[$4 + 20 >> 2] >> 2];
     $0 = HEAP32[HEAP32[$4 + 20 >> 2] + 8 >> 2];
     $1 = HEAP32[$0 >> 2];
     HEAP32[$0 >> 2] = $1 + 1;
     HEAP8[$1 + $3 | 0] = $2;
     HEAP8[HEAP32[$4 + 28 >> 2] + 13 | 0] = 0;
    }
    HEAP32[$4 + 16 >> 2] = HEAP32[$4 + 16 >> 2] - 1;
    continue;
   }
   break;
  }
 }
}

function jswrap_math_round($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 + 32 >> 3] = $0;
 $2 = __DOUBLE_BITS_6(HEAPF64[$1 + 32 >> 3]);
 $4 = $2;
 $3 = i64toi32_i32$HIGH_BITS;
 $2 = $3 & 2147483647;
 label$1: {
  label$2: {
   if (!(($2 | 0) == 2146435072 | $2 >>> 0 > 2146435072)) {
    if (!(isNegativeZero(HEAPF64[$1 + 32 >> 3]) & 1)) {
     break label$2;
    }
   }
   HEAP32[$1 + 44 >> 2] = jsvNewFromFloat(HEAPF64[$1 + 32 >> 3]);
   break label$1;
  }
  HEAPF64[$1 + 32 >> 3] = HEAPF64[$1 + 32 >> 3] + (HEAPF64[$1 + 32 >> 3] < 0 ? -.5 : .5);
  $2 = $1;
  $0 = HEAPF64[$1 + 32 >> 3];
  label$5: {
   if (Math_abs($0) < 0x8000000000000000) {
    $3 = Math_abs($0) >= 1 ? ~~($0 > 0 ? Math_min(Math_floor($0 * 2.3283064365386963e-10), 4294967295) : Math_ceil(($0 - +(~~$0 >>> 0 >>> 0)) * 2.3283064365386963e-10)) >>> 0 : 0;
    $5 = ~~$0 >>> 0;
    break label$5;
   }
   $3 = -2147483648;
  }
  HEAP32[$2 + 24 >> 2] = $5;
  HEAP32[$2 + 28 >> 2] = $3;
  $3 = HEAP32[$1 + 24 >> 2];
  $2 = HEAP32[$1 + 28 >> 2];
  if (!(!!($3 | $2) | !(HEAPF64[$1 + 32 >> 3] < 0))) {
   HEAP32[$1 + 44 >> 2] = jsvNewFromFloat(-0);
   break label$1;
  }
  $2 = HEAP32[$1 + 24 >> 2];
  $3 = HEAP32[$1 + 28 >> 2];
  HEAP32[$1 + 44 >> 2] = jsvNewFromLongInteger($2, $3);
 }
 __stack_pointer = $1 + 48 | 0;
 return HEAP32[$1 + 44 >> 2];
}

function jsvIteratorSetValue($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 label$1: {
  label$2: {
   switch (HEAP32[HEAP32[$2 + 12 >> 2] >> 2] - 1 | 0) {
   case 3:
    label$6: {
     if (!(jsvIsIntegerish(HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2]) & 1)) {
      break label$6;
     }
     if ((jsvGetInteger(HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2]) | 0) != HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2]) {
      break label$6;
     }
     jsvObjectIteratorSetValue(HEAP32[$2 + 12 >> 2] + 4 | 0, HEAP32[$2 + 8 >> 2]);
    }
    jsvSetArrayItem(HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2], HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2], HEAP32[$2 + 8 >> 2]);
    break label$1;

   case 1:
    jsvObjectIteratorSetValue(HEAP32[$2 + 12 >> 2] + 4 | 0, HEAP32[$2 + 8 >> 2]);
    break label$1;

   case 0:
    $1 = HEAP32[$2 + 12 >> 2] + 4 | 0;
    label$7: {
     if (jsvIsString(HEAP32[$2 + 8 >> 2]) & 1) {
      $0 = HEAP8[HEAP32[$2 + 8 >> 2]];
      break label$7;
     }
     $0 = jsvGetInteger(HEAP32[$2 + 8 >> 2]) << 24 >> 24;
    }
    jsvStringIteratorSetChar($1, $0 << 24 >> 24);
    break label$1;

   case 2:
    break label$2;

   default:
    break label$1;
   }
  }
  jsvArrayBufferIteratorSetValueAndRewind(HEAP32[$2 + 12 >> 2] + 4 | 0, HEAP32[$2 + 8 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 8 >> 2];
}

function gemmlowp__ImplSaturatingRoundingMultiplyByPOT_1_2c_20int_2c_201___eval_28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP32[$1 + 24 >> 2] = int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(std____2__numeric_limits_int___min_28_29());
 HEAP32[$1 + 20 >> 2] = int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(std____2__numeric_limits_int___max_28_29());
 HEAP32[$1 + 16 >> 2] = 32;
 HEAP32[$1 + 12 >> 2] = 1073741823;
 HEAP32[$1 + 8 >> 2] = int_20gemmlowp__MaskIfGreaterThan_int__28int_2c_20int_29(HEAP32[$1 + 28 >> 2], int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(1073741823));
 HEAP32[$1 + 4 >> 2] = int_20gemmlowp__MaskIfLessThan_int__28int_2c_20int_29(HEAP32[$1 + 28 >> 2], int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(-1073741823));
 HEAP32[$1 >> 2] = int_20gemmlowp__ShiftLeft_int__28int_2c_20int_29(HEAP32[$1 + 28 >> 2], 1);
 HEAP32[$1 >> 2] = int_20gemmlowp__SelectUsingMask_int__28int_2c_20int_2c_20int_29(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 20 >> 2], HEAP32[$1 >> 2]);
 HEAP32[$1 >> 2] = int_20gemmlowp__SelectUsingMask_int__28int_2c_20int_2c_20int_29(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 24 >> 2], HEAP32[$1 >> 2]);
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 >> 2];
}

function gemmlowp__ImplSaturatingRoundingMultiplyByPOT_2_2c_20int_2c_201___eval_28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP32[$1 + 24 >> 2] = int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(std____2__numeric_limits_int___min_28_29());
 HEAP32[$1 + 20 >> 2] = int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(std____2__numeric_limits_int___max_28_29());
 HEAP32[$1 + 16 >> 2] = 32;
 HEAP32[$1 + 12 >> 2] = 536870911;
 HEAP32[$1 + 8 >> 2] = int_20gemmlowp__MaskIfGreaterThan_int__28int_2c_20int_29(HEAP32[$1 + 28 >> 2], int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(536870911));
 HEAP32[$1 + 4 >> 2] = int_20gemmlowp__MaskIfLessThan_int__28int_2c_20int_29(HEAP32[$1 + 28 >> 2], int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(-536870911));
 HEAP32[$1 >> 2] = int_20gemmlowp__ShiftLeft_int__28int_2c_20int_29(HEAP32[$1 + 28 >> 2], 2);
 HEAP32[$1 >> 2] = int_20gemmlowp__SelectUsingMask_int__28int_2c_20int_2c_20int_29(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 20 >> 2], HEAP32[$1 >> 2]);
 HEAP32[$1 >> 2] = int_20gemmlowp__SelectUsingMask_int__28int_2c_20int_2c_20int_29(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 24 >> 2], HEAP32[$1 >> 2]);
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 >> 2];
}

function lcdFillRect_JS($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = __stack_pointer - 48 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 44 >> 2] = $0;
 HEAP32[$6 + 40 >> 2] = $1;
 HEAP32[$6 + 36 >> 2] = $2;
 HEAP32[$6 + 32 >> 2] = $3;
 HEAP32[$6 + 28 >> 2] = $4;
 HEAP32[$6 + 24 >> 2] = $5;
 $0 = HEAP32[$6 + 44 >> 2];
 HEAP32[$6 + 20 >> 2] = jsvObjectGetChildIfExists(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 113270);
 label$1: {
  if (HEAP32[$6 + 20 >> 2]) {
   HEAP32[$6 >> 2] = jsvNewFromInteger(HEAP32[$6 + 40 >> 2]);
   HEAP32[$6 + 4 >> 2] = jsvNewFromInteger(HEAP32[$6 + 36 >> 2]);
   HEAP32[$6 + 8 >> 2] = jsvNewFromInteger(HEAP32[$6 + 32 >> 2]);
   HEAP32[$6 + 12 >> 2] = jsvNewFromInteger(HEAP32[$6 + 28 >> 2]);
   HEAP32[$6 + 16 >> 2] = jsvNewFromInteger(HEAP32[$6 + 24 >> 2]);
   $0 = HEAP32[$6 + 44 >> 2];
   jsvUnLock(jspExecuteFunction(HEAP32[$6 + 20 >> 2], HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 5, $6));
   jsvUnLockMany(5, $6);
   jsvUnLock(HEAP32[$6 + 20 >> 2]);
   break label$1;
  }
  graphicsFallbackFillRect(HEAP32[$6 + 44 >> 2], HEAP32[$6 + 40 >> 2], HEAP32[$6 + 36 >> 2], HEAP32[$6 + 32 >> 2], HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2]);
 }
 __stack_pointer = $6 + 48 | 0;
}

function fflush($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 if (!$0) {
  if (HEAP32[93500]) {
   $1 = fflush(HEAP32[93500]);
  }
  if (HEAP32[44688]) {
   $1 = fflush(HEAP32[44688]) | $1;
  }
  $0 = HEAP32[__ofl_lock() >> 2];
  if ($0) {
   while (1) {
    $2 = 0;
    if (HEAP32[$0 + 76 >> 2] >= 0) {
     $2 = __lockfile($0);
    }
    if (HEAP32[$0 + 20 >> 2] != HEAP32[$0 + 28 >> 2]) {
     $1 = fflush($0) | $1;
    }
    if ($2) {
     __unlockfile($0);
    }
    $0 = HEAP32[$0 + 56 >> 2];
    if ($0) {
     continue;
    }
    break;
   }
  }
  __ofl_unlock();
  return $1 | 0;
 }
 if (HEAP32[$0 + 76 >> 2] >= 0) {
  $2 = __lockfile($0);
 }
 label$10: {
  label$11: {
   label$12: {
    if (HEAP32[$0 + 20 >> 2] == HEAP32[$0 + 28 >> 2]) {
     break label$12;
    }
    FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0;
    if (HEAP32[$0 + 20 >> 2]) {
     break label$12;
    }
    $1 = -1;
    if ($2) {
     break label$11;
    }
    break label$10;
   }
   $1 = HEAP32[$0 + 4 >> 2];
   $3 = HEAP32[$0 + 8 >> 2];
   if (($1 | 0) != ($3 | 0)) {
    $1 = $1 - $3 | 0;
    FUNCTION_TABLE[HEAP32[$0 + 40 >> 2]]($0, $1, $1 >> 31, 1) | 0;
   }
   $1 = 0;
   HEAP32[$0 + 28 >> 2] = 0;
   HEAP32[$0 + 16 >> 2] = 0;
   HEAP32[$0 + 20 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = 0;
   if (!$2) {
    break label$10;
   }
  }
  __unlockfile($0);
 }
 return $1 | 0;
}

function graphicsFallbackBlit($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $7 = 0;
 $7 = __stack_pointer - 48 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 44 >> 2] = $0;
 HEAP32[$7 + 40 >> 2] = $1;
 HEAP32[$7 + 36 >> 2] = $2;
 HEAP32[$7 + 32 >> 2] = $3;
 HEAP32[$7 + 28 >> 2] = $4;
 HEAP32[$7 + 24 >> 2] = $5;
 HEAP32[$7 + 20 >> 2] = $6;
 HEAP32[$7 + 16 >> 2] = 0;
 while (1) {
  if (HEAP32[$7 + 16 >> 2] < HEAP32[$7 + 28 >> 2]) {
   HEAP32[$7 + 12 >> 2] = 0;
   while (1) {
    if (HEAP32[$7 + 12 >> 2] < HEAP32[$7 + 32 >> 2]) {
     $0 = HEAP32[$7 + 44 >> 2];
     $1 = HEAPU8[$0 + 52 | 0] | HEAPU8[$0 + 53 | 0] << 8 | (HEAPU8[$0 + 54 | 0] << 16 | HEAPU8[$0 + 55 | 0] << 24);
     $0 = HEAP32[$7 + 44 >> 2];
     FUNCTION_TABLE[$1 | 0](HEAP32[$7 + 44 >> 2], HEAP32[$7 + 12 >> 2] + HEAP32[$7 + 24 >> 2] | 0, HEAP32[$7 + 16 >> 2] + HEAP32[$7 + 20 >> 2] | 0, FUNCTION_TABLE[HEAPU8[$0 + 60 | 0] | HEAPU8[$0 + 61 | 0] << 8 | (HEAPU8[$0 + 62 | 0] << 16 | HEAPU8[$0 + 63 | 0] << 24)](HEAP32[$7 + 44 >> 2], HEAP32[$7 + 12 >> 2] + HEAP32[$7 + 40 >> 2] | 0, HEAP32[$7 + 16 >> 2] + HEAP32[$7 + 36 >> 2] | 0) | 0);
     HEAP32[$7 + 12 >> 2] = HEAP32[$7 + 12 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$7 + 16 >> 2] = HEAP32[$7 + 16 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $7 + 48 | 0;
}

function gemmlowp__ImplSaturatingRoundingMultiplyByPOT_5_2c_20int_2c_201___eval_28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP32[$1 + 24 >> 2] = int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(std____2__numeric_limits_int___min_28_29());
 HEAP32[$1 + 20 >> 2] = int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(std____2__numeric_limits_int___max_28_29());
 HEAP32[$1 + 16 >> 2] = 32;
 HEAP32[$1 + 12 >> 2] = 67108863;
 HEAP32[$1 + 8 >> 2] = int_20gemmlowp__MaskIfGreaterThan_int__28int_2c_20int_29(HEAP32[$1 + 28 >> 2], int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(67108863));
 HEAP32[$1 + 4 >> 2] = int_20gemmlowp__MaskIfLessThan_int__28int_2c_20int_29(HEAP32[$1 + 28 >> 2], int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(-67108863));
 HEAP32[$1 >> 2] = int_20gemmlowp__ShiftLeft_int__28int_2c_20int_29(HEAP32[$1 + 28 >> 2], 5);
 HEAP32[$1 >> 2] = int_20gemmlowp__SelectUsingMask_int__28int_2c_20int_2c_20int_29(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 20 >> 2], HEAP32[$1 >> 2]);
 HEAP32[$1 >> 2] = int_20gemmlowp__SelectUsingMask_int__28int_2c_20int_2c_20int_29(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 24 >> 2], HEAP32[$1 >> 2]);
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 >> 2];
}

function jsvUpdateMemoryAddress($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP32[$3 + 16 >> 2] = 1;
 while (1) {
  if (HEAPU32[$3 + 16 >> 2] <= 12e3) {
   HEAP32[$3 + 12 >> 2] = jsvGetAddressOf(HEAP32[$3 + 16 >> 2] & 65535);
   label$3: {
    label$4: {
     if (!(jsvIsNativeString(HEAP32[$3 + 12 >> 2]) & 1)) {
      if (!(jsvIsFlashString(HEAP32[$3 + 12 >> 2]) & 1)) {
       break label$4;
      }
     }
     $0 = HEAP32[$3 + 12 >> 2];
     HEAP32[$3 + 8 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
     if (!(HEAPU32[$3 + 8 >> 2] < HEAPU32[$3 + 28 >> 2] | HEAPU32[$3 + 8 >> 2] >= HEAP32[$3 + 28 >> 2] + HEAP32[$3 + 24 >> 2] >>> 0)) {
      $0 = HEAP32[$3 + 12 >> 2];
      $1 = (HEAP32[$3 + 8 >> 2] + HEAP32[$3 + 20 >> 2] | 0) - HEAP32[$3 + 28 >> 2] | 0;
      HEAP8[$0 | 0] = $1;
      HEAP8[$0 + 1 | 0] = $1 >>> 8;
      HEAP8[$0 + 2 | 0] = $1 >>> 16;
      HEAP8[$0 + 3 | 0] = $1 >>> 24;
     }
     break label$3;
    }
    if (jsvIsFlatString(HEAP32[$3 + 12 >> 2]) & 1) {
     HEAP32[$3 + 16 >> 2] = jsvGetFlatStringBlocks(HEAP32[$3 + 12 >> 2]) + HEAP32[$3 + 16 >> 2];
    }
   }
   HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $3 + 32 | 0;
}

function match($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 368 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 364 >> 2] = $0;
 HEAP32[$4 + 360 >> 2] = $1;
 HEAP32[$4 + 356 >> 2] = $2;
 HEAP8[$4 + 355 | 0] = $3;
 HEAP32[$4 + 264 >> 2] = HEAP32[$4 + 360 >> 2];
 HEAP32[$4 + 268 >> 2] = HEAP32[$4 + 356 >> 2];
 HEAP8[$4 + 272 | 0] = HEAP8[$4 + 355 | 0] & 1;
 HEAP8[$4 + 273 | 0] = 0;
 HEAP16[$4 + 274 >> 1] = 256;
 HEAP32[$4 + 276 >> 2] = 0;
 jsvStringIteratorNew($4 + 224 | 0, HEAP32[$4 + 360 >> 2], HEAP32[$4 + 356 >> 2]);
 jsvStringIteratorClone($4 + 184 | 0, $4 + 224 | 0);
 $0 = HEAP32[$4 + 364 >> 2];
 __memcpy($4 + 96 | 0, $4 + 264 | 0, 88);
 HEAP32[$4 + 260 >> 2] = matchhere($0, $4 + 184 | 0, $4 + 96 | 0);
 jsvStringIteratorFree_9($4 + 184 | 0);
 jsvStringIteratorNext($4 + 224 | 0);
 while (1) {
  $0 = 0;
  if (!HEAP32[$4 + 260 >> 2]) {
   $0 = jsvStringIteratorHasChar_7($4 + 224 | 0);
  }
  if ($0 & 1) {
   HEAP32[$4 + 268 >> 2] = HEAP32[$4 + 268 >> 2] + 1;
   jsvStringIteratorClone($4 + 184 | 0, $4 + 224 | 0);
   $0 = HEAP32[$4 + 364 >> 2];
   __memcpy($4 + 8 | 0, $4 + 264 | 0, 88);
   HEAP32[$4 + 260 >> 2] = matchhere($0, $4 + 184 | 0, $4 + 8 | 0);
   jsvStringIteratorFree_9($4 + 184 | 0);
   jsvStringIteratorNext($4 + 224 | 0);
   continue;
  }
  break;
 }
 jsvStringIteratorFree_9($4 + 224 | 0);
 __stack_pointer = $4 + 368 | 0;
 return HEAP32[$4 + 260 >> 2];
}

function jswrap_object_removeListener($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 label$1: {
  if (!(jsvHasChildren(HEAP32[$3 + 28 >> 2]) & 1)) {
   jsExceptionHere(3, 122784, 0);
   break label$1;
  }
  if (jsvIsString(HEAP32[$3 + 24 >> 2]) & 1) {
   HEAP32[$3 >> 2] = HEAP32[$3 + 24 >> 2];
   HEAP32[$3 + 16 >> 2] = jsvVarPrintf(112207, $3);
   if (!HEAP32[$3 + 16 >> 2]) {
    break label$1;
   }
   HEAP32[$3 + 12 >> 2] = jsvFindChildFromVar(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 16 >> 2], 1);
   jsvUnLock(HEAP32[$3 + 16 >> 2]);
   HEAP32[$3 + 8 >> 2] = jsvSkipName(HEAP32[$3 + 12 >> 2]);
   if (HEAP32[$3 + 8 >> 2]) {
    label$5: {
     if (HEAP32[$3 + 8 >> 2] == HEAP32[$3 + 20 >> 2]) {
      jsvRemoveChild(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 12 >> 2]);
      break label$5;
     }
     if (jsvIsArray(HEAP32[$3 + 8 >> 2]) & 1) {
      HEAP32[$3 + 4 >> 2] = jsvGetIndexOf(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 20 >> 2], 1);
      if (HEAP32[$3 + 4 >> 2]) {
       jsvRemoveChildAndUnLock(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
      }
     }
    }
    jsvUnLock(HEAP32[$3 + 8 >> 2]);
   }
   jsvUnLock(HEAP32[$3 + 12 >> 2]);
   break label$1;
  }
  jsExceptionHere(3, 118836, 0);
 }
 __stack_pointer = $3 + 32 | 0;
}

function tflite___28anonymous_20namespace_29__CommitPlan_28tflite__ErrorReporter__2c_20tflite__MemoryPlanner__2c_20unsigned_20char__2c_20tflite___28anonymous_20namespace_29__AllocationInfo_20const__2c_20unsigned_20long_29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 48 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 40 >> 2] = $0;
 HEAP32[$5 + 36 >> 2] = $1;
 HEAP32[$5 + 32 >> 2] = $2;
 HEAP32[$5 + 28 >> 2] = $3;
 HEAP32[$5 + 24 >> 2] = $4;
 HEAP32[$5 + 20 >> 2] = 0;
 HEAP32[$5 + 16 >> 2] = 0;
 label$1: {
  while (1) {
   if (HEAPU32[$5 + 16 >> 2] < HEAPU32[$5 + 24 >> 2]) {
    HEAP32[$5 + 12 >> 2] = HEAP32[$5 + 28 >> 2] + Math_imul(HEAP32[$5 + 16 >> 2], 24);
    if (HEAP8[HEAP32[$5 + 12 >> 2] + 20 | 0] & 1) {
     HEAP32[$5 + 8 >> 2] = -1;
     $0 = HEAP32[$5 + 36 >> 2];
     HEAP32[$5 + 4 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, HEAP32[$5 + 40 >> 2], HEAP32[$5 + 20 >> 2], $5 + 8 | 0);
     if (HEAP32[$5 + 4 >> 2]) {
      HEAP32[$5 + 44 >> 2] = HEAP32[$5 + 4 >> 2];
      break label$1;
     }
     HEAP32[HEAP32[HEAP32[$5 + 12 >> 2] + 4 >> 2] >> 2] = HEAP32[$5 + 32 >> 2] + HEAP32[$5 + 8 >> 2];
     HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 20 >> 2] + 1;
    }
    HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 16 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$5 + 44 >> 2] = 0;
 }
 __stack_pointer = $5 + 48 | 0;
 return HEAP32[$5 + 44 >> 2];
}

function jsvGetBool($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 label$1: {
  if (jsvIsString(HEAP32[$1 + 24 >> 2]) & 1) {
   HEAP8[$1 + 31 | 0] = (jsvGetStringLength(HEAP32[$1 + 24 >> 2]) | 0) != 0;
   break label$1;
  }
  if (jsvIsPin(HEAP32[$1 + 24 >> 2]) & 1) {
   HEAP8[$1 + 31 | 0] = jshIsPinValid(jshGetPinFromVar(HEAP32[$1 + 24 >> 2]) & 255) & 1;
   break label$1;
  }
  label$4: {
   label$5: {
    if (jsvIsFunction(HEAP32[$1 + 24 >> 2]) & 1) {
     break label$5;
    }
    if (jsvIsArray(HEAP32[$1 + 24 >> 2]) & 1) {
     break label$5;
    }
    if (jsvIsObject(HEAP32[$1 + 24 >> 2]) & 1) {
     break label$5;
    }
    if (!(jsvIsArrayBuffer(HEAP32[$1 + 24 >> 2]) & 1)) {
     break label$4;
    }
   }
   HEAP8[$1 + 31 | 0] = 1;
   break label$1;
  }
  if (jsvIsFloat(HEAP32[$1 + 24 >> 2]) & 1) {
   HEAPF64[$1 + 16 >> 3] = jsvGetFloat(HEAP32[$1 + 24 >> 2]);
   $2 = __DOUBLE_BITS(HEAPF64[$1 + 16 >> 3]);
   $0 = $2;
   $3 = i64toi32_i32$HIGH_BITS;
   $2 = $3 & 2147483647;
   $3 = $0;
   HEAP8[$1 + 31 | 0] = ($2 | 0) == 2146435072 & ($3 | 0) != 0 | $2 >>> 0 > 2146435072 ? 0 : HEAPF64[$1 + 16 >> 3] != 0;
   break label$1;
  }
  HEAP8[$1 + 31 | 0] = (jsvGetInteger(HEAP32[$1 + 24 >> 2]) | 0) != 0;
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP8[$1 + 31 | 0] & 1;
}

function jswrap_io_peek($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 96 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 88 >> 2] = $0;
 HEAP32[$3 + 84 >> 2] = $1;
 HEAP32[$3 + 80 >> 2] = $2;
 HEAP32[$3 + 76 >> 2] = jshFlashGetMemMapAddress(HEAP32[$3 + 88 >> 2]);
 label$1: {
  if (HEAP32[$3 + 84 >> 2] <= 1) {
   HEAP32[$3 + 92 >> 2] = jsvNewFromLongInteger(_jswrap_io_peek(HEAP32[$3 + 76 >> 2], HEAP32[$3 + 80 >> 2]), 0);
   break label$1;
  }
  if (HEAP32[$3 + 80 >> 2] == 1) {
   HEAP8[$3 + 75 | 0] = 1;
  }
  if (HEAP32[$3 + 80 >> 2] == 2) {
   HEAP8[$3 + 75 | 0] = 2;
  }
  if (HEAP32[$3 + 80 >> 2] == 4) {
   HEAP8[$3 + 75 | 0] = 4;
  }
  HEAP32[$3 + 68 >> 2] = jsvNewTypedArray(HEAPU8[$3 + 75 | 0], HEAP32[$3 + 84 >> 2]);
  if (!HEAP32[$3 + 68 >> 2]) {
   HEAP32[$3 + 92 >> 2] = 0;
   break label$1;
  }
  jsvArrayBufferIteratorNew($3 + 8 | 0, HEAP32[$3 + 68 >> 2], 0);
  while (1) {
   if (jsvArrayBufferIteratorHasElement($3 + 8 | 0) & 1) {
    jsvArrayBufferIteratorSetIntegerValue($3 + 8 | 0, _jswrap_io_peek(HEAP32[$3 + 76 >> 2], HEAP32[$3 + 80 >> 2]));
    HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 80 >> 2] + HEAP32[$3 + 76 >> 2];
    jsvArrayBufferIteratorNext($3 + 8 | 0);
    continue;
   }
   break;
  }
  jsvArrayBufferIteratorFree($3 + 8 | 0);
  HEAP32[$3 + 92 >> 2] = HEAP32[$3 + 68 >> 2];
 }
 __stack_pointer = $3 + 96 | 0;
 return HEAP32[$3 + 92 >> 2];
}

function jslGetRawString() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP8[$0 + 15 | 0] = HEAP16[HEAP32[44743] + 2 >> 1] == 210;
 HEAP16[HEAP32[44743] + 2 >> 1] = 131;
 HEAP32[$0 + 8 >> 2] = HEAPU8[HEAP32[44743]];
 if (HEAP8[$0 + 15 | 0] & 1) {
  jslGetNextCh();
  HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] | HEAPU8[HEAP32[44743]] << 8;
 }
 jsvUnLock(HEAP32[HEAP32[44743] + 76 >> 2]);
 label$2: {
  if (HEAPU32[$0 + 8 >> 2] > 9) {
   HEAP32[$0 + 4 >> 2] = jsvStringIteratorGetIndex(HEAP32[44743] + 88 | 0);
   $1 = jsvNewFromStringVar(HEAP32[HEAP32[44743] + 84 >> 2], HEAP32[$0 + 4 >> 2], HEAP32[$0 + 8 >> 2]);
   HEAP32[HEAP32[44743] + 76 >> 2] = $1;
   jsvLockAgain(HEAP32[HEAP32[44743] + 100 >> 2]);
   jsvStringIteratorGoto(HEAP32[44743] + 88 | 0, HEAP32[HEAP32[44743] + 84 >> 2], HEAP32[$0 + 4 >> 2] + HEAP32[$0 + 8 >> 2] | 0);
   jsvUnLock(HEAP32[HEAP32[44743] + 100 >> 2]);
   break label$2;
  }
  $1 = jsvNewWithFlags(HEAP32[$0 + 8 >> 2] + 28 & 65535);
  HEAP32[HEAP32[44743] + 76 >> 2] = $1;
  HEAP32[$0 >> 2] = 0;
  while (1) {
   if (HEAPU32[$0 >> 2] < HEAPU32[$0 + 8 >> 2]) {
    jslGetNextCh();
    HEAP8[HEAP32[HEAP32[44743] + 76 >> 2] + HEAP32[$0 >> 2] | 0] = HEAPU8[HEAP32[44743]];
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
    continue;
   }
   break;
  }
 }
 jslGetNextCh();
 __stack_pointer = $0 + 16 | 0;
}

function jswrap_i2c_writeTo($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 $3 = $4;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 label$1: {
  if (!(jsvIsObject(HEAP32[$3 + 28 >> 2]) & 1)) {
   break label$1;
  }
  HEAP8[$3 + 19 | 0] = jsiGetDeviceFromClass(HEAP32[$3 + 28 >> 2]);
  HEAP8[$3 + 18 | 0] = 1;
  HEAP32[$3 + 12 >> 2] = i2c_get_address(HEAP32[$3 + 24 >> 2], $3 + 18 | 0);
  HEAP32[$3 + 8 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = jsvGetDataPointer(HEAP32[$3 + 20 >> 2], $3 + 8 | 0);
  if (!(HEAP32[$3 + 4 >> 2] | !HEAP32[$3 + 20 >> 2])) {
   HEAP32[$3 + 8 >> 2] = jsvIterateCallbackCount(HEAP32[$3 + 20 >> 2]);
   label$3: {
    if (HEAP32[$3 + 8 >> 2] + 256 >>> 0 > jsuGetFreeStack() >>> 0) {
     jsExceptionHere(1, 122957, 0);
     break label$3;
    }
    $4 = $4 - (HEAP32[$3 + 8 >> 2] + 15 & -16) | 0;
    __stack_pointer = $4;
    HEAP32[$3 + 4 >> 2] = $4;
    jsvIterateCallbackToBytes(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 4 >> 2], HEAP32[$3 + 8 >> 2]);
   }
  }
  if (!HEAP32[$3 + 4 >> 2] | !HEAP32[$3 + 8 >> 2]) {
   break label$1;
  }
  _jswrap_i2c_writeTo(HEAP32[$3 + 28 >> 2], HEAPU8[$3 + 19 | 0], HEAP32[$3 + 12 >> 2], HEAP8[$3 + 18 | 0] & 1, HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 }
 __stack_pointer = $3 + 32 | 0;
}

function jswrap_string_trim($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 80 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 72 >> 2] = $0;
 HEAP32[$1 + 68 >> 2] = jsvAsString(HEAP32[$1 + 72 >> 2]);
 label$1: {
  if (!HEAP32[$1 + 68 >> 2]) {
   HEAP32[$1 + 76 >> 2] = HEAP32[$1 + 68 >> 2];
   break label$1;
  }
  HEAP32[$1 + 64 >> 2] = 0;
  HEAP32[$1 + 60 >> 2] = -1;
  jsvStringIteratorNew($1 + 24 | 0, HEAP32[$1 + 68 >> 2], 0);
  while (1) {
   if (jsvStringIteratorHasChar_8($1 + 24 | 0) & 1) {
    HEAP32[$1 + 20 >> 2] = jsvStringIteratorGetIndex_5($1 + 24 | 0);
    HEAP8[$1 + 19 | 0] = isWhitespace(jsvStringIteratorGetCharAndNext($1 + 24 | 0) << 24 >> 24) & 1;
    if (!(HEAP8[$1 + 19 | 0] & 1)) {
     if (HEAP32[$1 + 60 >> 2] < 0) {
      HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 20 >> 2];
     }
     HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 20 >> 2];
    }
    continue;
   }
   break;
  }
  jsvStringIteratorFree_10($1 + 24 | 0);
  HEAP32[$1 + 12 >> 2] = 0;
  if (HEAP32[$1 + 60 >> 2] >= HEAP32[$1 + 64 >> 2]) {
   HEAP32[$1 + 12 >> 2] = (HEAP32[$1 + 60 >> 2] + 1 | 0) - HEAP32[$1 + 64 >> 2];
  }
  HEAP32[$1 + 8 >> 2] = jsvNewFromStringVar(HEAP32[$1 + 68 >> 2], HEAP32[$1 + 64 >> 2], HEAP32[$1 + 12 >> 2]);
  jsvUnLock(HEAP32[$1 + 68 >> 2]);
  HEAP32[$1 + 76 >> 2] = HEAP32[$1 + 8 >> 2];
 }
 __stack_pointer = $1 + 80 | 0;
 return HEAP32[$1 + 76 >> 2];
}

function jsvArrayInsertBefore($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 label$1: {
  if (HEAP32[$3 + 24 >> 2]) {
   HEAP32[$3 + 16 >> 2] = jsvMakeIntoVariableName(jsvNewFromInteger(0), HEAP32[$3 + 20 >> 2]);
   if (!HEAP32[$3 + 16 >> 2]) {
    break label$1;
   }
   HEAP16[$3 + 14 >> 1] = jsvGetRef(jsvRef(HEAP32[$3 + 16 >> 2]));
   HEAP16[$3 + 12 >> 1] = jsvGetPrevSibling(HEAP32[$3 + 24 >> 2]);
   label$3: {
    if (HEAPU16[$3 + 12 >> 1]) {
     HEAP32[$3 + 8 >> 2] = jsvRef(jsvLock(HEAPU16[$3 + 12 >> 1]));
     jsvSetInteger(HEAP32[$3 + 16 >> 2], jsvGetInteger(HEAP32[$3 + 8 >> 2]) + 1 | 0);
     jsvSetNextSibling(HEAP32[$3 + 8 >> 2], HEAPU16[$3 + 14 >> 1]);
     jsvUnLock(HEAP32[$3 + 8 >> 2]);
     jsvSetPrevSibling(HEAP32[$3 + 16 >> 2], HEAPU16[$3 + 12 >> 1]);
     break label$3;
    }
    jsvSetPrevSibling(HEAP32[$3 + 16 >> 2], 0);
    jsvSetFirstChild(HEAP32[$3 + 28 >> 2], HEAPU16[$3 + 14 >> 1]);
   }
   jsvSetPrevSibling(HEAP32[$3 + 24 >> 2], HEAPU16[$3 + 14 >> 1]);
   jsvSetNextSibling(HEAP32[$3 + 16 >> 2], jsvGetRef(jsvRef(HEAP32[$3 + 24 >> 2])) & 65535);
   jsvUnLock(HEAP32[$3 + 16 >> 2]);
   break label$1;
  }
  jsvArrayPush(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 20 >> 2]);
 }
 __stack_pointer = $3 + 32 | 0;
}

function jspNewObject($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = jspNewPrototype(HEAP32[$2 + 20 >> 2], 0);
 HEAP32[$2 + 12 >> 2] = jsvNewObject();
 label$1: {
  if (!HEAP32[$2 + 12 >> 2]) {
   jsvUnLock(HEAP32[$2 + 16 >> 2]);
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$2 + 24 >> 2]) {
   HEAP8[$2 + 11 | 0] = jshFromDeviceString(HEAP32[$2 + 24 >> 2]);
   if (HEAPU8[$2 + 11 | 0]) {
    HEAP8[HEAP32[$2 + 12 >> 2]] = 68;
    HEAP8[HEAP32[$2 + 12 >> 2] + 1 | 0] = 69;
    HEAP8[HEAP32[$2 + 12 >> 2] + 2 | 0] = 86;
    HEAP8[HEAP32[$2 + 12 >> 2] + 3 | 0] = HEAPU8[$2 + 11 | 0];
   }
  }
  jsvAddNamedChildAndUnLock(HEAP32[$2 + 12 >> 2], jsvSkipNameAndUnLock(HEAP32[$2 + 16 >> 2]), 123007);
  if (HEAP32[$2 + 24 >> 2]) {
   HEAP32[$2 + 4 >> 2] = jsvFindOrAddChildFromString(HEAP32[86750], HEAP32[$2 + 24 >> 2]);
   if (HEAP32[$2 + 4 >> 2]) {
    jsvSetValueOfName(HEAP32[$2 + 4 >> 2], HEAP32[$2 + 12 >> 2]);
   }
   jsvUnLock(HEAP32[$2 + 12 >> 2]);
   if (!HEAP32[$2 + 4 >> 2]) {
    HEAP32[$2 + 28 >> 2] = 0;
    break label$1;
   }
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 4 >> 2];
   break label$1;
  }
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jswrap_array_sort($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 80 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP32[$2 + 68 >> 2] = $1;
 label$1: {
  label$2: {
   if (jsvIsUndefined(HEAP32[$2 + 68 >> 2]) & 1) {
    break label$2;
   }
   if (jsvIsFunction(HEAP32[$2 + 68 >> 2]) & 1) {
    break label$2;
   }
   HEAP32[$2 >> 2] = HEAP32[$2 + 68 >> 2];
   jsExceptionHere(1, 114047, $2);
   HEAP32[$2 + 76 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 4 >> 2] = 0;
  label$3: {
   label$4: {
    if (!(jsvIsArray(HEAP32[$2 + 72 >> 2]) & 1)) {
     if (!(jsvIsObject(HEAP32[$2 + 72 >> 2]) & 1)) {
      break label$4;
     }
    }
    jsvIteratorNew($2 + 8 | 0, HEAP32[$2 + 72 >> 2], 1);
    while (1) {
     if (jsvIteratorHasElement($2 + 8 | 0) & 1) {
      HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
      jsvIteratorNext($2 + 8 | 0);
      continue;
     }
     break;
    }
    jsvIteratorFree($2 + 8 | 0);
    break label$3;
   }
   HEAP32[$2 + 4 >> 2] = jsvGetLength(HEAP32[$2 + 72 >> 2]);
  }
  jsvIteratorNew($2 + 8 | 0, HEAP32[$2 + 72 >> 2], 1);
  _jswrap_array_sort($2 + 8 | 0, HEAP32[$2 + 4 >> 2], HEAP32[$2 + 68 >> 2]);
  jsvIteratorFree($2 + 8 | 0);
  HEAP32[$2 + 76 >> 2] = jsvLockAgain(HEAP32[$2 + 72 >> 2]);
 }
 __stack_pointer = $2 + 80 | 0;
 return HEAP32[$2 + 76 >> 2];
}

function jswrap_flash_read($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 80 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP32[$2 + 68 >> 2] = $1;
 label$1: {
  if (HEAP32[$2 + 72 >> 2] <= 0) {
   HEAP32[$2 + 76 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 64 >> 2] = jsvNewTypedArray(1, HEAP32[$2 + 72 >> 2]);
  if (!HEAP32[$2 + 64 >> 2]) {
   HEAP32[$2 + 76 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 56 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$2 + 64 >> 2], $2 + 60 | 0);
  if (HEAP32[$2 + 56 >> 2]) {
   jsvStringIteratorNew($2 + 16 | 0, HEAP32[$2 + 56 >> 2], HEAP32[$2 + 60 >> 2]);
   while (1) {
    $0 = 0;
    if (HEAP32[$2 + 72 >> 2] > 0) {
     $0 = jsvStringIteratorHasChar_10($2 + 16 | 0);
    }
    if ($0 & 1) {
     HEAP32[$2 + 8 >> 2] = 0;
     jsvStringIteratorGetPtrAndNext($2 + 16 | 0, $2 + 12 | 0, $2 + 8 | 0);
     jshFlashRead(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 68 >> 2], HEAP32[$2 + 8 >> 2]);
     HEAP32[$2 + 68 >> 2] = HEAP32[$2 + 8 >> 2] + HEAP32[$2 + 68 >> 2];
     HEAP32[$2 + 72 >> 2] = HEAP32[$2 + 72 >> 2] - HEAP32[$2 + 8 >> 2];
     continue;
    }
    break;
   }
   jsvStringIteratorFree_12($2 + 16 | 0);
   jsvUnLock(HEAP32[$2 + 56 >> 2]);
  }
  HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 64 >> 2];
 }
 __stack_pointer = $2 + 80 | 0;
 return HEAP32[$2 + 76 >> 2];
}

function jsvArrayPop($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = jsvGetArrayLength(HEAP32[$1 + 12 >> 2]);
 if (HEAP32[$1 + 4 >> 2] > 0) {
  HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] - 1;
  if (jsvGetLastChild(HEAP32[$1 + 12 >> 2]) & 65535) {
   HEAP16[$1 + 2 >> 1] = jsvGetLastChild(HEAP32[$1 + 12 >> 2]);
   HEAP32[$1 + 8 >> 2] = jsvLock(HEAPU16[$1 + 2 >> 1]);
   while (1) {
    $0 = 0;
    if (HEAP32[$1 + 8 >> 2]) {
     $0 = jsvIsInt(HEAP32[$1 + 8 >> 2]) ^ -1;
    }
    if ($0 & 1) {
     HEAP16[$1 + 2 >> 1] = jsvGetPrevSibling(HEAP32[$1 + 8 >> 2]);
     jsvUnLock(HEAP32[$1 + 8 >> 2]);
     label$6: {
      if (HEAPU16[$1 + 2 >> 1]) {
       HEAP32[$1 + 8 >> 2] = jsvLock(HEAPU16[$1 + 2 >> 1]);
       break label$6;
      }
      HEAP32[$1 + 8 >> 2] = 0;
     }
     continue;
    }
    break;
   }
   if (HEAP32[$1 + 8 >> 2]) {
    label$9: {
     if ((jsvGetInteger(HEAP32[$1 + 8 >> 2]) | 0) == HEAP32[$1 + 4 >> 2]) {
      jsvRemoveChild(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 8 >> 2]);
      break label$9;
     }
     jsvUnLock(HEAP32[$1 + 8 >> 2]);
     HEAP32[$1 + 8 >> 2] = 0;
    }
   }
  }
  jsvSetArrayLength(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 4 >> 2], 0);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function OneWireWrite($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP8[$4 + 31 | 0] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 20 >> 2] = $3;
 jshPinSetState(HEAPU8[$4 + 31 | 0], 3);
 HEAP32[$4 + 8 >> 2] = 1;
 HEAP32[$4 + 12 >> 2] = 0;
 while (1) {
  $0 = HEAP32[$4 + 24 >> 2];
  HEAP32[$4 + 24 >> 2] = $0 - 1;
  if (($0 | 0) > 0) {
   $3 = HEAP32[$4 + 16 >> 2];
   $5 = $3;
   $0 = HEAP32[$4 + 20 >> 2];
   $2 = $0;
   $3 = HEAP32[$4 + 12 >> 2];
   $6 = $3;
   $0 = HEAP32[$4 + 8 >> 2];
   $1 = $0;
   $3 = $2;
   $0 = $6;
   $0 = $3 & $0;
   $3 = $1 & $5;
   label$3: {
    if ($3 | $0) {
     jshInterruptOff();
     jshPinSetValue(HEAPU8[$4 + 31 | 0], 0);
     jshDelayMicroseconds(10);
     jshPinSetValue(HEAPU8[$4 + 31 | 0], 1);
     jshInterruptOn();
     jshDelayMicroseconds(55);
     break label$3;
    }
    jshInterruptOff();
    jshPinSetValue(HEAPU8[$4 + 31 | 0], 0);
    jshDelayMicroseconds(65);
    jshPinSetValue(HEAPU8[$4 + 31 | 0], 1);
    jshInterruptOn();
    jshDelayMicroseconds(5);
   }
   $0 = HEAP32[$4 + 12 >> 2];
   $3 = HEAP32[$4 + 8 >> 2];
   $1 = $3;
   $3 = $0 << 1 | $3 >>> 31;
   $0 = $1 << 1;
   HEAP32[$4 + 8 >> 2] = $0;
   HEAP32[$4 + 12 >> 2] = $3;
   continue;
  }
  break;
 }
 __stack_pointer = $4 + 32 | 0;
}

function jspeUnaryExpression() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 label$1: {
  label$2: {
   if (!(HEAP16[HEAP32[44743] + 2 >> 1] == 33 | HEAP16[HEAP32[44743] + 2 >> 1] == 126 | HEAP16[HEAP32[44743] + 2 >> 1] == 45)) {
    if (HEAP16[HEAP32[44743] + 2 >> 1] != 43) {
     break label$2;
    }
   }
   HEAP16[$0 + 10 >> 1] = HEAPU16[HEAP32[44743] + 2 >> 1];
   jslGetNextToken();
   if ((HEAP32[86758] & 63) != 1) {
    HEAP32[$0 + 12 >> 2] = jspeUnaryExpression();
    break label$1;
   }
   HEAP32[$0 + 4 >> 2] = jsvSkipNameAndUnLock(jspeUnaryExpression());
   if (HEAP16[$0 + 10 >> 1] == 33) {
    HEAP32[$0 + 12 >> 2] = jsvNewFromBool((jsvGetBoolAndUnLock(HEAP32[$0 + 4 >> 2]) ^ -1) & 1);
    break label$1;
   }
   if (HEAP16[$0 + 10 >> 1] == 126) {
    HEAP32[$0 + 12 >> 2] = jsvNewFromInteger(jsvGetIntegerAndUnLock(HEAP32[$0 + 4 >> 2]) ^ -1);
    break label$1;
   }
   if (HEAP16[$0 + 10 >> 1] == 45) {
    HEAP32[$0 + 12 >> 2] = jsvNegateAndUnLock(HEAP32[$0 + 4 >> 2]);
    break label$1;
   }
   if (HEAP16[$0 + 10 >> 1] == 43) {
    HEAP32[$0 + 12 >> 2] = jsvAsNumberAndUnLock(HEAP32[$0 + 4 >> 2]);
    break label$1;
   }
   HEAP32[$0 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$0 + 12 >> 2] = jspePostfixExpression();
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function jsfGetBootCodeFromFlash($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 144 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 139 | 0] = $0;
 jsfNameFromString($1 + 104 | 0, 112653);
 HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 128 >> 2];
 $2 = HEAP32[$1 + 124 >> 2];
 $0 = HEAP32[$1 + 120 >> 2];
 HEAP32[$1 + 56 >> 2] = $0;
 HEAP32[$1 + 60 >> 2] = $2;
 $0 = HEAP32[$1 + 116 >> 2];
 $2 = HEAP32[$1 + 112 >> 2];
 HEAP32[$1 + 48 >> 2] = $2;
 HEAP32[$1 + 52 >> 2] = $0;
 $2 = HEAP32[$1 + 108 >> 2];
 $0 = HEAP32[$1 + 104 >> 2];
 HEAP32[$1 + 40 >> 2] = $0;
 HEAP32[$1 + 44 >> 2] = $2;
 HEAP32[$1 + 132 >> 2] = jsfReadFile($1 + 40 | 0, 0, 0);
 label$1: {
  if (HEAP32[$1 + 132 >> 2] ? 1 : HEAP8[$1 + 139 | 0] & 1) {
   HEAP32[$1 + 140 >> 2] = HEAP32[$1 + 132 >> 2];
   break label$1;
  }
  jsfNameFromString($1 + 72 | 0, 120461);
  HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 96 >> 2];
  $0 = HEAP32[$1 + 92 >> 2];
  $2 = HEAP32[$1 + 88 >> 2];
  HEAP32[$1 + 24 >> 2] = $2;
  HEAP32[$1 + 28 >> 2] = $0;
  $2 = HEAP32[$1 + 84 >> 2];
  $0 = HEAP32[$1 + 80 >> 2];
  HEAP32[$1 + 16 >> 2] = $0;
  HEAP32[$1 + 20 >> 2] = $2;
  $0 = HEAP32[$1 + 76 >> 2];
  $2 = HEAP32[$1 + 72 >> 2];
  HEAP32[$1 + 8 >> 2] = $2;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[$1 + 140 >> 2] = jsfReadFile($1 + 8 | 0, 0, 0);
 }
 __stack_pointer = $1 + 144 | 0;
 return HEAP32[$1 + 140 >> 2];
}

function jswrap_stream_read($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  if (!(jsvIsObject(HEAP32[$2 + 24 >> 2]) & 1)) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 16 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 24 >> 2], 119076);
  HEAP32[$2 + 12 >> 2] = 0;
  label$3: {
   if (jsvIsString(HEAP32[$2 + 16 >> 2]) & 1) {
    HEAP32[$2 + 8 >> 2] = jsvGetStringLength(HEAP32[$2 + 16 >> 2]);
    label$5: {
     if (!(HEAPU32[$2 + 20 >> 2] < HEAPU32[$2 + 8 >> 2] & HEAP32[$2 + 20 >> 2] > 0)) {
      HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 16 >> 2];
      HEAP32[$2 + 16 >> 2] = 0;
      jsvObjectRemoveChild(HEAP32[$2 + 24 >> 2], 119076);
      break label$5;
     }
     HEAP32[$2 + 12 >> 2] = jsvNewFromStringVar(HEAP32[$2 + 16 >> 2], 0, HEAP32[$2 + 20 >> 2]);
     HEAP32[$2 + 4 >> 2] = jsvNewFromStringVar(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 20 >> 2], 2147483647);
     jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 119076, HEAP32[$2 + 4 >> 2]);
    }
    break label$3;
   }
   HEAP32[$2 + 12 >> 2] = jsvNewFromEmptyString_13();
  }
  jsvUnLock(HEAP32[$2 + 16 >> 2]);
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jsspiSend8bit($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP8[$4 + 15 | 0] = $0;
 HEAP8[$4 + 14 | 0] = $1;
 HEAP32[$4 + 8 >> 2] = $2;
 HEAP32[$4 + 4 >> 2] = $3;
 $2 = HEAPU8[$4 + 15 | 0];
 if (HEAPU8[$4 + 14 | 0] >>> 6 & 1) {
  $0 = HEAP32[$4 + 4 >> 2];
 } else {
  $0 = HEAP32[$4 + 8 >> 2];
 }
 if (HEAPU8[$4 + 14 | 0] >>> 7 | 0) {
  $1 = HEAP32[$4 + 4 >> 2];
 } else {
  $1 = HEAP32[$4 + 8 >> 2];
 }
 jshSPISend($2, $0 | $1 << 8);
 $2 = HEAPU8[$4 + 15 | 0];
 if (HEAPU8[$4 + 14 | 0] >>> 4 & 1) {
  $0 = HEAP32[$4 + 4 >> 2];
 } else {
  $0 = HEAP32[$4 + 8 >> 2];
 }
 if (HEAPU8[$4 + 14 | 0] >>> 5 & 1) {
  $1 = HEAP32[$4 + 4 >> 2];
 } else {
  $1 = HEAP32[$4 + 8 >> 2];
 }
 jshSPISend($2, $0 | $1 << 8);
 $2 = HEAPU8[$4 + 15 | 0];
 if (HEAPU8[$4 + 14 | 0] >>> 2 & 1) {
  $0 = HEAP32[$4 + 4 >> 2];
 } else {
  $0 = HEAP32[$4 + 8 >> 2];
 }
 if (HEAPU8[$4 + 14 | 0] >>> 3 & 1) {
  $1 = HEAP32[$4 + 4 >> 2];
 } else {
  $1 = HEAP32[$4 + 8 >> 2];
 }
 jshSPISend($2, $0 | $1 << 8);
 $2 = HEAPU8[$4 + 15 | 0];
 if (HEAP8[$4 + 14 | 0] & 1) {
  $0 = HEAP32[$4 + 4 >> 2];
 } else {
  $0 = HEAP32[$4 + 8 >> 2];
 }
 if (HEAPU8[$4 + 14 | 0] >>> 1 & 1) {
  $1 = HEAP32[$4 + 4 >> 2];
 } else {
  $1 = HEAP32[$4 + 8 >> 2];
 }
 jshSPISend($2, $0 | $1 << 8);
 __stack_pointer = $4 + 16 | 0;
}

function _jswrap_graphics_getVectorFontPolys_cb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 28 >> 2];
 label$1: {
  if (!HEAP32[$3 + 16 >> 2]) {
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = 0;
  while (1) {
   if (HEAP32[$3 + 12 >> 2] < HEAP32[$3 + 24 >> 2] << 1) {
    HEAP16[HEAP32[$3 + 20 >> 2] + (HEAP32[$3 + 12 >> 2] << 1) >> 1] = HEAP16[HEAP32[$3 + 20 >> 2] + (HEAP32[$3 + 12 >> 2] << 1) >> 1] + 8 << 16 >> 20;
    HEAP16[HEAP32[$3 + 20 >> 2] + (HEAP32[$3 + 12 >> 2] + 1 << 1) >> 1] = HEAP16[HEAP32[$3 + 20 >> 2] + (HEAP32[$3 + 12 >> 2] + 1 << 1) >> 1] + 8 << 16 >> 20;
    HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 2;
    continue;
   }
   break;
  }
  HEAP32[$3 + 8 >> 2] = jsvNewTypedArray(18, HEAP32[$3 + 24 >> 2] << 1);
  if (!HEAP32[$3 + 8 >> 2]) {
   break label$1;
  }
  HEAP32[$3 + 4 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$3 + 8 >> 2], 0);
  if (HEAP32[$3 + 4 >> 2]) {
   jsvSetString(HEAP32[$3 + 4 >> 2], HEAP32[$3 + 20 >> 2], HEAP32[$3 + 24 >> 2] << 2);
   jsvUnLock(HEAP32[$3 + 4 >> 2]);
  }
  jsvArrayPushAndUnLock(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 8 >> 2]);
 }
 __stack_pointer = $3 + 32 | 0;
}

function tflite__ReverseSortInPlace_28int__2c_20int__2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 while (1) {
  HEAP8[$3 + 19 | 0] = 0;
  HEAP32[$3 + 12 >> 2] = 1;
  while (1) {
   if (HEAP32[$3 + 12 >> 2] < HEAP32[$3 + 20 >> 2]) {
    if (HEAP32[HEAP32[$3 + 28 >> 2] + (HEAP32[$3 + 12 >> 2] - 1 << 2) >> 2] < HEAP32[HEAP32[$3 + 28 >> 2] + (HEAP32[$3 + 12 >> 2] << 2) >> 2]) {
     HEAP32[$3 + 8 >> 2] = HEAP32[HEAP32[$3 + 28 >> 2] + (HEAP32[$3 + 12 >> 2] - 1 << 2) >> 2];
     HEAP32[HEAP32[$3 + 28 >> 2] + (HEAP32[$3 + 12 >> 2] - 1 << 2) >> 2] = HEAP32[HEAP32[$3 + 28 >> 2] + (HEAP32[$3 + 12 >> 2] << 2) >> 2];
     HEAP32[HEAP32[$3 + 28 >> 2] + (HEAP32[$3 + 12 >> 2] << 2) >> 2] = HEAP32[$3 + 8 >> 2];
     HEAP32[$3 + 4 >> 2] = HEAP32[HEAP32[$3 + 24 >> 2] + (HEAP32[$3 + 12 >> 2] - 1 << 2) >> 2];
     HEAP32[HEAP32[$3 + 24 >> 2] + (HEAP32[$3 + 12 >> 2] - 1 << 2) >> 2] = HEAP32[HEAP32[$3 + 24 >> 2] + (HEAP32[$3 + 12 >> 2] << 2) >> 2];
     HEAP32[HEAP32[$3 + 24 >> 2] + (HEAP32[$3 + 12 >> 2] << 2) >> 2] = HEAP32[$3 + 4 >> 2];
     HEAP8[$3 + 19 | 0] = 1;
    }
    HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP8[$3 + 19 | 0] & 1) {
   continue;
  }
  break;
 }
}

function jsvGetIndexFromLineAndCol($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 80 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 72 >> 2] = $0;
 HEAP32[$3 + 68 >> 2] = $1;
 HEAP32[$3 + 64 >> 2] = $2;
 HEAP32[$3 + 60 >> 2] = 1;
 HEAP32[$3 + 56 >> 2] = 1;
 HEAP32[$3 + 52 >> 2] = 0;
 jsvStringIteratorNew($3 + 16 | 0, HEAP32[$3 + 72 >> 2], 0);
 label$1: {
  while (1) {
   if (jsvStringIteratorHasChar_1($3 + 16 | 0) & 1) {
    HEAP8[$3 + 15 | 0] = jsvStringIteratorGetCharAndNext($3 + 16 | 0);
    if (!(!(HEAP32[$3 + 56 >> 2] == HEAP32[$3 + 68 >> 2] & HEAPU32[$3 + 60 >> 2] >= HEAPU32[$3 + 64 >> 2]) & HEAPU32[$3 + 56 >> 2] <= HEAPU32[$3 + 68 >> 2])) {
     jsvStringIteratorFree_1($3 + 16 | 0);
     if (HEAPU32[$3 + 56 >> 2] > HEAPU32[$3 + 68 >> 2]) {
      $0 = HEAP32[$3 + 52 >> 2] - 1 | 0;
     } else {
      $0 = HEAP32[$3 + 52 >> 2];
     }
     HEAP32[$3 + 76 >> 2] = $0;
     break label$1;
    }
    HEAP32[$3 + 60 >> 2] = HEAP32[$3 + 60 >> 2] + 1;
    if (HEAP8[$3 + 15 | 0] == 10) {
     HEAP32[$3 + 60 >> 2] = 1;
     HEAP32[$3 + 56 >> 2] = HEAP32[$3 + 56 >> 2] + 1;
    }
    HEAP32[$3 + 52 >> 2] = HEAP32[$3 + 52 >> 2] + 1;
    continue;
   }
   break;
  }
  jsvStringIteratorFree_1($3 + 16 | 0);
  HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 52 >> 2];
 }
 __stack_pointer = $3 + 80 | 0;
 return HEAP32[$3 + 76 >> 2];
}

function jswrap_io_getPinMode($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 11 | 0] = $0;
 label$1: {
  if (!(jshIsPinValid(HEAPU8[$1 + 11 | 0]) & 1)) {
   jsExceptionHere(1, 117533, 0);
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP8[$1 + 10 | 0] = jshPinGetState(HEAPU8[$1 + 11 | 0]) & 15;
  HEAP32[$1 + 4 >> 2] = 0;
  label$3: {
   label$4: {
    switch (HEAPU8[$1 + 10 | 0] - 1 | 0) {
    case 6:
     HEAP32[$1 + 4 >> 2] = 118691;
     break label$3;

    case 3:
     HEAP32[$1 + 4 >> 2] = 112542;
     break label$3;

    case 4:
     HEAP32[$1 + 4 >> 2] = 116836;
     break label$3;

    case 5:
     HEAP32[$1 + 4 >> 2] = 117092;
     break label$3;

    case 0:
     HEAP32[$1 + 4 >> 2] = 112535;
     break label$3;

    case 1:
     HEAP32[$1 + 4 >> 2] = 117554;
     break label$3;

    case 2:
     HEAP32[$1 + 4 >> 2] = 116849;
     break label$3;

    case 7:
     HEAP32[$1 + 4 >> 2] = 112532;
     break label$3;

    case 8:
     break label$4;

    default:
     break label$3;
    }
   }
   HEAP32[$1 + 4 >> 2] = 117551;
  }
  if (HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = jsvNewFromString(HEAP32[$1 + 4 >> 2]);
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jstUtilTimerSetupBuffer($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = _jsvGetAddressOf(HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8);
 $2 = HEAP32[$1 + 12 >> 2];
 HEAP8[$2 + 8 | 0] = $0;
 HEAP8[$2 + 9 | 0] = $0 >>> 8;
 HEAP8[$2 + 10 | 0] = $0 >>> 16;
 HEAP8[$2 + 11 | 0] = $0 >>> 24;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1: {
  if (jsvIsFlatString(HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 1) {
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP8[$0 + 18 | 0] = 14;
   HEAP8[$0 + 19 | 0] = 0;
   $0 = HEAP32[$1 + 12 >> 2];
   $2 = jsvGetCharactersInVar(HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24));
   $0 = HEAP32[$1 + 12 >> 2];
   $2 = $2 + 14 | 0;
   HEAP8[$0 + 20 | 0] = $2;
   HEAP8[$0 + 21 | 0] = $2 >>> 8;
   break label$1;
  }
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP8[$0 + 18 | 0] = 0;
  HEAP8[$0 + 19 | 0] = 0;
  $0 = HEAP32[$1 + 12 >> 2];
  $0 = jsvGetCharactersInVar(HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24));
  $2 = HEAP32[$1 + 12 >> 2];
  HEAP8[$2 + 20 | 0] = $0;
  HEAP8[$2 + 21 | 0] = $0 >>> 8;
 }
 __stack_pointer = $1 + 16 | 0;
}

function tflite__MicroAllocator__AllocatePersistentTfLiteTensor_28tflite__Model_20const__2c_20TfLiteEvalTensor__2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 $0 = HEAP32[$4 + 24 >> 2];
 HEAP32[$4 + 8 >> 2] = tflite__MicroAllocator__GetSubGraphFromModel_28tflite__Model_20const__29($0, HEAP32[$4 + 20 >> 2]);
 label$1: {
  if (!HEAP32[$4 + 8 >> 2]) {
   break label$1;
  }
 }
 HEAP32[$4 + 4 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2], HEAP32[$4 + 12 >> 2]);
 label$2: {
  if (FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, HEAP32[$4 + 20 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 + 12 >> 2], 0) | 0) {
   tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$0 + 8 >> 2], 143870, 0);
   HEAP32[$4 + 28 >> 2] = 0;
   break label$2;
  }
  if (HEAP32[$4 + 16 >> 2]) {
   HEAP32[HEAP32[$4 + 4 >> 2] + 16 >> 2] = HEAP32[HEAP32[$4 + 16 >> 2] + Math_imul(HEAP32[$4 + 12 >> 2], 12) >> 2];
  }
  HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 4 >> 2];
 }
 __stack_pointer = $4 + 32 | 0;
 return HEAP32[$4 + 28 >> 2];
}

function jswGetBasicObjectPrototypeName($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!strcmp(HEAP32[$1 + 8 >> 2], 111734)) {
   HEAP32[$1 + 12 >> 2] = 112158;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 111716)) {
   HEAP32[$1 + 12 >> 2] = 112158;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 111745)) {
   HEAP32[$1 + 12 >> 2] = 112158;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 111755)) {
   HEAP32[$1 + 12 >> 2] = 112158;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 111767)) {
   HEAP32[$1 + 12 >> 2] = 112158;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 111791)) {
   HEAP32[$1 + 12 >> 2] = 112158;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 111803)) {
   HEAP32[$1 + 12 >> 2] = 112158;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 111815)) {
   HEAP32[$1 + 12 >> 2] = 112158;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 111826)) {
   HEAP32[$1 + 12 >> 2] = 112158;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 111778)) {
   HEAP32[$1 + 12 >> 2] = 112158;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = strcmp(HEAP32[$1 + 8 >> 2], 113254) ? 113254 : 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvGetStringLength($0) {
 var $1 = 0;
 $1 = __stack_pointer + -64 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 56 >> 2] = $0;
 HEAP32[$1 + 52 >> 2] = 0;
 label$1: {
  if (jsvIsUTF8String(HEAP32[$1 + 56 >> 2]) & 1) {
   jsvStringIteratorNew($1 + 16 | 0, HEAP32[$1 + 56 >> 2], 0);
   while (1) {
    if (jsvStringIteratorHasChar_1($1 + 16 | 0) & 1) {
     jsvStringIteratorNextUTF8($1 + 16 | 0);
     HEAP32[$1 + 52 >> 2] = HEAP32[$1 + 52 >> 2] + 1;
     continue;
    }
    break;
   }
   jsvStringIteratorFree_1($1 + 16 | 0);
   HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 52 >> 2];
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 56 >> 2];
  HEAP32[$1 + 8 >> 2] = 0;
  if (!(jsvHasCharacterData(HEAP32[$1 + 56 >> 2]) & 1)) {
   HEAP32[$1 + 60 >> 2] = 0;
   break label$1;
  }
  while (1) {
   if (HEAP32[$1 + 12 >> 2]) {
    HEAP16[$1 + 6 >> 1] = jsvGetLastChild(HEAP32[$1 + 12 >> 2]);
    HEAP32[$1 + 52 >> 2] = jsvGetCharactersInVar(HEAP32[$1 + 12 >> 2]) + HEAP32[$1 + 52 >> 2];
    jsvUnLock(HEAP32[$1 + 8 >> 2]);
    $0 = jsvLockSafe(HEAPU16[$1 + 6 >> 1]);
    HEAP32[$1 + 8 >> 2] = $0;
    HEAP32[$1 + 12 >> 2] = $0;
    continue;
   }
   break;
  }
  jsvUnLock(HEAP32[$1 + 8 >> 2]);
  HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 52 >> 2];
 }
 __stack_pointer = $1 - -64 | 0;
 return HEAP32[$1 + 60 >> 2];
}

function getTimeFromMilliSeconds($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAPF64[$3 + 24 >> 3] = $1;
 HEAP8[$3 + 23 | 0] = $2;
 if (HEAP8[$3 + 23 | 0] & 1) {
  $2 = 0;
 } else {
  $2 = jsdGetEffectiveTimeZone(HEAPF64[$3 + 24 >> 3], 0, $0 + 24 | 0);
 }
 HEAP32[$0 + 20 >> 2] = $2;
 HEAPF64[$3 + 24 >> 3] = HEAPF64[$3 + 24 >> 3] + +(Math_imul(HEAP32[$0 + 20 >> 2], 6e4) | 0);
 $1 = HEAPF64[$3 + 24 >> 3] / 864e5;
 label$3: {
  if (Math_abs($1) < 2147483648) {
   $2 = ~~$1;
   break label$3;
  }
  $2 = -2147483648;
 }
 HEAP32[$0 >> 2] = $2;
 if (HEAP8[$3 + 23 | 0] & 1) {
  HEAP8[$0 + 24 | 0] = 0;
 }
 $1 = +HEAP32[$0 >> 2] * -864e5 + HEAPF64[$3 + 24 >> 3];
 label$6: {
  if (Math_abs($1) < 2147483648) {
   $2 = ~~$1;
   break label$6;
  }
  $2 = -2147483648;
 }
 HEAP32[$3 + 16 >> 2] = $2;
 if (HEAP32[$3 + 16 >> 2] < 0) {
  HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] + 864e5;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] - 1;
 }
 HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 16 >> 2] / 1e3;
 HEAP32[$0 + 4 >> 2] = HEAP32[$3 + 16 >> 2] % 1e3;
 HEAP32[$0 + 16 >> 2] = HEAP32[$3 + 12 >> 2] / 3600;
 HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] % 3600;
 HEAP32[$0 + 12 >> 2] = HEAP32[$3 + 12 >> 2] / 60;
 HEAP32[$0 + 8 >> 2] = HEAP32[$3 + 12 >> 2] % 60;
 __stack_pointer = $3 + 32 | 0;
}

function jsvGetCommonCharacters($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 112 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 104 >> 2] = $0;
 HEAP32[$2 + 100 >> 2] = $1;
 HEAP32[$2 + 96 >> 2] = jsvNewFromEmptyString_1();
 label$1: {
  if (!HEAP32[$2 + 96 >> 2]) {
   HEAP32[$2 + 108 >> 2] = 0;
   break label$1;
  }
  jsvStringIteratorNewUTF8($2 + 56 | 0, HEAP32[$2 + 104 >> 2], 0);
  jsvStringIteratorNewUTF8($2 + 16 | 0, HEAP32[$2 + 100 >> 2], 0);
  HEAP32[$2 + 12 >> 2] = jsvStringIteratorGetUTF8CharAndNext($2 + 56 | 0);
  HEAP32[$2 + 8 >> 2] = jsvStringIteratorGetUTF8CharAndNext($2 + 16 | 0);
  while (1) {
   $0 = 0;
   label$4: {
    if (HEAP32[$2 + 12 >> 2] <= 0) {
     break label$4;
    }
    $0 = 0;
    if (HEAP32[$2 + 8 >> 2] <= 0) {
     break label$4;
    }
    $0 = HEAP32[$2 + 12 >> 2] == HEAP32[$2 + 8 >> 2];
   }
   if ($0) {
    jsvAppendCharacter(HEAP32[$2 + 96 >> 2], HEAP32[$2 + 12 >> 2] << 24 >> 24);
    HEAP32[$2 + 12 >> 2] = jsvStringIteratorGetUTF8CharAndNext($2 + 56 | 0);
    HEAP32[$2 + 8 >> 2] = jsvStringIteratorGetUTF8CharAndNext($2 + 16 | 0);
    continue;
   }
   break;
  }
  jsvStringIteratorFree_1($2 + 56 | 0);
  jsvStringIteratorFree_1($2 + 16 | 0);
  HEAP32[$2 + 108 >> 2] = HEAP32[$2 + 96 >> 2];
 }
 __stack_pointer = $2 + 112 | 0;
 return HEAP32[$2 + 108 >> 2];
}

function tflite__reference_ops__DepthwiseConv_28tflite__DepthwiseParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0;
 $9 = __stack_pointer - 48 | 0;
 __stack_pointer = $9;
 HEAP32[$9 + 44 >> 2] = $0;
 HEAP32[$9 + 40 >> 2] = $1;
 HEAP32[$9 + 36 >> 2] = $2;
 HEAP32[$9 + 32 >> 2] = $3;
 HEAP32[$9 + 28 >> 2] = $4;
 HEAP32[$9 + 24 >> 2] = $5;
 HEAP32[$9 + 20 >> 2] = $6;
 HEAP32[$9 + 16 >> 2] = $7;
 HEAP32[$9 + 12 >> 2] = $8;
 tflite__reference_ops__depthwise_conv__DepthwiseConvBasicKernel__28tflite__DepthwiseConvOutputRounding_291___Run_28tflite__DepthwiseParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20int_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char__29(HEAP32[$9 + 44 >> 2], HEAP32[$9 + 40 >> 2], HEAP32[$9 + 36 >> 2], HEAP32[$9 + 32 >> 2], HEAP32[$9 + 28 >> 2], HEAP32[$9 + 24 >> 2], HEAP32[$9 + 20 >> 2], HEAP32[$9 + 16 >> 2], HEAP32[$9 + 12 >> 2]);
 __stack_pointer = $9 + 48 | 0;
}

function jsvArrayBufferIteratorSetValue($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP8[$3 + 23 | 0] = $2;
 label$1: {
  if (!HEAPU8[HEAP32[$3 + 28 >> 2] + 36 | 0]) {
   break label$1;
  }
  HEAP32[$3 >> 2] = HEAPU8[HEAP32[$3 + 28 >> 2] + 36 | 0] & 15;
  label$2: {
   if (HEAPU8[HEAP32[$3 + 28 >> 2] + 36 | 0] & 32) {
    jsvArrayBufferIteratorFloatToData($3 + 8 | 0, HEAP32[$3 >> 2], HEAPU8[HEAP32[$3 + 28 >> 2] + 36 | 0], jsvGetFloat(HEAP32[$3 + 24 >> 2]));
    break label$2;
   }
   jsvArrayBufferIteratorIntToData($3 + 8 | 0, HEAP32[$3 >> 2], HEAPU8[HEAP32[$3 + 28 >> 2] + 36 | 0], jsvGetInteger(HEAP32[$3 + 24 >> 2]));
  }
  if (HEAP8[$3 + 23 | 0] & 1) {
   reverseBytes($3 + 8 | 0, HEAP32[$3 >> 2]);
  }
  HEAP32[$3 + 4 >> 2] = 0;
  while (1) {
   if (HEAP32[$3 + 4 >> 2] < HEAP32[$3 >> 2]) {
    jsvStringIteratorSetChar(HEAP32[$3 + 28 >> 2], HEAP8[HEAP32[$3 + 4 >> 2] + ($3 + 8 | 0) | 0]);
    if (HEAP32[$3 >> 2] != 1) {
     jsvStringIteratorNext(HEAP32[$3 + 28 >> 2]);
    }
    HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP32[$3 >> 2] == 1) {
   break label$1;
  }
  HEAP8[HEAP32[$3 + 28 >> 2] + 52 | 0] = 1;
 }
 __stack_pointer = $3 + 32 | 0;
}

function std____2__vector_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29__2c_20std____2__allocator_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29_____vector_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 std____2____compressed_pair_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29___2c_20std____2__allocator_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29_______compressed_pair_std__nullptr_t_2c_20std____2____default_init_tag__28std__nullptr_t___2c_20std____2____default_init_tag___29($0 + 8 | 0, $1 + 8 | 0, $1);
 void_20std____2____debug_db_insert_c_std____2__vector_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29__2c_20std____2__allocator_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29_____28std____2__vector_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29__2c_20std____2__allocator_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29_____29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_object_getOwnPropertyDescriptors($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 40 >> 2] = $0;
 label$1: {
  if (!(jsvHasChildren(HEAP32[$1 + 40 >> 2]) & 1)) {
   HEAP32[$1 >> 2] = HEAP32[$1 + 40 >> 2];
   jsExceptionHere(3, 113777, $1);
   HEAP32[$1 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 36 >> 2] = jsvNewObject();
  if (!HEAP32[$1 + 36 >> 2]) {
   HEAP32[$1 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 32 >> 2] = jswrap_object_keys_or_property_names(HEAP32[$1 + 40 >> 2], 1);
  jsvObjectIteratorNew($1 + 24 | 0, HEAP32[$1 + 32 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_9($1 + 24 | 0) & 1) {
    HEAP32[$1 + 20 >> 2] = jsvObjectIteratorGetValue_9($1 + 24 | 0);
    HEAP32[$1 + 16 >> 2] = jswrap_object_getOwnPropertyDescriptor(HEAP32[$1 + 40 >> 2], HEAP32[$1 + 20 >> 2]);
    jsvObjectSetChildVar(HEAP32[$1 + 36 >> 2], HEAP32[$1 + 20 >> 2], HEAP32[$1 + 16 >> 2]);
    jsvUnLock2(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 16 >> 2]);
    jsvObjectIteratorNext($1 + 24 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_9($1 + 24 | 0);
  jsvUnLock(HEAP32[$1 + 32 >> 2]);
  HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 36 >> 2];
 }
 __stack_pointer = $1 + 48 | 0;
 return HEAP32[$1 + 44 >> 2];
}

function jsiSetConsoleDevice($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 47 | 0] = $0;
 HEAP8[$2 + 46 | 0] = $1;
 label$1: {
  if (HEAP8[$2 + 46 | 0] & 1) {
   HEAP16[173534] = HEAPU16[173534] | 256;
   break label$1;
  }
  HEAP16[173534] = HEAPU16[173534] & -257;
 }
 label$3: {
  if (HEAPU8[$2 + 47 | 0] == HEAPU8[178544]) {
   break label$3;
  }
  label$4: {
   if (HEAPU8[$2 + 47 | 0] < 22 | HEAPU8[$2 + 47 | 0] > 22) {
    break label$4;
   }
   if (jshIsDeviceInitialised(HEAPU8[$2 + 47 | 0]) & 1) {
    break label$4;
   }
   jshUSARTInitInfo($2 + 32 | 0);
   jshUSARTSetup(HEAPU8[$2 + 47 | 0], $2 + 32 | 0);
  }
  HEAP8[$2 + 31 | 0] = jsiEcho() & 1;
  if (HEAPU8[178544] == 19) {
   HEAP8[$2 + 31 | 0] = 0;
   jshTransmitMove(19, HEAPU8[$2 + 47 | 0]);
   jshUSARTKick(HEAPU8[$2 + 47 | 0]);
  }
  if (HEAP8[$2 + 31 | 0] & 1) {
   jsiConsoleRemoveInputLine();
   HEAP32[$2 + 16 >> 2] = jshGetDeviceString(HEAPU8[$2 + 47 | 0]);
   jsiConsolePrintf(145325, $2 + 16 | 0);
  }
  HEAP8[$2 + 30 | 0] = HEAPU8[178544];
  HEAP8[178544] = HEAPU8[$2 + 47 | 0];
  if (!(HEAP8[$2 + 31 | 0] & 1)) {
   break label$3;
  }
  HEAP32[$2 >> 2] = jshGetDeviceString(HEAPU8[$2 + 30 | 0]);
  jsiConsolePrintf(145332, $2);
 }
 __stack_pointer = $2 + 48 | 0;
}

function graphicsVectorCharWidth($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP8[$2 + 39 | 0] = $1;
 HEAP32[$2 + 28 >> 2] = vfGetCharPtr(HEAP8[$2 + 39 | 0], $2 + 32 | 0);
 label$1: {
  if (!HEAP32[$2 + 28 >> 2]) {
   HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 40 >> 2] >>> 1;
   break label$1;
  }
  HEAP32[$2 + 24 >> 2] = 0;
  HEAP32[$2 + 20 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 + 20 >> 2] < HEAP32[$2 + 32 >> 2]) {
    HEAP32[$2 + 12 >> 2] = vfGetPolyPtr(HEAPU8[HEAP32[$2 + 28 >> 2] + HEAP32[$2 + 20 >> 2] | 0], $2 + 16 | 0);
    HEAP32[$2 + 8 >> 2] = 0;
    while (1) {
     if (HEAP32[$2 + 8 >> 2] < HEAP32[$2 + 16 >> 2]) {
      HEAP8[$2 + 7 | 0] = HEAPU8[HEAP32[$2 + 12 >> 2] + HEAP32[$2 + 8 >> 2] | 0];
      HEAP32[$2 >> 2] = HEAPU8[$2 + 7 | 0] % 13;
      if (HEAP32[$2 >> 2] > HEAP32[$2 + 24 >> 2]) {
       HEAP32[$2 + 24 >> 2] = HEAP32[$2 >> 2];
      }
      HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] + 1;
      continue;
     }
     break;
    }
    HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 20 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$2 + 44 >> 2] = (Math_imul(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 24 >> 2] + 2 | 0) << 4 >>> 4 | 0) + 7 >>> 4;
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function jswrap_graphics_drawLineAA($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $5 = __stack_pointer - 112 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 104 >> 2] = $0;
 HEAPF64[$5 + 96 >> 3] = $1;
 HEAPF64[$5 + 88 >> 3] = $2;
 HEAPF64[$5 + 80 >> 3] = $3;
 HEAPF64[$5 + 72 >> 3] = $4;
 label$1: {
  if (!(graphicsGetFromVar($5, HEAP32[$5 + 104 >> 2]) & 1)) {
   HEAP32[$5 + 108 >> 2] = 0;
   break label$1;
  }
  $1 = HEAPF64[$5 + 96 >> 3] * 16 + .5;
  label$3: {
   if (Math_abs($1) < 2147483648) {
    $6 = ~~$1;
    break label$3;
   }
   $6 = -2147483648;
  }
  $1 = HEAPF64[$5 + 88 >> 3] * 16 + .5;
  label$5: {
   if (Math_abs($1) < 2147483648) {
    $7 = ~~$1;
    break label$5;
   }
   $7 = -2147483648;
  }
  $1 = HEAPF64[$5 + 80 >> 3] * 16 + .5;
  label$7: {
   if (Math_abs($1) < 2147483648) {
    $0 = ~~$1;
    break label$7;
   }
   $0 = -2147483648;
  }
  $1 = HEAPF64[$5 + 72 >> 3] * 16 + .5;
  label$9: {
   if (Math_abs($1) < 2147483648) {
    $8 = ~~$1;
    break label$9;
   }
   $8 = -2147483648;
  }
  graphicsDrawLineAA($5, $6, $7, $0, $8);
  graphicsSetVar($5);
  HEAP32[$5 + 108 >> 2] = jsvLockAgain(HEAP32[$5 + 104 >> 2]);
 }
 __stack_pointer = $5 + 112 | 0;
 return HEAP32[$5 + 108 >> 2];
}

function tflite__MicroAllocator__AllocateTempTfLiteTensor_28tflite__Model_20const__2c_20TfLiteEvalTensor__2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 $0 = HEAP32[$4 + 24 >> 2];
 HEAP32[$4 + 8 >> 2] = tflite__MicroAllocator__GetSubGraphFromModel_28tflite__Model_20const__29($0, HEAP32[$4 + 20 >> 2]);
 label$1: {
  if (!HEAP32[$4 + 8 >> 2]) {
   break label$1;
  }
 }
 $1 = HEAP32[$0 + 4 >> 2];
 HEAP32[$4 + 4 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1, 40, 4);
 label$2: {
  if (FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, HEAP32[$4 + 20 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 + 12 >> 2], 1) | 0) {
   tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$0 + 8 >> 2], 143944, 0);
   HEAP32[$4 + 28 >> 2] = 0;
   break label$2;
  }
  if (HEAP32[$4 + 16 >> 2]) {
   HEAP32[HEAP32[$4 + 4 >> 2] + 16 >> 2] = HEAP32[HEAP32[$4 + 16 >> 2] + Math_imul(HEAP32[$4 + 12 >> 2], 12) >> 2];
  }
  HEAP32[$4 + 28 >> 2] = HEAP32[$4 + 4 >> 2];
 }
 __stack_pointer = $4 + 32 | 0;
 return HEAP32[$4 + 28 >> 2];
}

function jsiCountBracketsInInput() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 144 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 140 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = jslSetLex($0 + 16 | 0);
 jslInit(HEAP32[86768]);
 while (1) {
  label$2: {
   $1 = 0;
   label$3: {
    if (!HEAP16[$0 + 18 >> 1]) {
     break label$3;
    }
    $1 = 0;
    if (HEAP16[$0 + 18 >> 1] == 137) {
     break label$3;
    }
    $1 = 0;
    if (HEAP16[$0 + 18 >> 1] == 132) {
     break label$3;
    }
    $1 = HEAP16[$0 + 18 >> 1] != 134;
   }
   if (!$1) {
    break label$2;
   }
   if (!(!(HEAP16[$0 + 18 >> 1] == 123 | HEAP16[$0 + 18 >> 1] == 91) & HEAP16[$0 + 18 >> 1] != 40)) {
    HEAP32[$0 + 140 >> 2] = HEAP32[$0 + 140 >> 2] + 1;
   }
   if (!(!(HEAP16[$0 + 18 >> 1] == 125 | HEAP16[$0 + 18 >> 1] == 93) & HEAP16[$0 + 18 >> 1] != 41)) {
    HEAP32[$0 + 140 >> 2] = HEAP32[$0 + 140 >> 2] - 1;
   }
   if (HEAP32[$0 + 140 >> 2] < 0) {
    break label$2;
   }
   jslGetNextToken();
   continue;
  }
  break;
 }
 if (HEAP16[$0 + 18 >> 1] == 132) {
  HEAP32[$0 + 140 >> 2] = 0;
 }
 if (!(HEAP16[$0 + 18 >> 1] != 137 & HEAP16[$0 + 18 >> 1] != 134)) {
  HEAP32[$0 + 140 >> 2] = 1e3;
 }
 jslKill();
 jslSetLex(HEAP32[$0 + 12 >> 2]);
 __stack_pointer = $0 + 144 | 0;
 return HEAP32[$0 + 140 >> 2];
}

function jswrap_espruino_setConsole($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 112 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 108 >> 2] = $0;
 HEAP32[$2 + 104 >> 2] = $1;
 HEAP8[$2 + 103 | 0] = 0;
 HEAP32[$2 + 88 >> 2] = 120477;
 HEAP16[$2 + 92 >> 1] = 12;
 HEAP32[$2 + 96 >> 2] = $2 + 103;
 label$1: {
  if (!(jsvReadConfigObject(HEAP32[$2 + 104 >> 2], $2 + 88 | 0, 1) & 1)) {
   break label$1;
  }
  HEAP8[$2 + 87 | 0] = 0;
  label$2: {
   if (jsvIsObject(HEAP32[$2 + 108 >> 2]) & 1) {
    HEAP8[$2 + 87 | 0] = jsiGetDeviceFromClass(HEAP32[$2 + 108 >> 2]);
    break label$2;
   }
   if (jsvIsString(HEAP32[$2 + 108 >> 2]) & 1) {
    jsvGetString(HEAP32[$2 + 108 >> 2], $2 + 16 | 0, 64);
    HEAP8[$2 + 87 | 0] = jshFromDeviceString($2 + 16 | 0);
   }
  }
  label$5: {
   if (HEAPU8[$2 + 87 | 0]) {
    break label$5;
   }
   if (jsvIsNull(HEAP32[$2 + 108 >> 2]) & 1) {
    break label$5;
   }
   HEAP32[$2 >> 2] = HEAPU8[$2 + 87 | 0];
   jsExceptionHere(1, 116710, $2);
   break label$1;
  }
  if (!(!HEAPU8[$2 + 87 | 0] | HEAPU8[$2 + 87 | 0] <= 22 & HEAPU8[$2 + 87 | 0] >= 17)) {
   jsExceptionHere(1, 115608, 0);
   break label$1;
  }
  jsiSetConsoleDevice(HEAPU8[$2 + 87 | 0], HEAP8[$2 + 103 | 0] & 1);
 }
 __stack_pointer = $2 + 112 | 0;
}

function tflite__MicroAllocator__FinishModelAllocation_28tflite__Model_20const__2c_20TfLiteEvalTensor__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 $0 = HEAP32[$3 + 24 >> 2];
 label$1: {
  if (!(HEAP8[$0 + 12 | 0] & 1)) {
   tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$0 + 8 >> 2], 117878, 0);
   HEAP32[$3 + 28 >> 2] = 1;
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = tflite__MicroAllocator__GetSubGraphFromModel_28tflite__Model_20const__29($0, HEAP32[$3 + 20 >> 2]);
  label$3: {
   if (!HEAP32[$3 + 12 >> 2]) {
    break label$3;
   }
  }
  HEAP32[$3 + 8 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, HEAP32[$3 + 20 >> 2], HEAP32[$3 + 12 >> 2], HEAP32[$3 + 16 >> 2]);
  if (HEAP32[$3 + 8 >> 2]) {
   HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 8 >> 2];
   break label$1;
  }
  HEAP32[$3 + 4 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 16 >> 2]);
  if (HEAP32[$3 + 4 >> 2]) {
   HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 4 >> 2];
   break label$1;
  }
  HEAP8[$0 + 12 | 0] = 0;
  HEAP32[$3 + 28 >> 2] = 0;
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function jsvMathsOpTypeEqual($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP8[$2 + 7 | 0] = (!HEAP32[$2 + 12 >> 2] | 0) == (!HEAP32[$2 + 8 >> 2] | 0);
 if (!(!HEAP32[$2 + 12 >> 2] | !HEAP32[$2 + 8 >> 2])) {
  label$2: {
   label$3: {
    if (!(jsvIsInt(HEAP32[$2 + 12 >> 2]) & 1)) {
     if (!(jsvIsFloat(HEAP32[$2 + 12 >> 2]) & 1)) {
      break label$3;
     }
    }
    $0 = 1;
    if (jsvIsInt(HEAP32[$2 + 8 >> 2]) & 1) {
     break label$2;
    }
    $0 = 1;
    if (jsvIsFloat(HEAP32[$2 + 8 >> 2]) & 1) {
     break label$2;
    }
   }
   if (jsvIsString(HEAP32[$2 + 12 >> 2]) & 1) {
    $0 = 1;
    if (jsvIsString(HEAP32[$2 + 8 >> 2]) & 1) {
     break label$2;
    }
   }
   $0 = HEAP32[$2 + 12 >> 2];
   $1 = HEAP32[$2 + 8 >> 2];
   $0 = ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63) == ((HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & 63);
  }
  HEAP8[$2 + 7 | 0] = $0;
 }
 if (HEAP8[$2 + 7 | 0] & 1) {
  HEAP32[$2 >> 2] = jsvMathsOp(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 138);
  if (!(jsvGetBool(HEAP32[$2 >> 2]) & 1)) {
   HEAP8[$2 + 7 | 0] = 0;
  }
  jsvUnLock(HEAP32[$2 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP8[$2 + 7 | 0] & 1;
}

function jsvGetCharactersInVar($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 + 4 >> 2] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
 label$1: {
  if (HEAP32[$1 + 4 >> 2] == 38) {
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP32[$1 + 12 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
   break label$1;
  }
  if (!(HEAP32[$1 + 4 >> 2] != 39 & HEAP32[$1 + 4 >> 2] != 40)) {
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP32[$1 + 12 >> 2] = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
   break label$1;
  }
  if (HEAPU32[$1 + 4 >> 2] < 18) {
   HEAP32[$1 >> 2] = HEAP32[$1 + 4 >> 2];
   jsiConsolePrintf(145765, $1);
  }
  if (HEAPU32[$1 + 4 >> 2] <= 27) {
   if (HEAPU32[$1 + 4 >> 2] <= 22) {
    HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2] - 18;
    break label$1;
   }
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2] - 23;
   break label$1;
  }
  if (HEAPU32[$1 + 4 >> 2] <= 37) {
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2] - 28;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2] - 41;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsiTabComplete_printCommon($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 28 >> 2];
 label$1: {
  if (jsvGetStringLength(HEAP32[$2 + 24 >> 2]) >>> 0 <= HEAPU32[HEAP32[$2 + 20 >> 2] >> 2]) {
   break label$1;
  }
  if (jsvCompareString(HEAP32[HEAP32[$2 + 20 >> 2] + 4 >> 2], HEAP32[$2 + 24 >> 2], 0, 0, 1)) {
   break label$1;
  }
  label$2: {
   if (!HEAP32[HEAP32[$2 + 20 >> 2] + 16 >> 2]) {
    HEAP32[$2 >> 2] = HEAP32[$2 + 24 >> 2];
    jsiConsolePrintf(112309, $2);
    $0 = jsvGetStringLength(HEAP32[$2 + 24 >> 2]);
    HEAP32[HEAP32[$2 + 20 >> 2] + 16 >> 2] = $0;
    break label$2;
   }
   if (HEAPU32[HEAP32[$2 + 20 >> 2] + 16 >> 2] >= 20) {
    HEAP32[HEAP32[$2 + 20 >> 2] + 16 >> 2] = 19;
   }
   while (1) {
    if (HEAPU32[HEAP32[$2 + 20 >> 2] + 16 >> 2] < 20) {
     jsiConsolePrintChar(32);
     $0 = HEAP32[$2 + 20 >> 2];
     HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 24 >> 2];
   jsiConsolePrintf(144533, $2 + 16 | 0);
   HEAP32[HEAP32[$2 + 20 >> 2] + 16 >> 2] = 0;
  }
 }
 __stack_pointer = $2 + 32 | 0;
}

function jsiExtractIOEventData($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 60 >> 2] = $0;
 HEAP32[$2 + 56 >> 2] = $1;
 HEAP32[HEAP32[$2 + 56 >> 2] >> 2] = 0;
 HEAP32[$2 + 52 >> 2] = jsvNewFromEmptyString_5();
 if (HEAP32[$2 + 52 >> 2]) {
  jsvStringIteratorNew($2 + 16 | 0, HEAP32[$2 + 52 >> 2], 0);
  HEAP32[$2 + 8 >> 2] = ((HEAPU8[HEAP32[$2 + 60 >> 2]] & 96) >>> 5 | 0) + 1;
  while (1) {
   if (HEAP32[$2 + 8 >> 2]) {
    HEAP32[$2 + 12 >> 2] = 0;
    while (1) {
     if (HEAP32[$2 + 12 >> 2] < HEAP32[$2 + 8 >> 2]) {
      jsvStringIteratorAppend($2 + 16 | 0, HEAP8[HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 60 >> 2] + 1 | 0) | 0]);
      HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
      continue;
     }
     break;
    }
    label$6: {
     if (jshIsTopEvent(HEAPU8[HEAP32[$2 + 60 >> 2]] & 31) & 1) {
      jshPopIOEvent(HEAP32[$2 + 60 >> 2]);
      $0 = HEAP32[$2 + 56 >> 2];
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
      HEAP32[$2 + 8 >> 2] = ((HEAPU8[HEAP32[$2 + 60 >> 2]] & 96) >>> 5 | 0) + 1;
      break label$6;
     }
     HEAP32[$2 + 8 >> 2] = 0;
    }
    continue;
   }
   break;
  }
  jsvStringIteratorFree_5($2 + 16 | 0);
 }
 __stack_pointer = $2 - -64 | 0;
 return HEAP32[$2 + 52 >> 2];
}

function jswrap_object_assign($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP32[$1 + 24 >> 2] = 0;
 jsvObjectIteratorNew($1 + 16 | 0, HEAP32[$1 + 28 >> 2]);
 HEAP8[$1 + 15 | 0] = 0;
 while (1) {
  $0 = 0;
  if (!(HEAP8[$1 + 15 | 0] & 1)) {
   $0 = jsvObjectIteratorHasValue_9($1 + 16 | 0);
  }
  if ($0 & 1) {
   HEAP32[$1 + 8 >> 2] = jsvObjectIteratorGetValue_9($1 + 16 | 0);
   label$4: {
    if (jsvIsUndefined(HEAP32[$1 + 8 >> 2]) & 1) {
     break label$4;
    }
    if (jsvIsNull(HEAP32[$1 + 8 >> 2]) & 1) {
     break label$4;
    }
    label$6: {
     if (!(jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1)) {
      HEAP32[$1 >> 2] = HEAP32[$1 + 8 >> 2];
      jsExceptionHere(3, 113752, $1);
      HEAP8[$1 + 15 | 0] = 1;
      break label$6;
     }
     label$8: {
      if (!HEAP32[$1 + 24 >> 2]) {
       HEAP32[$1 + 24 >> 2] = jsvLockAgain(HEAP32[$1 + 8 >> 2]);
       break label$8;
      }
      jsvObjectAppendAll(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 8 >> 2]);
     }
    }
   }
   jsvUnLock(HEAP32[$1 + 8 >> 2]);
   jsvObjectIteratorNext($1 + 16 | 0);
   continue;
  }
  break;
 }
 jsvObjectIteratorFree_9($1 + 16 | 0);
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 24 >> 2];
}

function jsvArrayBufferIteratorClone($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $5 = __stack_pointer - 16 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 12 >> 2] = $0;
 HEAP32[$5 + 8 >> 2] = $1;
 $3 = HEAP32[$5 + 8 >> 2];
 $0 = HEAP32[$3 >> 2];
 $2 = HEAP32[$3 + 4 >> 2];
 $4 = $0;
 $1 = HEAP32[$5 + 12 >> 2];
 $0 = $1;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 52 >> 2];
 $2 = HEAP32[$3 + 48 >> 2];
 $4 = $2;
 $2 = $1;
 HEAP32[$2 + 48 >> 2] = $4;
 HEAP32[$2 + 52 >> 2] = $0;
 $2 = HEAP32[$3 + 44 >> 2];
 $0 = HEAP32[$3 + 40 >> 2];
 $4 = $0;
 $0 = $1;
 HEAP32[$0 + 40 >> 2] = $4;
 HEAP32[$0 + 44 >> 2] = $2;
 $0 = HEAP32[$3 + 36 >> 2];
 $2 = HEAP32[$3 + 32 >> 2];
 $4 = $2;
 $2 = $1;
 HEAP32[$2 + 32 >> 2] = $4;
 HEAP32[$2 + 36 >> 2] = $0;
 $2 = HEAP32[$3 + 28 >> 2];
 $0 = HEAP32[$3 + 24 >> 2];
 $4 = $0;
 $0 = $1;
 HEAP32[$0 + 24 >> 2] = $4;
 HEAP32[$0 + 28 >> 2] = $2;
 $0 = HEAP32[$3 + 20 >> 2];
 $2 = HEAP32[$3 + 16 >> 2];
 $4 = $2;
 $2 = $1;
 HEAP32[$2 + 16 >> 2] = $4;
 HEAP32[$2 + 20 >> 2] = $0;
 $2 = HEAP32[$3 + 12 >> 2];
 $0 = HEAP32[$3 + 8 >> 2];
 $4 = $0;
 $0 = $1;
 HEAP32[$0 + 8 >> 2] = $4;
 HEAP32[$0 + 12 >> 2] = $2;
 jsvStringIteratorClone(HEAP32[$5 + 12 >> 2], HEAP32[$5 + 8 >> 2]);
 __stack_pointer = $5 + 16 | 0;
}

function jswrap_storage_write($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 96 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 92 >> 2] = $0;
 HEAP32[$4 + 88 >> 2] = $1;
 HEAP32[$4 + 84 >> 2] = $2;
 HEAP32[$4 + 80 >> 2] = $3;
 label$1: {
  if (jsvIsObject(HEAP32[$4 + 88 >> 2]) & 1) {
   HEAP32[$4 + 76 >> 2] = jswrap_json_stringify(HEAP32[$4 + 88 >> 2], 0, 0);
   HEAP32[$4 + 84 >> 2] = 0;
   HEAP32[$4 + 80 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 76 >> 2] = jsvLockAgainSafe(HEAP32[$4 + 88 >> 2]);
 }
 jsfNameFromVar($4 + 40 | 0, HEAP32[$4 + 92 >> 2]);
 $2 = HEAP32[$4 + 76 >> 2];
 $3 = HEAP32[$4 + 84 >> 2];
 $5 = HEAP32[$4 + 80 >> 2];
 HEAP32[$4 + 32 >> 2] = HEAP32[$4 + 64 >> 2];
 $1 = HEAP32[$4 + 60 >> 2];
 $0 = HEAP32[$4 + 56 >> 2];
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 28 >> 2] = $1;
 $0 = HEAP32[$4 + 52 >> 2];
 $1 = HEAP32[$4 + 48 >> 2];
 HEAP32[$4 + 16 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $0;
 $1 = HEAP32[$4 + 44 >> 2];
 $0 = HEAP32[$4 + 40 >> 2];
 HEAP32[$4 + 8 >> 2] = $0;
 HEAP32[$4 + 12 >> 2] = $1;
 HEAP8[$4 + 75 | 0] = jsfWriteFile($4 + 8 | 0, $2, 0, $3, $5) & 1;
 jsvUnLock(HEAP32[$4 + 76 >> 2]);
 __stack_pointer = $4 + 96 | 0;
 return HEAP8[$4 + 75 | 0] & 1;
}

function expf($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = 0, $6 = 0, $7 = 0;
 label$1: {
  label$2: {
   $1 = top12($0) & 2047;
   if ($1 >>> 0 < top12(Math_fround(88)) >>> 0) {
    break label$2;
   }
   $4 = Math_fround(0);
   if (((wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2)) | 0) == -8388608) {
    break label$1;
   }
   if (top12(Math_fround(infinity)) >>> 0 <= $1 >>> 0) {
    return Math_fround($0 + $0);
   }
   if ($0 > Math_fround(88.72283172607422)) {
    return __math_oflowf(0);
   }
   if (!($0 < Math_fround(-103.97207641601562))) {
    break label$2;
   }
   return __math_uflowf(0);
  }
  $2 = HEAPF64[21955] * +$0;
  $5 = HEAPF64[21954];
  $6 = $2 + $5;
  $2 = $2 - ($6 - $5);
  $2 = (HEAPF64[21956] * $2 + HEAPF64[21957]) * ($2 * $2) + (HEAPF64[21958] * $2 + 1);
  wasm2js_scratch_store_f64(+$6);
  wasm2js_scratch_load_i32(1) | 0;
  $3 = wasm2js_scratch_load_i32(0) | 0;
  $1 = (($3 & 31) << 3) + 175344 | 0;
  $7 = HEAP32[$1 >> 2];
  $3 = HEAP32[$1 + 4 >> 2] + ($3 << 15) | 0;
  $1 = 0;
  $1 = $7 + $1 | 0;
  wasm2js_scratch_store_i32(0, $1 | 0);
  $3 = $7 >>> 0 > $1 >>> 0 ? $3 + 1 | 0 : $3;
  wasm2js_scratch_store_i32(1, $3 | 0);
  $4 = Math_fround($2 * +wasm2js_scratch_load_f64());
 }
 return $4;
}

function jspGetNamedField($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP8[$3 + 19 | 0] = $2;
 HEAP32[$3 + 12 >> 2] = 0;
 if (jsvHasChildren(HEAP32[$3 + 24 >> 2]) & 1) {
  HEAP32[$3 + 12 >> 2] = jsvFindChildFromString(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
 }
 if (!HEAP32[$3 + 12 >> 2]) {
  HEAP8[$3 + 11 | 0] = !strcmp(HEAP32[$3 + 20 >> 2], 119810);
  if (!(HEAP8[$3 + 11 | 0] & 1)) {
   HEAP32[$3 + 12 >> 2] = jspGetNamedFieldInParents(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAP8[$3 + 19 | 0] & 1);
  }
  label$4: {
   if (HEAP32[$3 + 12 >> 2]) {
    break label$4;
   }
   if (!(jsvIsFunction(HEAP32[$3 + 24 >> 2]) & 1) | !(HEAP8[$3 + 11 | 0] & 1)) {
    break label$4;
   }
   HEAP32[$3 + 4 >> 2] = jsvNewObject();
   HEAP32[$3 + 12 >> 2] = jsvAddNamedChild(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 4 >> 2], 119810);
   jsvUnLock(HEAP32[$3 + 4 >> 2]);
  }
 }
 label$5: {
  if (HEAP8[$3 + 19 | 0] & 1) {
   HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2];
   break label$5;
  }
  HEAP32[$3 + 28 >> 2] = jsvSkipNameAndUnLock(HEAP32[$3 + 12 >> 2]);
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function jsvStringIteratorLoadFlashString_1($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2] + HEAP32[$0 + 8 >> 2];
 HEAP32[HEAP32[$1 + 12 >> 2] >> 2] = 0;
 $0 = HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
 label$1: {
  if (HEAPU32[HEAP32[$1 + 12 >> 2] + 8 >> 2] >= HEAPU32[$1 + 8 >> 2]) {
   HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = 0;
   HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] = 0;
   break label$1;
  }
  HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] = HEAP32[$1 + 8 >> 2] - HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
  if (HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2] > 16) {
   HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] = 16;
  }
  $0 = HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2];
  jshFlashRead(HEAP32[$1 + 12 >> 2] + 20 | 0, HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] + (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) | 0, HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]);
  HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = HEAP32[$1 + 12 >> 2] + 20;
 }
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_date_toString($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $1 = __stack_pointer - 112 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 108 >> 2] = $0;
 getTimeFromDateVar($1 + 80 | 0, HEAP32[$1 + 108 >> 2], 0);
 getCalendarDate($1 + 56 | 0, HEAP32[$1 + 80 >> 2]);
 label$1: {
  if (HEAP32[$1 + 100 >> 2] < 0) {
   HEAP32[$1 + 48 >> 2] = 0 - HEAP32[$1 + 100 >> 2];
   HEAP8[$1 + 55 | 0] = 45;
   break label$1;
  }
  HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 100 >> 2];
  HEAP8[$1 + 55 | 0] = 43;
 }
 $0 = HEAP32[44648];
 $2 = HEAP32[$1 + 72 >> 2] << 2;
 $3 = HEAP32[44647];
 $4 = HEAP32[$1 + 64 >> 2] << 2;
 $5 = HEAP32[$1 + 60 >> 2];
 $6 = HEAP32[$1 + 68 >> 2];
 $7 = HEAP32[$1 + 96 >> 2];
 $8 = HEAP32[$1 + 92 >> 2];
 $9 = HEAP32[$1 + 88 >> 2];
 $10 = HEAP8[$1 + 55 | 0];
 HEAP32[$1 + 32 >> 2] = Math_imul(HEAP32[$1 + 48 >> 2] / 60 | 0, 100) + (HEAP32[$1 + 48 >> 2] % 60 | 0);
 HEAP32[$1 + 28 >> 2] = $10;
 HEAP32[$1 + 24 >> 2] = $9;
 HEAP32[$1 + 20 >> 2] = $8;
 HEAP32[$1 + 16 >> 2] = $7;
 HEAP32[$1 + 12 >> 2] = $6;
 HEAP32[$1 + 8 >> 2] = $5;
 HEAP32[$1 + 4 >> 2] = $3 + $4;
 HEAP32[$1 >> 2] = $0 + $2;
 $0 = jsvVarPrintf(122151, $1);
 __stack_pointer = $1 + 112 | 0;
 return $0 | 0;
}

function jsvStringIteratorLoadFlashString($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] >> 2] + HEAP32[$0 + 8 >> 2];
 HEAP32[HEAP32[$1 + 12 >> 2] >> 2] = 0;
 $0 = HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
 label$1: {
  if (HEAPU32[HEAP32[$1 + 12 >> 2] + 8 >> 2] >= HEAPU32[$1 + 8 >> 2]) {
   HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = 0;
   HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] = 0;
   break label$1;
  }
  HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] = HEAP32[$1 + 8 >> 2] - HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
  if (HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2] > 16) {
   HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] = 16;
  }
  $0 = HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2];
  jshFlashRead(HEAP32[$1 + 12 >> 2] + 20 | 0, HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] + (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) | 0, HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]);
  HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = HEAP32[$1 + 12 >> 2] + 20;
 }
 __stack_pointer = $1 + 16 | 0;
}

function matchfound($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = jsvNewEmptyArray();
 HEAP32[$2 + 20 >> 2] = jsvStringIteratorGetIndex_4(HEAP32[$2 + 28 >> 2]);
 HEAP32[$2 + 16 >> 2] = jsvNewFromStringVar(HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2], HEAP32[$2 + 20 >> 2] - HEAP32[$1 + 4 >> 2] | 0);
 jsvSetArrayItem(HEAP32[$2 + 24 >> 2], 0, HEAP32[$2 + 16 >> 2]);
 jsvUnLock(HEAP32[$2 + 16 >> 2]);
 HEAP32[$2 + 12 >> 2] = 0;
 while (1) {
  if (HEAP32[$2 + 12 >> 2] < HEAP32[$1 + 12 >> 2]) {
   HEAP32[$2 + 16 >> 2] = jsvNewFromStringVar(HEAP32[$1 >> 2], HEAP32[($1 + 16 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2], HEAP32[($1 + 52 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2] - HEAP32[($1 + 16 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2] | 0);
   jsvSetArrayItem(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 12 >> 2] + 1 | 0, HEAP32[$2 + 16 >> 2]);
   jsvUnLock(HEAP32[$2 + 16 >> 2]);
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 jsvObjectSetChildAndUnLock(HEAP32[$2 + 24 >> 2], 111866, jsvNewFromInteger(HEAP32[$1 + 4 >> 2]));
 jsvObjectSetChild(HEAP32[$2 + 24 >> 2], 112542, HEAP32[$1 >> 2]);
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 24 >> 2];
}

function jswrap_process_env() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = jsvNewObject();
 jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 124173, jsvNewFromString(125894));
 jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 123817, jsvNewFromString(122852));
 jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 124970, jsvNewFromString(126353));
 jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 124366, jsvNewFromInteger(0));
 jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 124667, jsvNewFromInteger(8388608));
 jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 124664, jsvNewFromInteger(8388608));
 jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 124171, jsvNewFromInteger(2));
 jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 124893, jsvNewFromInteger(8388608));
 jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 124492, jswrap_interface_getSerial());
 jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 124857, jswrap_espruino_getConsole());
 jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 123931, jsvNewFromString(jswGetBuiltInLibraryNames()));
 jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 123943, jsvNewFromInteger(171376));
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function jswrap_object_defineProperties($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1: {
  if (!(jsvIsObject(HEAP32[$2 + 40 >> 2]) & 1)) {
   HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 40 >> 2];
   jsExceptionHere(1, 113777, $2 + 16 | 0);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  if (!(jsvIsObject(HEAP32[$2 + 36 >> 2]) & 1)) {
   HEAP32[$2 >> 2] = HEAP32[$2 + 36 >> 2];
   jsExceptionHere(1, 113815, $2);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  jsvObjectIteratorNew($2 + 32 | 0, HEAP32[$2 + 36 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_9($2 + 32 | 0) & 1) {
    HEAP32[$2 + 28 >> 2] = jsvObjectIteratorGetKey_6($2 + 32 | 0);
    HEAP32[$2 + 24 >> 2] = jsvObjectIteratorGetValue_9($2 + 32 | 0);
    jsvUnLock3(jswrap_object_defineProperty(HEAP32[$2 + 40 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2]), HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2]);
    jsvObjectIteratorNext($2 + 32 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_9($2 + 32 | 0);
  HEAP32[$2 + 44 >> 2] = jsvLockAgain(HEAP32[$2 + 40 >> 2]);
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function itostr_extra($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP8[$4 + 23 | 0] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 label$1: {
  if (!(!(HEAP8[$4 + 23 | 0] & 1) | HEAP32[$4 + 28 >> 2] >= 0)) {
   $0 = HEAP32[$4 + 24 >> 2];
   HEAP32[$4 + 24 >> 2] = $0 + 1;
   HEAP8[$0 | 0] = 45;
   HEAP32[$4 + 12 >> 2] = 0 - HEAP32[$4 + 28 >> 2];
   break label$1;
  }
  HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 28 >> 2];
 }
 HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 12 >> 2];
 HEAP32[$4 + 4 >> 2] = 1;
 while (1) {
  if (HEAPU32[$4 + 8 >> 2] >= HEAPU32[$4 + 16 >> 2]) {
   HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] + 1;
   HEAP32[$4 + 8 >> 2] = HEAPU32[$4 + 8 >> 2] / HEAPU32[$4 + 16 >> 2];
   continue;
  }
  break;
 }
 HEAP32[$4 >> 2] = HEAP32[$4 + 4 >> 2] - 1;
 while (1) {
  if (HEAP32[$4 >> 2] >= 0) {
   $0 = itoch(HEAPU32[$4 + 12 >> 2] % HEAPU32[$4 + 16 >> 2] | 0);
   HEAP8[HEAP32[$4 + 24 >> 2] + HEAP32[$4 >> 2] | 0] = $0;
   HEAP32[$4 + 12 >> 2] = HEAPU32[$4 + 12 >> 2] / HEAPU32[$4 + 16 >> 2];
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] - 1;
   continue;
  }
  break;
 }
 HEAP8[HEAP32[$4 + 24 >> 2] + HEAP32[$4 + 4 >> 2] | 0] = 0;
 __stack_pointer = $4 + 32 | 0;
}

function mbedtls_sha256_starts($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = 0;
 HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2] = 0;
 label$1: {
  if (!HEAP32[$2 + 8 >> 2]) {
   HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2] = 1779033703;
   HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2] = -1150833019;
   HEAP32[HEAP32[$2 + 12 >> 2] + 16 >> 2] = 1013904242;
   HEAP32[HEAP32[$2 + 12 >> 2] + 20 >> 2] = -1521486534;
   HEAP32[HEAP32[$2 + 12 >> 2] + 24 >> 2] = 1359893119;
   HEAP32[HEAP32[$2 + 12 >> 2] + 28 >> 2] = -1694144372;
   HEAP32[HEAP32[$2 + 12 >> 2] + 32 >> 2] = 528734635;
   HEAP32[HEAP32[$2 + 12 >> 2] + 36 >> 2] = 1541459225;
   break label$1;
  }
  HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2] = -1056596264;
  HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2] = 914150663;
  HEAP32[HEAP32[$2 + 12 >> 2] + 16 >> 2] = 812702999;
  HEAP32[HEAP32[$2 + 12 >> 2] + 20 >> 2] = -150054599;
  HEAP32[HEAP32[$2 + 12 >> 2] + 24 >> 2] = -4191439;
  HEAP32[HEAP32[$2 + 12 >> 2] + 28 >> 2] = 1750603025;
  HEAP32[HEAP32[$2 + 12 >> 2] + 32 >> 2] = 1694076839;
  HEAP32[HEAP32[$2 + 12 >> 2] + 36 >> 2] = -1090891868;
 }
 HEAP32[HEAP32[$2 + 12 >> 2] + 104 >> 2] = HEAP32[$2 + 8 >> 2];
}

function jsfIsErased($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 160 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 152 >> 2] = $0;
 HEAP32[$2 + 148 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = 0;
 label$1: {
  while (1) {
   if (HEAP32[$2 + 148 >> 2]) {
    HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 148 >> 2];
    if (HEAPU32[$2 + 8 >> 2] > 128) {
     HEAP32[$2 + 8 >> 2] = 128;
    }
    jshFlashRead($2 + 16 | 0, HEAP32[$2 + 152 >> 2], HEAP32[$2 + 8 >> 2]);
    HEAP32[$2 + 4 >> 2] = 0;
    while (1) {
     if (HEAPU32[$2 + 4 >> 2] < HEAPU32[$2 + 8 >> 2]) {
      if (HEAPU8[HEAP32[$2 + 4 >> 2] + ($2 + 16 | 0) | 0] != 255) {
       HEAP8[$2 + 159 | 0] = 0;
       break label$1;
      } else {
       HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
       continue;
      }
     }
     break;
    }
    HEAP32[$2 + 152 >> 2] = HEAP32[$2 + 8 >> 2] + HEAP32[$2 + 152 >> 2];
    HEAP32[$2 + 148 >> 2] = HEAP32[$2 + 148 >> 2] - HEAP32[$2 + 8 >> 2];
    $0 = HEAP32[$2 + 12 >> 2];
    HEAP32[$2 + 12 >> 2] = $0 + 1;
    if (($0 | 0) > 500) {
     jshKickWatchDog();
     jshKickSoftWatchDog();
     HEAP32[$2 + 12 >> 2] = 0;
    }
    continue;
   }
   break;
  }
  HEAP8[$2 + 159 | 0] = 1;
 }
 __stack_pointer = $2 + 160 | 0;
 return HEAP8[$2 + 159 | 0] & 1;
}

function jswrap_string_endsWith($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 label$1: {
  if (!(jsvIsString(HEAP32[$3 + 24 >> 2]) & 1)) {
   HEAP8[$3 + 31 | 0] = 0;
   break label$1;
  }
  label$3: {
   if (jsvIsNumeric(HEAP32[$3 + 16 >> 2]) & 1) {
    $0 = jsvGetInteger(HEAP32[$3 + 16 >> 2]);
    break label$3;
   }
   $0 = jsvGetStringLength(HEAP32[$3 + 24 >> 2]);
  }
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = jsvAsString(HEAP32[$3 + 20 >> 2]);
  $0 = jsvGetStringLength(HEAP32[$3 + 8 >> 2]);
  HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] - $0;
  HEAP8[$3 + 7 | 0] = 0;
  label$5: {
   if (HEAP32[$3 + 12 >> 2] < 0) {
    break label$5;
   }
   if ((jsvGetStringLength(HEAP32[$3 + 8 >> 2]) + HEAP32[$3 + 12 >> 2] | 0) > (jsvGetStringLength(HEAP32[$3 + 24 >> 2]) | 0)) {
    break label$5;
   }
   HEAP8[$3 + 7 | 0] = !jsvCompareString(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 12 >> 2], 0, 1);
  }
  jsvUnLock(HEAP32[$3 + 8 >> 2]);
  HEAP8[$3 + 31 | 0] = HEAP8[$3 + 7 | 0] & 1;
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP8[$3 + 31 | 0] & 1;
}

function jsiAppendStringToInputLine($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsiIsAboutToEditInputLine();
 HEAP32[$1 + 8 >> 2] = 1;
 while (1) {
  if (HEAPU8[HEAP32[$1 + 12 >> 2] + HEAP32[$1 + 8 >> 2] | 0]) {
   HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 if (HEAP32[44637] < 0) {
  HEAP32[44637] = jsvGetStringLength(HEAP32[86768]);
 }
 label$4: {
  if (HEAP32[86770] >= HEAP32[44637]) {
   jsiAppendToInputLine(HEAP32[$1 + 12 >> 2]);
   break label$4;
  }
  HEAP32[$1 + 4 >> 2] = jsvNewFromEmptyString_5();
  if (HEAP32[86770]) {
   jsvAppendStringVar(HEAP32[$1 + 4 >> 2], HEAP32[86768], 0, HEAP32[86770]);
  }
  jsvAppendString(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 12 >> 2]);
  jsvAppendStringVar(HEAP32[$1 + 4 >> 2], HEAP32[86768], HEAP32[86770], 2147483647);
  jsiInputLineCursorMoved();
  jsvUnLock(HEAP32[86768]);
  HEAP32[86768] = HEAP32[$1 + 4 >> 2];
  if (jsiShowInputLine() & 1) {
   jsiConsolePrintStringVarUntilEOL(HEAP32[86768], HEAP32[86770], -1, 1);
  }
 }
 HEAP32[86770] = HEAP32[$1 + 8 >> 2] + HEAP32[86770];
 if (jsiShowInputLine() & 1) {
  jsiConsolePrintString(HEAP32[$1 + 12 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
}

function std____2____compressed_pair_TfLiteFullyConnectedParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_____compressed_pair_TfLiteFullyConnectedParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28TfLiteFullyConnectedParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_elem_TfLiteFullyConnectedParams__2c_200_2c_20false_____compressed_pair_elem_TfLiteFullyConnectedParams___2c_20void__28TfLiteFullyConnectedParams___29($0, HEAP32[$3 + 8 >> 2]);
 std____2____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_201_2c_20false_____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_20void__28tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0 + 4 | 0, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function jswrap_date_toLocalISOString($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $1 = __stack_pointer - 112 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 108 >> 2] = $0;
 getTimeFromDateVar($1 + 80 | 0, HEAP32[$1 + 108 >> 2], 0);
 getCalendarDate($1 + 56 | 0, HEAP32[$1 + 80 >> 2]);
 label$1: {
  if (HEAP32[$1 + 100 >> 2] < 0) {
   HEAP32[$1 + 48 >> 2] = 0 - HEAP32[$1 + 100 >> 2];
   HEAP8[$1 + 55 | 0] = 45;
   break label$1;
  }
  HEAP32[$1 + 48 >> 2] = HEAP32[$1 + 100 >> 2];
  HEAP8[$1 + 55 | 0] = 43;
 }
 HEAP32[$1 + 48 >> 2] = Math_imul(HEAP32[$1 + 48 >> 2] / 60 | 0, 100) + (HEAP32[$1 + 48 >> 2] % 60 | 0);
 $0 = HEAP32[$1 + 68 >> 2];
 $2 = HEAP32[$1 + 64 >> 2];
 $3 = HEAP32[$1 + 60 >> 2];
 $4 = HEAP32[$1 + 96 >> 2];
 $5 = HEAP32[$1 + 92 >> 2];
 $6 = HEAP32[$1 + 88 >> 2];
 $7 = HEAP32[$1 + 84 >> 2];
 $8 = HEAP8[$1 + 55 | 0];
 HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 48 >> 2];
 HEAP32[$1 + 28 >> 2] = $8;
 HEAP32[$1 + 24 >> 2] = $7;
 HEAP32[$1 + 20 >> 2] = $6;
 HEAP32[$1 + 16 >> 2] = $5;
 HEAP32[$1 + 12 >> 2] = $4;
 HEAP32[$1 + 8 >> 2] = $3;
 HEAP32[$1 + 4 >> 2] = $2 + 1;
 HEAP32[$1 >> 2] = $0;
 $0 = jsvVarPrintf(122112, $1);
 __stack_pointer = $1 + 112 | 0;
 return $0 | 0;
}

function jswrap_dataview_get($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 96 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 88 >> 2] = $0;
 HEAP8[$4 + 87 | 0] = $1;
 HEAP32[$4 + 80 >> 2] = $2;
 HEAP8[$4 + 79 | 0] = $3;
 HEAP32[$4 + 72 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 88 >> 2], 116403);
 label$1: {
  if (!(jsvIsArrayBuffer(HEAP32[$4 + 72 >> 2]) & 1)) {
   jsvUnLock(HEAP32[$4 + 72 >> 2]);
   HEAP32[$4 + 92 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 80 >> 2] = jsvObjectGetIntegerChild(HEAP32[$4 + 88 >> 2], 113226) + HEAP32[$4 + 80 >> 2];
  HEAP32[$4 + 68 >> 2] = HEAPU8[$4 + 87 | 0] & 15;
  HEAP32[$4 + 64 >> 2] = jswrap_typedarray_constructor(HEAPU8[$4 + 87 | 0], HEAP32[$4 + 72 >> 2], HEAP32[$4 + 80 >> 2], HEAP32[$4 + 68 >> 2]);
  jsvUnLock(HEAP32[$4 + 72 >> 2]);
  if (!HEAP32[$4 + 64 >> 2]) {
   HEAP32[$4 + 92 >> 2] = 0;
   break label$1;
  }
  jsvArrayBufferIteratorNew($4 + 8 | 0, HEAP32[$4 + 64 >> 2], 0);
  HEAP32[$4 + 4 >> 2] = jsvArrayBufferIteratorGetValue($4 + 8 | 0, (HEAPU8[$4 + 79 | 0] ^ -1) & 1);
  jsvArrayBufferIteratorFree($4 + 8 | 0);
  jsvUnLock(HEAP32[$4 + 64 >> 2]);
  HEAP32[$4 + 92 >> 2] = HEAP32[$4 + 4 >> 2];
 }
 __stack_pointer = $4 + 96 | 0;
 return HEAP32[$4 + 92 >> 2];
}

function int_20gemmlowp__RoundingHalfSum_int__28int_2c_20int_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $5 = __stack_pointer - 48 | 0;
 HEAP32[$5 + 44 >> 2] = $0;
 HEAP32[$5 + 40 >> 2] = $1;
 $0 = $5;
 $1 = HEAP32[$0 + 44 >> 2];
 $2 = $1 >> 31;
 HEAP32[$0 + 32 >> 2] = $1;
 HEAP32[$0 + 36 >> 2] = $2;
 $2 = HEAP32[$0 + 40 >> 2];
 $1 = $2 >> 31;
 HEAP32[$0 + 24 >> 2] = $2;
 HEAP32[$0 + 28 >> 2] = $1;
 $1 = HEAP32[$0 + 32 >> 2];
 $6 = $1;
 $2 = HEAP32[$0 + 36 >> 2];
 $3 = $2;
 $2 = HEAP32[$0 + 24 >> 2];
 $4 = $2;
 $1 = HEAP32[$0 + 28 >> 2];
 $2 = $1;
 $1 = $3;
 $3 = $1 + $2 | 0;
 $0 = $6;
 $1 = $4;
 $4 = $0 + $1 | 0;
 $0 = $5;
 HEAP32[$0 + 16 >> 2] = $4;
 $3 = $4 >>> 0 < $1 >>> 0 ? $3 + 1 | 0 : $3;
 HEAP32[$0 + 20 >> 2] = $3;
 $0 = HEAP32[$0 + 20 >> 2];
 $0 = ($0 | 0) > 0 | ($0 | 0) >= 0 ? 1 : -1;
 $1 = $0 >> 31;
 $2 = $0;
 $0 = $5;
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$0 + 12 >> 2] = $1;
 $1 = HEAP32[$0 + 16 >> 2];
 $3 = $1;
 $0 = HEAP32[$0 + 20 >> 2];
 $4 = $0;
 $0 = HEAP32[$5 + 8 >> 2];
 $2 = $0;
 $1 = HEAP32[$5 + 12 >> 2];
 $0 = $1;
 $1 = $4;
 $4 = $1 + $0 | 0;
 $1 = $3;
 $3 = $2;
 $2 = $1 + $3 | 0;
 $4 = $2 >>> 0 < $3 >>> 0 ? $4 + 1 | 0 : $4;
 $1 = __wasm_i64_sdiv($2, $4, 2, 0);
 return $1;
}

function touchSwipeRotate($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if ((HEAPU8[349468] | HEAPU8[349469] << 8 | (HEAPU8[349470] << 16 | HEAPU8[349471] << 24)) & 32) {
  label$2: {
   if (HEAP32[$1 + 12 >> 2] == 1) {
    HEAP32[$1 + 12 >> 2] = 2;
    break label$2;
   }
   if (HEAP32[$1 + 12 >> 2] == 2) {
    HEAP32[$1 + 12 >> 2] = 1;
   }
  }
 }
 if ((HEAPU8[349468] | HEAPU8[349469] << 8 | (HEAPU8[349470] << 16 | HEAPU8[349471] << 24)) & 64) {
  label$6: {
   if (HEAP32[$1 + 12 >> 2] == 3) {
    HEAP32[$1 + 12 >> 2] = 4;
    break label$6;
   }
   if (HEAP32[$1 + 12 >> 2] == 4) {
    HEAP32[$1 + 12 >> 2] = 3;
   }
  }
 }
 if ((HEAPU8[349468] | HEAPU8[349469] << 8 | (HEAPU8[349470] << 16 | HEAPU8[349471] << 24)) & 16) {
  label$10: {
   if (HEAP32[$1 + 12 >> 2] == 1) {
    HEAP32[$1 + 12 >> 2] = 3;
    break label$10;
   }
   label$12: {
    if (HEAP32[$1 + 12 >> 2] == 2) {
     HEAP32[$1 + 12 >> 2] = 4;
     break label$12;
    }
    label$14: {
     if (HEAP32[$1 + 12 >> 2] == 3) {
      HEAP32[$1 + 12 >> 2] = 1;
      break label$14;
     }
     if (HEAP32[$1 + 12 >> 2] == 4) {
      HEAP32[$1 + 12 >> 2] = 2;
     }
    }
   }
  }
 }
 return HEAP32[$1 + 12 >> 2];
}

function std____2____compressed_pair_TfLiteDepthwiseConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_____compressed_pair_TfLiteDepthwiseConvParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28TfLiteDepthwiseConvParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_elem_TfLiteDepthwiseConvParams__2c_200_2c_20false_____compressed_pair_elem_TfLiteDepthwiseConvParams___2c_20void__28TfLiteDepthwiseConvParams___29($0, HEAP32[$3 + 8 >> 2]);
 std____2____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_201_2c_20false_____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_20void__28tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0 + 4 | 0, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function jsfEraseFile($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 112 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 64 >> 2] = HEAP32[$0 + 24 >> 2];
 $2 = HEAP32[$0 + 16 >> 2];
 $3 = HEAP32[$0 + 20 >> 2];
 HEAP32[$1 + 56 >> 2] = $2;
 HEAP32[$1 + 60 >> 2] = $3;
 $2 = HEAP32[$0 + 12 >> 2];
 $3 = HEAP32[$0 + 8 >> 2];
 HEAP32[$1 + 48 >> 2] = $3;
 HEAP32[$1 + 52 >> 2] = $2;
 $3 = HEAP32[$0 + 4 >> 2];
 $2 = HEAP32[$0 >> 2];
 HEAP32[$1 + 40 >> 2] = $2;
 HEAP32[$1 + 44 >> 2] = $3;
 HEAP32[$1 + 68 >> 2] = jsfFindFile($1 + 40 | 0, $1 + 72 | 0);
 label$1: {
  if (!HEAP32[$1 + 68 >> 2]) {
   HEAP8[$1 + 111 | 0] = 0;
   break label$1;
  }
  HEAP32[$1 + 32 >> 2] = HEAP32[$0 + 24 >> 2];
  $3 = HEAP32[$0 + 16 >> 2];
  $2 = HEAP32[$0 + 20 >> 2];
  HEAP32[$1 + 24 >> 2] = $3;
  HEAP32[$1 + 28 >> 2] = $2;
  $3 = HEAP32[$0 + 12 >> 2];
  $2 = HEAP32[$0 + 8 >> 2];
  HEAP32[$1 + 16 >> 2] = $2;
  HEAP32[$1 + 20 >> 2] = $3;
  $2 = HEAP32[$0 + 4 >> 2];
  $3 = HEAP32[$0 >> 2];
  HEAP32[$1 + 8 >> 2] = $3;
  HEAP32[$1 + 12 >> 2] = $2;
  jsfCacheClearFile($1 + 8 | 0);
  jsfEraseFileInternal(HEAP32[$1 + 68 >> 2], $1 + 72 | 0, 1);
  HEAP8[$1 + 111 | 0] = 1;
 }
 __stack_pointer = $1 + 112 | 0;
 return HEAP8[$1 + 111 | 0] & 1;
}

function void_20tflite__reference_ops__Dequantize_unsigned_20char_2c_20float__28tflite__DequantizationParams_20const__2c_20tflite__RuntimeShape_20const__2c_20unsigned_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 48 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 44 >> 2] = $0;
 HEAP32[$5 + 40 >> 2] = $1;
 HEAP32[$5 + 36 >> 2] = $2;
 HEAP32[$5 + 32 >> 2] = $3;
 HEAP32[$5 + 28 >> 2] = $4;
 HEAP32[$5 + 24 >> 2] = HEAP32[HEAP32[$5 + 44 >> 2] + 8 >> 2];
 HEAPF64[$5 + 16 >> 3] = HEAPF64[HEAP32[$5 + 44 >> 2] >> 3];
 HEAP32[$5 + 12 >> 2] = tflite__MatchingFlatSize_28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__29(HEAP32[$5 + 40 >> 2], HEAP32[$5 + 32 >> 2]);
 HEAP32[$5 + 8 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 8 >> 2] < HEAP32[$5 + 12 >> 2]) {
   HEAP32[$5 + 4 >> 2] = HEAPU8[HEAP32[$5 + 36 >> 2] + HEAP32[$5 + 8 >> 2] | 0];
   HEAPF32[$5 >> 2] = HEAPF64[$5 + 16 >> 3] * +(HEAP32[$5 + 4 >> 2] - HEAP32[$5 + 24 >> 2] | 0);
   HEAPF32[HEAP32[$5 + 28 >> 2] + (HEAP32[$5 + 8 >> 2] << 2) >> 2] = HEAPF32[$5 >> 2];
   HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 + 48 | 0;
}

function jsvGetFirstChildSigned($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 8 >> 2] = $0;
 $0 = HEAP32[$3 + 8 >> 2];
 $1 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
 $2 = HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24);
 $0 = $1;
 $2 = ($2 & 268435455) << 4 | $0 >>> 28;
 label$1: {
  if (($2 & 16383) >>> 0 > 8191) {
   $1 = HEAP32[$3 + 8 >> 2];
   $0 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
   $2 = HEAPU8[$1 + 8 | 0] | HEAPU8[$1 + 9 | 0] << 8 | (HEAPU8[$1 + 10 | 0] << 16 | HEAPU8[$1 + 11 | 0] << 24);
   $1 = $0;
   $2 = ($2 & 268435455) << 4 | $1 >>> 28;
   HEAP16[$3 + 14 >> 1] = ($2 & 16383) - 16384;
   break label$1;
  }
  $0 = HEAP32[$3 + 8 >> 2];
  $1 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
  $2 = HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24);
  $0 = $1;
  $2 = ($2 & 268435455) << 4 | $0 >>> 28;
  HEAP16[$3 + 14 >> 1] = $2 & 16383;
 }
 return HEAP16[$3 + 14 >> 1];
}

function void_20tflite__reference_ops__Dequantize_signed_20char_2c_20float__28tflite__DequantizationParams_20const__2c_20tflite__RuntimeShape_20const__2c_20signed_20char_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 48 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 44 >> 2] = $0;
 HEAP32[$5 + 40 >> 2] = $1;
 HEAP32[$5 + 36 >> 2] = $2;
 HEAP32[$5 + 32 >> 2] = $3;
 HEAP32[$5 + 28 >> 2] = $4;
 HEAP32[$5 + 24 >> 2] = HEAP32[HEAP32[$5 + 44 >> 2] + 8 >> 2];
 HEAPF64[$5 + 16 >> 3] = HEAPF64[HEAP32[$5 + 44 >> 2] >> 3];
 HEAP32[$5 + 12 >> 2] = tflite__MatchingFlatSize_28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__29(HEAP32[$5 + 40 >> 2], HEAP32[$5 + 32 >> 2]);
 HEAP32[$5 + 8 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 8 >> 2] < HEAP32[$5 + 12 >> 2]) {
   HEAP32[$5 + 4 >> 2] = HEAP8[HEAP32[$5 + 36 >> 2] + HEAP32[$5 + 8 >> 2] | 0];
   HEAPF32[$5 >> 2] = HEAPF64[$5 + 16 >> 3] * +(HEAP32[$5 + 4 >> 2] - HEAP32[$5 + 24 >> 2] | 0);
   HEAPF32[HEAP32[$5 + 28 >> 2] + (HEAP32[$5 + 8 >> 2] << 2) >> 2] = HEAPF32[$5 >> 2];
   HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 + 48 | 0;
}

function _jswrap_array_sort_compare($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP32[$3 + 32 >> 2] = $2;
 label$1: {
  if (jsvIsUndefined(HEAP32[$3 + 40 >> 2]) & 1) {
   HEAP32[$3 + 44 >> 2] = 1;
   break label$1;
  }
  if (jsvIsUndefined(HEAP32[$3 + 36 >> 2]) & 1) {
   HEAP32[$3 + 44 >> 2] = -1;
   break label$1;
  }
  if (HEAP32[$3 + 32 >> 2]) {
   HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 40 >> 2];
   HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 36 >> 2];
   HEAPF64[$3 + 16 >> 3] = jsvGetFloatAndUnLock(jspeFunctionCall(HEAP32[$3 + 32 >> 2], 0, 0, 0, 2, $3 + 24 | 0));
   if (HEAPF64[$3 + 16 >> 3] == 0) {
    HEAP32[$3 + 44 >> 2] = 0;
    break label$1;
   }
   HEAP32[$3 + 44 >> 2] = HEAPF64[$3 + 16 >> 3] < 0 ? -1 : 1;
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = jsvAsString(HEAP32[$3 + 40 >> 2]);
  HEAP32[$3 + 8 >> 2] = jsvAsString(HEAP32[$3 + 36 >> 2]);
  HEAP32[$3 + 4 >> 2] = jsvCompareString(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], 0, 0, 0);
  jsvUnLock2(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
  HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 4 >> 2];
 }
 __stack_pointer = $3 + 48 | 0;
 return HEAP32[$3 + 44 >> 2];
}

function jswrap_io_shiftOutCallback($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 24 >> 2];
 HEAP32[$2 + 12 >> 2] = 0;
 while (1) {
  if (HEAP32[$2 + 12 >> 2] < HEAP32[HEAP32[$2 + 20 >> 2] + 16 >> 2]) {
   HEAP32[$2 + 16 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] + 12 >> 2] - 1;
   while (1) {
    if (HEAP32[$2 + 16 >> 2] >= 0) {
     if (jshIsPinValid(HEAPU8[HEAP32[$2 + 20 >> 2] + HEAP32[$2 + 16 >> 2] | 0]) & 1) {
      jshPinSetValue(HEAPU8[HEAP32[$2 + 20 >> 2] + HEAP32[$2 + 16 >> 2] | 0], HEAP32[$2 + 28 >> 2] & 1);
     }
     HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 28 >> 2] >> 1;
     HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 16 >> 2] - 1;
     continue;
    }
    break;
   }
   if (jshIsPinValid(HEAPU8[HEAP32[$2 + 20 >> 2] + 8 | 0]) & 1) {
    jshPinSetValue(HEAPU8[HEAP32[$2 + 20 >> 2] + 8 | 0], HEAP8[HEAP32[$2 + 20 >> 2] + 9 | 0] & 1);
    jshPinSetValue(HEAPU8[HEAP32[$2 + 20 >> 2] + 8 | 0], (HEAPU8[HEAP32[$2 + 20 >> 2] + 9 | 0] ^ -1) & 1);
   }
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $2 + 32 | 0;
}

function jswrap_graphics_setFontAlign($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 96 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 88 >> 2] = $0;
 HEAP32[$4 + 84 >> 2] = $1;
 HEAP32[$4 + 80 >> 2] = $2;
 HEAP32[$4 + 76 >> 2] = $3;
 label$1: {
  if (!(graphicsGetFromVar($4, HEAP32[$4 + 88 >> 2]) & 1)) {
   HEAP32[$4 + 92 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$4 + 84 >> 2] < -1) {
   HEAP32[$4 + 84 >> 2] = -1;
  }
  if (HEAP32[$4 + 84 >> 2] > 1) {
   HEAP32[$4 + 84 >> 2] = 1;
  }
  if (HEAP32[$4 + 80 >> 2] < -1) {
   HEAP32[$4 + 80 >> 2] = -1;
  }
  if (HEAP32[$4 + 80 >> 2] > 1) {
   HEAP32[$4 + 80 >> 2] = 1;
  }
  if (HEAP32[$4 + 76 >> 2] < 0) {
   HEAP32[$4 + 76 >> 2] = 0;
  }
  if (HEAP32[$4 + 76 >> 2] > 3) {
   HEAP32[$4 + 76 >> 2] = 3;
  }
  HEAP8[$4 + 31 | 0] = HEAPU8[$4 + 84 | 0] & 3 | HEAPU8[$4 + 31 | 0] & 252;
  HEAP8[$4 + 31 | 0] = HEAPU8[$4 + 31 | 0] & 243 | (HEAPU8[$4 + 80 | 0] & 3) << 2;
  HEAP8[$4 + 31 | 0] = HEAPU8[$4 + 31 | 0] & -49 | (HEAPU8[$4 + 76 | 0] & 3) << 4;
  graphicsSetVar($4);
  HEAP32[$4 + 92 >> 2] = jsvLockAgain(HEAP32[$4 + 88 >> 2]);
 }
 __stack_pointer = $4 + 96 | 0;
 return HEAP32[$4 + 92 >> 2];
}

function jsvCompareString($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 112 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 104 >> 2] = $0;
 HEAP32[$5 + 100 >> 2] = $1;
 HEAP32[$5 + 96 >> 2] = $2;
 HEAP32[$5 + 92 >> 2] = $3;
 HEAP8[$5 + 91 | 0] = $4;
 jsvStringIteratorNewUTF8($5 + 48 | 0, HEAP32[$5 + 104 >> 2], HEAP32[$5 + 96 >> 2]);
 jsvStringIteratorNewUTF8($5 + 8 | 0, HEAP32[$5 + 100 >> 2], HEAP32[$5 + 92 >> 2]);
 while (1) {
  label$2: {
   HEAP32[$5 + 4 >> 2] = jsvStringIteratorGetUTF8CharAndNext($5 + 48 | 0);
   HEAP32[$5 >> 2] = jsvStringIteratorGetUTF8CharAndNext($5 + 8 | 0);
   if (HEAP32[$5 + 4 >> 2] != HEAP32[$5 >> 2]) {
    jsvStringIteratorFree_1($5 + 48 | 0);
    jsvStringIteratorFree_1($5 + 8 | 0);
    if (!(!(HEAP8[$5 + 91 | 0] & 1) | (HEAP32[$5 + 4 >> 2] | HEAP32[$5 >> 2]) >= 0)) {
     HEAP32[$5 + 108 >> 2] = 0;
     break label$2;
    }
    HEAP32[$5 + 108 >> 2] = HEAP32[$5 + 4 >> 2] - HEAP32[$5 >> 2];
    break label$2;
   }
   if (HEAP32[$5 + 4 >> 2] >= 0) {
    continue;
   }
   jsvStringIteratorFree_1($5 + 48 | 0);
   jsvStringIteratorFree_1($5 + 8 | 0);
   HEAP32[$5 + 108 >> 2] = 0;
  }
  break;
 }
 __stack_pointer = $5 + 112 | 0;
 return HEAP32[$5 + 108 >> 2];
}

function void_20tflite__reference_ops__Dequantize_short_2c_20float__28tflite__DequantizationParams_20const__2c_20tflite__RuntimeShape_20const__2c_20short_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 48 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 44 >> 2] = $0;
 HEAP32[$5 + 40 >> 2] = $1;
 HEAP32[$5 + 36 >> 2] = $2;
 HEAP32[$5 + 32 >> 2] = $3;
 HEAP32[$5 + 28 >> 2] = $4;
 HEAP32[$5 + 24 >> 2] = HEAP32[HEAP32[$5 + 44 >> 2] + 8 >> 2];
 HEAPF64[$5 + 16 >> 3] = HEAPF64[HEAP32[$5 + 44 >> 2] >> 3];
 HEAP32[$5 + 12 >> 2] = tflite__MatchingFlatSize_28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__29(HEAP32[$5 + 40 >> 2], HEAP32[$5 + 32 >> 2]);
 HEAP32[$5 + 8 >> 2] = 0;
 while (1) {
  if (HEAP32[$5 + 8 >> 2] < HEAP32[$5 + 12 >> 2]) {
   HEAP32[$5 + 4 >> 2] = HEAP16[HEAP32[$5 + 36 >> 2] + (HEAP32[$5 + 8 >> 2] << 1) >> 1];
   HEAPF32[$5 >> 2] = HEAPF64[$5 + 16 >> 3] * +(HEAP32[$5 + 4 >> 2] - HEAP32[$5 + 24 >> 2] | 0);
   HEAPF32[HEAP32[$5 + 28 >> 2] + (HEAP32[$5 + 8 >> 2] << 2) >> 2] = HEAPF32[$5 >> 2];
   HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $5 + 48 | 0;
}

function jswrap_string_toUpperLowerCase($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 112 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 104 >> 2] = $0;
 HEAP8[$2 + 103 | 0] = $1;
 HEAP32[$2 + 96 >> 2] = jsvNewFromEmptyString_8();
 label$1: {
  if (!HEAP32[$2 + 96 >> 2]) {
   HEAP32[$2 + 108 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 92 >> 2] = jsvAsString(HEAP32[$2 + 104 >> 2]);
  jsvStringIteratorNew($2 + 56 | 0, HEAP32[$2 + 92 >> 2], 0);
  jsvStringIteratorNew($2 + 16 | 0, HEAP32[$2 + 96 >> 2], 0);
  while (1) {
   if (jsvStringIteratorHasChar_8($2 + 56 | 0) & 1) {
    HEAP8[$2 + 15 | 0] = jsvStringIteratorGetCharAndNext($2 + 56 | 0);
    label$5: {
     if (HEAP8[$2 + 103 | 0] & 1) {
      $0 = charToUpperCase(HEAP8[$2 + 15 | 0]) << 24 >> 24;
      break label$5;
     }
     $0 = charToLowerCase(HEAP8[$2 + 15 | 0]) << 24 >> 24;
    }
    HEAP8[$2 + 15 | 0] = $0;
    jsvStringIteratorAppend($2 + 16 | 0, HEAP8[$2 + 15 | 0]);
    continue;
   }
   break;
  }
  jsvStringIteratorFree_10($2 + 56 | 0);
  jsvStringIteratorFree_10($2 + 16 | 0);
  jsvUnLock(HEAP32[$2 + 92 >> 2]);
  HEAP32[$2 + 108 >> 2] = HEAP32[$2 + 96 >> 2];
 }
 __stack_pointer = $2 + 112 | 0;
 return HEAP32[$2 + 108 >> 2];
}

function jswrap_onewire_read($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 80 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP32[$2 + 68 >> 2] = $1;
 HEAP8[$2 + 67 | 0] = onewire_getpin(HEAP32[$2 + 72 >> 2]);
 label$1: {
  if (!(jshIsPinValid(HEAPU8[$2 + 67 | 0]) & 1)) {
   HEAP32[$2 + 76 >> 2] = 0;
   break label$1;
  }
  if (jsvIsNumeric(HEAP32[$2 + 68 >> 2]) & 1) {
   HEAP32[$2 + 60 >> 2] = jsvGetInteger(HEAP32[$2 + 68 >> 2]);
   HEAP32[$2 + 56 >> 2] = jsvNewTypedArray(1, HEAP32[$2 + 60 >> 2]);
   if (!HEAP32[$2 + 56 >> 2]) {
    HEAP32[$2 + 76 >> 2] = 0;
    break label$1;
   }
   jsvArrayBufferIteratorNew($2, HEAP32[$2 + 56 >> 2], 0);
   while (1) {
    $0 = HEAP32[$2 + 60 >> 2];
    HEAP32[$2 + 60 >> 2] = $0 - 1;
    if ($0) {
     jsvArrayBufferIteratorSetByteValue($2, OneWireRead(HEAPU8[$2 + 67 | 0], 8) << 24 >> 24);
     jsvArrayBufferIteratorNext($2);
     continue;
    }
    break;
   }
   jsvArrayBufferIteratorFree($2);
   HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 56 >> 2];
   break label$1;
  }
  HEAP32[$2 + 76 >> 2] = jsvNewFromInteger(OneWireRead(HEAPU8[$2 + 67 | 0], 8));
 }
 __stack_pointer = $2 + 80 | 0;
 return HEAP32[$2 + 76 >> 2];
}

function jswrap_object_fromEntries($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 label$1: {
  if (!(jsvIsArray(HEAP32[$1 + 24 >> 2]) & 1)) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 20 >> 2] = jsvNewObject();
  if (!HEAP32[$1 + 20 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  jsvObjectIteratorNew($1 + 16 | 0, HEAP32[$1 + 24 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_9($1 + 16 | 0) & 1) {
    HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetValue_9($1 + 16 | 0);
    if (jsvIsArray(HEAP32[$1 + 12 >> 2]) & 1) {
     HEAP32[$1 + 8 >> 2] = jsvGetArrayItem(HEAP32[$1 + 12 >> 2], 0);
     HEAP32[$1 + 4 >> 2] = jsvGetArrayItem(HEAP32[$1 + 12 >> 2], 1);
     if (jsvIsString(HEAP32[$1 + 8 >> 2]) & 1) {
      jsvObjectSetChildVar(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 8 >> 2], HEAP32[$1 + 4 >> 2]);
     }
     jsvUnLock2(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 4 >> 2]);
    }
    jsvUnLock(HEAP32[$1 + 12 >> 2]);
    jsvObjectIteratorNext($1 + 16 | 0);
    continue;
   }
   break;
  }
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function jsvClearEmptyVarList() {
 var $0 = 0, $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[178978] = 1;
 HEAP16[89490] = 0;
 HEAP16[$1 + 14 >> 1] = 1;
 while (1) {
  if (HEAPU16[$1 + 14 >> 1] <= 12e3) {
   HEAP32[$1 + 8 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 14 >> 1]);
   $0 = HEAP32[$1 + 8 >> 2];
   label$3: {
    if (!((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63)) {
     $0 = HEAP32[$1 + 8 >> 2];
     HEAP8[$0 | 0] = 0;
     HEAP8[$0 + 1 | 0] = 0;
     HEAP8[$0 + 2 | 0] = 0;
     HEAP8[$0 + 3 | 0] = 0;
     HEAP8[$0 + 4 | 0] = 0;
     HEAP8[$0 + 5 | 0] = 0;
     HEAP8[$0 + 6 | 0] = 0;
     HEAP8[$0 + 7 | 0] = 0;
     HEAP8[$0 + 6 | 0] = 0;
     HEAP8[$0 + 7 | 0] = 0;
     HEAP8[$0 + 8 | 0] = 0;
     HEAP8[$0 + 9 | 0] = 0;
     HEAP8[$0 + 10 | 0] = 0;
     HEAP8[$0 + 11 | 0] = 0;
     HEAP8[$0 + 12 | 0] = 0;
     HEAP8[$0 + 13 | 0] = 0;
     break label$3;
    }
    if (jsvIsFlatString(HEAP32[$1 + 8 >> 2]) & 1) {
     HEAP16[$1 + 14 >> 1] = HEAPU16[$1 + 14 >> 1] + jsvGetFlatStringBlocks(HEAP32[$1 + 8 >> 2]);
    }
   }
   HEAP16[$1 + 14 >> 1] = HEAPU16[$1 + 14 >> 1] + 1;
   continue;
  }
  break;
 }
 HEAP8[178978] = 0;
 __stack_pointer = $1 + 16 | 0;
}

function tflite__GreedyMemoryPlanner__GetMaximumMemorySize_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 $0 = HEAP32[$1 + 24 >> 2];
 tflite__GreedyMemoryPlanner__CalculateOffsetsIfNeeded_28_29($0);
 label$1: {
  if (!HEAP32[$0 + 8 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 20 >> 2] = HEAP32[$0 + 24 >> 2] + Math_imul(HEAP32[$0 + 32 >> 2], 12);
  HEAP32[$1 + 16 >> 2] = 0;
  while (1) {
   label$4: {
    if (!HEAP32[$1 + 20 >> 2]) {
     break label$4;
    }
    HEAP32[$1 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + (HEAP32[HEAP32[$1 + 20 >> 2] + 4 >> 2] << 4);
    HEAP32[$1 + 8 >> 2] = HEAP32[HEAP32[$1 + 20 >> 2] >> 2] + HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
    if (HEAPU32[$1 + 8 >> 2] > HEAPU32[$1 + 16 >> 2]) {
     HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 8 >> 2];
    }
    if (HEAP32[HEAP32[$1 + 20 >> 2] + 8 >> 2] == -1) {
     break label$4;
    }
    HEAP32[$1 + 20 >> 2] = HEAP32[$0 + 24 >> 2] + Math_imul(HEAP32[HEAP32[$1 + 20 >> 2] + 8 >> 2], 12);
    continue;
   }
   break;
  }
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 16 >> 2];
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function jsvArrayBufferIteratorSetIntegerValue($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 label$1: {
  if (!HEAPU8[HEAP32[$2 + 28 >> 2] + 36 | 0]) {
   break label$1;
  }
  HEAP32[$2 + 8 >> 2] = HEAPU8[HEAP32[$2 + 28 >> 2] + 36 | 0] & 15;
  label$2: {
   if (HEAPU8[HEAP32[$2 + 28 >> 2] + 36 | 0] & 32) {
    jsvArrayBufferIteratorFloatToData($2 + 16 | 0, HEAP32[$2 + 8 >> 2], HEAPU8[HEAP32[$2 + 28 >> 2] + 36 | 0], +HEAP32[$2 + 24 >> 2]);
    break label$2;
   }
   jsvArrayBufferIteratorIntToData($2 + 16 | 0, HEAP32[$2 + 8 >> 2], HEAPU8[HEAP32[$2 + 28 >> 2] + 36 | 0], HEAP32[$2 + 24 >> 2]);
  }
  HEAP32[$2 + 12 >> 2] = 0;
  while (1) {
   if (HEAPU32[$2 + 12 >> 2] < HEAPU32[$2 + 8 >> 2]) {
    jsvStringIteratorSetChar(HEAP32[$2 + 28 >> 2], HEAP8[HEAP32[$2 + 12 >> 2] + ($2 + 16 | 0) | 0]);
    if (HEAP32[$2 + 8 >> 2] != 1) {
     jsvStringIteratorNext(HEAP32[$2 + 28 >> 2]);
    }
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP32[$2 + 8 >> 2] == 1) {
   break label$1;
  }
  HEAP8[HEAP32[$2 + 28 >> 2] + 52 | 0] = 1;
 }
 __stack_pointer = $2 + 32 | 0;
}

function graphicsSetModified($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 $0 = HEAP32[$5 + 28 >> 2];
 if (HEAP32[$5 + 24 >> 2] < (HEAPU8[$0 + 40 | 0] | HEAPU8[$0 + 41 | 0] << 8) << 16 >> 16) {
  $0 = HEAP32[$5 + 28 >> 2];
  $1 = HEAP32[$5 + 24 >> 2];
  HEAP8[$0 + 40 | 0] = $1;
  HEAP8[$0 + 41 | 0] = $1 >>> 8;
 }
 $0 = HEAP32[$5 + 28 >> 2];
 if (HEAP32[$5 + 16 >> 2] > (HEAPU8[$0 + 44 | 0] | HEAPU8[$0 + 45 | 0] << 8) << 16 >> 16) {
  $0 = HEAP32[$5 + 28 >> 2];
  $1 = HEAP32[$5 + 16 >> 2];
  HEAP8[$0 + 44 | 0] = $1;
  HEAP8[$0 + 45 | 0] = $1 >>> 8;
 }
 $0 = HEAP32[$5 + 28 >> 2];
 if (HEAP32[$5 + 20 >> 2] < (HEAPU8[$0 + 42 | 0] | HEAPU8[$0 + 43 | 0] << 8) << 16 >> 16) {
  $0 = HEAP32[$5 + 28 >> 2];
  $1 = HEAP32[$5 + 20 >> 2];
  HEAP8[$0 + 42 | 0] = $1;
  HEAP8[$0 + 43 | 0] = $1 >>> 8;
 }
 $0 = HEAP32[$5 + 28 >> 2];
 if (HEAP32[$5 + 12 >> 2] > (HEAPU8[$0 + 46 | 0] | HEAPU8[$0 + 47 | 0] << 8) << 16 >> 16) {
  $0 = HEAP32[$5 + 28 >> 2];
  $1 = HEAP32[$5 + 12 >> 2];
  HEAP8[$0 + 46 | 0] = $1;
  HEAP8[$0 + 47 | 0] = $1 >>> 8;
 }
}

function jswrap_math_minmax($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP8[$2 + 43 | 0] = $1 & 1;
 HEAPF64[$2 + 32 >> 3] = HEAP8[$2 + 43 | 0] & 1 ? Math_fround(-infinity) : Math_fround(infinity);
 jsvObjectIteratorNew($2 + 24 | 0, HEAP32[$2 + 44 >> 2]);
 while (1) {
  if (jsvObjectIteratorHasValue_12($2 + 24 | 0) & 1) {
   HEAPF64[$2 + 16 >> 3] = jsvGetFloatAndUnLock(jsvObjectIteratorGetValue_11($2 + 24 | 0));
   label$3: {
    label$4: {
     if (HEAP8[$2 + 43 | 0] & 1 & HEAPF64[$2 + 16 >> 3] > HEAPF64[$2 + 32 >> 3] | !(HEAP8[$2 + 43 | 0] & 1) & HEAPF64[$2 + 16 >> 3] < HEAPF64[$2 + 32 >> 3]) {
      break label$4;
     }
     $1 = __DOUBLE_BITS_6(HEAPF64[$2 + 16 >> 3]);
     $0 = $1;
     $3 = i64toi32_i32$HIGH_BITS;
     $1 = $3 & 2147483647;
     $3 = $0;
     if (($1 | 0) == 2146435072 & ($3 | 0) != 0 | $1 >>> 0 > 2146435072) {
      break label$4;
     }
     break label$3;
    }
    HEAPF64[$2 + 32 >> 3] = HEAPF64[$2 + 16 >> 3];
   }
   jsvObjectIteratorNext($2 + 24 | 0);
   continue;
  }
  break;
 }
 jsvObjectIteratorFree_12($2 + 24 | 0);
 __stack_pointer = $2 + 48 | 0;
 return HEAPF64[$2 + 32 >> 3];
}

function _jswrap_drawImageLayerNextY($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 172 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 168 >> 2] + HEAP32[$0 + 172 >> 2];
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 176 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 164 >> 2] + HEAP32[$0 + 176 >> 2];
 if (HEAP8[HEAP32[$1 + 12 >> 2] + 33 | 0] & 1) {
  if (HEAP32[HEAP32[$1 + 12 >> 2] + 172 >> 2] < 0) {
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 172 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 156 >> 2] + HEAP32[$0 + 172 >> 2];
  }
  if (HEAP32[HEAP32[$1 + 12 >> 2] + 172 >> 2] >= HEAP32[HEAP32[$1 + 12 >> 2] + 156 >> 2]) {
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 172 >> 2] = HEAP32[$0 + 172 >> 2] - HEAP32[HEAP32[$1 + 12 >> 2] + 156 >> 2];
  }
  if (HEAP32[HEAP32[$1 + 12 >> 2] + 176 >> 2] < 0) {
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 176 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 160 >> 2] + HEAP32[$0 + 176 >> 2];
  }
  if (HEAP32[HEAP32[$1 + 12 >> 2] + 176 >> 2] >= HEAP32[HEAP32[$1 + 12 >> 2] + 160 >> 2]) {
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 176 >> 2] = HEAP32[$0 + 176 >> 2] - HEAP32[HEAP32[$1 + 12 >> 2] + 160 >> 2];
  }
 }
}

function lcdFillRect_ArrayBuffer_flat8($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = __stack_pointer - 48 | 0;
 HEAP32[$6 + 44 >> 2] = $0;
 HEAP32[$6 + 40 >> 2] = $1;
 HEAP32[$6 + 36 >> 2] = $2;
 HEAP32[$6 + 32 >> 2] = $3;
 HEAP32[$6 + 28 >> 2] = $4;
 HEAP32[$6 + 24 >> 2] = $5;
 HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 36 >> 2];
 while (1) {
  if (HEAP32[$6 + 20 >> 2] <= HEAP32[$6 + 28 >> 2]) {
   $1 = HEAP32[$6 + 44 >> 2];
   $0 = HEAP32[$6 + 44 >> 2];
   HEAP32[$6 + 16 >> 2] = (HEAP32[$6 + 40 >> 2] + Math_imul(HEAP32[$6 + 20 >> 2], HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) | 0) + (HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24));
   HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 40 >> 2];
   while (1) {
    if (HEAP32[$6 + 12 >> 2] <= HEAP32[$6 + 32 >> 2]) {
     $1 = HEAP32[$6 + 24 >> 2];
     $0 = HEAP32[$6 + 16 >> 2];
     HEAP32[$6 + 16 >> 2] = $0 + 1;
     HEAP8[$0 | 0] = $1;
     HEAP32[$6 + 12 >> 2] = HEAP32[$6 + 12 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$6 + 20 >> 2] = HEAP32[$6 + 20 >> 2] + 1;
   continue;
  }
  break;
 }
}

function jspeConstruct($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP8[$3 + 19 | 0] = $2;
 label$1: {
  if (!(jsvIsFunction(HEAP32[$3 + 24 >> 2]) & 1)) {
   HEAP32[$3 >> 2] = HEAP32[$3 + 24 >> 2];
   jsExceptionHere(1, 114405, $3);
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = jsvNewObject();
  if (!HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 8 >> 2] = jsvFindOrAddChildFromString(HEAP32[$3 + 24 >> 2], 119810);
  jspEnsureIsPrototype(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 8 >> 2]);
  jsvAddNamedChildAndUnLock(HEAP32[$3 + 12 >> 2], jsvSkipNameAndUnLock(HEAP32[$3 + 8 >> 2]), 123007);
  HEAP32[$3 + 4 >> 2] = jspeFunctionCall(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAP32[$3 + 12 >> 2], HEAP8[$3 + 19 | 0] & 1, 0, 0);
  label$4: {
   if (HEAP32[$3 + 4 >> 2]) {
    jsvUnLock(HEAP32[$3 + 12 >> 2]);
    HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 4 >> 2];
    break label$4;
   }
   jsvUnLock(HEAP32[$3 + 4 >> 2]);
  }
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2];
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function _jswrap_espruino_FFT_setData($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 96 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 92 >> 2] = $0;
 HEAP32[$4 + 88 >> 2] = $1;
 HEAP32[$4 + 84 >> 2] = $2;
 HEAP32[$4 + 80 >> 2] = $3;
 jsvIteratorNew($4 + 16 | 0, HEAP32[$4 + 92 >> 2], 1);
 HEAP32[$4 + 12 >> 2] = 0;
 while (1) {
  $0 = 0;
  if (HEAPU32[$4 + 12 >> 2] < HEAPU32[$4 + 80 >> 2]) {
   $0 = jsvIteratorHasElement($4 + 16 | 0);
  }
  if ($0 & 1) {
   label$4: {
    if (HEAP32[$4 + 84 >> 2]) {
     HEAPF64[$4 >> 3] = jswrap_math_sqrt(HEAPF64[HEAP32[$4 + 88 >> 2] + (HEAP32[$4 + 12 >> 2] << 3) >> 3] * HEAPF64[HEAP32[$4 + 88 >> 2] + (HEAP32[$4 + 12 >> 2] << 3) >> 3] + HEAPF64[HEAP32[$4 + 84 >> 2] + (HEAP32[$4 + 12 >> 2] << 3) >> 3] * HEAPF64[HEAP32[$4 + 84 >> 2] + (HEAP32[$4 + 12 >> 2] << 3) >> 3]);
     break label$4;
    }
    HEAPF64[$4 >> 3] = HEAPF64[HEAP32[$4 + 88 >> 2] + (HEAP32[$4 + 12 >> 2] << 3) >> 3];
   }
   jsvUnLock(jsvIteratorSetValue($4 + 16 | 0, jsvNewFromFloat(HEAPF64[$4 >> 3])));
   HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] + 1;
   jsvIteratorNext($4 + 16 | 0);
   continue;
  }
  break;
 }
 jsvIteratorFree($4 + 16 | 0);
 __stack_pointer = $4 + 96 | 0;
}

function jsvIteratorGetValue($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  label$2: {
   switch (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] - 1 | 0) {
   case 3:
    label$7: {
     if (!(jsvIsIntegerish(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) & 1)) {
      break label$7;
     }
     if ((jsvGetInteger(HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2]) | 0) != HEAP32[HEAP32[$1 + 8 >> 2] + 12 >> 2]) {
      break label$7;
     }
     HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetValue_1(HEAP32[$1 + 8 >> 2] + 4 | 0);
     break label$1;
    }
    HEAP32[$1 + 12 >> 2] = 0;
    break label$1;

   case 1:
    HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetValue_1(HEAP32[$1 + 8 >> 2] + 4 | 0);
    break label$1;

   case 0:
    HEAP8[$1 + 7 | 0] = jsvStringIteratorGetChar_2(HEAP32[$1 + 8 >> 2] + 4 | 0);
    HEAP32[$1 + 12 >> 2] = jsvNewStringOfLength(1, $1 + 7 | 0);
    break label$1;

   case 2:
    HEAP32[$1 + 12 >> 2] = jsvArrayBufferIteratorGetValueAndRewind(HEAP32[$1 + 8 >> 2] + 4 | 0);
    break label$1;

   default:
    break label$2;
   }
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function std____2____compressed_pair_TfLiteSoftmaxParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_____compressed_pair_TfLiteSoftmaxParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28TfLiteSoftmaxParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_elem_TfLiteSoftmaxParams__2c_200_2c_20false_____compressed_pair_elem_TfLiteSoftmaxParams___2c_20void__28TfLiteSoftmaxParams___29($0, HEAP32[$3 + 8 >> 2]);
 std____2____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_201_2c_20false_____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_20void__28tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0 + 4 | 0, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_TfLiteReshapeParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_____compressed_pair_TfLiteReshapeParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28TfLiteReshapeParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_elem_TfLiteReshapeParams__2c_200_2c_20false_____compressed_pair_elem_TfLiteReshapeParams___2c_20void__28TfLiteReshapeParams___29($0, HEAP32[$3 + 8 >> 2]);
 std____2____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_201_2c_20false_____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_20void__28tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0 + 4 | 0, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function jspeBlockNoBrackets() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = jspeBlockStart();
 label$1: {
  if ((HEAP32[86758] & 63) == 1) {
   while (1) {
    $1 = 0;
    label$5: {
     $1 = HEAP16[HEAP32[44743] + 2 >> 1] ? HEAP16[HEAP32[44743] + 2 >> 1] != 125 : $1;
     if (!$1) {
      break label$5;
     }
     HEAP32[$0 + 8 >> 2] = jspeStatement();
     jsvCheckReferenceError(HEAP32[$0 + 8 >> 2]);
     jsvUnLock(HEAP32[$0 + 8 >> 2]);
     if (!HEAP32[44743] | HEAP32[86758] & 128 ? 0 : HEAP32[86758] & 112) {
      HEAP32[86758] = HEAP32[86758] | 128;
      HEAP32[$0 + 4 >> 2] = jsvObjectGetChild(HEAP32[86751], 120557, 28);
      if (HEAP32[$0 + 4 >> 2]) {
       jsvAppendPrintf(HEAP32[$0 + 4 >> 2], 144080, 0);
       jspAppendStackTrace(HEAP32[$0 + 4 >> 2]);
       jsvUnLock(HEAP32[$0 + 4 >> 2]);
      }
     }
     if (HEAP32[86758] & 80) {
      break label$5;
     }
     if ((HEAP32[86758] & 63) != 1) {
      jspeSkipBlock();
      break label$5;
     }
     continue;
    }
    break;
   }
   break label$1;
  }
  jspeSkipBlock();
 }
 jspeBlockEnd(HEAP32[$0 + 12 >> 2]);
 __stack_pointer = $0 + 16 | 0;
}

function jspNewPrototype($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP8[$2 + 23 | 0] = $1;
 HEAP32[$2 + 16 >> 2] = jsvFindOrAddChildFromString(HEAP32[86750], HEAP32[$2 + 24 >> 2]);
 label$1: {
  if (!HEAP32[$2 + 16 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jsvSkipName(HEAP32[$2 + 16 >> 2]);
  if (!HEAP32[$2 + 12 >> 2]) {
   HEAP32[$2 + 12 >> 2] = jspNewBuiltin(HEAP32[$2 + 24 >> 2]);
   if (!HEAP32[$2 + 12 >> 2]) {
    jsvUnLock(HEAP32[$2 + 16 >> 2]);
    HEAP32[$2 + 28 >> 2] = 0;
    break label$1;
   }
   jsvSetValueOfName(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2]);
  }
  HEAP32[$2 + 8 >> 2] = jsvFindOrAddChildFromString(HEAP32[$2 + 12 >> 2], 119810);
  jspEnsureIsPrototype(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
  if (HEAP8[$2 + 23 | 0] & 1) {
   $0 = HEAP32[$2 + 8 >> 2];
  } else {
   $0 = HEAP32[$2 + 12 >> 2];
  }
  jsvUnLock2($0, HEAP32[$2 + 16 >> 2]);
  if (HEAP8[$2 + 23 | 0] & 1) {
   $0 = HEAP32[$2 + 12 >> 2];
  } else {
   $0 = HEAP32[$2 + 8 >> 2];
  }
  HEAP32[$2 + 28 >> 2] = $0;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jsvNewWithFlags($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP16[$1 + 10 >> 1] = $0;
 label$1: {
  if (HEAPU8[178978]) {
   HEAP8[346998] = HEAPU8[346998] | 32;
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 4 >> 2] = 0;
  jshInterruptOff();
  if (HEAPU16[89490]) {
   HEAP32[$1 + 4 >> 2] = jsvGetAddressOf(HEAPU16[89490]);
   HEAP16[89490] = jsvGetNextSibling(HEAP32[$1 + 4 >> 2]);
   HEAP8[178977] = 1;
  }
  jshInterruptOn();
  if (HEAP32[$1 + 4 >> 2]) {
   jsvResetVariable(HEAP32[$1 + 4 >> 2], HEAPU16[$1 + 10 >> 1]);
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
   break label$1;
  }
  HEAP8[346998] = HEAPU8[346998] | 8;
  if (jshIsInInterrupt() & 1) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  if (jsvGarbageCollect()) {
   HEAP32[$1 + 12 >> 2] = jsvNewWithFlags(HEAPU16[$1 + 10 >> 1]);
   break label$1;
  }
  if (jsiFreeMoreMemory() & 1) {
   HEAP32[$1 + 12 >> 2] = jsvNewWithFlags(HEAPU16[$1 + 10 >> 1]);
   break label$1;
  }
  HEAP8[346998] = HEAPU8[346998] | 16;
  jspSetInterrupted(1);
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_object_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 label$1: {
  label$2: {
   label$3: {
    if (jsvIsObject(HEAP32[$1 + 24 >> 2]) & 1) {
     break label$3;
    }
    if (jsvIsArray(HEAP32[$1 + 24 >> 2]) & 1) {
     break label$3;
    }
    if (!(jsvIsFunction(HEAP32[$1 + 24 >> 2]) & 1)) {
     break label$2;
    }
   }
   HEAP32[$1 + 28 >> 2] = jsvLockAgain(HEAP32[$1 + 24 >> 2]);
   break label$1;
  }
  HEAP32[$1 + 20 >> 2] = jswGetBasicObjectName(HEAP32[$1 + 24 >> 2]);
  label$4: {
   if (HEAP32[$1 + 20 >> 2]) {
    $0 = jspGetNamedVariable(HEAP32[$1 + 20 >> 2]);
    break label$4;
   }
   $0 = 0;
  }
  HEAP32[$1 + 16 >> 2] = $0;
  if (!HEAP32[$1 + 16 >> 2]) {
   HEAP32[$1 + 28 >> 2] = jsvNewObject();
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[$1 + 16 >> 2]);
  HEAP32[$1 + 8 >> 2] = jspeFunctionCall(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 16 >> 2], 0, 0, 1, $1 + 24 | 0);
  jsvUnLock2(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 12 >> 2]);
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 8 >> 2];
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function tflite__TfLiteEvalTensorByteLength_28TfLiteEvalTensor_20const__2c_20unsigned_20long__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  if (!HEAP32[$2 + 20 >> 2]) {
   break label$1;
  }
 }
 HEAP32[$2 + 16 >> 2] = 1;
 if (HEAP32[HEAP32[$2 + 24 >> 2] + 4 >> 2]) {
  HEAP32[$2 + 12 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 + 12 >> 2] < HEAP32[HEAP32[HEAP32[$2 + 24 >> 2] + 4 >> 2] >> 2]) {
    HEAP32[$2 + 16 >> 2] = Math_imul(HEAP32[(HEAP32[HEAP32[$2 + 24 >> 2] + 4 >> 2] + 4 | 0) + (HEAP32[$2 + 12 >> 2] << 2) >> 2], HEAP32[$2 + 16 >> 2]);
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
    continue;
   }
   break;
  }
 }
 HEAP32[$2 + 4 >> 2] = tflite__TfLiteTypeSizeOf_28TfLiteType_2c_20unsigned_20long__29(HEAP32[HEAP32[$2 + 24 >> 2] + 8 >> 2], $2 + 8 | 0);
 label$5: {
  if (HEAP32[$2 + 4 >> 2]) {
   HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 4 >> 2];
   break label$5;
  }
  HEAP32[HEAP32[$2 + 20 >> 2] >> 2] = Math_imul(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 8 >> 2]);
  HEAP32[$2 + 28 >> 2] = 0;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jsvSetCharactersInVar($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP16[$2 + 2 >> 1] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & -64;
 label$1: {
  if (HEAPU32[$2 + 4 >> 2] <= 27) {
   if (HEAPU32[$2 + 4 >> 2] <= 22) {
    $0 = HEAP32[$2 + 12 >> 2];
    $1 = HEAPU16[$2 + 2 >> 1] | HEAP32[$2 + 8 >> 2] + 18;
    HEAP8[$0 + 12 | 0] = $1;
    HEAP8[$0 + 13 | 0] = $1 >>> 8;
    break label$1;
   }
   $0 = HEAP32[$2 + 12 >> 2];
   $1 = HEAPU16[$2 + 2 >> 1] | HEAP32[$2 + 8 >> 2] + 23;
   HEAP8[$0 + 12 | 0] = $1;
   HEAP8[$0 + 13 | 0] = $1 >>> 8;
   break label$1;
  }
  label$4: {
   if (HEAPU32[$2 + 4 >> 2] <= 37) {
    $0 = HEAP32[$2 + 12 >> 2];
    $1 = HEAPU16[$2 + 2 >> 1] | HEAP32[$2 + 8 >> 2] + 28;
    HEAP8[$0 + 12 | 0] = $1;
    HEAP8[$0 + 13 | 0] = $1 >>> 8;
    break label$4;
   }
   $0 = HEAP32[$2 + 12 >> 2];
   $1 = HEAPU16[$2 + 2 >> 1] | HEAP32[$2 + 8 >> 2] + 41;
   HEAP8[$0 + 12 | 0] = $1;
   HEAP8[$0 + 13 | 0] = $1 >>> 8;
  }
 }
}

function tflite__GreedyMemoryPlanner__AddBuffer_28tflite__ErrorReporter__2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 24 >> 2] = $0;
 HEAP32[$5 + 20 >> 2] = $1;
 HEAP32[$5 + 16 >> 2] = $2;
 HEAP32[$5 + 12 >> 2] = $3;
 HEAP32[$5 + 8 >> 2] = $4;
 $0 = HEAP32[$5 + 24 >> 2];
 label$1: {
  if (HEAP32[$0 + 8 >> 2] >= HEAP32[$0 + 4 >> 2]) {
   $1 = HEAP32[$5 + 20 >> 2];
   HEAP32[$5 >> 2] = HEAP32[$0 + 4 >> 2];
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($1, 142932, $5);
   HEAP32[$5 + 28 >> 2] = 1;
   break label$1;
  }
  HEAP32[$5 + 4 >> 2] = HEAP32[$0 + 12 >> 2] + (HEAP32[$0 + 8 >> 2] << 4);
  HEAP32[HEAP32[$5 + 4 >> 2] >> 2] = HEAP32[$5 + 16 >> 2];
  HEAP32[HEAP32[$5 + 4 >> 2] + 8 >> 2] = HEAP32[$5 + 12 >> 2];
  HEAP32[HEAP32[$5 + 4 >> 2] + 12 >> 2] = HEAP32[$5 + 8 >> 2];
  HEAP32[HEAP32[$5 + 4 >> 2] + 4 >> 2] = -1;
  HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
  HEAP8[$0 + 40 | 0] = 1;
  HEAP32[$5 + 28 >> 2] = 0;
 }
 __stack_pointer = $5 + 32 | 0;
 return HEAP32[$5 + 28 >> 2];
}

function std____2____compressed_pair_TfLitePoolParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_____compressed_pair_TfLitePoolParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28TfLitePoolParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_elem_TfLitePoolParams__2c_200_2c_20false_____compressed_pair_elem_TfLitePoolParams___2c_20void__28TfLitePoolParams___29($0, HEAP32[$3 + 8 >> 2]);
 std____2____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_201_2c_20false_____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_20void__28tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0 + 4 | 0, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_TfLiteConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_____compressed_pair_TfLiteConvParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28TfLiteConvParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_elem_TfLiteConvParams__2c_200_2c_20false_____compressed_pair_elem_TfLiteConvParams___2c_20void__28TfLiteConvParams___29($0, HEAP32[$3 + 8 >> 2]);
 std____2____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_201_2c_20false_____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_20void__28tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0 + 4 | 0, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function tflite__MicroAllocator__PopulateTfLiteTensorFromFlatbuffer_28tflite__Model_20const__2c_20tflite__SubGraph_20const__2c_20TfLiteTensor__2c_20int_2c_20bool_29($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP8[$6 + 11 | 0] = $5;
 $0 = HEAP32[$6 + 28 >> 2];
 $0 = tflite__internal__InitializeTfLiteTensorFromFlatbuffer_28tflite__SimpleMemoryAllocator__2c_20bool_2c_20tflite__Tensor_20const__2c_20flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer___20const__2c_20tflite__ErrorReporter__2c_20TfLiteTensor__29(HEAP32[$0 + 4 >> 2], HEAP8[$6 + 11 | 0] & 1, flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor____Get_28unsigned_20int_29_20const(tflite__SubGraph__tensors_28_29_20const(HEAP32[$6 + 20 >> 2]), HEAP32[$6 + 12 >> 2]), tflite__Model__buffers_28_29_20const(HEAP32[$6 + 24 >> 2]), HEAP32[$0 + 8 >> 2], HEAP32[$6 + 16 >> 2]);
 __stack_pointer = $6 + 32 | 0;
 return $0 | 0;
}

function jspeGetBinaryExpressionPrecedence($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  label$2: {
   switch (HEAP32[$1 + 8 >> 2] - 37 | 0) {
   case 123:
   case 171:
    HEAP32[$1 + 12 >> 2] = 1;
    break label$1;

   case 121:
    HEAP32[$1 + 12 >> 2] = 2;
    break label$1;

   case 87:
    HEAP32[$1 + 12 >> 2] = 3;
    break label$1;

   case 57:
    HEAP32[$1 + 12 >> 2] = 4;
    break label$1;

   case 1:
    HEAP32[$1 + 12 >> 2] = 5;
    break label$1;

   case 101:
   case 102:
   case 103:
   case 104:
    HEAP32[$1 + 12 >> 2] = 6;
    break label$1;

   case 23:
   case 25:
   case 105:
   case 108:
   case 149:
    HEAP32[$1 + 12 >> 2] = 7;
    break label$1;

   case 148:
    HEAP32[$1 + 12 >> 2] = HEAP32[86758] & 256 ? 0 : 7;
    break label$1;

   case 106:
   case 109:
   case 110:
    HEAP32[$1 + 12 >> 2] = 8;
    break label$1;

   case 6:
   case 8:
    HEAP32[$1 + 12 >> 2] = 9;
    break label$1;

   case 0:
   case 5:
   case 10:
    HEAP32[$1 + 12 >> 2] = 10;
    break label$1;

   default:
    break label$2;
   }
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_heatshrink_compress($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 128 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 120 >> 2] = $0;
 label$1: {
  if (!(jsvIsIterable(HEAP32[$1 + 120 >> 2]) & 1)) {
   HEAP32[$1 >> 2] = HEAP32[$1 + 120 >> 2];
   jsExceptionHere(3, 114237, $1);
   HEAP32[$1 + 124 >> 2] = 0;
   break label$1;
  }
  jsvIteratorNew($1 + 56 | 0, HEAP32[$1 + 120 >> 2], 1);
  HEAP32[$1 + 12 >> 2] = heatshrink_encode_cb(633, $1 + 56 | 0, 0, 0);
  jsvIteratorFree($1 + 56 | 0);
  HEAP32[$1 + 8 >> 2] = jsvNewStringOfLength(HEAP32[$1 + 12 >> 2], 0);
  if (!HEAP32[$1 + 8 >> 2]) {
   jsError(113002, 0);
   HEAP32[$1 + 124 >> 2] = 0;
   break label$1;
  }
  jsvIteratorNew($1 + 56 | 0, HEAP32[$1 + 120 >> 2], 1);
  jsvStringIteratorNew($1 + 16 | 0, HEAP32[$1 + 8 >> 2], 0);
  heatshrink_encode_cb(633, $1 + 56 | 0, 634, $1 + 16 | 0);
  jsvStringIteratorFree_15($1 + 16 | 0);
  jsvIteratorFree($1 + 56 | 0);
  HEAP32[$1 + 4 >> 2] = jsvNewArrayBufferFromString(HEAP32[$1 + 8 >> 2], 0);
  jsvUnLock(HEAP32[$1 + 8 >> 2]);
  HEAP32[$1 + 124 >> 2] = HEAP32[$1 + 4 >> 2];
 }
 __stack_pointer = $1 + 128 | 0;
 return HEAP32[$1 + 124 >> 2];
}

function nomatchfound($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 144 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 136 >> 2] = $0;
 label$1: {
  if (!(jspCheckStackPosition() & 1)) {
   HEAP32[$2 + 140 >> 2] = 0;
   break label$1;
  }
  while (1) {
   $0 = 0;
   $0 = HEAP8[HEAP32[$2 + 136 >> 2]] ? HEAP8[HEAP32[$2 + 136 >> 2]] != 124 : $0;
   if ($0) {
    if (HEAP8[HEAP32[$2 + 136 >> 2]] == 92) {
     HEAP32[$2 + 136 >> 2] = HEAP32[$2 + 136 >> 2] + 1;
     if (!HEAPU8[HEAP32[$2 + 136 >> 2]]) {
      HEAP32[$2 + 140 >> 2] = 0;
      break label$1;
     }
    }
    HEAP32[$2 + 136 >> 2] = HEAP32[$2 + 136 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP8[HEAP32[$2 + 136 >> 2]] != 124) {
   HEAP32[$2 + 140 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 136 >> 2] = HEAP32[$2 + 136 >> 2] + 1;
  jsvStringIteratorNew($2 + 96 | 0, HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2]);
  $0 = HEAP32[$2 + 136 >> 2];
  __memcpy($2 + 4 | 0, $1, 88);
  HEAP32[$2 + 92 >> 2] = matchhere($0, $2 + 96 | 0, $2 + 4 | 0);
  jsvStringIteratorFree_9($2 + 96 | 0);
  HEAP32[$2 + 140 >> 2] = HEAP32[$2 + 92 >> 2];
 }
 __stack_pointer = $2 + 144 | 0;
 return HEAP32[$2 + 140 >> 2];
}

function tflite__SimpleMemoryAllocator__AllocateFromTail_28unsigned_20long_2c_20unsigned_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP32[$3 + 32 >> 2] = $2;
 $0 = HEAP32[$3 + 40 >> 2];
 HEAP32[$3 + 28 >> 2] = tflite__AlignPointerDown_28unsigned_20char__2c_20unsigned_20long_29(HEAP32[$0 + 20 >> 2] - HEAP32[$3 + 36 >> 2] | 0, HEAP32[$3 + 32 >> 2]);
 label$1: {
  if (HEAPU32[$3 + 28 >> 2] < HEAPU32[$0 + 16 >> 2]) {
   HEAP32[$3 + 24 >> 2] = HEAP32[$0 + 16 >> 2] - HEAP32[$3 + 28 >> 2];
   $0 = HEAP32[$0 + 4 >> 2];
   $1 = HEAP32[$3 + 36 >> 2];
   $2 = HEAP32[$3 + 36 >> 2];
   $4 = HEAP32[$3 + 24 >> 2];
   HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 24 >> 2];
   HEAP32[$3 + 4 >> 2] = $2 - $4;
   HEAP32[$3 >> 2] = $1;
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 112385, $3);
   HEAP32[$3 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$0 + 20 >> 2] = HEAP32[$3 + 28 >> 2];
  HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 28 >> 2];
 }
 __stack_pointer = $3 + 48 | 0;
 return HEAP32[$3 + 44 >> 2];
}

function jswrap_heatshrink_decompress($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 128 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 120 >> 2] = $0;
 label$1: {
  if (!(jsvIsIterable(HEAP32[$1 + 120 >> 2]) & 1)) {
   HEAP32[$1 >> 2] = HEAP32[$1 + 120 >> 2];
   jsExceptionHere(3, 114237, $1);
   HEAP32[$1 + 124 >> 2] = 0;
   break label$1;
  }
  jsvIteratorNew($1 + 56 | 0, HEAP32[$1 + 120 >> 2], 1);
  HEAP32[$1 + 12 >> 2] = heatshrink_decode(633, $1 + 56 | 0, 0);
  jsvIteratorFree($1 + 56 | 0);
  HEAP32[$1 + 8 >> 2] = jsvNewStringOfLength(HEAP32[$1 + 12 >> 2], 0);
  if (!HEAP32[$1 + 8 >> 2]) {
   jsError(113002, 0);
   HEAP32[$1 + 124 >> 2] = 0;
   break label$1;
  }
  jsvIteratorNew($1 + 56 | 0, HEAP32[$1 + 120 >> 2], 1);
  jsvStringIteratorNew($1 + 16 | 0, HEAP32[$1 + 8 >> 2], 0);
  heatshrink_decode_cb(633, $1 + 56 | 0, 634, $1 + 16 | 0);
  jsvStringIteratorFree_15($1 + 16 | 0);
  jsvIteratorFree($1 + 56 | 0);
  HEAP32[$1 + 4 >> 2] = jsvNewArrayBufferFromString(HEAP32[$1 + 8 >> 2], 0);
  jsvUnLock(HEAP32[$1 + 8 >> 2]);
  HEAP32[$1 + 124 >> 2] = HEAP32[$1 + 4 >> 2];
 }
 __stack_pointer = $1 + 128 | 0;
 return HEAP32[$1 + 124 >> 2];
}

function jswrap_graphics_setPixel($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 112 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 104 >> 2] = $0;
 HEAP32[$4 + 100 >> 2] = $1;
 HEAP32[$4 + 96 >> 2] = $2;
 HEAP32[$4 + 92 >> 2] = $3;
 label$1: {
  if (!(graphicsGetFromVar($4 + 16 | 0, HEAP32[$4 + 104 >> 2]) & 1)) {
   HEAP32[$4 + 108 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 12 >> 2] = HEAPU8[$4 + 33 | 0] | HEAPU8[$4 + 34 | 0] << 8 | (HEAPU8[$4 + 35 | 0] << 16 | HEAPU8[$4 + 36 | 0] << 24);
  if (!(jsvIsUndefined(HEAP32[$4 + 92 >> 2]) & 1)) {
   HEAP32[$4 + 12 >> 2] = jswrap_graphics_toColor(HEAP32[$4 + 104 >> 2], HEAP32[$4 + 92 >> 2], 0, 0);
  }
  graphicsSetPixel($4 + 16 | 0, HEAP32[$4 + 100 >> 2], HEAP32[$4 + 96 >> 2], HEAP32[$4 + 12 >> 2]);
  $0 = HEAP32[$4 + 100 >> 2];
  HEAP8[$4 + 43 | 0] = $0;
  HEAP8[$4 + 44 | 0] = $0 >>> 8;
  $0 = HEAP32[$4 + 96 >> 2];
  HEAP8[$4 + 45 | 0] = $0;
  HEAP8[$4 + 46 | 0] = $0 >>> 8;
  graphicsSetVar($4 + 16 | 0);
  HEAP32[$4 + 108 >> 2] = jsvLockAgain(HEAP32[$4 + 104 >> 2]);
 }
 __stack_pointer = $4 + 112 | 0;
 return HEAP32[$4 + 108 >> 2];
}

function jspeFunctionArguments($0) {
 var $1 = 0;
 $1 = __stack_pointer - 96 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 88 >> 2] = $0;
 label$1: {
  if (!(jslMatch(40) & 1)) {
   HEAP8[$1 + 95 | 0] = 0;
   break label$1;
  }
  while (1) {
   if (HEAP16[HEAP32[44743] + 2 >> 1] != 41) {
    if (HEAP32[$1 + 88 >> 2]) {
     HEAP8[$1 + 16 | 0] = 255;
     strcpy($1 + 17 | 0, jslGetTokenValueAsString());
     HEAP32[$1 + 12 >> 2] = jsvAddNamedChild(HEAP32[$1 + 88 >> 2], 0, $1 + 16 | 0);
     if (!HEAP32[$1 + 12 >> 2]) {
      jspSetError(0);
      HEAP8[$1 + 95 | 0] = 0;
      break label$1;
     }
     HEAP32[$1 + 12 >> 2] = jsvMakeFunctionParameter(HEAP32[$1 + 12 >> 2]);
     jsvUnLock(HEAP32[$1 + 12 >> 2]);
    }
    if (!(jslMatch(128) & 1)) {
     HEAP8[$1 + 95 | 0] = 0;
     break label$1;
    }
    if (HEAP16[HEAP32[44743] + 2 >> 1] != 41) {
     if (!(jslMatch(44) & 1)) {
      HEAP8[$1 + 95 | 0] = 0;
      break label$1;
     }
    }
    continue;
   }
   break;
  }
  if (!(jslMatch(41) & 1)) {
   HEAP8[$1 + 95 | 0] = 0;
   break label$1;
  }
  HEAP8[$1 + 95 | 0] = 1;
 }
 __stack_pointer = $1 + 96 | 0;
 return HEAP8[$1 + 95 | 0] & 1;
}

function jshSetFlowControlXON($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 if (!(HEAPU8[$2 + 15 | 0] < 21 | HEAPU8[$2 + 15 | 0] > 22)) {
  if (!(HEAP8[$2 + 14 | 0] & 1)) {
   HEAP8[349024] = 1;
  }
  HEAP32[$2 + 8 >> 2] = HEAPU8[$2 + 15 | 0] - 21;
  HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2] + 347150;
  if (HEAPU8[HEAP32[$2 + 4 >> 2]] & 8) {
   label$4: {
    if (HEAP8[$2 + 14 | 0] & 1) {
     if ((HEAPU8[HEAP32[$2 + 4 >> 2]] & 6) == 4) {
      jshInterruptOff();
      $0 = HEAP32[$2 + 4 >> 2];
      HEAP8[$0 | 0] = HEAPU8[$0 | 0] | 2;
      jshInterruptOn();
      jshUSARTKick(HEAPU8[$2 + 15 | 0]);
     }
     break label$4;
    }
    if (!(HEAPU8[HEAP32[$2 + 4 >> 2]] & 5)) {
     jshInterruptOff();
     $0 = HEAP32[$2 + 4 >> 2];
     HEAP8[$0 | 0] = HEAPU8[$0 | 0] | 1;
     jshInterruptOn();
     jshUSARTKick(HEAPU8[$2 + 15 | 0]);
    }
   }
  }
  HEAP8[$2 + 3 | 0] = HEAPU8[HEAP32[$2 + 8 >> 2] + 347152 | 0];
  if (HEAPU8[$2 + 3 | 0] != 255) {
   jshPinSetValue(HEAPU8[$2 + 3 | 0], (HEAPU8[$2 + 14 | 0] ^ -1) & 1);
  }
 }
 __stack_pointer = $2 + 16 | 0;
}

function jshGetPinFromString($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!(!HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0] | !(HEAP8[HEAP32[$1 + 8 >> 2]] <= 73 & HEAP8[HEAP32[$1 + 8 >> 2]] >= 65) & HEAP8[HEAP32[$1 + 8 >> 2]] != 86)) {
   HEAP32[$1 + 4 >> 2] = HEAP8[HEAP32[$1 + 8 >> 2]] == 86 ? 10 : HEAP8[HEAP32[$1 + 8 >> 2]] + -64 | 0;
   HEAP32[$1 >> 2] = -1;
   if (!(HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0] < 48 | HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0] > 57)) {
    label$8: {
     if (!HEAPU8[HEAP32[$1 + 8 >> 2] + 2 | 0]) {
      HEAP32[$1 >> 2] = HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0] - 48;
      break label$8;
     }
     if (!(HEAPU8[HEAP32[$1 + 8 >> 2] + 3 | 0] ? 1 : HEAP8[HEAP32[$1 + 8 >> 2] + 2 | 0] < 48 | HEAP8[HEAP32[$1 + 8 >> 2] + 2 | 0] > 57)) {
      HEAP32[$1 >> 2] = (HEAP8[HEAP32[$1 + 8 >> 2] + 2 | 0] + Math_imul(HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0], 10) | 0) - 528;
     }
    }
   }
   if (HEAP32[$1 + 4 >> 2] == 4 & HEAP32[$1 >> 2] < 48 & HEAP32[$1 >> 2] >= 0) {
    HEAP8[$1 + 15 | 0] = HEAP32[$1 >> 2];
    break label$1;
   }
  }
  HEAP8[$1 + 15 | 0] = 255;
 }
 return HEAPU8[$1 + 15 | 0];
}

function jsvStringTrimRight($0) {
 var $1 = 0;
 $1 = __stack_pointer - 96 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 92 >> 2] = $0;
 HEAP32[$1 + 12 >> 2] = jsvNewFromEmptyString_1();
 jsvStringIteratorNew($1 + 56 | 0, HEAP32[$1 + 92 >> 2], 0);
 jsvStringIteratorNew($1 + 16 | 0, HEAP32[$1 + 12 >> 2], 0);
 HEAP32[$1 + 8 >> 2] = 0;
 while (1) {
  if (jsvStringIteratorHasChar_1($1 + 56 | 0) & 1) {
   HEAP8[$1 + 7 | 0] = jsvStringIteratorGetCharAndNext($1 + 56 | 0);
   label$3: {
    if (HEAP8[$1 + 7 | 0] == 32) {
     HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
     break label$3;
    }
    label$5: {
     if (HEAP8[$1 + 7 | 0] == 10) {
      HEAP32[$1 + 8 >> 2] = 0;
      break label$5;
     }
     while (1) {
      if (HEAP32[$1 + 8 >> 2] > 0) {
       jsvStringIteratorAppend($1 + 16 | 0, 32);
       HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] - 1;
       continue;
      }
      break;
     }
    }
    jsvStringIteratorAppend($1 + 16 | 0, HEAP8[$1 + 7 | 0]);
   }
   continue;
  }
  break;
 }
 jsvStringIteratorFree_1($1 + 56 | 0);
 jsvStringIteratorFree_1($1 + 16 | 0);
 __stack_pointer = $1 + 96 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsi2cRead($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 48 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 40 >> 2] = $0;
 HEAP8[$5 + 39 | 0] = $1;
 HEAP32[$5 + 32 >> 2] = $2;
 HEAP32[$5 + 28 >> 2] = $3;
 HEAP8[$5 + 27 | 0] = $4;
 label$1: {
  if (!(HEAPU8[HEAP32[$5 + 40 >> 2] + 4 | 0] != 255 & HEAPU8[HEAP32[$5 + 40 >> 2] + 5 | 0] != 255)) {
   HEAP8[$5 + 47 | 0] = 0;
   break label$1;
  }
  i2c_initstruct($5 + 8 | 0, HEAP32[$5 + 40 >> 2]);
  i2c_start($5 + 8 | 0);
  if (!(i2c_wr($5 + 8 | 0, HEAPU8[$5 + 39 | 0] << 1 | 1) & 1)) {
   HEAP8[$5 + 47 | 0] = 0;
   break label$1;
  }
  HEAP32[$5 + 4 >> 2] = 0;
  while (1) {
   if (HEAP32[$5 + 4 >> 2] < HEAP32[$5 + 32 >> 2]) {
    $0 = i2c_rd($5 + 8 | 0, HEAP32[$5 + 4 >> 2] == (HEAP32[$5 + 32 >> 2] - 1 | 0));
    HEAP8[HEAP32[$5 + 28 >> 2] + HEAP32[$5 + 4 >> 2] | 0] = $0;
    HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP8[$5 + 27 | 0] & 1) {
   i2c_stop($5 + 8 | 0);
  }
  HEAP8[HEAP32[$5 + 40 >> 2] + 6 | 0] = HEAP8[$5 + 10 | 0] & 1;
  HEAP8[$5 + 47 | 0] = 1;
 }
 __stack_pointer = $5 + 48 | 0;
 return HEAP8[$5 + 47 | 0] & 1;
}

function jsvGetTypeOf($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (jsvIsUndefined(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 121670;
   break label$1;
  }
  label$3: {
   label$4: {
    if (jsvIsNull(HEAP32[$1 + 8 >> 2]) & 1) {
     break label$4;
    }
    if (jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1) {
     break label$4;
    }
    if (jsvIsArray(HEAP32[$1 + 8 >> 2]) & 1) {
     break label$4;
    }
    if (!(jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1)) {
     break label$3;
    }
   }
   HEAP32[$1 + 12 >> 2] = 113247;
   break label$1;
  }
  if (jsvIsFunction(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 117403;
   break label$1;
  }
  if (jsvIsString(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 118763;
   break label$1;
  }
  if (jsvIsBoolean(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 117607;
   break label$1;
  }
  if (jsvIsNumeric(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 116610;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 125362;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function lcdMemLCD_init($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 $0 = HEAP32[$1 + 28 >> 2];
 HEAP8[$0 + 12 | 0] = 176;
 HEAP8[$0 + 13 | 0] = 0;
 $0 = HEAP32[$1 + 28 >> 2];
 HEAP8[$0 + 14 | 0] = 176;
 HEAP8[$0 + 15 | 0] = 0;
 HEAP8[HEAP32[$1 + 28 >> 2] + 16 | 0] = 16;
 memset(361504, 0, 12104);
 HEAP32[$1 + 24 >> 2] = 0;
 while (1) {
  if (HEAP32[$1 + 24 >> 2] < 176) {
   $0 = jswrap_espruino_reverseByte(128);
   HEAP8[Math_imul(HEAP32[$1 + 24 >> 2], 68) + 361504 | 0] = $0;
   $0 = jswrap_espruino_reverseByte(HEAP32[$1 + 24 >> 2] + 1 | 0);
   HEAP8[(Math_imul(HEAP32[$1 + 24 >> 2], 68) + 1 | 0) + 361504 | 0] = $0;
   HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 24 >> 2] + 1;
   continue;
  }
  break;
 }
 jshPinOutput(5, 0);
 jshPinOutput(26, 1);
 jshPinOutput(27, 1);
 jshPinOutput(7, 1);
 jshPinOutput(6, 1);
 jshSPIInitInfo($1 + 8 | 0);
 HEAP8[$1 + 8 | 0] = 0;
 HEAP8[$1 + 9 | 0] = 9;
 HEAP8[$1 + 10 | 0] = 61;
 HEAP8[$1 + 11 | 0] = 0;
 HEAP8[$1 + 15 | 0] = 27;
 HEAP8[$1 + 13 | 0] = 26;
 HEAP8[$1 + 17 | 0] = 0;
 jshSPISetup(25, $1 + 8 | 0);
 __stack_pointer = $1 + 32 | 0;
}

function _jswrap_object_keys_or_property_names_iterator($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 label$1: {
  if (!HEAP32[$3 + 28 >> 2]) {
   break label$1;
  }
  HEAP8[$3 + 15 | 0] = HEAPU8[HEAP32[$3 + 28 >> 2] + 8 | 0];
  HEAP32[$3 + 16 >> 2] = 0;
  while (1) {
   if (HEAPU32[$3 + 16 >> 2] >= HEAPU8[$3 + 15 | 0]) {
    break label$1;
   }
   $0 = HEAP32[$3 + 28 >> 2];
   $0 = (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) + (HEAP32[$3 + 16 >> 2] << 3) | 0;
   HEAP16[$3 + 12 >> 1] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8;
   $0 = HEAP32[$3 + 28 >> 2];
   HEAP32[$3 + 8 >> 2] = jsvNewFromString(HEAPU16[$3 + 12 >> 1] + (HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24)) | 0);
   FUNCTION_TABLE[HEAP32[$3 + 24 >> 2]](HEAP32[$3 + 20 >> 2], HEAP32[$3 + 8 >> 2]);
   jsvUnLock(HEAP32[$3 + 8 >> 2]);
   HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] + 1;
   continue;
  }
 }
 __stack_pointer = $3 + 32 | 0;
}

function jsspiFastSoftwareFunc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 16 >> 2];
 HEAP32[$4 + 8 >> 2] = 0;
 while (1) {
  if (HEAPU32[$4 + 8 >> 2] < HEAPU32[$4 + 20 >> 2]) {
   HEAP32[$4 + 4 >> 2] = HEAPU8[HEAP32[$4 + 28 >> 2] + HEAP32[$4 + 8 >> 2] | 0];
   $0 = HEAP32[$4 + 12 >> 2];
   HEAP32[$4 >> 2] = (HEAPU8[$0 + 10 | 0] | HEAPU8[$0 + 11 | 0] << 8 | (HEAPU8[$0 + 12 | 0] << 16 | HEAPU8[$0 + 13 | 0] << 24)) - 1;
   while (1) {
    if (HEAP32[$4 >> 2] >= 0) {
     jshPinSetValue(HEAPU8[HEAP32[$4 + 12 >> 2] + 7 | 0], HEAP32[$4 + 4 >> 2] >> HEAP32[$4 >> 2] & 1);
     jshPinSetValue(HEAPU8[HEAP32[$4 + 12 >> 2] + 5 | 0], 1);
     jshPinSetValue(HEAPU8[HEAP32[$4 + 12 >> 2] + 5 | 0], 0);
     HEAP32[$4 >> 2] = HEAP32[$4 >> 2] - 1;
     continue;
    }
    break;
   }
   HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $4 + 32 | 0;
}

function graphicsToDeviceCoordinates16x($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 16) {
  HEAP32[$3 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] >> 2];
  HEAP32[HEAP32[$3 + 8 >> 2] >> 2] = HEAP32[HEAP32[$3 + 4 >> 2] >> 2];
  HEAP32[HEAP32[$3 + 4 >> 2] >> 2] = HEAP32[$3 >> 2];
 }
 $0 = HEAP32[$3 + 12 >> 2];
 if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 32) {
  $0 = HEAP32[$3 + 12 >> 2];
  HEAP32[HEAP32[$3 + 8 >> 2] >> 2] = ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) - 1 << 4) - HEAP32[HEAP32[$3 + 8 >> 2] >> 2];
 }
 $0 = HEAP32[$3 + 12 >> 2];
 if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 64) {
  $0 = HEAP32[$3 + 12 >> 2];
  HEAP32[HEAP32[$3 + 4 >> 2] >> 2] = ((HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8) - 1 << 4) - HEAP32[HEAP32[$3 + 4 >> 2] >> 2];
 }
}

function TfLiteTypeGetName($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  label$2: {
   switch (HEAP32[$1 + 8 >> 2]) {
   case 0:
    HEAP32[$1 + 12 >> 2] = 124842;
    break label$1;

   case 1:
    HEAP32[$1 + 12 >> 2] = 126453;
    break label$1;

   case 7:
    HEAP32[$1 + 12 >> 2] = 126126;
    break label$1;

   case 2:
    HEAP32[$1 + 12 >> 2] = 126447;
    break label$1;

   case 3:
    HEAP32[$1 + 12 >> 2] = 125865;
    break label$1;

   case 9:
    HEAP32[$1 + 12 >> 2] = 125866;
    break label$1;

   case 4:
    HEAP32[$1 + 12 >> 2] = 126196;
    break label$1;

   case 6:
    HEAP32[$1 + 12 >> 2] = 124383;
    break label$1;

   case 8:
    HEAP32[$1 + 12 >> 2] = 126186;
    break label$1;

   case 12:
    HEAP32[$1 + 12 >> 2] = 125878;
    break label$1;

   case 5:
    HEAP32[$1 + 12 >> 2] = 124693;
    break label$1;

   case 10:
    HEAP32[$1 + 12 >> 2] = 126132;
    break label$1;

   case 11:
    HEAP32[$1 + 12 >> 2] = 126202;
    break label$1;

   default:
    break label$2;
   }
  }
  HEAP32[$1 + 12 >> 2] = 119981;
 }
 return HEAP32[$1 + 12 >> 2];
}

function std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteFullyConnectedParams__28_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 $3 = TfLiteFullyConnectedParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteFullyConnectedParams__28_29(HEAP32[$1 >> 2]);
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__BuiltinDataDeleter_28tflite__BuiltinDataAllocator__29($2 + 8 | 0, HEAP32[$1 >> 2]);
 std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLiteFullyConnectedParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $3, $2 + 8 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function jswrap_object_hasOwnProperty($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 80 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 76 >> 2] = $0;
 HEAP32[$2 + 72 >> 2] = $1;
 HEAP32[$2 + 68 >> 2] = jsvAsArrayIndex(HEAP32[$2 + 72 >> 2]);
 HEAP8[$2 + 67 | 0] = 0;
 if (jsvHasChildren(HEAP32[$2 + 76 >> 2]) & 1) {
  HEAP32[$2 + 60 >> 2] = jsvFindChildFromVar(HEAP32[$2 + 76 >> 2], HEAP32[$2 + 68 >> 2], 0);
  if (HEAP32[$2 + 60 >> 2]) {
   HEAP8[$2 + 67 | 0] = 1;
   jsvUnLock(HEAP32[$2 + 60 >> 2]);
  }
 }
 label$3: {
  if (HEAP8[$2 + 67 | 0] & 1) {
   break label$3;
  }
  if (jsvIsObject(HEAP32[$2 + 76 >> 2]) & 1) {
   break label$3;
  }
  HEAP32[$2 + 56 >> 2] = jswGetSymbolListForObject(HEAP32[$2 + 76 >> 2]);
  if (HEAP32[$2 + 56 >> 2]) {
   jsvGetString(HEAP32[$2 + 68 >> 2], $2 + 16 | 0, 32);
   HEAP32[$2 + 12 >> 2] = jswBinarySearch(HEAP32[$2 + 56 >> 2], HEAP32[$2 + 76 >> 2], $2 + 16 | 0);
   if (HEAP32[$2 + 12 >> 2]) {
    HEAP8[$2 + 67 | 0] = 1;
   }
   jsvUnLock(HEAP32[$2 + 12 >> 2]);
  }
 }
 jsvUnLock(HEAP32[$2 + 68 >> 2]);
 __stack_pointer = $2 + 80 | 0;
 return HEAP8[$2 + 67 | 0] & 1;
}

function jswrap_array_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 label$1: {
  if ((jsvGetArrayLength(HEAP32[$1 + 24 >> 2]) | 0) == 1) {
   HEAP32[$1 + 20 >> 2] = jsvSkipNameAndUnLock(jsvGetArrayItem(HEAP32[$1 + 24 >> 2], 0));
   if (jsvIsNumeric(HEAP32[$1 + 20 >> 2]) & 1) {
    HEAPF64[$1 + 8 >> 3] = jsvGetFloat(HEAP32[$1 + 20 >> 2]);
    HEAP32[$1 + 4 >> 2] = jsvGetInteger(HEAP32[$1 + 20 >> 2]);
    jsvUnLock(HEAP32[$1 + 20 >> 2]);
    if (!(HEAP32[$1 + 4 >> 2] >= 0 & HEAPF64[$1 + 8 >> 3] == +HEAP32[$1 + 4 >> 2])) {
     jsExceptionHere(1, 118379, 0);
     HEAP32[$1 + 28 >> 2] = 0;
     break label$1;
    }
    HEAP32[$1 >> 2] = jsvNewEmptyArray();
    if (!HEAP32[$1 >> 2]) {
     HEAP32[$1 + 28 >> 2] = 0;
     break label$1;
    }
    jsvSetArrayLength(HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2], 0);
    HEAP32[$1 + 28 >> 2] = HEAP32[$1 >> 2];
    break label$1;
   }
   jsvUnLock(HEAP32[$1 + 20 >> 2]);
  }
  HEAP32[$1 + 28 >> 2] = jsvLockAgain(HEAP32[$1 + 24 >> 2]);
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function tflite__SimpleMemoryAllocator__AllocateTemp_28unsigned_20long_2c_20unsigned_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP32[$3 + 32 >> 2] = $2;
 $0 = HEAP32[$3 + 40 >> 2];
 HEAP32[$3 + 28 >> 2] = tflite__AlignPointerUp_28unsigned_20char__2c_20unsigned_20long_29(HEAP32[$0 + 24 >> 2], HEAP32[$3 + 32 >> 2]);
 HEAP32[$3 + 24 >> 2] = HEAP32[$0 + 20 >> 2] - HEAP32[$3 + 28 >> 2];
 label$1: {
  if (HEAPU32[$3 + 24 >> 2] < HEAPU32[$3 + 36 >> 2]) {
   $0 = HEAP32[$0 + 4 >> 2];
   $1 = HEAP32[$3 + 36 >> 2];
   $2 = HEAP32[$3 + 24 >> 2];
   HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 36 >> 2] - HEAP32[$3 + 24 >> 2];
   HEAP32[$3 + 4 >> 2] = $2;
   HEAP32[$3 >> 2] = $1;
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 112312, $3);
   HEAP32[$3 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$0 + 24 >> 2] = HEAP32[$3 + 28 >> 2] + HEAP32[$3 + 36 >> 2];
  HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 28 >> 2];
 }
 __stack_pointer = $3 + 48 | 0;
 return HEAP32[$3 + 44 >> 2];
}

function jswrap_graphics_stringMetrics($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 128 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 120 >> 2] = $0;
 HEAP32[$2 + 116 >> 2] = $1;
 label$1: {
  if (!(graphicsGetFromVar($2 + 40 | 0, HEAP32[$2 + 120 >> 2]) & 1)) {
   HEAP32[$2 + 124 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jsvNewObject();
  if (HEAP32[$2 + 12 >> 2]) {
   _jswrap_graphics_stringMetrics($2 + 40 | 0, HEAP32[$2 + 116 >> 2], -1, $2 + 16 | 0);
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 12 >> 2], 118428, jsvNewFromInteger(HEAP32[$2 + 16 >> 2]));
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 12 >> 2], 113099, jsvNewFromInteger(HEAP32[$2 + 20 >> 2]));
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 12 >> 2], 115315, jsvNewFromBool(HEAP8[$2 + 24 | 0] & 1));
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 12 >> 2], 112794, jsvNewFromInteger(HEAP32[$2 + 28 >> 2]));
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 12 >> 2], 113106, jsvNewFromInteger(HEAP32[$2 + 32 >> 2]));
  }
  HEAP32[$2 + 124 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 __stack_pointer = $2 + 128 | 0;
 return HEAP32[$2 + 124 >> 2];
}

function graphicsToDeviceCoordinates($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 16) {
  HEAP32[$3 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] >> 2];
  HEAP32[HEAP32[$3 + 8 >> 2] >> 2] = HEAP32[HEAP32[$3 + 4 >> 2] >> 2];
  HEAP32[HEAP32[$3 + 4 >> 2] >> 2] = HEAP32[$3 >> 2];
 }
 $0 = HEAP32[$3 + 12 >> 2];
 if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 32) {
  $0 = HEAP32[$3 + 12 >> 2];
  HEAP32[HEAP32[$3 + 8 >> 2] >> 2] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) - (HEAP32[HEAP32[$3 + 8 >> 2] >> 2] + 1 | 0);
 }
 $0 = HEAP32[$3 + 12 >> 2];
 if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 64) {
  $0 = HEAP32[$3 + 12 >> 2];
  HEAP32[HEAP32[$3 + 4 >> 2] >> 2] = (HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8) - (HEAP32[HEAP32[$3 + 4 >> 2] >> 2] + 1 | 0);
 }
}

function deviceToGraphicsCoordinates($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 32) {
  $0 = HEAP32[$3 + 12 >> 2];
  HEAP32[HEAP32[$3 + 8 >> 2] >> 2] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) - (HEAP32[HEAP32[$3 + 8 >> 2] >> 2] + 1 | 0);
 }
 $0 = HEAP32[$3 + 12 >> 2];
 if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 64) {
  $0 = HEAP32[$3 + 12 >> 2];
  HEAP32[HEAP32[$3 + 4 >> 2] >> 2] = (HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8) - (HEAP32[HEAP32[$3 + 4 >> 2] >> 2] + 1 | 0);
 }
 $0 = HEAP32[$3 + 12 >> 2];
 if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 16) {
  HEAP32[$3 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] >> 2];
  HEAP32[HEAP32[$3 + 8 >> 2] >> 2] = HEAP32[HEAP32[$3 + 4 >> 2] >> 2];
  HEAP32[HEAP32[$3 + 4 >> 2] >> 2] = HEAP32[$3 >> 2];
 }
}

function jswrap_dataview_set($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 96 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 92 >> 2] = $0;
 HEAP8[$5 + 91 | 0] = $1;
 HEAP32[$5 + 84 >> 2] = $2;
 HEAP32[$5 + 80 >> 2] = $3;
 HEAP8[$5 + 79 | 0] = $4;
 HEAP32[$5 + 72 >> 2] = jsvObjectGetChildIfExists(HEAP32[$5 + 92 >> 2], 116403);
 label$1: {
  if (!(jsvIsArrayBuffer(HEAP32[$5 + 72 >> 2]) & 1)) {
   jsvUnLock(HEAP32[$5 + 72 >> 2]);
   break label$1;
  }
  HEAP32[$5 + 84 >> 2] = jsvObjectGetIntegerChild(HEAP32[$5 + 92 >> 2], 113226) + HEAP32[$5 + 84 >> 2];
  HEAP32[$5 + 68 >> 2] = HEAPU8[$5 + 91 | 0] & 15;
  HEAP32[$5 + 64 >> 2] = jswrap_typedarray_constructor(HEAPU8[$5 + 91 | 0], HEAP32[$5 + 72 >> 2], HEAP32[$5 + 84 >> 2], HEAP32[$5 + 68 >> 2]);
  jsvUnLock(HEAP32[$5 + 72 >> 2]);
  if (!HEAP32[$5 + 64 >> 2]) {
   break label$1;
  }
  jsvArrayBufferIteratorNew($5 + 8 | 0, HEAP32[$5 + 64 >> 2], 0);
  jsvArrayBufferIteratorSetValue($5 + 8 | 0, HEAP32[$5 + 80 >> 2], (HEAPU8[$5 + 79 | 0] ^ -1) & 1);
  jsvArrayBufferIteratorFree($5 + 8 | 0);
  jsvUnLock(HEAP32[$5 + 64 >> 2]);
 }
 __stack_pointer = $5 + 96 | 0;
}

function std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteDepthwiseConvParams__28_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 $3 = TfLiteDepthwiseConvParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteDepthwiseConvParams__28_29(HEAP32[$1 >> 2]);
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__BuiltinDataDeleter_28tflite__BuiltinDataAllocator__29($2 + 8 | 0, HEAP32[$1 >> 2]);
 std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLiteDepthwiseConvParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $3, $2 + 8 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function i2c_start($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP8[HEAP32[$1 + 12 >> 2] + 2 | 0] & 1) {
  i2c_pin_wr1(HEAPU8[HEAP32[$1 + 12 >> 2] + 1 | 0]);
  dly(HEAP32[$1 + 12 >> 2]);
  i2c_pin_wr1(HEAPU8[HEAP32[$1 + 12 >> 2]]);
  HEAP32[$1 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
  while (1) {
   $0 = 0;
   if (!(jshPinGetValue(HEAPU8[HEAP32[$1 + 12 >> 2]]) & 1)) {
    $0 = HEAP32[$1 + 8 >> 2] != 0;
   }
   if ($0) {
    HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] - 1;
    continue;
   }
   break;
  }
  if (!(HEAP32[$1 + 8 >> 2] | !HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2])) {
   err(142500);
  }
  dly(HEAP32[$1 + 12 >> 2]);
 }
 label$6: {
  if (!HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2]) {
   break label$6;
  }
  if (jshPinGetValue(HEAPU8[HEAP32[$1 + 12 >> 2] + 1 | 0]) & 1) {
   break label$6;
  }
  err(142516);
 }
 i2c_pin_wr0(HEAPU8[HEAP32[$1 + 12 >> 2] + 1 | 0]);
 dly(HEAP32[$1 + 12 >> 2]);
 i2c_pin_wr0(HEAPU8[HEAP32[$1 + 12 >> 2]]);
 dly(HEAP32[$1 + 12 >> 2]);
 HEAP8[HEAP32[$1 + 12 >> 2] + 2 | 0] = 1;
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_string_slice($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 if (jsvIsUndefined(HEAP32[$3 + 16 >> 2]) & 1) {
  $0 = 2147483647;
 } else {
  $0 = jsvGetInteger(HEAP32[$3 + 16 >> 2]);
 }
 HEAP32[$3 + 12 >> 2] = $0;
 if (HEAP32[$3 + 20 >> 2] < 0) {
  HEAP32[$3 + 20 >> 2] = jsvGetStringLength(HEAP32[$3 + 24 >> 2]) + HEAP32[$3 + 20 >> 2];
 }
 if (HEAP32[$3 + 12 >> 2] < 0) {
  HEAP32[$3 + 12 >> 2] = jsvGetStringLength(HEAP32[$3 + 24 >> 2]) + HEAP32[$3 + 12 >> 2];
 }
 if (HEAP32[$3 + 20 >> 2] < 0) {
  HEAP32[$3 + 20 >> 2] = 0;
 }
 if (HEAP32[$3 + 12 >> 2] < 0) {
  HEAP32[$3 + 12 >> 2] = 0;
 }
 label$7: {
  if (HEAP32[$3 + 12 >> 2] <= HEAP32[$3 + 20 >> 2]) {
   HEAP32[$3 + 28 >> 2] = jsvNewFromEmptyString_8();
   break label$7;
  }
  HEAP32[$3 + 28 >> 2] = jsvNewFromStringVar(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAP32[$3 + 12 >> 2] - HEAP32[$3 + 20 >> 2] | 0);
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function jsiConsolePrintStringVarUntilEOL($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer + -64 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 60 >> 2] = $0;
 HEAP32[$4 + 56 >> 2] = $1;
 HEAP32[$4 + 52 >> 2] = $2;
 HEAP8[$4 + 51 | 0] = $3;
 HEAP32[$4 + 44 >> 2] = 0;
 jsvStringIteratorNew($4 + 8 | 0, HEAP32[$4 + 60 >> 2], HEAP32[$4 + 56 >> 2]);
 while (1) {
  $0 = 0;
  if (jsvStringIteratorHasChar_5($4 + 8 | 0) & 1) {
   $0 = HEAPU32[$4 + 44 >> 2] < HEAPU32[$4 + 52 >> 2];
  }
  label$3: {
   if (!$0) {
    break label$3;
   }
   HEAP8[$4 + 7 | 0] = jsvStringIteratorGetCharAndNext($4 + 8 | 0);
   if (HEAP8[$4 + 7 | 0] == 10) {
    break label$3;
   }
   jsiConsolePrintChar(HEAP8[$4 + 7 | 0]);
   HEAP32[$4 + 44 >> 2] = HEAP32[$4 + 44 >> 2] + 1;
   continue;
  }
  break;
 }
 jsvStringIteratorFree_5($4 + 8 | 0);
 if (HEAP8[$4 + 51 | 0] & 1) {
  jsiConsolePrintChar(32);
  HEAP32[$4 + 44 >> 2] = HEAP32[$4 + 44 >> 2] + 1;
  while (1) {
   $0 = HEAP32[$4 + 44 >> 2];
   HEAP32[$4 + 44 >> 2] = $0 - 1;
   if ($0) {
    jsiConsolePrintChar(8);
    continue;
   }
   break;
  }
 }
 __stack_pointer = $4 - -64 | 0;
}

function jswrap_object_length($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  label$2: {
   if (jsvIsArray(HEAP32[$1 + 8 >> 2]) & 1) {
    HEAP32[$1 + 4 >> 2] = jsvGetArrayLength(HEAP32[$1 + 8 >> 2]);
    break label$2;
   }
   label$4: {
    if (jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1) {
     HEAP32[$1 + 4 >> 2] = jsvGetArrayBufferLength(HEAP32[$1 + 8 >> 2]);
     break label$4;
    }
    label$6: {
     if (jsvIsString(HEAP32[$1 + 8 >> 2]) & 1) {
      HEAP32[$1 + 4 >> 2] = jsvGetStringLength(HEAP32[$1 + 8 >> 2]);
      break label$6;
     }
     label$8: {
      if (jsvIsFunction(HEAP32[$1 + 8 >> 2]) & 1) {
       HEAP32[$1 >> 2] = jsvGetFunctionArgumentLength(HEAP32[$1 + 8 >> 2]);
       HEAP32[$1 + 4 >> 2] = jsvGetArrayLength(HEAP32[$1 >> 2]);
       jsvUnLock(HEAP32[$1 >> 2]);
       break label$8;
      }
      HEAP32[$1 + 12 >> 2] = 0;
      break label$1;
     }
    }
   }
  }
  HEAP32[$1 + 12 >> 2] = jsvNewFromInteger(HEAP32[$1 + 4 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvIteratorGetFloatValue($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 4 >> 2] = $0;
 label$1: {
  label$2: {
   switch (HEAP32[HEAP32[$1 + 4 >> 2] >> 2] - 2 | 0) {
   case 2:
    label$6: {
     if (!(jsvIsIntegerish(HEAP32[HEAP32[$1 + 4 >> 2] + 4 >> 2]) & 1)) {
      break label$6;
     }
     if ((jsvGetInteger(HEAP32[HEAP32[$1 + 4 >> 2] + 4 >> 2]) | 0) != HEAP32[HEAP32[$1 + 4 >> 2] + 12 >> 2]) {
      break label$6;
     }
     HEAPF64[$1 + 8 >> 3] = jsvGetFloatAndUnLock(jsvObjectIteratorGetValue_1(HEAP32[$1 + 4 >> 2] + 4 | 0));
     break label$1;
    }
    HEAPF64[$1 + 8 >> 3] = nan;
    break label$1;

   case 0:
    HEAPF64[$1 + 8 >> 3] = jsvGetFloatAndUnLock(jsvObjectIteratorGetValue_1(HEAP32[$1 + 4 >> 2] + 4 | 0));
    break label$1;

   case 1:
    HEAPF64[$1 + 8 >> 3] = jsvArrayBufferIteratorGetFloatValue(HEAP32[$1 + 4 >> 2] + 4 | 0);
    break label$1;

   default:
    break label$2;
   }
  }
  HEAPF64[$1 + 8 >> 3] = jsvIteratorGetIntegerValue(HEAP32[$1 + 4 >> 2]) | 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAPF64[$1 + 8 >> 3];
}

function std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___reset_28TfLiteFullyConnectedParams__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[std____2____compressed_pair_TfLiteFullyConnectedParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2];
 $1 = HEAP32[$2 + 8 >> 2];
 HEAP32[std____2____compressed_pair_TfLiteFullyConnectedParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2] = $1;
 if (HEAP32[$2 + 4 >> 2]) {
  tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__operator_28_29_28void__29(std____2____compressed_pair_TfLiteFullyConnectedParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___second_28_29($0), HEAP32[$2 + 4 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function jsfRemoveCodeFromFlash() {
 var $0 = 0, $1 = 0, $2 = 0;
 $0 = __stack_pointer - 128 | 0;
 __stack_pointer = $0;
 jsiConsolePrintString(127448);
 jsfNameFromString($0 + 96 | 0, 120461);
 HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 120 >> 2];
 $1 = HEAP32[$0 + 116 >> 2];
 $2 = HEAP32[$0 + 112 >> 2];
 HEAP32[$0 + 16 >> 2] = $2;
 HEAP32[$0 + 20 >> 2] = $1;
 $2 = HEAP32[$0 + 108 >> 2];
 $1 = HEAP32[$0 + 104 >> 2];
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $2;
 $1 = HEAP32[$0 + 100 >> 2];
 $2 = HEAP32[$0 + 96 >> 2];
 HEAP32[$0 >> 2] = $2;
 HEAP32[$0 + 4 >> 2] = $1;
 jsfEraseFile($0);
 jsfNameFromString($0 - -64 | 0, 112653);
 HEAP32[$0 + 56 >> 2] = HEAP32[$0 + 88 >> 2];
 $2 = HEAP32[$0 + 84 >> 2];
 $1 = HEAP32[$0 + 80 >> 2];
 HEAP32[$0 + 48 >> 2] = $1;
 HEAP32[$0 + 52 >> 2] = $2;
 $1 = HEAP32[$0 + 76 >> 2];
 $2 = HEAP32[$0 + 72 >> 2];
 HEAP32[$0 + 40 >> 2] = $2;
 HEAP32[$0 + 44 >> 2] = $1;
 $2 = HEAP32[$0 + 68 >> 2];
 $1 = HEAP32[$0 + 64 >> 2];
 HEAP32[$0 + 32 >> 2] = $1;
 HEAP32[$0 + 36 >> 2] = $2;
 jsfEraseFile($0 + 32 | 0);
 jsiConsolePrintString(146968);
 __stack_pointer = $0 + 128 | 0;
}

function jsfFlashContainsCode() {
 var $0 = 0, $1 = 0, $2 = 0;
 $0 = __stack_pointer - 128 | 0;
 __stack_pointer = $0;
 jsfNameFromString($0 + 96 | 0, 120461);
 HEAP32[$0 + 56 >> 2] = HEAP32[$0 + 120 >> 2];
 $2 = HEAP32[$0 + 116 >> 2];
 $1 = HEAP32[$0 + 112 >> 2];
 HEAP32[$0 + 48 >> 2] = $1;
 HEAP32[$0 + 52 >> 2] = $2;
 $1 = HEAP32[$0 + 108 >> 2];
 $2 = HEAP32[$0 + 104 >> 2];
 HEAP32[$0 + 40 >> 2] = $2;
 HEAP32[$0 + 44 >> 2] = $1;
 $2 = HEAP32[$0 + 100 >> 2];
 $1 = HEAP32[$0 + 96 >> 2];
 HEAP32[$0 + 32 >> 2] = $1;
 HEAP32[$0 + 36 >> 2] = $2;
 $1 = 1;
 if (!jsfFindFile($0 + 32 | 0, 0)) {
  jsfNameFromString($0 - -64 | 0, 112653);
  HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 88 >> 2];
  $1 = HEAP32[$0 + 84 >> 2];
  $2 = HEAP32[$0 + 80 >> 2];
  HEAP32[$0 + 16 >> 2] = $2;
  HEAP32[$0 + 20 >> 2] = $1;
  $2 = HEAP32[$0 + 76 >> 2];
  $1 = HEAP32[$0 + 72 >> 2];
  HEAP32[$0 + 8 >> 2] = $1;
  HEAP32[$0 + 12 >> 2] = $2;
  $1 = HEAP32[$0 + 68 >> 2];
  $2 = HEAP32[$0 + 64 >> 2];
  HEAP32[$0 >> 2] = $2;
  HEAP32[$0 + 4 >> 2] = $1;
  $1 = (jsfFindFile($0, 0) | 0) != 0;
 }
 __stack_pointer = $0 + 128 | 0;
 return $1;
}

function std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___reset_28TfLiteDepthwiseConvParams__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[std____2____compressed_pair_TfLiteDepthwiseConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2];
 $1 = HEAP32[$2 + 8 >> 2];
 HEAP32[std____2____compressed_pair_TfLiteDepthwiseConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2] = $1;
 if (HEAP32[$2 + 4 >> 2]) {
  tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__operator_28_29_28void__29(std____2____compressed_pair_TfLiteDepthwiseConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___second_28_29($0), HEAP32[$2 + 4 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function tflite__TfLiteTypeSizeOf_28TfLiteType_2c_20unsigned_20long__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  label$2: {
   label$3: {
    switch (HEAP32[$2 + 8 >> 2] - 1 | 0) {
    case 0:
     HEAP32[HEAP32[$2 + 4 >> 2] >> 2] = 4;
     break label$2;

    case 6:
     HEAP32[HEAP32[$2 + 4 >> 2] >> 2] = 2;
     break label$2;

    case 1:
     HEAP32[HEAP32[$2 + 4 >> 2] >> 2] = 4;
     break label$2;

    case 2:
     HEAP32[HEAP32[$2 + 4 >> 2] >> 2] = 1;
     break label$2;

    case 8:
     HEAP32[HEAP32[$2 + 4 >> 2] >> 2] = 1;
     break label$2;

    case 3:
     HEAP32[HEAP32[$2 + 4 >> 2] >> 2] = 8;
     break label$2;

    case 5:
     HEAP32[HEAP32[$2 + 4 >> 2] >> 2] = 1;
     break label$2;

    case 7:
     HEAP32[HEAP32[$2 + 4 >> 2] >> 2] = 8;
     break label$2;

    case 11:
     HEAP32[HEAP32[$2 + 4 >> 2] >> 2] = 16;
     break label$2;

    default:
     break label$3;
    }
   }
   HEAP32[$2 + 12 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 0;
 }
 return HEAP32[$2 + 12 >> 2];
}

function jswrap_graphics_setColorX($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 112 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 104 >> 2] = $0;
 HEAP32[$5 + 100 >> 2] = $1;
 HEAP32[$5 + 96 >> 2] = $2;
 HEAP32[$5 + 92 >> 2] = $3;
 HEAP8[$5 + 91 | 0] = $4;
 label$1: {
  if (!(graphicsGetFromVar($5 + 16 | 0, HEAP32[$5 + 104 >> 2]) & 1)) {
   HEAP32[$5 + 108 >> 2] = 0;
   break label$1;
  }
  HEAP32[$5 + 12 >> 2] = jswrap_graphics_toColor(HEAP32[$5 + 104 >> 2], HEAP32[$5 + 100 >> 2], HEAP32[$5 + 96 >> 2], HEAP32[$5 + 92 >> 2]);
  label$3: {
   if (HEAP8[$5 + 91 | 0] & 1) {
    $0 = HEAP32[$5 + 12 >> 2];
    HEAP8[$5 + 33 | 0] = $0;
    HEAP8[$5 + 34 | 0] = $0 >>> 8;
    HEAP8[$5 + 35 | 0] = $0 >>> 16;
    HEAP8[$5 + 36 | 0] = $0 >>> 24;
    break label$3;
   }
   $0 = HEAP32[$5 + 12 >> 2];
   HEAP8[$5 + 37 | 0] = $0;
   HEAP8[$5 + 38 | 0] = $0 >>> 8;
   HEAP8[$5 + 39 | 0] = $0 >>> 16;
   HEAP8[$5 + 40 | 0] = $0 >>> 24;
  }
  graphicsSetVar($5 + 16 | 0);
  HEAP32[$5 + 108 >> 2] = jsvLockAgain(HEAP32[$5 + 104 >> 2]);
 }
 __stack_pointer = $5 + 112 | 0;
 return HEAP32[$5 + 108 >> 2];
}

function tflite___28anonymous_20namespace_29__AllocationInfoBuilder__AddScratchBuffers_28tflite__internal__ScratchBufferHandle__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 $0 = HEAP32[$2 + 28 >> 2];
 HEAP32[$2 + 20 >> 2] = HEAP32[$0 + 8 >> 2];
 while (1) {
  if (HEAPU32[$2 + 20 >> 2] < HEAP32[$0 + 8 >> 2] + HEAP32[$0 + 12 >> 2] >>> 0) {
   HEAP32[$2 + 16 >> 2] = HEAP32[$0 + 16 >> 2] + Math_imul(HEAP32[$2 + 20 >> 2], 24);
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 24 >> 2] + Math_imul(HEAP32[$2 + 20 >> 2] - HEAP32[$0 + 8 >> 2] | 0, 12);
   HEAP32[HEAP32[$2 + 16 >> 2] + 4 >> 2] = HEAP32[$2 + 12 >> 2];
   HEAP32[HEAP32[$2 + 16 >> 2] >> 2] = HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2];
   HEAP32[HEAP32[$2 + 16 >> 2] + 8 >> 2] = HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2];
   HEAP32[HEAP32[$2 + 16 >> 2] + 12 >> 2] = HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2];
   HEAP8[HEAP32[$2 + 16 >> 2] + 20 | 0] = 1;
   HEAP32[HEAP32[$2 + 16 >> 2] + 16 >> 2] = -1;
   HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 20 >> 2] + 1;
   continue;
  }
  break;
 }
 return 0;
}

function jswrap_banglejs_project($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer + -64 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 60 >> 2] = $0;
 HEAPF64[$1 + 48 >> 3] = .017453292519943295;
 HEAPF64[$1 + 40 >> 3] = 85.0511287798;
 HEAPF64[$1 + 32 >> 3] = 6378137;
 HEAPF64[$1 + 24 >> 3] = jsvObjectGetFloatChild(HEAP32[$1 + 60 >> 2], 113287);
 HEAPF64[$1 + 16 >> 3] = jsvObjectGetFloatChild(HEAP32[$1 + 60 >> 2], 117142);
 if (HEAPF64[$1 + 24 >> 3] > 85.0511287798) {
  HEAPF64[$1 + 24 >> 3] = 85.0511287798;
 }
 if (HEAPF64[$1 + 24 >> 3] < -85.0511287798) {
  HEAPF64[$1 + 24 >> 3] = -85.0511287798;
 }
 HEAPF64[$1 + 8 >> 3] = sin(HEAPF64[$1 + 24 >> 3] * .017453292519943295);
 HEAP32[$1 + 4 >> 2] = jsvNewObject();
 if (HEAP32[$1 + 4 >> 2]) {
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 4 >> 2], 111928, jsvNewFromFloat(HEAPF64[$1 + 16 >> 3] * 6378137 * .017453292519943295));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 4 >> 2], 111841, jsvNewFromFloat(log((HEAPF64[$1 + 8 >> 3] + 1) / (1 - HEAPF64[$1 + 8 >> 3])) * 6378137 * .5));
 }
 __stack_pointer = $1 - -64 | 0;
 return HEAP32[$1 + 4 >> 2];
}

function jshTransmitMove($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 label$1: {
  if (!(HEAPU8[$2 + 14 | 0] != 17 & HEAPU8[$2 + 14 | 0] != 18)) {
   HEAP8[$2 + 13 | 0] = HEAPU8[$2 + 14 | 0] == 18 ? 17 : 18;
   HEAP32[$2 + 8 >> 2] = jshGetCharToTransmit(HEAPU8[$2 + 15 | 0]);
   while (1) {
    if (HEAP32[$2 + 8 >> 2] >= 0) {
     jshPushIOCharEvent(HEAPU8[$2 + 13 | 0], HEAP32[$2 + 8 >> 2] << 24 >> 24);
     HEAP32[$2 + 8 >> 2] = jshGetCharToTransmit(HEAPU8[$2 + 15 | 0]);
     continue;
    }
    break;
   }
   break label$1;
  }
  jshInterruptOff();
  HEAP8[$2 + 7 | 0] = HEAPU8[347147];
  while (1) {
   if (HEAPU8[$2 + 7 | 0] != HEAPU8[347146]) {
    if (HEAPU8[$2 + 15 | 0] == (HEAPU8[(HEAPU8[$2 + 7 | 0] << 1) + 347232 | 0] & 31)) {
     HEAP8[(HEAPU8[$2 + 7 | 0] << 1) + 347232 | 0] = HEAPU8[$2 + 14 | 0] | HEAPU8[(HEAPU8[$2 + 7 | 0] << 1) + 347232 | 0] & -32;
    }
    HEAP8[$2 + 7 | 0] = HEAPU8[$2 + 7 | 0] + 1;
    continue;
   }
   break;
  }
  jshInterruptOn();
 }
 __stack_pointer = $2 + 16 | 0;
}

function jsvStringIteratorClone($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$3 >> 2];
 $1 = HEAP32[$3 + 4 >> 2];
 $4 = $0;
 $5 = HEAP32[$2 + 12 >> 2];
 $0 = $5;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[$0 + 32 >> 2] = HEAP32[$3 + 32 >> 2];
 $0 = HEAP32[$3 + 28 >> 2];
 $1 = HEAP32[$3 + 24 >> 2];
 $4 = $1;
 $1 = $5;
 HEAP32[$1 + 24 >> 2] = $4;
 HEAP32[$1 + 28 >> 2] = $0;
 $1 = HEAP32[$3 + 20 >> 2];
 $0 = HEAP32[$3 + 16 >> 2];
 $4 = $0;
 $0 = $5;
 HEAP32[$0 + 16 >> 2] = $4;
 HEAP32[$0 + 20 >> 2] = $1;
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 $4 = $1;
 $1 = $5;
 HEAP32[$1 + 8 >> 2] = $4;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2]) {
  jsvLockAgain(HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2]);
  if (HEAP32[HEAP32[$2 + 8 >> 2] + 16 >> 2] == (HEAP32[$2 + 8 >> 2] + 20 | 0)) {
   HEAP32[HEAP32[$2 + 12 >> 2] + 16 >> 2] = HEAP32[$2 + 12 >> 2] + 20;
  }
 }
 __stack_pointer = $2 + 16 | 0;
}

function heatshrink_decoder_sink($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 label$1: {
  if (HEAP32[$4 + 12 >> 2] ? !HEAP32[$4 + 24 >> 2] | !HEAP32[$4 + 20 >> 2] : 1) {
   HEAP32[$4 + 28 >> 2] = -1;
   break label$1;
  }
  HEAP32[$4 + 8 >> 2] = 32 - HEAPU16[HEAP32[$4 + 24 >> 2] >> 1];
  if (!HEAP32[$4 + 8 >> 2]) {
   HEAP32[HEAP32[$4 + 12 >> 2] >> 2] = 0;
   HEAP32[$4 + 28 >> 2] = 1;
   break label$1;
  }
  if (HEAPU32[$4 + 8 >> 2] < HEAPU32[$4 + 16 >> 2]) {
   $0 = HEAP32[$4 + 8 >> 2];
  } else {
   $0 = HEAP32[$4 + 16 >> 2];
  }
  HEAP32[$4 + 16 >> 2] = $0;
  __memcpy(HEAPU16[HEAP32[$4 + 24 >> 2] >> 1] + (HEAP32[$4 + 24 >> 2] + 13 | 0) | 0, HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
  $0 = HEAP32[$4 + 24 >> 2];
  HEAP16[$0 >> 1] = HEAP32[$4 + 16 >> 2] + HEAPU16[$0 >> 1];
  HEAP32[HEAP32[$4 + 12 >> 2] >> 2] = HEAP32[$4 + 16 >> 2];
  HEAP32[$4 + 28 >> 2] = 0;
 }
 __stack_pointer = $4 + 32 | 0;
 return HEAP32[$4 + 28 >> 2];
}

function jswrap_storage_readJSON($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 80 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP8[$2 + 71 | 0] = $1;
 jsfNameFromVar($2 + 32 | 0, HEAP32[$2 + 72 >> 2]);
 HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 56 >> 2];
 $1 = HEAP32[$2 + 52 >> 2];
 $0 = HEAP32[$2 + 48 >> 2];
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 $0 = HEAP32[$2 + 44 >> 2];
 $1 = HEAP32[$2 + 40 >> 2];
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = $0;
 $1 = HEAP32[$2 + 36 >> 2];
 $0 = HEAP32[$2 + 32 >> 2];
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP32[$2 + 64 >> 2] = jsfReadFile($2, 0, 0);
 label$1: {
  if (!HEAP32[$2 + 64 >> 2]) {
   HEAP32[$2 + 76 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 28 >> 2] = jswrap_json_parse_ext(HEAP32[$2 + 64 >> 2], 512);
  jsvUnLock(HEAP32[$2 + 64 >> 2]);
  if (HEAP8[$2 + 71 | 0] & 1) {
   jsvUnLock(jspGetException());
   HEAP32[86758] = HEAP32[86758] & -33;
  }
  HEAP32[$2 + 76 >> 2] = HEAP32[$2 + 28 >> 2];
 }
 __stack_pointer = $2 + 80 | 0;
 return HEAP32[$2 + 76 >> 2];
}

function jswrap_dataview_constructor($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 label$1: {
  if (!(jsvIsArrayBuffer(HEAP32[$3 + 24 >> 2]) & 1 & HEAPU8[HEAP32[$3 + 24 >> 2] + 5 | 0] == 129)) {
   HEAP32[$3 >> 2] = HEAP32[$3 + 24 >> 2];
   jsExceptionHere(3, 113935, $3);
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = jspNewObject(0, 112174);
  if (HEAP32[$3 + 12 >> 2]) {
   jsvObjectSetChild(HEAP32[$3 + 12 >> 2], 116403, HEAP32[$3 + 24 >> 2]);
   jsvObjectSetChildAndUnLock(HEAP32[$3 + 12 >> 2], 113226, jsvNewFromInteger(HEAP32[$3 + 20 >> 2]));
   $1 = HEAP32[$3 + 12 >> 2];
   if (HEAP32[$3 + 16 >> 2]) {
    $0 = HEAP32[$3 + 16 >> 2];
   } else {
    $0 = jsvGetArrayBufferLength(HEAP32[$3 + 24 >> 2]);
   }
   jsvObjectSetChildAndUnLock($1, 118417, jsvNewFromInteger($0));
  }
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2];
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function jswrap_storage_writeJSON($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 80 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 72 >> 2] = $0;
 HEAP32[$2 + 68 >> 2] = $1;
 HEAP32[$2 + 64 >> 2] = jsvNewFromEmptyString_11();
 label$1: {
  if (!HEAP32[$2 + 64 >> 2]) {
   HEAP8[$2 + 79 | 0] = 0;
   break label$1;
  }
  jsfGetJSON(HEAP32[$2 + 68 >> 2], HEAP32[$2 + 64 >> 2], 5840);
  jsfNameFromVar($2 + 32 | 0, HEAP32[$2 + 72 >> 2]);
  $3 = HEAP32[$2 + 64 >> 2];
  HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 56 >> 2];
  $1 = HEAP32[$2 + 52 >> 2];
  $0 = HEAP32[$2 + 48 >> 2];
  HEAP32[$2 + 16 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = $1;
  $0 = HEAP32[$2 + 44 >> 2];
  $1 = HEAP32[$2 + 40 >> 2];
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 12 >> 2] = $0;
  $1 = HEAP32[$2 + 36 >> 2];
  $0 = HEAP32[$2 + 32 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP8[$2 + 63 | 0] = jsfWriteFile($2, $3, 0, 0, 0) & 1;
  jsvUnLock(HEAP32[$2 + 64 >> 2]);
  HEAP8[$2 + 79 | 0] = HEAP8[$2 + 63 | 0] & 1;
 }
 __stack_pointer = $2 + 80 | 0;
 return HEAP8[$2 + 79 | 0] & 1;
}

function jswrap_graphics_setFontSizeX($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 96 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 88 >> 2] = $0;
 HEAP32[$3 + 84 >> 2] = $1;
 HEAP8[$3 + 83 | 0] = $2;
 label$1: {
  if (!(graphicsGetFromVar($3 + 8 | 0, HEAP32[$3 + 88 >> 2]) & 1)) {
   HEAP32[$3 + 92 >> 2] = 0;
   break label$1;
  }
  if (HEAP8[$3 + 83 | 0] & 1) {
   if (HEAP32[$3 + 84 >> 2] <= 0) {
    HEAP32[$3 + 84 >> 2] = 1;
   }
   if (HEAP32[$3 + 84 >> 2] > 8191) {
    HEAP32[$3 + 84 >> 2] = 8191;
   }
  }
  if (!(!((HEAPU8[$3 + 33 | 0] | HEAPU8[$3 + 34 | 0] << 8) & 32768) | HEAP32[$3 + 84 >> 2] & 32768)) {
   jsvObjectRemoveChild(HEAP32[$3 + 88 >> 2], 125185);
   jsvObjectRemoveChild(HEAP32[$3 + 88 >> 2], 123636);
   jsvObjectRemoveChild(HEAP32[$3 + 88 >> 2], 124625);
   jsvObjectRemoveChild(HEAP32[$3 + 88 >> 2], 126582);
  }
  $0 = HEAP32[$3 + 84 >> 2];
  HEAP8[$3 + 33 | 0] = $0;
  HEAP8[$3 + 34 | 0] = $0 >>> 8;
  graphicsSetVar($3 + 8 | 0);
  HEAP32[$3 + 92 >> 2] = jsvLockAgain(HEAP32[$3 + 88 >> 2]);
 }
 __stack_pointer = $3 + 96 | 0;
 return HEAP32[$3 + 92 >> 2];
}

function std____2__unique_ptr_TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteSoftmaxParams__28_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 $3 = TfLiteSoftmaxParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteSoftmaxParams__28_29(HEAP32[$1 >> 2]);
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__BuiltinDataDeleter_28tflite__BuiltinDataAllocator__29($2 + 8 | 0, HEAP32[$1 >> 2]);
 std____2__unique_ptr_TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLiteSoftmaxParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $3, $2 + 8 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteReshapeParams__28_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 $3 = TfLiteReshapeParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteReshapeParams__28_29(HEAP32[$1 >> 2]);
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__BuiltinDataDeleter_28tflite__BuiltinDataAllocator__29($2 + 8 | 0, HEAP32[$1 >> 2]);
 std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLiteReshapeParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $3, $2 + 8 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function jswrap_flash_write($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 $2 = $3;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 label$1: {
  if (jsvIsUndefined(HEAP32[$2 + 12 >> 2]) & 1) {
   jsExceptionHere(1, 121698, 0);
   break label$1;
  }
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$2 >> 2] = jsvGetDataPointer(HEAP32[$2 + 12 >> 2], $2 + 4 | 0);
  if (!(HEAP32[$2 >> 2] | !HEAP32[$2 + 12 >> 2])) {
   HEAP32[$2 + 4 >> 2] = jsvIterateCallbackCount(HEAP32[$2 + 12 >> 2]);
   label$4: {
    if (HEAP32[$2 + 4 >> 2] + 256 >>> 0 > jsuGetFreeStack() >>> 0) {
     jsExceptionHere(1, 122957, 0);
     break label$4;
    }
    $3 = $3 - (HEAP32[$2 + 4 >> 2] + 15 & -16) | 0;
    __stack_pointer = $3;
    HEAP32[$2 >> 2] = $3;
    jsvIterateCallbackToBytes(HEAP32[$2 + 12 >> 2], HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2]);
   }
  }
  if (!HEAP32[$2 >> 2] | !HEAP32[$2 + 4 >> 2]) {
   break label$1;
  }
  jshFlashWriteAligned(HEAP32[$2 >> 2], HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function jsvIsStringNumericStrict($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer + -64 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 56 >> 2] = $0;
 jsvStringIteratorNew($1 + 16 | 0, HEAP32[$1 + 56 >> 2], 0);
 HEAP8[$1 + 15 | 0] = 0;
 HEAP8[$1 + 14 | 0] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 label$1: {
  while (1) {
   if (jsvStringIteratorHasChar_1($1 + 16 | 0) & 1) {
    HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
    HEAP8[$1 + 7 | 0] = jsvStringIteratorGetCharAndNext($1 + 16 | 0);
    if (!(isNumeric(HEAP8[$1 + 7 | 0]) & 1)) {
     jsvStringIteratorFree_1($1 + 16 | 0);
     HEAP8[$1 + 63 | 0] = 0;
     break label$1;
    }
    if (!(HEAP8[$1 + 15 | 0] & 1 | HEAP8[$1 + 7 | 0] != 48)) {
     HEAP8[$1 + 14 | 0] = 1;
    }
    if (HEAP8[$1 + 7 | 0] != 48) {
     HEAP8[$1 + 15 | 0] = 1;
    }
    continue;
   }
   break;
  }
  jsvStringIteratorFree_1($1 + 16 | 0);
  if (HEAP32[$1 + 8 >> 2] > 0) {
   $2 = 1;
   $2 = HEAP8[$1 + 14 | 0] & 1 ? HEAP32[$1 + 8 >> 2] == 1 : $2;
  }
  HEAP8[$1 + 63 | 0] = $2 & 1;
 }
 __stack_pointer = $1 - -64 | 0;
 return HEAP8[$1 + 63 | 0] & 1;
}

function jspEnsureIsPrototype($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 if (HEAP32[$2 + 24 >> 2]) {
  HEAP32[$2 + 20 >> 2] = jsvSkipName(HEAP32[$2 + 24 >> 2]);
  label$2: {
   if (jsvIsObject(HEAP32[$2 + 20 >> 2]) & 1) {
    break label$2;
   }
   if (jsvIsFunction(HEAP32[$2 + 20 >> 2]) & 1) {
    break label$2;
   }
   if (!(jsvIsUndefined(HEAP32[$2 + 20 >> 2]) & 1)) {
    HEAP32[$2 >> 2] = HEAP32[$2 + 20 >> 2];
    jsExceptionHere(3, 113714, $2);
   }
   jsvUnLock(HEAP32[$2 + 20 >> 2]);
   HEAP32[$2 + 20 >> 2] = jsvNewObject();
   HEAP32[$2 + 16 >> 2] = jsvSkipToLastName(HEAP32[$2 + 24 >> 2]);
   jsvSetValueOfName(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 20 >> 2]);
   jsvUnLock(HEAP32[$2 + 16 >> 2]);
  }
  HEAP32[$2 + 12 >> 2] = jsvFindOrAddChildFromString(HEAP32[$2 + 20 >> 2], 116071);
  if (HEAP32[$2 + 12 >> 2]) {
   jsvSetValueOfName(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 28 >> 2]);
  }
  jsvUnLock2(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 20 >> 2]);
 }
 __stack_pointer = $2 + 32 | 0;
}

function _jswrap_i2c_writeTo($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 48 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 44 >> 2] = $0;
 HEAP8[$6 + 43 | 0] = $1;
 HEAP32[$6 + 36 >> 2] = $2;
 HEAP8[$6 + 35 | 0] = $3;
 HEAP32[$6 + 28 >> 2] = $4;
 HEAP32[$6 + 24 >> 2] = $5;
 label$1: {
  if (!(HEAPU8[$6 + 43 | 0] < 26 | HEAPU8[$6 + 43 | 0] > 26)) {
   jshI2CWrite(HEAPU8[$6 + 43 | 0], HEAP32[$6 + 36 >> 2] & 255, HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2], HEAP8[$6 + 35 | 0] & 1);
   break label$1;
  }
  if (!HEAPU8[$6 + 43 | 0]) {
   HEAP32[$6 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$6 + 44 >> 2], 115339);
   if (jsi2cPopulateI2CInfo($6 + 16 | 0, HEAP32[$6 + 12 >> 2]) & 1) {
    HEAP8[$6 + 22 | 0] = jsvObjectGetBoolChild(HEAP32[$6 + 44 >> 2], 121290) & 1;
    jsi2cWrite($6 + 16 | 0, HEAP32[$6 + 36 >> 2] & 255, HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2], HEAP8[$6 + 35 | 0] & 1);
   }
   jsvUnLock2(jsvObjectSetChild(HEAP32[$6 + 44 >> 2], 121290, jsvNewFromBool(HEAP8[$6 + 22 | 0] & 1)), HEAP32[$6 + 12 >> 2]);
  }
 }
 __stack_pointer = $6 + 48 | 0;
}

function jsvAsFlatString($0) {
 var $1 = 0;
 $1 = __stack_pointer - 96 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 88 >> 2] = $0;
 label$1: {
  if (jsvIsFlatString(HEAP32[$1 + 88 >> 2]) & 1) {
   HEAP32[$1 + 92 >> 2] = jsvLockAgain(HEAP32[$1 + 88 >> 2]);
   break label$1;
  }
  HEAP32[$1 + 84 >> 2] = jsvAsString(HEAP32[$1 + 88 >> 2]);
  HEAP32[$1 + 80 >> 2] = jsvGetStringLength(HEAP32[$1 + 84 >> 2]);
  HEAP32[$1 + 76 >> 2] = jsvNewFlatStringOfLength(HEAP32[$1 + 80 >> 2]);
  if (HEAP32[$1 + 76 >> 2]) {
   jsvStringIteratorNew($1 + 40 | 0, HEAP32[$1 + 84 >> 2], 0);
   jsvStringIteratorNew($1, HEAP32[$1 + 76 >> 2], 0);
   while (1) {
    $0 = HEAP32[$1 + 80 >> 2];
    HEAP32[$1 + 80 >> 2] = $0 - 1;
    if ($0) {
     jsvStringIteratorSetCharAndNext($1, jsvStringIteratorGetCharAndNext($1 + 40 | 0) << 24 >> 24);
     continue;
    }
    break;
   }
   jsvStringIteratorFree_1($1 + 40 | 0);
   jsvStringIteratorFree_1($1);
  }
  jsvUnLock(HEAP32[$1 + 84 >> 2]);
  HEAP32[$1 + 92 >> 2] = HEAP32[$1 + 76 >> 2];
 }
 __stack_pointer = $1 + 96 | 0;
 return HEAP32[$1 + 92 >> 2];
}

function std____2__unique_ptr_TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___reset_28TfLiteSoftmaxParams__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[std____2____compressed_pair_TfLiteSoftmaxParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2];
 $1 = HEAP32[$2 + 8 >> 2];
 HEAP32[std____2____compressed_pair_TfLiteSoftmaxParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2] = $1;
 if (HEAP32[$2 + 4 >> 2]) {
  tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__operator_28_29_28void__29(std____2____compressed_pair_TfLiteSoftmaxParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___second_28_29($0), HEAP32[$2 + 4 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___reset_28TfLiteReshapeParams__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[std____2____compressed_pair_TfLiteReshapeParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2];
 $1 = HEAP32[$2 + 8 >> 2];
 HEAP32[std____2____compressed_pair_TfLiteReshapeParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2] = $1;
 if (HEAP32[$2 + 4 >> 2]) {
  tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__operator_28_29_28void__29(std____2____compressed_pair_TfLiteReshapeParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___second_28_29($0), HEAP32[$2 + 4 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function tflite__GreedyMemoryPlanner__GreedyMemoryPlanner_28unsigned_20char__2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 tflite__MemoryPlanner__MemoryPlanner_28_29($0);
 HEAP32[$0 >> 2] = 172880;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP8[$0 + 40 | 0] = 1;
 HEAP32[$0 + 4 >> 2] = HEAPU32[$3 + 4 >> 2] / (tflite__GreedyMemoryPlanner__per_buffer_size_28_29() >>> 0);
 HEAP32[$3 >> 2] = HEAP32[$3 + 8 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + (HEAP32[$0 + 4 >> 2] << 4);
 HEAP32[$0 + 16 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + (HEAP32[$0 + 4 >> 2] << 2);
 HEAP32[$0 + 20 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + (HEAP32[$0 + 4 >> 2] << 2);
 HEAP32[$0 + 24 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + Math_imul(HEAP32[$0 + 4 >> 2], 12);
 HEAP32[$0 + 36 >> 2] = HEAP32[$3 >> 2];
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function jsi2cWrite($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 48 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 40 >> 2] = $0;
 HEAP8[$5 + 39 | 0] = $1;
 HEAP32[$5 + 32 >> 2] = $2;
 HEAP32[$5 + 28 >> 2] = $3;
 HEAP8[$5 + 27 | 0] = $4;
 label$1: {
  if (!(HEAPU8[HEAP32[$5 + 40 >> 2] + 4 | 0] != 255 & HEAPU8[HEAP32[$5 + 40 >> 2] + 5 | 0] != 255)) {
   HEAP8[$5 + 47 | 0] = 0;
   break label$1;
  }
  i2c_initstruct($5 + 8 | 0, HEAP32[$5 + 40 >> 2]);
  i2c_start($5 + 8 | 0);
  if (!(i2c_wr($5 + 8 | 0, HEAPU8[$5 + 39 | 0] << 1) & 1)) {
   HEAP8[$5 + 47 | 0] = 0;
   break label$1;
  }
  HEAP32[$5 + 4 >> 2] = 0;
  while (1) {
   if (HEAP32[$5 + 4 >> 2] < HEAP32[$5 + 32 >> 2]) {
    i2c_wr($5 + 8 | 0, HEAPU8[HEAP32[$5 + 28 >> 2] + HEAP32[$5 + 4 >> 2] | 0]);
    HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP8[$5 + 27 | 0] & 1) {
   i2c_stop($5 + 8 | 0);
  }
  HEAP8[HEAP32[$5 + 40 >> 2] + 6 | 0] = HEAP8[$5 + 10 | 0] & 1;
  HEAP8[$5 + 47 | 0] = 1;
 }
 __stack_pointer = $5 + 48 | 0;
 return HEAP8[$5 + 47 | 0] & 1;
}

function jswrap_storage_getStats($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 43 | 0] = $0;
 HEAP32[$1 + 36 >> 2] = jsvNewObject();
 label$1: {
  if (!HEAP32[$1 + 36 >> 2]) {
   HEAP32[$1 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 32 >> 2] = 0;
  jsfGetStorageStats($1, HEAP32[$1 + 32 >> 2], 1);
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 36 >> 2], 115444, jsvNewFromInteger(HEAP32[$1 + 16 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 36 >> 2], 115476, jsvNewFromInteger(HEAP32[$1 + 20 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 36 >> 2], 115466, jsvNewFromInteger(HEAP32[$1 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 36 >> 2], 112771, jsvNewFromInteger(HEAP32[$1 + 4 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 36 >> 2], 115455, jsvNewFromInteger(HEAP32[$1 + 8 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 36 >> 2], 112723, jsvNewFromInteger(HEAP32[$1 + 12 >> 2]));
  HEAP32[$1 + 44 >> 2] = HEAP32[$1 + 36 >> 2];
 }
 __stack_pointer = $1 + 48 | 0;
 return HEAP32[$1 + 44 >> 2];
}

function void_20tflite__CalculateActivationRange_float__28TfLiteFusedActivation_2c_20float__2c_20float__29($0, $1, $2) {
 var $3 = 0, $4 = Math_fround(0);
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  if (HEAP32[$3 + 12 >> 2] == 1) {
   HEAPF32[HEAP32[$3 + 8 >> 2] >> 2] = 0;
   $4 = std____2__numeric_limits_float___max_28_29();
   HEAPF32[HEAP32[$3 + 4 >> 2] >> 2] = $4;
   break label$1;
  }
  label$3: {
   if (HEAP32[$3 + 12 >> 2] == 3) {
    HEAPF32[HEAP32[$3 + 8 >> 2] >> 2] = 0;
    HEAPF32[HEAP32[$3 + 4 >> 2] >> 2] = 6;
    break label$3;
   }
   label$5: {
    if (HEAP32[$3 + 12 >> 2] == 2) {
     HEAPF32[HEAP32[$3 + 8 >> 2] >> 2] = -1;
     HEAPF32[HEAP32[$3 + 4 >> 2] >> 2] = 1;
     break label$5;
    }
    $4 = std____2__numeric_limits_float___lowest_28_29();
    HEAPF32[HEAP32[$3 + 8 >> 2] >> 2] = $4;
    $4 = std____2__numeric_limits_float___max_28_29();
    HEAPF32[HEAP32[$3 + 4 >> 2] >> 2] = $4;
   }
  }
 }
 __stack_pointer = $3 + 16 | 0;
}

function std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLitePoolParams__28_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 $3 = TfLitePoolParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLitePoolParams__28_29(HEAP32[$1 >> 2]);
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__BuiltinDataDeleter_28tflite__BuiltinDataAllocator__29($2 + 8 | 0, HEAP32[$1 >> 2]);
 std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLitePoolParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $3, $2 + 8 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLiteFullyConnectedParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_TfLiteFullyConnectedParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_____compressed_pair_TfLiteFullyConnectedParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28TfLiteFullyConnectedParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0, $3 + 8 | 0, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__Allocate_TfLiteConvParams__28_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 $3 = TfLiteConvParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteConvParams__28_29(HEAP32[$1 >> 2]);
 tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__BuiltinDataDeleter_28tflite__BuiltinDataAllocator__29($2 + 8 | 0, HEAP32[$1 >> 2]);
 std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLiteConvParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $3, $2 + 8 | 0);
 __stack_pointer = $2 + 16 | 0;
}

function jsvObjectGetChild($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP16[$3 + 18 >> 1] = $2;
 label$1: {
  if (!HEAP32[$3 + 24 >> 2]) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  label$3: {
   if (HEAPU16[$3 + 18 >> 1]) {
    $0 = jsvFindOrAddChildFromString(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
    break label$3;
   }
   $0 = jsvFindChildFromString(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
  }
  HEAP32[$3 + 12 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = jsvSkipName(HEAP32[$3 + 12 >> 2]);
  if (!(!HEAP32[$3 + 12 >> 2] | (HEAP32[$3 + 8 >> 2] | !HEAPU16[$3 + 18 >> 1]))) {
   HEAP32[$3 + 8 >> 2] = jsvNewWithFlags(HEAPU16[$3 + 18 >> 1]);
   jsvSetValueOfName(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
   jsvUnLock(HEAP32[$3 + 12 >> 2]);
   HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 8 >> 2];
   break label$1;
  }
  jsvUnLock(HEAP32[$3 + 12 >> 2]);
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 8 >> 2];
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function numericEscapeChar($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$3 + 12 >> 2] = $0 + 1;
 HEAP8[$0 | 0] = 92;
 label$1: {
  if (HEAP8[$3 + 7 | 0] & 1) {
   $0 = HEAP32[$3 + 12 >> 2];
   HEAP32[$3 + 12 >> 2] = $0 + 1;
   HEAP8[$0 | 0] = 117;
   $1 = dtohex(HEAP32[$3 + 8 >> 2] >> 12);
   $0 = HEAP32[$3 + 12 >> 2];
   HEAP32[$3 + 12 >> 2] = $0 + 1;
   HEAP8[$0 | 0] = $1;
   $1 = dtohex(HEAP32[$3 + 8 >> 2] >> 8);
   $0 = HEAP32[$3 + 12 >> 2];
   HEAP32[$3 + 12 >> 2] = $0 + 1;
   HEAP8[$0 | 0] = $1;
   break label$1;
  }
  $0 = HEAP32[$3 + 12 >> 2];
  HEAP32[$3 + 12 >> 2] = $0 + 1;
  HEAP8[$0 | 0] = 120;
 }
 $1 = dtohex(HEAP32[$3 + 8 >> 2] >> 4);
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$3 + 12 >> 2] = $0 + 1;
 HEAP8[$0 | 0] = $1;
 $1 = dtohex(HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$3 + 12 >> 2] = $0 + 1;
 HEAP8[$0 | 0] = $1;
 __stack_pointer = $3 + 16 | 0;
 return HEAP32[$3 + 12 >> 2];
}

function jsvGetLineAndCol($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 80 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 76 >> 2] = $0;
 HEAP32[$4 + 72 >> 2] = $1;
 HEAP32[$4 + 68 >> 2] = $2;
 HEAP32[$4 + 64 >> 2] = $3;
 HEAP32[$4 + 60 >> 2] = 1;
 HEAP32[$4 + 56 >> 2] = 1;
 HEAP32[$4 + 52 >> 2] = 0;
 jsvStringIteratorNew($4 + 16 | 0, HEAP32[$4 + 76 >> 2], 0);
 while (1) {
  label$2: {
   if (!(jsvStringIteratorHasChar_1($4 + 16 | 0) & 1)) {
    break label$2;
   }
   HEAP8[$4 + 15 | 0] = jsvStringIteratorGetCharAndNext($4 + 16 | 0);
   if (HEAP32[$4 + 52 >> 2] == HEAP32[$4 + 72 >> 2]) {
    break label$2;
   }
   HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 60 >> 2] + 1;
   if (HEAP8[$4 + 15 | 0] == 10) {
    HEAP32[$4 + 60 >> 2] = 1;
    HEAP32[$4 + 56 >> 2] = HEAP32[$4 + 56 >> 2] + 1;
   }
   HEAP32[$4 + 52 >> 2] = HEAP32[$4 + 52 >> 2] + 1;
   continue;
  }
  break;
 }
 jsvStringIteratorFree_1($4 + 16 | 0);
 HEAP32[HEAP32[$4 + 68 >> 2] >> 2] = HEAP32[$4 + 56 >> 2];
 HEAP32[HEAP32[$4 + 64 >> 2] >> 2] = HEAP32[$4 + 60 >> 2];
 __stack_pointer = $4 + 80 | 0;
}

function jshPushIOWatchEvent($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 31 | 0] = $0;
 HEAP8[$1 + 30 | 0] = jshGetWatchedPinState(HEAPU8[$1 + 31 | 0]) & 1;
 HEAP32[$1 + 24 >> 2] = HEAPU8[$1 + 31 | 0] - 1;
 label$1: {
  if (HEAP32[(HEAP32[$1 + 24 >> 2] << 2) + 347168 >> 2]) {
   label$3: {
    if ((HEAP32[(HEAP32[$1 + 24 >> 2] << 2) + 347168 >> 2] & -256) == -256) {
     HEAP8[$1 + 23 | 0] = HEAP32[(HEAP32[$1 + 24 >> 2] << 2) + 347168 >> 2];
     if (jshPinGetValue(HEAPU8[$1 + 23 | 0]) & 1) {
      HEAP8[$1 + 31 | 0] = HEAPU8[$1 + 31 | 0] | 64;
     }
     break label$3;
    }
    FUNCTION_TABLE[HEAP32[(HEAP32[$1 + 24 >> 2] << 2) + 347168 >> 2]](HEAP8[$1 + 30 | 0] & 1, HEAPU8[$1 + 31 | 0]);
    break label$1;
   }
  }
  if (HEAP8[$1 + 30 | 0] & 1) {
   HEAP8[$1 + 31 | 0] = HEAPU8[$1 + 31 | 0] | 32;
  }
  HEAP32[$1 + 8 >> 2] = jshGetSystemTime();
  HEAP32[$1 + 12 >> 2] = i64toi32_i32$HIGH_BITS;
  jshPushIOEvent(HEAPU8[$1 + 31 | 0], HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]);
 }
 __stack_pointer = $1 + 32 | 0;
}

function tflite__ops__micro__activations__SoftmaxFloat_28TfLiteEvalTensor_20const__2c_20TfLiteEvalTensor__2c_20tflite__SoftmaxParams_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer + -64 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 60 >> 2] = $0;
 HEAP32[$3 + 56 >> 2] = $1;
 HEAP32[$3 + 52 >> 2] = $2;
 $0 = HEAP32[$3 + 52 >> 2];
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($3 + 24 | 0, HEAP32[$3 + 60 >> 2]);
 $1 = float_20const__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor_20const__29(HEAP32[$3 + 60 >> 2]);
 tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($3, HEAP32[$3 + 56 >> 2]);
 tflite__reference_ops__Softmax_28tflite__SoftmaxParams_20const__2c_20tflite__RuntimeShape_20const__2c_20float_20const__2c_20tflite__RuntimeShape_20const__2c_20float__29($0, $3 + 24 | 0, $1, $3, float__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor__29(HEAP32[$3 + 56 >> 2]));
 tflite__RuntimeShape___RuntimeShape_28_29($3);
 tflite__RuntimeShape___RuntimeShape_28_29($3 + 24 | 0);
 __stack_pointer = $3 - -64 | 0;
}

function std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLiteDepthwiseConvParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_TfLiteDepthwiseConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_____compressed_pair_TfLiteDepthwiseConvParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28TfLiteDepthwiseConvParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0, $3 + 8 | 0, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function tflite__MicroAllocator__Create_28unsigned_20char__2c_20unsigned_20long_2c_20tflite__ErrorReporter__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP32[$3 + 16 >> 2] = tflite__AlignPointerUp_28unsigned_20char__2c_20unsigned_20long_29(HEAP32[$3 + 28 >> 2], 16);
 if (HEAP32[$3 + 16 >> 2] != HEAP32[$3 + 28 >> 2]) {
  $0 = HEAP32[$3 + 20 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$3 + 16 >> 2] - HEAP32[$3 + 28 >> 2];
  tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 127564, $3);
 }
 HEAP32[$3 + 12 >> 2] = (HEAP32[$3 + 28 >> 2] + HEAP32[$3 + 24 >> 2] | 0) - HEAP32[$3 + 16 >> 2];
 $0 = tflite__MicroAllocator__Create_28tflite__SimpleMemoryAllocator__2c_20tflite__ErrorReporter__29(tflite__SimpleMemoryAllocator__Create_28tflite__ErrorReporter__2c_20unsigned_20char__2c_20unsigned_20long_29(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2], HEAP32[$3 + 12 >> 2]), HEAP32[$3 + 20 >> 2]);
 __stack_pointer = $3 + 32 | 0;
 return $0;
}

function std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___reset_28TfLitePoolParams__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[std____2____compressed_pair_TfLitePoolParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2];
 $1 = HEAP32[$2 + 8 >> 2];
 HEAP32[std____2____compressed_pair_TfLitePoolParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2] = $1;
 if (HEAP32[$2 + 4 >> 2]) {
  tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__operator_28_29_28void__29(std____2____compressed_pair_TfLitePoolParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___second_28_29($0), HEAP32[$2 + 4 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___reset_28TfLiteConvParams__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[std____2____compressed_pair_TfLiteConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2];
 $1 = HEAP32[$2 + 8 >> 2];
 HEAP32[std____2____compressed_pair_TfLiteConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2] = $1;
 if (HEAP32[$2 + 4 >> 2]) {
  tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__operator_28_29_28void__29(std____2____compressed_pair_TfLiteConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___second_28_29($0), HEAP32[$2 + 4 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function jsvArrayBufferIteratorGetValueAndRewind($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 44 >> 2] = $0;
 jsvStringIteratorClone($1 + 8 | 0, HEAP32[$1 + 44 >> 2]);
 HEAP32[$1 + 4 >> 2] = jsvArrayBufferIteratorGetValue(HEAP32[$1 + 44 >> 2], 0);
 jsvStringIteratorFree_2(HEAP32[$1 + 44 >> 2]);
 $2 = HEAP32[$1 + 12 >> 2];
 $0 = HEAP32[$1 + 8 >> 2];
 $3 = $0;
 $4 = HEAP32[$1 + 44 >> 2];
 $0 = $4;
 HEAP32[$0 >> 2] = $3;
 HEAP32[$0 + 4 >> 2] = $2;
 HEAP32[$0 + 32 >> 2] = HEAP32[$1 + 40 >> 2];
 $0 = HEAP32[$1 + 36 >> 2];
 $2 = HEAP32[$1 + 32 >> 2];
 $3 = $2;
 $2 = $4;
 HEAP32[$2 + 24 >> 2] = $3;
 HEAP32[$2 + 28 >> 2] = $0;
 $2 = HEAP32[$1 + 28 >> 2];
 $0 = HEAP32[$1 + 24 >> 2];
 $3 = $0;
 $0 = $4;
 HEAP32[$0 + 16 >> 2] = $3;
 HEAP32[$0 + 20 >> 2] = $2;
 $0 = HEAP32[$1 + 20 >> 2];
 $2 = HEAP32[$1 + 16 >> 2];
 $3 = $2;
 $2 = $4;
 HEAP32[$2 + 8 >> 2] = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[HEAP32[$1 + 44 >> 2] + 52 | 0] = 0;
 __stack_pointer = $1 + 48 | 0;
 return HEAP32[$1 + 4 >> 2];
}

function jspGetNamedVariable($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if ((HEAP32[86758] & 63) == 1) {
   $0 = jspeiFindInScopes(HEAP32[$1 + 12 >> 2]);
   break label$1;
  }
  $0 = 0;
 }
 HEAP32[$1 + 8 >> 2] = $0;
 if (!(HEAP32[$1 + 8 >> 2] | (HEAP32[86758] & 63) != 1)) {
  label$4: {
   if (jswIsBuiltInObject(HEAP32[$1 + 12 >> 2]) & 1) {
    HEAP32[$1 + 4 >> 2] = jswFindBuiltInFunction(0, HEAP32[$1 + 12 >> 2]);
    if (!HEAP32[$1 + 4 >> 2]) {
     HEAP32[$1 + 4 >> 2] = jspNewBuiltin(HEAP32[$1 + 12 >> 2]);
    }
    if (HEAP32[$1 + 4 >> 2]) {
     HEAP32[$1 + 8 >> 2] = jsvAddNamedChild(HEAP32[86750], HEAP32[$1 + 4 >> 2], HEAP32[$1 + 12 >> 2]);
     jsvUnLock(HEAP32[$1 + 4 >> 2]);
    }
    break label$4;
   }
   HEAP32[$1 + 8 >> 2] = jswFindBuiltInFunction(0, HEAP32[$1 + 12 >> 2]);
   if (!HEAP32[$1 + 8 >> 2]) {
    HEAP32[$1 + 8 >> 2] = jsvNewNameFromString(HEAP32[$1 + 12 >> 2]);
   }
  }
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jswrap_promise_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP32[$1 + 24 >> 2] = jspromise_create();
 if (HEAP32[$1 + 24 >> 2]) {
  HEAP32[$1 + 16 >> 2] = jsvNewNativeFunction(624, 32776);
  HEAP32[$1 + 20 >> 2] = jsvNewNativeFunction(625, 32776);
  if (HEAP32[$1 + 16 >> 2]) {
   jsvObjectSetChild(HEAP32[$1 + 16 >> 2], 115428, HEAP32[$1 + 24 >> 2]);
  }
  if (HEAP32[$1 + 20 >> 2]) {
   jsvObjectSetChild(HEAP32[$1 + 20 >> 2], 115428, HEAP32[$1 + 24 >> 2]);
  }
  HEAP32[$1 + 12 >> 2] = HEAP32[86758];
  if (HEAP32[$1 + 28 >> 2]) {
   jsvUnLock(jspeFunctionCall(HEAP32[$1 + 28 >> 2], 0, HEAP32[$1 + 24 >> 2], 0, 2, $1 + 16 | 0));
  }
  HEAP32[86758] = HEAP32[$1 + 12 >> 2];
  jsvUnLockMany(2, $1 + 16 | 0);
  HEAP32[$1 + 8 >> 2] = jspGetException();
  if (HEAP32[$1 + 8 >> 2]) {
   _jswrap_promise_queuereject(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 8 >> 2]);
   jsvUnLock(HEAP32[$1 + 8 >> 2]);
  }
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 24 >> 2];
}

function jsvIteratorClone($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
 label$1: {
  label$2: {
   switch (HEAP32[HEAP32[$2 + 8 >> 2] >> 2] - 1 | 0) {
   case 3:
    HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] + 12 >> 2];
    $0 = jsvLockAgain(HEAP32[HEAP32[$2 + 8 >> 2] + 8 >> 2]);
    HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2] = $0;
    jsvObjectIteratorClone(HEAP32[$2 + 12 >> 2] + 4 | 0, HEAP32[$2 + 8 >> 2] + 4 | 0);
    break label$1;

   case 1:
    jsvObjectIteratorClone(HEAP32[$2 + 12 >> 2] + 4 | 0, HEAP32[$2 + 8 >> 2] + 4 | 0);
    break label$1;

   case 0:
    jsvStringIteratorClone(HEAP32[$2 + 12 >> 2] + 4 | 0, HEAP32[$2 + 8 >> 2] + 4 | 0);
    break label$1;

   case 2:
    break label$2;

   default:
    break label$1;
   }
  }
  jsvArrayBufferIteratorClone(HEAP32[$2 + 12 >> 2] + 4 | 0, HEAP32[$2 + 8 >> 2] + 4 | 0);
 }
 __stack_pointer = $2 + 16 | 0;
}

function tflite__MatchingFlatSize_28tflite__RuntimeShape_20const__2c_20tflite__RuntimeShape_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 label$1: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$2 + 12 >> 2]) | 0) != (tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$2 + 8 >> 2]) | 0)) {
   break label$1;
  }
 }
 HEAP32[$2 + 4 >> 2] = tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$2 + 12 >> 2]);
 HEAP32[$2 >> 2] = 0;
 while (1) {
  if (HEAP32[$2 >> 2] < HEAP32[$2 + 4 >> 2]) {
   label$4: {
    if ((tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$2 + 12 >> 2], HEAP32[$2 >> 2]) | 0) != (tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$2 + 8 >> 2], HEAP32[$2 >> 2]) | 0)) {
     break label$4;
    }
   }
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
   continue;
  }
  break;
 }
 $0 = tflite__RuntimeShape__FlatSize_28_29_20const(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function _jswrap_graphics_getFontHeightInternal($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (!HEAP32[HEAP32[$2 + 4 >> 2] >> 2]) {
   HEAP32[$2 + 12 >> 2] = HEAPU16[HEAP32[$2 + 4 >> 2] + 8 >> 1];
   break label$1;
  }
  if (HEAP32[HEAP32[$2 + 4 >> 2] >> 2] == 8192) {
   HEAP32[$2 + 12 >> 2] = Math_imul(HEAPU16[HEAP32[$2 + 4 >> 2] + 8 >> 1], 6);
   break label$1;
  }
  if (HEAP32[HEAP32[$2 + 4 >> 2] >> 2] == 16384) {
   HEAP32[$2 + 12 >> 2] = HEAPU16[HEAP32[$2 + 4 >> 2] + 8 >> 1] << 3;
   break label$1;
  }
  if (HEAP32[HEAP32[$2 + 4 >> 2] >> 2] & 32768) {
   $0 = HEAP32[$2 + 8 >> 2];
   HEAP32[$2 + 12 >> 2] = Math_imul(HEAPU16[HEAP32[$2 + 4 >> 2] + 8 >> 1], jsvGetIntegerAndUnLock(jsvObjectGetChildIfExists(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 124625)));
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jswrap_banglejs_setLCDPower($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 jswrap_banglejs_setLCDPowerController(HEAP8[$1 + 15 | 0] & 1);
 jswrap_banglejs_setLCDPowerBacklight(HEAP8[$1 + 15 | 0] & 1);
 if ((HEAP8[$1 + 15 | 0] & 1) != ((HEAP32[93413] & 65536) != 0 | 0)) {
  HEAP32[$1 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[86750], 120138);
  if (HEAP32[$1 + 8 >> 2]) {
   HEAP32[$1 + 4 >> 2] = jsvNewFromBool(HEAP8[$1 + 15 | 0] & 1);
   jsiQueueObjectCallbacks(HEAP32[$1 + 8 >> 2], 116203, $1 + 4 | 0, 1);
   jsvUnLock(HEAP32[$1 + 4 >> 2]);
  }
  jsvUnLock(HEAP32[$1 + 8 >> 2]);
 }
 label$3: {
  if (HEAP8[$1 + 15 | 0] & 1) {
   if (!(HEAP32[93415] <= 0 & HEAP32[93417] <= 0)) {
    HEAP16[186838] = 0;
   }
   HEAP32[93413] = HEAP32[93413] | 65536;
   break label$3;
  }
  HEAP32[93413] = HEAP32[93413] & -65537;
  if (!(HEAP32[93418] <= 0 | HEAP32[93418] > HEAP32[93415])) {
   _jswrap_banglejs_setLocked(1, 121831);
  }
 }
 __stack_pointer = $1 + 16 | 0;
}

function jsiIsWatchingPin($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 30 | 0] = $0;
 label$1: {
  if (jshGetPinShouldStayWatched(HEAPU8[$1 + 30 | 0]) & 1) {
   HEAP8[$1 + 31 | 0] = 1;
   break label$1;
  }
  HEAP8[$1 + 29 | 0] = 0;
  HEAP32[$1 + 24 >> 2] = jsvLock(HEAPU16[173533]);
  jsvObjectIteratorNew($1 + 16 | 0, HEAP32[$1 + 24 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_3($1 + 16 | 0) & 1) {
    HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetValue_3($1 + 16 | 0);
    HEAP32[$1 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 12 >> 2], 117541);
    if ((jshGetPinFromVar(HEAP32[$1 + 8 >> 2]) & 255) == HEAPU8[$1 + 30 | 0]) {
     HEAP8[$1 + 29 | 0] = 1;
    }
    jsvUnLock2(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]);
    jsvObjectIteratorNext($1 + 16 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_3($1 + 16 | 0);
  jsvUnLock(HEAP32[$1 + 24 >> 2]);
  HEAP8[$1 + 31 | 0] = HEAP8[$1 + 29 | 0] & 1;
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP8[$1 + 31 | 0] & 1;
}

function jsiExecuteEvents() {
 var $0 = 0;
 $0 = __stack_pointer - 32 | 0;
 __stack_pointer = $0;
 HEAP8[$0 + 31 | 0] = (jsvArrayIsEmpty(HEAP32[86765]) ^ -1) & 1;
 if (HEAP8[$0 + 31 | 0] & 1) {
  jsiSetBusy(1, 1);
 }
 while (1) {
  if ((jsvArrayIsEmpty(HEAP32[86765]) ^ -1) & 1) {
   HEAP32[$0 + 24 >> 2] = jsvSkipNameAndUnLock(jsvArrayPopFirst(HEAP32[86765]));
   HEAP32[$0 + 20 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 24 >> 2], 122838);
   HEAP32[$0 + 16 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 24 >> 2], 115423);
   HEAP32[$0 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$0 + 24 >> 2], 115433);
   jsvUnLock(HEAP32[$0 + 24 >> 2]);
   jsiExecuteEventCallbackArgsArray(HEAP32[$0 + 16 >> 2], HEAP32[$0 + 20 >> 2], HEAP32[$0 + 12 >> 2]);
   jsvUnLock(HEAP32[$0 + 12 >> 2]);
   jsvUnLock2(HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2]);
   continue;
  }
  break;
 }
 if (HEAP8[$0 + 31 | 0] & 1) {
  jsiSetBusy(1, 0);
  if (jspIsInterrupted() & 1) {
   HEAP16[173534] = HEAPU16[173534] | 32768;
  }
 }
 __stack_pointer = $0 + 32 | 0;
}

function jswrap_modules_getCached() {
 var $0 = 0;
 $0 = __stack_pointer - 32 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 24 >> 2] = jsvNewEmptyArray();
 label$1: {
  if (!HEAP32[$0 + 24 >> 2]) {
   HEAP32[$0 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$0 + 20 >> 2] = jswrap_modules_getModuleList();
  if (!HEAP32[$0 + 20 >> 2]) {
   HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 24 >> 2];
   break label$1;
  }
  jsvObjectIteratorNew($0 + 16 | 0, HEAP32[$0 + 20 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_11($0 + 16 | 0) & 1) {
    HEAP32[$0 + 12 >> 2] = jsvObjectIteratorGetKey_7($0 + 16 | 0);
    HEAP32[$0 + 8 >> 2] = jsvCopyNameOnly(HEAP32[$0 + 12 >> 2], 0, 0);
    jsvArrayPushAndUnLock(HEAP32[$0 + 24 >> 2], HEAP32[$0 + 8 >> 2]);
    jsvUnLock(HEAP32[$0 + 12 >> 2]);
    jsvObjectIteratorNext($0 + 16 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_11($0 + 16 | 0);
  jsvUnLock(HEAP32[$0 + 20 >> 2]);
  HEAP32[$0 + 28 >> 2] = HEAP32[$0 + 24 >> 2];
 }
 __stack_pointer = $0 + 32 | 0;
 return HEAP32[$0 + 28 >> 2];
}

function std____2__unique_ptr_TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLiteSoftmaxParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_TfLiteSoftmaxParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_____compressed_pair_TfLiteSoftmaxParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28TfLiteSoftmaxParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0, $3 + 8 | 0, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLiteReshapeParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_TfLiteReshapeParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_____compressed_pair_TfLiteReshapeParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28TfLiteReshapeParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0, $3 + 8 | 0, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function tflite__MatchingFlatSizeSkipDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP32[$3 + 16 >> 2] = tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$3 + 28 >> 2]);
 HEAP32[$3 + 12 >> 2] = 0;
 while (1) {
  if (HEAP32[$3 + 12 >> 2] < HEAP32[$3 + 16 >> 2]) {
   if (HEAP32[$3 + 12 >> 2] != HEAP32[$3 + 24 >> 2]) {
    label$4: {
     if ((tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 12 >> 2]) | 0) != (tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 12 >> 2]) | 0)) {
      break label$4;
     }
    }
   }
   HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 $0 = tflite__FlatSizeSkipDim_28tflite__RuntimeShape_20const__2c_20int_29(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2]);
 __stack_pointer = $3 + 32 | 0;
 return $0;
}

function jslSkipWhiteSpace() {
 var $0 = 0;
 while (1) {
  label$2: {
   while (1) {
    if (isWhitespaceInline(HEAP8[HEAP32[44743]]) & 1) {
     jslGetNextCh();
     continue;
    }
    break;
   }
   if (HEAP8[HEAP32[44743]] != 47) {
    break label$2;
   }
   if ((jslNextCh() & 255) == 47) {
    while (1) {
     $0 = 0;
     $0 = HEAP8[HEAP32[44743]] ? HEAP8[HEAP32[44743]] != 10 : $0;
     if ($0) {
      jslGetNextCh();
      continue;
     }
     break;
    }
    jslGetNextCh();
    continue;
   }
   if ((jslNextCh() & 255) == 42) {
    jslGetNextCh();
    jslGetNextCh();
    while (1) {
     $0 = 0;
     if (HEAP8[HEAP32[44743]]) {
      $0 = 0;
      if (HEAP8[HEAP32[44743]] == 42) {
       $0 = (jslNextCh() & 255) == 47;
      }
      $0 = $0 ^ -1;
     }
     if ($0 & 1) {
      jslGetNextCh();
      continue;
     }
     break;
    }
    if (!HEAPU8[HEAP32[44743]]) {
     HEAP16[HEAP32[44743] + 2 >> 1] = 137;
     break label$2;
    }
    jslGetNextCh();
    jslGetNextCh();
    continue;
   }
  }
  break;
 }
}

function getDayNumberFromDate($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 label$1: {
  if (!(HEAP32[$3 + 24 >> 2] < 125e4 & HEAP32[$3 + 24 >> 2] >= -125e4)) {
   jsExceptionHere(1, 115717, 0);
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  while (1) {
   if (HEAP32[$3 + 20 >> 2] < 2) {
    HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 24 >> 2] - 1;
    HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 20 >> 2] + 12;
    continue;
   }
   break;
  }
  HEAP32[$3 + 12 >> 2] = integerDivideFloor(HEAP32[$3 + 24 >> 2], 100);
  HEAP32[$3 + 28 >> 2] = ((((((Math_imul(HEAP32[$3 + 24 >> 2], 365) + integerDivideFloor(HEAP32[$3 + 24 >> 2], 4) | 0) - HEAP32[$3 + 12 >> 2] | 0) + integerDivideFloor(HEAP32[$3 + 12 >> 2], 4) | 0) + Math_imul(HEAP32[$3 + 20 >> 2], 30) | 0) + ((Math_imul(HEAP32[$3 + 20 >> 2], 3) + 6 | 0) / 5 | 0) | 0) + HEAP32[$3 + 16 >> 2] | 0) - 719531;
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function graphicsStructInit($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 HEAP8[$0 + 8 | 0] = 0;
 HEAP8[$0 + 9 | 0] = 0;
 HEAP8[$0 + 10 | 0] = 0;
 HEAP8[$0 + 11 | 0] = 0;
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$4 + 8 >> 2];
 HEAP8[$0 + 12 | 0] = $1;
 HEAP8[$0 + 13 | 0] = $1 >>> 8;
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 HEAP8[$0 + 14 | 0] = $1;
 HEAP8[$0 + 15 | 0] = $1 >>> 8;
 HEAP8[HEAP32[$4 + 12 >> 2] + 16 | 0] = HEAP32[$4 >> 2];
 graphicsStructResetState(HEAP32[$4 + 12 >> 2]);
 $0 = HEAP32[$4 + 12 >> 2];
 HEAP8[$0 + 44 | 0] = 0;
 HEAP8[$0 + 45 | 0] = 128;
 $0 = HEAP32[$4 + 12 >> 2];
 HEAP8[$0 + 46 | 0] = 0;
 HEAP8[$0 + 47 | 0] = 128;
 $0 = HEAP32[$4 + 12 >> 2];
 HEAP8[$0 + 40 | 0] = 255;
 HEAP8[$0 + 41 | 0] = 127;
 $0 = HEAP32[$4 + 12 >> 2];
 HEAP8[$0 + 42 | 0] = 255;
 HEAP8[$0 + 43 | 0] = 127;
 __stack_pointer = $4 + 16 | 0;
}

function jswrap_regexp_constructor($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 40 >> 2] = $0;
 HEAP32[$2 + 36 >> 2] = $1;
 label$1: {
  if (!(jsvIsString(HEAP32[$2 + 40 >> 2]) & 1)) {
   HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 40 >> 2];
   jsExceptionHere(3, 113671, $2 + 16 | 0);
   HEAP32[$2 + 44 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 32 >> 2] = jspNewObject(0, 116829);
  jsvObjectSetChild(HEAP32[$2 + 32 >> 2], 120470, HEAP32[$2 + 40 >> 2]);
  if (!(jsvIsUndefined(HEAP32[$2 + 36 >> 2]) & 1)) {
   label$4: {
    if (!(jsvIsString(HEAP32[$2 + 36 >> 2]) & 1)) {
     HEAP32[$2 >> 2] = HEAP32[$2 + 40 >> 2];
     jsExceptionHere(3, 113671, $2);
     break label$4;
    }
    jsvObjectSetChild(HEAP32[$2 + 32 >> 2], 115438, HEAP32[$2 + 36 >> 2]);
   }
  }
  jsvObjectSetChildAndUnLock(HEAP32[$2 + 32 >> 2], 111872, jsvNewFromInteger(0));
  HEAP32[$2 + 44 >> 2] = HEAP32[$2 + 32 >> 2];
 }
 __stack_pointer = $2 + 48 | 0;
 return HEAP32[$2 + 44 >> 2];
}

function jswrap_graphics_theme($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvNewObject();
 jsvObjectSetChildAndUnLock(HEAP32[$1 + 8 >> 2], 119034, jsvNewFromInteger(HEAPU8[349444] | HEAPU8[349445] << 8));
 jsvObjectSetChildAndUnLock(HEAP32[$1 + 8 >> 2], 119038, jsvNewFromInteger(HEAPU8[349446] | HEAPU8[349447] << 8));
 jsvObjectSetChildAndUnLock(HEAP32[$1 + 8 >> 2], 126283, jsvNewFromInteger(HEAPU8[349448] | HEAPU8[349449] << 8));
 jsvObjectSetChildAndUnLock(HEAP32[$1 + 8 >> 2], 126287, jsvNewFromInteger(HEAPU8[349450] | HEAPU8[349451] << 8));
 jsvObjectSetChildAndUnLock(HEAP32[$1 + 8 >> 2], 124630, jsvNewFromInteger(HEAPU8[349452] | HEAPU8[349453] << 8));
 jsvObjectSetChildAndUnLock(HEAP32[$1 + 8 >> 2], 124634, jsvNewFromInteger(HEAPU8[349454] | HEAPU8[349455] << 8));
 jsvObjectSetChildAndUnLock(HEAP32[$1 + 8 >> 2], 118129, jsvNewFromBool(HEAP8[349456] & 1));
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jsiExecuteEventCallbackArgsArray($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 $3 = $4;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 label$1: {
  if (HEAP32[$3 + 16 >> 2]) {
   HEAP32[$3 + 12 >> 2] = jsvGetArrayLength(HEAP32[$3 + 16 >> 2]);
   if (HEAP32[$3 + 12 >> 2]) {
    $4 = $4 - ((HEAP32[$3 + 12 >> 2] << 2) + 15 & -16) | 0;
    __stack_pointer = $4;
    HEAP32[$3 + 8 >> 2] = $4;
    if (!HEAP32[$3 + 8 >> 2]) {
     HEAP8[$3 + 31 | 0] = 0;
     break label$1;
    }
    jsvGetArrayItems(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
   }
  }
  HEAP8[$3 + 7 | 0] = jsiExecuteEventCallback(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]) & 1;
  jsvUnLockMany(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
  HEAP8[$3 + 31 | 0] = HEAP8[$3 + 7 | 0] & 1;
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP8[$3 + 31 | 0] & 1;
}

function std____2____compressed_pair_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29___2c_20std____2__allocator_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29_______compressed_pair_std__nullptr_t_2c_20std____2____default_init_tag__28std__nullptr_t___2c_20std____2____default_init_tag___29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_elem_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29___2c_200_2c_20false_____compressed_pair_elem_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, HEAP32[$3 + 8 >> 2]);
 std____2____compressed_pair_elem_std____2__allocator_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29___2c_201_2c_20true_____compressed_pair_elem_28std____2____default_init_tag_29($0);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function jswrap_pipe_close_listener($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 label$1: {
  if (!(jsvIsObject(HEAP32[$2 + 28 >> 2]) & 1)) {
   break label$1;
  }
  HEAP32[$2 + 20 >> 2] = pipeGetArray(0);
  if (!HEAP32[$2 + 20 >> 2]) {
   break label$1;
  }
  jsvObjectIteratorNew($2 + 16 | 0, HEAP32[$2 + 20 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_16($2 + 16 | 0) & 1) {
    HEAP32[$2 + 12 >> 2] = jsvObjectIteratorGetValue_14($2 + 16 | 0);
    HEAP32[$2 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 24 >> 2]);
    if (HEAP32[$2 + 8 >> 2] == HEAP32[$2 + 28 >> 2]) {
     handlePipeClose(HEAP32[$2 + 20 >> 2], $2 + 16 | 0, HEAP32[$2 + 12 >> 2]);
    }
    jsvUnLock2(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2]);
    jsvObjectIteratorNext($2 + 16 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_16($2 + 16 | 0);
  jsvUnLock(HEAP32[$2 + 20 >> 2]);
 }
 __stack_pointer = $2 + 32 | 0;
}

function _jswrap_espruino_FFT_getData($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 80 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 76 >> 2] = $0;
 HEAP32[$3 + 72 >> 2] = $1;
 HEAP32[$3 + 68 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = 0;
 if (jsvIsIterable(HEAP32[$3 + 72 >> 2]) & 1) {
  jsvIteratorNew($3 + 8 | 0, HEAP32[$3 + 72 >> 2], 1);
  while (1) {
   $0 = 0;
   if (HEAPU32[$3 + 4 >> 2] < HEAPU32[$3 + 68 >> 2]) {
    $0 = jsvIteratorHasElement($3 + 8 | 0);
   }
   if ($0 & 1) {
    $4 = jsvIteratorGetFloatValue($3 + 8 | 0);
    $1 = HEAP32[$3 + 76 >> 2];
    $0 = HEAP32[$3 + 4 >> 2];
    HEAP32[$3 + 4 >> 2] = $0 + 1;
    HEAPF64[($0 << 3) + $1 >> 3] = $4;
    jsvIteratorNext($3 + 8 | 0);
    continue;
   }
   break;
  }
  jsvIteratorFree($3 + 8 | 0);
 }
 while (1) {
  if (HEAPU32[$3 + 4 >> 2] < HEAPU32[$3 + 68 >> 2]) {
   $1 = HEAP32[$3 + 76 >> 2];
   $0 = HEAP32[$3 + 4 >> 2];
   HEAP32[$3 + 4 >> 2] = $0 + 1;
   HEAPF64[($0 << 3) + $1 >> 3] = 0;
   continue;
  }
  break;
 }
 __stack_pointer = $3 + 80 | 0;
}

function nativeCallGetCType() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 label$1: {
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 192) {
   jslMatch(192);
   HEAP32[$0 + 12 >> 2] = 0;
   break label$1;
  }
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 128) {
   HEAP32[$0 + 8 >> 2] = -1;
   HEAP32[$0 + 4 >> 2] = jslGetTokenValueAsString();
   if (!strcmp(HEAP32[$0 + 4 >> 2], 112879)) {
    HEAP32[$0 + 8 >> 2] = 4;
   }
   if (!strcmp(HEAP32[$0 + 4 >> 2], 120145)) {
    HEAP32[$0 + 8 >> 2] = 7;
   }
   if (!strcmp(HEAP32[$0 + 4 >> 2], 117768)) {
    HEAP32[$0 + 8 >> 2] = 3;
   }
   if (!strcmp(HEAP32[$0 + 4 >> 2], 117575)) {
    HEAP32[$0 + 8 >> 2] = 5;
   }
   if (!strcmp(HEAP32[$0 + 4 >> 2], 116633)) {
    HEAP32[$0 + 8 >> 2] = 1;
   }
   if (!strcmp(HEAP32[$0 + 4 >> 2], 113280)) {
    HEAP32[$0 + 8 >> 2] = 6;
   }
   jslMatch(128);
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
   break label$1;
  }
  HEAP32[$0 + 12 >> 2] = -1;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function jsvStringIteratorGotoEnd($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 while (1) {
  if (jsvGetLastChild(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) & 65535) {
   HEAP32[$1 + 8 >> 2] = jsvLock(jsvGetLastChild(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) & 65535);
   jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
   HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2] = HEAP32[$1 + 8 >> 2];
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] + HEAP32[$0 + 8 >> 2];
   $0 = jsvGetCharactersInVar(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
   HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] = $0;
   continue;
  }
  break;
 }
 HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2];
 label$3: {
  if (HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]) {
   HEAP32[HEAP32[$1 + 12 >> 2] >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] - 1;
   break label$3;
  }
  HEAP32[HEAP32[$1 + 12 >> 2] >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
}

function jsvArrayBufferIteratorGetValue($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP8[$2 + 23 | 0] = $1;
 label$1: {
  if (!HEAPU8[HEAP32[$2 + 24 >> 2] + 36 | 0]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  jsvArrayBufferIteratorGetValueData(HEAP32[$2 + 24 >> 2], $2 + 12 | 0);
  if (HEAP8[$2 + 23 | 0] & 1) {
   reverseBytes($2 + 12 | 0, HEAPU8[HEAP32[$2 + 24 >> 2] + 36 | 0] & 15);
  }
  if (HEAPU8[HEAP32[$2 + 24 >> 2] + 36 | 0] & 32) {
   HEAP32[$2 + 28 >> 2] = jsvNewFromFloat(jsvArrayBufferIteratorDataToFloat(HEAP32[$2 + 24 >> 2], $2 + 12 | 0));
   break label$1;
  }
  HEAP32[$2 + 8 >> 2] = jsvArrayBufferIteratorDataToInt(HEAP32[$2 + 24 >> 2], $2 + 12 | 0);
  if (HEAPU8[HEAP32[$2 + 24 >> 2] + 36 | 0] == 4) {
   HEAP32[$2 + 28 >> 2] = jsvNewFromLongInteger(HEAP32[$2 + 8 >> 2], 0);
   break label$1;
  }
  HEAP32[$2 + 28 >> 2] = jsvNewFromInteger(HEAP32[$2 + 8 >> 2]);
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLitePoolParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_TfLitePoolParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_____compressed_pair_TfLitePoolParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28TfLitePoolParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0, $3 + 8 | 0, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___unique_ptr_true_2c_20void__28TfLiteConvParams__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__2c_20true_____good_rval_ref_type_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 std____2____compressed_pair_TfLiteConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_____compressed_pair_TfLiteConvParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28TfLiteConvParams___2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0, $3 + 8 | 0, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function jswrap_spi_setup($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 label$1: {
  if (!(jsvIsObject(HEAP32[$2 + 28 >> 2]) & 1)) {
   break label$1;
  }
  HEAP8[$2 + 23 | 0] = jsiGetDeviceFromClass(HEAP32[$2 + 28 >> 2]);
  if (!(jsspiPopulateSPIInfo($2 + 8 | 0, HEAP32[$2 + 24 >> 2]) & 1)) {
   break label$1;
  }
  label$2: {
   if (!(HEAPU8[$2 + 23 | 0] < 25 | HEAPU8[$2 + 23 | 0] > 25)) {
    jshSPISetup(HEAPU8[$2 + 23 | 0], $2 + 8 | 0);
    break label$2;
   }
   if (HEAPU8[$2 + 23 | 0]) {
    break label$1;
   }
   if (HEAPU8[$2 + 13 | 0] != 255) {
    jshPinSetState(HEAPU8[$2 + 13 | 0], 1);
   }
   if (HEAPU8[$2 + 14 | 0] != 255) {
    jshPinSetState(HEAPU8[$2 + 14 | 0], 4);
   }
   if (HEAPU8[$2 + 15 | 0] != 255) {
    jshPinSetState(HEAPU8[$2 + 15 | 0], 1);
   }
  }
  jsvObjectSetOrRemoveChild(HEAP32[$2 + 28 >> 2], 115339, HEAP32[$2 + 24 >> 2]);
 }
 __stack_pointer = $2 + 32 | 0;
}

function jsvStringIteratorUpdatePtr($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (jsvIsFlatString(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) & 1) {
   $0 = jsvGetFlatStringPointer(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
   HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = $0;
   break label$1;
  }
  label$3: {
   if (jsvIsNativeString(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) & 1) {
    $0 = HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2];
    HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
    break label$3;
   }
   if (!(jsvIsFlashString(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) & 1)) {
    label$6: {
     if (HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) {
      HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2];
      break label$6;
     }
     HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = 0;
    }
   }
  }
 }
 __stack_pointer = $1 + 16 | 0;
}

function jsi2cPopulateI2CInfo($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 56 >> 2] = $0;
 HEAP32[$2 + 52 >> 2] = $1;
 jshI2CInitInfo(HEAP32[$2 + 56 >> 2]);
 HEAP32[$2 + 16 >> 2] = 118047;
 HEAP16[$2 + 20 >> 1] = 13;
 HEAP32[$2 + 24 >> 2] = HEAP32[$2 + 56 >> 2] + 4;
 HEAP32[$2 + 28 >> 2] = 123003;
 HEAP16[$2 + 32 >> 1] = 13;
 HEAP32[$2 + 36 >> 2] = HEAP32[$2 + 56 >> 2] + 5;
 HEAP32[$2 + 40 >> 2] = 119677;
 HEAP16[$2 + 44 >> 1] = 10;
 HEAP32[$2 + 48 >> 2] = HEAP32[$2 + 56 >> 2];
 label$1: {
  if (jsvReadConfigObject(HEAP32[$2 + 52 >> 2], $2 + 16 | 0, 3) & 1) {
   HEAP8[$2 + 15 | 0] = 1;
   $0 = HEAP32[$2 + 56 >> 2];
   if ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) < 100) {
    jsExceptionHere(1, 119665, 0);
    HEAP8[$2 + 15 | 0] = 0;
   }
   HEAP8[$2 + 63 | 0] = HEAP8[$2 + 15 | 0] & 1;
   break label$1;
  }
  HEAP8[$2 + 63 | 0] = 0;
 }
 __stack_pointer = $2 - -64 | 0;
 return HEAP8[$2 + 63 | 0] & 1;
}

function jswrap_spi_send_cb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = $3 - (HEAP32[$3 + 8 >> 2] + 15 & -16) | 0;
 __stack_pointer = $0;
 HEAP32[$3 >> 2] = $0;
 FUNCTION_TABLE[HEAP32[HEAP32[$3 + 4 >> 2] >> 2]](HEAP32[$3 + 12 >> 2], HEAP32[$3 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2] + 4 | 0);
 $0 = HEAP32[$3 + 4 >> 2];
 HEAP32[$0 + 24 >> 2] = HEAP32[$3 + 8 >> 2] + HEAP32[$0 + 24 >> 2];
 $0 = HEAP32[$3 + 4 >> 2];
 HEAP32[$0 + 20 >> 2] = HEAP32[$3 + 8 >> 2] + HEAP32[$0 + 20 >> 2];
 while (1) {
  $0 = HEAP32[$3 + 8 >> 2];
  HEAP32[$3 + 8 >> 2] = $0 - 1;
  if ($0) {
   $1 = HEAP32[$3 + 4 >> 2];
   $0 = HEAP32[$3 >> 2];
   HEAP32[$3 >> 2] = $0 + 1;
   jsvArrayBufferIteratorSetByteValue($1 + 28 | 0, HEAP8[$0 | 0]);
   jsvArrayBufferIteratorNext(HEAP32[$3 + 4 >> 2] + 28 | 0);
   continue;
  }
  break;
 }
 __stack_pointer = $3 + 16 | 0;
}

function jsfNameFromVar($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $1;
 $2 = $3;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP8[$2 + 21 | 0] = 0;
 HEAP8[$2 + 22 | 0] = 0;
 HEAP8[$2 + 23 | 0] = 0;
 HEAP8[$2 + 24 | 0] = 0;
 HEAP8[$2 + 25 | 0] = 0;
 HEAP8[$2 + 26 | 0] = 0;
 HEAP8[$2 + 27 | 0] = 0;
 HEAP8[$2 + 28 | 0] = 0;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP32[$2 + 20 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
 jsvGetString(HEAP32[$2 + 44 >> 2], $2, 29);
 $1 = HEAP32[$2 >> 2];
 $2 = HEAP32[$2 + 4 >> 2];
 $4 = $1;
 $1 = $0;
 HEAP32[$1 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $2;
 HEAP32[$1 + 24 >> 2] = HEAP32[$3 + 24 >> 2];
 $1 = HEAP32[$3 + 20 >> 2];
 $2 = HEAP32[$3 + 16 >> 2];
 $4 = $2;
 $2 = $0;
 HEAP32[$2 + 16 >> 2] = $4;
 HEAP32[$2 + 20 >> 2] = $1;
 $2 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 $4 = $1;
 $1 = $0;
 HEAP32[$1 + 8 >> 2] = $4;
 HEAP32[$1 + 12 >> 2] = $2;
 __stack_pointer = $3 + 48 | 0;
}

function jswrap_espruino_getErrorFlagArray($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 11 | 0] = $0;
 HEAP32[$1 + 4 >> 2] = jsvNewEmptyArray();
 label$1: {
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  if (HEAP8[$1 + 11 | 0] & 1) {
   jsvArrayPushString(HEAP32[$1 + 4 >> 2], 124400);
  }
  if (HEAPU8[$1 + 11 | 0] & 2) {
   jsvArrayPushString(HEAP32[$1 + 4 >> 2], 124388);
  }
  if (HEAPU8[$1 + 11 | 0] & 4) {
   jsvArrayPushString(HEAP32[$1 + 4 >> 2], 124515);
  }
  if (HEAPU8[$1 + 11 | 0] & 8) {
   jsvArrayPushString(HEAP32[$1 + 4 >> 2], 123464);
  }
  if (HEAPU8[$1 + 11 | 0] & 16) {
   jsvArrayPushString(HEAP32[$1 + 4 >> 2], 123468);
  }
  if (HEAPU8[$1 + 11 | 0] & 32) {
   jsvArrayPushString(HEAP32[$1 + 4 >> 2], 123452);
  }
  if (HEAPU8[$1 + 11 | 0] & 64) {
   jsvArrayPushString(HEAP32[$1 + 4 >> 2], 123645);
  }
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_waveform_kill() {
 var $0 = 0;
 $0 = __stack_pointer - 32 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 28 >> 2] = jsvObjectGetChildIfExists(HEAP32[86751], 119367);
 if (HEAP32[$0 + 28 >> 2]) {
  jsvObjectIteratorNew($0 + 24 | 0, HEAP32[$0 + 28 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_18($0 + 24 | 0) & 1) {
    HEAP32[$0 + 20 >> 2] = jsvObjectIteratorGetValue_16($0 + 24 | 0);
    HEAP8[$0 + 19 | 0] = jsvObjectGetBoolChild(HEAP32[$0 + 20 >> 2], 118986) & 1;
    if (HEAP8[$0 + 19 | 0] & 1) {
     HEAP32[$0 + 12 >> 2] = jswrap_waveform_getBuffer(HEAP32[$0 + 20 >> 2], 0, 0);
     if (!(jstStopBufferTimerTask(HEAP32[$0 + 12 >> 2]) & 1)) {
      jsExceptionHere(1, 121522, 0);
     }
     jsvUnLock(HEAP32[$0 + 12 >> 2]);
    }
    jsvUnLock(HEAP32[$0 + 20 >> 2]);
    jsvObjectIteratorRemoveAndGotoNext($0 + 24 | 0, HEAP32[$0 + 28 >> 2]);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_18($0 + 24 | 0);
  jsvUnLock(HEAP32[$0 + 28 >> 2]);
 }
 __stack_pointer = $0 + 32 | 0;
}

function jswrap_promise_resolve($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = 0;
 label$1: {
  if (_jswrap_promise_is_promise(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[$1 + 8 >> 2]);
   break label$1;
  }
  if (jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 8 >> 2], 117602);
   if (jsvIsFunction(HEAP32[$1 >> 2]) & 1) {
    HEAP32[$1 + 4 >> 2] = jswrap_promise_constructor(HEAP32[$1 >> 2]);
   }
   jsvUnLock(HEAP32[$1 >> 2]);
   if (HEAP32[$1 + 4 >> 2]) {
    HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
    break label$1;
   }
  }
  HEAP32[$1 + 4 >> 2] = jspromise_create();
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  jspromise_resolve(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 8 >> 2]);
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_i2c_setup($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 label$1: {
  if (!(jsvIsObject(HEAP32[$2 + 28 >> 2]) & 1)) {
   break label$1;
  }
  HEAP8[$2 + 23 | 0] = jsiGetDeviceFromClass(HEAP32[$2 + 28 >> 2]);
  if (!(jsi2cPopulateI2CInfo($2 + 8 | 0, HEAP32[$2 + 24 >> 2]) & 1)) {
   break label$1;
  }
  label$2: {
   if (!(HEAPU8[$2 + 23 | 0] < 26 | HEAPU8[$2 + 23 | 0] > 26)) {
    jshI2CSetup(HEAPU8[$2 + 23 | 0], $2 + 8 | 0);
    break label$2;
   }
   if (!HEAPU8[$2 + 23 | 0]) {
    if (HEAPU8[$2 + 12 | 0] != 255) {
     jshPinSetValue(HEAPU8[$2 + 12 | 0], 1);
     jshPinSetState(HEAPU8[$2 + 12 | 0], 3);
    }
    if (HEAPU8[$2 + 13 | 0] != 255) {
     jshPinSetValue(HEAPU8[$2 + 13 | 0], 1);
     jshPinSetState(HEAPU8[$2 + 13 | 0], 3);
    }
   }
  }
  jsvObjectSetOrRemoveChild(HEAP32[$2 + 28 >> 2], 115339, HEAP32[$2 + 24 >> 2]);
 }
 __stack_pointer = $2 + 32 | 0;
}

function jsfNameFromString($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $1;
 $2 = $3;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP8[$2 + 21 | 0] = 0;
 HEAP8[$2 + 22 | 0] = 0;
 HEAP8[$2 + 23 | 0] = 0;
 HEAP8[$2 + 24 | 0] = 0;
 HEAP8[$2 + 25 | 0] = 0;
 HEAP8[$2 + 26 | 0] = 0;
 HEAP8[$2 + 27 | 0] = 0;
 HEAP8[$2 + 28 | 0] = 0;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP32[$2 + 20 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
 strcpy($2, HEAP32[$2 + 44 >> 2]);
 $1 = HEAP32[$2 >> 2];
 $2 = HEAP32[$2 + 4 >> 2];
 $4 = $1;
 $1 = $0;
 HEAP32[$1 >> 2] = $4;
 HEAP32[$1 + 4 >> 2] = $2;
 HEAP32[$1 + 24 >> 2] = HEAP32[$3 + 24 >> 2];
 $1 = HEAP32[$3 + 20 >> 2];
 $2 = HEAP32[$3 + 16 >> 2];
 $4 = $2;
 $2 = $0;
 HEAP32[$2 + 16 >> 2] = $4;
 HEAP32[$2 + 20 >> 2] = $1;
 $2 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 $4 = $1;
 $1 = $0;
 HEAP32[$1 + 8 >> 2] = $4;
 HEAP32[$1 + 12 >> 2] = $2;
 __stack_pointer = $3 + 48 | 0;
}

function lcdSetPixel_ArrayBuffer_flat1($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 $0 = HEAP32[$4 + 28 >> 2];
 HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 24 >> 2] + Math_imul(HEAP32[$4 + 20 >> 2], HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8);
 label$1: {
  if (HEAP32[$4 + 16 >> 2]) {
   $0 = HEAP32[$4 + 28 >> 2];
   $0 = (HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24)) + (HEAP32[$4 + 12 >> 2] >> 3) | 0;
   HEAP8[$0 | 0] = HEAPU8[$0 | 0] | 128 >> (HEAP32[$4 + 12 >> 2] & 7) & 255;
   break label$1;
  }
  $0 = HEAP32[$4 + 28 >> 2];
  $0 = (HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24)) + (HEAP32[$4 + 12 >> 2] >> 3) | 0;
  HEAP8[$0 | 0] = HEAPU8[$0 | 0] & (65407 >> (HEAP32[$4 + 12 >> 2] & 7) & 255);
 }
}

function jswrap_modules_addCached($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 label$1: {
  label$2: {
   if (jsvIsString(HEAP32[$2 + 28 >> 2]) & 1) {
    if (jsvIsString(HEAP32[$2 + 24 >> 2]) & 1) {
     break label$2;
    }
    if (jsvIsFunction(HEAP32[$2 + 24 >> 2]) & 1) {
     break label$2;
    }
   }
   jsExceptionHere(1, 142738, 0);
   break label$1;
  }
  HEAP32[$2 + 20 >> 2] = jswrap_modules_getModuleList();
  if (!HEAP32[$2 + 20 >> 2]) {
   break label$1;
  }
  HEAP32[$2 + 16 >> 2] = jspEvaluateModule(HEAP32[$2 + 24 >> 2]);
  label$4: {
   if (!HEAP32[$2 + 16 >> 2]) {
    HEAP32[$2 >> 2] = HEAP32[$2 + 28 >> 2];
    jsExceptionHere(1, 116755, $2);
    break label$4;
   }
   jsvObjectSetChildVar(HEAP32[$2 + 20 >> 2], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 16 >> 2]);
   jsvUnLock(HEAP32[$2 + 16 >> 2]);
  }
  jsvUnLock(HEAP32[$2 + 20 >> 2]);
 }
 __stack_pointer = $2 + 32 | 0;
}

function jsvCreateEmptyVarList() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 32 | 0;
 __stack_pointer = $0;
 HEAP8[178978] = 1;
 HEAP16[89490] = 0;
 jsvSetNextSibling($0 + 16 | 0, 0);
 HEAP32[$0 + 12 >> 2] = $0 + 16;
 HEAP16[$0 + 10 >> 1] = 1;
 while (1) {
  if (HEAPU16[$0 + 10 >> 1] <= 12e3) {
   HEAP32[$0 + 4 >> 2] = jsvGetAddressOf(HEAPU16[$0 + 10 >> 1]);
   $1 = HEAP32[$0 + 4 >> 2];
   label$3: {
    if (!((HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & 63)) {
     jsvSetNextSibling(HEAP32[$0 + 12 >> 2], HEAPU16[$0 + 10 >> 1]);
     HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 4 >> 2];
     break label$3;
    }
    if (jsvIsFlatString(HEAP32[$0 + 4 >> 2]) & 1) {
     HEAP16[$0 + 10 >> 1] = HEAPU16[$0 + 10 >> 1] + jsvGetFlatStringBlocks(HEAP32[$0 + 4 >> 2]);
    }
   }
   HEAP16[$0 + 10 >> 1] = HEAPU16[$0 + 10 >> 1] + 1;
   continue;
  }
  break;
 }
 jsvSetNextSibling(HEAP32[$0 + 12 >> 2], 0);
 HEAP16[89490] = jsvGetNextSibling($0 + 16 | 0);
 HEAP8[178978] = 0;
 __stack_pointer = $0 + 32 | 0;
}

function i2c_stop($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 i2c_pin_wr0(HEAPU8[HEAP32[$1 + 12 >> 2] + 1 | 0]);
 dly(HEAP32[$1 + 12 >> 2]);
 i2c_pin_wr1(HEAPU8[HEAP32[$1 + 12 >> 2]]);
 HEAP32[$1 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
 while (1) {
  $0 = 0;
  if (!(jshPinGetValue(HEAPU8[HEAP32[$1 + 12 >> 2]]) & 1)) {
   $0 = HEAP32[$1 + 8 >> 2] != 0;
  }
  if ($0) {
   HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] - 1;
   continue;
  }
  break;
 }
 if (!(HEAP32[$1 + 8 >> 2] | !HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2])) {
  err(142704);
 }
 dly(HEAP32[$1 + 12 >> 2]);
 i2c_pin_wr1(HEAPU8[HEAP32[$1 + 12 >> 2] + 1 | 0]);
 dly(HEAP32[$1 + 12 >> 2]);
 label$5: {
  if (!HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2]) {
   break label$5;
  }
  if (jshPinGetValue(HEAPU8[HEAP32[$1 + 12 >> 2] + 1 | 0]) & 1) {
   break label$5;
  }
  err(142719);
 }
 dly(HEAP32[$1 + 12 >> 2]);
 HEAP8[HEAP32[$1 + 12 >> 2] + 2 | 0] = 0;
 __stack_pointer = $1 + 16 | 0;
}

function tflite__MicroInterpreter__Init_28tflite__Profiler__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = tflite__Model__subgraphs_28_29_20const(HEAP32[$0 + 4 >> 2]);
 label$1: {
  if ((flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph____size_28_29_20const(HEAP32[$2 + 4 >> 2]) | 0) != 1) {
   tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$0 + 12 >> 2], 146413, 0);
   HEAP32[$0 + 112 >> 2] = 1;
   break label$1;
  }
  HEAP32[$0 + 116 >> 2] = flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph____operator_5b_5d_28unsigned_20int_29_20const(HEAP32[$2 + 4 >> 2], 0);
  HEAP32[$0 + 28 >> 2] = $0 + 124;
  HEAP32[$0 + 36 >> 2] = 648;
  HEAP32[$0 + 96 >> 2] = 649;
  HEAP32[$0 + 100 >> 2] = 650;
  HEAP32[$0 + 52 >> 2] = 1;
  HEAP32[$0 + 68 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[$0 + 112 >> 2] = 0;
 }
 __stack_pointer = $2 + 16 | 0;
}

function st_d_yield_literal($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  if (HEAPU32[HEAP32[HEAP32[$2 + 20 >> 2] + 8 >> 2] >> 2] < HEAPU32[HEAP32[$2 + 20 >> 2] + 4 >> 2]) {
   HEAP16[$2 + 18 >> 1] = get_bits(HEAP32[$2 + 24 >> 2], 8);
   if (HEAPU16[$2 + 18 >> 1] == 65535) {
    HEAP32[$2 + 28 >> 2] = 1;
    break label$1;
   }
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 24 >> 2] + 45;
   HEAP16[$2 + 10 >> 1] = 255;
   HEAP8[$2 + 9 | 0] = HEAPU16[$2 + 18 >> 1];
   $3 = HEAPU8[$2 + 9 | 0];
   $4 = HEAP32[$2 + 12 >> 2];
   $0 = HEAP32[$2 + 24 >> 2];
   $1 = HEAPU16[$0 + 8 >> 1];
   HEAP16[$0 + 8 >> 1] = $1 + 1;
   HEAP8[(HEAPU16[$2 + 10 >> 1] & $1) + $4 | 0] = $3;
   push_byte(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2], HEAPU8[$2 + 9 | 0]);
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 28 >> 2] = 1;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jswrap_graphics_blendColor($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 112 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 104 >> 2] = $0;
 HEAP32[$4 + 100 >> 2] = $1;
 HEAP32[$4 + 96 >> 2] = $2;
 HEAP32[$4 + 92 >> 2] = $3;
 label$1: {
  if (!(graphicsGetFromVar($4 + 16 | 0, HEAP32[$4 + 104 >> 2]) & 1)) {
   HEAP32[$4 + 108 >> 2] = 0;
   break label$1;
  }
  HEAP32[$4 + 12 >> 2] = jswrap_graphics_toColor(HEAP32[$4 + 104 >> 2], HEAP32[$4 + 100 >> 2], 0, 0);
  HEAP32[$4 + 8 >> 2] = jswrap_graphics_toColor(HEAP32[$4 + 104 >> 2], HEAP32[$4 + 96 >> 2], 0, 0);
  $1 = $4 + 16 | 0;
  $2 = HEAP32[$4 + 8 >> 2];
  $3 = HEAP32[$4 + 12 >> 2];
  $5 = jsvGetFloat(HEAP32[$4 + 92 >> 2]) * 256;
  label$3: {
   if (Math_abs($5) < 2147483648) {
    $0 = ~~$5;
    break label$3;
   }
   $0 = -2147483648;
  }
  HEAP32[$4 + 108 >> 2] = graphicsBlendColor($1, $2, $3, $0);
 }
 __stack_pointer = $4 + 112 | 0;
 return HEAP32[$4 + 108 >> 2];
}

function tflite__GreedyMemoryPlanner__GetOffsetForBuffer_28tflite__ErrorReporter__2c_20int_2c_20int__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 $0 = HEAP32[$4 + 24 >> 2];
 tflite__GreedyMemoryPlanner__CalculateOffsetsIfNeeded_28_29($0);
 label$1: {
  if (!(HEAP32[$4 + 16 >> 2] < HEAP32[$0 + 8 >> 2] & HEAP32[$4 + 16 >> 2] >= 0)) {
   $1 = HEAP32[$4 + 20 >> 2];
   $2 = HEAP32[$4 + 16 >> 2];
   HEAP32[$4 + 4 >> 2] = HEAP32[$0 + 8 >> 2];
   HEAP32[$4 >> 2] = $2;
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($1, 122540, $4);
   HEAP32[$4 + 28 >> 2] = 1;
   break label$1;
  }
  HEAP32[HEAP32[$4 + 12 >> 2] >> 2] = HEAP32[HEAP32[$0 + 36 >> 2] + (HEAP32[$4 + 16 >> 2] << 2) >> 2];
  HEAP32[$4 + 28 >> 2] = 0;
 }
 __stack_pointer = $4 + 32 | 0;
 return HEAP32[$4 + 28 >> 2];
}

function jswrap_array_concat($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = jsvNewEmptyArray();
 jsvObjectIteratorNew($2 + 16 | 0, HEAP32[$2 + 24 >> 2]);
 HEAP32[$2 + 12 >> 2] = jsvLockAgain(HEAP32[$2 + 28 >> 2]);
 while (1) {
  label$2: {
   if (jsvIsArray(HEAP32[$2 + 12 >> 2]) & 1) {
    jsvArrayPushAll(HEAP32[$2 + 20 >> 2], HEAP32[$2 + 12 >> 2], 0);
    break label$2;
   }
   jsvArrayPush(HEAP32[$2 + 20 >> 2], HEAP32[$2 + 12 >> 2]);
  }
  jsvUnLock(HEAP32[$2 + 12 >> 2]);
  label$4: {
   if (jsvObjectIteratorHasValue_6($2 + 16 | 0) & 1) {
    $0 = jsvObjectIteratorGetValue_6($2 + 16 | 0);
    break label$4;
   }
   $0 = 0;
  }
  HEAP32[$2 + 12 >> 2] = $0;
  jsvObjectIteratorNext($2 + 16 | 0);
  if (HEAP32[$2 + 12 >> 2]) {
   continue;
  }
  break;
 }
 jsvObjectIteratorFree_6($2 + 16 | 0);
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 20 >> 2];
}

function jswrap_pipe_drain_listener($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 label$1: {
  if (!(jsvIsObject(HEAP32[$1 + 28 >> 2]) & 1)) {
   break label$1;
  }
  HEAP32[$1 + 24 >> 2] = pipeGetArray(0);
  if (!HEAP32[$1 + 24 >> 2]) {
   break label$1;
  }
  jsvObjectIteratorNew($1 + 16 | 0, HEAP32[$1 + 24 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_16($1 + 16 | 0) & 1) {
    HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetValue_14($1 + 16 | 0);
    HEAP32[$1 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 12 >> 2], 117517);
    if (HEAP32[$1 + 8 >> 2] == HEAP32[$1 + 28 >> 2]) {
     jsvObjectSetChildAndUnLock(HEAP32[$1 + 12 >> 2], 113058, jsvNewFromBool(0));
    }
    jsvUnLock2(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]);
    jsvObjectIteratorNext($1 + 16 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_16($1 + 16 | 0);
  jsvUnLock(HEAP32[$1 + 24 >> 2]);
 }
 __stack_pointer = $1 + 32 | 0;
}

function jswrap_espruino_variance($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $2 = 0;
 $2 = __stack_pointer - 112 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 100 >> 2] = $0;
 HEAPF64[$2 + 88 >> 3] = $1;
 label$1: {
  if (!(jsvIsIterable(HEAP32[$2 + 100 >> 2]) & 1)) {
   HEAP32[$2 >> 2] = HEAP32[$2 + 100 >> 2];
   jsExceptionHere(1, 113514, $2);
   HEAPF64[$2 + 104 >> 3] = nan;
   break label$1;
  }
  HEAPF64[$2 + 80 >> 3] = 0;
  jsvIteratorNew($2 + 16 | 0, HEAP32[$2 + 100 >> 2], 1);
  while (1) {
   if (jsvIteratorHasElement($2 + 16 | 0) & 1) {
    HEAPF64[$2 + 8 >> 3] = jsvIteratorGetFloatValue($2 + 16 | 0);
    HEAPF64[$2 + 8 >> 3] = HEAPF64[$2 + 8 >> 3] - HEAPF64[$2 + 88 >> 3];
    HEAPF64[$2 + 80 >> 3] = HEAPF64[$2 + 8 >> 3] * HEAPF64[$2 + 8 >> 3] + HEAPF64[$2 + 80 >> 3];
    jsvIteratorNext($2 + 16 | 0);
    continue;
   }
   break;
  }
  jsvIteratorFree($2 + 16 | 0);
  HEAPF64[$2 + 104 >> 3] = HEAPF64[$2 + 80 >> 3];
 }
 __stack_pointer = $2 + 112 | 0;
 return +HEAPF64[$2 + 104 >> 3];
}

function jspeFunctionDefinition($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 27 | 0] = $0;
 HEAP32[$1 + 20 >> 2] = 0;
 HEAP8[$1 + 19 | 0] = (HEAP32[86758] & 63) == 1;
 if (HEAP8[$1 + 19 | 0] & 1) {
  HEAP32[$1 + 20 >> 2] = jsvNewWithFlags(7);
 }
 HEAP32[$1 + 12 >> 2] = 0;
 if (!(!(HEAP8[$1 + 27 | 0] & 1) | HEAP16[HEAP32[44743] + 2 >> 1] != 128)) {
  if (HEAP32[$1 + 20 >> 2]) {
   HEAP32[$1 + 12 >> 2] = jslGetTokenValueAsVar();
  }
  jslGetNextToken();
 }
 label$4: {
  if (!(jspeFunctionArguments(HEAP32[$1 + 20 >> 2]) & 1)) {
   jsvUnLock2(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 20 >> 2]);
   HEAP32[$1 + 28 >> 2] = 0;
   break label$4;
  }
  jspeFunctionDefinitionInternal(HEAP32[$1 + 20 >> 2], 0);
  if (!(!HEAP32[$1 + 20 >> 2] | !HEAP32[$1 + 12 >> 2])) {
   jsvObjectSetChildAndUnLock(HEAP32[$1 + 20 >> 2], 117763, HEAP32[$1 + 12 >> 2]);
  }
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function jswrap_espruino_sum($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 96 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 84 >> 2] = $0;
 label$1: {
  label$2: {
   if (jsvIsString(HEAP32[$1 + 84 >> 2]) & 1) {
    break label$2;
   }
   if (jsvIsArray(HEAP32[$1 + 84 >> 2]) & 1) {
    break label$2;
   }
   if (jsvIsArrayBuffer(HEAP32[$1 + 84 >> 2]) & 1) {
    break label$2;
   }
   HEAP32[$1 >> 2] = HEAP32[$1 + 84 >> 2];
   jsExceptionHere(1, 113306, $1);
   HEAPF64[$1 + 88 >> 3] = nan;
   break label$1;
  }
  HEAPF64[$1 + 72 >> 3] = 0;
  jsvIteratorNew($1 + 8 | 0, HEAP32[$1 + 84 >> 2], 0);
  while (1) {
   if (jsvIteratorHasElement($1 + 8 | 0) & 1) {
    $2 = jsvIteratorGetFloatValue($1 + 8 | 0);
    HEAPF64[$1 + 72 >> 3] = HEAPF64[$1 + 72 >> 3] + $2;
    jsvIteratorNext($1 + 8 | 0);
    continue;
   }
   break;
  }
  jsvIteratorFree($1 + 8 | 0);
  HEAPF64[$1 + 88 >> 3] = HEAPF64[$1 + 72 >> 3];
 }
 __stack_pointer = $1 + 96 | 0;
 return +HEAPF64[$1 + 88 >> 3];
}

function jsiTabComplete_findCommon($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 12 >> 2];
 label$1: {
  if (jsvGetStringLength(HEAP32[$2 + 8 >> 2]) >>> 0 <= HEAPU32[HEAP32[$2 + 4 >> 2] >> 2]) {
   break label$1;
  }
  if (jsvCompareString(HEAP32[HEAP32[$2 + 4 >> 2] + 4 >> 2], HEAP32[$2 + 8 >> 2], 0, 0, 1)) {
   break label$1;
  }
  $0 = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
  label$2: {
   if (HEAP32[HEAP32[$2 + 4 >> 2] + 8 >> 2]) {
    HEAP32[$2 >> 2] = jsvGetCommonCharacters(HEAP32[HEAP32[$2 + 4 >> 2] + 8 >> 2], HEAP32[$2 + 8 >> 2]);
    jsvUnLock(HEAP32[HEAP32[$2 + 4 >> 2] + 8 >> 2]);
    HEAP32[HEAP32[$2 + 4 >> 2] + 8 >> 2] = HEAP32[$2 >> 2];
    break label$2;
   }
   $0 = jsvLockAgain(HEAP32[$2 + 8 >> 2]);
   HEAP32[HEAP32[$2 + 4 >> 2] + 8 >> 2] = $0;
  }
 }
 __stack_pointer = $2 + 16 | 0;
}

function int_20gemmlowp__ShiftLeft_int__28int_2c_20int_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = __stack_pointer - 32 | 0;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 $0 = HEAP32[$2 + 28 >> 2];
 $1 = $0 >> 31;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 $1 = HEAP32[$2 + 16 >> 2];
 $4 = $1;
 $0 = HEAP32[$2 + 20 >> 2];
 $3 = $0;
 $1 = 1 << HEAP32[$2 + 24 >> 2];
 $0 = $1 >> 31;
 $5 = $0;
 $0 = $3;
 $3 = $1;
 $1 = $5;
 $1 = __wasm_i64_mul($4, $0, $3, $1);
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = i64toi32_i32$HIGH_BITS;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = -2147483648;
 HEAP32[$2 >> 2] = 2147483647;
 $0 = HEAP32[$2 + 8 >> 2];
 $1 = HEAP32[$2 + 12 >> 2];
 if (($1 | 0) < 0 & $0 >>> 0 < 2147483648 | ($1 | 0) < -1) {
  $0 = -2147483648;
 } else {
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = HEAP32[$2 + 12 >> 2];
  if ($0 >>> 0 > 2147483647 & ($1 | 0) >= 0 | ($1 | 0) > 0) {
   $0 = 2147483647;
  } else {
   $0 = HEAP32[$2 + 8 >> 2];
  }
 }
 return $0;
}

function jsvIteratorNext($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  label$2: {
   switch (HEAP32[HEAP32[$1 + 12 >> 2] >> 2] - 1 | 0) {
   case 3:
    $0 = HEAP32[$1 + 12 >> 2];
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
    label$6: {
     if (!(jsvIsIntegerish(HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]) & 1)) {
      break label$6;
     }
     if ((jsvGetInteger(HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]) | 0) >= HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]) {
      break label$6;
     }
     jsvObjectIteratorNext(HEAP32[$1 + 12 >> 2] + 4 | 0);
    }
    break label$1;

   case 1:
    jsvObjectIteratorNext(HEAP32[$1 + 12 >> 2] + 4 | 0);
    break label$1;

   case 0:
    jsvStringIteratorNext(HEAP32[$1 + 12 >> 2] + 4 | 0);
    break label$1;

   case 2:
    break label$2;

   default:
    break label$1;
   }
  }
  jsvArrayBufferIteratorNext(HEAP32[$1 + 12 >> 2] + 4 | 0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function jsvArrayPopFirst($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (jsvGetFirstChild(HEAP32[$1 + 8 >> 2]) & 65535) {
   HEAP32[$1 + 4 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$1 + 8 >> 2]) & 65535);
   if ((jsvGetFirstChild(HEAP32[$1 + 8 >> 2]) & 65535) == (jsvGetLastChild(HEAP32[$1 + 8 >> 2]) & 65535)) {
    jsvSetLastChild(HEAP32[$1 + 8 >> 2], 0);
   }
   jsvSetFirstChild(HEAP32[$1 + 8 >> 2], jsvGetNextSibling(HEAP32[$1 + 4 >> 2]) & 65535);
   jsvUnRef(HEAP32[$1 + 4 >> 2]);
   if (jsvGetNextSibling(HEAP32[$1 + 4 >> 2]) & 65535) {
    HEAP32[$1 >> 2] = jsvLock(jsvGetNextSibling(HEAP32[$1 + 4 >> 2]) & 65535);
    jsvSetPrevSibling(HEAP32[$1 >> 2], 0);
    jsvUnLock(HEAP32[$1 >> 2]);
   }
   jsvSetNextSibling(HEAP32[$1 + 4 >> 2], 0);
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function i2c_wr_bit($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 label$1: {
  if (HEAP8[$2 + 11 | 0] & 1) {
   i2c_pin_wr1(HEAPU8[HEAP32[$2 + 12 >> 2] + 1 | 0]);
   break label$1;
  }
  i2c_pin_wr0(HEAPU8[HEAP32[$2 + 12 >> 2] + 1 | 0]);
 }
 dly(HEAP32[$2 + 12 >> 2]);
 i2c_pin_wr1(HEAPU8[HEAP32[$2 + 12 >> 2]]);
 dly(HEAP32[$2 + 12 >> 2]);
 dly(HEAP32[$2 + 12 >> 2]);
 HEAP32[$2 + 4 >> 2] = HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2];
 while (1) {
  $0 = 0;
  if (!(jshPinGetValue(HEAPU8[HEAP32[$2 + 12 >> 2]]) & 1)) {
   $0 = HEAP32[$2 + 4 >> 2] != 0;
  }
  if ($0) {
   HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] - 1;
   continue;
  }
  break;
 }
 if (!(HEAP32[$2 + 4 >> 2] | !HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2])) {
  err(142691);
 }
 i2c_pin_wr0(HEAPU8[HEAP32[$2 + 12 >> 2]]);
 i2c_pin_wr1(HEAPU8[HEAP32[$2 + 12 >> 2] + 1 | 0]);
 dly(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function jswrap_storage_readArrayBuffer($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 80 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 72 >> 2] = $0;
 jsfNameFromVar($1 + 40 | 0, HEAP32[$1 + 72 >> 2]);
 HEAP32[$1 + 32 >> 2] = HEAP32[$1 + 64 >> 2];
 $2 = HEAP32[$1 + 60 >> 2];
 $0 = HEAP32[$1 + 56 >> 2];
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[$1 + 28 >> 2] = $2;
 $0 = HEAP32[$1 + 52 >> 2];
 $2 = HEAP32[$1 + 48 >> 2];
 HEAP32[$1 + 16 >> 2] = $2;
 HEAP32[$1 + 20 >> 2] = $0;
 $2 = HEAP32[$1 + 44 >> 2];
 $0 = HEAP32[$1 + 40 >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 12 >> 2] = $2;
 HEAP32[$1 + 68 >> 2] = jsfReadFile($1 + 8 | 0, 0, 0);
 label$1: {
  if (!HEAP32[$1 + 68 >> 2]) {
   HEAP32[$1 + 76 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 36 >> 2] = jsvNewArrayBufferFromString(HEAP32[$1 + 68 >> 2], 0);
  jsvUnLock(HEAP32[$1 + 68 >> 2]);
  HEAP32[$1 + 76 >> 2] = HEAP32[$1 + 36 >> 2];
 }
 __stack_pointer = $1 + 80 | 0;
 return HEAP32[$1 + 76 >> 2];
}

function jswrap_array_push($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  if (!(jsvIsArray(HEAP32[$2 + 24 >> 2]) & 1)) {
   HEAP32[$2 + 28 >> 2] = -1;
   break label$1;
  }
  HEAP32[$2 + 16 >> 2] = -1;
  jsvObjectIteratorNew($2 + 8 | 0, HEAP32[$2 + 20 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_6($2 + 8 | 0) & 1) {
    HEAP32[$2 + 4 >> 2] = jsvObjectIteratorGetValue_6($2 + 8 | 0);
    HEAP32[$2 + 16 >> 2] = jsvArrayPush(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 4 >> 2]);
    jsvUnLock(HEAP32[$2 + 4 >> 2]);
    jsvObjectIteratorNext($2 + 8 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_6($2 + 8 | 0);
  if (HEAP32[$2 + 16 >> 2] < 0) {
   HEAP32[$2 + 16 >> 2] = jsvGetArrayLength(HEAP32[$2 + 24 >> 2]);
  }
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jshPinWatch($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP8[$3 + 14 | 0] = $0;
 HEAP8[$3 + 13 | 0] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 label$1: {
  if (HEAP8[$3 + 13 | 0] & 1) {
   HEAP32[$3 + 4 >> 2] = 0;
   while (1) {
    if (HEAP32[$3 + 4 >> 2] < 16) {
     if (HEAPU8[HEAP32[$3 + 4 >> 2] + 373632 | 0] == 255) {
      HEAP8[HEAP32[$3 + 4 >> 2] + 373632 | 0] = HEAPU8[$3 + 14 | 0];
      HEAP8[$3 + 15 | 0] = HEAP32[$3 + 4 >> 2] + 1;
      break label$1;
     } else {
      HEAP32[$3 >> 2] = 0;
      while (1) {
       if (HEAP32[$3 >> 2] < 16) {
        if (HEAPU8[HEAP32[$3 >> 2] + 373632 | 0] == HEAPU8[$3 + 14 | 0]) {
         HEAP8[HEAP32[$3 >> 2] + 373632 | 0] = 255;
        }
        HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
        continue;
       }
       break;
      }
      HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
      continue;
     }
    }
    break;
   }
  }
  HEAP8[$3 + 15 | 0] = 0;
 }
 return HEAPU8[$3 + 15 | 0];
}

function _jswrap_drawImageLayerNextXRepeat($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP8[HEAP32[$1 + 12 >> 2] + 33 | 0] & 1) {
  if (HEAP32[HEAP32[$1 + 12 >> 2] + 180 >> 2] < 0) {
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 180 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 156 >> 2] + HEAP32[$0 + 180 >> 2];
  }
  if (HEAP32[HEAP32[$1 + 12 >> 2] + 180 >> 2] >= HEAP32[HEAP32[$1 + 12 >> 2] + 156 >> 2]) {
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 180 >> 2] = HEAP32[$0 + 180 >> 2] - HEAP32[HEAP32[$1 + 12 >> 2] + 156 >> 2];
  }
  if (HEAP32[HEAP32[$1 + 12 >> 2] + 184 >> 2] < 0) {
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 184 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 160 >> 2] + HEAP32[$0 + 184 >> 2];
  }
  if (HEAP32[HEAP32[$1 + 12 >> 2] + 184 >> 2] >= HEAP32[HEAP32[$1 + 12 >> 2] + 160 >> 2]) {
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 184 >> 2] = HEAP32[$0 + 184 >> 2] - HEAP32[HEAP32[$1 + 12 >> 2] + 160 >> 2];
  }
 }
}

function jswrap_object_toString($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 96 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 88 >> 2] = $0;
 HEAP32[$2 + 84 >> 2] = $1;
 label$1: {
  label$2: {
   if (!(jsvIsInt(HEAP32[$2 + 84 >> 2]) & 1)) {
    break label$2;
   }
   if (!(jsvIsNumeric(HEAP32[$2 + 88 >> 2]) & 1)) {
    break label$2;
   }
   HEAP32[$2 + 80 >> 2] = jsvGetInteger(HEAP32[$2 + 84 >> 2]);
   if (!(HEAP32[$2 + 80 >> 2] < 2 | HEAP32[$2 + 80 >> 2] > 36)) {
    label$4: {
     if (jsvIsInt(HEAP32[$2 + 88 >> 2]) & 1) {
      itostr_3(jsvGetInteger(HEAP32[$2 + 88 >> 2]), $2, HEAP32[$2 + 80 >> 2]);
      break label$4;
     }
     ftoa_bounded_extra(jsvGetFloat(HEAP32[$2 + 88 >> 2]), $2, 70, HEAP32[$2 + 80 >> 2], -1);
    }
    HEAP32[$2 + 92 >> 2] = jsvNewFromString($2);
    break label$1;
   }
  }
  HEAP32[$2 + 92 >> 2] = jsvAsString(HEAP32[$2 + 88 >> 2]);
 }
 __stack_pointer = $2 + 96 | 0;
 return HEAP32[$2 + 92 >> 2];
}

function lcdSetPixel_JS($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 $0 = HEAP32[$4 + 28 >> 2];
 HEAP32[$4 + 12 >> 2] = jsvObjectGetChildIfExists(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 117851);
 if (HEAP32[$4 + 12 >> 2]) {
  HEAP32[$4 >> 2] = jsvNewFromInteger(HEAP32[$4 + 24 >> 2]);
  HEAP32[$4 + 4 >> 2] = jsvNewFromInteger(HEAP32[$4 + 20 >> 2]);
  HEAP32[$4 + 8 >> 2] = jsvNewFromInteger(HEAP32[$4 + 16 >> 2]);
  $0 = HEAP32[$4 + 28 >> 2];
  jsvUnLock(jspExecuteFunction(HEAP32[$4 + 12 >> 2], HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 3, $4));
  jsvUnLockMany(3, $4);
  jsvUnLock(HEAP32[$4 + 12 >> 2]);
 }
 __stack_pointer = $4 + 32 | 0;
}

function jswrap_arraybuffer_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (HEAP32[$1 + 8 >> 2] < 0) {
   jsExceptionHere(1, 116449, 0);
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$1 + 8 >> 2] > 16777215) {
   jsExceptionHere(1, 118698, 0);
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 4 >> 2] = 0;
  if (HEAP32[$1 + 8 >> 2] > 19) {
   HEAP32[$1 + 4 >> 2] = jsvNewFlatStringOfLength(HEAP32[$1 + 8 >> 2]);
  }
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 4 >> 2] = jsvNewStringOfLength(HEAP32[$1 + 8 >> 2], 0);
  }
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 >> 2] = jsvNewArrayBufferFromString(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 8 >> 2]);
  jsvUnLock(HEAP32[$1 + 4 >> 2]);
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvIsIntegerish($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
  $0 = 1;
  label$3: {
   if (HEAP8[$1 + 7 | 0] == 10) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 13) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 15) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 16) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 17) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 13) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 12) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 17) {
    break label$3;
   }
   $0 = HEAP8[$1 + 7 | 0] == 2;
  }
  HEAP8[$1 + 15 | 0] = $0;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function __jspePostfixExpression($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 while (1) {
  $0 = 1;
  $0 = HEAP16[HEAP32[44743] + 2 >> 1] != 152 ? HEAP16[HEAP32[44743] + 2 >> 1] == 153 : $0;
  if ($0) {
   HEAP32[$1 + 24 >> 2] = HEAP16[HEAP32[44743] + 2 >> 1];
   jslGetNextToken();
   if ((HEAP32[86758] & 63) == 1) {
    HEAP32[$1 + 20 >> 2] = jsvNewFromInteger(1);
    HEAP32[$1 + 16 >> 2] = jsvAsNumberAndUnLock(jsvSkipName(HEAP32[$1 + 28 >> 2]));
    HEAP32[$1 + 12 >> 2] = jsvMathsOpSkipNames(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 20 >> 2], HEAP32[$1 + 24 >> 2] == 152 ? 43 : 45);
    jsvUnLock(HEAP32[$1 + 20 >> 2]);
    jsvReplaceWith(HEAP32[$1 + 28 >> 2], HEAP32[$1 + 12 >> 2]);
    jsvUnLock(HEAP32[$1 + 12 >> 2]);
    jsvUnLock(HEAP32[$1 + 28 >> 2]);
    HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 16 >> 2];
   }
   continue;
  }
  break;
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function jspeiFindInScopes($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 label$1: {
  if (HEAP32[86752]) {
   HEAP32[$1 + 20 >> 2] = jsvLockSafe(jsvGetLastChild(HEAP32[86752]) & 65535);
   while (1) {
    if (HEAP32[$1 + 20 >> 2]) {
     HEAP32[$1 + 16 >> 2] = jsvSkipName(HEAP32[$1 + 20 >> 2]);
     HEAP16[$1 + 14 >> 1] = jsvGetPrevSibling(HEAP32[$1 + 20 >> 2]);
     HEAP32[$1 + 8 >> 2] = jsvFindChildFromString(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 24 >> 2]);
     jsvUnLock2(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 16 >> 2]);
     if (HEAP32[$1 + 8 >> 2]) {
      HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 8 >> 2];
      break label$1;
     } else {
      HEAP32[$1 + 20 >> 2] = jsvLockSafe(HEAPU16[$1 + 14 >> 1]);
      continue;
     }
    }
    break;
   }
  }
  HEAP32[$1 + 28 >> 2] = jsvFindChildFromString(HEAP32[86750], HEAP32[$1 + 24 >> 2]);
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function jsiMoveCursor($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 while (1) {
  if (HEAPU32[$4 + 12 >> 2] < HEAPU32[$4 + 4 >> 2]) {
   jsiConsolePrintString(125164);
   HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 while (1) {
  if (HEAPU32[$4 + 12 >> 2] > HEAPU32[$4 + 4 >> 2]) {
   jsiConsolePrintString(124966);
   HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] - 1;
   continue;
  }
  break;
 }
 while (1) {
  if (HEAPU32[$4 + 8 >> 2] < HEAPU32[$4 >> 2]) {
   jsiConsolePrintString(125200);
   HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 while (1) {
  if (HEAPU32[$4 + 8 >> 2] > HEAPU32[$4 >> 2]) {
   jsiConsolePrintString(125222);
   HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 8 >> 2] - 1;
   continue;
  }
  break;
 }
 __stack_pointer = $4 + 16 | 0;
}

function jsvGetStringChars($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer + -64 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 56 >> 2] = $0;
 HEAP32[$4 + 52 >> 2] = $1;
 HEAP32[$4 + 48 >> 2] = $2;
 HEAP32[$4 + 44 >> 2] = $3;
 HEAP32[$4 + 40 >> 2] = HEAP32[$4 + 44 >> 2];
 jsvStringIteratorNew($4, HEAP32[$4 + 56 >> 2], HEAP32[$4 + 52 >> 2]);
 label$1: {
  while (1) {
   if (jsvStringIteratorHasChar_1($4) & 1) {
    $0 = HEAP32[$4 + 40 >> 2];
    HEAP32[$4 + 40 >> 2] = $0 - 1;
    if ($0) {
     $1 = jsvStringIteratorGetCharAndNext($4);
     $0 = HEAP32[$4 + 48 >> 2];
     HEAP32[$4 + 48 >> 2] = $0 + 1;
     HEAP8[$0 | 0] = $1;
     continue;
    } else {
     jsvStringIteratorFree_1($4);
     HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 44 >> 2];
     break label$1;
    }
   }
   break;
  }
  jsvStringIteratorFree_1($4);
  HEAP32[$4 + 60 >> 2] = HEAP32[$4 + 44 >> 2] - HEAP32[$4 + 40 >> 2];
 }
 __stack_pointer = $4 - -64 | 0;
 return HEAP32[$4 + 60 >> 2];
}

function jsvGetValueOfName($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  if (jsvIsArrayBufferName(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = jsvArrayBufferGetFromName(HEAP32[$1 + 8 >> 2]);
   break label$1;
  }
  if (jsvIsNameInt(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = jsvNewFromInteger(jsvGetFirstChildSigned(HEAP32[$1 + 8 >> 2]) << 16 >> 16);
   break label$1;
  }
  if (jsvIsNameIntBool(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = jsvNewFromBool((jsvGetFirstChild(HEAP32[$1 + 8 >> 2]) & 65535) != 0);
   break label$1;
  }
  if (jsvIsName(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = jsvLockSafe(jsvGetFirstChild(HEAP32[$1 + 8 >> 2]) & 65535);
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function tflite__GetQuantizedConvolutionMultipler_28TfLiteContext__2c_20TfLiteTensor_20const__2c_20TfLiteTensor_20const__2c_20TfLiteTensor__2c_20double__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 48 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 40 >> 2] = $0;
 HEAP32[$5 + 36 >> 2] = $1;
 HEAP32[$5 + 32 >> 2] = $2;
 HEAP32[$5 + 28 >> 2] = $3;
 HEAP32[$5 + 24 >> 2] = $4;
 HEAPF64[$5 + 16 >> 3] = Math_fround(HEAPF32[HEAP32[$5 + 36 >> 2] + 8 >> 2] * HEAPF32[HEAP32[$5 + 32 >> 2] + 8 >> 2]);
 label$1: {
  if (!(HEAPF64[$5 + 16 >> 3] >= 0)) {
   $0 = HEAP32[HEAP32[$5 + 40 >> 2] + 20 >> 2];
   $1 = HEAP32[$5 + 40 >> 2];
   HEAP32[$5 >> 2] = 126780;
   FUNCTION_TABLE[$0 | 0]($1, 127303, $5);
   HEAP32[$5 + 44 >> 2] = 1;
   break label$1;
  }
  HEAPF64[HEAP32[$5 + 24 >> 2] >> 3] = HEAPF64[$5 + 16 >> 3] / +HEAPF32[HEAP32[$5 + 28 >> 2] + 8 >> 2];
  HEAP32[$5 + 44 >> 2] = 0;
 }
 __stack_pointer = $5 + 48 | 0;
 return HEAP32[$5 + 44 >> 2];
}

function jsvGetArrayItems($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 jsvObjectIteratorNew($3 + 16 | 0, HEAP32[$3 + 28 >> 2]);
 HEAP32[$3 + 12 >> 2] = 0;
 while (1) {
  if (jsvObjectIteratorHasValue($3 + 16 | 0) & 1) {
   if (HEAPU32[$3 + 12 >> 2] < HEAPU32[$3 + 24 >> 2]) {
    $1 = jsvObjectIteratorGetValue($3 + 16 | 0);
    $2 = HEAP32[$3 + 20 >> 2];
    $0 = HEAP32[$3 + 12 >> 2];
    HEAP32[$3 + 12 >> 2] = $0 + 1;
    HEAP32[($0 << 2) + $2 >> 2] = $1;
   }
   jsvObjectIteratorNext($3 + 16 | 0);
   continue;
  }
  break;
 }
 jsvObjectIteratorFree($3 + 16 | 0);
 while (1) {
  if (HEAPU32[$3 + 12 >> 2] < HEAPU32[$3 + 24 >> 2]) {
   $1 = HEAP32[$3 + 20 >> 2];
   $0 = HEAP32[$3 + 12 >> 2];
   HEAP32[$3 + 12 >> 2] = $0 + 1;
   HEAP32[($0 << 2) + $1 >> 2] = 0;
   continue;
  }
  break;
 }
 __stack_pointer = $3 + 32 | 0;
}

function jswrap_arraybufferview_sort($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  if (!(jsvIsArrayBuffer(HEAP32[$2 + 24 >> 2]) & 1)) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP8[$2 + 19 | 0] = (HEAPU8[HEAP32[$2 + 24 >> 2] + 5 | 0] & 32) != 0;
  if (HEAP32[$2 + 20 >> 2]) {
   HEAP32[$2 + 28 >> 2] = jswrap_array_sort(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2]);
   break label$1;
  }
  label$4: {
   if (HEAP8[$2 + 19 | 0] & 1) {
    $0 = jsvNewNativeFunction(595, 511);
    break label$4;
   }
   $0 = jsvNewNativeFunction(596, 292);
  }
  HEAP32[$2 + 20 >> 2] = $0;
  HEAP32[$2 + 12 >> 2] = jswrap_array_sort(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2]);
  jsvUnLock(HEAP32[$2 + 20 >> 2]);
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jsfIsEqual($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 160 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 152 >> 2] = $0;
 HEAP32[$3 + 148 >> 2] = $1;
 HEAP32[$3 + 144 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = 0;
 label$1: {
  while (1) {
   if (HEAP32[$3 + 144 >> 2]) {
    HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 144 >> 2];
    if (HEAPU32[$3 + 8 >> 2] > 128) {
     HEAP32[$3 + 8 >> 2] = 128;
    }
    jshFlashRead($3 + 16 | 0, HEAP32[$3 + 152 >> 2] + HEAP32[$3 + 12 >> 2] | 0, HEAP32[$3 + 8 >> 2]);
    if (memcmp($3 + 16 | 0, HEAP32[$3 + 148 >> 2] + HEAP32[$3 + 12 >> 2] | 0, HEAP32[$3 + 8 >> 2])) {
     HEAP8[$3 + 159 | 0] = 0;
     break label$1;
    } else {
     HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 8 >> 2] + HEAP32[$3 + 12 >> 2];
     HEAP32[$3 + 144 >> 2] = HEAP32[$3 + 144 >> 2] - HEAP32[$3 + 8 >> 2];
     continue;
    }
   }
   break;
  }
  HEAP8[$3 + 159 | 0] = 1;
 }
 __stack_pointer = $3 + 160 | 0;
 return HEAP8[$3 + 159 | 0] & 1;
}

function lcdMemLCD_setPixel($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 16 >> 2] = lcdMemLCD_convert16toLCD(HEAP32[$4 + 16 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2]);
 lcdMemLCD_waitForSendComplete();
 HEAP32[$4 + 12 >> 2] = (Math_imul(HEAP32[$4 + 24 >> 2], 3) + 16 | 0) + (Math_imul(HEAP32[$4 + 20 >> 2], 68) << 3);
 HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 12 >> 2] & 7;
 $0 = HEAP32[$4 + 12 >> 2] >> 3;
 HEAP16[$4 + 6 >> 1] = HEAPU8[$0 + 361504 | 0] | HEAPU8[$0 + 361505 | 0] << 8;
 $0 = HEAP32[$4 + 12 >> 2] >> 3;
 $1 = HEAPU16[$4 + 6 >> 1] & (7 << HEAP32[$4 + 8 >> 2] ^ -1) | HEAP32[$4 + 16 >> 2] << HEAP32[$4 + 8 >> 2];
 HEAP8[$0 + 361504 | 0] = $1;
 HEAP8[$0 + 361505 | 0] = $1 >>> 8;
 __stack_pointer = $4 + 32 | 0;
}

function _jswrap_banglejs_setLocked($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 31 | 0] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 if ((HEAP32[93413] & 262144) != (HEAP8[$2 + 31 | 0] & 1)) {
  HEAP32[$2 + 20 >> 2] = jsvObjectGetChildIfExists(HEAP32[86750], 120138);
  if (HEAP32[$2 + 20 >> 2]) {
   HEAP32[$2 + 12 >> 2] = jsvNewFromBool(HEAP8[$2 + 31 | 0] & 1);
   $1 = $2 + 12 | 0;
   label$3: {
    if (HEAP32[$2 + 24 >> 2]) {
     $0 = jsvNewFromString(HEAP32[$2 + 24 >> 2]);
     break label$3;
    }
    $0 = 0;
   }
   HEAP32[$1 + 4 >> 2] = $0;
   jsiQueueObjectCallbacks(HEAP32[$2 + 20 >> 2], 118159, $2 + 12 | 0, 2);
   jsvUnLockMany(2, $2 + 12 | 0);
  }
  jsvUnLock(HEAP32[$2 + 20 >> 2]);
 }
 label$5: {
  if (HEAP8[$2 + 31 | 0] & 1) {
   HEAP32[93413] = HEAP32[93413] | 262144;
   break label$5;
  }
  HEAP16[186838] = 0;
  HEAP32[93413] = HEAP32[93413] & -262145;
 }
 __stack_pointer = $2 + 32 | 0;
}

function jsiExecuteEventCallback($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 HEAP32[$4 + 8 >> 2] = jsvSkipName(HEAP32[$4 + 20 >> 2]);
 label$1: {
  if (!HEAP32[$4 + 8 >> 2]) {
   HEAP8[$4 + 31 | 0] = 0;
   break label$1;
  }
  HEAP16[173534] = HEAPU16[173534] | 8192;
  HEAP8[$4 + 7 | 0] = jsiExecuteEventCallbackInner(HEAP32[$4 + 24 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 16 >> 2], HEAP32[$4 + 12 >> 2]) & 1;
  jsvUnLock(HEAP32[$4 + 8 >> 2]);
  HEAP16[173534] = HEAPU16[173534] & -24577;
  label$3: {
   if (HEAP8[$4 + 7 | 0] & 1) {
    if (!(jspIsInterrupted() & 1)) {
     break label$3;
    }
   }
   HEAP16[173534] = HEAPU16[173534] | 32768;
   HEAP8[$4 + 31 | 0] = 0;
   break label$1;
  }
  HEAP8[$4 + 31 | 0] = 1;
 }
 __stack_pointer = $4 + 32 | 0;
 return HEAP8[$4 + 31 | 0] & 1;
}

function jsvFindChildFromVar($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP8[$3 + 19 | 0] = $2;
 HEAP16[$3 + 10 >> 1] = jsvGetFirstChild(HEAP32[$3 + 24 >> 2]);
 label$1: {
  while (1) {
   if (HEAPU16[$3 + 10 >> 1]) {
    HEAP32[$3 + 12 >> 2] = jsvLock(HEAPU16[$3 + 10 >> 1]);
    if (jsvIsBasicVarEqual(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 20 >> 2]) & 1) {
     break label$1;
    }
    HEAP16[$3 + 10 >> 1] = jsvGetNextSibling(HEAP32[$3 + 12 >> 2]);
    jsvUnLock(HEAP32[$3 + 12 >> 2]);
    continue;
   }
   break;
  }
  HEAP32[$3 + 12 >> 2] = 0;
  if (!(!(HEAP8[$3 + 19 | 0] & 1) | !HEAP32[$3 + 20 >> 2])) {
   HEAP32[$3 + 12 >> 2] = jsvAsName(HEAP32[$3 + 20 >> 2]);
   jsvAddName(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 12 >> 2]);
  }
 }
 HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2];
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function graphicsGetPixelDevice($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = $1;
 HEAP32[$3 >> 2] = $2;
 label$1: {
  label$2: {
   label$3: {
    if ((HEAP32[$3 + 4 >> 2] | HEAP32[$3 >> 2]) < 0) {
     break label$3;
    }
    $0 = HEAP32[$3 + 8 >> 2];
    if (HEAP32[$3 + 4 >> 2] >= (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8)) {
     break label$3;
    }
    $0 = HEAP32[$3 + 8 >> 2];
    if (HEAP32[$3 >> 2] < (HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8)) {
     break label$2;
    }
   }
   HEAP32[$3 + 12 >> 2] = 0;
   break label$1;
  }
  $0 = HEAP32[$3 + 8 >> 2];
  HEAP32[$3 + 12 >> 2] = FUNCTION_TABLE[HEAPU8[$0 + 60 | 0] | HEAPU8[$0 + 61 | 0] << 8 | (HEAPU8[$0 + 62 | 0] << 16 | HEAPU8[$0 + 63 | 0] << 24)](HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], HEAP32[$3 >> 2]);
 }
 __stack_pointer = $3 + 16 | 0;
 return HEAP32[$3 + 12 >> 2];
}

function jslPreserveSpaceBetweenTokens($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (!(!(HEAP32[$2 + 8 >> 2] == 128 | HEAP32[$2 + 8 >> 2] == 130) & HEAP32[$2 + 8 >> 2] != 129 | !(HEAP32[$2 + 4 >> 2] == 128 | HEAP32[$2 + 4 >> 2] == 130) & HEAP32[$2 + 4 >> 2] != 129)) {
   HEAP8[$2 + 15 | 0] = 1;
   break label$1;
  }
  label$5: {
   label$6: {
    if (HEAP32[$2 + 8 >> 2] == 47 & HEAP32[$2 + 4 >> 2] == 135 | (HEAP32[$2 + 8 >> 2] == 45 & HEAP32[$2 + 4 >> 2] == 45 | HEAP32[$2 + 8 >> 2] == 43 & HEAP32[$2 + 4 >> 2] == 43)) {
     break label$6;
    }
    if (HEAP32[$2 + 8 >> 2] != 135) {
     break label$5;
    }
    if (HEAP32[$2 + 4 >> 2] == 47) {
     break label$6;
    }
    if (HEAP32[$2 + 4 >> 2] != 128) {
     break label$5;
    }
   }
   HEAP8[$2 + 15 | 0] = 1;
   break label$1;
  }
  HEAP8[$2 + 15 | 0] = 0;
 }
 return HEAP8[$2 + 15 | 0] & 1;
}

function jswrap_espruino_lookupNoCase($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 96 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 88 >> 2] = $0;
 HEAP32[$3 + 84 >> 2] = $1;
 HEAP8[$3 + 83 | 0] = $2;
 label$1: {
  if (!(jsvHasChildren(HEAP32[$3 + 88 >> 2]) & 1)) {
   HEAP32[$3 + 92 >> 2] = 0;
   break label$1;
  }
  if ((jsvGetString(HEAP32[$3 + 84 >> 2], $3 + 16 | 0, 64) | 0) == 64) {
   HEAP32[$3 >> 2] = 64;
   jsExceptionHere(1, 142561, $3);
  }
  if (HEAP8[$3 + 83 | 0] & 1) {
   HEAP32[$3 + 12 >> 2] = jsvFindChildFromStringI(HEAP32[$3 + 88 >> 2], $3 + 16 | 0);
   if (HEAP32[$3 + 12 >> 2]) {
    HEAP32[$3 + 92 >> 2] = jsvAsStringAndUnLock(HEAP32[$3 + 12 >> 2]);
    break label$1;
   }
   HEAP32[$3 + 92 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 92 >> 2] = jsvObjectGetChildI(HEAP32[$3 + 88 >> 2], $3 + 16 | 0);
 }
 __stack_pointer = $3 + 96 | 0;
 return HEAP32[$3 + 92 >> 2];
}

function tflite__internal__GetFlatbufferTensorBuffer_28tflite__Tensor_20const__2c_20flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer___20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = 0;
 HEAP32[$2 + 16 >> 2] = flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer____operator_5b_5d_28unsigned_20int_29_20const(HEAP32[$2 + 24 >> 2], tflite__Tensor__buffer_28_29_20const(HEAP32[$2 + 28 >> 2]));
 if (HEAP32[$2 + 16 >> 2]) {
  HEAP32[$2 + 12 >> 2] = tflite__Buffer__data_28_29_20const(HEAP32[$2 + 16 >> 2]);
  if (HEAP32[$2 + 12 >> 2]) {
   if (flatbuffers__Vector_unsigned_20char___size_28_29_20const(HEAP32[$2 + 12 >> 2])) {
    HEAP32[$2 + 20 >> 2] = flatbuffers__Vector_unsigned_20char___data_28_29_20const(HEAP32[$2 + 12 >> 2]);
   }
  }
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 20 >> 2];
}

function jswrap_object_create($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  label$2: {
   if (jsvIsObject(HEAP32[$2 + 24 >> 2]) & 1) {
    break label$2;
   }
   if (jsvIsNull(HEAP32[$2 + 24 >> 2]) & 1) {
    break label$2;
   }
   HEAP32[$2 >> 2] = HEAP32[$2 + 24 >> 2];
   jsExceptionHere(3, 114783, $2);
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  if (jsvIsObject(HEAP32[$2 + 20 >> 2]) & 1) {
   jsExceptionHere(1, 113142, 0);
  }
  HEAP32[$2 + 16 >> 2] = jsvNewObject();
  if (!HEAP32[$2 + 16 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  if (jsvIsObject(HEAP32[$2 + 24 >> 2]) & 1) {
   jsvObjectSetChild(HEAP32[$2 + 16 >> 2], 123007, HEAP32[$2 + 24 >> 2]);
  }
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jswrap_string_startsWith($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 label$1: {
  if (!(jsvIsString(HEAP32[$3 + 24 >> 2]) & 1)) {
   HEAP8[$3 + 31 | 0] = 0;
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = jsvAsString(HEAP32[$3 + 20 >> 2]);
  HEAP8[$3 + 11 | 0] = 0;
  label$3: {
   if (HEAP32[$3 + 16 >> 2] < 0) {
    break label$3;
   }
   if ((jsvGetStringLength(HEAP32[$3 + 12 >> 2]) + HEAP32[$3 + 16 >> 2] | 0) > (jsvGetStringLength(HEAP32[$3 + 24 >> 2]) | 0)) {
    break label$3;
   }
   HEAP8[$3 + 11 | 0] = !jsvCompareString(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 12 >> 2], HEAP32[$3 + 16 >> 2], 0, 1);
  }
  jsvUnLock(HEAP32[$3 + 12 >> 2]);
  HEAP8[$3 + 31 | 0] = HEAP8[$3 + 11 | 0] & 1;
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP8[$3 + 31 | 0] & 1;
}

function jsvGetFunctionArgumentLength($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = jsvNewEmptyArray();
 label$1: {
  if (!HEAP32[$1 + 20 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  jsvObjectIteratorNew($1 + 16 | 0, HEAP32[$1 + 24 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue($1 + 16 | 0) & 1) {
    HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetKey($1 + 16 | 0);
    if (jsvIsFunctionParameter(HEAP32[$1 + 12 >> 2]) & 1) {
     HEAP32[$1 + 8 >> 2] = jsvSkipOneName(HEAP32[$1 + 12 >> 2]);
     jsvArrayPushAndUnLock(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 8 >> 2]);
    }
    jsvUnLock(HEAP32[$1 + 12 >> 2]);
    jsvObjectIteratorNext($1 + 16 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree($1 + 16 | 0);
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function jsiHandleMoveUpDown($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP32[$1 + 16 >> 2] = jsvGetLinesInString(HEAP32[86768]);
 jsvGetLineAndCol(HEAP32[86768], HEAP32[86770], $1 + 20 | 0, $1 + 24 | 0);
 HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 24 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 20 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + HEAP32[$1 + 28 >> 2];
 if (!HEAP32[$1 + 8 >> 2]) {
  HEAP32[$1 + 8 >> 2] = 1;
 }
 if (HEAPU32[$1 + 8 >> 2] > HEAPU32[$1 + 16 >> 2]) {
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 16 >> 2];
 }
 HEAP32[86770] = jsvGetIndexFromLineAndCol(HEAP32[86768], HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]);
 jsvGetLineAndCol(HEAP32[86768], HEAP32[86770], $1 + 8 | 0, $1 + 12 | 0);
 if (jsiShowInputLine() & 1) {
  jsiMoveCursor(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 20 >> 2], HEAP32[$1 + 12 >> 2], HEAP32[$1 + 8 >> 2]);
 }
 __stack_pointer = $1 + 32 | 0;
}

function jswrap_espruino_enableWatchdog($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAPF64[$2 + 24 >> 3] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  label$2: {
   if (HEAPF64[$2 + 24 >> 3] < 0) {
    break label$2;
   }
   $3 = __DOUBLE_BITS_7(HEAPF64[$2 + 24 >> 3]);
   $1 = $3;
   $4 = i64toi32_i32$HIGH_BITS;
   $3 = $4 & 2147483647;
   $4 = $1;
   if (($3 | 0) == 2146435072 & ($4 | 0) != 0 | $3 >>> 0 > 2146435072) {
    break label$2;
   }
   break label$1;
  }
  HEAPF64[$2 + 24 >> 3] = 1;
 }
 label$3: {
  label$4: {
   if (!(jsvIsUndefined(HEAP32[$2 + 20 >> 2]) & 1)) {
    if (!(jsvGetBool(HEAP32[$2 + 20 >> 2]) & 1)) {
     break label$4;
    }
   }
   HEAP16[173534] = HEAPU16[173534] | 512;
   break label$3;
  }
  HEAP16[173534] = HEAPU16[173534] & -513;
 }
 jshEnableWatchDog(HEAPF64[$2 + 24 >> 3]);
 __stack_pointer = $2 + 32 | 0;
}

function jsvIsIterable($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
  $0 = 1;
  label$3: {
   if (HEAP8[$1 + 7 | 0] == 3) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 5) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 1) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 7) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 9) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 8) {
    break label$3;
   }
   if (HEAP8[$1 + 7 | 0] >= 18) {
    $0 = 1;
    if (HEAP8[$1 + 7 | 0] <= 40) {
     break label$3;
    }
   }
   $0 = HEAP8[$1 + 7 | 0] == 4;
  }
  HEAP8[$1 + 15 | 0] = $0;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function jsvGetArrayBufferBackingString($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (!HEAP32[$2 + 8 >> 2]) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  jsvLockAgain(HEAP32[$2 + 8 >> 2]);
  if (HEAP32[$2 + 4 >> 2]) {
   HEAP32[HEAP32[$2 + 4 >> 2] >> 2] = 0;
  }
  while (1) {
   if (jsvIsArrayBuffer(HEAP32[$2 + 8 >> 2]) & 1) {
    if (HEAP32[$2 + 4 >> 2]) {
     $0 = HEAP32[$2 + 4 >> 2];
     $1 = HEAP32[$2 + 8 >> 2];
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + (HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8);
    }
    HEAP32[$2 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$2 + 8 >> 2]) & 65535);
    jsvUnLock(HEAP32[$2 + 8 >> 2]);
    HEAP32[$2 + 8 >> 2] = HEAP32[$2 >> 2];
    continue;
   }
   break;
  }
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 8 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function graphicsGetSetPixelUnclippedFn($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 24 >> 2] = $0;
 HEAP32[$6 + 20 >> 2] = $1;
 HEAP32[$6 + 16 >> 2] = $2;
 HEAP32[$6 + 12 >> 2] = $3;
 HEAP32[$6 + 8 >> 2] = $4;
 HEAP8[$6 + 7 | 0] = $5;
 label$1: {
  label$2: {
   $0 = HEAP32[$6 + 24 >> 2];
   if (!((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 112)) {
    if (!(graphicsSetModifiedAndClip(HEAP32[$6 + 24 >> 2], $6 + 20 | 0, $6 + 16 | 0, $6 + 12 | 0, $6 + 8 | 0, HEAP8[$6 + 7 | 0] & 1) & 1)) {
     break label$2;
    }
   }
   HEAP32[$6 + 28 >> 2] = 571;
   break label$1;
  }
  $0 = HEAP32[$6 + 24 >> 2];
  HEAP32[$6 + 28 >> 2] = HEAPU8[$0 + 52 | 0] | HEAPU8[$0 + 53 | 0] << 8 | (HEAPU8[$0 + 54 | 0] << 16 | HEAPU8[$0 + 55 | 0] << 24);
 }
 __stack_pointer = $6 + 32 | 0;
 return HEAP32[$6 + 28 >> 2];
}

function jshFlashErasePages($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 24 >> 2] + HEAP32[$2 + 20 >> 2];
 label$1: {
  if (!(jshFlashGetPage(HEAP32[$2 + 24 >> 2], $2 + 12 | 0, $2 + 8 | 0) & 1)) {
   HEAP8[$2 + 31 | 0] = 0;
   break label$1;
  }
  while (1) {
   $0 = 0;
   if (HEAPU32[$2 + 12 >> 2] < HEAPU32[$2 + 16 >> 2]) {
    $0 = jspIsInterrupted() ^ -1;
   }
   if ($0 & 1) {
    jshFlashErasePage(HEAP32[$2 + 12 >> 2]);
    if (!(jshFlashGetPage(HEAP32[$2 + 12 >> 2] + HEAP32[$2 + 8 >> 2] | 0, $2 + 12 | 0, $2 + 8 | 0) & 1)) {
     HEAP8[$2 + 31 | 0] = 1;
     break label$1;
    }
    jshKickWatchDog();
    jshKickSoftWatchDog();
    continue;
   }
   break;
  }
  HEAP8[$2 + 31 | 0] = (jspIsInterrupted() ^ -1) & 1;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP8[$2 + 31 | 0] & 1;
}

function __stpcpy($0, $1) {
 var $2 = 0;
 label$1: {
  label$2: {
   if (($0 ^ $1) & 3) {
    $2 = HEAPU8[$1 | 0];
    break label$2;
   }
   if ($1 & 3) {
    while (1) {
     $2 = HEAPU8[$1 | 0];
     HEAP8[$0 | 0] = $2;
     if (!$2) {
      break label$1;
     }
     $0 = $0 + 1 | 0;
     $1 = $1 + 1 | 0;
     if ($1 & 3) {
      continue;
     }
     break;
    }
   }
   $2 = HEAP32[$1 >> 2];
   if (($2 ^ -1) & $2 - 16843009 & -2139062144) {
    break label$2;
   }
   while (1) {
    HEAP32[$0 >> 2] = $2;
    $2 = HEAP32[$1 + 4 >> 2];
    $0 = $0 + 4 | 0;
    $1 = $1 + 4 | 0;
    if (!($2 - 16843009 & ($2 ^ -1) & -2139062144)) {
     continue;
    }
    break;
   }
  }
  HEAP8[$0 | 0] = $2;
  if (!($2 & 255)) {
   break label$1;
  }
  while (1) {
   $2 = HEAPU8[$1 + 1 | 0];
   HEAP8[$0 + 1 | 0] = $2;
   $0 = $0 + 1 | 0;
   $1 = $1 + 1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
 return $0;
}

function tflite__MicroMutableOpResolver_9u___FindOp_28char_20const__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 $0 = HEAP32[$2 + 24 >> 2];
 HEAP32[$2 + 16 >> 2] = 0;
 label$1: {
  while (1) {
   if (HEAPU32[$2 + 16 >> 2] < HEAPU32[$0 + 292 >> 2]) {
    HEAP32[$2 + 12 >> 2] = ($0 + 4 | 0) + (HEAP32[$2 + 16 >> 2] << 5);
    label$4: {
     if (HEAP32[HEAP32[$2 + 12 >> 2] + 20 >> 2] != 32) {
      break label$4;
     }
     if (strcmp(HEAP32[HEAP32[$2 + 12 >> 2] + 24 >> 2], HEAP32[$2 + 20 >> 2])) {
      break label$4;
     }
     HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
     break label$1;
    }
    HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 16 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$2 + 28 >> 2] = 0;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function tflite__CalculateInputRadius_28int_2c_20int_2c_20int_29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 32 | 0;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 $0 = $3;
 $1 = HEAP32[$3 + 20 >> 2] - HEAP32[$3 + 28 >> 2] | 0;
 $2 = $1 & 31;
 $4 = +((1 << HEAP32[$3 + 28 >> 2]) - 1 | 0) * 1;
 if (($1 & 63) >>> 0 >= 32) {
  $1 = 1 << $2;
  $2 = 0;
 } else {
  $1 = (1 << $2) - 1 & 1 >>> 32 - $2;
  $2 = 1 << $2;
 }
 $4 = $4 * (+($2 >>> 0) + +($1 | 0) * 4294967296);
 $1 = HEAP32[$3 + 24 >> 2];
 $2 = $1 & 31;
 if (($1 & 63) >>> 0 >= 32) {
  $1 = 1 << $2;
  $2 = 0;
 } else {
  $1 = (1 << $2) - 1 & 1 >>> 32 - $2;
  $2 = 1 << $2;
 }
 HEAPF64[$0 + 8 >> 3] = $4 / (+($2 >>> 0) + +($1 | 0) * 4294967296);
 $4 = Math_floor(HEAPF64[$3 + 8 >> 3]);
 label$1: {
  if (Math_abs($4) < 2147483648) {
   $0 = ~~$4;
   break label$1;
  }
  $0 = -2147483648;
 }
 return $0;
}

function jshGetDeviceFor($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP16[$3 + 12 >> 1] = $0;
 HEAP16[$3 + 10 >> 1] = $1;
 HEAP8[$3 + 9 | 0] = $2;
 label$1: {
  if (!(jshIsPinValid(HEAPU8[$3 + 9 | 0]) & 1)) {
   HEAP16[$3 + 14 >> 1] = 0;
   break label$1;
  }
  HEAP32[$3 + 4 >> 2] = 0;
  while (1) {
   if (HEAP32[$3 + 4 >> 2] < 0) {
    $0 = (Math_imul(HEAPU8[$3 + 9 | 0], 3) + 163715 | 0) + (HEAP32[$3 + 4 >> 2] << 1) | 0;
    HEAP16[$3 + 2 >> 1] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8;
    if (!(HEAPU16[$3 + 10 >> 1] < (HEAPU16[$3 + 2 >> 1] & 4080) | HEAPU16[$3 + 12 >> 1] > (HEAPU16[$3 + 2 >> 1] & 4080))) {
     HEAP16[$3 + 14 >> 1] = HEAPU16[$3 + 2 >> 1];
     break label$1;
    }
    HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP16[$3 + 14 >> 1] = 0;
 }
 __stack_pointer = $3 + 16 | 0;
 return HEAPU16[$3 + 14 >> 1];
}

function jsvArrayPushAll($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP8[$3 + 23 | 0] = $2;
 jsvObjectIteratorNew($3 + 16 | 0, HEAP32[$3 + 24 >> 2]);
 while (1) {
  if (jsvObjectIteratorHasValue($3 + 16 | 0) & 1) {
   HEAP32[$3 + 12 >> 2] = jsvObjectIteratorGetValue($3 + 16 | 0);
   HEAP8[$3 + 11 | 0] = 1;
   if (HEAP8[$3 + 23 | 0] & 1) {
    HEAP32[$3 + 4 >> 2] = jsvGetIndexOf(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 12 >> 2], 0);
    if (HEAP32[$3 + 4 >> 2]) {
     HEAP8[$3 + 11 | 0] = 0;
     jsvUnLock(HEAP32[$3 + 4 >> 2]);
    }
   }
   if (HEAP8[$3 + 11 | 0] & 1) {
    jsvArrayPush(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 12 >> 2]);
   }
   jsvUnLock(HEAP32[$3 + 12 >> 2]);
   jsvObjectIteratorNext($3 + 16 | 0);
   continue;
  }
  break;
 }
 jsvObjectIteratorFree($3 + 16 | 0);
 __stack_pointer = $3 + 32 | 0;
}

function jsfResetStorage_progress($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = 0;
 while (1) {
  if (HEAP32[$3 + 20 >> 2]) {
   HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 20 >> 2];
   if (HEAPU32[$3 + 16 >> 2] > 8192) {
    HEAP32[$3 + 16 >> 2] = 8192;
   }
   jshFlashWrite(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 16 >> 2]);
   HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 16 >> 2] + HEAP32[$3 + 28 >> 2];
   HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 16 >> 2] + HEAP32[$3 + 24 >> 2];
   HEAP32[$3 + 20 >> 2] = HEAP32[$3 + 20 >> 2] - HEAP32[$3 + 16 >> 2];
   HEAP32[$3 >> 2] = HEAP8[(HEAP32[$3 + 12 >> 2] & 3) + 111528 | 0];
   jsiConsolePrintf(122862, $3);
   HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $3 + 32 | 0;
}

function jswrap_graphics_lineTo($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 96 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 88 >> 2] = $0;
 HEAP32[$3 + 84 >> 2] = $1;
 HEAP32[$3 + 80 >> 2] = $2;
 label$1: {
  if (!(graphicsGetFromVar($3 + 8 | 0, HEAP32[$3 + 88 >> 2]) & 1)) {
   HEAP32[$3 + 92 >> 2] = 0;
   break label$1;
  }
  graphicsDrawLine($3 + 8 | 0, (HEAPU8[$3 + 35 | 0] | HEAPU8[$3 + 36 | 0] << 8) << 16 >> 16, (HEAPU8[$3 + 37 | 0] | HEAPU8[$3 + 38 | 0] << 8) << 16 >> 16, HEAP32[$3 + 84 >> 2], HEAP32[$3 + 80 >> 2]);
  $0 = HEAP32[$3 + 84 >> 2];
  HEAP8[$3 + 35 | 0] = $0;
  HEAP8[$3 + 36 | 0] = $0 >>> 8;
  $0 = HEAP32[$3 + 80 >> 2];
  HEAP8[$3 + 37 | 0] = $0;
  HEAP8[$3 + 38 | 0] = $0 >>> 8;
  graphicsSetVar($3 + 8 | 0);
  HEAP32[$3 + 92 >> 2] = jsvLockAgain(HEAP32[$3 + 88 >> 2]);
 }
 __stack_pointer = $3 + 96 | 0;
 return HEAP32[$3 + 92 >> 2];
}

function jswrap_date_setHours($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0;
 $5 = __stack_pointer - 48 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 44 >> 2] = $0;
 HEAP32[$5 + 40 >> 2] = $1;
 HEAP32[$5 + 36 >> 2] = $2;
 HEAP32[$5 + 32 >> 2] = $3;
 HEAP32[$5 + 28 >> 2] = $4;
 getTimeFromDateVar($5, HEAP32[$5 + 44 >> 2], 0);
 HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 40 >> 2];
 if (jsvIsNumeric(HEAP32[$5 + 36 >> 2]) & 1) {
  HEAP32[$5 + 12 >> 2] = jsvGetInteger(HEAP32[$5 + 36 >> 2]);
 }
 if (jsvIsNumeric(HEAP32[$5 + 32 >> 2]) & 1) {
  HEAP32[$5 + 8 >> 2] = jsvGetInteger(HEAP32[$5 + 32 >> 2]);
 }
 if (jsvIsNumeric(HEAP32[$5 + 28 >> 2]) & 1) {
  HEAP32[$5 + 4 >> 2] = jsvGetInteger(HEAP32[$5 + 28 >> 2]);
 }
 setCorrectTimeZone($5);
 $6 = jswrap_date_setTime(HEAP32[$5 + 44 >> 2], fromTimeInDay($5));
 __stack_pointer = $5 + 48 | 0;
 return +$6;
}

function jsvStringIteratorNew($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jsvLockAgain(HEAP32[$3 + 8 >> 2]);
 HEAP32[HEAP32[$3 + 12 >> 2] + 12 >> 2] = $0;
 HEAP32[HEAP32[$3 + 12 >> 2] + 8 >> 2] = 0;
 $0 = jsvGetCharactersInVar(HEAP32[HEAP32[$3 + 12 >> 2] + 12 >> 2]);
 HEAP32[HEAP32[$3 + 12 >> 2] + 4 >> 2] = $0;
 label$1: {
  if (jsvIsFlashString(HEAP32[HEAP32[$3 + 12 >> 2] + 12 >> 2]) & 1) {
   HEAP32[HEAP32[$3 + 12 >> 2] + 4 >> 2] = 0;
   HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = HEAP32[$3 + 4 >> 2];
   jsvStringIteratorLoadFlashString_1(HEAP32[$3 + 12 >> 2]);
   break label$1;
  }
  jsvStringIteratorUpdatePtr(HEAP32[$3 + 12 >> 2]);
  HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = HEAP32[$3 + 4 >> 2];
  jsvStringIteratorCatchUp(HEAP32[$3 + 12 >> 2]);
 }
 __stack_pointer = $3 + 16 | 0;
}

function _jswrap_graphics_floodFill_inside($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 label$1: {
  label$2: {
   label$3: {
    if ((HEAP32[$4 + 20 >> 2] | HEAP32[$4 + 16 >> 2]) < 0) {
     break label$3;
    }
    $0 = HEAP32[$4 + 24 >> 2];
    if (HEAP32[$4 + 20 >> 2] >= (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8)) {
     break label$3;
    }
    $0 = HEAP32[$4 + 24 >> 2];
    if (HEAP32[$4 + 16 >> 2] < (HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8)) {
     break label$2;
    }
   }
   HEAP8[$4 + 31 | 0] = 0;
   break label$1;
  }
  HEAP8[$4 + 31 | 0] = (graphicsGetPixel(HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]) | 0) == HEAP32[$4 + 12 >> 2];
 }
 __stack_pointer = $4 + 32 | 0;
 return HEAP8[$4 + 31 | 0] & 1;
}

function jswrap_banglejs_getHealthStatus($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  label$2: {
   if (!(jsvIsUndefined(HEAP32[$1 + 8 >> 2]) & 1)) {
    if (!(jsvIsStringEqual(HEAP32[$1 + 8 >> 2], 117545) & 1)) {
     break label$2;
    }
   }
   HEAP32[$1 + 12 >> 2] = _jswrap_banglejs_getHealthStatusObject(373744);
   break label$1;
  }
  if (jsvIsStringEqual(HEAP32[$1 + 8 >> 2], 112700) & 1) {
   HEAP32[$1 + 12 >> 2] = _jswrap_banglejs_getHealthStatusObject(373760);
   break label$1;
  }
  if (jsvIsStringEqual(HEAP32[$1 + 8 >> 2], 111839) & 1) {
   HEAP32[$1 + 12 >> 2] = _jswrap_banglejs_getHealthStatusObject(373776);
   break label$1;
  }
  HEAP32[$1 >> 2] = HEAP32[$1 + 8 >> 2];
  jsExceptionHere(1, 116733, $1);
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function sin($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 wasm2js_scratch_store_f64(+$0);
 $2 = wasm2js_scratch_load_i32(1) | 0;
 wasm2js_scratch_load_i32(0) | 0;
 $2 = $2 & 2147483647;
 label$1: {
  if ($2 >>> 0 <= 1072243195) {
   if ($2 >>> 0 < 1045430272) {
    break label$1;
   }
   $0 = __sin($0, 0, 0);
   break label$1;
  }
  if ($2 >>> 0 >= 2146435072) {
   $0 = $0 - $0;
   break label$1;
  }
  label$4: {
   switch (__rem_pio2($0, $1) & 3) {
   case 0:
    $0 = __sin(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3], 1);
    break label$1;

   case 1:
    $0 = __cos(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3]);
    break label$1;

   case 2:
    $0 = -__sin(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3], 1);
    break label$1;

   default:
    break label$4;
   }
  }
  $0 = -__cos(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3]);
 }
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_banglejs_setLCDPowerBacklight($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 if ((HEAP8[$1 + 15 | 0] & 1) != ((HEAP32[93413] & 131072) != 0 | 0)) {
  HEAP32[$1 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[86750], 120138);
  if (HEAP32[$1 + 8 >> 2]) {
   HEAP32[$1 + 4 >> 2] = jsvNewFromBool(HEAP8[$1 + 15 | 0] & 1);
   jsiQueueObjectCallbacks(HEAP32[$1 + 8 >> 2], 113086, $1 + 4 | 0, 1);
   jsvUnLock(HEAP32[$1 + 4 >> 2]);
  }
  jsvUnLock(HEAP32[$1 + 8 >> 2]);
 }
 label$3: {
  if (HEAP8[$1 + 15 | 0] & 1) {
   if (HEAP32[93417] > 0) {
    HEAP16[186838] = 0;
   }
   HEAP32[93413] = HEAP32[93413] | 131072;
   break label$3;
  }
  if (!(HEAP32[93418] <= 0 | HEAP32[93418] > HEAP32[93417])) {
   _jswrap_banglejs_setLocked(1, 113089);
  }
  HEAP32[93413] = HEAP32[93413] & -131073;
 }
 __stack_pointer = $1 + 16 | 0;
}

function jsvAddGetterOrSetter($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP8[$4 + 23 | 0] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = jsvFindChildFromVar(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2], 1);
 if (jsvIsName(HEAP32[$4 + 12 >> 2]) & 1) {
  HEAP32[$4 + 8 >> 2] = jsvGetValueOfName(HEAP32[$4 + 12 >> 2]);
  if (!(jsvIsGetterOrSetter(HEAP32[$4 + 8 >> 2]) & 1)) {
   jsvUnLock(HEAP32[$4 + 8 >> 2]);
   HEAP32[$4 + 8 >> 2] = jsvNewWithFlags(6);
   jsvSetValueOfName(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2]);
  }
  if (jsvIsGetterOrSetter(HEAP32[$4 + 8 >> 2]) & 1) {
   jsvObjectSetChild(HEAP32[$4 + 8 >> 2], HEAP8[$4 + 23 | 0] & 1 ? 113243 : 113239, HEAP32[$4 + 16 >> 2]);
  }
  jsvUnLock(HEAP32[$4 + 8 >> 2]);
 }
 jsvUnLock(HEAP32[$4 + 12 >> 2]);
 __stack_pointer = $4 + 32 | 0;
}

function graphicsFallbackFillRect($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP32[$6 + 8 >> 2] = $5;
 HEAP32[$6 >> 2] = HEAP32[$6 + 20 >> 2];
 while (1) {
  if (HEAP32[$6 >> 2] <= HEAP32[$6 + 12 >> 2]) {
   HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 24 >> 2];
   while (1) {
    if (HEAP32[$6 + 4 >> 2] <= HEAP32[$6 + 16 >> 2]) {
     graphicsSetPixelDevice(HEAP32[$6 + 28 >> 2], HEAP32[$6 + 4 >> 2], HEAP32[$6 >> 2], HEAP32[$6 + 8 >> 2]);
     HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 4 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$6 >> 2] = HEAP32[$6 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $6 + 32 | 0;
}

function jsvGetLongInteger($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 4 >> 2] = $0;
 label$1: {
  if (jsvIsInt(HEAP32[$1 + 4 >> 2]) & 1) {
   $0 = jsvGetInteger(HEAP32[$1 + 4 >> 2]);
   $3 = $0 >> 31;
   HEAP32[$1 + 8 >> 2] = $0;
   HEAP32[$1 + 12 >> 2] = $3;
   break label$1;
  }
  $0 = $1;
  $2 = jsvGetFloat(HEAP32[$1 + 4 >> 2]);
  label$3: {
   if (Math_abs($2) < 0x8000000000000000) {
    $3 = Math_abs($2) >= 1 ? ~~($2 > 0 ? Math_min(Math_floor($2 * 2.3283064365386963e-10), 4294967295) : Math_ceil(($2 - +(~~$2 >>> 0 >>> 0)) * 2.3283064365386963e-10)) >>> 0 : 0;
    $4 = ~~$2 >>> 0;
    break label$3;
   }
   $3 = -2147483648;
  }
  HEAP32[$0 + 8 >> 2] = $4;
  HEAP32[$0 + 12 >> 2] = $3;
 }
 __stack_pointer = $1 + 16 | 0;
 $0 = HEAP32[$1 + 12 >> 2];
 i64toi32_i32$HIGH_BITS = $0;
 $3 = HEAP32[$1 + 8 >> 2];
 return $3;
}

function jswrap_error_toString($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 24 >> 2], 119989);
 if (!HEAP32[$1 + 20 >> 2]) {
  HEAP32[$1 + 20 >> 2] = jsvNewFromString(116189);
 }
 label$2: {
  if (!HEAP32[$1 + 20 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$2;
  }
  HEAP32[$1 + 16 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 24 >> 2], 120346);
  if (HEAP32[$1 + 16 >> 2]) {
   $0 = HEAP32[$1 + 20 >> 2];
   HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 16 >> 2];
   HEAP32[$1 >> 2] = $0;
   HEAP32[$1 + 12 >> 2] = jsvVarPrintf(112273, $1);
   jsvUnLock2(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 20 >> 2]);
   HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 12 >> 2];
  }
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function jswrap_promise_all_resolve($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP32[$3 + 16 >> 2] = jsvGetIntegerAndUnLock(jsvObjectGetChildIfExists(HEAP32[$3 + 28 >> 2], 113136));
 HEAP32[$3 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 28 >> 2], 115486);
 if (HEAP32[$3 + 12 >> 2]) {
  jsvSetArrayItem(HEAP32[$3 + 12 >> 2], jsvGetInteger(HEAP32[$3 + 24 >> 2]), HEAP32[$3 + 20 >> 2]);
  HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] - 1;
  jsvObjectSetChildAndUnLock(HEAP32[$3 + 28 >> 2], 113136, jsvNewFromInteger(HEAP32[$3 + 16 >> 2]));
  if (!HEAP32[$3 + 16 >> 2]) {
   _jswrap_promise_queueresolve(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 12 >> 2]);
  }
  jsvUnLock(HEAP32[$3 + 12 >> 2]);
 }
 __stack_pointer = $3 + 32 | 0;
}

function jsiDumpDeviceInitialisation($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP32[$3 + 16 >> 2] = jsvObjectGetChildIfExists(HEAP32[86750], HEAP32[$3 + 20 >> 2]);
 if (HEAP32[$3 + 16 >> 2]) {
  HEAP32[$3 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 16 >> 2], 115339);
  if (HEAP32[$3 + 12 >> 2]) {
   $0 = HEAP32[$3 + 28 >> 2];
   $1 = HEAP32[$3 + 24 >> 2];
   HEAP32[$3 >> 2] = HEAP32[$3 + 20 >> 2];
   cbprintf($0, $1, 143206, $3);
   if (jsvIsObject(HEAP32[$3 + 12 >> 2]) & 1) {
    jsfGetJSONWithCallback(HEAP32[$3 + 12 >> 2], 0, 32, 0, HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2]);
   }
   FUNCTION_TABLE[HEAP32[$3 + 28 >> 2]](145976, HEAP32[$3 + 24 >> 2]);
  }
  jsvUnLock2(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 16 >> 2]);
 }
 __stack_pointer = $3 + 32 | 0;
}

function jsvSetFirstChild($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP16[$3 + 10 >> 1] = $1;
 $4 = HEAP32[$3 + 12 >> 2];
 $2 = $4;
 $0 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
 $1 = HEAPU8[$2 + 8 | 0] | HEAPU8[$2 + 9 | 0] << 8 | (HEAPU8[$2 + 10 | 0] << 16 | HEAPU8[$2 + 11 | 0] << 24);
 $2 = $0;
 $5 = $2 & 268435455;
 $0 = $1 & -1024;
 $6 = $0;
 $1 = $3;
 $0 = HEAPU16[$1 + 10 >> 1];
 $2 = $0 & 16383;
 $1 = $2 >>> 4 | 0;
 $3 = $1;
 $0 = $5;
 $1 = $2 << 28 | $0;
 $0 = $4;
 HEAP8[$0 + 4 | 0] = $1;
 HEAP8[$0 + 5 | 0] = $1 >>> 8;
 HEAP8[$0 + 6 | 0] = $1 >>> 16;
 HEAP8[$0 + 7 | 0] = $1 >>> 24;
 $1 = $6;
 $2 = $3;
 $2 = $1 | $2;
 HEAP8[$0 + 8 | 0] = $2;
 HEAP8[$0 + 9 | 0] = $2 >>> 8;
 HEAP8[$0 + 10 | 0] = $2 >>> 16;
 HEAP8[$0 + 11 | 0] = $2 >>> 24;
}

function jswrap_string_substring($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 if (jsvIsUndefined(HEAP32[$3 + 20 >> 2]) & 1) {
  $0 = 2147483647;
 } else {
  $0 = jsvGetInteger(HEAP32[$3 + 20 >> 2]);
 }
 HEAP32[$3 + 16 >> 2] = $0;
 if (HEAP32[$3 + 24 >> 2] < 0) {
  HEAP32[$3 + 24 >> 2] = 0;
 }
 if (HEAP32[$3 + 16 >> 2] < 0) {
  HEAP32[$3 + 16 >> 2] = 0;
 }
 if (HEAP32[$3 + 16 >> 2] < HEAP32[$3 + 24 >> 2]) {
  HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 24 >> 2];
  HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 16 >> 2];
  HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 12 >> 2];
 }
 $0 = jsvNewFromStringVar(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 16 >> 2] - HEAP32[$3 + 24 >> 2] | 0);
 __stack_pointer = $3 + 32 | 0;
 return $0 | 0;
}

function jswrap_date_setFullYear($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 80 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 76 >> 2] = $0;
 HEAP32[$4 + 72 >> 2] = $1;
 HEAP32[$4 + 68 >> 2] = $2;
 HEAP32[$4 + 64 >> 2] = $3;
 getTimeFromDateVar($4 + 32 | 0, HEAP32[$4 + 76 >> 2], 0);
 getCalendarDate($4 + 8 | 0, HEAP32[$4 + 32 >> 2]);
 HEAP32[$4 + 20 >> 2] = HEAP32[$4 + 72 >> 2];
 if (jsvIsNumeric(HEAP32[$4 + 68 >> 2]) & 1) {
  HEAP32[$4 + 16 >> 2] = jsvGetInteger(HEAP32[$4 + 68 >> 2]);
 }
 if (jsvIsNumeric(HEAP32[$4 + 64 >> 2]) & 1) {
  HEAP32[$4 + 12 >> 2] = jsvGetInteger(HEAP32[$4 + 64 >> 2]);
 }
 HEAP32[$4 + 32 >> 2] = fromCalendarDate($4 + 8 | 0);
 setCorrectTimeZone($4 + 32 | 0);
 $5 = jswrap_date_setTime(HEAP32[$4 + 76 >> 2], fromTimeInDay($4 + 32 | 0));
 __stack_pointer = $4 + 80 | 0;
 return +$5;
}

function jsvSetPrevSibling($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP16[$3 + 10 >> 1] = $1;
 $4 = HEAP32[$3 + 12 >> 2];
 $2 = $4;
 $0 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
 $1 = HEAPU8[$2 + 8 | 0] | HEAPU8[$2 + 9 | 0] << 8 | (HEAPU8[$2 + 10 | 0] << 16 | HEAPU8[$2 + 11 | 0] << 24);
 $2 = $0;
 $5 = $2 & -268419073;
 $0 = $1;
 $6 = $0;
 $1 = $3;
 $0 = HEAPU16[$1 + 10 >> 1];
 $2 = $0 & 16383;
 $1 = $2 >>> 18 | 0;
 $3 = $1;
 $0 = $5;
 $1 = $2 << 14 | $0;
 $0 = $4;
 HEAP8[$0 + 4 | 0] = $1;
 HEAP8[$0 + 5 | 0] = $1 >>> 8;
 HEAP8[$0 + 6 | 0] = $1 >>> 16;
 HEAP8[$0 + 7 | 0] = $1 >>> 24;
 $1 = $6;
 $2 = $3;
 $2 = $1 | $2;
 HEAP8[$0 + 8 | 0] = $2;
 HEAP8[$0 + 9 | 0] = $2 >>> 8;
 HEAP8[$0 + 10 | 0] = $2 >>> 16;
 HEAP8[$0 + 11 | 0] = $2 >>> 24;
}

function jsvArrayAddToEnd($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 16 >> 2];
 if (jsvGetLastChild(HEAP32[$3 + 24 >> 2]) & 65535) {
  HEAP32[$3 + 8 >> 2] = jsvLock(jsvGetLastChild(HEAP32[$3 + 24 >> 2]) & 65535);
  HEAP32[$3 + 12 >> 2] = jsvGetInteger(HEAP32[$3 + 8 >> 2]) + 1;
  jsvUnLock(HEAP32[$3 + 8 >> 2]);
 }
 HEAP32[$3 + 4 >> 2] = jsvMakeIntoVariableName(jsvNewFromInteger(HEAP32[$3 + 12 >> 2]), HEAP32[$3 + 20 >> 2]);
 label$2: {
  if (!HEAP32[$3 + 4 >> 2]) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$2;
  }
  jsvAddName(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 4 >> 2]);
  jsvUnLock(HEAP32[$3 + 4 >> 2]);
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function jsvHasChildren($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
  $0 = 1;
  label$3: {
   if (HEAP8[$1 + 7 | 0] == 7) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 9) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 8) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 5) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 1) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 3) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 1) {
    break label$3;
   }
   $0 = HEAP8[$1 + 7 | 0] == 6;
  }
  HEAP8[$1 + 15 | 0] = $0;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function tflite__GetReciprocal_28int_2c_20int_2c_20int__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP32[$3 + 16 >> 2] = int_20tflite__CountLeadingZeros_unsigned_20int__28unsigned_20int_29(HEAP32[$3 + 28 >> 2]);
 HEAP32[HEAP32[$3 + 20 >> 2] >> 2] = HEAP32[$3 + 24 >> 2] - HEAP32[$3 + 16 >> 2];
 HEAP32[$3 + 12 >> 2] = (HEAP32[$3 + 28 >> 2] << HEAP32[$3 + 16 >> 2]) - -2147483648;
 HEAP32[$3 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromRaw_28int_29(HEAP32[$3 + 12 >> 2]);
 HEAP32[$3 + 8 >> 2] = gemmlowp__FixedPoint_int_2c_200__20gemmlowp__one_over_one_plus_x_for_x_in_0_1_int__28gemmlowp__FixedPoint_int_2c_200__29(HEAP32[$3 >> 2]);
 $0 = gemmlowp__FixedPoint_int_2c_200___raw_28_29($3 + 8 | 0);
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$0 >> 2];
}

function jswrap_i2c_readReg($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 label$1: {
  if (!(jsvIsObject(HEAP32[$4 + 24 >> 2]) & 1)) {
   HEAP32[$4 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP8[$4 + 11 | 0] = jsiGetDeviceFromClass(HEAP32[$4 + 24 >> 2]);
  HEAP8[$4 + 10 | 0] = 0;
  HEAP8[$4 + 9 | 0] = HEAP32[$4 + 16 >> 2];
  _jswrap_i2c_writeTo(HEAP32[$4 + 24 >> 2], HEAPU8[$4 + 11 | 0], HEAP32[$4 + 20 >> 2], HEAP8[$4 + 10 | 0] & 1, 1, $4 + 9 | 0);
  HEAP32[$4 + 28 >> 2] = _jswrap_i2c_readFrom(HEAP32[$4 + 24 >> 2], HEAPU8[$4 + 11 | 0], HEAP32[$4 + 20 >> 2], HEAP8[$4 + 10 | 0] & 1, HEAP32[$4 + 12 >> 2]);
 }
 __stack_pointer = $4 + 32 | 0;
 return HEAP32[$4 + 28 >> 2];
}

function jsvGetCharsOnLine($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 60 >> 2] = $0;
 HEAP32[$2 + 56 >> 2] = $1;
 HEAP32[$2 + 52 >> 2] = 1;
 HEAP32[$2 + 48 >> 2] = 0;
 jsvStringIteratorNew($2 + 8 | 0, HEAP32[$2 + 60 >> 2], 0);
 while (1) {
  label$2: {
   if (!(jsvStringIteratorHasChar_1($2 + 8 | 0) & 1)) {
    break label$2;
   }
   label$3: {
    if ((jsvStringIteratorGetCharAndNext($2 + 8 | 0) & 255) == 10) {
     HEAP32[$2 + 52 >> 2] = HEAP32[$2 + 52 >> 2] + 1;
     if (HEAPU32[$2 + 52 >> 2] > HEAPU32[$2 + 56 >> 2]) {
      break label$2;
     }
     break label$3;
    }
    if (HEAP32[$2 + 52 >> 2] == HEAP32[$2 + 56 >> 2]) {
     HEAP32[$2 + 48 >> 2] = HEAP32[$2 + 48 >> 2] + 1;
    }
   }
   continue;
  }
  break;
 }
 jsvStringIteratorFree_1($2 + 8 | 0);
 __stack_pointer = $2 - -64 | 0;
 return HEAP32[$2 + 48 >> 2];
}

function jsfEraseFileInternal($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP8[$3 + 39 | 0] = $2;
 HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 44 >> 2] - 32;
 HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 44 >> 2] + ((HEAP32[$3 + 40 >> 2] + 4 | 0) - HEAP32[$3 + 40 >> 2] | 0);
 HEAP32[HEAP32[$3 + 40 >> 2] + 4 >> 2] = 0;
 jshFlashWrite(HEAP32[$3 + 40 >> 2] + 4 | 0, HEAP32[$3 + 44 >> 2], 4);
 if (!(!(HEAP8[$3 + 39 | 0] & 1) | HEAPU32[$3 + 44 >> 2] < 134217728 | HEAPU32[$3 + 44 >> 2] >= 142606336)) {
  HEAP32[$3 + 32 >> 2] = 0;
  if (HEAP32[86759]) {
   HEAP32[$3 + 32 >> 2] = HEAP32[86759] + HEAP32[86760];
  }
  jsfGetStorageStats($3, HEAP32[$3 + 32 >> 2], 1);
  if (HEAP32[$3 + 12 >> 2] + HEAP32[$3 + 4 >> 2] >>> 0 > 200) {
   jsfBankCreateFileTable(134217728);
  }
 }
 __stack_pointer = $3 + 48 | 0;
}

function i2c_rd_bit($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 i2c_pin_wr1(HEAPU8[HEAP32[$1 + 12 >> 2] + 1 | 0]);
 dly(HEAP32[$1 + 12 >> 2]);
 i2c_pin_wr1(HEAPU8[HEAP32[$1 + 12 >> 2]]);
 dly(HEAP32[$1 + 12 >> 2]);
 HEAP32[$1 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
 while (1) {
  $0 = 0;
  if (!(jshPinGetValue(HEAPU8[HEAP32[$1 + 12 >> 2]]) & 1)) {
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP32[$1 + 8 >> 2] = $0 - 1;
   $0 = ($0 | 0) != 0;
  }
  if ($0) {
   continue;
  }
  break;
 }
 if (!(HEAP32[$1 + 8 >> 2] | !HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2])) {
  err(142883);
 }
 dly(HEAP32[$1 + 12 >> 2]);
 HEAP8[$1 + 7 | 0] = jshPinGetValue(HEAPU8[HEAP32[$1 + 12 >> 2] + 1 | 0]) & 1;
 i2c_pin_wr0(HEAPU8[HEAP32[$1 + 12 >> 2]]);
 dly(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 7 | 0] & 1;
}

function tflite__SimpleMemoryAllocator__Create_28tflite__ErrorReporter__2c_20unsigned_20char__2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 label$1: {
  if (!HEAP32[$3 + 44 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if (!HEAP32[$3 + 40 >> 2]) {
   break label$2;
  }
 }
 FUNCTION_TABLE[640]($3 + 8 | 0, HEAP32[$3 + 44 >> 2], HEAP32[$3 + 40 >> 2], HEAP32[$3 + 36 >> 2]) | 0;
 HEAP32[$3 + 4 >> 2] = tflite__SimpleMemoryAllocator__AllocateFromTail_28unsigned_20long_2c_20unsigned_20long_29($3 + 8 | 0, 28, 4);
 $0 = HEAP32[$3 + 4 >> 2];
 tflite__SimpleMemoryAllocator__SimpleMemoryAllocator_28tflite__SimpleMemoryAllocator_20const__29($0, $3 + 8 | 0);
 FUNCTION_TABLE[641]($3 + 8 | 0) | 0;
 __stack_pointer = $3 + 48 | 0;
 return $0;
}

function jswrap_graphics_getFonts_callback($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 12 >> 2];
 label$1: {
  if (jsvGetStringLength(HEAP32[$2 + 8 >> 2]) >>> 0 <= 7) {
   break label$1;
  }
  if (!(jsvIsStringEqualOrStartsWith(HEAP32[$2 + 8 >> 2], 112811, 1) & 1)) {
   break label$1;
  }
  if (jsvIsStringEqual(HEAP32[$2 + 8 >> 2], 117006) & 1) {
   break label$1;
  }
  if (jsvIsStringEqual(HEAP32[$2 + 8 >> 2], 117584) & 1) {
   break label$1;
  }
  if (jsvIsStringEqual(HEAP32[$2 + 8 >> 2], 117733) & 1) {
   break label$1;
  }
  HEAP32[$2 >> 2] = jsvNewFromStringVar(HEAP32[$2 + 8 >> 2], 7, 2147483647);
  jsvArrayPush(HEAP32[$2 + 4 >> 2], HEAP32[$2 >> 2]);
  jsvUnLock(HEAP32[$2 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function jsvIteratorGetKey($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  label$2: {
   switch (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] - 1 | 0) {
   case 3:
    HEAP32[$1 + 12 >> 2] = jsvNewFromInteger(HEAP32[HEAP32[$1 + 8 >> 2] + 12 >> 2]);
    break label$1;

   case 1:
    HEAP32[$1 + 12 >> 2] = jsvObjectIteratorGetKey_1(HEAP32[$1 + 8 >> 2] + 4 | 0);
    break label$1;

   case 0:
    HEAP32[$1 + 12 >> 2] = jsvMakeIntoVariableName(jsvNewFromInteger(jsvStringIteratorGetIndex_2(HEAP32[$1 + 8 >> 2] + 4 | 0)), 0);
    break label$1;

   case 2:
    HEAP32[$1 + 12 >> 2] = jsvMakeIntoVariableName(jsvArrayBufferIteratorGetIndex(HEAP32[$1 + 8 >> 2] + 4 | 0), 0);
    break label$1;

   default:
    break label$2;
   }
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jshPushIOCharEventAppend($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 14 | 0] = $0;
 HEAP8[$2 + 13 | 0] = $1;
 HEAP8[$2 + 12 | 0] = HEAPU8[347148] + 255;
 label$1: {
  if (!(HEAPU8[347148] == HEAPU8[347149] | HEAPU8[$2 + 12 | 0] == HEAPU8[347149]) & HEAPU8[$2 + 14 | 0] == (HEAPU8[Math_imul(HEAPU8[$2 + 12 | 0], 5) + 347744 | 0] & 31)) {
   HEAP8[$2 + 11 | 0] = ((HEAPU8[Math_imul(HEAPU8[$2 + 12 | 0], 5) + 347744 | 0] & 96) >>> 5 | 0) + 1;
   if (HEAPU8[$2 + 11 | 0] < 4) {
    HEAP8[HEAPU8[$2 + 11 | 0] + (Math_imul(HEAPU8[$2 + 12 | 0], 5) + 347745 | 0) | 0] = HEAPU8[$2 + 13 | 0];
    HEAP8[Math_imul(HEAPU8[$2 + 12 | 0], 5) + 347744 | 0] = HEAPU8[Math_imul(HEAPU8[$2 + 12 | 0], 5) + 347744 | 0] & 159 | HEAPU8[$2 + 11 | 0] << 5;
    HEAP8[$2 + 15 | 0] = 1;
    break label$1;
   }
  }
  HEAP8[$2 + 15 | 0] = 0;
 }
 return HEAP8[$2 + 15 | 0] & 1;
}

function jsvFindChildFromStringI($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP16[$2 + 18 >> 1] = jsvGetFirstChild(HEAP32[$2 + 24 >> 2]);
 label$1: {
  while (1) {
   if (HEAPU16[$2 + 18 >> 1]) {
    HEAP32[$2 + 12 >> 2] = jsvGetAddressOf(HEAPU16[$2 + 18 >> 1]);
    label$4: {
     if (!(jsvHasCharacterData(HEAP32[$2 + 12 >> 2]) & 1)) {
      break label$4;
     }
     if (!(jsvIsStringEqualOrStartsWithOffset(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 20 >> 2], 0, 0, 1) & 1)) {
      break label$4;
     }
     HEAP32[$2 + 28 >> 2] = jsvLockAgain(HEAP32[$2 + 12 >> 2]);
     break label$1;
    }
    HEAP16[$2 + 18 >> 1] = jsvGetNextSibling(HEAP32[$2 + 12 >> 2]);
    continue;
   }
   break;
  }
  HEAP32[$2 + 28 >> 2] = 0;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jsvGetLength($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (jsvIsArray(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = jsvGetArrayLength(HEAP32[$1 + 8 >> 2]);
   break label$1;
  }
  if (jsvIsArrayBuffer(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = jsvGetArrayBufferLength(HEAP32[$1 + 8 >> 2]);
   break label$1;
  }
  if (jsvIsString(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = jsvGetStringLength(HEAP32[$1 + 8 >> 2]);
   break label$1;
  }
  label$5: {
   if (!(jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1)) {
    if (!(jsvIsFunction(HEAP32[$1 + 8 >> 2]) & 1)) {
     break label$5;
    }
   }
   HEAP32[$1 + 12 >> 2] = jsvGetChildren(HEAP32[$1 + 8 >> 2]);
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 1;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_interactive_setTime($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 + 24 >> 3] = $0;
 jshInterruptOff();
 $2 = jshGetTimeFromMilliseconds(HEAPF64[$1 + 24 >> 3] * 1e3);
 HEAP32[$1 + 16 >> 2] = $2;
 HEAP32[$1 + 20 >> 2] = i64toi32_i32$HIGH_BITS;
 $2 = HEAP32[$1 + 20 >> 2];
 HEAP32[86784] = HEAP32[$1 + 16 >> 2];
 HEAP32[86785] = $2;
 $2 = jshGetSystemTime();
 HEAP32[$1 + 8 >> 2] = $2;
 HEAP32[$1 + 12 >> 2] = i64toi32_i32$HIGH_BITS;
 $2 = HEAP32[$1 + 20 >> 2];
 jshSetSystemTime(HEAP32[$1 + 16 >> 2], $2);
 $2 = HEAP32[$1 + 16 >> 2];
 $4 = $2;
 $2 = HEAP32[$1 + 12 >> 2];
 $5 = HEAP32[$1 + 8 >> 2];
 $3 = $2 + ($5 >>> 0 > $4 >>> 0) | 0;
 $2 = HEAP32[$1 + 20 >> 2];
 $3 = $2 - $3 | 0;
 jstSystemTimeChanged($4 - $5 | 0, $3);
 jshInterruptOn();
 __stack_pointer = $1 + 32 | 0;
}

function jshGetDeviceString($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 11 | 0] = $0;
 label$1: {
  label$2: {
   switch (HEAPU8[$1 + 11 | 0]) {
   case 0:
    HEAP32[$1 + 12 >> 2] = 117780;
    break label$1;

   case 17:
    HEAP32[$1 + 12 >> 2] = 125212;
    break label$1;

   case 18:
    HEAP32[$1 + 12 >> 2] = 125190;
    break label$1;

   case 19:
    HEAP32[$1 + 12 >> 2] = 117086;
    break label$1;

   case 21:
    HEAP32[$1 + 12 >> 2] = 125208;
    break label$1;

   case 20:
    HEAP32[$1 + 12 >> 2] = 118104;
    break label$1;

   case 22:
    HEAP32[$1 + 12 >> 2] = 126587;
    break label$1;

   case 25:
    HEAP32[$1 + 12 >> 2] = 126635;
    break label$1;

   case 26:
    HEAP32[$1 + 12 >> 2] = 126644;
    break label$1;

   default:
    break label$2;
   }
  }
  HEAP32[$1 + 12 >> 2] = 146978;
 }
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_interface_getSerial() {
 var $0 = 0;
 $0 = __stack_pointer + -64 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 8 >> 2] = jshGetSerialNumber($0 + 16 | 0, 32);
 HEAP32[$0 + 4 >> 2] = jsvNewFromEmptyString_10();
 label$1: {
  if (!HEAP32[$0 + 4 >> 2]) {
   HEAP32[$0 + 60 >> 2] = 0;
   break label$1;
  }
  HEAP32[$0 + 12 >> 2] = 0;
  while (1) {
   if (HEAP32[$0 + 12 >> 2] < HEAP32[$0 + 8 >> 2]) {
    if (!(!HEAP32[$0 + 12 >> 2] | HEAP32[$0 + 12 >> 2] & 3)) {
     jsvAppendString(HEAP32[$0 + 4 >> 2], 127980);
    }
    itostr_4(HEAPU8[HEAP32[$0 + 12 >> 2] + ($0 + 16 | 0) | 0] | 256, $0 + 52 | 0, 16);
    jsvAppendString(HEAP32[$0 + 4 >> 2], $0 + 53 | 0);
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$0 + 60 >> 2] = HEAP32[$0 + 4 >> 2];
 }
 __stack_pointer = $0 - -64 | 0;
 return HEAP32[$0 + 60 >> 2];
}

function jswrap_graphics_drawRect($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 112 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 104 >> 2] = $0;
 HEAP32[$5 + 100 >> 2] = $1;
 HEAP32[$5 + 96 >> 2] = $2;
 HEAP32[$5 + 92 >> 2] = $3;
 HEAP32[$5 + 88 >> 2] = $4;
 _jswrap_graphics_getRect(HEAP32[$5 + 100 >> 2], $5 + 84 | 0, $5 + 96 | 0, $5 + 92 | 0, $5 + 88 | 0, $5 + 80 | 0);
 label$1: {
  if (!(graphicsGetFromVar($5 + 8 | 0, HEAP32[$5 + 104 >> 2]) & 1)) {
   HEAP32[$5 + 108 >> 2] = 0;
   break label$1;
  }
  graphicsDrawRect($5 + 8 | 0, HEAP32[$5 + 84 >> 2], HEAP32[$5 + 96 >> 2], HEAP32[$5 + 92 >> 2], HEAP32[$5 + 88 >> 2]);
  graphicsSetVar($5 + 8 | 0);
  HEAP32[$5 + 108 >> 2] = jsvLockAgain(HEAP32[$5 + 104 >> 2]);
 }
 __stack_pointer = $5 + 112 | 0;
 return HEAP32[$5 + 108 >> 2];
}

function jstPinTaskChecker($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  if (HEAPU8[HEAP32[$2 + 24 >> 2] + 24 | 0] != 2) {
   HEAP8[$2 + 31 | 0] = 0;
   break label$1;
  }
  HEAP8[$2 + 19 | 0] = HEAPU8[HEAP32[$2 + 20 >> 2]];
  HEAP32[$2 + 12 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 + 12 >> 2] < 4) {
    if (HEAPU8[HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 24 >> 2] + 8 | 0) | 0] == HEAPU8[$2 + 19 | 0]) {
     HEAP8[$2 + 31 | 0] = 1;
     break label$1;
    }
    if (HEAPU8[HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 24 >> 2] + 8 | 0) | 0] == 255) {
     HEAP8[$2 + 31 | 0] = 0;
     break label$1;
    } else {
     HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
     continue;
    }
   }
   break;
  }
  HEAP8[$2 + 31 | 0] = 0;
 }
 return HEAP8[$2 + 31 | 0] & 1;
}

function jsvAppendStringVar($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 112 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 108 >> 2] = $0;
 HEAP32[$4 + 104 >> 2] = $1;
 HEAP32[$4 + 100 >> 2] = $2;
 HEAP32[$4 + 96 >> 2] = $3;
 jsvStringIteratorNew($4 + 56 | 0, HEAP32[$4 + 108 >> 2], 0);
 jsvStringIteratorGotoEnd($4 + 56 | 0);
 jsvStringIteratorNew($4 + 16 | 0, HEAP32[$4 + 104 >> 2], HEAP32[$4 + 100 >> 2]);
 while (1) {
  $0 = 0;
  if (jsvStringIteratorHasChar_1($4 + 16 | 0) & 1) {
   $0 = HEAP32[$4 + 96 >> 2];
   HEAP32[$4 + 96 >> 2] = $0 - 1;
   $0 = ($0 | 0) != 0;
  }
  if ($0) {
   HEAP8[$4 + 15 | 0] = jsvStringIteratorGetCharAndNext($4 + 16 | 0);
   jsvStringIteratorAppend($4 + 56 | 0, HEAP8[$4 + 15 | 0]);
   continue;
  }
  break;
 }
 jsvStringIteratorFree_1($4 + 16 | 0);
 jsvStringIteratorFree_1($4 + 56 | 0);
 __stack_pointer = $4 + 112 | 0;
}

function jswrap_io_poke($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 80 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 76 >> 2] = $0;
 HEAP32[$3 + 72 >> 2] = $1;
 HEAP32[$3 + 68 >> 2] = $2;
 label$1: {
  if (jsvIsNumeric(HEAP32[$3 + 72 >> 2]) & 1) {
   _jswrap_io_poke(HEAP32[$3 + 76 >> 2], jsvGetInteger(HEAP32[$3 + 72 >> 2]), HEAP32[$3 + 68 >> 2]);
   break label$1;
  }
  if (jsvIsIterable(HEAP32[$3 + 72 >> 2]) & 1) {
   jsvIteratorNew($3 + 8 | 0, HEAP32[$3 + 72 >> 2], 1);
   while (1) {
    if (jsvIteratorHasElement($3 + 8 | 0) & 1) {
     _jswrap_io_poke(HEAP32[$3 + 76 >> 2], jsvIteratorGetIntegerValue($3 + 8 | 0), HEAP32[$3 + 68 >> 2]);
     HEAP32[$3 + 76 >> 2] = HEAP32[$3 + 68 >> 2] + HEAP32[$3 + 76 >> 2];
     jsvIteratorNext($3 + 8 | 0);
     continue;
    }
    break;
   }
   jsvIteratorFree($3 + 8 | 0);
  }
 }
 __stack_pointer = $3 + 80 | 0;
}

function jsvIteratorHasElement($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  label$2: {
   switch (HEAP32[HEAP32[$1 + 8 >> 2] >> 2] - 1 | 0) {
   case 3:
    HEAP8[$1 + 15 | 0] = HEAP32[HEAP32[$1 + 8 >> 2] + 12 >> 2] < (jsvGetArrayLength(HEAP32[HEAP32[$1 + 8 >> 2] + 8 >> 2]) | 0);
    break label$1;

   case 1:
    HEAP8[$1 + 15 | 0] = jsvObjectIteratorHasValue_1(HEAP32[$1 + 8 >> 2] + 4 | 0) & 1;
    break label$1;

   case 0:
    HEAP8[$1 + 15 | 0] = jsvStringIteratorHasChar_2(HEAP32[$1 + 8 >> 2] + 4 | 0) & 1;
    break label$1;

   case 2:
    HEAP8[$1 + 15 | 0] = jsvArrayBufferIteratorHasElement(HEAP32[$1 + 8 >> 2] + 4 | 0) & 1;
    break label$1;

   default:
    break label$2;
   }
  }
  HEAP8[$1 + 15 | 0] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}

function jshSetFlowControlEnabled($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP8[$3 + 15 | 0] = $0;
 HEAP8[$3 + 14 | 0] = $1;
 HEAP8[$3 + 13 | 0] = $2;
 if (!(HEAPU8[$3 + 15 | 0] < 21 | HEAPU8[$3 + 15 | 0] > 22)) {
  HEAP32[$3 + 8 >> 2] = HEAPU8[$3 + 15 | 0] - 21;
  HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 8 >> 2] + 347150;
  label$2: {
   if (HEAP8[$3 + 14 | 0] & 1) {
    $0 = HEAP32[$3 + 4 >> 2];
    HEAP8[$0 | 0] = HEAPU8[$0 | 0] | 8;
    break label$2;
   }
   $0 = HEAP32[$3 + 4 >> 2];
   HEAP8[$0 | 0] = HEAPU8[$0 | 0] & -9;
  }
  HEAP8[HEAP32[$3 + 8 >> 2] + 347152 | 0] = 255;
  if (jshIsPinValid(HEAPU8[$3 + 13 | 0]) & 1) {
   jshPinSetState(HEAPU8[$3 + 13 | 0], 1);
   jshPinSetValue(HEAPU8[$3 + 13 | 0], 0);
   HEAP8[HEAP32[$3 + 8 >> 2] + 347152 | 0] = HEAPU8[$3 + 13 | 0];
  }
 }
 __stack_pointer = $3 + 16 | 0;
}

function tflite__NumElements_28TfLiteIntArray_20const__29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = __stack_pointer - 32 | 0;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP32[$1 + 16 >> 2] = 1;
 HEAP32[$1 + 20 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 0;
 while (1) {
  if (HEAP32[$1 + 12 >> 2] < HEAP32[HEAP32[$1 + 28 >> 2] >> 2]) {
   $2 = HEAP32[(HEAP32[$1 + 28 >> 2] + 4 | 0) + (HEAP32[$1 + 12 >> 2] << 2) >> 2];
   $0 = $2 >> 31;
   $3 = $2;
   $2 = HEAP32[$1 + 20 >> 2];
   $4 = $2;
   $2 = $0;
   $0 = HEAP32[$1 + 16 >> 2];
   $5 = $0;
   $0 = $4;
   $0 = __wasm_i64_mul($3, $2, $5, $0);
   HEAP32[$1 + 16 >> 2] = $0;
   $2 = i64toi32_i32$HIGH_BITS;
   HEAP32[$1 + 20 >> 2] = $2;
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 $0 = HEAP32[$1 + 20 >> 2];
 i64toi32_i32$HIGH_BITS = $0;
 $2 = HEAP32[$1 + 16 >> 2];
 return $2;
}

function jsvFreePtrStringExt($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP16[$1 + 10 >> 1] = jsvGetLastChild(HEAP32[$1 + 12 >> 2]);
 if (HEAPU16[$1 + 10 >> 1]) {
  HEAP32[$1 + 4 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 10 >> 1]);
  while (1) {
   $0 = HEAP32[$1 + 4 >> 2];
   HEAP8[$0 + 12 | 0] = 0;
   HEAP8[$0 + 13 | 0] = 0;
   HEAP16[$1 + 10 >> 1] = jsvGetLastChild(HEAP32[$1 + 4 >> 2]);
   if (HEAPU16[$1 + 10 >> 1]) {
    jsvSetNextSibling(HEAP32[$1 + 4 >> 2], HEAPU16[$1 + 10 >> 1]);
    HEAP32[$1 + 4 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 10 >> 1]);
    continue;
   }
   break;
  }
  jshInterruptOff();
  jsvSetNextSibling(HEAP32[$1 + 4 >> 2], HEAPU16[89490]);
  HEAP16[89490] = jsvGetLastChild(HEAP32[$1 + 12 >> 2]);
  HEAP8[178977] = 1;
  jshInterruptOn();
 }
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_waveform_getBuffer($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2] ? 126275 : 116403);
 label$1: {
  if (!HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$3 + 16 >> 2]) {
   HEAP8[HEAP32[$3 + 16 >> 2]] = 0;
   if (!(!(jsvIsArrayBuffer(HEAP32[$3 + 12 >> 2]) & 1) | (HEAPU8[HEAP32[$3 + 12 >> 2] + 5 | 0] & 15) != 2)) {
    HEAP8[HEAP32[$3 + 16 >> 2]] = 1;
   }
  }
  HEAP32[$3 + 8 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$3 + 12 >> 2], 0);
  jsvUnLock(HEAP32[$3 + 12 >> 2]);
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 8 >> 2];
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function jswrap_espruino_CRC32($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 80 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 76 >> 2] = $0;
 jsvIteratorNew($1 + 16 | 0, HEAP32[$1 + 76 >> 2], 1);
 HEAP32[$1 + 12 >> 2] = -1;
 while (1) {
  if (jsvIteratorHasElement($1 + 16 | 0) & 1) {
   HEAP32[$1 + 12 >> 2] = jsvIteratorGetIntegerValue($1 + 16 | 0) & 255 ^ HEAP32[$1 + 12 >> 2];
   HEAP32[$1 + 8 >> 2] = 0;
   while (1) {
    if (HEAP32[$1 + 8 >> 2] < 8) {
     HEAP32[$1 + 12 >> 2] = 0 - (HEAP32[$1 + 12 >> 2] & 1) & -306674912 ^ HEAP32[$1 + 12 >> 2] >>> 1;
     HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
     continue;
    }
    break;
   }
   jsvIteratorNext($1 + 16 | 0);
   continue;
  }
  break;
 }
 jsvIteratorFree($1 + 16 | 0);
 $0 = jsvNewFromLongInteger(HEAP32[$1 + 12 >> 2] ^ -1, 0);
 __stack_pointer = $1 + 80 | 0;
 return $0 | 0;
}

function jspePostfixExpression() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 label$1: {
  if (!(HEAP16[HEAP32[44743] + 2 >> 1] != 152 & HEAP16[HEAP32[44743] + 2 >> 1] != 153)) {
   HEAP32[$0 + 8 >> 2] = HEAP16[HEAP32[44743] + 2 >> 1];
   jslGetNextToken();
   HEAP32[$0 + 12 >> 2] = jspePostfixExpression();
   if ((HEAP32[86758] & 63) == 1) {
    HEAP32[$0 + 4 >> 2] = jsvNewFromInteger(1);
    HEAP32[$0 >> 2] = jsvMathsOpSkipNames(HEAP32[$0 + 12 >> 2], HEAP32[$0 + 4 >> 2], HEAP32[$0 + 8 >> 2] == 152 ? 43 : 45);
    jsvUnLock(HEAP32[$0 + 4 >> 2]);
    jsvReplaceWith(HEAP32[$0 + 12 >> 2], HEAP32[$0 >> 2]);
    jsvUnLock(HEAP32[$0 >> 2]);
   }
   break label$1;
  }
  HEAP32[$0 + 12 >> 2] = jspeFactorFunctionCall();
 }
 $1 = __jspePostfixExpression(HEAP32[$0 + 12 >> 2]);
 __stack_pointer = $0 + 16 | 0;
 return $1;
}

function graphicsGetFromVar($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 $0 = HEAP32[$2 + 8 >> 2];
 $1 = HEAP32[$2 + 4 >> 2];
 HEAP8[$0 | 0] = $1;
 HEAP8[$0 + 1 | 0] = $1 >>> 8;
 HEAP8[$0 + 2 | 0] = $1 >>> 16;
 HEAP8[$0 + 3 | 0] = $1 >>> 24;
 HEAP32[$2 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 4 >> 2], 111849);
 label$1: {
  if (!HEAP32[$2 >> 2]) {
   __memcpy(HEAP32[$2 + 8 >> 2], 349460, 72);
   HEAP8[$2 + 15 | 0] = 1;
   break label$1;
  }
  if (HEAP32[$2 >> 2]) {
   jsvGetStringChars(HEAP32[$2 >> 2], 0, HEAP32[$2 + 8 >> 2] + 4 | 0, 44);
   jsvUnLock(HEAP32[$2 >> 2]);
   HEAP8[$2 + 15 | 0] = graphicsSetCallbacks(HEAP32[$2 + 8 >> 2]) & 1;
   break label$1;
  }
  HEAP8[$2 + 15 | 0] = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP8[$2 + 15 | 0] & 1;
}

function jsserialEventCallbackKill($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 28 >> 2], 118351);
 if (HEAP32[$2 + 20 >> 2]) {
  HEAP8[$2 + 19 | 0] = jsvGetIntegerAndUnLock(HEAP32[$2 + 20 >> 2]);
  jshPinWatch(HEAPU8[$2 + 19 | 0], 0, 0);
  HEAP32[$2 + 12 >> 2] = jsserialGetSerialList(0);
  if (HEAP32[$2 + 12 >> 2]) {
   HEAP32[$2 + 8 >> 2] = jsvGetArrayIndex(HEAP32[$2 + 12 >> 2], HEAPU8[$2 + 19 | 0]);
   if (HEAP32[$2 + 8 >> 2]) {
    jsvRemoveChild(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
   }
   if (!jsvGetChildren(HEAP32[$2 + 12 >> 2])) {
    jsvObjectRemoveChild(HEAP32[86751], 118113);
   }
   jsvUnLock2(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2]);
  }
 }
 __stack_pointer = $2 + 32 | 0;
}

function tflite__ComputeOutSize_28TfLitePadding_2c_20int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 HEAP32[$5 + 24 >> 2] = $0;
 HEAP32[$5 + 20 >> 2] = $1;
 HEAP32[$5 + 16 >> 2] = $2;
 HEAP32[$5 + 12 >> 2] = $3;
 HEAP32[$5 + 8 >> 2] = $4;
 HEAP32[$5 + 4 >> 2] = Math_imul(HEAP32[$5 + 8 >> 2], HEAP32[$5 + 16 >> 2] - 1 | 0) + 1;
 label$1: {
  label$2: {
   switch (HEAP32[$5 + 24 >> 2] - 1 | 0) {
   case 0:
    HEAP32[$5 + 28 >> 2] = ((HEAP32[$5 + 20 >> 2] + HEAP32[$5 + 12 >> 2] | 0) - 1 | 0) / HEAP32[$5 + 12 >> 2];
    break label$1;

   case 1:
    HEAP32[$5 + 28 >> 2] = ((HEAP32[$5 + 20 >> 2] + HEAP32[$5 + 12 >> 2] | 0) - HEAP32[$5 + 4 >> 2] | 0) / HEAP32[$5 + 12 >> 2];
    break label$1;

   default:
    break label$2;
   }
  }
  HEAP32[$5 + 28 >> 2] = 0;
 }
 return HEAP32[$5 + 28 >> 2];
}

function jshResetDevices() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 jshResetPinStateIsManual();
 HEAP32[$0 + 12 >> 2] = 0;
 while (1) {
  label$2: {
   if (!HEAP32[$0 + 12 >> 2] | HEAPU32[$0 + 12 >> 2] >= 2) {
    break label$2;
   }
   if (HEAP32[$0 + 12 >> 2] == ((jsiGetConsoleDevice() & 255) - 21 | 0)) {
    break label$2;
   }
   HEAP8[HEAP32[$0 + 12 >> 2] + 347150 | 0] = 0;
   HEAP8[HEAP32[$0 + 12 >> 2] + 347152 | 0] = 255;
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[$0 + 12 >> 2] = 1;
 while (1) {
  if (HEAPU32[$0 + 12 >> 2] <= 16) {
   HEAP32[(HEAP32[$0 + 12 >> 2] << 2) + 347164 >> 2] = 0;
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 jshSetPinStateIsManual(17, 1);
 jshPinSetState(17, 6);
 __stack_pointer = $0 + 16 | 0;
}

function tflite__GetOptionalInputTensor_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 $4 = HEAP32[$3 + 16 >> 2] < HEAP32[HEAP32[HEAP32[$3 + 20 >> 2] >> 2] >> 2] ? HEAP32[(HEAP32[HEAP32[$3 + 20 >> 2] >> 2] + 4 | 0) + (HEAP32[$3 + 16 >> 2] << 2) >> 2] != -1 : $4;
 HEAP8[$3 + 15 | 0] = $4;
 label$2: {
  if (HEAP8[$3 + 15 | 0] & 1) {
   HEAP32[$3 + 28 >> 2] = tflite___28anonymous_20namespace_29__GetMutableInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2]);
   break label$2;
  }
  HEAP32[$3 + 28 >> 2] = 0;
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function jswrap_io_analogWrite($0, $1, $2) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP8[$3 + 47 | 0] = $0;
 HEAPF64[$3 + 32 >> 3] = $1;
 HEAP32[$3 + 28 >> 2] = $2;
 HEAPF64[$3 + 16 >> 3] = 0;
 HEAP32[$3 + 12 >> 2] = 0;
 if (jsvIsObject(HEAP32[$3 + 28 >> 2]) & 1) {
  HEAPF64[$3 + 16 >> 3] = jsvObjectGetFloatChild(HEAP32[$3 + 28 >> 2], 116646);
  label$2: {
   if (jsvObjectGetBoolChild(HEAP32[$3 + 28 >> 2], 113126) & 1) {
    HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] | 2;
    break label$2;
   }
   if (jsvObjectGetBoolChild(HEAP32[$3 + 28 >> 2], 113121) & 1) {
    HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] | 1;
   }
  }
 }
 jshPinAnalogOutput(HEAPU8[$3 + 47 | 0], HEAPF64[$3 + 32 >> 3], HEAPF64[$3 + 16 >> 3], HEAP32[$3 + 12 >> 2]);
 __stack_pointer = $3 + 48 | 0;
}

function tflite__Offset_28tflite__RuntimeShape_20const__2c_20int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 label$1: {
  if ((tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$5 + 28 >> 2]) | 0) != 4) {
   break label$1;
  }
 }
 HEAP32[$5 + 8 >> 2] = tflite__RuntimeShape__DimsDataUpTo5D_28_29_20const(HEAP32[$5 + 28 >> 2]);
 __stack_pointer = $5 + 32 | 0;
 return HEAP32[$5 + 12 >> 2] + Math_imul(HEAP32[HEAP32[$5 + 8 >> 2] + 12 >> 2], HEAP32[$5 + 16 >> 2] + Math_imul(HEAP32[HEAP32[$5 + 8 >> 2] + 8 >> 2], HEAP32[$5 + 20 >> 2] + Math_imul(HEAP32[$5 + 24 >> 2], HEAP32[HEAP32[$5 + 8 >> 2] + 4 >> 2]) | 0) | 0) | 0;
}

function jswrap_print($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsiConsoleRemoveInputLine();
 jsvObjectIteratorNew($1 + 8 | 0, HEAP32[$1 + 12 >> 2]);
 while (1) {
  if (jsvObjectIteratorHasValue_7($1 + 8 | 0) & 1) {
   HEAP32[$1 + 4 >> 2] = jsvObjectIteratorGetValue_7($1 + 8 | 0);
   label$3: {
    if (jsvIsString(HEAP32[$1 + 4 >> 2]) & 1) {
     jsiConsolePrintStringVar(HEAP32[$1 + 4 >> 2]);
     break label$3;
    }
    jsfPrintJSON(HEAP32[$1 + 4 >> 2], 261);
   }
   jsvUnLock(HEAP32[$1 + 4 >> 2]);
   jsvObjectIteratorNext($1 + 8 | 0);
   if (jsvObjectIteratorHasValue_7($1 + 8 | 0) & 1) {
    jsiConsolePrintString(144421);
   }
   continue;
  }
  break;
 }
 jsvObjectIteratorFree_7($1 + 8 | 0);
 jsiConsolePrintString(146977);
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_object_setPrototypeOf($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 label$1: {
  label$2: {
   if (!(jsvIsFunction(HEAP32[$2 + 12 >> 2]) & 1)) {
    if (!(jsvIsObject(HEAP32[$2 + 12 >> 2]) & 1)) {
     break label$2;
    }
   }
   $0 = jsvFindOrAddChildFromString(HEAP32[$2 + 12 >> 2], 123007);
   break label$1;
  }
  $0 = 0;
 }
 HEAP32[$2 + 4 >> 2] = $0;
 label$4: {
  if (!(jsvIsName(HEAP32[$2 + 4 >> 2]) & 1)) {
   HEAP32[$2 >> 2] = HEAP32[$2 + 4 >> 2];
   jsExceptionHere(3, 114599, $2);
   break label$4;
  }
  jsvSetValueOfName(HEAP32[$2 + 4 >> 2], HEAP32[$2 + 8 >> 2]);
 }
 jsvUnLock(HEAP32[$2 + 4 >> 2]);
 $0 = jsvLockAgainSafe(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function tflite__MicroMutableOpResolver_9u___FindOp_28tflite__BuiltinOperator_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 $0 = HEAP32[$2 + 24 >> 2];
 label$1: {
  if (HEAP32[$2 + 20 >> 2] == 32) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 16 >> 2] = 0;
  while (1) {
   if (HEAPU32[$2 + 16 >> 2] < HEAPU32[$0 + 292 >> 2]) {
    HEAP32[$2 + 12 >> 2] = ($0 + 4 | 0) + (HEAP32[$2 + 16 >> 2] << 5);
    if (HEAP32[HEAP32[$2 + 12 >> 2] + 20 >> 2] == HEAP32[$2 + 20 >> 2]) {
     HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
     break label$1;
    } else {
     HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 16 >> 2] + 1;
     continue;
    }
   }
   break;
  }
  HEAP32[$2 + 28 >> 2] = 0;
 }
 return HEAP32[$2 + 28 >> 2];
}

function tflite__GreedyMemoryPlanner__AddBuffer_28tflite__ErrorReporter__2c_20int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 24 >> 2] = $0;
 HEAP32[$6 + 20 >> 2] = $1;
 HEAP32[$6 + 16 >> 2] = $2;
 HEAP32[$6 + 12 >> 2] = $3;
 HEAP32[$6 + 8 >> 2] = $4;
 HEAP32[$6 + 4 >> 2] = $5;
 $0 = HEAP32[$6 + 24 >> 2];
 HEAP32[$6 >> 2] = HEAP32[$0 + 12 >> 2] + (HEAP32[$0 + 8 >> 2] << 4);
 label$1: {
  if (FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], HEAP32[$6 + 12 >> 2], HEAP32[$6 + 8 >> 2]) | 0) {
   HEAP32[$6 + 28 >> 2] = 1;
   break label$1;
  }
  HEAP32[HEAP32[$6 >> 2] + 4 >> 2] = HEAP32[$6 + 4 >> 2];
  HEAP32[$6 + 28 >> 2] = 0;
 }
 __stack_pointer = $6 + 32 | 0;
 return HEAP32[$6 + 28 >> 2];
}

function jsvArrayBufferIteratorGetValueData($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 label$1: {
  if (!HEAPU8[HEAP32[$2 + 12 >> 2] + 36 | 0]) {
   break label$1;
  }
  HEAP32[$2 >> 2] = HEAPU8[HEAP32[$2 + 12 >> 2] + 36 | 0] & 15;
  HEAP32[$2 + 4 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 + 4 >> 2] < HEAP32[$2 >> 2]) {
    $0 = jsvStringIteratorGetChar_2(HEAP32[$2 + 12 >> 2]);
    HEAP8[HEAP32[$2 + 8 >> 2] + HEAP32[$2 + 4 >> 2] | 0] = $0;
    if (HEAP32[$2 >> 2] != 1) {
     jsvStringIteratorNext(HEAP32[$2 + 12 >> 2]);
    }
    HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
    continue;
   }
   break;
  }
  if (HEAP32[$2 >> 2] == 1) {
   break label$1;
  }
  HEAP8[HEAP32[$2 + 12 >> 2] + 52 | 0] = 1;
 }
 __stack_pointer = $2 + 16 | 0;
}

function jswrap_date_toUTCString($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $1 = __stack_pointer - 96 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 92 >> 2] = $0;
 getTimeFromDateVar($1 - -64 | 0, HEAP32[$1 + 92 >> 2], 1);
 getCalendarDate($1 + 40 | 0, HEAP32[$1 + 64 >> 2]);
 $0 = HEAP32[44648];
 $2 = HEAP32[$1 + 56 >> 2] << 2;
 $3 = HEAP32[$1 + 44 >> 2];
 $4 = HEAP32[44647];
 $5 = HEAP32[$1 + 48 >> 2] << 2;
 $6 = HEAP32[$1 + 52 >> 2];
 $7 = HEAP32[$1 + 80 >> 2];
 $8 = HEAP32[$1 + 76 >> 2];
 HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 72 >> 2];
 HEAP32[$1 + 20 >> 2] = $8;
 HEAP32[$1 + 16 >> 2] = $7;
 HEAP32[$1 + 12 >> 2] = $6;
 HEAP32[$1 + 8 >> 2] = $4 + $5;
 HEAP32[$1 + 4 >> 2] = $3;
 HEAP32[$1 >> 2] = $0 + $2;
 $0 = jsvVarPrintf(123785, $1);
 __stack_pointer = $1 + 96 | 0;
 return $0 | 0;
}

function tflite__FlatSizeSkipDim_28tflite__RuntimeShape_20const__2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = tflite__RuntimeShape__DimensionsCount_28_29_20const(HEAP32[$2 + 28 >> 2]);
 HEAP32[$2 + 16 >> 2] = tflite__RuntimeShape__DimsData_28_29_20const(HEAP32[$2 + 28 >> 2]);
 HEAP32[$2 + 12 >> 2] = 1;
 HEAP32[$2 + 8 >> 2] = 0;
 while (1) {
  if (HEAP32[$2 + 8 >> 2] < HEAP32[$2 + 20 >> 2]) {
   HEAP32[$2 + 12 >> 2] = Math_imul(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2] == HEAP32[$2 + 24 >> 2] ? 1 : HEAP32[HEAP32[$2 + 16 >> 2] + (HEAP32[$2 + 8 >> 2] << 2) >> 2]);
   HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function push_outgoing_bits($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP8[$2 + 7 | 0] = 0;
 HEAP8[$2 + 6 | 0] = 0;
 label$1: {
  if (HEAPU8[HEAP32[$2 + 12 >> 2] + 10 | 0] > 8) {
   HEAP8[$2 + 7 | 0] = 8;
   HEAP8[$2 + 6 | 0] = HEAPU16[HEAP32[$2 + 12 >> 2] + 8 >> 1] >> HEAPU8[HEAP32[$2 + 12 >> 2] + 10 | 0] - 8;
   break label$1;
  }
  HEAP8[$2 + 7 | 0] = HEAPU8[HEAP32[$2 + 12 >> 2] + 10 | 0];
  HEAP8[$2 + 6 | 0] = HEAPU16[HEAP32[$2 + 12 >> 2] + 8 >> 1];
 }
 if (HEAPU8[$2 + 7 | 0]) {
  push_bits(HEAP32[$2 + 12 >> 2], HEAPU8[$2 + 7 | 0], HEAPU8[$2 + 6 | 0], HEAP32[$2 + 8 >> 2]);
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP8[$0 + 10 | 0] = HEAPU8[$0 + 10 | 0] - HEAPU8[$2 + 7 | 0];
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAPU8[$2 + 7 | 0];
}

function jsvGetMemoryUsage() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 1;
 while (1) {
  if (HEAPU32[$0 + 8 >> 2] <= 12e3) {
   HEAP32[$0 + 4 >> 2] = jsvGetAddressOf(HEAP32[$0 + 8 >> 2] & 65535);
   $1 = HEAP32[$0 + 4 >> 2];
   if ((HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) & 63) {
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
    if (jsvIsFlatString(HEAP32[$0 + 4 >> 2]) & 1) {
     HEAP32[$0 >> 2] = jsvGetFlatStringBlocks(HEAP32[$0 + 4 >> 2]);
     HEAP32[$0 + 8 >> 2] = HEAP32[$0 >> 2] + HEAP32[$0 + 8 >> 2];
     HEAP32[$0 + 12 >> 2] = HEAP32[$0 >> 2] + HEAP32[$0 + 12 >> 2];
    }
   }
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function jslNewTokenisedStringFromLexer($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 192 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 188 >> 2] = $0;
 HEAP32[$2 + 184 >> 2] = $1;
 HEAP32[$2 + 180 >> 2] = HEAP32[44743];
 HEAP32[44743] = $2 + 56;
 jslInit(HEAP32[HEAP32[$2 + 180 >> 2] + 84 >> 2]);
 HEAP32[$2 + 52 >> 2] = _jslNewTokenisedStringFromLexer(0, 0, HEAP32[$2 + 188 >> 2], HEAP32[$2 + 184 >> 2]);
 HEAP32[$2 + 48 >> 2] = jsvNewStringOfLength(HEAP32[$2 + 52 >> 2], 0);
 if (HEAP32[$2 + 48 >> 2]) {
  jsvStringIteratorNew($2 + 8 | 0, HEAP32[$2 + 48 >> 2], 0);
  _jslNewTokenisedStringFromLexer($2 + 8 | 0, HEAP32[$2 + 48 >> 2], HEAP32[$2 + 188 >> 2], HEAP32[$2 + 184 >> 2]);
  jsvStringIteratorFree($2 + 8 | 0);
 }
 jslKill();
 HEAP32[44743] = HEAP32[$2 + 180 >> 2];
 __stack_pointer = $2 + 192 | 0;
 return HEAP32[$2 + 48 >> 2];
}

function jsvSetLastChild($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $4 = __stack_pointer - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP16[$4 + 10 >> 1] = $1;
 $5 = HEAP32[$4 + 12 >> 2];
 $2 = $5;
 $0 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
 $1 = HEAPU8[$2 + 8 | 0] | HEAPU8[$2 + 9 | 0] << 8 | (HEAPU8[$2 + 10 | 0] << 16 | HEAPU8[$2 + 11 | 0] << 24);
 $2 = $0;
 $3 = $2;
 $0 = $1 & 262143;
 $6 = $0;
 $1 = $4;
 $0 = HEAPU16[$1 + 10 >> 1];
 $2 = $0 & 16383;
 $1 = $2 << 18;
 $2 = $1;
 $0 = $5;
 HEAP8[$0 + 4 | 0] = $3;
 HEAP8[$0 + 5 | 0] = $3 >>> 8;
 HEAP8[$0 + 6 | 0] = $3 >>> 16;
 HEAP8[$0 + 7 | 0] = $3 >>> 24;
 $1 = $6;
 $2 = $1 | $2;
 HEAP8[$0 + 8 | 0] = $2;
 HEAP8[$0 + 9 | 0] = $2 >>> 8;
 HEAP8[$0 + 10 | 0] = $2 >>> 16;
 HEAP8[$0 + 11 | 0] = $2 >>> 24;
}

function jsvNewArrayBufferWithPtr($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[HEAP32[$2 + 20 >> 2] >> 2] = 0;
 HEAP32[$2 + 16 >> 2] = jsvNewFlatStringOfLength(HEAP32[$2 + 24 >> 2]);
 label$1: {
  if (!HEAP32[$2 + 16 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jsvNewArrayBufferFromString(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 24 >> 2]);
  if (!HEAP32[$2 + 12 >> 2]) {
   jsvUnLock(HEAP32[$2 + 16 >> 2]);
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  $0 = jsvGetFlatStringPointer(HEAP32[$2 + 16 >> 2]);
  HEAP32[HEAP32[$2 + 20 >> 2] >> 2] = $0;
  jsvUnLock(HEAP32[$2 + 16 >> 2]);
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function _ZN17compiler_builtins3int4sdiv3Div3div17he78fc483e41d7ec7E($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $4 = $1 >> 31;
 $8 = $4;
 $5 = $1;
 $5 = $4 ^ $5;
 $7 = $1 >> 31;
 $4 = $0 ^ $7;
 $9 = $4 - $7 | 0;
 $0 = $8;
 $6 = $0 + ($4 >>> 0 < $7 >>> 0) | 0;
 $6 = $5 - $6 | 0;
 $10 = $6;
 $6 = $3;
 $4 = $6 >> 31;
 $8 = $4;
 $5 = $6;
 $5 = $4 ^ $5;
 $7 = $6 >> 31;
 $6 = $7;
 $4 = $6 ^ $2;
 $0 = $4 - $6 | 0;
 $6 = $8;
 $4 = $5 - ($6 + ($4 >>> 0 < $7 >>> 0) | 0) | 0;
 $4 = __wasm_i64_udiv($9, $10, $0, $4);
 $6 = $4;
 $4 = $1;
 $4 = $3 ^ $4;
 $0 = $4 >> 31;
 $5 = $4 >> 31;
 $1 = $5;
 $5 = i64toi32_i32$HIGH_BITS;
 $2 = $1 ^ $5;
 $4 = $6;
 $5 = $0 ^ $4;
 $6 = $5 - $0 | 0;
 $4 = $1;
 $0 = $4 + ($0 >>> 0 > $5 >>> 0) | 0;
 $0 = $2 - $0 | 0;
 $5 = $6;
 i64toi32_i32$HIGH_BITS = $0;
 return $5;
}

function jsvGetNativeFunctionPtr($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = jsvFindChildFromString(HEAP32[$1 + 8 >> 2], 120874);
 label$1: {
  if (HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 4 >> 2] = jsvSkipNameAndUnLock(HEAP32[$1 + 4 >> 2]);
   $0 = HEAP32[$1 + 8 >> 2];
   HEAP32[$1 >> 2] = (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) + jsvGetFlatStringPointer(HEAP32[$1 + 4 >> 2]);
   jsvUnLock(HEAP32[$1 + 4 >> 2]);
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP32[$1 + 12 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function fromCalendarDate($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 while (1) {
  if (HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] < 0) {
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] - 1;
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 12;
   continue;
  }
  break;
 }
 while (1) {
  if (HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] > 11) {
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] - 12;
   continue;
  }
  break;
 }
 $0 = getDayNumberFromDate(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2], HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2], HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jsfGetFileHeader($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP8[$3 + 19 | 0] = $2;
 label$1: {
  if (!HEAP32[$3 + 24 >> 2]) {
   HEAP8[$3 + 31 | 0] = 0;
   break label$1;
  }
  jshFlashRead(HEAP32[$3 + 20 >> 2], HEAP32[$3 + 24 >> 2], HEAP8[$3 + 19 | 0] & 1 ? 32 : 8);
  HEAP32[$3 + 12 >> 2] = (HEAP32[$3 + 24 >> 2] + 32 | 0) + jsfGetFileSize(HEAP32[$3 + 20 >> 2]);
  $0 = 0;
  label$3: {
   if (HEAP32[HEAP32[$3 + 20 >> 2] >> 2] == -1) {
    break label$3;
   }
   $0 = 0;
   if (!HEAP32[HEAP32[$3 + 20 >> 2] >> 2]) {
    break label$3;
   }
   $0 = HEAPU32[$3 + 12 >> 2] <= jsfGetBankEndAddress(HEAP32[$3 + 24 >> 2]) >>> 0;
  }
  HEAP8[$3 + 31 | 0] = $0;
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP8[$3 + 31 | 0] & 1;
}

function jshFlashRead($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 label$1: {
  if (HEAPU32[$3 + 24 >> 2] < 134217728) {
   break label$1;
  }
  HEAP32[$3 + 16 >> 2] = 0;
  while (1) {
   if (HEAPU32[$3 + 16 >> 2] >= HEAPU32[$3 + 20 >> 2]) {
    break label$1;
   }
   HEAP32[$3 + 12 >> 2] = 178882;
   $0 = HEAP32[$3 + 12 >> 2];
   HEAP8[$3 + 10 | 0] = 105;
   HEAP8[$3 + 11 | 0] = 0;
   HEAP32[$3 >> 2] = (HEAP32[$3 + 24 >> 2] + HEAP32[$3 + 16 >> 2] | 0) + -134217728;
   $0 = emscripten_asm_const_int($0 | 0, $3 + 10 | 0, $3 | 0) | 0;
   HEAP8[HEAP32[$3 + 28 >> 2] + HEAP32[$3 + 16 >> 2] | 0] = $0;
   HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 16 >> 2] + 1;
   continue;
  }
 }
 __stack_pointer = $3 + 32 | 0;
}

function jsvSetRefs($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $4 = __stack_pointer - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP16[$4 + 10 >> 1] = $1;
 $5 = HEAP32[$4 + 12 >> 2];
 $2 = $5;
 $0 = HEAPU8[$2 + 4 | 0] | HEAPU8[$2 + 5 | 0] << 8 | (HEAPU8[$2 + 6 | 0] << 16 | HEAPU8[$2 + 7 | 0] << 24);
 $1 = HEAPU8[$2 + 8 | 0] | HEAPU8[$2 + 9 | 0] << 8 | (HEAPU8[$2 + 10 | 0] << 16 | HEAPU8[$2 + 11 | 0] << 24);
 $2 = $0;
 $3 = $2;
 $0 = $1 & -261121;
 $6 = $0;
 $1 = $4;
 $0 = HEAPU16[$1 + 10 >> 1];
 $2 = $0 & 255;
 $1 = $2 << 10;
 $2 = $1;
 $0 = $5;
 HEAP8[$0 + 4 | 0] = $3;
 HEAP8[$0 + 5 | 0] = $3 >>> 8;
 HEAP8[$0 + 6 | 0] = $3 >>> 16;
 HEAP8[$0 + 7 | 0] = $3 >>> 24;
 $1 = $6;
 $2 = $1 | $2;
 HEAP8[$0 + 8 | 0] = $2;
 HEAP8[$0 + 9 | 0] = $2 >>> 8;
 HEAP8[$0 + 10 | 0] = $2 >>> 16;
 HEAP8[$0 + 11 | 0] = $2 >>> 24;
}

function jsvIsInstanceOf($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP8[$2 + 19 | 0] = 0;
 label$1: {
  if (!(jsvHasChildren(HEAP32[$2 + 24 >> 2]) & 1)) {
   HEAP8[$2 + 31 | 0] = 0;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 24 >> 2], 123007);
  if (jsvIsObject(HEAP32[$2 + 12 >> 2]) & 1) {
   HEAP32[$2 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 12 >> 2], 116071);
   if (HEAP32[$2 + 8 >> 2]) {
    HEAP8[$2 + 19 | 0] = jspIsConstructor(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 20 >> 2]) & 1;
   }
   jsvUnLock(HEAP32[$2 + 8 >> 2]);
  }
  jsvUnLock(HEAP32[$2 + 12 >> 2]);
  HEAP8[$2 + 31 | 0] = HEAP8[$2 + 19 | 0] & 1;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP8[$2 + 31 | 0] & 1;
}

function jsiQueueEvents($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = jsvNewObject();
 if (HEAP32[$4 + 12 >> 2]) {
  jsvUnLock(jsvAddNamedChild(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 24 >> 2], 122838));
  if (HEAP32[$4 + 16 >> 2]) {
   HEAP32[$4 + 8 >> 2] = jsvNewArray(HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
   if (HEAP32[$4 + 8 >> 2]) {
    jsvAddNamedChildAndUnLock(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], 115433);
   }
  }
  if (HEAP32[$4 + 28 >> 2]) {
   jsvUnLock(jsvAddNamedChild(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 28 >> 2], 115423));
  }
  jsvArrayPushAndUnLock(HEAP32[86765], HEAP32[$4 + 12 >> 2]);
 }
 __stack_pointer = $4 + 32 | 0;
}

function jswrap_storage_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 80 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 76 >> 2] = $0;
 HEAP32[$3 + 72 >> 2] = $1;
 HEAP32[$3 + 68 >> 2] = $2;
 jsfNameFromVar($3 + 40 | 0, HEAP32[$3 + 76 >> 2]);
 $2 = HEAP32[$3 + 72 >> 2];
 $4 = HEAP32[$3 + 68 >> 2];
 HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 64 >> 2];
 $1 = HEAP32[$3 + 60 >> 2];
 $0 = HEAP32[$3 + 56 >> 2];
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 28 >> 2] = $1;
 $0 = HEAP32[$3 + 52 >> 2];
 $1 = HEAP32[$3 + 48 >> 2];
 HEAP32[$3 + 16 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $0;
 $1 = HEAP32[$3 + 44 >> 2];
 $0 = HEAP32[$3 + 40 >> 2];
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP32[$3 + 12 >> 2] = $1;
 $0 = jsfReadFile($3 + 8 | 0, $2, $4);
 __stack_pointer = $3 + 80 | 0;
 return $0 | 0;
}

function jsvNewFromFloat($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 + 16 >> 3] = $0;
 HEAP32[$1 + 12 >> 2] = jsvNewWithFlags(11);
 label$1: {
  if (!HEAP32[$1 + 12 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  $2 = HEAP32[$1 + 12 >> 2];
  wasm2js_scratch_store_f64(+HEAPF64[$1 + 16 >> 3]);
  $3 = wasm2js_scratch_load_i32(1) | 0;
  $4 = wasm2js_scratch_load_i32(0) | 0;
  HEAP8[$2 | 0] = $4;
  HEAP8[$2 + 1 | 0] = $4 >>> 8;
  HEAP8[$2 + 2 | 0] = $4 >>> 16;
  HEAP8[$2 + 3 | 0] = $4 >>> 24;
  HEAP8[$2 + 4 | 0] = $3;
  HEAP8[$2 + 5 | 0] = $3 >>> 8;
  HEAP8[$2 + 6 | 0] = $3 >>> 16;
  HEAP8[$2 + 7 | 0] = $3 >>> 24;
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 12 >> 2];
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function jswrap_atob_decode($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] & 255;
 label$1: {
  if (!(HEAP32[$1 + 8 >> 2] < 65 | HEAP32[$1 + 8 >> 2] > 90)) {
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2] - 65;
   break label$1;
  }
  if (!(HEAP32[$1 + 8 >> 2] < 97 | HEAP32[$1 + 8 >> 2] > 122)) {
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2] - 71;
   break label$1;
  }
  if (!(HEAP32[$1 + 8 >> 2] < 48 | HEAP32[$1 + 8 >> 2] > 57)) {
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2] + 4;
   break label$1;
  }
  if (HEAP32[$1 + 8 >> 2] == 43) {
   HEAP32[$1 + 12 >> 2] = 62;
   break label$1;
  }
  if (HEAP32[$1 + 8 >> 2] == 47) {
   HEAP32[$1 + 12 >> 2] = 63;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = -1;
 }
 return HEAP32[$1 + 12 >> 2];
}

function _jswrap_drawImageLayerSetStart($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 24 >> 2] - HEAP32[HEAP32[$3 + 28 >> 2] >> 2];
 HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 20 >> 2] - HEAP32[HEAP32[$3 + 28 >> 2] + 4 >> 2];
 $0 = HEAP32[$3 + 28 >> 2];
 HEAP32[$0 + 172 >> 2] = HEAP32[$0 + 172 >> 2] + (Math_imul(HEAP32[HEAP32[$3 + 28 >> 2] + 164 >> 2], HEAP32[$3 + 16 >> 2]) + Math_imul(HEAP32[HEAP32[$3 + 28 >> 2] + 168 >> 2], HEAP32[$3 + 12 >> 2]) | 0);
 $0 = HEAP32[$3 + 28 >> 2];
 HEAP32[$0 + 176 >> 2] = HEAP32[$0 + 176 >> 2] + (Math_imul(HEAP32[HEAP32[$3 + 28 >> 2] + 164 >> 2], HEAP32[$3 + 12 >> 2]) - Math_imul(HEAP32[HEAP32[$3 + 28 >> 2] + 168 >> 2], HEAP32[$3 + 16 >> 2]) | 0);
}

function vfGetCharPtr($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 HEAP8[$2 + 27 | 0] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP8[$2 + 19 | 0] = HEAPU8[$2 + 27 | 0];
 label$1: {
  if (!(HEAPU8[$2 + 19 | 0] <= 255 & HEAPU8[$2 + 19 | 0] >= 33)) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP8[$2 + 19 | 0] = HEAPU8[$2 + 19 | 0] - 33;
  HEAP32[$2 + 12 >> 2] = 162032;
  HEAP8[$2 + 11 | 0] = 0;
  while (1) {
   if (HEAPU8[$2 + 11 | 0] < HEAPU8[$2 + 19 | 0]) {
    HEAP32[$2 + 12 >> 2] = HEAPU8[HEAPU8[$2 + 11 | 0] + 162384 | 0] + HEAP32[$2 + 12 >> 2];
    HEAP8[$2 + 11 | 0] = HEAPU8[$2 + 11 | 0] + 1;
    continue;
   }
   break;
  }
  HEAP32[HEAP32[$2 + 20 >> 2] >> 2] = HEAPU8[HEAPU8[$2 + 19 | 0] + 162384 | 0];
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 return HEAP32[$2 + 28 >> 2];
}

function jspGetBuiltinPrototype($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (jsvIsArray(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 4 >> 2] = jspFindPrototypeFor(111833);
   if (HEAP32[$1 + 4 >> 2]) {
    HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
    break label$1;
   }
  }
  label$4: {
   if (!(jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1)) {
    if (!(jsvIsArray(HEAP32[$1 + 8 >> 2]) & 1)) {
     break label$4;
    }
   }
   HEAP32[$1 >> 2] = jspFindPrototypeFor(113254);
   if (HEAP32[$1 >> 2] == HEAP32[$1 + 8 >> 2]) {
    jsvUnLock(HEAP32[$1 >> 2]);
    HEAP32[$1 >> 2] = 0;
   }
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvHasStringExt($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
  label$3: {
   if (!(HEAP8[$1 + 7 | 0] <= 40 & HEAP8[$1 + 7 | 0] >= 18)) {
    $0 = 0;
    if (HEAP8[$1 + 7 | 0] < 41) {
     break label$3;
    }
    $0 = 0;
    if (HEAP8[$1 + 7 | 0] > 51) {
     break label$3;
    }
   }
   $0 = 1;
   label$6: {
    if (HEAP8[$1 + 7 | 0] == 38) {
     break label$6;
    }
    $0 = 1;
    if (HEAP8[$1 + 7 | 0] == 39) {
     break label$6;
    }
    $0 = HEAP8[$1 + 7 | 0] == 40;
   }
   $0 = $0 ^ -1;
  }
  HEAP8[$1 + 15 | 0] = $0 & 1;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function tflite__MicroAllocator__GetSubGraphFromModel_28tflite__Model_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 $0 = HEAP32[$2 + 8 >> 2];
 HEAP32[$2 >> 2] = tflite__Model__subgraphs_28_29_20const(HEAP32[$2 + 4 >> 2]);
 label$1: {
  if ((flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph____size_28_29_20const(HEAP32[$2 >> 2]) | 0) != 1) {
   tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$0 + 8 >> 2], 146413, 0);
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph____operator_5b_5d_28unsigned_20int_29_20const(HEAP32[$2 >> 2], 0);
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function terminalScroll() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 80 | 0;
 __stack_pointer = $0;
 HEAP8[178600] = HEAPU8[178600] - 1;
 if (terminalGetGFX($0 + 8 | 0) & 1) {
  HEAP32[$0 + 4 >> 2] = HEAPU8[$0 + 29 | 0] | HEAPU8[$0 + 30 | 0] << 8 | (HEAPU8[$0 + 31 | 0] << 16 | HEAPU8[$0 + 32 | 0] << 24);
  $1 = HEAPU8[349446] | HEAPU8[349447] << 8;
  HEAP8[$0 + 29 | 0] = $1;
  HEAP8[$0 + 30 | 0] = $1 >>> 8;
  HEAP8[$0 + 31 | 0] = $1 >>> 16;
  HEAP8[$0 + 32 | 0] = $1 >>> 24;
  graphicsScroll($0 + 8 | 0, 0, -8);
  $1 = HEAP32[$0 + 4 >> 2];
  HEAP8[$0 + 29 | 0] = $1;
  HEAP8[$0 + 30 | 0] = $1 >>> 8;
  HEAP8[$0 + 31 | 0] = $1 >>> 16;
  HEAP8[$0 + 32 | 0] = $1 >>> 24;
  terminalSetGFX($0 + 8 | 0);
  if (!(jshIsInInterrupt() & 1)) {
   jswrap_terminal_idle();
  }
 }
 __stack_pointer = $0 + 80 | 0;
}

function jswrap_string_fromCharCode($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = jsvNewFromEmptyString_8();
 label$1: {
  if (!HEAP32[$1 + 20 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  jsvObjectIteratorNew($1 + 16 | 0, HEAP32[$1 + 24 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_10($1 + 16 | 0) & 1) {
    HEAP8[$1 + 15 | 0] = jsvGetIntegerAndUnLock(jsvObjectIteratorGetValue_10($1 + 16 | 0));
    jsvAppendStringBuf(HEAP32[$1 + 20 >> 2], $1 + 15 | 0, 1);
    jsvObjectIteratorNext($1 + 16 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_10($1 + 16 | 0);
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function jswrap_banglejs_getAccel() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = jsvNewObject();
 if (HEAP32[$0 + 12 >> 2]) {
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 111928, jsvNewFromFloat(+HEAP16[186864] * .0001220703125));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 111841, jsvNewFromFloat(+HEAP16[186865] * .0001220703125));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 111568, jsvNewFromFloat(+HEAP16[186866] * .0001220703125));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 119059, jsvNewFromFloat(Math_sqrt(+HEAP32[93434]) * .0001220703125));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 12 >> 2], 119104, jsvNewFromFloat(+HEAPU32[93435] * .0001220703125));
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function tflite___28anonymous_20namespace_29__AllocationInfoBuilder__Allocate_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 + 4 >> 2] = Math_imul(tflite___28anonymous_20namespace_29__AllocationInfoBuilder__Size_28_29_20const($0), 24);
 $2 = HEAP32[$0 + 4 >> 2];
 HEAP32[$0 + 16 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 12 >> 2]]($2, HEAP32[$1 + 4 >> 2], 4);
 label$1: {
  if (!HEAP32[$0 + 16 >> 2]) {
   $0 = HEAP32[$0 >> 2];
   HEAP32[$1 >> 2] = HEAP32[$1 + 4 >> 2];
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, 121457, $1);
   HEAP32[$1 + 12 >> 2] = 1;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_array_join($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (!(jsvIsIterable(HEAP32[$2 + 8 >> 2]) & 1)) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  label$3: {
   if (jsvIsUndefined(HEAP32[$2 + 4 >> 2]) & 1) {
    HEAP32[$2 + 4 >> 2] = jsvNewFromString(128061);
    break label$3;
   }
   HEAP32[$2 + 4 >> 2] = jsvAsString(HEAP32[$2 + 4 >> 2]);
  }
  if (!HEAP32[$2 + 4 >> 2]) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 >> 2] = jsvArrayJoin(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2], 1);
  jsvUnLock(HEAP32[$2 + 4 >> 2]);
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function OneWireRead($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jshPinSetState(HEAPU8[$2 + 15 | 0], 3);
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 >> 2] = 1;
 while (1) {
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP32[$2 + 8 >> 2] = $0 - 1;
  if (($0 | 0) > 0) {
   jshInterruptOff();
   jshPinSetValue(HEAPU8[$2 + 15 | 0], 0);
   jshDelayMicroseconds(3);
   jshPinSetValue(HEAPU8[$2 + 15 | 0], 1);
   jshDelayMicroseconds(10);
   if (jshPinGetValue(HEAPU8[$2 + 15 | 0]) & 1) {
    HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | HEAP32[$2 >> 2];
   }
   jshInterruptOn();
   jshDelayMicroseconds(53);
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] << 1;
   continue;
  }
  break;
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 4 >> 2];
}

function jsvGetMaxCharactersInVar($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (jsvIsStringExt(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 10;
   break label$1;
  }
  if (jsvIsName(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 4;
   break label$1;
  }
  label$4: {
   label$5: {
    if (jsvIsFlatString(HEAP32[$1 + 8 >> 2]) & 1) {
     break label$5;
    }
    if (jsvIsFlashString(HEAP32[$1 + 8 >> 2]) & 1) {
     break label$5;
    }
    if (!(jsvIsNativeString(HEAP32[$1 + 8 >> 2]) & 1)) {
     break label$4;
    }
   }
   HEAP32[$1 + 12 >> 2] = jsvGetCharactersInVar(HEAP32[$1 + 8 >> 2]);
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 9;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__OperatorCode___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__OperatorCode___20const___28unsigned_20short_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP16[$2 + 8 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$2 + 10 >> 1]);
 HEAP32[$2 + 4 >> 2] = HEAPU16[$2 + 8 >> 1] + $0;
 label$1: {
  if (HEAPU16[$2 + 8 >> 1]) {
   $0 = HEAP32[$2 + 4 >> 2] + unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 4 >> 2]) | 0;
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jsvGetStringIndexOf($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 56 >> 2] = $0;
 HEAP8[$2 + 55 | 0] = $1;
 jsvStringIteratorNew($2 + 16 | 0, HEAP32[$2 + 56 >> 2], 0);
 label$1: {
  while (1) {
   if (jsvStringIteratorHasChar_1($2 + 16 | 0) & 1) {
    if ((jsvStringIteratorGetChar_1($2 + 16 | 0) & 255) == HEAPU8[$2 + 55 | 0]) {
     HEAP32[$2 + 12 >> 2] = jsvStringIteratorGetIndex_1($2 + 16 | 0);
     jsvStringIteratorFree_1($2 + 16 | 0);
     HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 12 >> 2];
     break label$1;
    } else {
     jsvStringIteratorNext($2 + 16 | 0);
     continue;
    }
   }
   break;
  }
  jsvStringIteratorFree_1($2 + 16 | 0);
  HEAP32[$2 + 60 >> 2] = -1;
 }
 __stack_pointer = $2 - -64 | 0;
 return HEAP32[$2 + 60 >> 2];
}

function jsspiSend4bit($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP8[$4 + 15 | 0] = $0;
 HEAP8[$4 + 14 | 0] = $1;
 HEAP32[$4 + 8 >> 2] = $2;
 HEAP32[$4 + 4 >> 2] = $3;
 HEAP8[$4 | 0] = HEAP32[$4 + 8 >> 2] | HEAP32[$4 + 8 >> 2] << 4;
 HEAP8[$4 + 1 | 0] = HEAP32[$4 + 4 >> 2] | HEAP32[$4 + 8 >> 2] << 4;
 HEAP8[$4 + 2 | 0] = HEAP32[$4 + 8 >> 2] | HEAP32[$4 + 4 >> 2] << 4;
 HEAP8[$4 + 3 | 0] = HEAP32[$4 + 4 >> 2] | HEAP32[$4 + 4 >> 2] << 4;
 jshSPISend16(HEAPU8[$4 + 15 | 0], HEAPU8[(HEAPU8[$4 + 14 | 0] >>> 4 & 3) + $4 | 0] | HEAPU8[(HEAPU8[$4 + 14 | 0] >>> 6 | 0) + $4 | 0] << 8);
 jshSPISend16(HEAPU8[$4 + 15 | 0], HEAPU8[(HEAPU8[$4 + 14 | 0] & 3) + $4 | 0] | HEAPU8[(HEAPU8[$4 + 14 | 0] >>> 2 & 3) + $4 | 0] << 8);
 __stack_pointer = $4 + 16 | 0;
}

function jswrap_banglejs_lcdWr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 $2 = $3;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 >> 2] = jsvGetDataPointer(HEAP32[$2 + 8 >> 2], $2 + 4 | 0);
 if (!(HEAP32[$2 >> 2] | !HEAP32[$2 + 8 >> 2])) {
  HEAP32[$2 + 4 >> 2] = jsvIterateCallbackCount(HEAP32[$2 + 8 >> 2]);
  label$2: {
   if (HEAP32[$2 + 4 >> 2] + 256 >>> 0 > jsuGetFreeStack() >>> 0) {
    jsExceptionHere(1, 122957, 0);
    break label$2;
   }
   $3 = $3 - (HEAP32[$2 + 4 >> 2] + 15 & -16) | 0;
   __stack_pointer = $3;
   HEAP32[$2 >> 2] = $3;
   jsvIterateCallbackToBytes(HEAP32[$2 + 8 >> 2], HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2]);
  }
 }
 __stack_pointer = $2 + 16 | 0;
}

function jsiDumpJSON($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = jsvGetIndexOf(HEAP32[86750], HEAP32[$4 + 20 >> 2], 1);
 label$1: {
  label$2: {
   if (!HEAP32[$4 + 12 >> 2]) {
    break label$2;
   }
   if (!(jsvIsString(HEAP32[$4 + 12 >> 2]) & 1) | HEAP32[$4 + 12 >> 2] == HEAP32[$4 + 16 >> 2]) {
    break label$2;
   }
   $0 = HEAP32[$4 + 28 >> 2];
   $1 = HEAP32[$4 + 24 >> 2];
   HEAP32[$4 >> 2] = HEAP32[$4 + 12 >> 2];
   cbprintf($0, $1, 112309, $4);
   break label$1;
  }
  jsfGetJSONWithCallback(HEAP32[$4 + 20 >> 2], 0, 37, 0, HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2]);
 }
 __stack_pointer = $4 + 32 | 0;
}

function tflite__PreprocessSoftmaxScaling_28double_2c_20double_2c_20int_2c_20int__2c_20int__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer + -64 | 0;
 __stack_pointer = $5;
 HEAPF64[$5 + 56 >> 3] = $0;
 HEAPF64[$5 + 48 >> 3] = $1;
 HEAP32[$5 + 44 >> 2] = $2;
 HEAP32[$5 + 40 >> 2] = $3;
 HEAP32[$5 + 36 >> 2] = $4;
 HEAPF64[$5 + 16 >> 3] = HEAPF64[$5 + 56 >> 3] * HEAPF64[$5 + 48 >> 3] * +(1 << 31 - HEAP32[$5 + 44 >> 2]);
 HEAPF64[$5 + 8 >> 3] = 2147483647;
 HEAPF64[$5 + 24 >> 3] = HEAPF64[double_20const__20std____2__min_double__28double_20const__2c_20double_20const__29($5 + 16 | 0, $5 + 8 | 0) >> 3];
 tflite__QuantizeMultiplierGreaterThanOne_28double_2c_20int__2c_20int__29(HEAPF64[$5 + 24 >> 3], HEAP32[$5 + 40 >> 2], HEAP32[$5 + 36 >> 2]);
 __stack_pointer = $5 - -64 | 0;
}

function jswrap_banglejs_setLCDTimeout($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 + 24 >> 3] = $0;
 __DOUBLE_BITS_2(HEAPF64[$1 + 24 >> 3]);
 $2 = i64toi32_i32$HIGH_BITS & 2147483647;
 label$1: {
  if (($2 | 0) == 2146435072 | $2 >>> 0 > 2146435072) {
   HEAPF64[$1 + 24 >> 3] = 0;
   break label$1;
  }
  if (HEAPF64[$1 + 24 >> 3] < 0) {
   HEAPF64[$1 + 24 >> 3] = 0;
  }
 }
 $0 = HEAPF64[$1 + 24 >> 3] * 1e3;
 label$4: {
  if (Math_abs($0) < 2147483648) {
   $2 = ~~$0;
   break label$4;
  }
  $2 = -2147483648;
 }
 HEAP32[93417] = $2;
 $0 = HEAPF64[$1 + 24 >> 3] * 1e3;
 label$6: {
  if (Math_abs($0) < 2147483648) {
   $2 = ~~$0;
   break label$6;
  }
  $2 = -2147483648;
 }
 HEAP32[93418] = $2;
 __stack_pointer = $1 + 32 | 0;
}

function jsvSetNextSibling($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = $2;
 $3 = HEAPU16[$0 + 10 >> 1];
 $0 = $3;
 $4 = $0 & 16383;
 $2 = HEAP32[$2 + 12 >> 2];
 $1 = $2;
 $3 = HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24);
 $0 = HEAPU8[$1 + 8 | 0] | HEAPU8[$1 + 9 | 0] << 8 | (HEAPU8[$1 + 10 | 0] << 16 | HEAPU8[$1 + 11 | 0] << 24);
 $1 = $3;
 $3 = $0;
 $0 = $4;
 $1 = $1 & -16384 | $0;
 $0 = $2;
 HEAP8[$0 + 4 | 0] = $1;
 HEAP8[$0 + 5 | 0] = $1 >>> 8;
 HEAP8[$0 + 6 | 0] = $1 >>> 16;
 HEAP8[$0 + 7 | 0] = $1 >>> 24;
 $1 = $3;
 HEAP8[$0 + 8 | 0] = $1;
 HEAP8[$0 + 9 | 0] = $1 >>> 8;
 HEAP8[$0 + 10 | 0] = $1 >>> 16;
 HEAP8[$0 + 11 | 0] = $1 >>> 24;
}

function jspeSkipBlock() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = 1;
 HEAP32[$0 + 8 >> 2] = HEAP32[86758];
 HEAP32[86758] = HEAP32[86758] & -64;
 while (1) {
  $1 = 0;
  label$3: {
   $1 = HEAP16[HEAP32[44743] + 2 >> 1] ? HEAP32[$0 + 12 >> 2] != 0 : $1;
   if (!$1) {
    break label$3;
   }
   label$4: {
    if (HEAP16[HEAP32[44743] + 2 >> 1] == 123) {
     HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
     break label$4;
    }
    if (HEAP16[HEAP32[44743] + 2 >> 1] == 125) {
     HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] - 1;
     if (!HEAP32[$0 + 12 >> 2]) {
      break label$3;
     }
    }
   }
   jslGetNextToken();
   continue;
  }
  break;
 }
 HEAP32[86758] = HEAP32[$0 + 8 >> 2];
 __stack_pointer = $0 + 16 | 0;
}

function jslCheckToken($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP16[$2 + 6 >> 1] = $1;
 HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] - 1;
 HEAP32[$2 >> 2] = 1;
 label$1: {
  while (1) {
   if (HEAP32[$2 >> 2] < HEAPU8[HEAP32[44743] + 80 | 0]) {
    if (HEAP8[HEAP32[$2 >> 2] + (HEAP32[44743] + 12 | 0) | 0] != HEAP8[HEAP32[$2 + 8 >> 2] + HEAP32[$2 >> 2] | 0]) {
     HEAP8[$2 + 15 | 0] = 0;
     break label$1;
    } else {
     HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
     continue;
    }
   }
   break;
  }
  if (!HEAP8[HEAP32[$2 + 8 >> 2] + HEAPU8[HEAP32[44743] + 80 | 0] | 0]) {
   HEAP16[HEAP32[44743] + 2 >> 1] = HEAPU16[$2 + 6 >> 1];
   HEAP8[$2 + 15 | 0] = 1;
   break label$1;
  }
  HEAP8[$2 + 15 | 0] = 0;
 }
 return HEAP8[$2 + 15 | 0] & 1;
}

function graphicsGetVectorChar($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0;
 $7 = __stack_pointer - 48 | 0;
 __stack_pointer = $7;
 HEAP32[$7 + 40 >> 2] = $0;
 HEAP32[$7 + 36 >> 2] = $1;
 HEAP32[$7 + 32 >> 2] = $2;
 HEAP32[$7 + 28 >> 2] = $3;
 HEAP32[$7 + 24 >> 2] = $4;
 HEAP32[$7 + 20 >> 2] = $5;
 HEAP8[$7 + 19 | 0] = $6;
 HEAP32[$7 + 8 >> 2] = vfGetCharPtr(HEAP8[$7 + 19 | 0], $7 + 12 | 0);
 label$1: {
  if (!HEAP32[$7 + 8 >> 2]) {
   HEAP32[$7 + 44 >> 2] = HEAP32[$7 + 24 >> 2] / 2;
   break label$1;
  }
  HEAP32[$7 + 44 >> 2] = vfGetCharFromPtr(HEAP32[$7 + 40 >> 2], HEAP32[$7 + 36 >> 2], HEAP32[$7 + 32 >> 2], HEAP32[$7 + 28 >> 2], HEAP32[$7 + 24 >> 2], HEAP32[$7 + 20 >> 2], HEAP32[$7 + 8 >> 2], HEAP32[$7 + 12 >> 2]);
 }
 __stack_pointer = $7 + 48 | 0;
 return HEAP32[$7 + 44 >> 2];
}

function jsfGetSpaceLeftInPage($0) {
 var $1 = 0;
 $1 = __stack_pointer + -64 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 56 >> 2] = $0;
 label$1: {
  if (!(jshFlashGetPage(HEAP32[$1 + 56 >> 2], $1 + 52 | 0, $1 + 48 | 0) & 1)) {
   HEAP32[$1 + 60 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 44 >> 2] = jsfGetBankEndAddress(HEAP32[$1 + 56 >> 2]);
  HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 52 >> 2] + HEAP32[$1 + 48 >> 2];
  label$3: {
   if (HEAPU32[$1 + 40 >> 2] >= HEAPU32[$1 + 44 >> 2]) {
    break label$3;
   }
   if (jsfGetFileHeader(HEAP32[$1 + 40 >> 2], $1 + 8 | 0, 0) & 1) {
    break label$3;
   }
   HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 44 >> 2];
  }
  HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 40 >> 2] - HEAP32[$1 + 56 >> 2];
 }
 __stack_pointer = $1 - -64 | 0;
 return HEAP32[$1 + 60 >> 2];
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph___20const___28unsigned_20short_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP16[$2 + 8 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$2 + 10 >> 1]);
 HEAP32[$2 + 4 >> 2] = HEAPU16[$2 + 8 >> 1] + $0;
 label$1: {
  if (HEAPU16[$2 + 8 >> 1]) {
   $0 = HEAP32[$2 + 4 >> 2] + unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 4 >> 2]) | 0;
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Operator___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__Operator___20const___28unsigned_20short_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP16[$2 + 8 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$2 + 10 >> 1]);
 HEAP32[$2 + 4 >> 2] = HEAPU16[$2 + 8 >> 1] + $0;
 label$1: {
  if (HEAPU16[$2 + 8 >> 1]) {
   $0 = HEAP32[$2 + 4 >> 2] + unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 4 >> 2]) | 0;
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Metadata___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__Metadata___20const___28unsigned_20short_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP16[$2 + 8 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$2 + 10 >> 1]);
 HEAP32[$2 + 4 >> 2] = HEAPU16[$2 + 8 >> 1] + $0;
 label$1: {
  if (HEAPU16[$2 + 8 >> 1]) {
   $0 = HEAP32[$2 + 4 >> 2] + unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 4 >> 2]) | 0;
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jspGetException() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 8 >> 2] = jsvFindChildFromString(HEAP32[86751], 112710);
 label$1: {
  if (HEAP32[$0 + 8 >> 2]) {
   HEAP32[$0 + 4 >> 2] = jsvSkipName(HEAP32[$0 + 8 >> 2]);
   jsvRemoveChildAndUnLock(HEAP32[86751], HEAP32[$0 + 8 >> 2]);
   HEAP32[$0 >> 2] = jspGetStackTrace();
   label$3: {
    if (!HEAP32[$0 >> 2]) {
     break label$3;
    }
    if (!(jsvHasChildren(HEAP32[$0 + 4 >> 2]) & 1)) {
     break label$3;
    }
    jsvObjectSetChild(HEAP32[$0 + 4 >> 2], 118167, HEAP32[$0 >> 2]);
   }
   jsvUnLock(HEAP32[$0 >> 2]);
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 4 >> 2];
   break label$1;
  }
  HEAP32[$0 + 12 >> 2] = 0;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor___20const___28unsigned_20short_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP16[$2 + 8 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$2 + 10 >> 1]);
 HEAP32[$2 + 4 >> 2] = HEAPU16[$2 + 8 >> 1] + $0;
 label$1: {
  if (HEAPU16[$2 + 8 >> 1]) {
   $0 = HEAP32[$2 + 4 >> 2] + unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 4 >> 2]) | 0;
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer___20const___28unsigned_20short_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP16[$2 + 8 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$2 + 10 >> 1]);
 HEAP32[$2 + 4 >> 2] = HEAPU16[$2 + 8 >> 1] + $0;
 label$1: {
  if (HEAPU16[$2 + 8 >> 1]) {
   $0 = HEAP32[$2 + 4 >> 2] + unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 4 >> 2]) | 0;
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function lcdFillRect_ArrayBuffer_flat($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP32[$6 + 8 >> 2] = $5;
 HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 20 >> 2];
 while (1) {
  if (HEAP32[$6 + 4 >> 2] <= HEAP32[$6 + 12 >> 2]) {
   lcdSetPixels_ArrayBuffer_flat(HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 4 >> 2], (HEAP32[$6 + 16 >> 2] + 1 | 0) - HEAP32[$6 + 24 >> 2] | 0, HEAP32[$6 + 8 >> 2]);
   HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 4 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $6 + 32 | 0;
}

function jslGetTokenString($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 label$1: {
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 128) {
   $0 = HEAP32[$2 + 28 >> 2];
   $1 = HEAP32[$2 + 24 >> 2];
   HEAP32[$2 >> 2] = jslGetTokenValueAsString();
   espruino_snprintf($0, $1, 115772, $2);
   break label$1;
  }
  label$3: {
   if (HEAP16[HEAP32[44743] + 2 >> 1] == 131) {
    $0 = HEAP32[$2 + 28 >> 2];
    $1 = HEAP32[$2 + 24 >> 2];
    HEAP32[$2 + 16 >> 2] = jslGetTokenValueAsString();
    espruino_snprintf($0, $1, 143294, $2 + 16 | 0);
    break label$3;
   }
   jslTokenAsString(HEAP16[HEAP32[44743] + 2 >> 1], HEAP32[$2 + 28 >> 2], HEAP32[$2 + 24 >> 2]);
  }
 }
 __stack_pointer = $2 + 32 | 0;
}

function tflite__MicroMutableOpResolver_9u___GetOpDataParser_28tflite__BuiltinOperator_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 $0 = HEAP32[$2 + 8 >> 2];
 label$1: {
  if (HEAPU32[$0 + 368 >> 2] > 9) {
   break label$1;
  }
 }
 HEAP32[$2 >> 2] = 0;
 label$2: {
  while (1) {
   if (HEAPU32[$2 >> 2] < HEAPU32[$0 + 368 >> 2]) {
    if (HEAP32[($0 + 296 | 0) + (HEAP32[$2 >> 2] << 2) >> 2] == HEAP32[$2 + 4 >> 2]) {
     HEAP32[$2 + 12 >> 2] = HEAP32[($0 + 332 | 0) + (HEAP32[$2 >> 2] << 2) >> 2];
     break label$2;
    } else {
     HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
     continue;
    }
   }
   break;
  }
  HEAP32[$2 + 12 >> 2] = 0;
 }
 return HEAP32[$2 + 12 >> 2];
}

function st_backref_index_lsb($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP8[$1 + 7 | 0] = 8;
 $2 = HEAP32[$1 + 8 >> 2];
 if (HEAPU8[$1 + 7 | 0] < 8) {
  $0 = HEAPU8[$1 + 7 | 0];
 } else {
  $0 = 8;
 }
 HEAP16[$1 + 4 >> 1] = get_bits($2, $0);
 label$3: {
  if (HEAPU16[$1 + 4 >> 1] == 65535) {
   HEAP32[$1 + 12 >> 2] = 3;
   break label$3;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP16[$0 + 6 >> 1] = HEAPU16[$1 + 4 >> 1] | HEAPU16[$0 + 6 >> 1];
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP16[$0 + 6 >> 1] = HEAPU16[$0 + 6 >> 1] + 1;
  HEAP8[$1 + 3 | 0] = 6;
  HEAP16[HEAP32[$1 + 8 >> 2] + 4 >> 1] = 0;
  HEAP32[$1 + 12 >> 2] = HEAPU8[$1 + 3 | 0] > 8 ? 4 : 5;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jshGetDeviceObjectFor($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP16[$3 + 42 >> 1] = $0;
 HEAP16[$3 + 40 >> 1] = $1;
 HEAP8[$3 + 39 | 0] = $2;
 HEAP16[$3 + 36 >> 1] = jshGetDeviceFor(HEAPU16[$3 + 42 >> 1], HEAPU16[$3 + 40 >> 1], HEAPU8[$3 + 39 | 0]);
 label$1: {
  if (!HEAPU16[$3 + 36 >> 1]) {
   HEAP32[$3 + 44 >> 2] = 0;
   break label$1;
  }
  jshPinFunctionToString(HEAPU16[$3 + 36 >> 1], 19, $3 + 16 | 0, 16);
  HEAP32[$3 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[86750], $3 + 16 | 0);
  if (HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 44 >> 2] = HEAP32[$3 + 12 >> 2];
   break label$1;
  }
  HEAP32[$3 + 44 >> 2] = jswFindBuiltInFunction(0, $3 + 16 | 0);
 }
 __stack_pointer = $3 + 48 | 0;
 return HEAP32[$3 + 44 >> 2];
}

function specialcase($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0;
 if (!(0 | $3 & -2147483648)) {
  wasm2js_scratch_store_i32(0, $1 | 0);
  $1 = $2;
  wasm2js_scratch_store_i32(1, $1 - 1058013184 | 0);
  $5 = +wasm2js_scratch_load_f64();
  return ($5 * $0 + $5) * 5486124068793689e288;
 }
 $3 = __stack_pointer - 16 | 0;
 wasm2js_scratch_store_i32(0, $1 | 0);
 wasm2js_scratch_store_i32(1, $2 + 1071644672 | 0);
 $5 = +wasm2js_scratch_load_f64();
 $6 = $5 * $0;
 $0 = $6 + $5;
 if ($0 < 1) {
  $1 = $3;
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP32[$1 + 12 >> 2] = 1048576;
  HEAPF64[$1 + 8 >> 3] = HEAPF64[$1 + 8 >> 3] * 22250738585072014e-324;
  $7 = $0 + 1;
  $0 = $7 + ($6 + ($5 - $0) + ($0 + (1 - $7))) + -1;
  $0 = $0 == 0 ? 0 : $0;
 }
 return $0 * 22250738585072014e-324;
}

function lcdFillRect_ArrayBuffer($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0;
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP32[$6 + 8 >> 2] = $5;
 HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 20 >> 2];
 while (1) {
  if (HEAP32[$6 + 4 >> 2] <= HEAP32[$6 + 12 >> 2]) {
   lcdSetPixels_ArrayBuffer(HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 4 >> 2], (HEAP32[$6 + 16 >> 2] + 1 | 0) - HEAP32[$6 + 24 >> 2] | 0, HEAP32[$6 + 8 >> 2]);
   HEAP32[$6 + 4 >> 2] = HEAP32[$6 + 4 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $6 + 32 | 0;
}

function tflite___28anonymous_20namespace_29__GetMutableInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = $1;
 HEAP32[$3 >> 2] = $2;
 label$1: {
  if (HEAP32[HEAP32[$3 + 8 >> 2] + 8 >> 2]) {
   HEAP32[$3 + 12 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] + 8 >> 2] + Math_imul(HEAP32[(HEAP32[HEAP32[$3 + 4 >> 2] >> 2] + 4 | 0) + (HEAP32[$3 >> 2] << 2) >> 2], 40);
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$3 + 8 >> 2] + 80 >> 2]](HEAP32[$3 + 8 >> 2], HEAP32[(HEAP32[HEAP32[$3 + 4 >> 2] >> 2] + 4 | 0) + (HEAP32[$3 >> 2] << 2) >> 2]);
 }
 __stack_pointer = $3 + 16 | 0;
 return HEAP32[$3 + 12 >> 2];
}

function jsvNewArrayBufferFromString($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP32[$2 >> 2] = jsvNewWithFlags(4);
 label$1: {
  if (!HEAP32[$2 >> 2]) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  jsvSetFirstChild(HEAP32[$2 >> 2], jsvGetRef(jsvRef(HEAP32[$2 + 8 >> 2])) & 65535);
  HEAP8[HEAP32[$2 >> 2] + 5 | 0] = 129;
  if (!HEAP32[$2 + 4 >> 2]) {
   HEAP32[$2 + 4 >> 2] = jsvGetStringLength(HEAP32[$2 + 8 >> 2]);
  }
  $0 = HEAP32[$2 >> 2];
  $1 = HEAP32[$2 + 4 >> 2];
  HEAP8[$0 + 2 | 0] = $1;
  HEAP8[$0 + 3 | 0] = $1 >>> 8;
  HEAP8[$0 + 4 | 0] = $1 >>> 16;
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jstBufferTaskChecker($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (!(HEAPU8[HEAP32[$2 + 8 >> 2] + 24 | 0] == 4 | HEAPU8[HEAP32[$2 + 8 >> 2] + 24 | 0] == 5 | (HEAPU8[HEAP32[$2 + 8 >> 2] + 24 | 0] == 6 | HEAPU8[HEAP32[$2 + 8 >> 2] + 24 | 0] == 7))) {
   HEAP8[$2 + 15 | 0] = 0;
   break label$1;
  }
  HEAP16[$2 + 2 >> 1] = HEAPU16[HEAP32[$2 + 4 >> 2] >> 1];
  $0 = 1;
  $1 = HEAP32[$2 + 8 >> 2];
  if (HEAPU16[$2 + 2 >> 1] != (HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8)) {
   $0 = HEAP32[$2 + 8 >> 2];
   $0 = HEAPU16[$2 + 2 >> 1] == (HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8);
  }
  HEAP8[$2 + 15 | 0] = $0;
 }
 return HEAP8[$2 + 15 | 0] & 1;
}

function jshPushEvent($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jshInterruptOff();
 HEAP8[$1 + 11 | 0] = HEAPU8[347148] + 1;
 label$1: {
  if (HEAPU8[347149] == HEAPU8[$1 + 11 | 0]) {
   jshInterruptOn();
   jshIOEventOverflowed();
   break label$1;
  }
  $0 = Math_imul(HEAPU8[347148], 5) + 347744 | 0;
  $2 = HEAP32[$1 + 12 >> 2];
  $3 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
  HEAP8[$0 | 0] = $3;
  HEAP8[$0 + 1 | 0] = $3 >>> 8;
  HEAP8[$0 + 2 | 0] = $3 >>> 16;
  HEAP8[$0 + 3 | 0] = $3 >>> 24;
  HEAP8[$0 + 4 | 0] = HEAPU8[$2 + 4 | 0];
  HEAP8[347148] = HEAPU8[$1 + 11 | 0];
  jshInterruptOn();
 }
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_pipe_idle() {
 var $0 = 0;
 $0 = __stack_pointer - 32 | 0;
 __stack_pointer = $0;
 HEAP8[$0 + 31 | 0] = 0;
 HEAP32[$0 + 24 >> 2] = pipeGetArray(0);
 if (HEAP32[$0 + 24 >> 2]) {
  jsvObjectIteratorNew($0 + 16 | 0, HEAP32[$0 + 24 >> 2]);
  while (1) {
   if (jsvObjectIteratorHasValue_16($0 + 16 | 0) & 1) {
    HEAP32[$0 + 12 >> 2] = jsvObjectIteratorGetValue_14($0 + 16 | 0);
    HEAP8[$0 + 31 | 0] = handlePipe(HEAP32[$0 + 24 >> 2], $0 + 16 | 0, HEAP32[$0 + 12 >> 2]) & 1 | HEAP8[$0 + 31 | 0] & 1;
    jsvUnLock(HEAP32[$0 + 12 >> 2]);
    jsvObjectIteratorNext($0 + 16 | 0);
    continue;
   }
   break;
  }
  jsvObjectIteratorFree_16($0 + 16 | 0);
  jsvUnLock(HEAP32[$0 + 24 >> 2]);
 }
 __stack_pointer = $0 + 32 | 0;
 return HEAP8[$0 + 31 | 0] & 1;
}

function jsvArrayBufferIteratorGetIntegerValue($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAPU8[HEAP32[$1 + 8 >> 2] + 36 | 0]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  jsvArrayBufferIteratorGetValueData(HEAP32[$1 + 8 >> 2], $1);
  if (HEAPU8[HEAP32[$1 + 8 >> 2] + 36 | 0] & 32) {
   $2 = jsvArrayBufferIteratorDataToFloat(HEAP32[$1 + 8 >> 2], $1);
   label$4: {
    if (Math_abs($2) < 2147483648) {
     $0 = ~~$2;
     break label$4;
    }
    $0 = -2147483648;
   }
   HEAP32[$1 + 12 >> 2] = $0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvArrayBufferIteratorDataToInt(HEAP32[$1 + 8 >> 2], $1);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function tflite__MicroAllocator__GetScratchBuffer_28int_29_20const($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 $0 = HEAP32[$2 + 24 >> 2];
 label$1: {
  if (HEAPU32[$2 + 20 >> 2] >= HEAPU32[$0 + 20 >> 2]) {
   $1 = HEAP32[$0 + 8 >> 2];
   $3 = HEAP32[$2 + 20 >> 2];
   HEAP32[$2 + 4 >> 2] = HEAP32[$0 + 20 >> 2];
   HEAP32[$2 >> 2] = $3;
   tflite__ErrorReporter__Report_28char_20const__2c_20____29($1, 127320, $2);
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 28 >> 2] = HEAP32[HEAP32[$0 + 16 >> 2] + Math_imul((HEAP32[$0 + 20 >> 2] - HEAP32[$2 + 20 >> 2] | 0) - 1 | 0, 12) >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jshGetSerialNumber($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 32 | 0;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = -559030611;
 HEAP32[$2 + 12 >> 2] = -559030611;
 $1 = HEAP32[$2 + 28 >> 2];
 $0 = HEAP32[$2 + 20 >> 2];
 HEAP8[$1 | 0] = $0;
 HEAP8[$1 + 1 | 0] = $0 >>> 8;
 HEAP8[$1 + 2 | 0] = $0 >>> 16;
 HEAP8[$1 + 3 | 0] = $0 >>> 24;
 $1 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = $3;
 $3 = HEAP32[$2 + 28 >> 2];
 HEAP8[$3 + 4 | 0] = $0;
 HEAP8[$3 + 5 | 0] = $0 >>> 8;
 HEAP8[$3 + 6 | 0] = $0 >>> 16;
 HEAP8[$3 + 7 | 0] = $0 >>> 24;
 HEAP8[$3 + 8 | 0] = $1;
 HEAP8[$3 + 9 | 0] = $1 >>> 8;
 HEAP8[$3 + 10 | 0] = $1 >>> 16;
 HEAP8[$3 + 11 | 0] = $1 >>> 24;
 return 12;
}

function _jswrap_serial_print($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP8[$4 + 23 | 0] = $2;
 HEAP8[$4 + 22 | 0] = $3;
 label$1: {
  if (!(jsserialGetSendFunction(HEAP32[$4 + 28 >> 2], $4 + 16 | 0, $4) & 1)) {
   break label$1;
  }
  if (HEAP8[$4 + 23 | 0] & 1) {
   HEAP32[$4 + 24 >> 2] = jsvAsString(HEAP32[$4 + 24 >> 2]);
  }
  jsvIterateCallback(HEAP32[$4 + 24 >> 2], HEAP32[$4 + 16 >> 2], $4);
  if (HEAP8[$4 + 23 | 0] & 1) {
   jsvUnLock(HEAP32[$4 + 24 >> 2]);
  }
  if (!(HEAP8[$4 + 22 | 0] & 1)) {
   break label$1;
  }
  FUNCTION_TABLE[HEAP32[$4 + 16 >> 2]](13, $4);
  FUNCTION_TABLE[HEAP32[$4 + 16 >> 2]](10, $4);
 }
 __stack_pointer = $4 + 32 | 0;
}

function jsvObjectAppendAll($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 jsvObjectIteratorNew($2 + 16 | 0, HEAP32[$2 + 24 >> 2]);
 while (1) {
  if (jsvObjectIteratorHasValue($2 + 16 | 0) & 1) {
   HEAP32[$2 + 12 >> 2] = jsvObjectIteratorGetKey($2 + 16 | 0);
   HEAP32[$2 + 8 >> 2] = jsvSkipName(HEAP32[$2 + 12 >> 2]);
   if (!(jsvIsInternalObjectKey(HEAP32[$2 + 12 >> 2]) & 1)) {
    jsvObjectSetChildVar(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
   }
   jsvUnLock2(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
   jsvObjectIteratorNext($2 + 16 | 0);
   continue;
  }
  break;
 }
 jsvObjectIteratorFree($2 + 16 | 0);
 __stack_pointer = $2 + 32 | 0;
}

function jsvCreateNewChild($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = jsvAsName(HEAP32[$3 + 20 >> 2]);
 label$1: {
  if (!HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$3 + 16 >> 2]) {
   jsvSetValueOfName(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 16 >> 2]);
  }
  HEAP16[$3 + 10 >> 1] = jsvGetRef(jsvRef(jsvRef(HEAP32[$3 + 24 >> 2])));
  jsvSetNextSibling(HEAP32[$3 + 12 >> 2], HEAPU16[$3 + 10 >> 1]);
  jsvSetPrevSibling(HEAP32[$3 + 12 >> 2], HEAPU16[$3 + 10 >> 1]);
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2];
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function jspEvaluate($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP8[$2 + 23 | 0] = $1;
 label$1: {
  if (HEAP8[$2 + 23 | 0] & 1) {
   HEAP32[$2 + 16 >> 2] = jsvNewNativeString(HEAP32[$2 + 24 >> 2], strlen(HEAP32[$2 + 24 >> 2]));
   break label$1;
  }
  HEAP32[$2 + 16 >> 2] = jsvNewFromString(HEAP32[$2 + 24 >> 2]);
 }
 label$3: {
  if (!HEAP32[$2 + 16 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$3;
  }
  HEAP32[$2 + 12 >> 2] = 0;
  if (!(jsvIsMemoryFull() & 1)) {
   HEAP32[$2 + 12 >> 2] = jspEvaluateVar(HEAP32[$2 + 16 >> 2], 0, 0);
  }
  jsvUnLock(HEAP32[$2 + 16 >> 2]);
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jslNeedSpaceBetween($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 label$1: {
  if (HEAPU8[$2 + 15 | 0] < 163) {
   $0 = 0;
   if (HEAPU8[$2 + 14 | 0] < 163) {
    break label$1;
   }
  }
  label$3: {
   if (HEAPU8[$2 + 15 | 0] >= 163) {
    break label$3;
   }
   if (isAlpha(HEAP8[$2 + 15 | 0]) & 1) {
    break label$3;
   }
   $0 = 0;
   if (!(isNumeric(HEAP8[$2 + 15 | 0]) & 1)) {
    break label$1;
   }
  }
  $0 = 1;
  label$4: {
   if (HEAPU8[$2 + 14 | 0] >= 163) {
    break label$4;
   }
   $0 = 1;
   if (isAlpha(HEAP8[$2 + 14 | 0]) & 1) {
    break label$4;
   }
   $0 = isNumeric(HEAP8[$2 + 14 | 0]);
  }
 }
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function jswrap_modules_removeCached($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (!(jsvIsString(HEAP32[$1 + 12 >> 2]) & 1)) {
   jsExceptionHere(1, 118836, 0);
   break label$1;
  }
  HEAP32[$1 + 8 >> 2] = jswrap_modules_getModuleList();
  if (!HEAP32[$1 + 8 >> 2]) {
   break label$1;
  }
  HEAP32[$1 + 4 >> 2] = jsvFindChildFromVar(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2], 0);
  label$3: {
   if (!HEAP32[$1 + 4 >> 2]) {
    HEAP32[$1 >> 2] = HEAP32[$1 + 12 >> 2];
    jsExceptionHere(1, 120879, $1);
    break label$3;
   }
   jsvRemoveChildAndUnLock(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 4 >> 2]);
  }
  jsvUnLock(HEAP32[$1 + 8 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_date_toISOString($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $1 = __stack_pointer - 96 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 92 >> 2] = $0;
 getTimeFromDateVar($1 - -64 | 0, HEAP32[$1 + 92 >> 2], 1);
 getCalendarDate($1 + 40 | 0, HEAP32[$1 + 64 >> 2]);
 $0 = HEAP32[$1 + 52 >> 2];
 $2 = HEAP32[$1 + 48 >> 2];
 $3 = HEAP32[$1 + 44 >> 2];
 $4 = HEAP32[$1 + 80 >> 2];
 $5 = HEAP32[$1 + 76 >> 2];
 $6 = HEAP32[$1 + 72 >> 2];
 HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 68 >> 2];
 HEAP32[$1 + 20 >> 2] = $6;
 HEAP32[$1 + 16 >> 2] = $5;
 HEAP32[$1 + 12 >> 2] = $4;
 HEAP32[$1 + 8 >> 2] = $3;
 HEAP32[$1 + 4 >> 2] = $2 + 1;
 HEAP32[$1 >> 2] = $0;
 $0 = jsvVarPrintf(123408, $1);
 __stack_pointer = $1 + 96 | 0;
 return $0 | 0;
}

function jsvCountJsVarsUsed($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (!(!HEAP32[86750] | HEAP32[$1 + 12 >> 2] == HEAP32[86750])) {
  $0 = HEAP32[86750];
  $2 = HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8 | 512;
  HEAP8[$0 + 12 | 0] = $2;
  HEAP8[$0 + 13 | 0] = $2 >>> 8;
 }
 HEAP32[$1 + 8 >> 2] = _jsvCountJsVarsUsedRecursive(HEAP32[$1 + 12 >> 2], 0);
 _jsvCountJsVarsUsedRecursive(HEAP32[$1 + 12 >> 2], 1);
 if (!(!HEAP32[86750] | HEAP32[$1 + 12 >> 2] == HEAP32[86750])) {
  $0 = HEAP32[86750];
  $2 = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & -513;
  HEAP8[$0 + 12 | 0] = $2;
  HEAP8[$0 + 13 | 0] = $2 >>> 8;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jswrap_string_substr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 if (jsvIsUndefined(HEAP32[$3 + 4 >> 2]) & 1) {
  $0 = 2147483647;
 } else {
  $0 = jsvGetInteger(HEAP32[$3 + 4 >> 2]);
 }
 HEAP32[$3 >> 2] = $0;
 if (HEAP32[$3 >> 2] < 0) {
  HEAP32[$3 >> 2] = 0;
 }
 if (HEAP32[$3 + 8 >> 2] < 0) {
  HEAP32[$3 + 8 >> 2] = jsvGetStringLength(HEAP32[$3 + 12 >> 2]) + HEAP32[$3 + 8 >> 2];
 }
 if (HEAP32[$3 + 8 >> 2] < 0) {
  HEAP32[$3 + 8 >> 2] = 0;
 }
 $0 = jsvNewFromStringVar(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function jsvGetValueOf($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!(jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1)) {
   HEAP32[$1 + 12 >> 2] = jsvLockAgainSafe(HEAP32[$1 + 8 >> 2]);
   break label$1;
  }
  HEAP32[$1 + 4 >> 2] = jspGetNamedField(HEAP32[$1 + 8 >> 2], 119135, 0);
  if (!(jsvIsFunction(HEAP32[$1 + 4 >> 2]) & 1)) {
   jsvUnLock(HEAP32[$1 + 4 >> 2]);
   HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[$1 + 8 >> 2]);
   break label$1;
  }
  HEAP32[$1 + 8 >> 2] = jspeFunctionCall(HEAP32[$1 + 4 >> 2], 0, HEAP32[$1 + 8 >> 2], 0, 0, 0);
  jsvUnLock(HEAP32[$1 + 4 >> 2]);
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2];
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_storage_list($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = 0;
 HEAP32[$2 + 16 >> 2] = 0;
 if (jsvIsObject(HEAP32[$2 + 24 >> 2]) & 1) {
  HEAP32[$2 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 24 >> 2], 119081);
  if (HEAP32[$2 + 12 >> 2]) {
   label$3: {
    if (jsvGetBoolAndUnLock(HEAP32[$2 + 12 >> 2]) & 1) {
     HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 20 >> 2] | 64;
     break label$3;
    }
    HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 16 >> 2] | 64;
   }
  }
 }
 $0 = jsfListFiles(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 20 >> 2], HEAP32[$2 + 16 >> 2]);
 __stack_pointer = $2 + 32 | 0;
 return $0 | 0;
}

function jsvInitJsVars($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP16[$2 + 14 >> 1] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP16[$2 + 6 >> 1] = HEAPU16[$2 + 14 >> 1];
 while (1) {
  if (HEAPU16[$2 + 6 >> 1] < HEAPU16[$2 + 14 >> 1] + HEAP32[$2 + 8 >> 2] >>> 0) {
   HEAP32[$2 >> 2] = jsvGetAddressOf(HEAPU16[$2 + 6 >> 1]);
   $0 = HEAP32[$2 >> 2];
   HEAP8[$0 + 12 | 0] = 0;
   HEAP8[$0 + 13 | 0] = 0;
   jsvSetNextSibling(HEAP32[$2 >> 2], HEAPU16[$2 + 6 >> 1] + 1 & 65535);
   HEAP16[$2 + 6 >> 1] = HEAPU16[$2 + 6 >> 1] + 1;
   continue;
  }
  break;
 }
 jsvSetNextSibling(jsvGetAddressOf((HEAPU16[$2 + 14 >> 1] + HEAP32[$2 + 8 >> 2] | 0) - 1 & 65535), 0);
 __stack_pointer = $2 + 16 | 0;
 return HEAPU16[$2 + 14 >> 1];
}

function jsiConsolePrintStringVarWithNewLineChar($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer + -64 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 60 >> 2] = $0;
 HEAP32[$3 + 56 >> 2] = $1;
 HEAP8[$3 + 55 | 0] = $2;
 jsvStringIteratorNew($3 + 16 | 0, HEAP32[$3 + 60 >> 2], HEAP32[$3 + 56 >> 2]);
 while (1) {
  if (jsvStringIteratorHasChar_5($3 + 16 | 0) & 1) {
   HEAP8[$3 + 15 | 0] = jsvStringIteratorGetCharAndNext($3 + 16 | 0);
   if (HEAP8[$3 + 15 | 0] == 10) {
    jsiConsolePrintChar(13);
   }
   jsiConsolePrintChar(HEAP8[$3 + 15 | 0]);
   if (!(!HEAP8[$3 + 55 | 0] | HEAP8[$3 + 15 | 0] != 10)) {
    jsiConsolePrintChar(HEAP8[$3 + 55 | 0]);
   }
   continue;
  }
  break;
 }
 jsvStringIteratorFree_5($3 + 16 | 0);
 __stack_pointer = $3 - -64 | 0;
}

function jsfGetFlags() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 8 >> 2] = jsvNewWithFlags(5);
 label$1: {
  if (!HEAP32[$0 + 8 >> 2]) {
   HEAP32[$0 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$0 + 4 >> 2] = HEAP32[44633];
  HEAP8[$0 + 3 | 0] = 1;
  while (1) {
   if (HEAPU8[HEAP32[$0 + 4 >> 2]]) {
    jsvObjectSetChildAndUnLock(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 4 >> 2], jsvNewFromInteger(jsfGetFlag(HEAPU8[$0 + 3 | 0]) & 1));
    HEAP32[$0 + 4 >> 2] = (strlen(HEAP32[$0 + 4 >> 2]) + 1 | 0) + HEAP32[$0 + 4 >> 2];
    HEAP8[$0 + 3 | 0] = HEAPU8[$0 + 3 | 0] << 1;
    continue;
   }
   break;
  }
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function jsvIsChild($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP16[$2 + 18 >> 1] = jsvGetRef(HEAP32[$2 + 20 >> 2]);
 HEAP16[$2 + 16 >> 1] = jsvGetFirstChild(HEAP32[$2 + 24 >> 2]);
 label$1: {
  while (1) {
   if (HEAPU16[$2 + 16 >> 1]) {
    if (HEAPU16[$2 + 16 >> 1] == HEAPU16[$2 + 18 >> 1]) {
     HEAP8[$2 + 31 | 0] = 1;
     break label$1;
    } else {
     HEAP32[$2 + 12 >> 2] = jsvLock(HEAPU16[$2 + 16 >> 1]);
     HEAP16[$2 + 16 >> 1] = jsvGetNextSibling(HEAP32[$2 + 12 >> 2]);
     jsvUnLock(HEAP32[$2 + 12 >> 2]);
     continue;
    }
   }
   break;
  }
  HEAP8[$2 + 31 | 0] = 0;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP8[$2 + 31 | 0] & 1;
}

function jsvArrayBufferIteratorNext($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 48 >> 2] = HEAP32[$0 + 48 >> 2] + 1;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + (HEAPU8[HEAP32[$1 + 12 >> 2] + 36 | 0] & 15);
 label$1: {
  if (!(HEAP8[HEAP32[$1 + 12 >> 2] + 52 | 0] & 1)) {
   HEAP32[$1 + 8 >> 2] = HEAPU8[HEAP32[$1 + 12 >> 2] + 36 | 0] & 15;
   while (1) {
    $0 = HEAP32[$1 + 8 >> 2];
    HEAP32[$1 + 8 >> 2] = $0 - 1;
    if ($0) {
     jsvStringIteratorNext(HEAP32[$1 + 12 >> 2]);
     continue;
    }
    break;
   }
   break label$1;
  }
  HEAP8[HEAP32[$1 + 12 >> 2] + 52 | 0] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_date_setMinutes($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 44 >> 2] = $0;
 HEAP32[$4 + 40 >> 2] = $1;
 HEAP32[$4 + 36 >> 2] = $2;
 HEAP32[$4 + 32 >> 2] = $3;
 getTimeFromDateVar($4, HEAP32[$4 + 44 >> 2], 0);
 HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 40 >> 2];
 if (jsvIsNumeric(HEAP32[$4 + 36 >> 2]) & 1) {
  HEAP32[$4 + 8 >> 2] = jsvGetInteger(HEAP32[$4 + 36 >> 2]);
 }
 if (jsvIsNumeric(HEAP32[$4 + 32 >> 2]) & 1) {
  HEAP32[$4 + 4 >> 2] = jsvGetInteger(HEAP32[$4 + 32 >> 2]);
 }
 setCorrectTimeZone($4);
 $5 = jswrap_date_setTime(HEAP32[$4 + 44 >> 2], fromTimeInDay($4));
 __stack_pointer = $4 + 48 | 0;
 return +$5;
}

function jsfSetFlags($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (!(jsvIsObject(HEAP32[$1 + 12 >> 2]) & 1)) {
   break label$1;
  }
  HEAP32[$1 + 8 >> 2] = HEAP32[44633];
  HEAP8[$1 + 7 | 0] = 1;
  while (1) {
   if (!HEAPU8[HEAP32[$1 + 8 >> 2]]) {
    break label$1;
   }
   HEAP32[$1 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 8 >> 2]);
   if (HEAP32[$1 >> 2]) {
    jsfSetFlag(HEAPU8[$1 + 7 | 0], jsvGetBoolAndUnLock(HEAP32[$1 >> 2]) & 1);
   }
   HEAP32[$1 + 8 >> 2] = (strlen(HEAP32[$1 + 8 >> 2]) + 1 | 0) + HEAP32[$1 + 8 >> 2];
   HEAP8[$1 + 7 | 0] = HEAPU8[$1 + 7 | 0] << 1;
   continue;
  }
 }
 __stack_pointer = $1 + 16 | 0;
}

function jsvArrayBufferIteratorDataToInt($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = HEAPU8[HEAP32[$2 + 28 >> 2] + 36 | 0] & 15;
 HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 20 >> 2] << 3;
 $0 = HEAP32[$2 + 16 >> 2];
 $1 = $0 & 31;
 $0 = ($0 & 63) >>> 0 >= 32 ? 0 : 1 << $1;
 $1 = $0 - 1 | 0;
 HEAP32[$2 + 12 >> 2] = $1;
 HEAP32[$2 + 8 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] & HEAP32[$2 + 12 >> 2];
 if (!(!(HEAPU8[HEAP32[$2 + 28 >> 2] + 36 | 0] & 16) | !(HEAP32[$2 + 8 >> 2] & 1 << HEAP32[$2 + 16 >> 2] - 1))) {
  HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | HEAP32[$2 + 12 >> 2] ^ -1;
 }
 return HEAP32[$2 + 8 >> 2];
}

function tflite__ComputePaddingWithOffset_28int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 32 | 0;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP32[$6 + 8 >> 2] = $5;
 HEAP32[$6 + 4 >> 2] = Math_imul(HEAP32[$6 + 24 >> 2], HEAP32[$6 + 16 >> 2] - 1 | 0) + 1;
 HEAP32[$6 >> 2] = (HEAP32[$6 + 4 >> 2] + Math_imul(HEAP32[$6 + 28 >> 2], HEAP32[$6 + 12 >> 2] - 1 | 0) | 0) - HEAP32[$6 + 20 >> 2];
 if (HEAP32[$6 >> 2] > 0) {
  $0 = HEAP32[$6 >> 2];
 } else {
  $0 = 0;
 }
 HEAP32[$6 >> 2] = $0;
 HEAP32[HEAP32[$6 + 8 >> 2] >> 2] = HEAP32[$6 >> 2] % 2;
 return HEAP32[$6 >> 2] / 2 | 0;
}

function flatbuffers__Vector_unsigned_20char__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_unsigned_20char__20const___28unsigned_20short_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP16[$2 + 8 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$2 + 10 >> 1]);
 HEAP32[$2 + 4 >> 2] = HEAPU16[$2 + 8 >> 1] + $0;
 label$1: {
  if (HEAPU16[$2 + 8 >> 1]) {
   $0 = HEAP32[$2 + 4 >> 2] + unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 4 >> 2]) | 0;
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jswrap_regexp_hasFlag($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 60 >> 2] = $0;
 HEAP8[$2 + 59 | 0] = $1;
 HEAP32[$2 + 52 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 60 >> 2], 115438);
 HEAP8[$2 + 51 | 0] = 0;
 if (jsvIsString(HEAP32[$2 + 52 >> 2]) & 1) {
  jsvStringIteratorNew($2 + 8 | 0, HEAP32[$2 + 52 >> 2], 0);
  while (1) {
   if (jsvStringIteratorHasChar_7($2 + 8 | 0) & 1) {
    HEAP8[$2 + 51 | 0] = (jsvStringIteratorGetCharAndNext($2 + 8 | 0) & 255) == HEAPU8[$2 + 59 | 0] | HEAP8[$2 + 51 | 0] & 1;
    continue;
   }
   break;
  }
  jsvStringIteratorFree_9($2 + 8 | 0);
 }
 jsvUnLock(HEAP32[$2 + 52 >> 2]);
 __stack_pointer = $2 - -64 | 0;
 return HEAP8[$2 + 51 | 0] & 1;
}

function jsvNewNativeString($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP32[$2 >> 2] = jsvNewWithFlags(39);
 label$2: {
  if (!HEAP32[$2 >> 2]) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$2;
  }
  $0 = HEAP32[$2 >> 2];
  $1 = HEAP32[$2 + 8 >> 2];
  HEAP8[$0 | 0] = $1;
  HEAP8[$0 + 1 | 0] = $1 >>> 8;
  HEAP8[$0 + 2 | 0] = $1 >>> 16;
  HEAP8[$0 + 3 | 0] = $1 >>> 24;
  $0 = HEAP32[$2 >> 2];
  $1 = HEAP32[$2 + 4 >> 2];
  HEAP8[$0 + 4 | 0] = $1;
  HEAP8[$0 + 5 | 0] = $1 >>> 8;
  HEAP8[$0 + 6 | 0] = $1 >>> 16;
  HEAP8[$0 + 7 | 0] = $1 >>> 24;
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jsvExecuteGetter($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  if (!(jsvIsGetterOrSetter(HEAP32[$2 + 20 >> 2]) & 1)) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 16 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 20 >> 2], 113243);
  if (!(jsvIsFunction(HEAP32[$2 + 16 >> 2]) & 1)) {
   jsvUnLock(HEAP32[$2 + 16 >> 2]);
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jspExecuteFunction(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 24 >> 2], 0, 0);
  jsvUnLock(HEAP32[$2 + 16 >> 2]);
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jsvSkipToLastName($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvLockAgain(HEAP32[$1 + 8 >> 2]);
 while (1) {
  label$2: {
   if (!(jsvGetFirstChild(HEAP32[$1 + 8 >> 2]) & 65535)) {
    break label$2;
   }
   HEAP32[$1 + 4 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$1 + 8 >> 2]) & 65535);
   label$4: {
    if (jsvIsName(HEAP32[$1 + 4 >> 2]) & 1) {
     jsvUnLock(HEAP32[$1 + 8 >> 2]);
     HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 4 >> 2];
     break label$4;
    }
    jsvUnLock(HEAP32[$1 + 4 >> 2]);
    break label$2;
   }
   continue;
  }
  break;
 }
 HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2];
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvNewFlashString($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP32[$2 >> 2] = jsvNewWithFlags(40);
 label$2: {
  if (!HEAP32[$2 >> 2]) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$2;
  }
  $0 = HEAP32[$2 >> 2];
  $1 = HEAP32[$2 + 8 >> 2];
  HEAP8[$0 | 0] = $1;
  HEAP8[$0 + 1 | 0] = $1 >>> 8;
  HEAP8[$0 + 2 | 0] = $1 >>> 16;
  HEAP8[$0 + 3 | 0] = $1 >>> 24;
  $0 = HEAP32[$2 >> 2];
  $1 = HEAP32[$2 + 4 >> 2];
  HEAP8[$0 + 4 | 0] = $1;
  HEAP8[$0 + 5 | 0] = $1 >>> 8;
  HEAP8[$0 + 6 | 0] = $1 >>> 16;
  HEAP8[$0 + 7 | 0] = $1 >>> 24;
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jswrap_i2c_readFrom($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 label$1: {
  if (!(jsvIsObject(HEAP32[$3 + 24 >> 2]) & 1)) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP8[$3 + 15 | 0] = jsiGetDeviceFromClass(HEAP32[$3 + 24 >> 2]);
  HEAP8[$3 + 14 | 0] = 1;
  HEAP32[$3 + 8 >> 2] = i2c_get_address(HEAP32[$3 + 20 >> 2], $3 + 14 | 0);
  HEAP32[$3 + 28 >> 2] = _jswrap_i2c_readFrom(HEAP32[$3 + 24 >> 2], HEAPU8[$3 + 15 | 0], HEAP32[$3 + 8 >> 2], HEAP8[$3 + 14 | 0] & 1, HEAP32[$3 + 16 >> 2]);
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function tflite__EnumNameBuiltinOperator_28tflite__BuiltinOperator_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = 0;
 HEAP32[$1 + 16 >> 2] = 126;
 label$1: {
  if (bool_20flatbuffers__IsOutRange_tflite__BuiltinOperator__28tflite__BuiltinOperator_20const__2c_20tflite__BuiltinOperator_20const__2c_20tflite__BuiltinOperator_20const__29($1 + 24 | 0, $1 + 20 | 0, $1 + 16 | 0) & 1) {
   HEAP32[$1 + 28 >> 2] = 146978;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 24 >> 2];
  HEAP32[$1 + 28 >> 2] = HEAP32[tflite__EnumNamesBuiltinOperator_28_29() + (HEAP32[$1 + 12 >> 2] << 2) >> 2];
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function reverseBytes($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 24 >> 2] >> 1;
 HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 24 >> 2] - 1;
 HEAP32[$2 + 12 >> 2] = 0;
 while (1) {
  if (HEAP32[$2 + 12 >> 2] < HEAP32[$2 + 20 >> 2]) {
   HEAP8[$2 + 11 | 0] = HEAPU8[HEAP32[$2 + 28 >> 2] + HEAP32[$2 + 12 >> 2] | 0];
   HEAP8[HEAP32[$2 + 28 >> 2] + HEAP32[$2 + 12 >> 2] | 0] = HEAPU8[HEAP32[$2 + 28 >> 2] + HEAP32[$2 + 16 >> 2] | 0];
   HEAP8[HEAP32[$2 + 28 >> 2] + HEAP32[$2 + 16 >> 2] | 0] = HEAPU8[$2 + 11 | 0];
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
   HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 16 >> 2] - 1;
   continue;
  }
  break;
 }
}

function tflite__GetOutput_28TfLiteContext__2c_20TfLiteNode_20const__2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = $1;
 HEAP32[$3 >> 2] = $2;
 label$1: {
  if (HEAP32[HEAP32[$3 + 8 >> 2] + 8 >> 2]) {
   HEAP32[$3 + 12 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] + 8 >> 2] + Math_imul(HEAP32[(HEAP32[HEAP32[$3 + 4 >> 2] + 4 >> 2] + 4 | 0) + (HEAP32[$3 >> 2] << 2) >> 2], 40);
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$3 + 8 >> 2] + 80 >> 2]](HEAP32[$3 + 8 >> 2], HEAP32[(HEAP32[HEAP32[$3 + 4 >> 2] + 4 >> 2] + 4 | 0) + (HEAP32[$3 >> 2] << 2) >> 2]);
 }
 __stack_pointer = $3 + 16 | 0;
 return HEAP32[$3 + 12 >> 2];
}

function jsiHistoryAddLine($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 12 >> 2]) {
   break label$1;
  }
  HEAP32[$1 + 8 >> 2] = jsvGetStringLength(HEAP32[$1 + 12 >> 2]);
  if (!HEAP32[$1 + 8 >> 2] | HEAPU32[$1 + 8 >> 2] > 500) {
   break label$1;
  }
  HEAP32[$1 + 4 >> 2] = jsiGetHistory();
  if (!HEAP32[$1 + 4 >> 2]) {
   break label$1;
  }
  HEAP32[$1 >> 2] = jsvGetIndexOf(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 12 >> 2], 0);
  if (HEAP32[$1 >> 2]) {
   jsvRemoveChildAndUnLock(HEAP32[$1 + 4 >> 2], HEAP32[$1 >> 2]);
  }
  jsvArrayPush(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 12 >> 2]);
  jsvUnLock(HEAP32[$1 + 4 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
}

function graphicsSetPixelDeviceBlended($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = graphicsGetPixelDevice(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2]);
 $0 = HEAP32[$4 + 28 >> 2];
 HEAP32[$4 + 8 >> 2] = graphicsBlendColor(HEAP32[$4 + 28 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24), HEAP32[$4 + 12 >> 2], HEAP32[$4 + 16 >> 2]);
 graphicsSetPixelDevice(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 8 >> 2]);
 __stack_pointer = $4 + 32 | 0;
}

function flatbuffers__Vector_long_20long__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_long_20long__20const___28unsigned_20short_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP16[$2 + 8 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$2 + 10 >> 1]);
 HEAP32[$2 + 4 >> 2] = HEAPU16[$2 + 8 >> 1] + $0;
 label$1: {
  if (HEAPU16[$2 + 8 >> 1]) {
   $0 = HEAP32[$2 + 4 >> 2] + unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 4 >> 2]) | 0;
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function tflite__GreedyMemoryPlanner__DoesEntryOverlapInTime_28tflite__GreedyMemoryPlanner__ListEntry_20const__2c_20int_2c_20int_29_20const($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 HEAP32[$4 + 24 >> 2] = $0;
 HEAP32[$4 + 20 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 HEAP32[$4 + 8 >> 2] = HEAP32[HEAP32[$4 + 24 >> 2] + 12 >> 2] + (HEAP32[HEAP32[$4 + 20 >> 2] + 4 >> 2] << 4);
 label$1: {
  if (HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2] > HEAP32[$4 + 12 >> 2]) {
   HEAP8[$4 + 31 | 0] = 0;
   break label$1;
  }
  if (HEAP32[$4 + 16 >> 2] > HEAP32[HEAP32[$4 + 8 >> 2] + 12 >> 2]) {
   HEAP8[$4 + 31 | 0] = 0;
   break label$1;
  }
  HEAP8[$4 + 31 | 0] = 1;
 }
 return HEAP8[$4 + 31 | 0] & 1;
}

function tf_get($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP8[$3 + 11 | 0] = $2;
 HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 >> 2] = 0;
 label$1: {
  if (HEAP8[$3 + 11 | 0] & 1) {
   $1 = tflite__MicroInterpreter__input_28unsigned_20long_29(HEAP32[$3 + 4 >> 2] + 400 | 0, 0);
   break label$1;
  }
  $1 = tflite__MicroInterpreter__output_28unsigned_20long_29(HEAP32[$3 + 4 >> 2] + 400 | 0, 0);
 }
 HEAP32[$3 >> 2] = $1;
 if (HEAP32[$3 >> 2]) {
  HEAP32[$0 + 4 >> 2] = HEAP32[HEAP32[$3 >> 2] + 28 >> 2];
  HEAP32[$0 >> 2] = HEAP32[HEAP32[$3 >> 2] + 16 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[HEAP32[$3 >> 2] + 24 >> 2];
 }
 __stack_pointer = $3 + 16 | 0;
}

function tflite__QuantizationParameters_20const__20flatbuffers__Table__GetPointer_tflite__QuantizationParameters_20const___28unsigned_20short_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP16[$2 + 8 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$2 + 10 >> 1]);
 HEAP32[$2 + 4 >> 2] = HEAPU16[$2 + 8 >> 1] + $0;
 label$1: {
  if (HEAPU16[$2 + 8 >> 1]) {
   $0 = HEAP32[$2 + 4 >> 2] + unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 4 >> 2]) | 0;
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jswrap_string_repeat($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (HEAP32[$2 + 4 >> 2] < 0) {
   jsExceptionHere(1, 119433, 0);
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 >> 2] = jsvNewFromEmptyString_8();
  while (1) {
   $0 = HEAP32[$2 + 4 >> 2];
   HEAP32[$2 + 4 >> 2] = $0 - 1;
   $1 = 0;
   if ($0) {
    $1 = jspIsInterrupted() ^ -1;
   }
   if ($1 & 1) {
    jsvAppendStringVarComplete(HEAP32[$2 >> 2], HEAP32[$2 + 8 >> 2]);
    continue;
   }
   break;
  }
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jswrap_parseFloat($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 112 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 100 >> 2] = $0;
 jsvGetString(HEAP32[$1 + 100 >> 2], $1 + 16 | 0, 70);
 label$1: {
  if (!strcmp($1 + 16 | 0, 111581)) {
   HEAPF64[$1 + 104 >> 3] = infinity;
   break label$1;
  }
  if (!strcmp($1 + 16 | 0, 111580)) {
   HEAPF64[$1 + 104 >> 3] = -infinity;
   break label$1;
  }
  HEAPF64[$1 >> 3] = stringToFloatWithRadix($1 + 16 | 0, 0, $1 + 12 | 0);
  if (HEAP32[$1 + 12 >> 2] == ($1 + 85 | 0)) {
   jsExceptionHere(1, 116539, 0);
   HEAPF64[$1 + 104 >> 3] = nan;
   break label$1;
  }
  HEAPF64[$1 + 104 >> 3] = HEAPF64[$1 >> 3];
 }
 __stack_pointer = $1 + 112 | 0;
 return +HEAPF64[$1 + 104 >> 3];
}

function jswrap_graphics_asURL($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = jswrap_graphics_asBMP_X(HEAP32[$1 + 24 >> 2], 0);
 label$1: {
  if (!HEAP32[$1 + 20 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 16 >> 2] = jswrap_btoa(HEAP32[$1 + 20 >> 2]);
  jsvUnLock(HEAP32[$1 + 20 >> 2]);
  if (!HEAP32[$1 + 16 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 >> 2] = HEAP32[$1 + 16 >> 2];
  HEAP32[$1 + 12 >> 2] = jsvVarPrintf(112219, $1);
  jsvUnLock(HEAP32[$1 + 16 >> 2]);
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 12 >> 2];
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function jsiDumpEvent($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 HEAP32[$5 + 8 >> 2] = jsvNewFromStringVar(HEAP32[$5 + 16 >> 2], 3, 2147483647);
 $0 = HEAP32[$5 + 28 >> 2];
 $1 = HEAP32[$5 + 24 >> 2];
 $2 = HEAP32[$5 + 20 >> 2];
 HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 8 >> 2];
 HEAP32[$5 >> 2] = $2;
 cbprintf($0, $1, 144351, $5);
 jsvUnLock(HEAP32[$5 + 8 >> 2]);
 jsiDumpJSON(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 12 >> 2], 0);
 FUNCTION_TABLE[HEAP32[$5 + 28 >> 2]](145976, HEAP32[$5 + 24 >> 2]);
 __stack_pointer = $5 + 32 | 0;
}

function save_backlog($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = get_input_buffer_size(HEAP32[$1 + 12 >> 2]) & 65535;
 HEAP16[$1 + 6 >> 1] = HEAPU16[HEAP32[$1 + 12 >> 2] + 2 >> 1];
 HEAP16[$1 + 4 >> 1] = HEAP32[$1 + 8 >> 2] - HEAPU16[$1 + 6 >> 1];
 HEAP16[$1 + 2 >> 1] = HEAP32[$1 + 8 >> 2] + HEAPU16[$1 + 4 >> 1];
 memmove(HEAP32[$1 + 12 >> 2] + 15 | 0, HEAP32[$1 + 12 >> 2] + 15 + (HEAP32[$1 + 8 >> 2] - HEAPU16[$1 + 4 >> 1]) | 0, HEAPU16[$1 + 2 >> 1]);
 HEAP16[HEAP32[$1 + 12 >> 2] + 2 >> 1] = 0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP16[$0 >> 1] = HEAPU16[$0 >> 1] - (HEAP32[$1 + 8 >> 2] - HEAPU16[$1 + 4 >> 1] | 0);
 __stack_pointer = $1 + 16 | 0;
}

function std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[std____2____compressed_pair_TfLiteFullyConnectedParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2];
 HEAP32[std____2____compressed_pair_TfLiteFullyConnectedParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2] = 0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jsvCompareInteger($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  label$2: {
   if (!(jsvIsInt(HEAP32[$2 + 8 >> 2]) & 1)) {
    break label$2;
   }
   if (!(jsvIsInt(HEAP32[$2 + 4 >> 2]) & 1)) {
    break label$2;
   }
   HEAP32[$2 + 12 >> 2] = jsvGetInteger(HEAP32[$2 + 8 >> 2]) - jsvGetInteger(HEAP32[$2 + 4 >> 2]);
   break label$1;
  }
  if (jsvIsInt(HEAP32[$2 + 8 >> 2]) & 1) {
   HEAP32[$2 + 12 >> 2] = -1;
   break label$1;
  }
  if (jsvIsInt(HEAP32[$2 + 4 >> 2]) & 1) {
   HEAP32[$2 + 12 >> 2] = 1;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jswrap_espruino_setDST($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (jsvIsUndefined(HEAP32[$1 + 12 >> 2]) & 1) {
   jsvObjectRemoveChild(HEAP32[86751], 112696);
   break label$1;
  }
  label$3: {
   if (jsvIsArray(HEAP32[$1 + 12 >> 2]) & 1) {
    if ((jsvGetLength(HEAP32[$1 + 12 >> 2]) | 0) == 12) {
     break label$3;
    }
   }
   jsExceptionHere(1, 114959, 0);
   break label$1;
  }
  jsvObjectRemoveChild(HEAP32[86751], 111535);
  HEAP32[$1 + 8 >> 2] = jswrap_typedarray_constructor(18, HEAP32[$1 + 12 >> 2], 0, 0);
  jsvObjectSetChildAndUnLock(HEAP32[86751], 112696, HEAP32[$1 + 8 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
}

function tflite__MultiplyByQuantizedMultiplier_28int_2c_20int_2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 if (HEAP32[$3 + 20 >> 2] > 0) {
  $0 = HEAP32[$3 + 20 >> 2];
 } else {
  $0 = 0;
 }
 HEAP32[$3 + 16 >> 2] = $0;
 HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 20 >> 2] > 0 ? 0 : 0 - HEAP32[$3 + 20 >> 2] | 0;
 $0 = int_20gemmlowp__RoundingDivideByPOT_int__28int_2c_20int_29(int_20gemmlowp__SaturatingRoundingDoublingHighMul_int__28int_2c_20int_29(Math_imul(HEAP32[$3 + 28 >> 2], 1 << HEAP32[$3 + 16 >> 2]), HEAP32[$3 + 24 >> 2]), HEAP32[$3 + 12 >> 2]);
 __stack_pointer = $3 + 32 | 0;
 return $0;
}

function std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[std____2____compressed_pair_TfLiteDepthwiseConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2];
 HEAP32[std____2____compressed_pair_TfLiteDepthwiseConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2] = 0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jswrap_flash_getPage($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 label$1: {
  if (!(jshFlashGetPage(HEAP32[$1 + 24 >> 2], $1 + 20 | 0, $1 + 16 | 0) & 1)) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvNewObject();
  if (!HEAP32[$1 + 12 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 12 >> 2], 116624, jsvNewFromInteger(HEAP32[$1 + 20 >> 2]));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 12 >> 2], 118393, jsvNewFromInteger(HEAP32[$1 + 16 >> 2]));
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 12 >> 2];
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function jswGetBuiltInLibrary($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!strcmp(HEAP32[$1 + 8 >> 2], 118488)) {
   HEAP32[$1 + 12 >> 2] = 40;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 120354)) {
   HEAP32[$1 + 12 >> 2] = 43;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 118140)) {
   HEAP32[$1 + 12 >> 2] = 44;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 117064)) {
   HEAP32[$1 + 12 >> 2] = 45;
   break label$1;
  }
  if (!strcmp(HEAP32[$1 + 8 >> 2], 111935)) {
   HEAP32[$1 + 12 >> 2] = 46;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function flatbuffers__Vector_float__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_float__20const___28unsigned_20short_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP16[$2 + 8 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$2 + 10 >> 1]);
 HEAP32[$2 + 4 >> 2] = HEAPU16[$2 + 8 >> 1] + $0;
 label$1: {
  if (HEAPU16[$2 + 8 >> 1]) {
   $0 = HEAP32[$2 + 4 >> 2] + unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 4 >> 2]) | 0;
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jswrap_graphics_fillEllipse($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 96 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 88 >> 2] = $0;
 HEAP32[$5 + 84 >> 2] = $1;
 HEAP32[$5 + 80 >> 2] = $2;
 HEAP32[$5 + 76 >> 2] = $3;
 HEAP32[$5 + 72 >> 2] = $4;
 label$1: {
  if (!(graphicsGetFromVar($5, HEAP32[$5 + 88 >> 2]) & 1)) {
   HEAP32[$5 + 92 >> 2] = 0;
   break label$1;
  }
  graphicsFillEllipse($5, HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2], HEAP32[$5 + 76 >> 2], HEAP32[$5 + 72 >> 2]);
  graphicsSetVar($5);
  HEAP32[$5 + 92 >> 2] = jsvLockAgain(HEAP32[$5 + 88 >> 2]);
 }
 __stack_pointer = $5 + 96 | 0;
 return HEAP32[$5 + 92 >> 2];
}

function jswrap_graphics_drawEllipse($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 96 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 88 >> 2] = $0;
 HEAP32[$5 + 84 >> 2] = $1;
 HEAP32[$5 + 80 >> 2] = $2;
 HEAP32[$5 + 76 >> 2] = $3;
 HEAP32[$5 + 72 >> 2] = $4;
 label$1: {
  if (!(graphicsGetFromVar($5, HEAP32[$5 + 88 >> 2]) & 1)) {
   HEAP32[$5 + 92 >> 2] = 0;
   break label$1;
  }
  graphicsDrawEllipse($5, HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2], HEAP32[$5 + 76 >> 2], HEAP32[$5 + 72 >> 2]);
  graphicsSetVar($5);
  HEAP32[$5 + 92 >> 2] = jsvLockAgain(HEAP32[$5 + 88 >> 2]);
 }
 __stack_pointer = $5 + 96 | 0;
 return HEAP32[$5 + 92 >> 2];
}

function _jswrap_object_entries_cb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 28 >> 2];
 HEAP32[$2 + 16 >> 2] = jsvNewEmptyArray();
 if (HEAP32[$2 + 16 >> 2]) {
  jsvArrayPush(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 24 >> 2]);
  HEAP32[$2 + 12 >> 2] = jsvAsArrayIndex(HEAP32[$2 + 24 >> 2]);
  jsvArrayPushAndUnLock(HEAP32[$2 + 16 >> 2], jspGetVarNamedField(HEAP32[HEAP32[$2 + 20 >> 2] + 4 >> 2], HEAP32[$2 + 12 >> 2], 0));
  jsvUnLock(HEAP32[$2 + 12 >> 2]);
  jsvArrayPushAndUnLock(HEAP32[HEAP32[$2 + 20 >> 2] >> 2], HEAP32[$2 + 16 >> 2]);
 }
 __stack_pointer = $2 + 32 | 0;
}

function jspeParseFunctionCallBrackets() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 label$1: {
  if (!(jslMatch(40) & 1)) {
   break label$1;
  }
  while (1) {
   $1 = 0;
   $1 = HEAP32[86758] & 80 ? $1 : HEAP16[HEAP32[44743] + 2 >> 1] != 41;
   if ($1) {
    jsvUnLock(jspeAssignmentExpression());
    if (HEAP16[HEAP32[44743] + 2 >> 1] == 162) {
     jsvUnLock(jspeArrowFunction(0, 0));
    }
    if (HEAP16[HEAP32[44743] + 2 >> 1] != 41) {
     if (!(jslMatch(44) & 1)) {
      break label$1;
     }
    }
    continue;
   }
   break;
  }
  if (!(HEAP32[86758] & 80)) {
   jslMatch(41);
  }
 }
 HEAP8[$0 + 15 | 0] = 0;
 __stack_pointer = $0 + 16 | 0;
 return HEAP8[$0 + 15 | 0] & 1;
}

function flatbuffers__Vector_int__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_int__20const___28unsigned_20short_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP16[$2 + 8 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$2 + 10 >> 1]);
 HEAP32[$2 + 4 >> 2] = HEAPU16[$2 + 8 >> 1] + $0;
 label$1: {
  if (HEAPU16[$2 + 8 >> 1]) {
   $0 = HEAP32[$2 + 4 >> 2] + unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 4 >> 2]) | 0;
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 HEAP32[$2 + 4 >> 2] = flatbuffers__Table__GetVTable_28_29_20const(HEAP32[$2 + 12 >> 2]);
 HEAP16[$2 + 2 >> 1] = unsigned_20short_20flatbuffers__ReadScalar_unsigned_20short__28void_20const__29(HEAP32[$2 + 4 >> 2]);
 label$1: {
  if (HEAPU16[$2 + 10 >> 1] < HEAPU16[$2 + 2 >> 1]) {
   $0 = unsigned_20short_20flatbuffers__ReadScalar_unsigned_20short__28void_20const__29(HEAP32[$2 + 4 >> 2] + HEAPU16[$2 + 10 >> 1] | 0) & 65535;
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jswrap_graphics_getFonts($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 96 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 88 >> 2] = $0;
 label$1: {
  if (!(graphicsGetFromVar($1 + 16 | 0, HEAP32[$1 + 88 >> 2]) & 1)) {
   HEAP32[$1 + 92 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvNewEmptyArray();
  if (!HEAP32[$1 + 12 >> 2]) {
   HEAP32[$1 + 92 >> 2] = 0;
   break label$1;
  }
  jsvArrayPushString(HEAP32[$1 + 12 >> 2], 125901);
  jsvArrayPushString(HEAP32[$1 + 12 >> 2], 125757);
  jswrap_object_keys_or_property_names_cb(HEAP32[$1 + 88 >> 2], 3, 635, HEAP32[$1 + 12 >> 2]);
  HEAP32[$1 + 92 >> 2] = HEAP32[$1 + 12 >> 2];
 }
 __stack_pointer = $1 + 96 | 0;
 return HEAP32[$1 + 92 >> 2];
}

function jswrap_banglejs_dbg() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 8 >> 2] = jsvNewObject();
 label$1: {
  if (!HEAP32[$0 + 8 >> 2]) {
   HEAP32[$0 + 12 >> 2] = 0;
   break label$1;
  }
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 8 >> 2], 111882, jsvNewFromInteger(HEAPU8[373822]));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 8 >> 2], 112755, jsvNewFromInteger(HEAPU8[373976]));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 8 >> 2], 112781, jsvNewFromInteger(HEAPU8[373977]));
  jsvObjectSetChildAndUnLock(HEAP32[$0 + 8 >> 2], 118068, jsvNewFromInteger(HEAPU16[186839]));
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function jswrap_string_concat($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  if (!(jsvIsString(HEAP32[$2 + 24 >> 2]) & 1)) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 16 >> 2] = jsvNewFromEmptyString_8();
  jsvAppendStringVarComplete(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 24 >> 2]);
  HEAP32[$2 + 12 >> 2] = jsvArrayJoin(HEAP32[$2 + 20 >> 2], 0, 0);
  jsvAppendStringVarComplete(HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2]);
  jsvUnLock(HEAP32[$2 + 12 >> 2]);
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jswrap_graphics_drawLine($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 96 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 88 >> 2] = $0;
 HEAP32[$5 + 84 >> 2] = $1;
 HEAP32[$5 + 80 >> 2] = $2;
 HEAP32[$5 + 76 >> 2] = $3;
 HEAP32[$5 + 72 >> 2] = $4;
 label$1: {
  if (!(graphicsGetFromVar($5, HEAP32[$5 + 88 >> 2]) & 1)) {
   HEAP32[$5 + 92 >> 2] = 0;
   break label$1;
  }
  graphicsDrawLine($5, HEAP32[$5 + 84 >> 2], HEAP32[$5 + 80 >> 2], HEAP32[$5 + 76 >> 2], HEAP32[$5 + 72 >> 2]);
  graphicsSetVar($5);
  HEAP32[$5 + 92 >> 2] = jsvLockAgain(HEAP32[$5 + 88 >> 2]);
 }
 __stack_pointer = $5 + 96 | 0;
 return HEAP32[$5 + 92 >> 2];
}

function st_yield_tag_bit($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (can_take_byte(HEAP32[$2 + 4 >> 2])) {
   if (!HEAPU16[HEAP32[$2 + 8 >> 2] + 4 >> 1]) {
    add_tag_bit(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2], 1);
    HEAP32[$2 + 12 >> 2] = 4;
    break label$1;
   }
   add_tag_bit(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2], 0);
   HEAP16[HEAP32[$2 + 8 >> 2] + 8 >> 1] = HEAPU16[HEAP32[$2 + 8 >> 2] + 6 >> 1] - 1;
   HEAP8[HEAP32[$2 + 8 >> 2] + 10 | 0] = 8;
   HEAP32[$2 + 12 >> 2] = 5;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 3;
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jspeStatementReturn() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = 0;
 jslGetNextToken();
 if (!(HEAP16[HEAP32[44743] + 2 >> 1] == 59 | HEAP16[HEAP32[44743] + 2 >> 1] == 125)) {
  HEAP32[$0 + 12 >> 2] = jsvSkipNameAndUnLock(jspeExpression());
 }
 if ((HEAP32[86758] & 63) == 1) {
  HEAP32[$0 + 8 >> 2] = jspeiFindInScopes(117107);
  label$3: {
   if (HEAP32[$0 + 8 >> 2]) {
    jsvReplaceWith(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2]);
    jsvUnLock(HEAP32[$0 + 8 >> 2]);
    HEAP32[86758] = HEAP32[86758] | 8;
    break label$3;
   }
   jsExceptionHere(2, 127262, 0);
  }
 }
 jsvUnLock(HEAP32[$0 + 12 >> 2]);
 __stack_pointer = $0 + 16 | 0;
 return 0;
}

function flatbuffers__String_20const__20flatbuffers__Table__GetPointer_flatbuffers__String_20const___28unsigned_20short_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP16[$2 + 8 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$2 + 10 >> 1]);
 HEAP32[$2 + 4 >> 2] = HEAPU16[$2 + 8 >> 1] + $0;
 label$1: {
  if (HEAPU16[$2 + 8 >> 1]) {
   $0 = HEAP32[$2 + 4 >> 2] + unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 4 >> 2]) | 0;
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function unsigned_20char_20const__20std____2__min_unsigned_20char_2c_20std____2____less_unsigned_20char_2c_20unsigned_20char___28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20std____2____less_unsigned_20char_2c_20unsigned_20char__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 >> 2] = $1;
 label$1: {
  if (std____2____less_unsigned_20char_2c_20unsigned_20char___operator_28_29_28unsigned_20char_20const__2c_20unsigned_20char_20const__29_20const($2 + 8 | 0, HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2]) & 1) {
   $0 = HEAP32[$2 >> 2];
   break label$1;
  }
  $0 = HEAP32[$2 + 4 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function unsigned_20char_20const__20std____2__max_unsigned_20char_2c_20std____2____less_unsigned_20char_2c_20unsigned_20char___28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20std____2____less_unsigned_20char_2c_20unsigned_20char__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 >> 2] = $1;
 label$1: {
  if (std____2____less_unsigned_20char_2c_20unsigned_20char___operator_28_29_28unsigned_20char_20const__2c_20unsigned_20char_20const__29_20const($2 + 8 | 0, HEAP32[$2 + 4 >> 2], HEAP32[$2 >> 2]) & 1) {
   $0 = HEAP32[$2 >> 2];
   break label$1;
  }
  $0 = HEAP32[$2 + 4 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function getMonth($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = 0;
 label$1: {
  while (1) {
   if (HEAP32[$1 + 4 >> 2] < 12) {
    if (!(HEAP8[HEAP32[$1 + 8 >> 2]] != HEAP8[HEAP32[44647] + (HEAP32[$1 + 4 >> 2] << 2) | 0] | HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0] != HEAP8[HEAP32[44647] + ((HEAP32[$1 + 4 >> 2] << 2) + 1 | 0) | 0] | HEAP8[HEAP32[$1 + 8 >> 2] + 2 | 0] != HEAP8[HEAP32[44647] + ((HEAP32[$1 + 4 >> 2] << 2) + 2 | 0) | 0])) {
     HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
     break label$1;
    }
    HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$1 + 12 >> 2] = -1;
 }
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_date_setMonth($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer + -64 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 60 >> 2] = $0;
 HEAP32[$3 + 56 >> 2] = $1;
 HEAP32[$3 + 52 >> 2] = $2;
 getTimeFromDateVar($3 + 24 | 0, HEAP32[$3 + 60 >> 2], 0);
 getCalendarDate($3, HEAP32[$3 + 24 >> 2]);
 HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 56 >> 2];
 if (jsvIsNumeric(HEAP32[$3 + 52 >> 2]) & 1) {
  HEAP32[$3 + 4 >> 2] = jsvGetInteger(HEAP32[$3 + 52 >> 2]);
 }
 HEAP32[$3 + 24 >> 2] = fromCalendarDate($3);
 setCorrectTimeZone($3 + 24 | 0);
 $4 = jswrap_date_setTime(HEAP32[$3 + 60 >> 2], fromTimeInDay($3 + 24 | 0));
 __stack_pointer = $3 - -64 | 0;
 return +$4;
}

function std____2__unique_ptr_TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[std____2____compressed_pair_TfLiteSoftmaxParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2];
 HEAP32[std____2____compressed_pair_TfLiteSoftmaxParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2] = 0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[std____2____compressed_pair_TfLiteReshapeParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2];
 HEAP32[std____2____compressed_pair_TfLiteReshapeParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2] = 0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jswrap_graphics_moveTo($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 96 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 88 >> 2] = $0;
 HEAP32[$3 + 84 >> 2] = $1;
 HEAP32[$3 + 80 >> 2] = $2;
 label$1: {
  if (!(graphicsGetFromVar($3 + 8 | 0, HEAP32[$3 + 88 >> 2]) & 1)) {
   HEAP32[$3 + 92 >> 2] = 0;
   break label$1;
  }
  $0 = HEAP32[$3 + 84 >> 2];
  HEAP8[$3 + 35 | 0] = $0;
  HEAP8[$3 + 36 | 0] = $0 >>> 8;
  $0 = HEAP32[$3 + 80 >> 2];
  HEAP8[$3 + 37 | 0] = $0;
  HEAP8[$3 + 38 | 0] = $0 >>> 8;
  graphicsSetVar($3 + 8 | 0);
  HEAP32[$3 + 92 >> 2] = jsvLockAgain(HEAP32[$3 + 88 >> 2]);
 }
 __stack_pointer = $3 + 96 | 0;
 return HEAP32[$3 + 92 >> 2];
}

function jswrap_banglejs_setPollInterval($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 + 24 >> 3] = $0;
 __DOUBLE_BITS_2(HEAPF64[$1 + 24 >> 3]);
 $2 = i64toi32_i32$HIGH_BITS & 2147483647;
 label$1: {
  if (HEAPF64[$1 + 24 >> 3] > 4e3 ? 1 : ($2 | 0) == 2146435072 | $2 >>> 0 > 2146435072 | HEAPF64[$1 + 24 >> 3] < 10) {
   jsExceptionHere(1, 118051, 0);
   break label$1;
  }
  HEAP32[93413] = HEAP32[93413] & -2049;
  $0 = HEAPF64[$1 + 24 >> 3];
  label$5: {
   if ($0 < 4294967296 & $0 >= 0) {
    $2 = ~~$0 >>> 0;
    break label$5;
   }
   $2 = 0;
  }
  jswrap_banglejs_setPollInterval_internal($2 & 65535);
 }
 __stack_pointer = $1 + 32 | 0;
}

function jsvGetConstString($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (jsvIsUndefined(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 121670;
   break label$1;
  }
  if (jsvIsNull(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 117780;
   break label$1;
  }
  label$4: {
   if (!(jsvIsBoolean(HEAP32[$1 + 8 >> 2]) & 1)) {
    break label$4;
   }
   if (jsvIsNameIntBool(HEAP32[$1 + 8 >> 2]) & 1) {
    break label$4;
   }
   HEAP32[$1 + 12 >> 2] = jsvGetBool(HEAP32[$1 + 8 >> 2]) & 1 ? 119419 : 119736;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function tflite___28anonymous_20namespace_29__ConvertActivation_28tflite__ActivationFunctionType_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  label$2: {
   switch (HEAP32[$1 + 8 >> 2]) {
   case 0:
    HEAP32[$1 + 12 >> 2] = 0;
    break label$1;

   case 1:
    HEAP32[$1 + 12 >> 2] = 1;
    break label$1;

   case 2:
    HEAP32[$1 + 12 >> 2] = 2;
    break label$1;

   case 3:
    HEAP32[$1 + 12 >> 2] = 3;
    break label$1;

   case 4:
    HEAP32[$1 + 12 >> 2] = 4;
    break label$1;

   case 5:
    HEAP32[$1 + 12 >> 2] = 5;
    break label$1;

   default:
    break label$2;
   }
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 return HEAP32[$1 + 12 >> 2];
}

function unsigned_20char_20flatbuffers__Table__GetField_unsigned_20char__28unsigned_20short_2c_20unsigned_20char_29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP16[$3 + 10 >> 1] = $1;
 HEAP8[$3 + 9 | 0] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP16[$3 + 6 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$3 + 10 >> 1]);
 label$1: {
  if (HEAPU16[$3 + 6 >> 1]) {
   $0 = unsigned_20char_20flatbuffers__ReadScalar_unsigned_20char__28void_20const__29(HEAPU16[$3 + 6 >> 1] + $0 | 0);
   break label$1;
  }
  $0 = HEAPU8[$3 + 9 | 0];
 }
 __stack_pointer = $3 + 16 | 0;
 return $0 & 255;
}

function jswrap_graphics_getColorX($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 96 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 88 >> 2] = $0;
 HEAP8[$2 + 87 | 0] = $1;
 label$1: {
  if (!(graphicsGetFromVar($2 + 8 | 0, HEAP32[$2 + 88 >> 2]) & 1)) {
   HEAP32[$2 + 92 >> 2] = 0;
   break label$1;
  }
  if (HEAP8[$2 + 87 | 0] & 1) {
   $0 = HEAPU8[$2 + 25 | 0] | HEAPU8[$2 + 26 | 0] << 8 | (HEAPU8[$2 + 27 | 0] << 16 | HEAPU8[$2 + 28 | 0] << 24);
  } else {
   $0 = HEAPU8[$2 + 29 | 0] | HEAPU8[$2 + 30 | 0] << 8 | (HEAPU8[$2 + 31 | 0] << 16 | HEAPU8[$2 + 32 | 0] << 24);
  }
  HEAP32[$2 + 92 >> 2] = $0 & (1 << HEAPU8[$2 + 24 | 0]) - 1;
 }
 __stack_pointer = $2 + 96 | 0;
 return HEAP32[$2 + 92 >> 2];
}

function jsvStringIteratorAppendString($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer + -64 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 60 >> 2] = $0;
 HEAP32[$4 + 56 >> 2] = $1;
 HEAP32[$4 + 52 >> 2] = $2;
 HEAP32[$4 + 48 >> 2] = $3;
 jsvStringIteratorNew($4 + 8 | 0, HEAP32[$4 + 56 >> 2], HEAP32[$4 + 52 >> 2]);
 while (1) {
  $0 = 0;
  if (jsvStringIteratorHasChar_2($4 + 8 | 0) & 1) {
   $0 = HEAP32[$4 + 48 >> 2] > 0;
  }
  if ($0) {
   jsvStringIteratorAppend(HEAP32[$4 + 60 >> 2], jsvStringIteratorGetCharAndNext($4 + 8 | 0) << 24 >> 24);
   HEAP32[$4 + 48 >> 2] = HEAP32[$4 + 48 >> 2] - 1;
   continue;
  }
  break;
 }
 jsvStringIteratorFree_2($4 + 8 | 0);
 __stack_pointer = $4 - -64 | 0;
}

function jsvObjectSetChild($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 label$1: {
  if (!(jsvHasChildren(HEAP32[$3 + 24 >> 2]) & 1)) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = jsvFindOrAddChildFromString(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2]);
  if (!HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  jsvSetValueOfName(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 16 >> 2]);
  jsvUnLock(HEAP32[$3 + 12 >> 2]);
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 16 >> 2];
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function jspSetException($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvFindOrAddChildFromString(HEAP32[86751], 112710);
 if (HEAP32[$1 + 8 >> 2]) {
  jsvSetValueOfName(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]);
  jsvUnLock(HEAP32[$1 + 8 >> 2]);
 }
 HEAP32[86758] = HEAP32[86758] | 32;
 if (HEAP32[44743]) {
  HEAP32[$1 + 4 >> 2] = jsvObjectGetChild(HEAP32[86751], 120557, 28);
  if (HEAP32[$1 + 4 >> 2]) {
   jsvAppendPrintf(HEAP32[$1 + 4 >> 2], 144079, 0);
   jspAppendStackTrace(HEAP32[$1 + 4 >> 2]);
   jsvUnLock(HEAP32[$1 + 4 >> 2]);
   HEAP32[86758] = HEAP32[86758] | 128;
  }
 }
 __stack_pointer = $1 + 16 | 0;
}

function std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[std____2____compressed_pair_TfLitePoolParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2];
 HEAP32[std____2____compressed_pair_TfLitePoolParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2] = 0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___release_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[std____2____compressed_pair_TfLiteConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2];
 HEAP32[std____2____compressed_pair_TfLiteConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) >> 2] = 0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jsvObjectSetChildVar($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 label$1: {
  if (!(jsvHasChildren(HEAP32[$3 + 24 >> 2]) & 1)) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 12 >> 2] = jsvFindChildFromVar(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], 1);
  if (!HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  jsvSetValueOfName(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 16 >> 2]);
  jsvUnLock(HEAP32[$3 + 12 >> 2]);
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 16 >> 2];
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function bool_20std____2__operator___TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20const__2c_20std__nullptr_t_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator_20bool_28_29_20const(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function tflite__SimpleMemoryAllocator__SimpleMemoryAllocator_28tflite__SimpleMemoryAllocator_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 HEAP32[$1 >> 2] = 172104;
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$3 + 4 >> 2];
 $2 = HEAP32[$3 + 8 >> 2];
 $4 = $0;
 $0 = $1;
 HEAP32[$0 + 4 >> 2] = $4;
 HEAP32[$0 + 8 >> 2] = $2;
 $0 = HEAP32[$3 + 24 >> 2];
 $2 = HEAP32[$3 + 20 >> 2];
 HEAP32[$1 + 20 >> 2] = $2;
 HEAP32[$1 + 24 >> 2] = $0;
 $2 = HEAP32[$3 + 16 >> 2];
 $0 = HEAP32[$3 + 12 >> 2];
 $4 = $0;
 $0 = $1;
 HEAP32[$0 + 12 >> 2] = $4;
 HEAP32[$0 + 16 >> 2] = $2;
 return $0;
}

function jsvIteratorFree($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  label$2: {
   switch (HEAP32[HEAP32[$1 + 12 >> 2] >> 2] - 1 | 0) {
   case 3:
    jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2]);
    jsvObjectIteratorFree_1(HEAP32[$1 + 12 >> 2] + 4 | 0);
    break label$1;

   case 1:
    jsvObjectIteratorFree_1(HEAP32[$1 + 12 >> 2] + 4 | 0);
    break label$1;

   case 0:
    jsvStringIteratorFree_2(HEAP32[$1 + 12 >> 2] + 4 | 0);
    break label$1;

   case 2:
    break label$2;

   default:
    break label$1;
   }
  }
  jsvArrayBufferIteratorFree(HEAP32[$1 + 12 >> 2] + 4 | 0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function tflite___28anonymous_20namespace_29__CalculateActivationRangeQuantizedImpl_28TfLiteFusedActivation_2c_20int_2c_20int_2c_20TfLiteTensor__2c_20int__2c_20int__29__$_0__operator_28_29_28float_29_20const($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 $1 = float_20tflite__TfLiteRound_float__28float_29(Math_fround(HEAPF32[$2 + 8 >> 2] / HEAPF32[$0 >> 2]));
 label$1: {
  if (Math_fround(Math_abs($1)) < Math_fround(2147483648)) {
   $0 = ~~$1;
   break label$1;
  }
  $0 = -2147483648;
 }
 __stack_pointer = $2 + 16 | 0;
 return $3 + $0 | 0;
}

function st_flush_bit_buffer($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (HEAPU8[HEAP32[$2 + 8 >> 2] + 14 | 0] == 128) {
   HEAP32[$2 + 12 >> 2] = 9;
   break label$1;
  }
  if (can_take_byte(HEAP32[$2 + 4 >> 2])) {
   $3 = HEAPU8[HEAP32[$2 + 8 >> 2] + 13 | 0];
   $4 = HEAP32[HEAP32[$2 + 4 >> 2] >> 2];
   $0 = HEAP32[HEAP32[$2 + 4 >> 2] + 8 >> 2];
   $1 = HEAP32[$0 >> 2];
   HEAP32[$0 >> 2] = $1 + 1;
   HEAP8[$1 + $4 | 0] = $3;
   HEAP32[$2 + 12 >> 2] = 9;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 8;
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function signed_20char_20flatbuffers__Table__GetField_signed_20char__28unsigned_20short_2c_20signed_20char_29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP16[$3 + 10 >> 1] = $1;
 HEAP8[$3 + 9 | 0] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP16[$3 + 6 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$3 + 10 >> 1]);
 label$1: {
  if (HEAPU16[$3 + 6 >> 1]) {
   $0 = signed_20char_20flatbuffers__ReadScalar_signed_20char__28void_20const__29(HEAPU16[$3 + 6 >> 1] + $0 | 0);
   break label$1;
  }
  $0 = HEAPU8[$3 + 9 | 0];
 }
 __stack_pointer = $3 + 16 | 0;
 return $0 << 24 >> 24;
}

function jsvMathsOpSkipNames($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP32[$3 + 16 >> 2] = jsvSkipName(HEAP32[$3 + 28 >> 2]);
 HEAP32[$3 + 12 >> 2] = jsvSkipName(HEAP32[$3 + 24 >> 2]);
 HEAP32[$3 + 8 >> 2] = jsvGetValueOf(HEAP32[$3 + 16 >> 2]);
 HEAP32[$3 + 4 >> 2] = jsvGetValueOf(HEAP32[$3 + 12 >> 2]);
 jsvUnLock2(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 12 >> 2]);
 HEAP32[$3 >> 2] = jsvMathsOp(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], HEAP32[$3 + 20 >> 2]);
 jsvUnLock2(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 >> 2];
}

function jsvNewFromLongInteger($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  label$2: {
   $0 = HEAP32[$2 + 4 >> 2];
   if (($0 | 0) < 0 & HEAPU32[$2 >> 2] < 2147483648 | ($0 | 0) < -1) {
    break label$2;
   }
   $0 = HEAP32[$2 + 4 >> 2];
   if (HEAPU32[$2 >> 2] > 2147483647 & ($0 | 0) >= 0 | ($0 | 0) > 0) {
    break label$2;
   }
   HEAP32[$2 + 12 >> 2] = jsvNewFromInteger(HEAP32[$2 >> 2]);
   break label$1;
  }
  $0 = HEAP32[$2 >> 2];
  HEAP32[$2 + 12 >> 2] = jsvNewFromFloat(+($0 >>> 0) + +HEAP32[$2 + 4 >> 2] * 4294967296);
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SelectUsingMask_int_2c_200__28int_2c_20gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 16 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromRaw_28int_29(int_20gemmlowp__SelectUsingMask_int__28int_2c_20int_2c_20int_29(HEAP32[$3 + 4 >> 2], HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($3 + 16 | 0) >> 2], HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($3 + 8 | 0) >> 2]));
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 24 >> 2];
}

function bool_20std____2__operator___TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20const__2c_20std__nullptr_t_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator_20bool_28_29_20const(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function isIDString($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!(isAlpha(HEAP8[HEAP32[$1 + 8 >> 2]]) & 1)) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  while (1) {
   if (HEAPU8[HEAP32[$1 + 8 >> 2]]) {
    label$5: {
     if (isAlpha(HEAP8[HEAP32[$1 + 8 >> 2]]) & 1) {
      break label$5;
     }
     if (isNumeric(HEAP8[HEAP32[$1 + 8 >> 2]]) & 1) {
      break label$5;
     }
     HEAP8[$1 + 15 | 0] = 0;
     break label$1;
    }
    HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP8[$1 + 15 | 0] = 1;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}

function unsigned_20int_20flatbuffers__Table__GetField_unsigned_20int__28unsigned_20short_2c_20unsigned_20int_29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP16[$3 + 10 >> 1] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP16[$3 + 2 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$3 + 10 >> 1]);
 label$1: {
  if (HEAPU16[$3 + 2 >> 1]) {
   $0 = unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAPU16[$3 + 2 >> 1] + $0 | 0);
   break label$1;
  }
  $0 = HEAP32[$3 + 4 >> 2];
 }
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function jsvNewArray($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = jsvNewEmptyArray();
 label$1: {
  if (!HEAP32[$2 + 16 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 + 12 >> 2] < HEAP32[$2 + 20 >> 2]) {
    jsvArrayPush(HEAP32[$2 + 16 >> 2], HEAP32[HEAP32[$2 + 24 >> 2] + (HEAP32[$2 + 12 >> 2] << 2) >> 2]);
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function graphicsSetVarInitial($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = jsvFindOrAddChildFromString(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 111849);
 HEAP32[$1 + 4 >> 2] = jsvSkipName(HEAP32[$1 + 8 >> 2]);
 if (!HEAP32[$1 + 4 >> 2]) {
  HEAP32[$1 + 4 >> 2] = jsvNewStringOfLength(44, 0);
  jsvSetValueOfName(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 4 >> 2]);
 }
 jsvUnLock(HEAP32[$1 + 8 >> 2]);
 jsvSetString(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 12 >> 2] + 4 | 0, 44);
 jsvUnLock(HEAP32[$1 + 4 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_onewire_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 HEAP8[$3 + 6 | 0] = onewire_getpin(HEAP32[$3 + 12 >> 2]);
 label$1: {
  if (!(jshIsPinValid(HEAPU8[$3 + 6 | 0]) & 1)) {
   break label$1;
  }
  jsvIterateCallback(HEAP32[$3 + 8 >> 2], 623, $3 + 6 | 0);
  if (HEAP8[$3 + 7 | 0] & 1) {
   jshPinSetValue(HEAPU8[$3 + 6 | 0], 1);
   jshPinSetState(HEAPU8[$3 + 6 | 0], 1);
   break label$1;
  }
  jshPinSetState(HEAPU8[$3 + 6 | 0], 4);
  jshPinSetValue(HEAPU8[$3 + 6 | 0], 1);
 }
 __stack_pointer = $3 + 16 | 0;
}

function jspeAddNamedFunctionParameter($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 96 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 92 >> 2] = $0;
 HEAP32[$2 + 88 >> 2] = $1;
 if (!HEAP32[$2 + 92 >> 2]) {
  HEAP32[$2 + 92 >> 2] = jsvNewWithFlags(7);
 }
 if (HEAP32[$2 + 88 >> 2]) {
  HEAP8[$2 + 16 | 0] = 255;
  HEAP32[$2 + 12 >> 2] = jsvGetString(HEAP32[$2 + 88 >> 2], $2 + 17 | 0, 64);
  HEAP8[(HEAP32[$2 + 12 >> 2] + $2 | 0) + 17 | 0] = 0;
  HEAP32[$2 + 8 >> 2] = jsvAddNamedChild(HEAP32[$2 + 92 >> 2], 0, $2 + 16 | 0);
  HEAP32[$2 + 8 >> 2] = jsvMakeFunctionParameter(HEAP32[$2 + 8 >> 2]);
  jsvUnLock(HEAP32[$2 + 8 >> 2]);
 }
 __stack_pointer = $2 + 96 | 0;
 return HEAP32[$2 + 92 >> 2];
}

function vfGetPolyPtr($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 HEAP8[$2 + 27 | 0] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 label$1: {
  if (HEAPU8[$2 + 27 | 0] >= 201) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[HEAP32[$2 + 20 >> 2] >> 2] = HEAPU8[HEAPU8[$2 + 27 | 0] + 159920 | 0];
  HEAP32[$2 + 16 >> 2] = 160128;
  HEAP8[$2 + 15 | 0] = 0;
  while (1) {
   if (HEAPU8[$2 + 15 | 0] < HEAPU8[$2 + 27 | 0]) {
    HEAP32[$2 + 16 >> 2] = HEAPU8[HEAPU8[$2 + 15 | 0] + 159920 | 0] + HEAP32[$2 + 16 >> 2];
    HEAP8[$2 + 15 | 0] = HEAPU8[$2 + 15 | 0] + 1;
    continue;
   }
   break;
  }
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 16 >> 2];
 }
 return HEAP32[$2 + 28 >> 2];
}

function heatshrink_decoder_finish($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP32[$1 + 12 >> 2] = -1;
   break label$1;
  }
  label$3: {
   switch (HEAPU8[HEAP32[$1 + 8 >> 2] + 10 | 0]) {
   case 0:
    HEAP32[$1 + 12 >> 2] = !!HEAPU16[HEAP32[$1 + 8 >> 2] >> 1];
    break label$1;

   case 2:
   case 3:
   case 4:
   case 5:
    HEAP32[$1 + 12 >> 2] = !!HEAPU16[HEAP32[$1 + 8 >> 2] >> 1];
    break label$1;

   case 1:
    HEAP32[$1 + 12 >> 2] = !!HEAPU16[HEAP32[$1 + 8 >> 2] >> 1];
    break label$1;

   default:
    break label$3;
   }
  }
  HEAP32[$1 + 12 >> 2] = 1;
 }
 return HEAP32[$1 + 12 >> 2];
}

function lcdMemLCD_getPixel($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP32[$3 + 16 >> 2] = (Math_imul(HEAP32[$3 + 24 >> 2], 3) + 16 | 0) + (Math_imul(HEAP32[$3 + 20 >> 2], 68) << 3);
 HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 16 >> 2] & 7;
 $0 = HEAP32[$3 + 16 >> 2] >> 3;
 HEAP16[$3 + 10 >> 1] = HEAPU8[$0 + 361504 | 0] | HEAPU8[$0 + 361505 | 0] << 8;
 HEAP32[$3 + 4 >> 2] = HEAPU16[$3 + 10 >> 1] >> HEAP32[$3 + 12 >> 2] & 7;
 return (HEAP32[$3 + 4 >> 2] & 1 ? 63488 : 0) | (HEAP32[$3 + 4 >> 2] & 2 ? 2016 : 0) | (HEAP32[$3 + 4 >> 2] & 4 ? 31 : 0);
}

function jsiChangeToHistory($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 HEAP32[$1 + 8 >> 2] = jsiGetHistoryLine(HEAP8[$1 + 15 | 0] & 1);
 label$1: {
  if (HEAP32[$1 + 8 >> 2]) {
   jsiReplaceInputLine(HEAP32[$1 + 8 >> 2]);
   jsvUnLock(HEAP32[$1 + 8 >> 2]);
   HEAP8[347085] = 1;
   break label$1;
  }
  if (!(HEAP8[$1 + 15 | 0] & 1)) {
   if (jsiShowInputLine() & 1) {
    jsiMoveCursorChar(HEAP32[86768], HEAP32[86770], 0);
    jsiConsoleEraseAfterCursor();
   }
   jsiInputLineCursorMoved();
   jsvUnLock(HEAP32[86768]);
   HEAP32[86768] = jsvNewFromEmptyString_5();
   HEAP32[86770] = 0;
  }
 }
 __stack_pointer = $1 + 16 | 0;
}

function tflite__micro__GetTensorShape_28TfLiteEvalTensor_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 label$1: {
  if (!(HEAP32[HEAP32[$2 + 24 >> 2] + 4 >> 2] ? HEAP32[$2 + 24 >> 2] : 0)) {
   tflite__RuntimeShape__RuntimeShape_28_29($0);
   break label$1;
  }
  HEAP32[$2 + 20 >> 2] = HEAP32[HEAP32[$2 + 24 >> 2] + 4 >> 2];
  HEAP32[$2 + 16 >> 2] = HEAP32[HEAP32[$2 + 20 >> 2] >> 2];
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 20 >> 2] + 4;
  tflite__RuntimeShape__RuntimeShape_28int_2c_20int_20const__29($0, HEAP32[$2 + 16 >> 2], HEAP32[$2 + 12 >> 2]);
 }
 __stack_pointer = $2 + 32 | 0;
}

function signed_20char_20const__20std____2__min_signed_20char_2c_20std____2____less_signed_20char_2c_20signed_20char___28signed_20char_20const__2c_20signed_20char_20const__2c_20std____2____less_signed_20char_2c_20signed_20char__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 >> 2] = $1;
 label$1: {
  if (std____2____less_signed_20char_2c_20signed_20char___operator_28_29_28signed_20char_20const__2c_20signed_20char_20const__29_20const($2 + 8 | 0, HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2]) & 1) {
   $0 = HEAP32[$2 >> 2];
   break label$1;
  }
  $0 = HEAP32[$2 + 4 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function signed_20char_20const__20std____2__max_signed_20char_2c_20std____2____less_signed_20char_2c_20signed_20char___28signed_20char_20const__2c_20signed_20char_20const__2c_20std____2____less_signed_20char_2c_20signed_20char__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 >> 2] = $1;
 label$1: {
  if (std____2____less_signed_20char_2c_20signed_20char___operator_28_29_28signed_20char_20const__2c_20signed_20char_20const__29_20const($2 + 8 | 0, HEAP32[$2 + 4 >> 2], HEAP32[$2 >> 2]) & 1) {
   $0 = HEAP32[$2 >> 2];
   break label$1;
  }
  $0 = HEAP32[$2 + 4 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function void_20const__20flatbuffers__Table__GetPointer_void_20const___28unsigned_20short_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP16[$2 + 8 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$2 + 10 >> 1]);
 HEAP32[$2 + 4 >> 2] = HEAPU16[$2 + 8 >> 1] + $0;
 label$1: {
  if (HEAPU16[$2 + 8 >> 1]) {
   $0 = HEAP32[$2 + 4 >> 2] + unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 4 >> 2]) | 0;
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function st_backref_count_lsb($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP8[$1 + 7 | 0] = 6;
 $2 = HEAP32[$1 + 8 >> 2];
 if (HEAPU8[$1 + 7 | 0] < 8) {
  $0 = HEAPU8[$1 + 7 | 0];
 } else {
  $0 = 8;
 }
 HEAP16[$1 + 4 >> 1] = get_bits($2, $0);
 label$3: {
  if (HEAPU16[$1 + 4 >> 1] == 65535) {
   HEAP32[$1 + 12 >> 2] = 5;
   break label$3;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP16[$0 + 4 >> 1] = HEAPU16[$1 + 4 >> 1] | HEAPU16[$0 + 4 >> 1];
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP16[$0 + 4 >> 1] = HEAPU16[$0 + 4 >> 1] + 1;
  HEAP32[$1 + 12 >> 2] = 6;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvNewNativeFunction($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP16[$2 + 6 >> 1] = $1;
 HEAP32[$2 >> 2] = jsvNewWithFlags(8);
 label$1: {
  if (!HEAP32[$2 >> 2]) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  $0 = HEAP32[$2 >> 2];
  $1 = HEAP32[$2 + 8 >> 2];
  HEAP8[$0 | 0] = $1;
  HEAP8[$0 + 1 | 0] = $1 >>> 8;
  HEAP8[$0 + 2 | 0] = $1 >>> 16;
  HEAP8[$0 + 3 | 0] = $1 >>> 24;
  $0 = HEAP32[$2 >> 2];
  $1 = HEAPU16[$2 + 6 >> 1];
  HEAP8[$0 + 4 | 0] = $1;
  HEAP8[$0 + 5 | 0] = $1 >>> 8;
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jsiExecuteEventCallbackName($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP8[$4 + 15 | 0] = 0;
 if (jsvHasChildren(HEAP32[$4 + 28 >> 2]) & 1) {
  HEAP32[$4 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2]);
  if (HEAP32[$4 + 8 >> 2]) {
   jsiExecuteEventCallback(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
   HEAP8[$4 + 15 | 0] = 1;
  }
  jsvUnLock(HEAP32[$4 + 8 >> 2]);
 }
 __stack_pointer = $4 + 32 | 0;
 return HEAP8[$4 + 15 | 0] & 1;
}

function jsvIsInt($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
  $0 = 1;
  label$3: {
   if (HEAP8[$1 + 7 | 0] == 10) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 13) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 15) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 16) {
    break label$3;
   }
   $0 = HEAP8[$1 + 7 | 0] == 17;
  }
  HEAP8[$1 + 15 | 0] = $0;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function bool_20std____2__operator___TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28std____2__unique_ptr_TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20const__2c_20std__nullptr_t_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = std____2__unique_ptr_TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator_20bool_28_29_20const(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function bool_20std____2__operator___TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20const__2c_20std__nullptr_t_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator_20bool_28_29_20const(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function espruino_snprintf_va($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 >> 2] = HEAP32[$4 + 28 >> 2];
 HEAP32[$4 + 4 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 24 >> 2];
 vcbprintf(8, $4, HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
 label$1: {
  if (HEAPU32[$4 + 4 >> 2] < HEAPU32[$4 + 8 >> 2]) {
   HEAP8[HEAP32[$4 >> 2] + HEAP32[$4 + 4 >> 2] | 0] = 0;
   break label$1;
  }
  HEAP8[HEAP32[$4 >> 2] + (HEAP32[$4 + 8 >> 2] - 1 | 0) | 0] = 0;
 }
 __stack_pointer = $4 + 32 | 0;
 return HEAP32[$4 + 4 >> 2];
}

function tflite__MatchingDim_28tflite__RuntimeShape_20const__2c_20int_2c_20tflite__RuntimeShape_20const__2c_20int_29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 label$1: {
  if ((tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2]) | 0) != (tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]) | 0)) {
   break label$1;
  }
 }
 $0 = tflite__RuntimeShape__Dims_28int_29_20const(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2]);
 __stack_pointer = $4 + 16 | 0;
 return $0;
}

function jshFlashErasePage($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 4144 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 4140 >> 2] = $0;
 if (jshFlashGetPage(HEAP32[$1 + 4140 >> 2], $1 + 4136 | 0, $1 + 4132 | 0) & 1) {
  memset($1 + 32 | 0, 255, 4096);
  HEAP32[$1 + 28 >> 2] = 178851;
  $0 = HEAP32[$1 + 28 >> 2];
  HEAP8[$1 + 24 | 0] = 105;
  HEAP8[$1 + 25 | 0] = 105;
  HEAP8[$1 + 26 | 0] = 105;
  HEAP8[$1 + 27 | 0] = 0;
  $2 = HEAP32[$1 + 4136 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 4132 >> 2];
  HEAP32[$1 + 4 >> 2] = $1 + 32;
  HEAP32[$1 >> 2] = $2 + -134217728;
  emscripten_asm_const_int($0 | 0, $1 + 24 | 0, $1 | 0) | 0;
 }
 __stack_pointer = $1 + 4144 | 0;
}

function jslReservedWordAsString($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 12 >> 2] - 138;
 while (1) {
  $0 = 0;
  $0 = HEAP32[$1 + 4 >> 2] > 0 ? HEAPU32[$1 + 8 >> 2] < 312 : $0;
  if ($0) {
   while (1) {
    $0 = 0;
    $0 = HEAP8[HEAP32[$1 + 8 >> 2] + 146992 | 0] ? HEAPU32[$1 + 8 >> 2] < 312 : $0;
    if ($0) {
     HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
     continue;
    }
    break;
   }
   HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
   HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] - 1;
   continue;
  }
  break;
 }
 return HEAP32[$1 + 8 >> 2] + 146992 | 0;
}

function i2c_get_address($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP8[HEAP32[$2 + 4 >> 2]] = 1;
 label$1: {
  if (jsvIsObject(HEAP32[$2 + 8 >> 2]) & 1) {
   HEAP32[$2 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 8 >> 2], 116870);
   if (HEAP32[$2 >> 2]) {
    $0 = jsvGetBoolAndUnLock(HEAP32[$2 >> 2]);
    HEAP8[HEAP32[$2 + 4 >> 2]] = $0 & 1;
   }
   HEAP32[$2 + 12 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 8 >> 2], 115130);
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jsvGetInteger(HEAP32[$2 + 8 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function tflite__SimpleMemoryAllocator__SimpleMemoryAllocator_28tflite__ErrorReporter__2c_20unsigned_20char__2c_20unsigned_20long_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 tflite__SimpleMemoryAllocator__SimpleMemoryAllocator_28tflite__ErrorReporter__2c_20unsigned_20char__2c_20unsigned_20char__29($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 + 4 >> 2] + HEAP32[$4 >> 2] | 0);
 __stack_pointer = $4 + 16 | 0;
 return $0 | 0;
}

function jslGetTokenValueAsVar() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 label$1: {
  if (HEAP32[HEAP32[44743] + 76 >> 2]) {
   HEAP32[$0 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[44743] + 76 >> 2]);
   break label$1;
  }
  if (!(HEAP16[HEAP32[44743] + 2 >> 1] < 163 | HEAP16[HEAP32[44743] + 2 >> 1] > 198)) {
   HEAP32[$0 + 12 >> 2] = jsvNewFromString(jslReservedWordAsString(HEAP16[HEAP32[44743] + 2 >> 1]));
   break label$1;
  }
  HEAP8[HEAPU8[HEAP32[44743] + 80 | 0] + (HEAP32[44743] + 12 | 0) | 0] = 0;
  HEAP32[$0 + 12 >> 2] = jsvNewFromString(HEAP32[44743] + 12 | 0);
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function jswrap_pin_writeAtTime($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP8[$3 + 27 | 0] = $1;
 HEAPF64[$3 + 16 >> 3] = $2;
 HEAP8[$3 + 15 | 0] = jshGetPinFromVar(HEAP32[$3 + 28 >> 2]);
 $0 = jshGetTimeFromMilliseconds(HEAPF64[$3 + 16 >> 3] * 1e3);
 $4 = i64toi32_i32$HIGH_BITS;
 $1 = jshGetSystemTime();
 HEAP32[$3 >> 2] = $0 - $1;
 HEAP32[$3 + 4 >> 2] = $4 - (i64toi32_i32$HIGH_BITS + ($0 >>> 0 < $1 >>> 0) | 0);
 jstPinOutputAtTime(HEAP32[$3 >> 2], HEAP32[$3 + 4 >> 2], 0, $3 + 15 | 0, 1, HEAP8[$3 + 27 | 0] & 1);
 __stack_pointer = $3 + 32 | 0;
}

function jsvMoreFreeVariablesThan($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  HEAP16[$1 + 6 >> 1] = HEAPU16[89490];
  while (1) {
   if (HEAPU16[$1 + 6 >> 1]) {
    $0 = HEAP32[$1 + 8 >> 2];
    HEAP32[$1 + 8 >> 2] = $0 - 1;
    if ($0) {
     HEAP16[$1 + 6 >> 1] = jsvGetNextSibling(jsvGetAddressOf(HEAPU16[$1 + 6 >> 1]));
     continue;
    } else {
     HEAP8[$1 + 15 | 0] = 1;
     break label$1;
    }
   }
   break;
  }
  HEAP8[$1 + 15 | 0] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}

function jshFlashWrite($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 if (HEAPU32[$3 + 24 >> 2] >= 134217728) {
  HEAP32[$3 + 16 >> 2] = 178909;
  $0 = HEAP32[$3 + 16 >> 2];
  HEAP8[$3 + 12 | 0] = 105;
  HEAP8[$3 + 13 | 0] = 105;
  HEAP8[$3 + 14 | 0] = 105;
  HEAP8[$3 + 15 | 0] = 0;
  $1 = HEAP32[$3 + 24 >> 2];
  $2 = HEAP32[$3 + 28 >> 2];
  HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 20 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  HEAP32[$3 >> 2] = $1 + -134217728;
  emscripten_asm_const_int($0 | 0, $3 + 12 | 0, $3 | 0) | 0;
 }
 __stack_pointer = $3 + 32 | 0;
}

function bool_20std____2__operator___TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20const__2c_20std__nullptr_t_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator_20bool_28_29_20const(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function bool_20std____2__operator___TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__28std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__20const__2c_20std__nullptr_t_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator_20bool_28_29_20const(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function jsvArrayBufferIteratorGetFloatValue($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 20 >> 2] = $0;
 label$1: {
  if (!HEAPU8[HEAP32[$1 + 20 >> 2] + 36 | 0]) {
   HEAPF64[$1 + 24 >> 3] = 0;
   break label$1;
  }
  jsvArrayBufferIteratorGetValueData(HEAP32[$1 + 20 >> 2], $1 + 12 | 0);
  if (HEAPU8[HEAP32[$1 + 20 >> 2] + 36 | 0] & 32) {
   HEAPF64[$1 + 24 >> 3] = jsvArrayBufferIteratorDataToFloat(HEAP32[$1 + 20 >> 2], $1 + 12 | 0);
   break label$1;
  }
  HEAPF64[$1 + 24 >> 3] = jsvArrayBufferIteratorDataToInt(HEAP32[$1 + 20 >> 2], $1 + 12 | 0) | 0;
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAPF64[$1 + 24 >> 3];
}

function int_sqrt32($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP16[$1 + 26 >> 1] = 0;
 HEAP16[$1 + 24 >> 1] = 32768;
 HEAP32[$1 + 20 >> 2] = 0;
 while (1) {
  if (HEAP32[$1 + 20 >> 2] < 16) {
   HEAP16[$1 + 18 >> 1] = HEAPU16[$1 + 26 >> 1] | HEAPU16[$1 + 24 >> 1];
   HEAP32[$1 + 12 >> 2] = Math_imul(HEAPU16[$1 + 18 >> 1], HEAPU16[$1 + 18 >> 1]);
   if (HEAPU32[$1 + 28 >> 2] >= HEAPU32[$1 + 12 >> 2]) {
    HEAP16[$1 + 26 >> 1] = HEAPU16[$1 + 18 >> 1];
   }
   HEAP16[$1 + 24 >> 1] = HEAPU16[$1 + 24 >> 1] >>> 1;
   HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 20 >> 2] + 1;
   continue;
  }
  break;
 }
 return HEAPU16[$1 + 26 >> 1];
}

function jsvHasSingleChild($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
  $0 = 1;
  if (HEAP8[$1 + 7 | 0] != 4) {
   $0 = 0;
   label$4: {
    if (HEAP8[$1 + 7 | 0] < 14) {
     break label$4;
    }
    $0 = 0;
    if (HEAP8[$1 + 7 | 0] > 27) {
     break label$4;
    }
    $2 = HEAP8[$1 + 7 | 0] >= 16 ? HEAP8[$1 + 7 | 0] <= 22 : $2;
    $0 = $2 ^ -1;
   }
  }
  HEAP8[$1 + 15 | 0] = $0 & 1;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function tflite__MicroAllocator__Create_28tflite__SimpleMemoryAllocator__2c_20tflite__ErrorReporter__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 label$1: {
  if (!HEAP32[$2 + 12 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if (!HEAP32[$2 + 8 >> 2]) {
   break label$2;
  }
 }
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, 24, 4);
 $0 = HEAP32[$2 + 4 >> 2];
 FUNCTION_TABLE[655]($0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]) | 0;
 HEAP32[$2 >> 2] = $0;
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 >> 2];
}

function jsserialCheckForCharacter($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAPU8[HEAP32[$1 + 12 >> 2] + 88 | 0] >= HEAPU8[HEAP32[$1 + 12 >> 2] + 89 | 0]) {
  HEAP32[$1 + 8 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 84 >> 2] >>> 1 & 255;
  if (HEAPU8[HEAP32[$1 + 12 >> 2] + 64 | 0] < 64) {
   $3 = HEAP32[$1 + 8 >> 2];
   $0 = HEAP32[$1 + 12 >> 2];
   $2 = HEAPU8[$0 + 64 | 0];
   HEAP8[$0 + 64 | 0] = $2 + 1;
   HEAP8[$0 + $2 | 0] = $3;
   jshHasEvents();
  }
  HEAP8[HEAP32[$1 + 12 >> 2] + 88 | 0] = 0;
  HEAP32[HEAP32[$1 + 12 >> 2] + 84 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
}

function jshPopIOEvent($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (HEAPU8[347148] == HEAPU8[347149]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  $2 = Math_imul(HEAPU8[347149], 5) + 347744 | 0;
  $3 = HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24);
  HEAP8[$0 | 0] = $3;
  HEAP8[$0 + 1 | 0] = $3 >>> 8;
  HEAP8[$0 + 2 | 0] = $3 >>> 16;
  HEAP8[$0 + 3 | 0] = $3 >>> 24;
  HEAP8[$0 + 4 | 0] = HEAPU8[$2 + 4 | 0];
  HEAP8[347149] = HEAPU8[347149] + 1;
  HEAP8[$1 + 15 | 0] = 1;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function jswrap_graphics_setFont12x20($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 if (HEAP32[$2 + 24 >> 2] <= 0) {
  HEAP32[$2 + 24 >> 2] = 1;
 }
 HEAP32[$2 + 20 >> 2] = jsvNewNativeString(166336, 4723);
 HEAP32[$2 + 16 >> 2] = jsvNewNativeString(171072, 224);
 HEAP32[$2 + 12 >> 2] = jswrap_graphics_setFontCustom(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 20 >> 2], 32, HEAP32[$2 + 16 >> 2], (HEAP32[$2 + 24 >> 2] << 8) + 20 | 0);
 jsvUnLock2(HEAP32[$2 + 20 >> 2], HEAP32[$2 + 16 >> 2]);
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jswrap_graphics_setFont6x15($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 if (HEAP32[$2 + 24 >> 2] <= 0) {
  HEAP32[$2 + 24 >> 2] = 1;
 }
 HEAP32[$2 + 20 >> 2] = jsvNewNativeString(164336, 1774);
 HEAP32[$2 + 16 >> 2] = jsvNewNativeString(166112, 223);
 HEAP32[$2 + 12 >> 2] = jswrap_graphics_setFontCustom(HEAP32[$2 + 28 >> 2], HEAP32[$2 + 20 >> 2], 32, HEAP32[$2 + 16 >> 2], (HEAP32[$2 + 24 >> 2] << 8) + 15 | 0);
 jsvUnLock2(HEAP32[$2 + 20 >> 2], HEAP32[$2 + 16 >> 2]);
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jsvAsName($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  if (!(jsvGetRefs(HEAP32[$1 + 8 >> 2]) & 65535)) {
   if (!(jsvIsName(HEAP32[$1 + 8 >> 2]) & 1)) {
    HEAP32[$1 + 12 >> 2] = jsvMakeIntoVariableName(jsvLockAgain(HEAP32[$1 + 8 >> 2]), 0);
    break label$1;
   }
   HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[$1 + 8 >> 2]);
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvMakeIntoVariableName(jsvCopy(HEAP32[$1 + 8 >> 2], 0), 0);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function gemmlowp__FixedPoint_int_2c_202_20__202__20gemmlowp__operator__int_2c_202_2c_202__28gemmlowp__FixedPoint_int_2c_202__2c_20gemmlowp__FixedPoint_int_2c_202__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = int_20gemmlowp__SaturatingRoundingDoublingHighMul_int__28int_2c_20int_29(HEAP32[gemmlowp__FixedPoint_int_2c_202___raw_28_29($2 + 16 | 0) >> 2], HEAP32[gemmlowp__FixedPoint_int_2c_202___raw_28_29($2 + 8 | 0) >> 2]);
 HEAP32[gemmlowp__FixedPoint_int_2c_204___raw_28_29($2 + 24 | 0) >> 2] = $0;
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 24 >> 2];
}

function gemmlowp__FixedPoint_int_2c_200_20__202__20gemmlowp__operator__int_2c_200_2c_202__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_202__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = int_20gemmlowp__SaturatingRoundingDoublingHighMul_int__28int_2c_20int_29(HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($2 + 16 | 0) >> 2], HEAP32[gemmlowp__FixedPoint_int_2c_202___raw_28_29($2 + 8 | 0) >> 2]);
 HEAP32[gemmlowp__FixedPoint_int_2c_202___raw_28_29($2 + 24 | 0) >> 2] = $0;
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 24 >> 2];
}

function gemmlowp__FixedPoint_int_2c_200_20__200__20gemmlowp__operator__int_2c_200_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = int_20gemmlowp__SaturatingRoundingDoublingHighMul_int__28int_2c_20int_29(HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($2 + 16 | 0) >> 2], HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($2 + 8 | 0) >> 2]);
 HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($2 + 24 | 0) >> 2] = $0;
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 24 >> 2];
}

function jswrap_graphics_drawCircleAA($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 96 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 88 >> 2] = $0;
 HEAP32[$4 + 84 >> 2] = $1;
 HEAP32[$4 + 80 >> 2] = $2;
 HEAP32[$4 + 76 >> 2] = $3;
 label$1: {
  if (!(graphicsGetFromVar($4, HEAP32[$4 + 88 >> 2]) & 1)) {
   HEAP32[$4 + 92 >> 2] = 0;
   break label$1;
  }
  graphicsDrawCircleAA($4, HEAP32[$4 + 84 >> 2], HEAP32[$4 + 80 >> 2], HEAP32[$4 + 76 >> 2]);
  graphicsSetVar($4);
  HEAP32[$4 + 92 >> 2] = jsvLockAgain(HEAP32[$4 + 88 >> 2]);
 }
 __stack_pointer = $4 + 96 | 0;
 return HEAP32[$4 + 92 >> 2];
}

function jswrap_array_shift($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAP32[$1 + 24 >> 2] = jsvNewFromInteger(1);
 HEAP32[$1 + 20 >> 2] = jsvNewEmptyArray();
 HEAP32[$1 + 16 >> 2] = jswrap_array_splice(HEAP32[$1 + 28 >> 2], 0, HEAP32[$1 + 24 >> 2], HEAP32[$1 + 20 >> 2]);
 jsvUnLock2(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 24 >> 2]);
 HEAP32[$1 + 12 >> 2] = 0;
 if (jsvIsArray(HEAP32[$1 + 16 >> 2]) & 1) {
  HEAP32[$1 + 12 >> 2] = jsvSkipNameAndUnLock(jsvArrayPop(HEAP32[$1 + 16 >> 2]));
 }
 jsvUnLock(HEAP32[$1 + 16 >> 2]);
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function heatshrink_decoder_reset($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 256;
 HEAP32[$1 + 4 >> 2] = 32;
 memset(HEAP32[$1 + 12 >> 2] + 13 | 0, 0, HEAP32[$1 + 8 >> 2] + HEAP32[$1 + 4 >> 2] | 0);
 HEAP8[HEAP32[$1 + 12 >> 2] + 10 | 0] = 0;
 HEAP16[HEAP32[$1 + 12 >> 2] >> 1] = 0;
 HEAP16[HEAP32[$1 + 12 >> 2] + 2 >> 1] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 12 | 0] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 11 | 0] = 0;
 HEAP16[HEAP32[$1 + 12 >> 2] + 4 >> 1] = 0;
 HEAP16[HEAP32[$1 + 12 >> 2] + 6 >> 1] = 0;
 HEAP16[HEAP32[$1 + 12 >> 2] + 8 >> 1] = 0;
 __stack_pointer = $1 + 16 | 0;
}

function wrapAround($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 32 | 0;
 HEAPF64[$2 + 16 >> 3] = $0;
 HEAPF64[$2 + 8 >> 3] = $1;
 label$1: {
  if (HEAPF64[$2 + 8 >> 3] < 0) {
   HEAPF64[$2 + 24 >> 3] = 0;
   break label$1;
  }
  HEAPF64[$2 + 16 >> 3] = HEAPF64[$2 + 16 >> 3] / HEAPF64[$2 + 8 >> 3];
  $0 = HEAPF64[$2 + 16 >> 3];
  $1 = HEAPF64[$2 + 16 >> 3];
  label$3: {
   if (Math_abs($1) < 2147483648) {
    $3 = ~~$1;
    break label$3;
   }
   $3 = -2147483648;
  }
  HEAPF64[$2 + 16 >> 3] = $0 - +($3 | 0);
  HEAPF64[$2 + 24 >> 3] = HEAPF64[$2 + 16 >> 3] * HEAPF64[$2 + 8 >> 3];
 }
 return +HEAPF64[$2 + 24 >> 3];
}

function jsiHandlePageUpDown($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 31 | 0] = $0;
 jsvGetLineAndCol(HEAP32[86768], HEAP32[86770], $1 + 20 | 0, $1 + 24 | 0);
 label$1: {
  if (!(HEAP8[$1 + 31 | 0] & 1)) {
   HEAP32[86770] = 0;
   break label$1;
  }
  HEAP32[86770] = jsvGetStringLength(HEAP32[86768]);
 }
 HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 24 >> 2];
 HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 20 >> 2];
 jsvGetLineAndCol(HEAP32[86768], HEAP32[86770], $1 + 12 | 0, $1 + 16 | 0);
 jsiMoveCursor(HEAP32[$1 + 24 >> 2], HEAP32[$1 + 20 >> 2], HEAP32[$1 + 16 >> 2], HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 32 | 0;
}

function st_yield_br_length($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (can_take_byte(HEAP32[$2 + 4 >> 2])) {
   if (push_outgoing_bits(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]) & 255) {
    HEAP32[$2 + 12 >> 2] = 6;
    break label$1;
   }
   $0 = HEAP32[$2 + 8 >> 2];
   HEAP16[$0 + 2 >> 1] = HEAPU16[HEAP32[$2 + 8 >> 2] + 4 >> 1] + HEAPU16[$0 + 2 >> 1];
   HEAP16[HEAP32[$2 + 8 >> 2] + 4 >> 1] = 0;
   HEAP32[$2 + 12 >> 2] = 2;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 6;
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jshPushIOCharEvent($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 label$1: {
  if (jshPushIOCharEventHandler(HEAPU8[$2 + 15 | 0], HEAP8[$2 + 14 | 0]) & 1) {
   break label$1;
  }
  if (jshPushIOCharEventAppend(HEAPU8[$2 + 15 | 0], HEAP8[$2 + 14 | 0]) & 1) {
   break label$1;
  }
  HEAP8[$2 + 8 | 0] = HEAPU8[$2 + 15 | 0];
  HEAP8[$2 + 8 | 0] = HEAPU8[$2 + 8 | 0] & 159;
  HEAP8[$2 + 9 | 0] = HEAPU8[$2 + 14 | 0];
  jshPushEvent($2 + 8 | 0);
  jshPushIOCharEventFlowControl(HEAPU8[$2 + 15 | 0]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function jsvArrayPush($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = jsvGetArrayLength(HEAP32[$2 + 24 >> 2]);
 HEAP32[$2 + 12 >> 2] = jsvMakeIntoVariableName(jsvNewFromInteger(HEAP32[$2 + 16 >> 2]), HEAP32[$2 + 20 >> 2]);
 label$1: {
  if (!HEAP32[$2 + 12 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  jsvAddName(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 12 >> 2]);
  jsvUnLock(HEAP32[$2 + 12 >> 2]);
  HEAP32[$2 + 28 >> 2] = jsvGetArrayLength(HEAP32[$2 + 24 >> 2]);
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jsvAddNamedChild($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = jsvNewNameFromString(HEAP32[$3 + 16 >> 2]);
 label$1: {
  if (!HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$3 + 20 >> 2]) {
   jsvSetFirstChild(HEAP32[$3 + 12 >> 2], jsvGetRef(jsvRef(HEAP32[$3 + 20 >> 2])) & 65535);
  }
  jsvAddName(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 12 >> 2]);
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2];
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function jshTransmitFlushDevice($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 jsiSetBusy(2, 1);
 HEAP8[$1 + 14 | 0] = 0;
 while (1) {
  HEAP8[$1 + 14 | 0] = 0;
  HEAP8[$1 + 13 | 0] = HEAPU8[347147];
  while (1) {
   if (HEAPU8[347146] != HEAPU8[$1 + 13 | 0]) {
    if (HEAPU8[$1 + 15 | 0] == (HEAPU8[(HEAPU8[$1 + 13 | 0] << 1) + 347232 | 0] & 31)) {
     HEAP8[$1 + 14 | 0] = 1;
    } else {
     HEAP8[$1 + 13 | 0] = HEAPU8[$1 + 13 | 0] + 1;
     continue;
    }
   }
   break;
  }
  if (HEAP8[$1 + 14 | 0] & 1) {
   continue;
  }
  break;
 }
 jsiSetBusy(2, 0);
 __stack_pointer = $1 + 16 | 0;
}

function float_20flatbuffers__Table__GetField_float__28unsigned_20short_2c_20float_29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP16[$3 + 10 >> 1] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP16[$3 + 2 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$3 + 10 >> 1]);
 label$1: {
  if (HEAPU16[$3 + 2 >> 1]) {
   $2 = float_20flatbuffers__ReadScalar_float__28void_20const__29(HEAPU16[$3 + 2 >> 1] + $0 | 0);
   break label$1;
  }
  $2 = HEAPF32[$3 + 4 >> 2];
 }
 __stack_pointer = $3 + 16 | 0;
 return $2;
}

function scalbn($0, $1) {
 label$1: {
  if (($1 | 0) >= 1024) {
   $0 = $0 * 898846567431158e293;
   if ($1 >>> 0 < 2047) {
    $1 = $1 - 1023 | 0;
    break label$1;
   }
   $0 = $0 * 898846567431158e293;
   $1 = (($1 | 0) < 3069 ? $1 : 3069) - 2046 | 0;
   break label$1;
  }
  if (($1 | 0) > -1023) {
   break label$1;
  }
  $0 = $0 * 2004168360008973e-307;
  if ($1 >>> 0 > 4294965304) {
   $1 = $1 + 969 | 0;
   break label$1;
  }
  $0 = $0 * 2004168360008973e-307;
  $1 = (($1 | 0) > -2960 ? $1 : -2960) + 1938 | 0;
 }
 wasm2js_scratch_store_i32(0, 0);
 wasm2js_scratch_store_i32(1, $1 + 1023 << 20);
 return $0 * +wasm2js_scratch_load_f64();
}

function heatshrink_encoder_reset($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 512;
 memset(HEAP32[$1 + 12 >> 2] + 15 | 0, 0, HEAP32[$1 + 8 >> 2]);
 HEAP16[HEAP32[$1 + 12 >> 2] >> 1] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 12 | 0] = 0;
 HEAP16[HEAP32[$1 + 12 >> 2] + 2 >> 1] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 11 | 0] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 14 | 0] = 128;
 HEAP8[HEAP32[$1 + 12 >> 2] + 13 | 0] = 0;
 HEAP16[HEAP32[$1 + 12 >> 2] + 4 >> 1] = 0;
 HEAP16[HEAP32[$1 + 12 >> 2] + 8 >> 1] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 10 | 0] = 0;
 __stack_pointer = $1 + 16 | 0;
}

function jstUtilTimerWaitEmpty() {
 var $0 = 0, $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = 2e6;
 while (1) {
  $0 = 0;
  label$2: {
   if (!(jstUtilTimerIsRunning() & 1)) {
    break label$2;
   }
   $0 = 0;
   if (jspIsInterrupted() & 1) {
    break label$2;
   }
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$1 + 12 >> 2] = $0 - 1;
   $0 = ($0 | 0) > 0;
  }
  if ($0) {
   continue;
  }
  break;
 }
 label$3: {
  if (jspIsInterrupted() & 1) {
   jsExceptionHere(4, 116305, 0);
   break label$3;
  }
  if (HEAP32[$1 + 12 >> 2] <= 0) {
   jsExceptionHere(4, 116280, 0);
  }
 }
 __stack_pointer = $1 + 16 | 0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__OperatorCode___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__OperatorCode___20const___28unsigned_20short_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = flatbuffers__Vector_flatbuffers__Offset_tflite__OperatorCode___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__OperatorCode___20const___28unsigned_20short_29(HEAP32[$2 + 12 >> 2], HEAPU16[$2 + 10 >> 1]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jsvExecuteSetter($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  if (!(jsvIsGetterOrSetter(HEAP32[$3 + 8 >> 2]) & 1)) {
   break label$1;
  }
  HEAP32[$3 >> 2] = jsvObjectGetChildIfExists(HEAP32[$3 + 8 >> 2], 113239);
  if (!(jsvIsFunction(HEAP32[$3 >> 2]) & 1)) {
   jsvUnLock(HEAP32[$3 >> 2]);
   break label$1;
  }
  if (!HEAP32[$3 >> 2]) {
   break label$1;
  }
  jsvUnLock2(jspExecuteFunction(HEAP32[$3 >> 2], HEAP32[$3 + 12 >> 2], 1, $3 + 4 | 0), HEAP32[$3 >> 2]);
 }
 __stack_pointer = $3 + 16 | 0;
}

function jswrap_arguments() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 8 >> 2] = 0;
 if (HEAP32[86753]) {
  HEAP32[$0 + 8 >> 2] = jsvLockAgain(HEAP32[86753]);
 }
 label$2: {
  if (!(jsvIsFunction(HEAP32[$0 + 8 >> 2]) & 1)) {
   jsExceptionHere(1, 117296, 0);
   HEAP32[$0 + 12 >> 2] = 0;
   break label$2;
  }
  HEAP32[$0 + 4 >> 2] = jsvGetFunctionArgumentLength(HEAP32[$0 + 8 >> 2]);
  jsvObjectSetChild(HEAP32[$0 + 8 >> 2], 114970, HEAP32[$0 + 4 >> 2]);
  jsvUnLock(HEAP32[$0 + 8 >> 2]);
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 4 >> 2];
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function jsvSetArrayItem($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 >> 2] = jsvGetArrayIndex(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
 label$1: {
  if (HEAP32[$3 >> 2]) {
   jsvSetValueOfName(HEAP32[$3 >> 2], HEAP32[$3 + 4 >> 2]);
   break label$1;
  }
  HEAP32[$3 >> 2] = jsvMakeIntoVariableName(jsvNewFromInteger(HEAP32[$3 + 8 >> 2]), HEAP32[$3 + 4 >> 2]);
  if (HEAP32[$3 >> 2]) {
   jsvAddName(HEAP32[$3 + 12 >> 2], HEAP32[$3 >> 2]);
  }
 }
 jsvUnLock(HEAP32[$3 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function jsvReplaceWithOrAddToRoot($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 label$1: {
  if (jsvGetRefs(HEAP32[$2 + 12 >> 2]) & 65535) {
   break label$1;
  }
  if (!(jsvIsName(HEAP32[$2 + 12 >> 2]) & 1)) {
   break label$1;
  }
  label$2: {
   if (jsvIsArrayBufferName(HEAP32[$2 + 12 >> 2]) & 1) {
    break label$2;
   }
   if (jsvIsNewChild(HEAP32[$2 + 12 >> 2]) & 1) {
    break label$2;
   }
   jsvAddName(HEAP32[86750], HEAP32[$2 + 12 >> 2]);
  }
 }
 jsvReplaceWith(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function tflite__internal__ContextHelper__RequestScratchBufferInArena_28TfLiteContext__2c_20unsigned_20long_2c_20int__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] + 12 >> 2];
 $0 = tflite__MicroAllocator__RequestScratchBufferInArena_28int_2c_20unsigned_20long_2c_20int__29(HEAP32[HEAP32[$3 >> 2] >> 2], HEAP32[HEAP32[$3 >> 2] + 16 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function jswrap_btoa_encode($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] & 63;
 label$1: {
  if (HEAP32[$1 + 8 >> 2] < 26) {
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2] + 65;
   break label$1;
  }
  if (HEAP32[$1 + 8 >> 2] < 52) {
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2] + 71;
   break label$1;
  }
  if (HEAP32[$1 + 8 >> 2] < 62) {
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2] - 4;
   break label$1;
  }
  if (HEAP32[$1 + 8 >> 2] == 62) {
   HEAP32[$1 + 12 >> 2] = 43;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 47;
 }
 return HEAP32[$1 + 12 >> 2];
}

function jspeArrowFunction($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jslGetNextToken();
 if ((HEAP32[86758] & 63) == 1) {
  HEAP32[$2 + 12 >> 2] = jspeAddNamedFunctionParameter(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 }
 HEAP8[$2 + 7 | 0] = HEAP16[HEAP32[44743] + 2 >> 1] != 123;
 HEAP8[$2 + 6 | 0] = jspeFunctionDefinitionInternal(HEAP32[$2 + 12 >> 2], HEAP8[$2 + 7 | 0] & 1) & 1;
 if (HEAP8[$2 + 6 | 0] & 1) {
  jsvObjectSetChild(HEAP32[$2 + 12 >> 2], 115428, HEAP32[86756]);
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function int_20flatbuffers__Table__GetField_int__28unsigned_20short_2c_20int_29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP16[$3 + 10 >> 1] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP16[$3 + 2 >> 1] = flatbuffers__Table__GetOptionalFieldOffset_28unsigned_20short_29_20const($0, HEAPU16[$3 + 10 >> 1]);
 label$1: {
  if (HEAPU16[$3 + 2 >> 1]) {
   $0 = int_20flatbuffers__ReadScalar_int__28void_20const__29(HEAPU16[$3 + 2 >> 1] + $0 | 0);
   break label$1;
  }
  $0 = HEAP32[$3 + 4 >> 2];
 }
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function _jswrap_error_constructor($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP32[$2 >> 2] = jspNewObject(0, HEAP32[$2 + 4 >> 2]);
 label$1: {
  if (!HEAP32[$2 >> 2]) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$2 + 8 >> 2]) {
   jsvObjectSetChildAndUnLock(HEAP32[$2 >> 2], 120346, jsvAsString(HEAP32[$2 + 8 >> 2]));
  }
  jsvObjectSetChildAndUnLock(HEAP32[$2 >> 2], 119989, jsvNewFromString(HEAP32[$2 + 4 >> 2]));
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jsfGetAddressOfNextPage($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 label$1: {
  if (!(jshFlashGetPage(HEAP32[$1 + 24 >> 2], $1 + 20 | 0, $1 + 16 | 0) & 1)) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsfGetBankEndAddress(HEAP32[$1 + 24 >> 2]);
  HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 20 >> 2] + HEAP32[$1 + 16 >> 2];
  if (HEAPU32[$1 + 24 >> 2] >= HEAPU32[$1 + 12 >> 2]) {
   HEAP32[$1 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 28 >> 2] = HEAP32[$1 + 24 >> 2];
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__AddSaturatingIf16Bit_int_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 24 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromRaw_28int_29(int_20gemmlowp__AddSaturatingIf16Bit_int__28int_2c_20int_29(HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($2 + 16 | 0) >> 2], HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($2 + 8 | 0) >> 2]));
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 24 >> 2];
}

function espruino_snprintf_cb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 while (1) {
  if (HEAPU8[HEAP32[$2 + 12 >> 2]]) {
   if (HEAPU32[HEAP32[$2 + 4 >> 2] + 4 >> 2] < HEAPU32[HEAP32[$2 + 4 >> 2] + 8 >> 2]) {
    HEAP8[HEAP32[HEAP32[$2 + 4 >> 2] >> 2] + HEAP32[HEAP32[$2 + 4 >> 2] + 4 >> 2] | 0] = HEAPU8[HEAP32[$2 + 12 >> 2]];
   }
   $0 = HEAP32[$2 + 4 >> 2];
   HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
}

function jswrap_storage_erase($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer + -64 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 60 >> 2] = $0;
 jsfNameFromVar($1 + 32 | 0, HEAP32[$1 + 60 >> 2]);
 HEAP32[$1 + 24 >> 2] = HEAP32[$1 + 56 >> 2];
 $2 = HEAP32[$1 + 52 >> 2];
 $0 = HEAP32[$1 + 48 >> 2];
 HEAP32[$1 + 16 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = $2;
 $0 = HEAP32[$1 + 44 >> 2];
 $2 = HEAP32[$1 + 40 >> 2];
 HEAP32[$1 + 8 >> 2] = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = HEAP32[$1 + 36 >> 2];
 $0 = HEAP32[$1 + 32 >> 2];
 HEAP32[$1 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = $2;
 jsfEraseFile($1);
 __stack_pointer = $1 - -64 | 0;
}

function jsvVarPrintf($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 56 >> 2] = $0;
 HEAP32[$2 + 52 >> 2] = jsvNewFromEmptyString_1();
 label$1: {
  if (!HEAP32[$2 + 52 >> 2]) {
   HEAP32[$2 + 60 >> 2] = 0;
   break label$1;
  }
  jsvStringIteratorNew($2 + 16 | 0, HEAP32[$2 + 52 >> 2], 0);
  jsvStringIteratorGotoEnd($2 + 16 | 0);
  HEAP32[$2 + 12 >> 2] = $1;
  vcbprintf(2, $2 + 16 | 0, HEAP32[$2 + 56 >> 2], HEAP32[$2 + 12 >> 2]);
  jsvStringIteratorFree_1($2 + 16 | 0);
  HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 52 >> 2];
 }
 __stack_pointer = $2 - -64 | 0;
 return HEAP32[$2 + 60 >> 2];
}

function graphicsSetVar($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = jsvSkipNameAndUnLock(jsvFindChildFromString(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 111849));
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   __memcpy(349460, HEAP32[$1 + 12 >> 2], 72);
   break label$1;
  }
  if (!HEAP32[$1 + 8 >> 2]) {
   break label$1;
  }
  jsvSetString(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2] + 4 | 0, 44);
  jsvUnLock(HEAP32[$1 + 8 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
}

function graphicsFillRect($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 $6 = __stack_pointer - 32 | 0;
 __stack_pointer = $6;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAP32[$6 + 20 >> 2] = $2;
 HEAP32[$6 + 16 >> 2] = $3;
 HEAP32[$6 + 12 >> 2] = $4;
 HEAP32[$6 + 8 >> 2] = $5;
 graphicsToDeviceCoordinates(HEAP32[$6 + 28 >> 2], $6 + 24 | 0, $6 + 20 | 0);
 graphicsToDeviceCoordinates(HEAP32[$6 + 28 >> 2], $6 + 16 | 0, $6 + 12 | 0);
 graphicsFillRectDevice(HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], HEAP32[$6 + 12 >> 2], HEAP32[$6 + 8 >> 2]);
 __stack_pointer = $6 + 32 | 0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph___20const___28unsigned_20short_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph___20const___28unsigned_20short_29(HEAP32[$2 + 12 >> 2], HEAPU16[$2 + 10 >> 1]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Operator___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__Operator___20const___28unsigned_20short_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = flatbuffers__Vector_flatbuffers__Offset_tflite__Operator___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__Operator___20const___28unsigned_20short_29(HEAP32[$2 + 12 >> 2], HEAPU16[$2 + 10 >> 1]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Metadata___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__Metadata___20const___28unsigned_20short_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = flatbuffers__Vector_flatbuffers__Offset_tflite__Metadata___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__Metadata___20const___28unsigned_20short_29(HEAP32[$2 + 12 >> 2], HEAPU16[$2 + 10 >> 1]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function tflite__SimpleMemoryAllocator__SimpleMemoryAllocator_28tflite__ErrorReporter__2c_20unsigned_20char__2c_20unsigned_20char__29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 HEAP32[$0 >> 2] = 172104;
 HEAP32[$0 + 4 >> 2] = HEAP32[$4 + 8 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$4 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$0 + 16 >> 2] = HEAP32[$4 + 4 >> 2];
 HEAP32[$0 + 20 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 8 >> 2];
 return $0;
}

function jswrap_date_setTime($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 20 >> 2] = $0;
 HEAPF64[$2 + 8 >> 3] = $1;
 label$1: {
  if (HEAPF64[$2 + 8 >> 3] >= 393840543168e5 ? 1 : HEAPF64[$2 + 8 >> 3] < -395083256832e5) {
   jsExceptionHere(1, 115717, 0);
   HEAPF64[$2 + 24 >> 3] = 0;
   break label$1;
  }
  if (HEAP32[$2 + 20 >> 2]) {
   jsvObjectSetChildAndUnLock(HEAP32[$2 + 20 >> 2], 115397, jsvNewFromFloat(HEAPF64[$2 + 8 >> 3]));
  }
  HEAPF64[$2 + 24 >> 3] = HEAPF64[$2 + 8 >> 3];
 }
 __stack_pointer = $2 + 32 | 0;
 return +HEAPF64[$2 + 24 >> 3];
}

function jsvArrayBufferIteratorIntToData($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 if (HEAP32[$4 + 4 >> 2] & 64) {
  if (HEAP32[$4 >> 2] < 0) {
   HEAP32[$4 >> 2] = 0;
  }
  if (HEAP32[$4 >> 2] > 255) {
   HEAP32[$4 >> 2] = 255;
  }
 }
 label$4: {
  if (HEAP32[$4 + 8 >> 2] == 8) {
   $0 = HEAP32[$4 >> 2];
   $2 = $0 >> 31;
   $1 = $0;
   $0 = HEAP32[$4 + 12 >> 2];
   HEAP32[$0 >> 2] = $1;
   HEAP32[$0 + 4 >> 2] = $2;
   break label$4;
  }
  HEAP32[HEAP32[$4 + 12 >> 2] >> 2] = HEAP32[$4 >> 2];
 }
}

function lcdMemLCD_setCallbacks($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 + 52 | 0] = 74;
 HEAP8[$0 + 53 | 0] = 2;
 HEAP8[$0 + 54 | 0] = 0;
 HEAP8[$0 + 55 | 0] = 0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 + 56 | 0] = 75;
 HEAP8[$0 + 57 | 0] = 2;
 HEAP8[$0 + 58 | 0] = 0;
 HEAP8[$0 + 59 | 0] = 0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 + 60 | 0] = 76;
 HEAP8[$0 + 61 | 0] = 2;
 HEAP8[$0 + 62 | 0] = 0;
 HEAP8[$0 + 63 | 0] = 0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 + 68 | 0] = 77;
 HEAP8[$0 + 69 | 0] = 2;
 HEAP8[$0 + 70 | 0] = 0;
 HEAP8[$0 + 71 | 0] = 0;
}

function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__RoundingHalfSum_int_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 24 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromRaw_28int_29(int_20gemmlowp__RoundingHalfSum_int__28int_2c_20int_29(HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($2 + 16 | 0) >> 2], HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($2 + 8 | 0) >> 2]));
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 24 >> 2];
}

function jspeFactorTypeOf() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 jslGetNextToken();
 HEAP32[$0 + 12 >> 2] = jspeUnaryExpression();
 HEAP32[$0 + 8 >> 2] = 0;
 if ((HEAP32[86758] & 63) == 1) {
  label$2: {
   if (!(jsvIsVariableDefined(HEAP32[$0 + 12 >> 2]) & 1)) {
    HEAP32[$0 + 8 >> 2] = jsvNewFromString(121670);
    break label$2;
   }
   HEAP32[$0 + 12 >> 2] = jsvSkipNameAndUnLock(HEAP32[$0 + 12 >> 2]);
   HEAP32[$0 + 8 >> 2] = jsvNewFromString(jsvGetTypeOf(HEAP32[$0 + 12 >> 2]));
  }
 }
 jsvUnLock(HEAP32[$0 + 12 >> 2]);
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 8 >> 2];
}

function jsvStringIteratorGoto($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  if (HEAPU32[$3 + 4 >> 2] >= HEAPU32[HEAP32[$3 + 12 >> 2] + 8 >> 2]) {
   HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = HEAP32[$3 + 4 >> 2] - HEAP32[HEAP32[$3 + 12 >> 2] + 8 >> 2];
   jsvStringIteratorCatchUp(HEAP32[$3 + 12 >> 2]);
   break label$1;
  }
  jsvStringIteratorFree_2(HEAP32[$3 + 12 >> 2]);
  jsvStringIteratorNew(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 }
 __stack_pointer = $3 + 16 | 0;
}

function jsvAddressToVar($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (!HEAP32[$2 + 4 >> 2]) {
   HEAP32[$2 + 12 >> 2] = jsvNewFromEmptyString_4();
   break label$1;
  }
  HEAP32[$2 >> 2] = jshFlashGetMemMapAddress(HEAP32[$2 + 8 >> 2]);
  if (!HEAP32[$2 >> 2]) {
   HEAP32[$2 + 12 >> 2] = jsvNewFlashString(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]);
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jsvNewNativeString(HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function tflite__micro__GetMutableEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  if (!HEAP32[$3 + 12 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if (!HEAP32[$3 + 8 >> 2]) {
   break label$2;
  }
 }
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$3 + 12 >> 2] + 84 >> 2]](HEAP32[$3 + 12 >> 2], HEAP32[(HEAP32[HEAP32[$3 + 8 >> 2] >> 2] + 4 | 0) + (HEAP32[$3 + 4 >> 2] << 2) >> 2]) | 0;
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function i2c_initstruct($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP8[HEAP32[$2 + 12 >> 2] + 1 | 0] = HEAPU8[HEAP32[$2 + 8 >> 2] + 5 | 0];
 HEAP8[HEAP32[$2 + 12 >> 2]] = HEAPU8[HEAP32[$2 + 8 >> 2] + 4 | 0];
 HEAP8[HEAP32[$2 + 12 >> 2] + 2 | 0] = HEAP8[HEAP32[$2 + 8 >> 2] + 6 | 0] & 1;
 $0 = HEAP32[$2 + 8 >> 2];
 HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2] = 25e4 / (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24));
 HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2] = HEAP8[HEAP32[$2 + 8 >> 2] + 7 | 0] & 1 ? 1e5 : 0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor___20const___28unsigned_20short_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor___20const___28unsigned_20short_29(HEAP32[$2 + 12 >> 2], HEAPU16[$2 + 10 >> 1]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer___20const___28unsigned_20short_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer___20const___28unsigned_20short_29(HEAP32[$2 + 12 >> 2], HEAPU16[$2 + 10 >> 1]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jswrap_array_indexOf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = jsvGetIndexOfFull(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], 0, 1, HEAP32[$3 + 16 >> 2]);
 label$1: {
  if (!HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 28 >> 2] = jsvNewFromInteger(-1);
   break label$1;
  }
  HEAP32[$3 + 28 >> 2] = jsvNewFromInteger(jsvGetIntegerAndUnLock(HEAP32[$3 + 12 >> 2]));
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function tflite__micro__GetEvalOutput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  if (!HEAP32[$3 + 12 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if (!HEAP32[$3 + 8 >> 2]) {
   break label$2;
  }
 }
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$3 + 12 >> 2] + 84 >> 2]](HEAP32[$3 + 12 >> 2], HEAP32[(HEAP32[HEAP32[$3 + 8 >> 2] + 4 >> 2] + 4 | 0) + (HEAP32[$3 + 4 >> 2] << 2) >> 2]) | 0;
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function jswrap_espruino_toUint8Array($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 80 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 72 >> 2] = $0;
 HEAP32[$1 + 68 >> 2] = jsvNewTypedArray(1, jsvIterateCallbackCount(HEAP32[$1 + 72 >> 2]));
 label$1: {
  if (!HEAP32[$1 + 68 >> 2]) {
   HEAP32[$1 + 76 >> 2] = 0;
   break label$1;
  }
  jsvArrayBufferIteratorNew($1 + 8 | 0, HEAP32[$1 + 68 >> 2], 0);
  jsvIterateCallback(HEAP32[$1 + 72 >> 2], 601, $1 + 8 | 0);
  jsvArrayBufferIteratorFree($1 + 8 | 0);
  HEAP32[$1 + 76 >> 2] = HEAP32[$1 + 68 >> 2];
 }
 __stack_pointer = $1 + 80 | 0;
 return HEAP32[$1 + 76 >> 2];
}

function jswrap_isFinite($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 HEAPF64[$1 + 16 >> 3] = jsvGetFloat(HEAP32[$1 + 28 >> 2]);
 $2 = __DOUBLE_BITS_4(HEAPF64[$1 + 16 >> 3]);
 $0 = $2;
 $3 = i64toi32_i32$HIGH_BITS;
 $2 = $3 & 2147483647;
 $3 = $0;
 $0 = 0;
 label$1: {
  if (($2 | 0) == 2146435072 & ($3 | 0) != 0 | $2 >>> 0 > 2146435072) {
   break label$1;
  }
  $0 = 0;
  if (HEAPF64[$1 + 16 >> 3] == infinity) {
   break label$1;
  }
  $0 = HEAPF64[$1 + 16 >> 3] != -infinity;
 }
 __stack_pointer = $1 + 32 | 0;
 return $0 | 0;
}

function jsiAtEndOfInputLine() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 8 >> 2] = HEAP32[86770];
 HEAP32[$0 + 4 >> 2] = jsvGetStringLength(HEAP32[86768]);
 label$1: {
  while (1) {
   if (HEAPU32[$0 + 8 >> 2] < HEAPU32[$0 + 4 >> 2]) {
    if (isWhitespace(jsvGetCharInString(HEAP32[86768], HEAP32[$0 + 8 >> 2]) << 24 >> 24) & 1) {
     HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
     continue;
    } else {
     HEAP8[$0 + 15 | 0] = 0;
     break label$1;
    }
   }
   break;
  }
  HEAP8[$0 + 15 | 0] = 1;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP8[$0 + 15 | 0] & 1;
}

function frexp($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 wasm2js_scratch_store_f64(+$0);
 $2 = wasm2js_scratch_load_i32(1) | 0;
 $3 = wasm2js_scratch_load_i32(0) | 0;
 $4 = $2;
 $2 = $2 >>> 20 & 2047;
 if (($2 | 0) != 2047) {
  if (!$2) {
   if ($0 == 0) {
    $2 = 0;
   } else {
    $0 = frexp($0 * 0x10000000000000000, $1);
    $2 = HEAP32[$1 >> 2] + -64 | 0;
   }
   HEAP32[$1 >> 2] = $2;
   return $0;
  }
  HEAP32[$1 >> 2] = $2 - 1022;
  $2 = $3;
  wasm2js_scratch_store_i32(0, $2 | 0);
  $2 = $4 & -2146435073 | 1071644672;
  wasm2js_scratch_store_i32(1, $2 | 0);
  $0 = +wasm2js_scratch_load_f64();
 }
 return $0;
}

function st_yield_br_index($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (can_take_byte(HEAP32[$2 + 4 >> 2])) {
   if (push_outgoing_bits(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]) & 255) {
    HEAP32[$2 + 12 >> 2] = 5;
    break label$1;
   }
   HEAP16[HEAP32[$2 + 8 >> 2] + 8 >> 1] = HEAPU16[HEAP32[$2 + 8 >> 2] + 4 >> 1] - 1;
   HEAP8[HEAP32[$2 + 8 >> 2] + 10 | 0] = 6;
   HEAP32[$2 + 12 >> 2] = 6;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 5;
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jsvSetArrayLength($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 label$1: {
  if (!(HEAP8[$3 + 7 | 0] & 1)) {
   break label$1;
  }
  $0 = HEAP32[$3 + 12 >> 2];
  if (HEAP32[$3 + 8 >> 2] >= (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24))) {
   break label$1;
  }
 }
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 HEAP8[$0 | 0] = $1;
 HEAP8[$0 + 1 | 0] = $1 >>> 8;
 HEAP8[$0 + 2 | 0] = $1 >>> 16;
 HEAP8[$0 + 3 | 0] = $1 >>> 24;
 return HEAP32[$3 + 8 >> 2];
}

function mbedtls_sha1_processR($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[HEAP32[$2 + 12 >> 2] + ((HEAP32[$2 + 8 >> 2] & 15) << 2) >> 2] ^ (HEAP32[HEAP32[$2 + 12 >> 2] + ((HEAP32[$2 + 8 >> 2] - 14 & 15) << 2) >> 2] ^ (HEAP32[HEAP32[$2 + 12 >> 2] + ((HEAP32[$2 + 8 >> 2] - 3 & 15) << 2) >> 2] ^ HEAP32[HEAP32[$2 + 12 >> 2] + ((HEAP32[$2 + 8 >> 2] - 8 & 15) << 2) >> 2]));
 $0 = HEAP32[$2 + 4 >> 2] << 1 | HEAP32[$2 + 4 >> 2] >>> 31;
 HEAP32[HEAP32[$2 + 12 >> 2] + ((HEAP32[$2 + 8 >> 2] & 15) << 2) >> 2] = $0;
 return $0;
}

function jswrap_date_setSeconds($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 getTimeFromDateVar($3 + 8 | 0, HEAP32[$3 + 44 >> 2], 0);
 HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 40 >> 2];
 if (jsvIsNumeric(HEAP32[$3 + 36 >> 2]) & 1) {
  HEAP32[$3 + 12 >> 2] = jsvGetInteger(HEAP32[$3 + 36 >> 2]);
 }
 setCorrectTimeZone($3 + 8 | 0);
 $4 = jswrap_date_setTime(HEAP32[$3 + 44 >> 2], fromTimeInDay($3 + 8 | 0));
 __stack_pointer = $3 + 48 | 0;
 return +$4;
}

function jshUSARTInitInfo($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 | 0] = 128;
 HEAP8[$0 + 1 | 0] = 37;
 HEAP8[$0 + 2 | 0] = 0;
 HEAP8[$0 + 3 | 0] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 4 | 0] = 255;
 HEAP8[HEAP32[$1 + 12 >> 2] + 5 | 0] = 255;
 HEAP8[HEAP32[$1 + 12 >> 2] + 6 | 0] = 255;
 HEAP8[HEAP32[$1 + 12 >> 2] + 7 | 0] = 255;
 HEAP8[HEAP32[$1 + 12 >> 2] + 8 | 0] = 8;
 HEAP8[HEAP32[$1 + 12 >> 2] + 9 | 0] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 10 | 0] = 1;
 HEAP8[HEAP32[$1 + 12 >> 2] + 11 | 0] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 12 | 0] = 0;
}

function jswrap_stream_available($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!(jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1)) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 8 >> 2], 119076);
  HEAP32[$1 >> 2] = 0;
  if (jsvIsString(HEAP32[$1 + 4 >> 2]) & 1) {
   HEAP32[$1 >> 2] = jsvGetStringLength(HEAP32[$1 + 4 >> 2]);
  }
  jsvUnLock(HEAP32[$1 + 4 >> 2]);
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function gemmlowp__FixedPoint_int_2c_2012__20gemmlowp__operator__int_2c_2012__28gemmlowp__FixedPoint_int_2c_2012__2c_20gemmlowp__FixedPoint_int_2c_2012__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 24 >> 2] = gemmlowp__FixedPoint_int_2c_2012___FromRaw_28int_29(int_20gemmlowp__Add_int__28int_2c_20int_29(HEAP32[gemmlowp__FixedPoint_int_2c_2012___raw_28_29($2 + 16 | 0) >> 2], HEAP32[gemmlowp__FixedPoint_int_2c_2012___raw_28_29($2 + 8 | 0) >> 2]));
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 24 >> 2];
}

function jshSPIInitInfo($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 | 0] = 160;
 HEAP8[$0 + 1 | 0] = 134;
 HEAP8[$0 + 2 | 0] = 1;
 HEAP8[$0 + 3 | 0] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 4 | 0] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 5 | 0] = 255;
 HEAP8[HEAP32[$1 + 12 >> 2] + 6 | 0] = 255;
 HEAP8[HEAP32[$1 + 12 >> 2] + 7 | 0] = 255;
 HEAP8[HEAP32[$1 + 12 >> 2] + 8 | 0] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 9 | 0] = 1;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 + 10 | 0] = 8;
 HEAP8[$0 + 11 | 0] = 0;
 HEAP8[$0 + 12 | 0] = 0;
 HEAP8[$0 + 13 | 0] = 0;
}

function gemmlowp__FixedPoint_int_2c_205__20gemmlowp__operator__int_2c_205__28gemmlowp__FixedPoint_int_2c_205__2c_20gemmlowp__FixedPoint_int_2c_205__29_1($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 24 >> 2] = gemmlowp__FixedPoint_int_2c_205___FromRaw_28int_29(int_20gemmlowp__BitAnd_int__28int_2c_20int_29(HEAP32[gemmlowp__FixedPoint_int_2c_205___raw_28_29($2 + 16 | 0) >> 2], HEAP32[gemmlowp__FixedPoint_int_2c_205___raw_28_29($2 + 8 | 0) >> 2]));
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 24 >> 2];
}

function memcpy_circular($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 while (1) {
  $0 = HEAP32[$5 + 12 >> 2];
  HEAP32[$5 + 12 >> 2] = $0 - 1;
  if ($0) {
   $0 = HEAP32[$5 + 16 >> 2];
   HEAP32[$5 + 16 >> 2] = $0 + 1;
   HEAP8[HEAP32[$5 + 28 >> 2] + HEAP32[HEAP32[$5 + 24 >> 2] >> 2] | 0] = HEAPU8[$0 | 0];
   HEAP32[HEAP32[$5 + 24 >> 2] >> 2] = (HEAP32[HEAP32[$5 + 24 >> 2] >> 2] + 1 >>> 0) % HEAPU32[$5 + 20 >> 2];
   continue;
  }
  break;
 }
}

function jsbangle_exec_pending($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP16[$1 + 10 >> 1] = HEAPU8[$0 + 2 | 0] << 8 | HEAPU8[$0 + 3 | 0];
 if (!HEAP8[HEAP32[$1 + 12 >> 2] + 1 | 0]) {
  HEAP32[$1 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[86750], 120138);
  if (HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 >> 2] = jsvNewFromInteger(HEAPU16[$1 + 10 >> 1]);
   jsiQueueObjectCallbacks(HEAP32[$1 + 4 >> 2], 112183, $1, 1);
   jsvUnLock(HEAP32[$1 >> 2]);
  }
  jsvUnLock(HEAP32[$1 + 4 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
}

function gemmlowp__FixedPoint_int_2c_202__20gemmlowp__operator__int_2c_202__28gemmlowp__FixedPoint_int_2c_202__2c_20gemmlowp__FixedPoint_int_2c_202__29_1($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 24 >> 2] = gemmlowp__FixedPoint_int_2c_202___FromRaw_28int_29(int_20gemmlowp__Sub_int__28int_2c_20int_29(HEAP32[gemmlowp__FixedPoint_int_2c_202___raw_28_29($2 + 16 | 0) >> 2], HEAP32[gemmlowp__FixedPoint_int_2c_202___raw_28_29($2 + 8 | 0) >> 2]));
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 24 >> 2];
}

function tflite___28anonymous_20namespace_29__CheckParsePointerParams_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 label$1: {
  if (!HEAP32[$4 + 12 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if (!HEAP32[$4 + 8 >> 2]) {
   break label$2;
  }
 }
 label$3: {
  if (!HEAP32[$4 + 4 >> 2]) {
   break label$3;
  }
 }
 label$4: {
  if (!HEAP32[$4 >> 2]) {
   break label$4;
  }
 }
}

function tflite__RuntimeShape__FlatSize_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = 1;
 HEAP32[$1 + 4 >> 2] = tflite__RuntimeShape__DimsData_28_29_20const($0);
 HEAP32[$1 >> 2] = 0;
 while (1) {
  if (HEAP32[$1 >> 2] < HEAP32[$0 >> 2]) {
   HEAP32[$1 + 8 >> 2] = Math_imul(HEAP32[HEAP32[$1 + 4 >> 2] + (HEAP32[$1 >> 2] << 2) >> 2], HEAP32[$1 + 8 >> 2]);
   HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jswrap_banglejs_setLCDBrightness($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 $0 = HEAPF64[$1 + 8 >> 3] * 256 + .5;
 label$1: {
  if (Math_abs($0) < 2147483648) {
   $2 = ~~$0;
   break label$1;
  }
  $2 = -2147483648;
 }
 HEAP32[$1 + 4 >> 2] = $2;
 if (HEAP32[$1 + 4 >> 2] < 0) {
  HEAP32[$1 + 4 >> 2] = 0;
 }
 if (HEAP32[$1 + 4 >> 2] > 255) {
  HEAP32[$1 + 4 >> 2] = 255;
 }
 HEAP8[373718] = HEAP32[$1 + 4 >> 2];
 if (HEAP32[93413] & 65536) {
  jswrap_banglejs_setLCDPowerBacklight(1);
 }
 __stack_pointer = $1 + 16 | 0;
}

function wakeUpBangle($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = 0;
 if (!(!HEAP32[93415] | HEAP32[93413] & 65536)) {
  HEAP8[$1 + 11 | 0] = 1;
  HEAP32[93416] = HEAP32[93416] | 2;
 }
 if (!(!HEAP32[93417] | HEAP32[93413] & 131072)) {
  HEAP8[$1 + 11 | 0] = 1;
  HEAP32[93416] = HEAP32[93416] | 8;
 }
 if (!(!HEAP32[93418] | !(HEAP32[93413] & 262144))) {
  HEAP8[$1 + 11 | 0] = 1;
  HEAP32[93414] = HEAP32[$1 + 12 >> 2];
  HEAP32[93416] = HEAP32[93416] | 64;
 }
 if (HEAP8[$1 + 11 | 0] & 1) {
  HEAP16[186838] = 0;
 }
 return HEAP8[$1 + 11 | 0] & 1;
}

function jshPinSetValue($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 31 | 0] = $0;
 HEAP8[$2 + 30 | 0] = $1;
 if (HEAPU8[Math_imul(HEAPU8[$2 + 31 | 0], 3) + 163712 | 0] & 16) {
  HEAP8[$2 + 30 | 0] = (HEAPU8[$2 + 30 | 0] ^ -1) & 1;
 }
 HEAP32[$2 + 24 >> 2] = 178774;
 $0 = HEAP32[$2 + 24 >> 2];
 HEAP8[$2 + 21 | 0] = 105;
 HEAP8[$2 + 22 | 0] = 105;
 HEAP8[$2 + 23 | 0] = 0;
 $1 = HEAPU8[$2 + 31 | 0];
 HEAP32[$2 + 4 >> 2] = HEAP8[$2 + 30 | 0] & 1;
 HEAP32[$2 >> 2] = $1;
 emscripten_asm_const_int($0 | 0, $2 + 21 | 0, $2 | 0) | 0;
 __stack_pointer = $2 + 32 | 0;
}

function gemmlowp__FixedPoint_int_2c_205__20gemmlowp__operator__int_2c_205__28gemmlowp__FixedPoint_int_2c_205__2c_20gemmlowp__FixedPoint_int_2c_205__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 24 >> 2] = gemmlowp__FixedPoint_int_2c_205___FromRaw_28int_29(int_20gemmlowp__Sub_int__28int_2c_20int_29(HEAP32[gemmlowp__FixedPoint_int_2c_205___raw_28_29($2 + 16 | 0) >> 2], HEAP32[gemmlowp__FixedPoint_int_2c_205___raw_28_29($2 + 8 | 0) >> 2]));
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 24 >> 2];
}

function gemmlowp__FixedPoint_int_2c_202__20gemmlowp__operator__int_2c_202__28gemmlowp__FixedPoint_int_2c_202__2c_20gemmlowp__FixedPoint_int_2c_202__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 24 >> 2] = gemmlowp__FixedPoint_int_2c_202___FromRaw_28int_29(int_20gemmlowp__Add_int__28int_2c_20int_29(HEAP32[gemmlowp__FixedPoint_int_2c_202___raw_28_29($2 + 16 | 0) >> 2], HEAP32[gemmlowp__FixedPoint_int_2c_202___raw_28_29($2 + 8 | 0) >> 2]));
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 24 >> 2];
}

function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__operator__int_2c_200__28gemmlowp__FixedPoint_int_2c_200__2c_20gemmlowp__FixedPoint_int_2c_200__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 16 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 24 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromRaw_28int_29(int_20gemmlowp__Add_int__28int_2c_20int_29(HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($2 + 16 | 0) >> 2], HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($2 + 8 | 0) >> 2]));
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 24 >> 2];
}

function jslSeekToP($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[HEAP32[44743] + 100 >> 2]) {
  jsvLockAgain(HEAP32[HEAP32[44743] + 100 >> 2]);
 }
 jsvStringIteratorFree(HEAP32[44743] + 88 | 0);
 jsvStringIteratorClone(HEAP32[44743] + 88 | 0, HEAP32[$1 + 12 >> 2]);
 jsvUnLock(HEAP32[HEAP32[44743] + 100 >> 2]);
 HEAP8[HEAP32[44743]] = HEAPU8[HEAP32[$1 + 12 >> 2] + 36 | 0];
 HEAP32[HEAP32[44743] + 4 >> 2] = 0;
 HEAP32[HEAP32[44743] + 8 >> 2] = 0;
 HEAP16[HEAP32[44743] + 2 >> 1] = 0;
 jslGetNextToken();
 __stack_pointer = $1 + 16 | 0;
}

function jspGetConstructor($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = jspGetPrototype(HEAP32[$1 + 8 >> 2]);
 label$1: {
  if (HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 4 >> 2], 116071);
   if (jsvIsFunction(HEAP32[$1 >> 2]) & 1) {
    jsvUnLock(HEAP32[$1 + 4 >> 2]);
    HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
    break label$1;
   }
   jsvUnLock2(HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2]);
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvSetString($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer + -64 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 60 >> 2] = $0;
 HEAP32[$3 + 56 >> 2] = $1;
 HEAP32[$3 + 52 >> 2] = $2;
 jsvStringIteratorNew($3 + 16 | 0, HEAP32[$3 + 60 >> 2], 0);
 HEAP32[$3 + 12 >> 2] = 0;
 while (1) {
  if (HEAPU32[$3 + 12 >> 2] < HEAPU32[$3 + 52 >> 2]) {
   jsvStringIteratorSetCharAndNext($3 + 16 | 0, HEAP8[HEAP32[$3 + 56 >> 2] + HEAP32[$3 + 12 >> 2] | 0]);
   HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 jsvStringIteratorFree_1($3 + 16 | 0);
 __stack_pointer = $3 - -64 | 0;
}

function double_20const__20std____2__min_double_2c_20std____2____less_double_2c_20double___28double_20const__2c_20double_20const__2c_20std____2____less_double_2c_20double__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 >> 2] = $1;
 label$1: {
  if (std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($2 + 8 | 0, HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2]) & 1) {
   $0 = HEAP32[$2 >> 2];
   break label$1;
  }
  $0 = HEAP32[$2 + 4 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jswrap_graphics_scroll($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 96 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 88 >> 2] = $0;
 HEAP32[$3 + 84 >> 2] = $1;
 HEAP32[$3 + 80 >> 2] = $2;
 label$1: {
  if (!(graphicsGetFromVar($3 + 8 | 0, HEAP32[$3 + 88 >> 2]) & 1)) {
   HEAP32[$3 + 92 >> 2] = 0;
   break label$1;
  }
  graphicsScroll($3 + 8 | 0, HEAP32[$3 + 84 >> 2], HEAP32[$3 + 80 >> 2]);
  graphicsSetVar($3 + 8 | 0);
  HEAP32[$3 + 92 >> 2] = jsvLockAgain(HEAP32[$3 + 88 >> 2]);
 }
 __stack_pointer = $3 + 96 | 0;
 return HEAP32[$3 + 92 >> 2];
}

function jswrap_waveform_stop($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = jsvObjectGetBoolChild(HEAP32[$1 + 12 >> 2], 118986) & 1;
 label$1: {
  if (!(HEAP8[$1 + 11 | 0] & 1)) {
   jsExceptionHere(1, 118970, 0);
   break label$1;
  }
  HEAP32[$1 + 4 >> 2] = jswrap_waveform_getBuffer(HEAP32[$1 + 12 >> 2], 0, 0);
  if (!(jstStopBufferTimerTask(HEAP32[$1 + 4 >> 2]) & 1)) {
   jsExceptionHere(1, 121522, 0);
  }
  jsvUnLock(HEAP32[$1 + 4 >> 2]);
  jswrap_waveform_idle();
 }
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_graphics_clear($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 96 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 88 >> 2] = $0;
 HEAP8[$2 + 87 | 0] = $1;
 if (HEAP8[$2 + 87 | 0] & 1) {
  jsvUnLock(jswrap_graphics_reset(HEAP32[$2 + 88 >> 2]));
 }
 label$2: {
  if (!(graphicsGetFromVar($2 + 8 | 0, HEAP32[$2 + 88 >> 2]) & 1)) {
   HEAP32[$2 + 92 >> 2] = 0;
   break label$2;
  }
  graphicsClear($2 + 8 | 0);
  graphicsSetVar($2 + 8 | 0);
  HEAP32[$2 + 92 >> 2] = jsvLockAgain(HEAP32[$2 + 88 >> 2]);
 }
 __stack_pointer = $2 + 96 | 0;
 return HEAP32[$2 + 92 >> 2];
}

function TfLiteStatus_20tflite__internal__FlatBufferVectorToTfLiteTypeArray_float_2c_20TfLiteFloatArray__28tflite__SimpleMemoryAllocator__2c_20tflite__ErrorReporter__2c_20flatbuffers__Vector_float__20const__2c_20TfLiteFloatArray___29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 label$1: {
  if (!HEAP32[$4 + 8 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if (!HEAP32[$4 + 4 >> 2]) {
   break label$2;
  }
 }
 HEAP32[HEAP32[$4 >> 2] >> 2] = HEAP32[$4 + 4 >> 2];
 return 0;
}

function _jswrap_string_charCodeAt($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 56 >> 2] = $0;
 HEAP32[$2 + 52 >> 2] = $1;
 label$1: {
  if (!(jsvIsString(HEAP32[$2 + 56 >> 2]) & 1)) {
   HEAP32[$2 + 60 >> 2] = -1;
   break label$1;
  }
  jsvStringIteratorNewUTF8($2 + 16 | 0, HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2]);
  HEAP32[$2 + 12 >> 2] = jsvStringIteratorGetUTF8CharAndNext($2 + 16 | 0);
  jsvStringIteratorFree_10($2 + 16 | 0);
  HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 __stack_pointer = $2 - -64 | 0;
 return HEAP32[$2 + 60 >> 2];
}

function jswrap_graphics_getFontHeight($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 112 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 104 >> 2] = $0;
 label$1: {
  if (!(graphicsGetFromVar($1 + 32 | 0, HEAP32[$1 + 104 >> 2]) & 1)) {
   HEAP32[$1 + 108 >> 2] = 0;
   break label$1;
  }
  _jswrap_graphics_getFontInfo($1 + 32 | 0, $1 + 8 | 0);
  HEAP32[$1 + 4 >> 2] = _jswrap_graphics_getFontHeightInternal($1 + 32 | 0, $1 + 8 | 0);
  _jswrap_graphics_freeFontInfo($1 + 8 | 0);
  HEAP32[$1 + 108 >> 2] = HEAP32[$1 + 4 >> 2];
 }
 __stack_pointer = $1 + 112 | 0;
 return HEAP32[$1 + 108 >> 2];
}

function jspeExpression() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 label$1: {
  while (1) {
   if (((HEAP32[86758] & 80) != 0 ^ -1) & 1) {
    HEAP32[$0 + 8 >> 2] = jspeAssignmentExpression();
    if (HEAP16[HEAP32[44743] + 2 >> 1] != 44) {
     HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
     break label$1;
    } else {
     jsvCheckReferenceError(HEAP32[$0 + 8 >> 2]);
     jsvUnLock(HEAP32[$0 + 8 >> 2]);
     jslGetNextToken();
     continue;
    }
   }
   break;
  }
  HEAP32[$0 + 12 >> 2] = 0;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function tflite__SimpleMemoryAllocator__GetAvailableMemory_28unsigned_20long_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = tflite__AlignPointerUp_28unsigned_20char__2c_20unsigned_20long_29(HEAP32[$0 + 16 >> 2], HEAP32[$2 + 8 >> 2]);
 HEAP32[$2 >> 2] = tflite__AlignPointerDown_28unsigned_20char__2c_20unsigned_20long_29(HEAP32[$0 + 20 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 >> 2] - HEAP32[$2 + 4 >> 2] | 0;
}

function jshFlashGetPage($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = $1;
 HEAP32[$3 >> 2] = $2;
 label$1: {
  if (HEAPU32[$3 + 8 >> 2] < 134217728) {
   HEAP8[$3 + 15 | 0] = 0;
   break label$1;
  }
  $1 = HEAP32[$3 + 4 >> 2];
  $4 = Math_floor(+(HEAP32[$3 + 8 >> 2] >>> 12 >>> 0)) * 4096;
  label$3: {
   if ($4 < 4294967296 & $4 >= 0) {
    $0 = ~~$4 >>> 0;
    break label$3;
   }
   $0 = 0;
  }
  HEAP32[$1 >> 2] = $0;
  HEAP32[HEAP32[$3 >> 2] >> 2] = 4096;
  HEAP8[$3 + 15 | 0] = 1;
 }
 return HEAP8[$3 + 15 | 0] & 1;
}

function round($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 wasm2js_scratch_store_f64(+$0);
 $1 = wasm2js_scratch_load_i32(1) | 0;
 $4 = wasm2js_scratch_load_i32(0) | 0;
 $3 = $1 >>> 20 & 2047;
 if ($3 >>> 0 <= 1074) {
  if ($3 >>> 0 <= 1021) {
   return $0 * 0;
  }
  $0 = ($1 | 0) > 0 | ($1 | 0) >= 0 ? $0 : -$0;
  $2 = $0 + 4503599627370496 + -4503599627370496 - $0;
  label$3: {
   if ($2 > .5) {
    $0 = $0 + $2 + -1;
    break label$3;
   }
   $0 = $0 + $2;
   if (!($2 <= -.5)) {
    break label$3;
   }
   $0 = $0 + 1;
  }
  $0 = ($1 | 0) > 0 | ($1 | 0) >= 0 ? $0 : -$0;
 }
 return $0;
}

function unsigned_20char_20const__20std____2__min_unsigned_20char__28unsigned_20char_20const__2c_20unsigned_20char_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = unsigned_20char_20const__20std____2__min_unsigned_20char_2c_20std____2____less_unsigned_20char_2c_20unsigned_20char___28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20std____2____less_unsigned_20char_2c_20unsigned_20char__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function unsigned_20char_20const__20std____2__max_unsigned_20char__28unsigned_20char_20const__2c_20unsigned_20char_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = unsigned_20char_20const__20std____2__max_unsigned_20char_2c_20std____2____less_unsigned_20char_2c_20unsigned_20char___28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20std____2____less_unsigned_20char_2c_20unsigned_20char__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function TfLiteStatus_20tflite__internal__FlatBufferVectorToTfLiteTypeArray_int_2c_20TfLiteIntArray__28tflite__SimpleMemoryAllocator__2c_20tflite__ErrorReporter__2c_20flatbuffers__Vector_int__20const__2c_20TfLiteIntArray___29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 label$1: {
  if (!HEAP32[$4 + 8 >> 2]) {
   break label$1;
  }
 }
 label$2: {
  if (!HEAP32[$4 + 4 >> 2]) {
   break label$2;
  }
 }
 HEAP32[HEAP32[$4 >> 2] >> 2] = HEAP32[$4 + 4 >> 2];
 return 0;
}

function jsvStringIteratorGetPtrAndNext($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[HEAP32[$3 + 8 >> 2] >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] + 16 >> 2] + HEAP32[HEAP32[$3 + 12 >> 2] >> 2];
 HEAP32[HEAP32[$3 + 4 >> 2] >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] + 4 >> 2] - HEAP32[HEAP32[$3 + 12 >> 2] >> 2];
 HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] + 4 >> 2] - 1;
 jsvStringIteratorNextInline(HEAP32[$3 + 12 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function float_20const__20std____2__min_float_2c_20std____2____less_float_2c_20float___28float_20const__2c_20float_20const__2c_20std____2____less_float_2c_20float__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 >> 2] = $1;
 label$1: {
  if (std____2____less_float_2c_20float___operator_28_29_28float_20const__2c_20float_20const__29_20const($2 + 8 | 0, HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2]) & 1) {
   $0 = HEAP32[$2 >> 2];
   break label$1;
  }
  $0 = HEAP32[$2 + 4 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function float_20const__20std____2__max_float_2c_20std____2____less_float_2c_20float___28float_20const__2c_20float_20const__2c_20std____2____less_float_2c_20float__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 >> 2] = $1;
 label$1: {
  if (std____2____less_float_2c_20float___operator_28_29_28float_20const__2c_20float_20const__29_20const($2 + 8 | 0, HEAP32[$2 + 4 >> 2], HEAP32[$2 >> 2]) & 1) {
   $0 = HEAP32[$2 >> 2];
   break label$1;
  }
  $0 = HEAP32[$2 + 4 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jswrap_graphics_drawCString($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = jsvNewFromString(HEAP32[$4 + 16 >> 2]);
 $0 = HEAP32[$4 + 28 >> 2];
 jsvUnLock2(jswrap_graphics_drawString(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), HEAP32[$4 + 12 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], 0), HEAP32[$4 + 12 >> 2]);
 __stack_pointer = $4 + 32 | 0;
}

function jsvGetCharInString($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 56 >> 2] = $0;
 HEAP32[$2 + 52 >> 2] = $1;
 label$1: {
  if (!(jsvIsString(HEAP32[$2 + 56 >> 2]) & 1)) {
   HEAP32[$2 + 60 >> 2] = 0;
   break label$1;
  }
  jsvStringIteratorNewUTF8($2 + 16 | 0, HEAP32[$2 + 56 >> 2], HEAP32[$2 + 52 >> 2]);
  HEAP32[$2 + 12 >> 2] = jsvStringIteratorGetUTF8CharAndNext($2 + 16 | 0);
  jsvStringIteratorFree_1($2 + 16 | 0);
  HEAP32[$2 + 60 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 __stack_pointer = $2 - -64 | 0;
 return HEAP32[$2 + 60 >> 2];
}

function jslPrintTokenisedString($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer + -64 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 60 >> 2] = $0;
 HEAP32[$3 + 56 >> 2] = $1;
 HEAP32[$3 + 52 >> 2] = $2;
 HEAP8[$3 + 51 | 0] = 0;
 HEAP32[$3 + 44 >> 2] = 0;
 HEAP32[$3 + 40 >> 2] = 0;
 jsvStringIteratorNew($3, HEAP32[$3 + 60 >> 2], 0);
 while (1) {
  if (jsvStringIteratorHasChar($3) & 1) {
   jslPrintTokenisedChar($3, $3 + 51 | 0, $3 + 44 | 0, $3 + 40 | 0, HEAP32[$3 + 56 >> 2], HEAP32[$3 + 52 >> 2]);
   continue;
  }
  break;
 }
 jsvStringIteratorFree($3);
 __stack_pointer = $3 - -64 | 0;
}

function jsiFreeMoreMemory() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 jsvObjectRemoveChild(HEAP32[86751], 112688);
 HEAP32[$0 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[86751], 111590);
 label$1: {
  if (!HEAP32[$0 + 8 >> 2]) {
   HEAP8[$0 + 15 | 0] = 0;
   break label$1;
  }
  HEAP32[$0 + 4 >> 2] = jsvArrayPopFirst(HEAP32[$0 + 8 >> 2]);
  HEAP8[$0 + 3 | 0] = HEAP32[$0 + 4 >> 2] != 0;
  jsvUnLock2(HEAP32[$0 + 4 >> 2], HEAP32[$0 + 8 >> 2]);
  HEAP8[$0 + 15 | 0] = HEAP8[$0 + 3 | 0] & 1;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP8[$0 + 15 | 0] & 1;
}

function jsfVarFromName($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 28 | 0] = 0;
 $2 = $0;
 $0 = HEAP32[$2 >> 2];
 $3 = HEAP32[$2 + 4 >> 2];
 HEAP32[$1 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = $3;
 HEAP32[$1 + 24 >> 2] = HEAP32[$2 + 24 >> 2];
 $0 = HEAP32[$2 + 20 >> 2];
 $3 = HEAP32[$2 + 16 >> 2];
 HEAP32[$1 + 16 >> 2] = $3;
 HEAP32[$1 + 20 >> 2] = $0;
 $3 = HEAP32[$2 + 12 >> 2];
 $0 = HEAP32[$2 + 8 >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 12 >> 2] = $3;
 $0 = jsvNewFromString($1);
 __stack_pointer = $1 + 32 | 0;
 return $0;
}

function tf_invoke($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = HEAP32[$1 + 24 >> 2];
 HEAP32[$1 + 16 >> 2] = HEAP32[$1 + 20 >> 2];
 HEAP32[$1 + 12 >> 2] = tflite__MicroInterpreter__Invoke_28_29(HEAP32[$1 + 20 >> 2] + 400 | 0);
 label$1: {
  if (HEAP32[$1 + 12 >> 2]) {
   tflite__ErrorReporter__Report_28char_20const__2c_20____29(HEAP32[$1 + 16 >> 2], 121793, 0);
   HEAP8[$1 + 31 | 0] = 0;
   break label$1;
  }
  HEAP8[$1 + 31 | 0] = 1;
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP8[$1 + 31 | 0] & 1;
}

function _jswrap_io_peek($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (HEAP32[$2 + 4 >> 2] == 1) {
   HEAP32[$2 + 12 >> 2] = HEAPU8[HEAP32[$2 + 8 >> 2]];
   break label$1;
  }
  if (HEAP32[$2 + 4 >> 2] == 2) {
   HEAP32[$2 + 12 >> 2] = HEAPU8[HEAP32[$2 + 8 >> 2]] | HEAPU8[HEAP32[$2 + 8 >> 2] + 1 | 0] << 8;
   break label$1;
  }
  if (HEAP32[$2 + 4 >> 2] == 4) {
   HEAP32[$2 + 12 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 0;
 }
 return HEAP32[$2 + 12 >> 2];
}

function jswIsBuiltInObject($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = 158036;
 HEAP32[$1 >> 2] = HEAP32[$1 + 4 >> 2];
 label$1: {
  while (1) {
   if (HEAPU8[HEAP32[$1 >> 2]]) {
    if (strcmp(HEAP32[$1 >> 2], HEAP32[$1 + 8 >> 2])) {
     HEAP32[$1 >> 2] = (strlen(HEAP32[$1 >> 2]) + 1 | 0) + HEAP32[$1 >> 2];
     continue;
    } else {
     HEAP8[$1 + 15 | 0] = 1;
     break label$1;
    }
   }
   break;
  }
  HEAP8[$1 + 15 | 0] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}

function jswrap_object_values_or_entries($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP8[$2 + 23 | 0] = $1;
 HEAP32[$2 + 12 >> 2] = jsvNewEmptyArray();
 HEAP32[$2 + 16 >> 2] = HEAP32[$2 + 24 >> 2];
 label$1: {
  if (!HEAP32[$2 + 12 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  jswrap_object_keys_or_property_names_cb(HEAP32[$2 + 24 >> 2], 0, HEAP8[$2 + 23 | 0] & 1 ? 598 : 599, $2 + 12 | 0);
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function tflite__MicroMutableOpResolver_9u___AddDepthwiseConv2D_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 44 >> 2] = $0;
 $0 = HEAP32[$1 + 44 >> 2];
 tflite__ops__micro__Register_DEPTHWISE_CONV_2D_28_29($1 + 8 | 0);
 $0 = tflite__MicroMutableOpResolver_9u___AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration_20const__2c_20TfLiteStatus_20_28__29_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29_29($0, 4, $1 + 8 | 0, 706);
 __stack_pointer = $1 + 48 | 0;
 return $0;
}

function jsvSetCharInString($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 48 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 44 >> 2] = $0;
 HEAP32[$4 + 40 >> 2] = $1;
 HEAP8[$4 + 39 | 0] = $2;
 HEAP8[$4 + 38 | 0] = $3;
 if (jsvIsString(HEAP32[$4 + 44 >> 2]) & 1) {
  jsvStringIteratorNew($4, HEAP32[$4 + 44 >> 2], HEAP32[$4 + 40 >> 2]);
  if (HEAP8[$4 + 38 | 0] & 1) {
   HEAP8[$4 + 39 | 0] = jsvStringIteratorGetChar_1($4) << 24 >> 24 | HEAP8[$4 + 39 | 0];
  }
  jsvStringIteratorSetChar($4, HEAP8[$4 + 39 | 0]);
  jsvStringIteratorFree_1($4);
 }
 __stack_pointer = $4 + 48 | 0;
}

function tflite__MicroMutableOpResolver_9u___AddFullyConnected_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 44 >> 2] = $0;
 $0 = HEAP32[$1 + 44 >> 2];
 tflite__ops__micro__Register_FULLY_CONNECTED_28_29($1 + 8 | 0);
 $0 = tflite__MicroMutableOpResolver_9u___AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration_20const__2c_20TfLiteStatus_20_28__29_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29_29($0, 9, $1 + 8 | 0, 709);
 __stack_pointer = $1 + 48 | 0;
 return $0;
}

function jsvHasCharacterData($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
  label$3: {
   if (HEAP8[$1 + 7 | 0] >= 18) {
    $0 = 1;
    if (HEAP8[$1 + 7 | 0] <= 40) {
     break label$3;
    }
   }
   $2 = HEAP8[$1 + 7 | 0] >= 41 ? HEAP8[$1 + 7 | 0] <= 51 : $2;
   $0 = $2;
  }
  HEAP8[$1 + 15 | 0] = $0 & 1;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function _jswrap_banglejs_setVibration() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = 0;
 if (HEAP32[93413] & 128) {
  HEAP32[$0 + 12 >> 2] = HEAPU16[186897];
 }
 label$2: {
  if (!(HEAPU8[373792] | HEAP32[$0 + 12 >> 2])) {
   jshPinOutput(19, 0);
   break label$2;
  }
  label$4: {
   if (!HEAP32[$0 + 12 >> 2]) {
    jshPinAnalogOutput(19, +HEAPU8[373792] * .6 / 255 + .4, 1e3, 0);
    break label$4;
   }
   jshPinAnalogOutput(19, +HEAPU8[373792] * .6 / 255 + .2, +HEAP32[$0 + 12 >> 2], 0);
  }
 }
 __stack_pointer = $0 + 16 | 0;
}

function tflite__MicroMutableOpResolver_9u___AddAveragePool2D_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 44 >> 2] = $0;
 $0 = HEAP32[$1 + 44 >> 2];
 tflite__ops__micro__Register_AVERAGE_POOL_2D_28_29($1 + 8 | 0);
 $0 = tflite__MicroMutableOpResolver_9u___AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration_20const__2c_20TfLiteStatus_20_28__29_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29_29($0, 1, $1 + 8 | 0, 708);
 __stack_pointer = $1 + 48 | 0;
 return $0;
}

function jspParse() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = 0;
 while (1) {
  $1 = 0;
  $1 = HEAP32[86758] & 80 ? $1 : HEAP16[HEAP32[44743] + 2 >> 1] != 0;
  if ($1) {
   jsvUnLock(HEAP32[$0 + 12 >> 2]);
   HEAP32[$0 + 12 >> 2] = jspeBlockOrStatement();
   while (1) {
    if (HEAP16[HEAP32[44743] + 2 >> 1] == 59) {
     jslGetNextToken();
     continue;
    }
    break;
   }
   jsvCheckReferenceError(HEAP32[$0 + 12 >> 2]);
   continue;
  }
  break;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function tflite__MicroMutableOpResolver_9u___AddMaxPool2D_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 44 >> 2] = $0;
 $0 = HEAP32[$1 + 44 >> 2];
 tflite__ops__micro__Register_MAX_POOL_2D_28_29($1 + 8 | 0);
 $0 = tflite__MicroMutableOpResolver_9u___AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration_20const__2c_20TfLiteStatus_20_28__29_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29_29($0, 17, $1 + 8 | 0, 708);
 __stack_pointer = $1 + 48 | 0;
 return $0;
}

function jsvNewFromInteger($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = jsvNewWithFlags(10);
 label$1: {
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 4 >> 2];
  $2 = HEAP32[$1 + 8 >> 2];
  HEAP8[$0 | 0] = $2;
  HEAP8[$0 + 1 | 0] = $2 >>> 8;
  HEAP8[$0 + 2 | 0] = $2 >>> 16;
  HEAP8[$0 + 3 | 0] = $2 >>> 24;
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvAppendStringBuf($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 jsvStringIteratorNew($3, HEAP32[$3 + 44 >> 2], 0);
 jsvStringIteratorGotoEnd($3);
 while (1) {
  if (HEAP32[$3 + 36 >> 2]) {
   $0 = HEAP32[$3 + 40 >> 2];
   HEAP32[$3 + 40 >> 2] = $0 + 1;
   jsvStringIteratorAppend($3, HEAP8[$0 | 0]);
   HEAP32[$3 + 36 >> 2] = HEAP32[$3 + 36 >> 2] - 1;
   continue;
  }
  break;
 }
 jsvStringIteratorFree_1($3);
 __stack_pointer = $3 + 48 | 0;
}

function jsonNewLine($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 FUNCTION_TABLE[HEAP32[$4 + 20 >> 2]](146977, HEAP32[$4 + 16 >> 2]);
 HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 28 >> 2] >>> 14;
 while (1) {
  $0 = HEAP32[$4 + 12 >> 2];
  HEAP32[$4 + 12 >> 2] = $0 - 1;
  if ($0) {
   FUNCTION_TABLE[HEAP32[$4 + 20 >> 2]](HEAP32[$4 + 24 >> 2], HEAP32[$4 + 16 >> 2]);
   continue;
  }
  break;
 }
 __stack_pointer = $4 + 32 | 0;
}

function tflite__MicroMutableOpResolver_9u___AddDequantize_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 44 >> 2] = $0;
 $0 = HEAP32[$1 + 44 >> 2];
 tflite__ops__micro__Register_DEQUANTIZE_28_29($1 + 8 | 0);
 $0 = tflite__MicroMutableOpResolver_9u___AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration_20const__2c_20TfLiteStatus_20_28__29_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29_29($0, 6, $1 + 8 | 0, 712);
 __stack_pointer = $1 + 48 | 0;
 return $0;
}

function jsvNewFromBool($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 11 | 0] = $0;
 HEAP32[$1 + 4 >> 2] = jsvNewWithFlags(12);
 label$1: {
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 4 >> 2];
  $2 = HEAP8[$1 + 11 | 0] & 1;
  HEAP8[$0 | 0] = $2;
  HEAP8[$0 + 1 | 0] = $2 >>> 8;
  HEAP8[$0 + 2 | 0] = $2 >>> 16;
  HEAP8[$0 + 3 | 0] = $2 >>> 24;
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvIsBasic($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
  label$3: {
   if (HEAP8[$1 + 7 | 0] >= 10) {
    $0 = 1;
    if (HEAP8[$1 + 7 | 0] <= 17) {
     break label$3;
    }
   }
   $2 = HEAP8[$1 + 7 | 0] >= 18 ? HEAP8[$1 + 7 | 0] <= 40 : $2;
   $0 = $2;
  }
  HEAP8[$1 + 15 | 0] = $0 & 1;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function chtod($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 11 | 0] = $0;
 label$1: {
  if (!(HEAP8[$1 + 11 | 0] < 48 | HEAP8[$1 + 11 | 0] > 57)) {
   HEAP32[$1 + 12 >> 2] = HEAP8[$1 + 11 | 0] - 48;
   break label$1;
  }
  if (!(HEAP8[$1 + 11 | 0] < 97 | HEAP8[$1 + 11 | 0] > 122)) {
   HEAP32[$1 + 12 >> 2] = HEAP8[$1 + 11 | 0] - 87;
   break label$1;
  }
  if (!(HEAP8[$1 + 11 | 0] < 65 | HEAP8[$1 + 11 | 0] > 90)) {
   HEAP32[$1 + 12 >> 2] = HEAP8[$1 + 11 | 0] - 55;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = -1;
 }
 return HEAP32[$1 + 12 >> 2];
}

function tflite__MicroMutableOpResolver_9u___AddQuantize_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 44 >> 2] = $0;
 $0 = HEAP32[$1 + 44 >> 2];
 tflite__ops__micro__Register_QUANTIZE_28_29($1 + 8 | 0);
 $0 = tflite__MicroMutableOpResolver_9u___AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration_20const__2c_20TfLiteStatus_20_28__29_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29_29($0, 114, $1 + 8 | 0, 711);
 __stack_pointer = $1 + 48 | 0;
 return $0;
}

function i2c_rd($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 while (1) {
  if (HEAP32[$2 + 4 >> 2] < 8) {
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] << 1 | i2c_rd_bit(HEAP32[$2 + 12 >> 2]) & 1;
   HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
   continue;
  }
  break;
 }
 i2c_wr_bit(HEAP32[$2 + 12 >> 2], HEAP8[$2 + 11 | 0] & 1);
 i2c_pin_wr1(HEAPU8[HEAP32[$2 + 12 >> 2] + 1 | 0]);
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 >> 2];
}

function jsiSetTimeout($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAPF64[$2 + 16 >> 3] = $1;
 HEAP32[$2 + 12 >> 2] = jsvNewNativeFunction(HEAP32[$2 + 24 >> 2], 0);
 label$1: {
  if (!HEAP32[$2 + 12 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 8 >> 2] = jswrap_interface_setTimeout(HEAP32[$2 + 12 >> 2], HEAPF64[$2 + 16 >> 3], 0);
  jsvUnLock(HEAP32[$2 + 12 >> 2]);
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 8 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function jsvNewTypedArray($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 27 | 0] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = jsvNewFromInteger(HEAP32[$2 + 20 >> 2]);
 label$1: {
  if (!HEAP32[$2 + 16 >> 2]) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jswrap_typedarray_constructor(HEAPU8[$2 + 27 | 0], HEAP32[$2 + 16 >> 2], 0, 0);
  jsvUnLock(HEAP32[$2 + 16 >> 2]);
  HEAP32[$2 + 28 >> 2] = HEAP32[$2 + 12 >> 2];
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function tflite__MicroMutableOpResolver_9u___AddSoftmax_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 44 >> 2] = $0;
 $0 = HEAP32[$1 + 44 >> 2];
 tflite__ops__micro__Register_SOFTMAX_28_29($1 + 8 | 0);
 $0 = tflite__MicroMutableOpResolver_9u___AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration_20const__2c_20TfLiteStatus_20_28__29_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29_29($0, 25, $1 + 8 | 0, 710);
 __stack_pointer = $1 + 48 | 0;
 return $0;
}

function tflite__MicroMutableOpResolver_9u___AddReshape_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 44 >> 2] = $0;
 $0 = HEAP32[$1 + 44 >> 2];
 tflite__ops__micro__Register_RESHAPE_28_29($1 + 8 | 0);
 $0 = tflite__MicroMutableOpResolver_9u___AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration_20const__2c_20TfLiteStatus_20_28__29_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29_29($0, 22, $1 + 8 | 0, 713);
 __stack_pointer = $1 + 48 | 0;
 return $0;
}

function signed_20char_20const__20std____2__min_signed_20char__28signed_20char_20const__2c_20signed_20char_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = signed_20char_20const__20std____2__min_signed_20char_2c_20std____2____less_signed_20char_2c_20signed_20char___28signed_20char_20const__2c_20signed_20char_20const__2c_20std____2____less_signed_20char_2c_20signed_20char__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function signed_20char_20const__20std____2__max_signed_20char__28signed_20char_20const__2c_20signed_20char_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = signed_20char_20const__20std____2__max_signed_20char_2c_20std____2____less_signed_20char_2c_20signed_20char___28signed_20char_20const__2c_20signed_20char_20const__2c_20std____2____less_signed_20char_2c_20signed_20char__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jswrap_graphics_getWidthOrHeight($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 96 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 88 >> 2] = $0;
 HEAP8[$2 + 87 | 0] = $1;
 label$1: {
  if (!(graphicsGetFromVar($2 + 8 | 0, HEAP32[$2 + 88 >> 2]) & 1)) {
   HEAP32[$2 + 92 >> 2] = 0;
   break label$1;
  }
  label$3: {
   if (HEAP8[$2 + 87 | 0] & 1) {
    $0 = graphicsGetHeight($2 + 8 | 0) & 65535;
    break label$3;
   }
   $0 = graphicsGetWidth($2 + 8 | 0) & 65535;
  }
  HEAP32[$2 + 92 >> 2] = $0;
 }
 __stack_pointer = $2 + 96 | 0;
 return HEAP32[$2 + 92 >> 2];
}

function jsvAddFunctionParameter($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 if (!HEAP32[$3 + 8 >> 2]) {
  HEAP32[$3 + 8 >> 2] = jsvNewFromEmptyString_1();
 }
 if (HEAP32[$3 + 8 >> 2]) {
  HEAP32[$3 + 8 >> 2] = jsvMakeFunctionParameter(HEAP32[$3 + 8 >> 2]);
  jsvSetValueOfName(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
  jsvAddName(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
  jsvUnLock(HEAP32[$3 + 8 >> 2]);
 }
 __stack_pointer = $3 + 16 | 0;
}

function jsiIsInHistory($0) {
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[$1 + 20 >> 2] = jsiGetHistory();
 label$1: {
  if (!HEAP32[$1 + 20 >> 2]) {
   HEAP8[$1 + 31 | 0] = 0;
   break label$1;
  }
  HEAP32[$1 + 16 >> 2] = jsvGetIndexOf(HEAP32[$1 + 20 >> 2], HEAP32[$1 + 24 >> 2], 1);
  HEAP8[$1 + 15 | 0] = HEAP32[$1 + 16 >> 2] != 0;
  jsvUnLock2(HEAP32[$1 + 16 >> 2], HEAP32[$1 + 20 >> 2]);
  HEAP8[$1 + 31 | 0] = HEAP8[$1 + 15 | 0] & 1;
 }
 __stack_pointer = $1 + 32 | 0;
 return HEAP8[$1 + 31 | 0] & 1;
}

function int_20const__20std____2__min_int_2c_20std____2____less_int_2c_20int___28int_20const__2c_20int_20const__2c_20std____2____less_int_2c_20int__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 >> 2] = $1;
 label$1: {
  if (std____2____less_int_2c_20int___operator_28_29_28int_20const__2c_20int_20const__29_20const($2 + 8 | 0, HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2]) & 1) {
   $0 = HEAP32[$2 >> 2];
   break label$1;
  }
  $0 = HEAP32[$2 + 4 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function int_20const__20std____2__max_int_2c_20std____2____less_int_2c_20int___28int_20const__2c_20int_20const__2c_20std____2____less_int_2c_20int__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 >> 2] = $1;
 label$1: {
  if (std____2____less_int_2c_20int___operator_28_29_28int_20const__2c_20int_20const__29_20const($2 + 8 | 0, HEAP32[$2 + 4 >> 2], HEAP32[$2 >> 2]) & 1) {
   $0 = HEAP32[$2 >> 2];
   break label$1;
  }
  $0 = HEAP32[$2 + 4 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function tflite__MicroMutableOpResolver_9u___AddConv2D_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 44 >> 2] = $0;
 $0 = HEAP32[$1 + 44 >> 2];
 tflite__ops__micro__Register_CONV_2D_28_29($1 + 8 | 0);
 $0 = tflite__MicroMutableOpResolver_9u___AddBuiltin_28tflite__BuiltinOperator_2c_20TfLiteRegistration_20const__2c_20TfLiteStatus_20_28__29_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29_29($0, 3, $1 + 8 | 0, 707);
 __stack_pointer = $1 + 48 | 0;
 return $0;
}

function lcdSetPixel_ArrayBuffer_flat8($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $1 = HEAP32[$4 + 12 >> 2];
 $0 = HEAP32[$4 + 12 >> 2];
 HEAP8[(HEAP32[$4 + 8 >> 2] + Math_imul(HEAP32[$4 + 4 >> 2], HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) | 0) + (HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24)) | 0] = HEAP32[$4 >> 2];
}

function lcdInit_JS($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 jsvObjectSetChild(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 117851, HEAP32[$3 + 8 >> 2]);
 $0 = HEAP32[$3 + 12 >> 2];
 jsvObjectSetChild(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), 113270, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function jswrap_pin_toggle($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP8[$1 + 7 | 0] = jshGetPinFromVar(HEAP32[$1 + 8 >> 2]);
 label$1: {
  if (!(jshIsPinValid(HEAPU8[$1 + 7 | 0]) & 1)) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  HEAP8[$1 + 6 | 0] = ((jshPinGetState(HEAPU8[$1 + 7 | 0]) & 16) != 0 ^ -1) & 1;
  jshPinOutput(HEAPU8[$1 + 7 | 0], HEAP8[$1 + 6 | 0] & 1);
  HEAP8[$1 + 15 | 0] = HEAP8[$1 + 6 | 0] & 1;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}

function jsvFindOrCreateRoot() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP16[$0 + 10 >> 1] = 1;
 label$1: {
  while (1) {
   if (HEAPU16[$0 + 10 >> 1] <= 12e3) {
    if (jsvIsRoot(jsvGetAddressOf(HEAPU16[$0 + 10 >> 1])) & 1) {
     HEAP32[$0 + 12 >> 2] = jsvLock(HEAPU16[$0 + 10 >> 1]);
     break label$1;
    } else {
     HEAP16[$0 + 10 >> 1] = HEAPU16[$0 + 10 >> 1] + 1;
     continue;
    }
   }
   break;
  }
  HEAP32[$0 + 12 >> 2] = jsvRef(jsvNewWithFlags(1));
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function jswrap_object_addEventListener($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP16[$4 + 18 >> 1] = $3;
 HEAP32[$4 + 12 >> 2] = jsvNewFromString(HEAP32[$4 + 24 >> 2]);
 HEAP32[$4 + 8 >> 2] = jsvNewNativeFunction(HEAP32[$4 + 20 >> 2], HEAPU16[$4 + 18 >> 1]);
 jswrap_object_on(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2]);
 jsvUnLock2(HEAP32[$4 + 8 >> 2], HEAP32[$4 + 12 >> 2]);
 __stack_pointer = $4 + 32 | 0;
}

function isValidBPP($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = 1;
 label$1: {
  if (HEAP32[$1 + 12 >> 2] == 1) {
   break label$1;
  }
  $0 = 1;
  if (HEAP32[$1 + 12 >> 2] == 2) {
   break label$1;
  }
  $0 = 1;
  if (HEAP32[$1 + 12 >> 2] == 4) {
   break label$1;
  }
  $0 = 1;
  if (HEAP32[$1 + 12 >> 2] == 8) {
   break label$1;
  }
  $0 = 1;
  if (HEAP32[$1 + 12 >> 2] == 16) {
   break label$1;
  }
  $0 = 1;
  if (HEAP32[$1 + 12 >> 2] == 24) {
   break label$1;
  }
  $0 = HEAP32[$1 + 12 >> 2] == 32;
 }
 return $0;
}

function tflite__internal__ContextHelper__GetTensor_28TfLiteContext_20const__2c_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2];
 $0 = HEAP32[HEAP32[$2 + 4 >> 2] >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, HEAP32[HEAP32[$2 + 4 >> 2] + 8 >> 2], HEAP32[HEAP32[$2 + 4 >> 2] + 12 >> 2], HEAP32[$2 + 8 >> 2]) | 0;
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function _jswrap_banglejs_getHealthStatusObject($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvNewObject();
 if (HEAP32[$1 + 8 >> 2]) {
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 8 >> 2], 112968, jsvNewFromInteger(HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2] / HEAPU16[HEAP32[$1 + 12 >> 2] + 8 >> 1] | 0));
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 8 >> 2], 115333, jsvNewFromInteger(HEAPU16[HEAP32[$1 + 12 >> 2] + 10 >> 1]));
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jsiMoveCursorChar($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 if (HEAP32[$3 + 24 >> 2] != HEAP32[$3 + 20 >> 2]) {
  jsvGetLineAndCol(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], $3 + 12 | 0, $3 + 16 | 0);
  jsvGetLineAndCol(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 20 >> 2], $3 + 4 | 0, $3 + 8 | 0);
  jsiMoveCursor(HEAP32[$3 + 16 >> 2], HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 }
 __stack_pointer = $3 + 32 | 0;
}

function jsiExecuteEventCallbackOn($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[86750], HEAP32[$4 + 28 >> 2]);
 HEAP8[$4 + 11 | 0] = jsiExecuteEventCallbackName(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]) & 1;
 jsvUnLock(HEAP32[$4 + 12 >> 2]);
 __stack_pointer = $4 + 32 | 0;
 return HEAP8[$4 + 11 | 0] & 1;
}

function tflite__internal__ContextHelper__ContextHelper_28tflite__ErrorReporter__2c_20tflite__MicroAllocator__2c_20tflite__Model_20const__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$4 + 4 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$4 + 8 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$0 + 16 >> 2] = -1;
 return $0 | 0;
}

function jslInit($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvLockAgain(HEAP32[$1 + 12 >> 2]);
 HEAP32[HEAP32[44743] + 84 >> 2] = $0;
 HEAP16[HEAP32[44743] + 2 >> 1] = 0;
 HEAP32[HEAP32[44743] + 4 >> 2] = 0;
 HEAP32[HEAP32[44743] + 8 >> 2] = 0;
 HEAP8[HEAP32[44743] + 80 | 0] = 0;
 HEAP32[HEAP32[44743] + 76 >> 2] = 0;
 jsvStringIteratorNew(HEAP32[44743] + 88 | 0, HEAP32[HEAP32[44743] + 84 >> 2], 0);
 jsvUnLock(HEAP32[HEAP32[44743] + 100 >> 2]);
 jslPreload();
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_graphics_fillCircle($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = jswrap_graphics_fillEllipse(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2] - HEAP32[$4 >> 2] | 0, HEAP32[$4 + 4 >> 2] - HEAP32[$4 >> 2] | 0, HEAP32[$4 + 8 >> 2] + HEAP32[$4 >> 2] | 0, HEAP32[$4 + 4 >> 2] + HEAP32[$4 >> 2] | 0);
 __stack_pointer = $4 + 16 | 0;
 return $0 | 0;
}

function jswrap_graphics_drawCircle($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = jswrap_graphics_drawEllipse(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2] - HEAP32[$4 >> 2] | 0, HEAP32[$4 + 4 >> 2] - HEAP32[$4 >> 2] | 0, HEAP32[$4 + 8 >> 2] + HEAP32[$4 >> 2] | 0, HEAP32[$4 + 4 >> 2] + HEAP32[$4 >> 2] | 0);
 __stack_pointer = $4 + 16 | 0;
 return $0 | 0;
}

function jspGetPrototype($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!(jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1)) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 8 >> 2], 123007);
  if (jsvIsObject(HEAP32[$1 + 4 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
   break label$1;
  }
  jsvUnLock(HEAP32[$1 + 4 >> 2]);
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsfListFiles($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = jsvNewEmptyArray();
 label$1: {
  if (!HEAP32[$3 + 12 >> 2]) {
   HEAP32[$3 + 28 >> 2] = 0;
   break label$1;
  }
  jsfBankListFiles(HEAP32[$3 + 12 >> 2], 134217728, HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], HEAP32[$3 + 16 >> 2], 0);
  HEAP32[$3 + 28 >> 2] = HEAP32[$3 + 12 >> 2];
 }
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 28 >> 2];
}

function jspIsConstructor($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = jsvObjectGetChildIfExists(HEAP32[86750], HEAP32[$2 + 20 >> 2]);
 label$1: {
  if (!HEAP32[$2 + 16 >> 2]) {
   HEAP8[$2 + 31 | 0] = 0;
   break label$1;
  }
  HEAP8[$2 + 15 | 0] = HEAP32[$2 + 16 >> 2] == HEAP32[$2 + 24 >> 2];
  jsvUnLock(HEAP32[$2 + 16 >> 2]);
  HEAP8[$2 + 31 | 0] = HEAP8[$2 + 15 | 0] & 1;
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP8[$2 + 31 | 0] & 1;
}

function getDay($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = 0;
 label$1: {
  while (1) {
   if (HEAP32[$1 + 4 >> 2] < 7) {
    if (strcmp(HEAP32[$1 + 8 >> 2], HEAP32[44648] + (HEAP32[$1 + 4 >> 2] << 2) | 0)) {
     HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
     continue;
    } else {
     HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
     break label$1;
    }
   }
   break;
  }
  HEAP32[$1 + 12 >> 2] = -1;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jswIdle() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP8[$0 + 15 | 0] = 0;
 if (jswrap_banglejs_idle() & 1) {
  HEAP8[$0 + 15 | 0] = 1;
 }
 if (jswrap_pipe_idle() & 1) {
  HEAP8[$0 + 15 | 0] = 1;
 }
 if (jswrap_serial_idle() & 1) {
  HEAP8[$0 + 15 | 0] = 1;
 }
 if (jswrap_waveform_idle() & 1) {
  HEAP8[$0 + 15 | 0] = 1;
 }
 if (jswrap_graphics_idle() & 1) {
  HEAP8[$0 + 15 | 0] = 1;
 }
 if (jswrap_terminal_idle() & 1) {
  HEAP8[$0 + 15 | 0] = 1;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP8[$0 + 15 | 0] & 1;
}

function jsvUnRef($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP16[$1 + 10 >> 1] = jsvGetRefs(HEAP32[$1 + 12 >> 2]);
 if (HEAPU16[$1 + 10 >> 1] < 255) {
  HEAP16[$1 + 10 >> 1] = HEAPU16[$1 + 10 >> 1] - 1;
  jsvSetRefs(HEAP32[$1 + 12 >> 2], HEAPU16[$1 + 10 >> 1]);
  label$2: {
   if (HEAPU16[$1 + 10 >> 1]) {
    break label$2;
   }
   if (jsvGetLocks(HEAP32[$1 + 12 >> 2]) & 255) {
    break label$2;
   }
   jsvUnLockFreeIfNeeded(HEAP32[$1 + 12 >> 2]);
  }
 }
 __stack_pointer = $1 + 16 | 0;
}

function jsfFindFileFromAddr($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (!(HEAPU32[$2 + 8 >> 2] < 134217728 | HEAPU32[$2 + 8 >> 2] > 142606336)) {
   HEAP32[$2 >> 2] = jsfBankFindFileFromAddr(134217728, 142606336, HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]);
   if (HEAP32[$2 >> 2]) {
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
    break label$1;
   }
  }
  HEAP32[$2 + 12 >> 2] = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jsvCheckReferenceError($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (!(jsvIsBasicName(HEAP32[$1 + 12 >> 2]) & 1)) {
   break label$1;
  }
  if (jsvGetRefs(HEAP32[$1 + 12 >> 2]) & 65535) {
   break label$1;
  }
  if (jsvIsNewChild(HEAP32[$1 + 12 >> 2]) & 1) {
   break label$1;
  }
  if (jsvGetFirstChild(HEAP32[$1 + 12 >> 2]) & 65535) {
   break label$1;
  }
  HEAP32[$1 >> 2] = HEAP32[$1 + 12 >> 2];
  jsExceptionHere(5, 121680, $1);
 }
 __stack_pointer = $1 + 16 | 0;
}

function std____2____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_201_2c_20false_____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_20void__28tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
 return $0;
}

function jsiShouldExecuteWatch($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 HEAP32[$2 + 4 >> 2] = jsvObjectGetIntegerChild(HEAP32[$2 + 12 >> 2], 120335);
 __stack_pointer = $2 + 16 | 0;
 $0 = 1;
 label$1: {
  if (!HEAP32[$2 + 4 >> 2]) {
   break label$1;
  }
  if (HEAP8[$2 + 11 | 0] & 1) {
   $0 = 1;
   if (HEAP32[$2 + 4 >> 2] > 0) {
    break label$1;
   }
  }
  $3 = HEAP8[$2 + 11 | 0] & 1 ? $3 : HEAP32[$2 + 4 >> 2] < 0;
  $0 = $3;
 }
 return $0 & 1;
}

function int_20gemmlowp__SelectUsingMask_int__28int_2c_20int_2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = int_20gemmlowp__BitXor_int__28int_2c_20int_29(int_20gemmlowp__BitAnd_int__28int_2c_20int_29(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]), int_20gemmlowp__BitAnd_int__28int_2c_20int_29(int_20gemmlowp__BitNot_int__28int_29(HEAP32[$3 + 12 >> 2]), HEAP32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function jswrap_graphics_getBPP($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 80 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 72 >> 2] = $0;
 label$1: {
  if (!(graphicsGetFromVar($1, HEAP32[$1 + 72 >> 2]) & 1)) {
   HEAP32[$1 + 76 >> 2] = 0;
   break label$1;
  }
  if ((HEAPU8[$1 + 4 | 0] | HEAPU8[$1 + 5 | 0] << 8 | (HEAPU8[$1 + 6 | 0] << 16 | HEAPU8[$1 + 7 | 0] << 24)) == 6) {
   HEAP32[$1 + 76 >> 2] = 3;
   break label$1;
  }
  HEAP32[$1 + 76 >> 2] = HEAPU8[$1 + 16 | 0];
 }
 __stack_pointer = $1 + 80 | 0;
 return HEAP32[$1 + 76 >> 2];
}

function jswrap_date_setDate($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 60 >> 2] = $0;
 HEAP32[$2 + 56 >> 2] = $1;
 getTimeFromDateVar($2 + 24 | 0, HEAP32[$2 + 60 >> 2], 0);
 getCalendarDate($2, HEAP32[$2 + 24 >> 2]);
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 56 >> 2];
 HEAP32[$2 + 24 >> 2] = fromCalendarDate($2);
 setCorrectTimeZone($2 + 24 | 0);
 $3 = jswrap_date_setTime(HEAP32[$2 + 60 >> 2], fromTimeInDay($2 + 24 | 0));
 __stack_pointer = $2 - -64 | 0;
 return +$3;
}

function jswrap_graphics_reset($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 80 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 72 >> 2] = $0;
 label$1: {
  if (!(graphicsGetFromVar($1, HEAP32[$1 + 72 >> 2]) & 1)) {
   HEAP32[$1 + 76 >> 2] = 0;
   break label$1;
  }
  jsvUnLock(jswrap_graphics_setFontSizeX(HEAP32[$1 + 72 >> 2], 8193, 0));
  graphicsStructResetState($1);
  graphicsSetVar($1);
  HEAP32[$1 + 76 >> 2] = jswrap_graphics_setFontSizeX(HEAP32[$1 + 72 >> 2], 8193, 0);
 }
 __stack_pointer = $1 + 80 | 0;
 return HEAP32[$1 + 76 >> 2];
}

function jshPushIOCharEventHandler($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 14 | 0] = $0;
 HEAP8[$2 + 13 | 0] = $1;
 label$1: {
  label$2: {
   if (HEAP8[$2 + 13 | 0] != 3) {
    break label$2;
   }
   if (HEAPU8[$2 + 14 | 0] != (jsiGetConsoleDevice() & 255)) {
    break label$2;
   }
   jsiCtrlC();
   HEAP8[$2 + 15 | 0] = 1;
   break label$1;
  }
  HEAP8[$2 + 15 | 0] = jswOnCharEvent(HEAPU8[$2 + 14 | 0], HEAP8[$2 + 13 | 0]) & 1;
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP8[$2 + 15 | 0] & 1;
}

function jshPinGetValue($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 HEAP32[$1 + 8 >> 2] = 178799;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP8[$1 + 6 | 0] = 105;
 HEAP8[$1 + 7 | 0] = 0;
 HEAP32[$1 >> 2] = HEAPU8[$1 + 15 | 0];
 HEAP8[$1 + 14 | 0] = (emscripten_asm_const_int($0 | 0, $1 + 6 | 0, $1 | 0) | 0) != 0;
 if (HEAPU8[Math_imul(HEAPU8[$1 + 15 | 0], 3) + 163712 | 0] & 16) {
  HEAP8[$1 + 14 | 0] = (HEAPU8[$1 + 14 | 0] ^ -1) & 1;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 14 | 0] & 1;
}

function lcdMemLCD_setOverlay($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 if (HEAP32[93403]) {
  jsvUnLock(HEAP32[93403]);
 }
 label$2: {
  if (HEAP32[$3 + 12 >> 2]) {
   HEAP32[93403] = jsvLockAgain(HEAP32[$3 + 12 >> 2]);
   HEAP16[186809] = HEAP32[$3 + 8 >> 2];
   HEAP16[186808] = HEAP32[$3 + 4 >> 2];
   break label$2;
  }
  HEAP32[93403] = 0;
  HEAP16[186809] = 0;
  HEAP16[186808] = 0;
 }
 __stack_pointer = $3 + 16 | 0;
}

function tflite__ops__micro__activations__SoftmaxInit_28TfLiteContext__2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  if (!HEAP32[HEAP32[$3 + 12 >> 2] + 56 >> 2]) {
   break label$1;
  }
 }
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$3 + 12 >> 2] + 56 >> 2]](HEAP32[$3 + 12 >> 2], 56) | 0;
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function tflite___28anonymous_20namespace_29__OpNameFromRegistration_28TfLiteRegistration_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (HEAP32[HEAP32[$1 + 8 >> 2] + 20 >> 2] == 32) {
   HEAP32[$1 + 12 >> 2] = HEAP32[HEAP32[$1 + 8 >> 2] + 24 >> 2];
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = tflite__EnumNameBuiltinOperator_28tflite__BuiltinOperator_29(HEAP32[HEAP32[$1 + 8 >> 2] + 20 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function graphicsBlendGfxColor($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = HEAP32[$2 + 12 >> 2];
 $0 = graphicsBlendColor(HEAP32[$2 + 12 >> 2], HEAPU8[$0 + 17 | 0] | HEAPU8[$0 + 18 | 0] << 8 | (HEAPU8[$0 + 19 | 0] << 16 | HEAPU8[$0 + 20 | 0] << 24), HEAPU8[$1 + 21 | 0] | HEAPU8[$1 + 22 | 0] << 8 | (HEAPU8[$1 + 23 | 0] << 16 | HEAPU8[$1 + 24 | 0] << 24), HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function tflite__MicroAllocator__AllocatePersistentTfLiteTensorInternal_28tflite__Model_20const__2c_20TfLiteEvalTensor__2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[HEAP32[$4 + 12 >> 2] + 4 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, 40, 4) | 0;
 __stack_pointer = $4 + 16 | 0;
 return $0 | 0;
}

function tflite__ops__micro__fully_connected__Init_28TfLiteContext__2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  if (!HEAP32[HEAP32[$3 + 12 >> 2] + 56 >> 2]) {
   break label$1;
  }
 }
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$3 + 12 >> 2] + 56 >> 2]](HEAP32[$3 + 12 >> 2], 32) | 0;
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function jsvIsFunction($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
  $0 = 1;
  label$3: {
   if (HEAP8[$1 + 7 | 0] == 7) {
    break label$3;
   }
   $0 = 1;
   if (HEAP8[$1 + 7 | 0] == 9) {
    break label$3;
   }
   $0 = HEAP8[$1 + 7 | 0] == 8;
  }
  HEAP8[$1 + 15 | 0] = $0;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function jslMatchError($0) {
 var $1 = 0;
 $1 = __stack_pointer - 96 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 92 >> 2] = $0;
 jslGetTokenString($1 + 48 | 0, 30);
 jslTokenAsString(HEAP32[$1 + 92 >> 2], $1 + 16 | 0, 30);
 HEAP32[$1 + 12 >> 2] = HEAP32[HEAP32[44743] + 8 >> 2];
 HEAP32[HEAP32[44743] + 8 >> 2] = HEAP32[HEAP32[44743] + 4 >> 2];
 HEAP32[$1 + 4 >> 2] = $1 + 16;
 HEAP32[$1 >> 2] = $1 + 48;
 jsExceptionHere(2, 115929, $1);
 HEAP32[HEAP32[44743] + 8 >> 2] = HEAP32[$1 + 12 >> 2];
 jslGetNextToken();
 __stack_pointer = $1 + 96 | 0;
}

function flatbuffers__Vector_unsigned_20char__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_unsigned_20char__20const___28unsigned_20short_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = flatbuffers__Vector_unsigned_20char__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_unsigned_20char__20const___28unsigned_20short_29(HEAP32[$2 + 12 >> 2], HEAPU16[$2 + 10 >> 1]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__OperatorCode____Get_28unsigned_20int_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = flatbuffers__IndirectHelper_flatbuffers__Offset_tflite__OperatorCode____Read_28unsigned_20char_20const__2c_20unsigned_20int_29(flatbuffers__Vector_flatbuffers__Offset_tflite__OperatorCode____Data_28_29_20const(HEAP32[$2 + 12 >> 2]), HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function tflite__ops__micro__depthwise_conv__Init_28TfLiteContext__2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  if (!HEAP32[HEAP32[$3 + 12 >> 2] + 56 >> 2]) {
   break label$1;
  }
 }
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$3 + 12 >> 2] + 56 >> 2]](HEAP32[$3 + 12 >> 2], 52) | 0;
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function tflite__internal__ContextHelper__ReportOpError_28TfLiteContext__2c_20char_20const__2c_20____29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] + 12 >> 2];
 HEAP32[$3 >> 2] = $2;
 $0 = HEAP32[HEAP32[$3 + 4 >> 2] + 4 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$3 + 8 >> 2], HEAP32[$3 >> 2]) | 0;
 __stack_pointer = $3 + 16 | 0;
}

function jsvGetChildren($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP16[$1 + 6 >> 1] = jsvGetFirstChild(HEAP32[$1 + 12 >> 2]);
 while (1) {
  if (HEAPU16[$1 + 6 >> 1]) {
   HEAP32[$1 >> 2] = jsvLock(HEAPU16[$1 + 6 >> 1]);
   HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
   HEAP16[$1 + 6 >> 1] = jsvGetNextSibling(HEAP32[$1 >> 2]);
   jsvUnLock(HEAP32[$1 >> 2]);
   continue;
  }
  break;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jsiHandleEnd() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = jsvGetStringLength(HEAP32[86768]);
 while (1) {
  $1 = 0;
  if (HEAPU32[86770] < HEAPU32[$0 + 12 >> 2]) {
   $1 = (jsvGetCharInString(HEAP32[86768], HEAP32[86770]) | 0) != 10;
  }
  if ($1) {
   if (jsiShowInputLine() & 1) {
    jsiConsolePrintChar(jsvGetCharInString(HEAP32[86768], HEAP32[86770]) << 24 >> 24);
   }
   HEAP32[86770] = HEAP32[86770] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $0 + 16 | 0;
}

function std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator_20bool_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[std____2____compressed_pair_TfLiteFullyConnectedParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const(HEAP32[$1 + 12 >> 2]) >> 2];
 __stack_pointer = $1 + 16 | 0;
 return ($0 | 0) != 0;
}

function jswrap_string_charAt_undefined($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 24 >> 2] = $0;
 HEAP32[$2 + 20 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = _jswrap_string_charCodeAt(HEAP32[$2 + 24 >> 2], HEAP32[$2 + 20 >> 2]);
 label$1: {
  if (HEAP32[$2 + 16 >> 2] < 0) {
   HEAP32[$2 + 28 >> 2] = 0;
   break label$1;
  }
  HEAP8[$2 + 15 | 0] = HEAP32[$2 + 16 >> 2];
  HEAP32[$2 + 28 >> 2] = jsvNewStringOfLength(1, $2 + 15 | 0);
 }
 __stack_pointer = $2 + 32 | 0;
 return HEAP32[$2 + 28 >> 2];
}

function tflite__ops__micro__dequantize__Init_28TfLiteContext__2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  if (!HEAP32[HEAP32[$3 + 12 >> 2] + 56 >> 2]) {
   break label$1;
  }
 }
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$3 + 12 >> 2] + 56 >> 2]](HEAP32[$3 + 12 >> 2], 32) | 0;
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator_20bool_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[std____2____compressed_pair_TfLiteDepthwiseConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const(HEAP32[$1 + 12 >> 2]) >> 2];
 __stack_pointer = $1 + 16 | 0;
 return ($0 | 0) != 0;
}

function jswrap_graphics_getPixel($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 96 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 88 >> 2] = $0;
 HEAP32[$3 + 84 >> 2] = $1;
 HEAP32[$3 + 80 >> 2] = $2;
 label$1: {
  if (!(graphicsGetFromVar($3 + 8 | 0, HEAP32[$3 + 88 >> 2]) & 1)) {
   HEAP32[$3 + 92 >> 2] = 0;
   break label$1;
  }
  HEAP32[$3 + 92 >> 2] = graphicsGetPixel($3 + 8 | 0, HEAP32[$3 + 84 >> 2], HEAP32[$3 + 80 >> 2]);
 }
 __stack_pointer = $3 + 96 | 0;
 return HEAP32[$3 + 92 >> 2];
}

function jswrap_espruino_memoryArea($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (!(HEAP32[$2 + 4 >> 2] >= 0 ? HEAP32[$2 + 8 >> 2] : 0)) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 >> 2] = jshFlashGetMemMapAddress(HEAP32[$2 + 8 >> 2]);
  HEAP32[$2 + 12 >> 2] = jsvNewNativeString(HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function tflite__ops__micro__quantize__Init_28TfLiteContext__2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  if (!HEAP32[HEAP32[$3 + 12 >> 2] + 56 >> 2]) {
   break label$1;
  }
 }
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$3 + 12 >> 2] + 56 >> 2]](HEAP32[$3 + 12 >> 2], 32) | 0;
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function jsiHandleIOEventForConsole($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = ((HEAPU8[HEAP32[$1 + 12 >> 2]] & 96) >>> 5 | 0) + 1;
 jsiSetBusy(1, 1);
 HEAP32[$1 + 8 >> 2] = 0;
 while (1) {
  if (HEAP32[$1 + 8 >> 2] < HEAP32[$1 + 4 >> 2]) {
   jsiHandleChar(HEAP8[HEAP32[$1 + 8 >> 2] + (HEAP32[$1 + 12 >> 2] + 1 | 0) | 0]);
   HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 jsiSetBusy(1, 0);
 __stack_pointer = $1 + 16 | 0;
}

function tflite__ops__micro__pooling__Init_28TfLiteContext__2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  if (!HEAP32[HEAP32[$3 + 12 >> 2] + 56 >> 2]) {
   break label$1;
  }
 }
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$3 + 12 >> 2] + 56 >> 2]](HEAP32[$3 + 12 >> 2], 32) | 0;
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function strncmp($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 if (!$2) {
  return 0;
 }
 $3 = HEAPU8[$0 | 0];
 label$2: {
  if (!$3) {
   break label$2;
  }
  while (1) {
   label$4: {
    $4 = HEAPU8[$1 | 0];
    if (!$4) {
     break label$4;
    }
    $2 = $2 - 1 | 0;
    if (!$2 | ($3 | 0) != ($4 | 0)) {
     break label$4;
    }
    $1 = $1 + 1 | 0;
    $3 = HEAPU8[$0 + 1 | 0];
    $0 = $0 + 1 | 0;
    if ($3) {
     continue;
    }
    break label$2;
   }
   break;
  }
  $5 = $3;
 }
 return ($5 & 255) - HEAPU8[$1 | 0] | 0;
}

function tflite__MicroAllocator__MicroAllocator_28tflite__SimpleMemoryAllocator__2c_20tflite__ErrorReporter__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 >> 2] = 172652;
 HEAP32[$0 + 4 >> 2] = HEAP32[$3 + 8 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$3 + 4 >> 2];
 HEAP8[$0 + 12 | 0] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 return $0 | 0;
}

function jswrap_graphics_clearRect($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 $0 = _jswrap_graphics_fillRect_col(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 12 >> 2], 0);
 __stack_pointer = $5 + 32 | 0;
 return $0 | 0;
}

function jshGetPinFromVar($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!(!(jsvIsString(HEAP32[$1 + 8 >> 2]) & 1) | HEAP8[HEAP32[$1 + 8 >> 2] + 5 | 0])) {
   HEAP8[$1 + 15 | 0] = jshGetPinFromString(HEAP32[$1 + 8 >> 2]);
   break label$1;
  }
  if (jsvIsInt(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP8[$1 + 15 | 0] = jsvGetInteger(HEAP32[$1 + 8 >> 2]);
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = 255;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAPU8[$1 + 15 | 0];
}

function tflite__ops__micro__conv__Init_28TfLiteContext__2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  if (!HEAP32[HEAP32[$3 + 12 >> 2] + 56 >> 2]) {
   break label$1;
  }
 }
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$3 + 12 >> 2] + 56 >> 2]](HEAP32[$3 + 12 >> 2], 52) | 0;
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function tflite__RuntimeShape__Dims_28int_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 label$1: {
  if (HEAP32[$2 + 8 >> 2] < 0) {
   break label$1;
  }
 }
 label$2: {
  if (HEAP32[$2 + 8 >> 2] >= HEAP32[$0 >> 2]) {
   break label$2;
  }
 }
 if (HEAP32[$0 >> 2] > 5) {
  $0 = HEAP32[HEAP32[$0 + 4 >> 2] + (HEAP32[$2 + 8 >> 2] << 2) >> 2];
 } else {
  $0 = HEAP32[($0 + 4 | 0) + (HEAP32[$2 + 8 >> 2] << 2) >> 2];
 }
 return $0;
}

function jswrap_graphics_fillRect($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 $0 = _jswrap_graphics_fillRect_col(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 12 >> 2], 1);
 __stack_pointer = $5 + 32 | 0;
 return $0 | 0;
}

function jswrap_espruino_setBootCode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 label$1: {
  if (jsvIsString(HEAP32[$2 + 12 >> 2]) & 1) {
   HEAP32[$2 + 12 >> 2] = jsvLockAgain(HEAP32[$2 + 12 >> 2]);
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jsvNewFromEmptyString_9();
 }
 jsfSaveBootCodeToFlash(HEAP32[$2 + 12 >> 2], HEAP8[$2 + 11 | 0] & 1);
 jsvUnLock(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function graphicsClear($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$1 + 12 >> 2];
 $0 = HEAP32[$1 + 12 >> 2];
 graphicsFillRectDevice(HEAP32[$1 + 12 >> 2], 0, 0, (HEAPU8[$2 + 12 | 0] | HEAPU8[$2 + 13 | 0] << 8) - 1 | 0, (HEAPU8[$3 + 14 | 0] | HEAPU8[$3 + 15 | 0] << 8) - 1 | 0, HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24));
 __stack_pointer = $1 + 16 | 0;
}

function jsiQueueObjectCallbacks($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2]);
 if (HEAP32[$4 + 12 >> 2]) {
  jsiQueueEvents(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 12 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
  jsvUnLock(HEAP32[$4 + 12 >> 2]);
 }
 __stack_pointer = $4 + 32 | 0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph____Get_28unsigned_20int_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = flatbuffers__IndirectHelper_flatbuffers__Offset_tflite__SubGraph____Read_28unsigned_20char_20const__2c_20unsigned_20int_29(flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph____Data_28_29_20const(HEAP32[$2 + 12 >> 2]), HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Operator____Get_28unsigned_20int_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = flatbuffers__IndirectHelper_flatbuffers__Offset_tflite__Operator____Read_28unsigned_20char_20const__2c_20unsigned_20int_29(flatbuffers__Vector_flatbuffers__Offset_tflite__Operator____Data_28_29_20const(HEAP32[$2 + 12 >> 2]), HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Metadata____Get_28unsigned_20int_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = flatbuffers__IndirectHelper_flatbuffers__Offset_tflite__Metadata____Read_28unsigned_20char_20const__2c_20unsigned_20int_29(flatbuffers__Vector_flatbuffers__Offset_tflite__Metadata____Data_28_29_20const(HEAP32[$2 + 12 >> 2]), HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function tflite___28anonymous_20namespace_29__MicroBuiltinDataAllocator__Allocate_28unsigned_20long_2c_20unsigned_20long_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[HEAP32[$3 + 12 >> 2] + 4 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]) | 0;
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function flatbuffers__IndirectHelper_flatbuffers__Offset_tflite__OperatorCode____Read_28unsigned_20char_20const__2c_20unsigned_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 2);
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 + $1 | 0;
}

function jsvUnLockInline($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 12 >> 2]) {
   break label$1;
  }
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) - 1024 | 0;
  HEAP8[$0 + 12 | 0] = $2;
  HEAP8[$0 + 13 | 0] = $2 >>> 8;
  HEAP16[$1 + 10 >> 1] = $2;
  if (HEAPU16[$1 + 10 >> 1] & 15360) {
   break label$1;
  }
  jsvUnLockFreeIfNeeded(HEAP32[$1 + 12 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
}

function jslGetTokenValueAsString() {
 var $0 = 0;
 HEAP8[HEAPU8[HEAP32[44743] + 80 | 0] + (HEAP32[44743] + 12 | 0) | 0] = 0;
 if (!(HEAPU8[HEAP32[44743] + 80 | 0] | HEAP16[HEAP32[44743] + 2 >> 1] < 163 | HEAP16[HEAP32[44743] + 2 >> 1] > 198)) {
  jslTokenAsString(HEAP16[HEAP32[44743] + 2 >> 1], HEAP32[44743] + 12 | 0, 64);
  strcpy(HEAP32[44743] + 12 | 0, jslReservedWordAsString(HEAP16[HEAP32[44743] + 2 >> 1]));
  $0 = strlen(HEAP32[44743] + 12 | 0);
  HEAP8[HEAP32[44743] + 80 | 0] = $0;
 }
 return HEAP32[44743] + 12 | 0;
}

function _jswrap_io_poke($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  if (HEAP32[$3 + 4 >> 2] == 1) {
   HEAP8[HEAP32[$3 + 12 >> 2]] = HEAP32[$3 + 8 >> 2];
   break label$1;
  }
  label$3: {
   if (HEAP32[$3 + 4 >> 2] == 2) {
    HEAP16[HEAP32[$3 + 12 >> 2] >> 1] = HEAP32[$3 + 8 >> 2];
    break label$3;
   }
   if (HEAP32[$3 + 4 >> 2] == 4) {
    HEAP32[HEAP32[$3 + 12 >> 2] >> 2] = HEAP32[$3 + 8 >> 2];
   }
  }
 }
}

function mbedtls_sha512($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 240 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 236 >> 2] = $0;
 HEAP32[$4 + 232 >> 2] = $1;
 HEAP32[$4 + 228 >> 2] = $2;
 HEAP32[$4 + 224 >> 2] = $3;
 mbedtls_sha512_init($4 + 8 | 0);
 mbedtls_sha512_starts($4 + 8 | 0, HEAP32[$4 + 224 >> 2]);
 mbedtls_sha512_update($4 + 8 | 0, HEAP32[$4 + 236 >> 2], HEAP32[$4 + 232 >> 2]);
 mbedtls_sha512_finish($4 + 8 | 0, HEAP32[$4 + 228 >> 2]);
 mbedtls_sha512_free($4 + 8 | 0);
 __stack_pointer = $4 + 240 | 0;
}

function jswrap_banglejs_setLCDOverlay($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 lcdMemLCD_setOverlay(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 HEAP8[349500] = 0;
 HEAP8[349501] = 0;
 HEAP8[349502] = 0;
 HEAP8[349503] = 0;
 HEAP8[349504] = 175;
 HEAP8[349505] = 0;
 HEAP8[349506] = 175;
 HEAP8[349507] = 0;
 __stack_pointer = $3 + 16 | 0;
}

function float_20tflite__ActivationFunctionWithMinMax_float__28float_2c_20float_2c_20float_29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAPF32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $4 = float_20const__20std____2__min_float__28float_20const__2c_20float_20const__29(float_20const__20std____2__max_float__28float_20const__2c_20float_20const__29($3 + 12 | 0, $3 + 8 | 0), $3 + 4 | 0);
 __stack_pointer = $3 + 16 | 0;
 return HEAPF32[$4 >> 2];
}

function tflite___28anonymous_20namespace_29__AllocationInfoBuilder__Init_28unsigned_20long_2c_20unsigned_20long_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$3 + 4 >> 2];
 $0 = tflite___28anonymous_20namespace_29__AllocationInfoBuilder__Allocate_28_29($0);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function flatbuffers__Vector_long_20long__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_long_20long__20const___28unsigned_20short_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = flatbuffers__Vector_long_20long__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_long_20long__20const___28unsigned_20short_29(HEAP32[$2 + 12 >> 2], HEAPU16[$2 + 10 >> 1]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function std____2__unique_ptr_TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator_20bool_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[std____2____compressed_pair_TfLiteSoftmaxParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const(HEAP32[$1 + 12 >> 2]) >> 2];
 __stack_pointer = $1 + 16 | 0;
 return ($0 | 0) != 0;
}

function std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator_20bool_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[std____2____compressed_pair_TfLiteReshapeParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const(HEAP32[$1 + 12 >> 2]) >> 2];
 __stack_pointer = $1 + 16 | 0;
 return ($0 | 0) != 0;
}

function jswrap_json_parse_ext($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 160 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 156 >> 2] = $0;
 HEAP32[$2 + 152 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = jsvAsString(HEAP32[$2 + 156 >> 2]);
 HEAP32[$2 + 16 >> 2] = jslSetLex($2 + 24 | 0);
 jslInit(HEAP32[$2 + 20 >> 2]);
 jsvUnLock(HEAP32[$2 + 20 >> 2]);
 HEAP32[$2 + 12 >> 2] = jswrap_json_parse_internal(HEAP32[$2 + 152 >> 2]);
 jslKill();
 jslSetLex(HEAP32[$2 + 16 >> 2]);
 __stack_pointer = $2 + 160 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jspFindPrototypeFor($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[86750], HEAP32[$1 + 8 >> 2]);
 label$1: {
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 4 >> 2], 119810);
  jsvUnLock(HEAP32[$1 + 4 >> 2]);
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function flatbuffers__IndirectHelper_flatbuffers__Offset_tflite__SubGraph____Read_28unsigned_20char_20const__2c_20unsigned_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 2);
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 + $1 | 0;
}

function flatbuffers__IndirectHelper_flatbuffers__Offset_tflite__Operator____Read_28unsigned_20char_20const__2c_20unsigned_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 2);
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 + $1 | 0;
}

function flatbuffers__IndirectHelper_flatbuffers__Offset_tflite__Metadata____Read_28unsigned_20char_20const__2c_20unsigned_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 2);
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 + $1 | 0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor____Get_28unsigned_20int_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = flatbuffers__IndirectHelper_flatbuffers__Offset_tflite__Tensor____Read_28unsigned_20char_20const__2c_20unsigned_20int_29(flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor____Data_28_29_20const(HEAP32[$2 + 12 >> 2]), HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer____Get_28unsigned_20int_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = flatbuffers__IndirectHelper_flatbuffers__Offset_tflite__Buffer____Read_28unsigned_20char_20const__2c_20unsigned_20int_29(flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer____Data_28_29_20const(HEAP32[$2 + 12 >> 2]), HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_TfLiteFullyConnectedParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$0 >> 2];
}

function flatbuffers__IndirectHelper_flatbuffers__Offset_tflite__Tensor____Read_28unsigned_20char_20const__2c_20unsigned_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 2);
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 + $1 | 0;
}

function flatbuffers__IndirectHelper_flatbuffers__Offset_tflite__Buffer____Read_28unsigned_20char_20const__2c_20unsigned_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 2);
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 + $1 | 0;
}

function std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 std____2__unique_ptr_TfLiteFullyConnectedParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___reset_28TfLiteFullyConnectedParams__29($0, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__QuantizeMultiplierGreaterThanOne_28double_2c_20int__2c_20int__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAPF64[$3 + 8 >> 3] = $0;
 HEAP32[$3 + 4 >> 2] = $1;
 HEAP32[$3 >> 2] = $2;
 if (!(HEAPF64[$3 + 8 >> 3] > 1)) {
  abort();
  abort();
 }
 tflite__QuantizeMultiplier_28double_2c_20int__2c_20int__29(HEAPF64[$3 + 8 >> 3], HEAP32[$3 + 4 >> 2], HEAP32[$3 >> 2]);
 if (HEAP32[HEAP32[$3 >> 2] >> 2] < 0) {
  abort();
  abort();
 }
 __stack_pointer = $3 + 16 | 0;
}

function strlen($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = $0;
 label$1: {
  if ($1 & 3) {
   while (1) {
    if (!HEAPU8[$1 | 0]) {
     break label$1;
    }
    $1 = $1 + 1 | 0;
    if ($1 & 3) {
     continue;
    }
    break;
   }
  }
  while (1) {
   $2 = $1;
   $1 = $1 + 4 | 0;
   $3 = HEAP32[$2 >> 2];
   if (!(($3 ^ -1) & $3 - 16843009 & -2139062144)) {
    continue;
   }
   break;
  }
  while (1) {
   $1 = $2;
   $2 = $1 + 1 | 0;
   if (HEAPU8[$1 | 0]) {
    continue;
   }
   break;
  }
 }
 return $1 - $0 | 0;
}

function std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_TfLiteDepthwiseConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$0 >> 2];
}

function push_literal_byte($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP16[$2 + 6 >> 1] = HEAPU16[HEAP32[$2 + 12 >> 2] + 2 >> 1] - 1;
 HEAP16[$2 + 4 >> 1] = (get_input_offset(HEAP32[$2 + 12 >> 2]) & 65535) + HEAPU16[$2 + 6 >> 1];
 HEAP8[$2 + 3 | 0] = HEAPU8[HEAPU16[$2 + 4 >> 1] + (HEAP32[$2 + 12 >> 2] + 15 | 0) | 0];
 push_bits(HEAP32[$2 + 12 >> 2], 8, HEAPU8[$2 + 3 | 0], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function jswrap_banglejs_kill() {
 jsvUnLock(HEAP32[93453]);
 HEAP32[93453] = 0;
 jsvUnLock(HEAP32[93454]);
 HEAP32[93454] = 0;
 if (HEAPU16[186897]) {
  jswrap_banglejs_beep_callback();
 }
 if (HEAPU8[373792]) {
  jswrap_banglejs_buzz_callback();
 }
 jshPinWatch(17, 0, 0);
 jshSetPinShouldStayWatched(17, 0);
 lcdMemLCD_setOverlay(0, 0, 0);
 jsvUnLock(HEAPU8[349460] | HEAPU8[349461] << 8 | (HEAPU8[349462] << 16 | HEAPU8[349463] << 24));
 HEAP8[349460] = 0;
 HEAP8[349461] = 0;
 HEAP8[349462] = 0;
 HEAP8[349463] = 0;
}

function std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator_20bool_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[std____2____compressed_pair_TfLitePoolParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const(HEAP32[$1 + 12 >> 2]) >> 2];
 __stack_pointer = $1 + 16 | 0;
 return ($0 | 0) != 0;
}

function std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 std____2__unique_ptr_TfLiteDepthwiseConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___reset_28TfLiteDepthwiseConvParams__29($0, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator_20bool_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[std____2____compressed_pair_TfLiteConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const(HEAP32[$1 + 12 >> 2]) >> 2];
 __stack_pointer = $1 + 16 | 0;
 return ($0 | 0) != 0;
}

function jswrap_object_keys_or_property_names($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP32[$2 >> 2] = jsvNewEmptyArray();
 label$1: {
  if (!HEAP32[$2 >> 2]) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  jswrap_object_keys_or_property_names_cb(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2], 597, HEAP32[$2 >> 2]);
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function tflite__QuantizationParameters_20const__20flatbuffers__Table__GetPointer_tflite__QuantizationParameters_20const___28unsigned_20short_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = tflite__QuantizationParameters_20const__20flatbuffers__Table__GetPointer_tflite__QuantizationParameters_20const___28unsigned_20short_29(HEAP32[$2 + 12 >> 2], HEAPU16[$2 + 10 >> 1]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jswrap_string_charCodeAt($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP32[$2 >> 2] = _jswrap_string_charCodeAt(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]);
 label$1: {
  if (HEAP32[$2 >> 2] < 0) {
   HEAP32[$2 + 12 >> 2] = jsvNewFromFloat(nan);
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jsvNewFromInteger(HEAP32[$2 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jsvArrayBufferIteratorSetValueAndRewind($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP32[$2 + 40 >> 2] = $1;
 jsvStringIteratorClone($2, HEAP32[$2 + 44 >> 2]);
 jsvArrayBufferIteratorSetValue(HEAP32[$2 + 44 >> 2], HEAP32[$2 + 40 >> 2], 0);
 jsvStringIteratorFree_2(HEAP32[$2 + 44 >> 2]);
 jsvStringIteratorClone(HEAP32[$2 + 44 >> 2], $2);
 jsvStringIteratorFree_2($2);
 HEAP8[HEAP32[$2 + 44 >> 2] + 52 | 0] = 0;
 __stack_pointer = $2 + 48 | 0;
}

function jshSleep($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $1;
 HEAPF64[$2 >> 3] = jshGetMillisecondsFromTime(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2]);
 if (HEAPF64[$2 >> 3] > 2147483647) {
  HEAPF64[$2 >> 3] = 2147483647;
 }
 $3 = HEAPF64[$2 >> 3];
 label$2: {
  if (Math_abs($3) < 2147483648) {
   $0 = ~~$3;
   break label$2;
  }
  $0 = -2147483648;
 }
 HEAP32[44638] = $0;
 __stack_pointer = $2 + 16 | 0;
 return 0;
}

function tflite__OpResolver__GetDelegates_28int_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 std____2__vector_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29__2c_20std____2__allocator_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29_____vector_28_29($0);
 __stack_pointer = $3 + 16 | 0;
}

function jswrap_array_findIndex($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP32[$2 >> 2] = _jswrap_array_iterate_with_callback(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2], 0, 3, 1, 1);
 label$1: {
  if (HEAP32[$2 >> 2]) {
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jsvNewFromInteger(-1);
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jsvArrayBufferIteratorHasElement($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAPU8[HEAP32[$1 + 8 >> 2] + 36 | 0]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  if (HEAP8[HEAP32[$1 + 8 >> 2] + 52 | 0] & 1) {
   HEAP8[$1 + 15 | 0] = 1;
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = HEAPU32[HEAP32[$1 + 8 >> 2] + 40 >> 2] >= HEAP32[HEAP32[$1 + 8 >> 2] + 44 >> 2] + (HEAPU8[HEAP32[$1 + 8 >> 2] + 36 | 0] & 15) >>> 0;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function jspExecuteJSFunction($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = jspEvaluate(HEAP32[$4 + 28 >> 2], 1);
 HEAP32[$4 + 8 >> 2] = jspExecuteFunction(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
 jsvUnLock(HEAP32[$4 + 12 >> 2]);
 __stack_pointer = $4 + 32 | 0;
 return HEAP32[$4 + 8 >> 2];
}

function lcdGetPixel_ArrayBuffer_flat8($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $1 = HEAP32[$3 + 12 >> 2];
 $0 = HEAP32[$3 + 12 >> 2];
 return HEAPU8[(HEAP32[$3 + 8 >> 2] + Math_imul(HEAP32[$3 + 4 >> 2], HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8) | 0) + (HEAPU8[$0 + 48 | 0] | HEAPU8[$0 + 49 | 0] << 8 | (HEAPU8[$0 + 50 | 0] << 16 | HEAPU8[$0 + 51 | 0] << 24)) | 0];
}

function jswrap_promise_then($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 _jswrap_promise_add(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], 1);
 if (HEAP32[$3 + 4 >> 2]) {
  _jswrap_promise_add(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 4 >> 2], 0);
 }
 $0 = jswrap_promise_get_chained_promise(HEAP32[$3 + 12 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function jsiReplaceInputLine($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (jsiShowInputLine() & 1) {
  jsiMoveCursorChar(HEAP32[86768], HEAP32[86770], 0);
  jsiConsoleEraseAfterCursor();
  jsiConsolePrintStringVarWithNewLineChar(HEAP32[$1 + 12 >> 2], 0, 58);
 }
 jsiInputLineCursorMoved();
 jsvUnLock(HEAP32[86768]);
 HEAP32[86768] = jsvLockAgain(HEAP32[$1 + 12 >> 2]);
 HEAP32[86770] = jsvGetStringLength(HEAP32[86768]);
 __stack_pointer = $1 + 16 | 0;
}

function jsfCompact($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 14 | 0] = $0;
 label$1: {
  if ((jswrap_banglejs_getBattery() | 0) < 10) {
   jsiConsolePrintf(144537, 0);
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  jsfCacheClear();
  HEAP32[86759] = 0;
  HEAP32[86760] = 0;
  HEAP8[$1 + 13 | 0] = jsfBankCompact(134217728, HEAP8[$1 + 14 | 0] & 1) & 1;
  HEAP8[$1 + 15 | 0] = HEAP8[$1 + 13 | 0] & 1;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}

function jsvArrayBufferIteratorDataToFloat($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 32 | 0;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 HEAP32[$2 + 20 >> 2] = HEAPU8[HEAP32[$2 + 28 >> 2] + 36 | 0] & 15;
 HEAPF64[$2 + 8 >> 3] = 0;
 label$1: {
  if (HEAP32[$2 + 20 >> 2] == 4) {
   HEAPF64[$2 + 8 >> 3] = HEAPF32[HEAP32[$2 + 24 >> 2] >> 2];
   break label$1;
  }
  if (HEAP32[$2 + 20 >> 2] == 8) {
   HEAPF64[$2 + 8 >> 3] = HEAPF64[HEAP32[$2 + 24 >> 2] >> 3];
  }
 }
 return HEAPF64[$2 + 8 >> 3];
}

function graphicsGetSetPixelFn($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 label$1: {
  if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 112) {
   HEAP32[$1 + 12 >> 2] = 571;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP32[$1 + 12 >> 2] = HEAPU8[$0 + 52 | 0] | HEAPU8[$0 + 53 | 0] << 8 | (HEAPU8[$0 + 54 | 0] << 16 | HEAPU8[$0 + 55 | 0] << 24);
 }
 return HEAP32[$1 + 12 >> 2];
}

function void_20std____2____debug_db_insert_c_std____2__vector_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29__2c_20std____2__allocator_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29_____28std____2__vector_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29__2c_20std____2__allocator_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29_____29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function std____2____compressed_pair_elem_std____2__allocator_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29___2c_201_2c_20true_____compressed_pair_elem_28std____2____default_init_tag_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 4 >> 2] = $0;
 $0 = HEAP32[$1 + 4 >> 2];
 std____2__allocator_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29____allocator_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jsvFindOrAddChildFromString($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = jsvFindChildFromString(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 if (!HEAP32[$2 + 4 >> 2]) {
  HEAP32[$2 + 4 >> 2] = jsvNewNameFromString(HEAP32[$2 + 8 >> 2]);
  if (HEAP32[$2 + 4 >> 2]) {
   jsvAddName(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2]);
  }
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 4 >> 2];
}

function std____2__unique_ptr_TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_TfLiteSoftmaxParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$0 >> 2];
}

function std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_TfLiteReshapeParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$0 >> 2];
}

function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SaturatingRoundingMultiplyByPOT__2_2c_20int_2c_200__28gemmlowp__FixedPoint_int_2c_200__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromRaw_28int_29(int_20gemmlowp__SaturatingRoundingMultiplyByPOT__2_2c_20int__28int_29(HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($1) >> 2]));
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__SaturatingRoundingMultiplyByPOT__1_2c_20int_2c_200__28gemmlowp__FixedPoint_int_2c_200__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromRaw_28int_29(int_20gemmlowp__SaturatingRoundingMultiplyByPOT__1_2c_20int__28int_29(HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($1) >> 2]));
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jsiAppendToInputLine($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (!HEAP32[86777]) {
  jsvStringIteratorNew(347096, HEAP32[86768], 0);
  jsvStringIteratorGotoEnd(347096);
 }
 while (1) {
  if (HEAPU8[HEAP32[$1 + 12 >> 2]]) {
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$1 + 12 >> 2] = $0 + 1;
   jsvStringIteratorAppend(347096, HEAP8[$0 | 0]);
   HEAP32[44637] = HEAP32[44637] + 1;
   continue;
  }
  break;
 }
 __stack_pointer = $1 + 16 | 0;
}

function jsfGetJSONWhitespace($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer + -64 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 60 >> 2] = $0;
 HEAP32[$4 + 56 >> 2] = $1;
 HEAP32[$4 + 52 >> 2] = $2;
 HEAP32[$4 + 48 >> 2] = $3;
 jsvStringIteratorNew($4 + 8 | 0, HEAP32[$4 + 56 >> 2], 0);
 jsvStringIteratorGotoEnd($4 + 8 | 0);
 jsfGetJSONWithCallback(HEAP32[$4 + 60 >> 2], 0, HEAP32[$4 + 52 >> 2], HEAP32[$4 + 48 >> 2], 2, $4 + 8 | 0);
 jsvStringIteratorFree_8($4 + 8 | 0);
 __stack_pointer = $4 - -64 | 0;
}

function tflite__ElementCount_28TfLiteIntArray_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 1;
 HEAP32[$1 + 4 >> 2] = 0;
 while (1) {
  if (HEAP32[$1 + 4 >> 2] < HEAP32[HEAP32[$1 + 12 >> 2] >> 2]) {
   HEAP32[$1 + 8 >> 2] = Math_imul(HEAP32[(HEAP32[$1 + 12 >> 2] + 4 | 0) + (HEAP32[$1 + 4 >> 2] << 2) >> 2], HEAP32[$1 + 8 >> 2]);
   HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
   continue;
  }
  break;
 }
 return HEAP32[$1 + 8 >> 2];
}

function jsvGetLinesInString($0) {
 var $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 44 >> 2] = $0;
 HEAP32[$1 + 40 >> 2] = 1;
 jsvStringIteratorNew($1, HEAP32[$1 + 44 >> 2], 0);
 while (1) {
  if (jsvStringIteratorHasChar_1($1) & 1) {
   if ((jsvStringIteratorGetCharAndNext($1) & 255) == 10) {
    HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
   }
   continue;
  }
  break;
 }
 jsvStringIteratorFree_1($1);
 __stack_pointer = $1 + 48 | 0;
 return HEAP32[$1 + 40 >> 2];
}

function jspGetPrototypeOwner($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  label$2: {
   if (!(jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1)) {
    if (!(jsvIsArray(HEAP32[$1 + 8 >> 2]) & 1)) {
     break label$2;
    }
   }
   HEAP32[$1 + 12 >> 2] = jsvSkipNameAndUnLock(jsvObjectGetChildIfExists(HEAP32[$1 + 8 >> 2], 116071));
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvMakeFunctionParameter($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (!(jsvIsName(HEAP32[$1 + 12 >> 2]) & 1)) {
  HEAP32[$1 + 12 >> 2] = jsvMakeIntoVariableName(HEAP32[$1 + 12 >> 2], 0);
 }
 $0 = HEAP32[$1 + 12 >> 2];
 $2 = HEAP32[$1 + 12 >> 2];
 $2 = HEAPU8[$2 + 12 | 0] | HEAPU8[$2 + 13 | 0] << 8 | 128;
 HEAP8[$0 + 12 | 0] = $2;
 HEAP8[$0 + 13 | 0] = $2 >>> 8;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jshGetEventFlagsForPin($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 14 | 0] = $0;
 HEAP32[$1 + 8 >> 2] = 0;
 label$1: {
  while (1) {
   if (HEAP32[$1 + 8 >> 2] < 16) {
    if (HEAPU8[HEAP32[$1 + 8 >> 2] + 373632 | 0] == HEAPU8[$1 + 14 | 0]) {
     HEAP8[$1 + 15 | 0] = HEAP32[$1 + 8 >> 2] + 1;
     break label$1;
    } else {
     HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
     continue;
    }
   }
   break;
  }
  HEAP8[$1 + 15 | 0] = 0;
 }
 return HEAPU8[$1 + 15 | 0];
}

function std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_TfLitePoolParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$0 >> 2];
}

function std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___operator___28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_TfLiteConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$0 >> 2];
}

function st_tag_bit($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = get_bits(HEAP32[$1 + 8 >> 2], 1) & 65535;
 label$1: {
  if (HEAP32[$1 + 4 >> 2] == 65535) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  if (HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 1;
   break label$1;
  }
  HEAP16[HEAP32[$1 + 8 >> 2] + 6 >> 1] = 0;
  HEAP32[$1 + 12 >> 2] = 3;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jshPinInput($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 HEAP8[$1 + 14 | 0] = 0;
 label$1: {
  if (jshIsPinValid(HEAPU8[$1 + 15 | 0]) & 1) {
   if (!(jshGetPinStateIsManual(HEAPU8[$1 + 15 | 0]) & 1)) {
    jshPinSetState(HEAPU8[$1 + 15 | 0], 4);
   }
   HEAP8[$1 + 14 | 0] = jshPinGetValue(HEAPU8[$1 + 15 | 0]) & 1;
   break label$1;
  }
  jsExceptionHere(1, 117533, 0);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 14 | 0] & 1;
}

function flatbuffers__Vector_float__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_float__20const___28unsigned_20short_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = flatbuffers__Vector_float__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_float__20const___28unsigned_20short_29(HEAP32[$2 + 12 >> 2], HEAPU16[$2 + 10 >> 1]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function _jswrap_promise_is_promise($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jspGetConstructor(HEAP32[$1 + 12 >> 2]);
 if (HEAP32[$1 + 8 >> 2]) {
  $0 = HEAP32[$1 + 8 >> 2];
  $2 = (HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) == 20;
 }
 HEAP8[$1 + 7 | 0] = $2;
 jsvUnLock(HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 7 | 0] & 1;
}

function std____2__unique_ptr_TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 std____2__unique_ptr_TfLiteSoftmaxParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___reset_28TfLiteSoftmaxParams__29($0, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 std____2__unique_ptr_TfLiteReshapeParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___reset_28TfLiteReshapeParams__29($0, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function st_backref_index_msb($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP8[$1 + 7 | 0] = 8;
 HEAP16[$1 + 4 >> 1] = get_bits(HEAP32[$1 + 8 >> 2], HEAPU8[$1 + 7 | 0] - 8 & 255);
 label$1: {
  if (HEAPU16[$1 + 4 >> 1] == 65535) {
   HEAP32[$1 + 12 >> 2] = 2;
   break label$1;
  }
  HEAP16[HEAP32[$1 + 8 >> 2] + 6 >> 1] = HEAPU16[$1 + 4 >> 1] << 8;
  HEAP32[$1 + 12 >> 2] = 3;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function st_backref_count_msb($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP8[$1 + 7 | 0] = 6;
 HEAP16[$1 + 4 >> 1] = get_bits(HEAP32[$1 + 8 >> 2], HEAPU8[$1 + 7 | 0] - 8 & 255);
 label$1: {
  if (HEAPU16[$1 + 4 >> 1] == 65535) {
   HEAP32[$1 + 12 >> 2] = 4;
   break label$1;
  }
  HEAP16[HEAP32[$1 + 8 >> 2] + 4 >> 1] = HEAPU16[$1 + 4 >> 1] << 8;
  HEAP32[$1 + 12 >> 2] = 5;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_string_charAt($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 HEAP32[$2 >> 2] = jswrap_string_charAt_undefined(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]);
 label$1: {
  if (HEAP32[$2 >> 2]) {
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2];
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jsvNewFromEmptyString_8();
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jswrap_promise_all_reject($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 12 >> 2], 115486);
 if (HEAP32[$2 + 4 >> 2]) {
  jsvUnLock(HEAP32[$2 + 4 >> 2]);
  jsvObjectRemoveChild(HEAP32[$2 + 12 >> 2], 115486);
  _jswrap_promise_queuereject(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function _jswrap_promise_queueresolve($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = jsvNewNativeFunction(626, 32776);
 if (HEAP32[$2 + 4 >> 2]) {
  jsvObjectSetChild(HEAP32[$2 + 4 >> 2], 115428, HEAP32[$2 + 12 >> 2]);
  jsiQueueEvents(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2], $2 + 8 | 0, 1);
  jsvUnLock(HEAP32[$2 + 4 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function tflite___28anonymous_20namespace_29__AllocationInfoBuilder__AllocationInfoBuilder_28tflite__ErrorReporter__2c_20tflite__SimpleMemoryAllocator__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$3 + 8 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 return $0;
}

function jswrap_banglejs_hwinit() {
 graphicsStructInit(349460, 176, 176, 3);
 HEAP8[349464] = 6;
 HEAP8[349465] = 0;
 HEAP8[349466] = 0;
 HEAP8[349467] = 0;
 HEAP8[349476] = 16;
 HEAP8[349468] = 0;
 HEAP8[349469] = 0;
 HEAP8[349470] = 0;
 HEAP8[349471] = 0;
 HEAP8[349485] = 1;
 HEAP8[349486] = 64;
 lcdMemLCD_init(349460);
 jswrap_banglejs_pwrBacklight(1);
 graphicsSetCallbacks(349460);
 jswrap_banglejs_setTheme();
 graphicsFillRect(349460, 0, 0, 175, 175, HEAPU8[349446] | HEAPU8[349447] << 8);
}

function jsvIsInternalObjectKey($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (jsvIsString(HEAP32[$1 + 12 >> 2]) & 1) {
  $2 = 1;
  label$2: {
   if (HEAP8[HEAP32[$1 + 12 >> 2]] == -1) {
    break label$2;
   }
   $2 = 1;
   if (jsvIsStringEqual(HEAP32[$1 + 12 >> 2], 123007) & 1) {
    break label$2;
   }
   $2 = jsvIsStringEqual(HEAP32[$1 + 12 >> 2], 116071);
  }
 }
 __stack_pointer = $1 + 16 | 0;
 return $2 & 1;
}

function i2c_wr($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = 0;
 while (1) {
  if (HEAP32[$2 + 4 >> 2] < 8) {
   i2c_wr_bit(HEAP32[$2 + 12 >> 2], (HEAP32[$2 + 8 >> 2] & 128) != 0);
   HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] << 1;
   HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
   continue;
  }
  break;
 }
 i2c_rd_bit(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return 1;
}

function _jswrap_promise_queuereject($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = jsvNewNativeFunction(627, 32776);
 if (HEAP32[$2 + 4 >> 2]) {
  jsvObjectSetChild(HEAP32[$2 + 4 >> 2], 115428, HEAP32[$2 + 12 >> 2]);
  jsiQueueEvents(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2], $2 + 8 | 0, 1);
  jsvUnLock(HEAP32[$2 + 4 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function jsvObjectIteratorRemoveAndGotoNext($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 if (HEAP32[HEAP32[$2 + 12 >> 2] >> 2]) {
  HEAP16[$2 + 6 >> 1] = jsvGetNextSibling(HEAP32[HEAP32[$2 + 12 >> 2] >> 2]);
  jsvRemoveChildAndUnLock(HEAP32[$2 + 8 >> 2], HEAP32[HEAP32[$2 + 12 >> 2] >> 2]);
  $0 = jsvLockSafe(HEAPU16[$2 + 6 >> 1]);
  HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = $0;
 }
 __stack_pointer = $2 + 16 | 0;
}

function jshGetTimeFromMilliseconds($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 $0 = HEAPF64[$1 + 8 >> 3] * 1e3;
 label$1: {
  if (Math_abs($0) < 0x8000000000000000) {
   $1 = Math_abs($0) >= 1 ? ~~($0 > 0 ? Math_min(Math_floor($0 * 2.3283064365386963e-10), 4294967295) : Math_ceil(($0 - +(~~$0 >>> 0 >>> 0)) * 2.3283064365386963e-10)) >>> 0 : 0;
   $2 = ~~$0 >>> 0;
   break label$1;
  }
  $1 = -2147483648;
 }
 i64toi32_i32$HIGH_BITS = $1;
 return $2;
}

function std____2____compressed_pair_TfLiteFullyConnectedParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___second_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_201_2c_20false_____get_28_29(HEAP32[$1 + 12 >> 2] + 4 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_onewire_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 11 | 0] = $0;
 HEAP32[$1 + 4 >> 2] = jspNewObject(0, 119801);
 label$1: {
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  jsvObjectSetChildAndUnLock(HEAP32[$1 + 4 >> 2], 117541, jsvNewFromPin(HEAPU8[$1 + 11 | 0]));
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function std____2____compressed_pair_TfLiteDepthwiseConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___second_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_201_2c_20false_____get_28_29(HEAP32[$1 + 12 >> 2] + 4 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_serial_setConsole($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 HEAP8[$2 + 10 | 0] = jsiGetDeviceFromClass(HEAP32[$2 + 12 >> 2]);
 label$1: {
  if (!(HEAPU8[$2 + 10 | 0] < 17 | HEAPU8[$2 + 10 | 0] > 22)) {
   jsiSetConsoleDevice(HEAPU8[$2 + 10 | 0], HEAP8[$2 + 11 | 0] & 1);
   break label$1;
  }
  jsExceptionHere(1, 115665, 0);
 }
 __stack_pointer = $2 + 16 | 0;
}

function hexToByte($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 11 | 0] = $0;
 HEAP8[$2 + 10 | 0] = $1;
 HEAP32[$2 + 4 >> 2] = chtod(HEAP8[$2 + 11 | 0]);
 HEAP32[$2 >> 2] = chtod(HEAP8[$2 + 10 | 0]);
 label$1: {
  if ((HEAP32[$2 + 4 >> 2] | HEAP32[$2 >> 2]) < 0) {
   HEAP32[$2 + 12 >> 2] = -1;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 >> 2] | HEAP32[$2 + 4 >> 2] << 4;
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function gemmlowp__FixedPoint_int_2c_2012__20gemmlowp__Rescale_12_2c_20int_2c_200__28gemmlowp__FixedPoint_int_2c_200__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 >> 2] = $0;
 $0 = int_20gemmlowp__SaturatingRoundingMultiplyByPOT__12_2c_20int__28int_29(HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($1) >> 2]);
 HEAP32[gemmlowp__FixedPoint_int_2c_2012___raw_28_29($1 + 8 | 0) >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function tflite__RuntimeShape__ReplaceWith_28int_2c_20int_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 tflite__RuntimeShape__Resize_28int_29($0, HEAP32[$3 + 8 >> 2]);
 HEAP32[$3 >> 2] = tflite__RuntimeShape__DimsData_28_29($0);
 __memcpy(HEAP32[$3 >> 2], HEAP32[$3 + 4 >> 2], HEAP32[$3 + 8 >> 2] << 2);
 __stack_pointer = $3 + 16 | 0;
}

function jsvAppendString($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP32[$2 + 40 >> 2] = $1;
 jsvStringIteratorNew($2, HEAP32[$2 + 44 >> 2], 0);
 jsvStringIteratorGotoEnd($2);
 while (1) {
  if (HEAPU8[HEAP32[$2 + 40 >> 2]]) {
   $0 = HEAP32[$2 + 40 >> 2];
   HEAP32[$2 + 40 >> 2] = $0 + 1;
   jsvStringIteratorAppend($2, HEAP8[$0 | 0]);
   continue;
  }
  break;
 }
 jsvStringIteratorFree_1($2);
 __stack_pointer = $2 + 48 | 0;
}

function isWhitespaceInline_1($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 $0 = 1;
 label$1: {
  if (HEAP8[$1 + 15 | 0] == 9) {
   break label$1;
  }
  $0 = 1;
  if (HEAP8[$1 + 15 | 0] == 11) {
   break label$1;
  }
  $0 = 1;
  if (HEAP8[$1 + 15 | 0] == 12) {
   break label$1;
  }
  $0 = 1;
  if (HEAP8[$1 + 15 | 0] == 32) {
   break label$1;
  }
  $0 = 1;
  if (HEAP8[$1 + 15 | 0] == 10) {
   break label$1;
  }
  $0 = HEAP8[$1 + 15 | 0] == 13;
 }
 return $0;
}

function flatbuffers__Vector_int__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_int__20const___28unsigned_20short_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = flatbuffers__Vector_int__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_int__20const___28unsigned_20short_29(HEAP32[$2 + 12 >> 2], HEAPU16[$2 + 10 >> 1]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function _jswrap_object_values_cb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 >> 2] = jsvAsArrayIndex(HEAP32[$2 + 8 >> 2]);
 jsvArrayPushAndUnLock(HEAP32[HEAP32[$2 + 4 >> 2] >> 2], jspGetVarNamedField(HEAP32[HEAP32[$2 + 4 >> 2] + 4 >> 2], HEAP32[$2 >> 2], 0));
 jsvUnLock(HEAP32[$2 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function jswrap_tfmicrointerpreter_getTFMI($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 12 >> 2], 118361);
 HEAP32[$1 >> 2] = jsvGetDataPointer(HEAP32[$1 + 8 >> 2], $1 + 4 | 0);
 jsvUnLock(HEAP32[$1 + 8 >> 2]);
 if (!HEAP32[$1 >> 2]) {
  jsExceptionHere(1, 121298, 0);
 }
 HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + 15 & -16;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 >> 2];
}

function jspGetStackTrace() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 8 >> 2] = jsvFindChildFromString(HEAP32[86751], 120557);
 label$1: {
  if (HEAP32[$0 + 8 >> 2]) {
   HEAP32[$0 + 4 >> 2] = jsvSkipName(HEAP32[$0 + 8 >> 2]);
   jsvRemoveChildAndUnLock(HEAP32[86751], HEAP32[$0 + 8 >> 2]);
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 4 >> 2];
   break label$1;
  }
  HEAP32[$0 + 12 >> 2] = 0;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function bool_20flatbuffers__IsOutRange_tflite__BuiltinOperator__28tflite__BuiltinOperator_20const__2c_20tflite__BuiltinOperator_20const__2c_20tflite__BuiltinOperator_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = 1;
 $0 = HEAP32[HEAP32[$3 + 12 >> 2] >> 2] >= HEAP32[HEAP32[$3 + 8 >> 2] >> 2] ? HEAP32[HEAP32[$3 + 4 >> 2] >> 2] < HEAP32[HEAP32[$3 + 12 >> 2] >> 2] : $0;
 return $0;
}

function tflite__ErrorReporter__ReportError_28void__2c_20char_20const__2c_20____29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 $0 = HEAP32[$4 + 28 >> 2];
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
 __stack_pointer = $4 + 32 | 0;
 return HEAP32[$4 + 12 >> 2];
}

function std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 std____2__unique_ptr_TfLitePoolParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___reset_28TfLitePoolParams__29($0, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter____unique_ptr_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 std____2__unique_ptr_TfLiteConvParams_2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___reset_28TfLiteConvParams__29($0, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jsvIsNameInt($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
  $0 = 1;
  if (HEAP8[$1 + 7 | 0] != 16) {
   $2 = HEAP8[$1 + 7 | 0] >= 18 ? HEAP8[$1 + 7 | 0] <= 22 : $2;
   $0 = $2;
  }
  HEAP8[$1 + 15 | 0] = $0 & 1;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function isWhitespaceInline($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 $0 = 1;
 label$1: {
  if (HEAP8[$1 + 15 | 0] == 9) {
   break label$1;
  }
  $0 = 1;
  if (HEAP8[$1 + 15 | 0] == 11) {
   break label$1;
  }
  $0 = 1;
  if (HEAP8[$1 + 15 | 0] == 12) {
   break label$1;
  }
  $0 = 1;
  if (HEAP8[$1 + 15 | 0] == 32) {
   break label$1;
  }
  $0 = 1;
  if (HEAP8[$1 + 15 | 0] == 10) {
   break label$1;
  }
  $0 = HEAP8[$1 + 15 | 0] == 13;
 }
 return $0;
}

function jsvIterateCallbackToBytesCb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 if (HEAPU32[HEAP32[$2 + 4 >> 2] + 4 >> 2] < HEAPU32[HEAP32[$2 + 4 >> 2] + 8 >> 2]) {
  HEAP8[HEAP32[HEAP32[$2 + 4 >> 2] >> 2] + HEAP32[HEAP32[$2 + 4 >> 2] + 4 >> 2] | 0] = HEAP32[$2 + 12 >> 2];
 }
 $0 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
}

function jswrap_eval($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 4 >> 2] = jsvAsString(HEAP32[$1 + 8 >> 2]);
  HEAP32[$1 >> 2] = jspEvaluateVar(HEAP32[$1 + 4 >> 2], 0, 0);
  jsvUnLock(HEAP32[$1 + 4 >> 2]);
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 >> 2];
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function gemmlowp__FixedPoint_int_2c_202__20gemmlowp__Rescale_2_2c_20int_2c_204__28gemmlowp__FixedPoint_int_2c_204__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 >> 2] = $0;
 $0 = int_20gemmlowp__SaturatingRoundingMultiplyByPOT_2_2c_20int__28int_29(HEAP32[gemmlowp__FixedPoint_int_2c_204___raw_28_29($1) >> 2]);
 HEAP32[gemmlowp__FixedPoint_int_2c_202___raw_28_29($1 + 8 | 0) >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__Rescale_0_2c_20int_2c_201__28gemmlowp__FixedPoint_int_2c_201__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 >> 2] = $0;
 $0 = int_20gemmlowp__SaturatingRoundingMultiplyByPOT_1_2c_20int__28int_29(HEAP32[gemmlowp__FixedPoint_int_2c_201___raw_28_29($1) >> 2]);
 HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($1 + 8 | 0) >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = $2 >>> 16 | 0;
 $5 = $0 >>> 16 | 0;
 $3 = (Math_imul($4, $5) + Math_imul($1, $2) | 0) + Math_imul($3, $0) | 0;
 $2 = $2 & 65535;
 $0 = $0 & 65535;
 $1 = Math_imul($2, $0);
 $2 = ($1 >>> 16 | 0) + Math_imul($2, $5) | 0;
 $3 = $3 + ($2 >>> 16 | 0) | 0;
 $2 = Math_imul($0, $4) + ($2 & 65535) | 0;
 i64toi32_i32$HIGH_BITS = $3 + ($2 >>> 16 | 0) | 0;
 return $1 & 65535 | $2 << 16;
}

function std____2____compressed_pair_TfLiteSoftmaxParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___second_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_201_2c_20false_____get_28_29(HEAP32[$1 + 12 >> 2] + 4 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_TfLiteReshapeParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___second_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_201_2c_20false_____get_28_29(HEAP32[$1 + 12 >> 2] + 4 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__Rescale_0_2c_20int_2c_205__28gemmlowp__FixedPoint_int_2c_205__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 >> 2] = $0;
 $0 = int_20gemmlowp__SaturatingRoundingMultiplyByPOT_5_2c_20int__28int_29(HEAP32[gemmlowp__FixedPoint_int_2c_205___raw_28_29($1) >> 2]);
 HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($1 + 8 | 0) >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}
function jswrap_number_toFixed($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 80 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 76 >> 2] = $0;
 HEAP32[$2 + 72 >> 2] = $1;
 if (HEAP32[$2 + 72 >> 2] < 0) {
  HEAP32[$2 + 72 >> 2] = 0;
 }
 if (HEAP32[$2 + 72 >> 2] > 20) {
  HEAP32[$2 + 72 >> 2] = 20;
 }
 ftoa_bounded_extra(jsvGetFloat(HEAP32[$2 + 76 >> 2]), $2, 70, 10, HEAP32[$2 + 72 >> 2]);
 $0 = jsvNewFromString($2);
 __stack_pointer = $2 + 80 | 0;
 return $0 | 0;
}

function jswrap_graphics_stringWidth($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 96 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 88 >> 2] = $0;
 HEAP32[$2 + 84 >> 2] = $1;
 label$1: {
  if (!(graphicsGetFromVar($2 + 8 | 0, HEAP32[$2 + 88 >> 2]) & 1)) {
   HEAP32[$2 + 92 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 92 >> 2] = _jswrap_graphics_stringWidth($2 + 8 | 0, HEAP32[$2 + 84 >> 2], -1);
 }
 __stack_pointer = $2 + 96 | 0;
 return HEAP32[$2 + 92 >> 2];
}

function mbedtls_sha256($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 128 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 124 >> 2] = $0;
 HEAP32[$4 + 120 >> 2] = $1;
 HEAP32[$4 + 116 >> 2] = $2;
 HEAP32[$4 + 112 >> 2] = $3;
 mbedtls_sha256_init($4);
 mbedtls_sha256_starts($4, HEAP32[$4 + 112 >> 2]);
 mbedtls_sha256_update($4, HEAP32[$4 + 124 >> 2], HEAP32[$4 + 120 >> 2]);
 mbedtls_sha256_finish($4, HEAP32[$4 + 116 >> 2]);
 mbedtls_sha256_free($4);
 __stack_pointer = $4 + 128 | 0;
}

function jswrap_interface_setSleepIndicator($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = HEAPU8[178546];
 HEAP8[178546] = jshGetPinFromVar(HEAP32[$1 + 12 >> 2]);
 if (HEAPU8[178546] != HEAPU8[$1 + 11 | 0]) {
  if (HEAPU8[$1 + 11 | 0] != 255) {
   jshPinOutput(HEAPU8[$1 + 11 | 0], 0);
  }
  if (HEAPU8[178546] != 255) {
   jshPinOutput(HEAPU8[178546], 1);
  }
 }
 __stack_pointer = $1 + 16 | 0;
}

function jspeiGetScopesAsVar() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 label$1: {
  if (!HEAP32[86752]) {
   HEAP32[$0 + 12 >> 2] = 0;
   break label$1;
  }
  if ((jsvGetArrayLength(HEAP32[86752]) | 0) == 1) {
   HEAP32[$0 + 8 >> 2] = jsvGetLastArrayItem(HEAP32[86752]);
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
   break label$1;
  }
  HEAP32[$0 + 12 >> 2] = jsvCopy(HEAP32[86752], 1);
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function int_20tflite__reference_ops__depthwise_conv__DepthwiseConvRound__28tflite__DepthwiseConvOutputRounding_291__28int_2c_20int_2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = tflite__MultiplyByQuantizedMultiplier_28int_2c_20int_2c_20int_29(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_TfLitePoolParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___second_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_201_2c_20false_____get_28_29(HEAP32[$1 + 12 >> 2] + 4 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_TfLiteConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___second_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_201_2c_20false_____get_28_29(HEAP32[$1 + 12 >> 2] + 4 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_interface_setBusyIndicator($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = HEAPU8[178545];
 HEAP8[178545] = jshGetPinFromVar(HEAP32[$1 + 12 >> 2]);
 if (HEAPU8[178545] != HEAPU8[$1 + 11 | 0]) {
  if (HEAPU8[$1 + 11 | 0] != 255) {
   jshPinOutput(HEAPU8[$1 + 11 | 0], 0);
  }
  if (HEAPU8[178545] != 255) {
   jshPinOutput(HEAPU8[178545], 1);
  }
 }
 __stack_pointer = $1 + 16 | 0;
}

function graphicsSetPixel($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 graphicsToDeviceCoordinates(HEAP32[$4 + 12 >> 2], $4 + 8 | 0, $4 + 4 | 0);
 graphicsSetPixelDevice(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 __stack_pointer = $4 + 16 | 0;
}

function tflite___28anonymous_20namespace_29__MicroBuiltinDataAllocator___MicroBuiltinDataAllocator_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 tflite___28anonymous_20namespace_29__MicroBuiltinDataAllocator___MicroBuiltinDataAllocator_28_29($0);
 tflite___28anonymous_20namespace_29__MicroBuiltinDataAllocator__operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_waveform_startInput($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP8[$4 + 27 | 0] = $1;
 HEAPF64[$4 + 16 >> 3] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 if (!(jshPinAnalog(HEAPU8[$4 + 27 | 0]) < 0)) {
  jswrap_waveform_start(HEAP32[$4 + 28 >> 2], HEAPU8[$4 + 27 | 0], HEAPF64[$4 + 16 >> 3], HEAP32[$4 + 12 >> 2], 0);
 }
 __stack_pointer = $4 + 32 | 0;
}

function double_20const__20std____2__min_double__28double_20const__2c_20double_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = double_20const__20std____2__min_double_2c_20std____2____less_double_2c_20double___28double_20const__2c_20double_20const__2c_20std____2____less_double_2c_20double__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function tflite__MicroMutableOpResolver_9u___MicroMutableOpResolver_28tflite__ErrorReporter__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 tflite__MicroOpResolver__MicroOpResolver_28_29($0);
 HEAP32[$0 >> 2] = 172952;
 HEAP32[$0 + 292 >> 2] = 0;
 HEAP32[$0 + 368 >> 2] = 0;
 HEAP32[$0 + 372 >> 2] = HEAP32[$2 + 8 >> 2];
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jswrap_regexp_test($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = jswrap_regexp_exec(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 if (HEAP32[$2 + 4 >> 2]) {
  $3 = jsvIsNull(HEAP32[$2 + 4 >> 2]) ^ -1;
 }
 HEAP8[$2 + 3 | 0] = $3 & 1;
 jsvUnLock(HEAP32[$2 + 4 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return HEAP8[$2 + 3 | 0] & 1;
}

function tflite__GetInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = tflite___28anonymous_20namespace_29__GetMutableInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function tflite__EspruinoErrorReporter__Report_28char_20const__2c_20void__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 288 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 284 >> 2] = $0;
 HEAP32[$3 + 280 >> 2] = $1;
 HEAP32[$3 + 276 >> 2] = $2;
 espruino_snprintf_va($3 + 16 | 0, 256, HEAP32[$3 + 280 >> 2], HEAP32[$3 + 276 >> 2]);
 HEAP32[$3 >> 2] = $3 + 16;
 jsExceptionHere(1, 115959, $3);
 __stack_pointer = $3 + 288 | 0;
 return 0;
}

function jsvObjectSetOrRemoveChild($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  if (HEAP32[$3 + 4 >> 2]) {
   jsvObjectSetChild(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
   break label$1;
  }
  jsvObjectRemoveChild(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
 }
 __stack_pointer = $3 + 16 | 0;
 return HEAP32[$3 + 4 >> 2];
}

function heatshrink_encoder_finish($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP32[$1 + 12 >> 2] = -1;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$0 + 11 | 0] = HEAPU8[$0 + 11 | 0] | 1;
  if (!HEAPU8[HEAP32[$1 + 8 >> 2] + 12 | 0]) {
   HEAP8[HEAP32[$1 + 8 >> 2] + 12 | 0] = 1;
  }
  HEAP32[$1 + 12 >> 2] = HEAPU8[HEAP32[$1 + 8 >> 2] + 12 | 0] != 9;
 }
 return HEAP32[$1 + 12 >> 2];
}

function jslFunctionCharAsString($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP8[$3 + 15 | 0] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 label$1: {
  if (HEAPU8[$3 + 15 | 0] >= 128) {
   jslTokenAsString(HEAPU8[$3 + 15 | 0], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
   break label$1;
  }
  HEAP8[HEAP32[$3 + 8 >> 2]] = HEAPU8[$3 + 15 | 0];
  HEAP8[HEAP32[$3 + 8 >> 2] + 1 | 0] = 0;
 }
 __stack_pointer = $3 + 16 | 0;
}

function jswrap_banglejs_getLogo() {
 var $0 = 0;
 $0 = __stack_pointer - 496 | 0;
 __stack_pointer = $0;
 __memcpy($0 + 16 | 0, 163856, 467);
 HEAP32[$0 + 12 >> 2] = jsvNewNativeString($0 + 16 | 0, 467);
 HEAP32[$0 + 8 >> 2] = jswrap_heatshrink_decompress(HEAP32[$0 + 12 >> 2]);
 HEAP32[$0 + 4 >> 2] = jsvGetArrayBufferBackingString(HEAP32[$0 + 8 >> 2], 0);
 jsvUnLock2(HEAP32[$0 + 12 >> 2], HEAP32[$0 + 8 >> 2]);
 __stack_pointer = $0 + 496 | 0;
 return HEAP32[$0 + 4 >> 2];
}

function jshPinOutput($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 label$1: {
  if (jshIsPinValid(HEAPU8[$2 + 15 | 0]) & 1) {
   jshPinSetValue(HEAPU8[$2 + 15 | 0], HEAP8[$2 + 14 | 0] & 1);
   if (!(jshGetPinStateIsManual(HEAPU8[$2 + 15 | 0]) & 1)) {
    jshPinSetState(HEAPU8[$2 + 15 | 0], 1);
   }
   break label$1;
  }
  jsExceptionHere(1, 117533, 0);
 }
 __stack_pointer = $2 + 16 | 0;
}

function tflite__micro__GetEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = tflite__micro__GetMutableEvalInput_28TfLiteContext_20const__2c_20TfLiteNode_20const__2c_20int_29(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function jsvUnLockFreeIfNeeded($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (jsvGetRefs(HEAP32[$1 + 12 >> 2]) & 65535) {
   break label$1;
  }
  if (!(jsvHasRef(HEAP32[$1 + 12 >> 2]) & 1)) {
   break label$1;
  }
  $0 = HEAP32[$1 + 12 >> 2];
  if (!((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63)) {
   break label$1;
  }
  jsvFreePtr(HEAP32[$1 + 12 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
}

function flatbuffers__String_20const__20flatbuffers__Table__GetPointer_flatbuffers__String_20const___28unsigned_20short_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = flatbuffers__String_20const__20flatbuffers__Table__GetPointer_flatbuffers__String_20const___28unsigned_20short_29(HEAP32[$2 + 12 >> 2], HEAPU16[$2 + 10 >> 1]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function tflite___28anonymous_20namespace_29__MicroBuiltinDataAllocator__MicroBuiltinDataAllocator_28tflite__SimpleMemoryAllocator__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 tflite__BuiltinDataAllocator__BuiltinDataAllocator_28_29($0);
 HEAP32[$0 >> 2] = 172708;
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jsvResetVariable($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 HEAP32[$2 + 4 >> 2] = 0;
 while (1) {
  if (HEAPU32[$2 + 4 >> 2] < 14) {
   HEAP8[HEAP32[$2 + 12 >> 2] + HEAP32[$2 + 4 >> 2] | 0] = 0;
   HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
   continue;
  }
  break;
 }
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = HEAPU16[$2 + 10 >> 1] | 1024;
 HEAP8[$0 + 12 | 0] = $1;
 HEAP8[$0 + 13 | 0] = $1 >>> 8;
}

function jsvNewFromPin($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvNewFromInteger(HEAP32[$1 + 12 >> 2]);
 if (HEAP32[$1 + 8 >> 2]) {
  $0 = HEAP32[$1 + 8 >> 2];
  $2 = HEAP32[$1 + 8 >> 2];
  $2 = (HEAPU8[$2 + 12 | 0] | HEAPU8[$2 + 13 | 0] << 8) & -64 | 13;
  HEAP8[$0 + 12 | 0] = $2;
  HEAP8[$0 + 13 | 0] = $2 >>> 8;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jsspiHardwareFunc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP8[$4 + 15 | 0] = HEAPU8[HEAP32[$4 + 16 >> 2]];
 jshSPISendMany(HEAPU8[$4 + 15 | 0], HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], 0);
 __stack_pointer = $4 + 32 | 0;
}

function graphicsGetHeight($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1: {
  if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 16) {
   $0 = HEAP32[$1 + 12 >> 2];
   $0 = HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8;
   break label$1;
  }
  $0 = HEAP32[$1 + 12 >> 2];
  $0 = HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8;
 }
 return $0;
}

function float_20const__20std____2__min_float__28float_20const__2c_20float_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = float_20const__20std____2__min_float_2c_20std____2____less_float_2c_20float___28float_20const__2c_20float_20const__2c_20std____2____less_float_2c_20float__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function float_20const__20std____2__max_float__28float_20const__2c_20float_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = float_20const__20std____2__max_float_2c_20std____2____less_float_2c_20float___28float_20const__2c_20float_20const__2c_20std____2____less_float_2c_20float__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jsvStringIteratorGetUTF8CharAndNext($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!(jsvStringIteratorHasChar_2(HEAP32[$1 + 8 >> 2]) & 1)) {
   jsvStringIteratorNext(HEAP32[$1 + 8 >> 2]);
   HEAP32[$1 + 12 >> 2] = -1;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvStringIteratorGetCharAndNext(HEAP32[$1 + 8 >> 2]) & 255;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function graphicsGetWidth($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1: {
  if ((HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) & 16) {
   $0 = HEAP32[$1 + 12 >> 2];
   $0 = HEAPU8[$0 + 14 | 0] | HEAPU8[$0 + 15 | 0] << 8;
   break label$1;
  }
  $0 = HEAP32[$1 + 12 >> 2];
  $0 = HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8;
 }
 return $0;
}

function tflite__internal__ContextHelper__AllocatePersistentBuffer_28TfLiteContext__2c_20unsigned_20long_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = tflite__MicroAllocator__AllocatePersistentBuffer_28unsigned_20long_29(HEAP32[HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2] >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function std____2__allocator_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29____allocator_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 std____2____non_trivial_if_true_2c_20std____2__allocator_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29_______non_trivial_if_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_espruino_getAddressOf($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP8[$2 + 7 | 0] = $1;
 label$1: {
  if (HEAP8[$2 + 7 | 0] & 1) {
   HEAP32[$2 >> 2] = 0;
   HEAP32[$2 + 12 >> 2] = jsvGetDataPointer(HEAP32[$2 + 8 >> 2], $2);
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 8 >> 2];
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jsvIsNewChild($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = 0;
 label$1: {
  if (!(jsvIsName(HEAP32[$1 + 12 >> 2]) & 1)) {
   break label$1;
  }
  $0 = 0;
  if (!(jsvGetNextSibling(HEAP32[$1 + 12 >> 2]) & 65535)) {
   break label$1;
  }
  $0 = (jsvGetNextSibling(HEAP32[$1 + 12 >> 2]) & 65535) == (jsvGetPrevSibling(HEAP32[$1 + 12 >> 2]) & 65535);
 }
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_date_setMilliseconds($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 48 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP32[$2 + 40 >> 2] = $1;
 getTimeFromDateVar($2 + 8 | 0, HEAP32[$2 + 44 >> 2], 0);
 HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 40 >> 2];
 setCorrectTimeZone($2 + 8 | 0);
 $3 = jswrap_date_setTime(HEAP32[$2 + 44 >> 2], fromTimeInDay($2 + 8 | 0));
 __stack_pointer = $2 + 48 | 0;
 return +$3;
}

function jsvArrayAddUnique($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = jsvGetIndexOf(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 0);
 label$1: {
  if (!HEAP32[$2 + 4 >> 2]) {
   jsvArrayPush(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
   break label$1;
  }
  jsvUnLock(HEAP32[$2 + 4 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function jswrap_e_dumpStr() {
 var $0 = 0;
 $0 = __stack_pointer - 48 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 40 >> 2] = jsvNewFromEmptyString_9();
 label$1: {
  if (!HEAP32[$0 + 40 >> 2]) {
   HEAP32[$0 + 44 >> 2] = 0;
   break label$1;
  }
  jsvStringIteratorNew($0, HEAP32[$0 + 40 >> 2], 0);
  jsiDumpState(2, $0);
  jsvStringIteratorFree_11($0);
  HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 40 >> 2];
 }
 __stack_pointer = $0 + 48 | 0;
 return HEAP32[$0 + 44 >> 2];
}

function mbedtls_sha1_starts($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[HEAP32[$1 + 12 >> 2] >> 2] = 0;
 HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] = 0;
 HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] = 1732584193;
 HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2] = -271733879;
 HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2] = -1732584194;
 HEAP32[HEAP32[$1 + 12 >> 2] + 20 >> 2] = 271733878;
 HEAP32[HEAP32[$1 + 12 >> 2] + 24 >> 2] = -1009589776;
}

function OneWireReset($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 jshPinSetState(HEAPU8[$1 + 15 | 0], 3);
 jshPinSetValue(HEAPU8[$1 + 15 | 0], 0);
 jshDelayMicroseconds(500);
 jshPinSetValue(HEAPU8[$1 + 15 | 0], 1);
 jshDelayMicroseconds(80);
 HEAP8[$1 + 14 | 0] = (jshPinGetValue(HEAPU8[$1 + 15 | 0]) ^ -1) & 1;
 jshDelayMicroseconds(420);
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 14 | 0] & 1;
}

function mbedtls_sha1($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 112 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 108 >> 2] = $0;
 HEAP32[$3 + 104 >> 2] = $1;
 HEAP32[$3 + 100 >> 2] = $2;
 mbedtls_sha1_init($3 + 8 | 0);
 mbedtls_sha1_starts($3 + 8 | 0);
 mbedtls_sha1_update($3 + 8 | 0, HEAP32[$3 + 108 >> 2], HEAP32[$3 + 104 >> 2]);
 mbedtls_sha1_finish($3 + 8 | 0, HEAP32[$3 + 100 >> 2]);
 mbedtls_sha1_free($3 + 8 | 0);
 __stack_pointer = $3 + 112 | 0;
}

function jsvStringIteratorGetCharOrMinusOne($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!(HEAPU32[HEAP32[$1 + 8 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 8 >> 2] + 4 >> 2] ? HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2] : 0)) {
   HEAP32[$1 + 12 >> 2] = -1;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = HEAPU8[HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2] + HEAP32[HEAP32[$1 + 8 >> 2] >> 2] | 0];
 }
 return HEAP32[$1 + 12 >> 2];
}

function flatbuffers__IndirectHelper_long_20long___Read_28unsigned_20char_20const__2c_20unsigned_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 3) | 0;
 $0 = long_20long_20flatbuffers__EndianScalar_long_20long__28long_20long_29(HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jsiSetBusy($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 label$1: {
  if (HEAP8[$2 + 11 | 0] & 1) {
   HEAP32[86772] = HEAP32[$2 + 12 >> 2] | HEAP32[86772];
   break label$1;
  }
  HEAP32[86772] = HEAP32[86772] & (HEAP32[$2 + 12 >> 2] ^ -1);
 }
 if (HEAPU8[178545] != 255) {
  jshPinOutput(HEAPU8[178545], HEAP32[86772] != 0);
 }
 __stack_pointer = $2 + 16 | 0;
}

function heatshrink_var_input_cb($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 4 >> 2] = -1;
 if (jsvIteratorHasElement(HEAP32[$1 + 8 >> 2]) & 1) {
  HEAP32[$1 + 4 >> 2] = jsvIteratorGetIntegerValue(HEAP32[$1 + 8 >> 2]) & 255;
 }
 jsvIteratorNext(HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 4 >> 2];
}

function tflite__MultiplyByQuantizedMultiplierGreaterThanOne_28int_2c_20int_2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = int_20gemmlowp__SaturatingRoundingDoublingHighMul_int__28int_2c_20int_29(Math_imul(HEAP32[$3 + 12 >> 2], 1 << HEAP32[$3 + 4 >> 2]), HEAP32[$3 + 8 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function flatbuffers__Vector_float___Get_28unsigned_20int_29_20const($0, $1) {
 var $2 = 0, $3 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = flatbuffers__IndirectHelper_float___Read_28unsigned_20char_20const__2c_20unsigned_20int_29(flatbuffers__Vector_float___Data_28_29_20const(HEAP32[$2 + 12 >> 2]), HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $3;
}

function tflite__MicroOpResolver__FindOp_28tflite__BuiltinOperator_2c_20int_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, HEAP32[$3 + 8 >> 2]) | 0;
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function jswrap_promise_reject($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = jspromise_create();
 label$1: {
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  jspromise_reject(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 8 >> 2]);
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsiHandleIOEventForSerial($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 >> 2] = jsiExtractIOEventData(HEAP32[$2 + 8 >> 2], $2 + 4 | 0);
 if (HEAP32[$2 >> 2]) {
  jswrap_stream_pushData(HEAP32[$2 + 12 >> 2], HEAP32[$2 >> 2], 1);
  jsvUnLock(HEAP32[$2 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 4 >> 2];
}

function jsvStringIteratorPrintfCallback($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 while (1) {
  if (HEAPU8[HEAP32[$2 + 12 >> 2]]) {
   $1 = HEAP32[$2 + 8 >> 2];
   $0 = HEAP32[$2 + 12 >> 2];
   HEAP32[$2 + 12 >> 2] = $0 + 1;
   jsvStringIteratorAppend($1, HEAP8[$0 | 0]);
   continue;
  }
  break;
 }
 __stack_pointer = $2 + 16 | 0;
}

function jsvArrayBufferIteratorFloatToData($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAPF64[$4 + 8 >> 3] = $3;
 label$1: {
  if (HEAP32[$4 + 24 >> 2] == 4) {
   HEAPF32[HEAP32[$4 + 28 >> 2] >> 2] = HEAPF64[$4 + 8 >> 3];
   break label$1;
  }
  if (HEAP32[$4 + 24 >> 2] == 8) {
   HEAPF64[HEAP32[$4 + 28 >> 2] >> 3] = HEAPF64[$4 + 8 >> 3];
  }
 }
}

function flatbuffers__Vector_long_20long___Get_28unsigned_20int_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = flatbuffers__IndirectHelper_long_20long___Read_28unsigned_20char_20const__2c_20unsigned_20int_29(flatbuffers__Vector_long_20long___Data_28_29_20const(HEAP32[$2 + 12 >> 2]), HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function gen_jswrap_Graphics_setBgColor($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = jswrap_graphics_setColorX(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2], 0);
 __stack_pointer = $4 + 16 | 0;
 return $0 | 0;
}

function std____2____compressed_pair_TfLiteFullyConnectedParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_TfLiteFullyConnectedParams__2c_200_2c_20false_____get_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function lcdMemLCD_convert16toLCD($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = HEAPU16[(((HEAP32[$3 + 4 >> 2] & 1) << 2) + 162608 | 0) + ((HEAP32[$3 + 8 >> 2] & 1) << 1) >> 1] + (HEAP32[$3 + 12 >> 2] & 59164);
 return !!(HEAP32[$3 + 12 >> 2] & 65536) | (HEAP32[$3 + 12 >> 2] & 2048 ? 2 : 0) | (HEAP32[$3 + 12 >> 2] & 32 ? 4 : 0);
}

function lcdInit_ArrayBuffer($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jswrap_arraybuffer_constructor(graphicsGetMemoryRequired(HEAP32[$1 + 12 >> 2]));
 $0 = HEAP32[$1 + 12 >> 2];
 jsvAddNamedChildAndUnLock(HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24), HEAP32[$1 + 8 >> 2], 116403);
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_espruino_setTimeZone($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 jswrap_espruino_setDST(0);
 $3 = HEAP32[86751];
 $0 = HEAPF64[$1 + 8 >> 3] * 60;
 label$1: {
  if (Math_abs($0) < 2147483648) {
   $2 = ~~$0;
   break label$1;
  }
  $2 = -2147483648;
 }
 jsvObjectSetChildAndUnLock($3, 111535, jsvNewFromInteger($2));
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_espruino_clip($0, $1, $2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 HEAPF64[$3 + 24 >> 3] = $0;
 HEAPF64[$3 + 16 >> 3] = $1;
 HEAPF64[$3 + 8 >> 3] = $2;
 if (HEAPF64[$3 + 24 >> 3] < HEAPF64[$3 + 16 >> 3]) {
  HEAPF64[$3 + 24 >> 3] = HEAPF64[$3 + 16 >> 3];
 }
 if (HEAPF64[$3 + 24 >> 3] > HEAPF64[$3 + 8 >> 3]) {
  HEAPF64[$3 + 24 >> 3] = HEAPF64[$3 + 8 >> 3];
 }
 return +HEAPF64[$3 + 24 >> 3];
}

function jsiGetClassNameFromDevice($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 11 | 0] = $0;
 HEAP32[$1 + 4 >> 2] = jshGetDeviceString(HEAPU8[$1 + 11 | 0]);
 label$1: {
  if (!HEAPU8[HEAP32[$1 + 4 >> 2]]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvFindChildFromString(HEAP32[86750], HEAP32[$1 + 4 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function gen_jswrap_Graphics_setColor($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = jswrap_graphics_setColorX(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2], 1);
 __stack_pointer = $4 + 16 | 0;
 return $0 | 0;
}

function std____2____compressed_pair_TfLiteDepthwiseConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_TfLiteDepthwiseConvParams__2c_200_2c_20false_____get_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_array_unshift($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = jsvNewFromInteger(0);
 jsvUnLock2(jswrap_array_splice(HEAP32[$2 + 12 >> 2], 0, HEAP32[$2 + 4 >> 2], HEAP32[$2 + 8 >> 2]), HEAP32[$2 + 4 >> 2]);
 $0 = jsvGetLength(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function isNegativeZero($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = __stack_pointer - 32 | 0;
 HEAPF64[$1 + 24 >> 3] = $0;
 HEAPF64[$1 + 16 >> 3] = -0;
 HEAP32[$1 + 12 >> 2] = $1 + 16;
 HEAP32[$1 + 8 >> 2] = $1 + 24;
 $2 = HEAP32[$1 + 8 >> 2];
 $3 = HEAP32[$2 >> 2];
 $4 = HEAP32[$2 + 4 >> 2];
 $2 = HEAP32[$1 + 12 >> 2];
 $1 = HEAP32[$2 + 4 >> 2];
 $5 = HEAP32[$2 >> 2];
 $2 = $3;
 return ($5 | 0) == ($2 | 0) & ($4 | 0) == ($1 | 0);
}

function int_20const__20std____2__min_int__28int_20const__2c_20int_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = int_20const__20std____2__min_int_2c_20std____2____less_int_2c_20int___28int_20const__2c_20int_20const__2c_20std____2____less_int_2c_20int__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function int_20const__20std____2__max_int__28int_20const__2c_20int_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = int_20const__20std____2__max_int_2c_20std____2____less_int_2c_20int___28int_20const__2c_20int_20const__2c_20std____2____less_int_2c_20int__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jsvArrayBufferGetFromName($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvGetInteger(HEAP32[$1 + 12 >> 2]);
 HEAP32[$1 + 4 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$1 + 12 >> 2]) & 65535);
 HEAP32[$1 >> 2] = jsvArrayBufferGet(HEAP32[$1 + 4 >> 2], HEAP32[$1 + 8 >> 2]);
 jsvUnLock(HEAP32[$1 + 4 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 >> 2];
}

function jswrap_math_sign($0) {
 $0 = +$0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 >> 3] = $0;
 label$1: {
  label$2: {
   if (HEAPF64[$1 >> 3] != 0) {
    if (!(isNegativeZero(HEAPF64[$1 >> 3]) & 1)) {
     break label$2;
    }
   }
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = HEAPF64[$1 >> 3] > 0 ? 1 : -1;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_math_clip($0, $1, $2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 HEAPF64[$3 + 24 >> 3] = $0;
 HEAPF64[$3 + 16 >> 3] = $1;
 HEAPF64[$3 + 8 >> 3] = $2;
 if (HEAPF64[$3 + 24 >> 3] < HEAPF64[$3 + 16 >> 3]) {
  HEAPF64[$3 + 24 >> 3] = HEAPF64[$3 + 16 >> 3];
 }
 if (HEAPF64[$3 + 24 >> 3] > HEAPF64[$3 + 8 >> 3]) {
  HEAPF64[$3 + 24 >> 3] = HEAPF64[$3 + 8 >> 3];
 }
 return +HEAPF64[$3 + 24 >> 3];
}

function tflite__MicroOpResolver__FindOp_28char_20const__2c_20int_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, HEAP32[$3 + 8 >> 2]) | 0;
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function jswrap_pin_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP8[$1 + 7 | 0] = jshGetPinFromVar(HEAP32[$1 + 8 >> 2]);
 label$1: {
  if (!(jshIsPinValid(HEAPU8[$1 + 7 | 0]) & 1)) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvNewFromPin(HEAPU8[$1 + 7 | 0]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvGetInternalFunctionCheckerFor($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (jsvIsFunction(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 3;
   break label$1;
  }
  if (jsvIsObject(HEAP32[$1 + 8 >> 2]) & 1) {
   HEAP32[$1 + 12 >> 2] = 4;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsiConsoleReturnInputLine() {
 if (HEAP8[347076] & 1) {
  HEAP8[347076] = 0;
  if (jsiEcho() & 1) {
   if (HEAPU16[173534] & 8) {
    jsiConsolePrintString(118681);
   }
   if (jsiPasswordProtected() & 1) {
    jsiConsolePrintString(120573);
   }
   jsiConsolePrintChar(62);
   jsiConsolePrintStringVarWithNewLineChar(HEAP32[86768], 0, 58);
   jsiMoveCursorChar(HEAP32[86768], jsvGetStringLength(HEAP32[86768]), HEAP32[86770]);
  }
 }
}

function tflite___28anonymous_20namespace_29__ConvertPadding_28tflite__Padding_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  label$2: {
   switch (HEAP32[$1 + 8 >> 2]) {
   case 0:
    HEAP32[$1 + 12 >> 2] = 1;
    break label$1;

   case 1:
    HEAP32[$1 + 12 >> 2] = 2;
    break label$1;

   default:
    break label$2;
   }
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 return HEAP32[$1 + 12 >> 2];
}

function tflite__Operator__builtin_options_as_DepthwiseConv2DOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1: {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 2) {
   $0 = tflite__Operator__builtin_options_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_onewire_reset($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP8[$1 + 7 | 0] = onewire_getpin(HEAP32[$1 + 8 >> 2]);
 label$1: {
  if (!(jshIsPinValid(HEAPU8[$1 + 7 | 0]) & 1)) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = OneWireReset(HEAPU8[$1 + 7 | 0]) & 1;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}

function jspAppendStackTrace($0) {
 var $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 44 >> 2] = $0;
 jsvStringIteratorNew($1 + 8 | 0, HEAP32[$1 + 44 >> 2], 0);
 jsvStringIteratorGotoEnd($1 + 8 | 0);
 jslPrintPosition(2, $1 + 8 | 0, HEAP32[HEAP32[44743] + 8 >> 2]);
 jslPrintTokenLineMarker(2, $1 + 8 | 0, HEAP32[HEAP32[44743] + 8 >> 2], 0);
 jsvStringIteratorFree_4($1 + 8 | 0);
 __stack_pointer = $1 + 48 | 0;
}

function tflite__Operator__builtin_options_as_FullyConnectedOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1: {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 8) {
   $0 = tflite__Operator__builtin_options_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function lcd_flip($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 if (HEAP8[$2 + 11 | 0] & 1) {
  HEAP8[349500] = 0;
  HEAP8[349501] = 0;
  HEAP8[349502] = 0;
  HEAP8[349503] = 0;
  HEAP8[349504] = 175;
  HEAP8[349505] = 0;
  HEAP8[349506] = 175;
  HEAP8[349507] = 0;
 }
 graphicsInternalFlip();
 __stack_pointer = $2 + 16 | 0;
}

function jswrap_object_valueOf($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP32[$1 >> 2] = HEAP32[$1 + 8 >> 2];
   jsExceptionHere(3, 119115, $1);
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[$1 + 8 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_promise_get_chained_promise($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvObjectGetChildIfExists(HEAP32[$1 + 12 >> 2], 117569);
 if (!HEAP32[$1 + 8 >> 2]) {
  HEAP32[$1 + 8 >> 2] = jspNewObject(0, 119742);
  jsvObjectSetChild(HEAP32[$1 + 12 >> 2], 117569, HEAP32[$1 + 8 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jsiConsolePrintString($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 while (1) {
  if (HEAPU8[HEAP32[$1 + 12 >> 2]]) {
   if (HEAP8[HEAP32[$1 + 12 >> 2]] == 10) {
    jsiConsolePrintChar(13);
   }
   $0 = HEAP32[$1 + 12 >> 2];
   HEAP32[$1 + 12 >> 2] = $0 + 1;
   jsiConsolePrintChar(HEAP8[$0 | 0]);
   continue;
  }
  break;
 }
 __stack_pointer = $1 + 16 | 0;
}

function jshPushIOEvent($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP8[$3 + 31 | 0] = $0;
 HEAP32[$3 + 16 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP8[$3 + 8 | 0] = HEAPU8[$3 + 31 | 0];
 $0 = HEAP32[$3 + 16 >> 2];
 HEAP8[$3 + 9 | 0] = $0;
 HEAP8[$3 + 10 | 0] = $0 >>> 8;
 HEAP8[$3 + 11 | 0] = $0 >>> 16;
 HEAP8[$3 + 12 | 0] = $0 >>> 24;
 jshPushEvent($3 + 8 | 0);
 __stack_pointer = $3 + 32 | 0;
}

function tflite__Model__operator_codes_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_flatbuffers__Offset_tflite__OperatorCode___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__OperatorCode___20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 6);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_string_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!jsvGetArrayLength(HEAP32[$1 + 8 >> 2])) {
   HEAP32[$1 + 12 >> 2] = jsvNewFromEmptyString_8();
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvAsStringAndUnLock(jsvGetArrayItem(HEAP32[$1 + 8 >> 2], 0));
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvIterateCallbackToBytes($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 24 >> 2];
 HEAP32[$3 + 12 >> 2] = 0;
 HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 20 >> 2];
 jsvIterateCallback(HEAP32[$3 + 28 >> 2], 6, $3 + 8 | 0);
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 + 12 >> 2];
}

function jshGetPinString($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 HEAP8[HEAP32[$2 + 12 >> 2]] = 0;
 label$1: {
  if (HEAPU8[$2 + 11 | 0] < 48) {
   HEAP8[HEAP32[$2 + 12 >> 2]] = 68;
   itostr_2(HEAPU8[$2 + 11 | 0], HEAP32[$2 + 12 >> 2] + 1 | 0, 10);
   break label$1;
  }
  strcpy(HEAP32[$2 + 12 >> 2], 121670);
 }
 __stack_pointer = $2 + 16 | 0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__OperatorCode____operator_5b_5d_28unsigned_20int_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = flatbuffers__Vector_flatbuffers__Offset_tflite__OperatorCode____Get_28unsigned_20int_29_20const(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function tflite__RuntimeShape__RuntimeShape_28int_2c_20int_20const__29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 >> 2] = 0;
 tflite__RuntimeShape__ReplaceWith_28int_2c_20int_20const__29($0, HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function jsvObjectGetChildIfExists($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (!HEAP32[$2 + 8 >> 2]) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jsvSkipNameAndUnLock(jsvFindChildFromString(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]));
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jsvIsFunctionParameter($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = 0;
 label$1: {
  if (!HEAP32[$1 + 12 >> 2]) {
   break label$1;
  }
  $2 = HEAP32[$1 + 12 >> 2];
  $0 = 0;
  if (!((HEAPU8[$2 + 12 | 0] | HEAPU8[$2 + 13 | 0] << 8) & 128)) {
   break label$1;
  }
  $0 = jsvIsString(HEAP32[$1 + 12 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return $0 & 1;
}

function jsvAppendPrintf($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer + -64 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 60 >> 2] = $0;
 HEAP32[$3 + 56 >> 2] = $1;
 jsvStringIteratorNew($3 + 16 | 0, HEAP32[$3 + 60 >> 2], 0);
 jsvStringIteratorGotoEnd($3 + 16 | 0);
 HEAP32[$3 + 12 >> 2] = $2;
 vcbprintf(2, $3 + 16 | 0, HEAP32[$3 + 56 >> 2], HEAP32[$3 + 12 >> 2]);
 jsvStringIteratorFree_1($3 + 16 | 0);
 __stack_pointer = $3 - -64 | 0;
}

function jsnCallFunction($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 32 | 0;
 __stack_pointer = $5;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP16[$5 + 26 >> 1] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 $0 = jswCallFunctionHack(HEAP32[$5 + 28 >> 2], HEAPU16[$5 + 26 >> 1], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 12 >> 2]);
 __stack_pointer = $5 + 32 | 0;
 return $0;
}

function gemmlowp__FixedPoint_int_2c_20_1_20__202__20gemmlowp__ExactMulByPot__1_2c_20int_2c_202__28gemmlowp__FixedPoint_int_2c_202__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 >> 2] = $0;
 $0 = HEAP32[gemmlowp__FixedPoint_int_2c_202___raw_28_29($1) >> 2];
 HEAP32[gemmlowp__FixedPoint_int_2c_201___raw_28_29($1 + 8 | 0) >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function tflite__internal__ContextHelper__GetScratchBuffer_28TfLiteContext__2c_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = tflite__MicroAllocator__GetScratchBuffer_28int_29_20const(HEAP32[HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2] >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function std____2____compressed_pair_TfLiteSoftmaxParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_TfLiteSoftmaxParams__2c_200_2c_20false_____get_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_TfLiteReshapeParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_TfLiteReshapeParams__2c_200_2c_20false_____get_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_tfmicrointerpreter_invoke($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jswrap_tfmicrointerpreter_getTFMI(HEAP32[$1 + 12 >> 2]);
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   break label$1;
  }
  if (tf_invoke(HEAP32[$1 + 8 >> 2]) & 1) {
   break label$1;
  }
  jsExceptionHere(3, 121760, 0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function tflite__Operator__builtin_options_as_ReshapeOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1: {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 17) {
   $0 = tflite__Operator__builtin_options_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jsvIsNameWithValue($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
  $2 = HEAP8[$1 + 7 | 0] >= 16 ? HEAP8[$1 + 7 | 0] <= 22 : $2;
  HEAP8[$1 + 15 | 0] = $2;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function jspeiLoadScopesFromVar($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[86752]);
 HEAP32[86752] = 0;
 if (HEAP32[$1 + 12 >> 2]) {
  label$2: {
   if (jsvIsArray(HEAP32[$1 + 12 >> 2]) & 1) {
    HEAP32[86752] = jsvCopy(HEAP32[$1 + 12 >> 2], 1);
    break label$2;
   }
   HEAP32[86752] = jsvNewArray($1 + 12 | 0, 1);
  }
 }
 __stack_pointer = $1 + 16 | 0;
}

function tflite__ops__micro__conv__RuntimePaddingType_28TfLitePadding_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  label$2: {
   switch (HEAP32[$1 + 8 >> 2] - 1 | 0) {
   case 0:
    HEAP8[$1 + 15 | 0] = 1;
    break label$1;

   case 1:
    HEAP8[$1 + 15 | 0] = 2;
    break label$1;

   default:
    break label$2;
   }
  }
  HEAP8[$1 + 15 | 0] = 0;
 }
 return HEAPU8[$1 + 15 | 0];
}

function tflite__Operator__builtin_options_as_SoftmaxOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1: {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 9) {
   $0 = tflite__Operator__builtin_options_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_TfLiteFullyConnectedParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_TfLiteFullyConnectedParams__2c_200_2c_20false_____get_28_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_waveform_startOutput($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = +$2;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP8[$4 + 27 | 0] = $1;
 HEAPF64[$4 + 16 >> 3] = $2;
 HEAP32[$4 + 12 >> 2] = $3;
 jswrap_waveform_start(HEAP32[$4 + 28 >> 2], HEAPU8[$4 + 27 | 0], HEAPF64[$4 + 16 >> 3], HEAP32[$4 + 12 >> 2], 1);
 __stack_pointer = $4 + 32 | 0;
}

function gen_jswrap_DataView_setFloat64($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP8[$4 + 3 | 0] = $3;
 jswrap_dataview_set(HEAP32[$4 + 12 >> 2], 40, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP8[$4 + 3 | 0] & 1);
 __stack_pointer = $4 + 16 | 0;
}

function gen_jswrap_DataView_setFloat32($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP8[$4 + 3 | 0] = $3;
 jswrap_dataview_set(HEAP32[$4 + 12 >> 2], 36, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP8[$4 + 3 | 0] & 1);
 __stack_pointer = $4 + 16 | 0;
}

function tflite__Operator__builtin_options_as_Pool2DOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1: {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 5) {
   $0 = tflite__Operator__builtin_options_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__Operator__builtin_options_as_Conv2DOptions_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1: {
  if ((tflite__Operator__builtin_options_type_28_29_20const($0) | 0) == 1) {
   $0 = tflite__Operator__builtin_options_28_29_20const($0);
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function lcdSetPixel_ArrayBuffer_flat($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 lcdSetPixels_ArrayBuffer_flat(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], 1, HEAP32[$4 >> 2]);
 __stack_pointer = $4 + 16 | 0;
}

function jsvIsBasicString($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
  $2 = HEAP8[$1 + 7 | 0] >= 28 ? HEAP8[$1 + 7 | 0] <= 37 : $2;
  HEAP8[$1 + 15 | 0] = $2;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function jsiConsoleRemoveInputLine() {
 if (!(HEAP8[347076] & 1)) {
  HEAP8[347076] = 1;
  if (!(!(jsiEcho() & 1) | !HEAP32[86768])) {
   jsiMoveCursorChar(HEAP32[86768], HEAP32[86770], 0);
   jsiConsolePrintChar(13);
   jsiConsoleEraseAfterCursor();
   if (HEAPU16[173534] & 8) {
    jsiConsolePrintChar(8);
    jsiConsolePrintChar(8);
    jsiConsolePrintChar(8);
    jsiConsolePrintChar(8);
    jsiConsolePrintChar(8);
   }
  }
 }
}

function std____2____compressed_pair_TfLiteDepthwiseConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_TfLiteDepthwiseConvParams__2c_200_2c_20false_____get_28_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jsvStringIteratorSetCharAndNext($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 if (jsvStringIteratorHasChar_2(HEAP32[$2 + 12 >> 2]) & 1) {
  HEAP8[HEAP32[HEAP32[$2 + 12 >> 2] + 16 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0] = HEAPU8[$2 + 11 | 0];
 }
 jsvStringIteratorNextInline(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function jsvObjectGetChildI($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (!HEAP32[$2 + 8 >> 2]) {
   HEAP32[$2 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = jsvSkipNameAndUnLock(jsvFindChildFromStringI(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]));
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function isHexadecimal($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 label$1: {
  if (HEAP8[$1 + 15 | 0] >= 48) {
   $0 = 1;
   if (HEAP8[$1 + 15 | 0] <= 57) {
    break label$1;
   }
  }
  if (HEAP8[$1 + 15 | 0] >= 97) {
   $0 = 1;
   if (HEAP8[$1 + 15 | 0] <= 102) {
    break label$1;
   }
  }
  $2 = HEAP8[$1 + 15 | 0] >= 65 ? HEAP8[$1 + 15 | 0] <= 70 : $2;
  $0 = $2;
 }
 return $0 & 1;
}

function gen_jswrap_DataView_setUint32($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP8[$4 + 3 | 0] = $3;
 jswrap_dataview_set(HEAP32[$4 + 12 >> 2], 4, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP8[$4 + 3 | 0] & 1);
 __stack_pointer = $4 + 16 | 0;
}

function gen_jswrap_DataView_setUint16($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP8[$4 + 3 | 0] = $3;
 jswrap_dataview_set(HEAP32[$4 + 12 >> 2], 2, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP8[$4 + 3 | 0] & 1);
 __stack_pointer = $4 + 16 | 0;
}

function gen_jswrap_DataView_setInt32($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP8[$4 + 3 | 0] = $3;
 jswrap_dataview_set(HEAP32[$4 + 12 >> 2], 20, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP8[$4 + 3 | 0] & 1);
 __stack_pointer = $4 + 16 | 0;
}

function gen_jswrap_DataView_setInt16($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP8[$4 + 3 | 0] = $3;
 jswrap_dataview_set(HEAP32[$4 + 12 >> 2], 18, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP8[$4 + 3 | 0] & 1);
 __stack_pointer = $4 + 16 | 0;
}

function tflite__ErrorReporter__Report_28char_20const__2c_20____29($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return HEAP32[$3 >> 2];
}

function jsvIsStringExt($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
  $2 = HEAP8[$1 + 7 | 0] >= 41 ? HEAP8[$1 + 7 | 0] <= 51 : $2;
  HEAP8[$1 + 15 | 0] = $2;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function jsvIsBoolean($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
  $0 = 1;
  $0 = HEAP8[$1 + 7 | 0] != 12 ? HEAP8[$1 + 7 | 0] == 17 : $0;
  HEAP8[$1 + 15 | 0] = $0;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function jsvIsBasicName($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
  $2 = HEAP8[$1 + 7 | 0] >= 23 ? HEAP8[$1 + 7 | 0] <= 27 : $2;
  HEAP8[$1 + 15 | 0] = $2;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function gen_jswrap_DataView_setUint8($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP8[$4 + 3 | 0] = $3;
 jswrap_dataview_set(HEAP32[$4 + 12 >> 2], 1, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP8[$4 + 3 | 0] & 1);
 __stack_pointer = $4 + 16 | 0;
}

function gen_jswrap_DataView_setInt8($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP8[$4 + 3 | 0] = $3;
 jswrap_dataview_set(HEAP32[$4 + 12 >> 2], 17, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP8[$4 + 3 | 0] & 1);
 __stack_pointer = $4 + 16 | 0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph____operator_5b_5d_28unsigned_20int_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph____Get_28unsigned_20int_29_20const(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function charToUpperCase($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 label$1: {
  if (!(!(HEAP8[$1 + 15 | 0] <= 122 & HEAP8[$1 + 15 | 0] >= 97 | HEAP8[$1 + 15 | 0] >>> 0 <= 246 & HEAP8[$1 + 15 | 0] >>> 0 >= 224) & (HEAP8[$1 + 15 | 0] >>> 0 < 248 | HEAP8[$1 + 15 | 0] >>> 0 > 254))) {
   $0 = HEAP8[$1 + 15 | 0] - 32 | 0;
   break label$1;
  }
  $0 = HEAP8[$1 + 15 | 0];
 }
 return $0 << 24 >> 24;
}

function tflite__SubGraph__operators_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_flatbuffers__Offset_tflite__Operator___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__Operator___20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 10);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_TfLitePoolParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_TfLitePoolParams__2c_200_2c_20false_____get_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_TfLiteConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_TfLiteConvParams__2c_200_2c_20false_____get_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function charToLowerCase($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 label$1: {
  if (!(!(HEAP8[$1 + 15 | 0] <= 90 & HEAP8[$1 + 15 | 0] >= 65 | HEAP8[$1 + 15 | 0] >>> 0 <= 214 & HEAP8[$1 + 15 | 0] >>> 0 >= 192) & (HEAP8[$1 + 15 | 0] >>> 0 < 216 | HEAP8[$1 + 15 | 0] >>> 0 > 222))) {
   $0 = HEAP8[$1 + 15 | 0] + 32 | 0;
   break label$1;
  }
  $0 = HEAP8[$1 + 15 | 0];
 }
 return $0 << 24 >> 24;
}

function jsvIsNumeric($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
  $2 = HEAP8[$1 + 7 | 0] >= 10 ? HEAP8[$1 + 7 | 0] <= 17 : $2;
  HEAP8[$1 + 15 | 0] = $2;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function flatbuffers__Vector_int___Get_28unsigned_20int_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = flatbuffers__IndirectHelper_int___Read_28unsigned_20char_20const__2c_20unsigned_20int_29(flatbuffers__Vector_int___Data_28_29_20const(HEAP32[$2 + 12 >> 2]), HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jsvIsString($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
  $2 = HEAP8[$1 + 7 | 0] >= 18 ? HEAP8[$1 + 7 | 0] <= 40 : $2;
  HEAP8[$1 + 15 | 0] = $2;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function jsvIsObject($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
  $0 = 1;
  $0 = HEAP8[$1 + 7 | 0] != 5 ? HEAP8[$1 + 7 | 0] == 1 : $0;
  HEAP8[$1 + 15 | 0] = $0;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function jsvGetLastArrayItem($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP16[$1 + 6 >> 1] = jsvGetLastChild(HEAP32[$1 + 8 >> 2]);
 label$1: {
  if (!HEAPU16[$1 + 6 >> 1]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipNameAndUnLock(jsvLock(HEAPU16[$1 + 6 >> 1]));
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsiIsAboutToEditInputLine() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 if (HEAP8[347085] & 1) {
  HEAP8[347085] = 0;
  if (jsiIsInHistory(HEAP32[86768]) & 1) {
   HEAP32[$0 + 12 >> 2] = jsvCopy(HEAP32[86768], 0);
   if (HEAP32[$0 + 12 >> 2]) {
    jsiInputLineCursorMoved();
    jsvUnLock(HEAP32[86768]);
    HEAP32[86768] = HEAP32[$0 + 12 >> 2];
   }
  }
 }
 __stack_pointer = $0 + 16 | 0;
}

function getCalendarDate($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 getDateFromDayNumber(HEAP32[$2 + 12 >> 2], $0 + 12 | 0, $0 + 8 | 0, $0 + 4 | 0);
 HEAP32[$0 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 + 16 >> 2] = (HEAP32[$0 >> 2] + 4 | 0) % 7;
 if (HEAP32[$0 + 16 >> 2] < 0) {
  HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] + 7;
 }
 __stack_pointer = $2 + 16 | 0;
}

function _jsiInitNamedArray($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvObjectGetChild(HEAP32[86751], HEAP32[$1 + 12 >> 2], 3);
 HEAP16[$1 + 6 >> 1] = 0;
 if (HEAP32[$1 + 8 >> 2]) {
  HEAP16[$1 + 6 >> 1] = jsvGetRef(jsvRef(HEAP32[$1 + 8 >> 2]));
 }
 jsvUnLock(HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAPU16[$1 + 6 >> 1];
}

function tflite__Model__20flatbuffers__GetMutableRoot_tflite__Model__28void__29($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 flatbuffers__EndianCheck_28_29();
 $0 = HEAP32[$1 + 12 >> 2];
 $2 = unsigned_20int_20flatbuffers__EndianScalar_unsigned_20int__28unsigned_20int_29(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 + $2 | 0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer____operator_5b_5d_28unsigned_20int_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer____Get_28unsigned_20int_29_20const(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function tflite__Model__subgraphs_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph___20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 8);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__Model__metadata_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_flatbuffers__Offset_tflite__Metadata___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__Metadata___20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 16);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jsvIsName($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
  $2 = HEAP8[$1 + 7 | 0] >= 14 ? HEAP8[$1 + 7 | 0] <= 27 : $2;
  HEAP8[$1 + 15 | 0] = $2;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function st_e_yield_literal($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 label$1: {
  if (can_take_byte(HEAP32[$2 + 4 >> 2])) {
   push_literal_byte(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 4 >> 2]);
   HEAP32[$2 + 12 >> 2] = 2;
   break label$1;
  }
  HEAP32[$2 + 12 >> 2] = 4;
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function fromTimeInDay($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return +HEAP32[HEAP32[$1 + 12 >> 2] >> 2] * 864e5 + +(HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] + Math_imul(HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] + Math_imul((HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2] + Math_imul(HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2], 60) | 0) - HEAP32[HEAP32[$1 + 12 >> 2] + 20 >> 2] | 0, 60) | 0, 1e3) | 0);
}

function tflite__SubGraph__tensors_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor___20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 4);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function lcdSetPixel_ArrayBuffer($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 lcdSetPixels_ArrayBuffer(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], 1, HEAP32[$4 >> 2]);
 __stack_pointer = $4 + 16 | 0;
}

function jsvObjectIteratorNext($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[HEAP32[$1 + 12 >> 2] >> 2]) {
  HEAP16[$1 + 10 >> 1] = jsvGetNextSibling(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
  jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
  $0 = jsvLockSafe(HEAPU16[$1 + 10 >> 1]);
  HEAP32[HEAP32[$1 + 12 >> 2] >> 2] = $0;
 }
 __stack_pointer = $1 + 16 | 0;
}

function jsvArrayBufferGet($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 80 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 76 >> 2] = $0;
 HEAP32[$2 + 72 >> 2] = $1;
 jsvArrayBufferIteratorNew($2 + 16 | 0, HEAP32[$2 + 76 >> 2], HEAP32[$2 + 72 >> 2]);
 HEAP32[$2 + 12 >> 2] = jsvArrayBufferIteratorGetValue($2 + 16 | 0, 0);
 jsvArrayBufferIteratorFree($2 + 16 | 0);
 __stack_pointer = $2 + 80 | 0;
 return HEAP32[$2 + 12 >> 2];
}

function jsiObjectHasCallbacks($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = jsvObjectGetChildIfExists(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 HEAP8[$2 + 3 | 0] = (jsvIsUndefined(HEAP32[$2 + 4 >> 2]) ^ -1) & 1;
 jsvUnLock(HEAP32[$2 + 4 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return HEAP8[$2 + 3 | 0] & 1;
}

function flatbuffers__IndirectHelper_float___Read_28unsigned_20char_20const__2c_20unsigned_20int_29($0, $1) {
 var $2 = 0, $3 = Math_fround(0);
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = float_20flatbuffers__EndianScalar_float__28float_29(HEAPF32[HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 2) >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $3;
}

function tflite__Model__buffers_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer___20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer___20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 12);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function terminalGetGFX($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!(HEAPU8[349512] | HEAPU8[349513] << 8 | (HEAPU8[349514] << 16 | HEAPU8[349515] << 24))) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  __memcpy(HEAP32[$1 + 8 >> 2], 349460, 72);
  HEAP8[$1 + 15 | 0] = 1;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}

function espruino_snprintf($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = espruino_snprintf_va(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
 __stack_pointer = $4 + 32 | 0;
 return HEAP32[$4 + 12 >> 2];
}

function std____2____compressed_pair_TfLiteSoftmaxParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_TfLiteSoftmaxParams__2c_200_2c_20false_____get_28_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_TfLiteReshapeParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_TfLiteReshapeParams__2c_200_2c_20false_____get_28_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jsvArrayBufferSet($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 80 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 76 >> 2] = $0;
 HEAP32[$3 + 72 >> 2] = $1;
 HEAP32[$3 + 68 >> 2] = $2;
 jsvArrayBufferIteratorNew($3 + 8 | 0, HEAP32[$3 + 76 >> 2], HEAP32[$3 + 72 >> 2]);
 jsvArrayBufferIteratorSetValue($3 + 8 | 0, HEAP32[$3 + 68 >> 2], 0);
 jsvArrayBufferIteratorFree($3 + 8 | 0);
 __stack_pointer = $3 + 80 | 0;
}

function jspeiGetTopScope() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 label$1: {
  if (HEAP32[86752]) {
   HEAP32[$0 + 8 >> 2] = jsvGetLastArrayItem(HEAP32[86752]);
   if (HEAP32[$0 + 8 >> 2]) {
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
    break label$1;
   }
  }
  HEAP32[$0 + 12 >> 2] = jsvLockAgain(HEAP32[86750]);
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function jswrap_object_removeAllListeners_cstr($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = jsvNewFromString(HEAP32[$2 + 8 >> 2]);
 if (HEAP32[$2 + 4 >> 2]) {
  jswrap_object_removeAllListeners(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2]);
  jsvUnLock(HEAP32[$2 + 4 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function jsvIsVariableDefined($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = 1;
 label$1: {
  if (!(jsvIsName(HEAP32[$1 + 12 >> 2]) & 1)) {
   break label$1;
  }
  $0 = 1;
  if (jsvIsNameWithValue(HEAP32[$1 + 12 >> 2]) & 1) {
   break label$1;
  }
  $0 = (jsvGetFirstChild(HEAP32[$1 + 12 >> 2]) & 65535) != 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jspeiAddScope($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 if (!HEAP32[86752]) {
  HEAP32[86752] = jsvNewEmptyArray();
 }
 label$2: {
  if (!HEAP32[86752]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$2;
  }
  jsvArrayPush(HEAP32[86752], HEAP32[$1 + 8 >> 2]);
  HEAP8[$1 + 15 | 0] = 1;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}

function jsiGetDeviceFromClass($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!(!HEAP32[$1 + 8 >> 2] | HEAP8[HEAP32[$1 + 8 >> 2]] != 68 | (HEAP8[HEAP32[$1 + 8 >> 2] + 1 | 0] != 69 | HEAP8[HEAP32[$1 + 8 >> 2] + 2 | 0] != 86))) {
   HEAP8[$1 + 15 | 0] = HEAPU8[HEAP32[$1 + 8 >> 2] + 3 | 0];
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = 0;
 }
 return HEAPU8[$1 + 15 | 0];
}

function gemmlowp__FixedPoint_int_2c_2012___FromScalarRaw_28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 4 >> 2] = $0;
 $0 = int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(HEAP32[$1 + 4 >> 2]);
 HEAP32[gemmlowp__FixedPoint_int_2c_2012___raw_28_29($1 + 8 | 0) >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jsvGetPathTo($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = 0;
 $0 = jsvGetPathTo_int(HEAP32[$4 + 28 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2], $4 + 12 | 0);
 __stack_pointer = $4 + 32 | 0;
 return $0;
}

function gemmlowp__FixedPoint_int_2c_205___FromScalarRaw_28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 4 >> 2] = $0;
 $0 = int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(HEAP32[$1 + 4 >> 2]);
 HEAP32[gemmlowp__FixedPoint_int_2c_205___raw_28_29($1 + 8 | 0) >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function gemmlowp__FixedPoint_int_2c_202___FromScalarRaw_28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 4 >> 2] = $0;
 $0 = int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(HEAP32[$1 + 4 >> 2]);
 HEAP32[gemmlowp__FixedPoint_int_2c_202___raw_28_29($1 + 8 | 0) >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function gemmlowp__FixedPoint_int_2c_200___FromScalarRaw_28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 4 >> 2] = $0;
 $0 = int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29(HEAP32[$1 + 4 >> 2]);
 HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($1 + 8 | 0) >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function void_20const__20flatbuffers__Table__GetPointer_void_20const___28unsigned_20short_29_20const($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP16[$2 + 10 >> 1] = $1;
 $0 = void_20const__20flatbuffers__Table__GetPointer_void_20const___28unsigned_20short_29(HEAP32[$2 + 12 >> 2], HEAPU16[$2 + 10 >> 1]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jsvRemoveAllChildren($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 while (1) {
  if (jsvGetFirstChild(HEAP32[$1 + 12 >> 2]) & 65535) {
   HEAP32[$1 + 8 >> 2] = jsvLock(jsvGetFirstChild(HEAP32[$1 + 12 >> 2]) & 65535);
   jsvRemoveChildAndUnLock(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 8 >> 2]);
   continue;
  }
  break;
 }
 __stack_pointer = $1 + 16 | 0;
}

function gen_jswrap_Uint8ClampedArray_Uint8ClampedArray($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_typedarray_constructor(65, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function std____2____compressed_pair_TfLitePoolParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_TfLitePoolParams__2c_200_2c_20false_____get_28_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_TfLiteConvParams__2c_20tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter___first_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = std____2____compressed_pair_elem_TfLiteConvParams__2c_200_2c_20false_____get_28_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jshSetFlowControlAllReady() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 if (HEAP8[349024] & 1) {
  HEAP32[$0 + 12 >> 2] = 0;
  while (1) {
   if (HEAP32[$0 + 12 >> 2] < 2) {
    jshSetFlowControlXON(HEAP32[$0 + 12 >> 2] + 21 & 255, 1);
    HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
    continue;
   }
   break;
  }
  HEAP8[349024] = 0;
 }
 __stack_pointer = $0 + 16 | 0;
}

function jswrap_serial_inject($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP8[$2 + 7 | 0] = jsiGetDeviceFromClass(HEAP32[$2 + 12 >> 2]);
 if (!(HEAPU8[$2 + 7 | 0] < 17 | HEAPU8[$2 + 7 | 0] > 22)) {
  jsvIterateCallback(HEAP32[$2 + 8 >> 2], 630, $2 + 7 | 0);
 }
 __stack_pointer = $2 + 16 | 0;
}

function jsvStringIteratorCatchUp($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 while (1) {
  $0 = 0;
  $0 = HEAP32[HEAP32[$1 + 12 >> 2] >> 2] ? HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] >= HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2] : $0;
  if ($0) {
   jsvStringIteratorLoadInline(HEAP32[$1 + 12 >> 2]);
   continue;
  }
  break;
 }
 __stack_pointer = $1 + 16 | 0;
}

function jsvGetFirstChild($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $1 = HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24);
 $0 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
 $1 = ($1 & 268435455) << 4 | $0 >>> 28;
 return $1 & 16383;
}

function jslCharPosNew($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 jsvStringIteratorNew(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 $0 = jsvStringIteratorGetCharAndNext(HEAP32[$3 + 12 >> 2]);
 HEAP8[HEAP32[$3 + 12 >> 2] + 36 | 0] = $0;
 __stack_pointer = $3 + 16 | 0;
}

function jsvGetPrevSibling($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $1 = HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24);
 $0 = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
 $1 = ($1 & 16383) << 18 | $0 >>> 14;
 return $1 & 16383;
}

function jswrap_espruino_toArrayBuffer($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!(jsvIsString(HEAP32[$1 + 8 >> 2]) & 1)) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvNewArrayBufferFromString(HEAP32[$1 + 8 >> 2], 0);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsSendTouchEvent($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 touchHandlerInternal(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 __stack_pointer = $4 + 16 | 0;
}

function jswrap_interface_setInterval($0, $1, $2) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAPF64[$3 + 16 >> 3] = $1;
 HEAP32[$3 + 12 >> 2] = $2;
 $0 = _jswrap_interface_setTimeoutOrInterval(HEAP32[$3 + 28 >> 2], HEAPF64[$3 + 16 >> 3], HEAP32[$3 + 12 >> 2], 0);
 __stack_pointer = $3 + 32 | 0;
 return $0 | 0;
}

function jswrap_espruino_getConsole() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP8[$0 + 11 | 0] = jsiGetConsoleDevice();
 label$1: {
  if (!HEAPU8[$0 + 11 | 0]) {
   HEAP32[$0 + 12 >> 2] = jsvNewNull_1();
   break label$1;
  }
  HEAP32[$0 + 12 >> 2] = jsvNewFromString(jshGetDeviceString(HEAPU8[$0 + 11 | 0]));
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function jsvTraceLockInfo($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvGetRef(HEAP32[$1 + 12 >> 2]);
 $2 = jsvGetRefs(HEAP32[$1 + 12 >> 2]);
 HEAP32[$1 + 8 >> 2] = jsvGetLocks(HEAP32[$1 + 12 >> 2]) & 255;
 HEAP32[$1 + 4 >> 2] = $2 & 65535;
 HEAP32[$1 >> 2] = $0 & 65535;
 jsiConsolePrintf(144178, $1);
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_interface_setTimeout($0, $1, $2) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAPF64[$3 + 16 >> 3] = $1;
 HEAP32[$3 + 12 >> 2] = $2;
 $0 = _jswrap_interface_setTimeoutOrInterval(HEAP32[$3 + 28 >> 2], HEAPF64[$3 + 16 >> 3], HEAP32[$3 + 12 >> 2], 1);
 __stack_pointer = $3 + 32 | 0;
 return $0 | 0;
}

function jsvFreePtrInternal($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 + 12 | 0] = 0;
 HEAP8[$0 + 13 | 0] = 0;
 jshInterruptOff();
 jsvSetNextSibling(HEAP32[$1 + 12 >> 2], HEAPU16[89490]);
 HEAP16[89490] = jsvGetRef(HEAP32[$1 + 12 >> 2]);
 HEAP8[178977] = 1;
 jshInterruptOn();
 __stack_pointer = $1 + 16 | 0;
}

function heatshrink_decode($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 >> 2] = HEAP32[$3 + 4 >> 2];
 $0 = heatshrink_decode_cb(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2] ? 565 : 0, HEAP32[$3 + 4 >> 2] ? $3 : 0);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function jsvUnLockMany($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 while (1) {
  if (HEAP32[$2 + 12 >> 2]) {
   $1 = HEAP32[$2 + 8 >> 2];
   $0 = HEAP32[$2 + 12 >> 2] - 1 | 0;
   HEAP32[$2 + 12 >> 2] = $0;
   jsvUnLockInline(HEAP32[($0 << 2) + $1 >> 2]);
   continue;
  }
  break;
 }
 __stack_pointer = $2 + 16 | 0;
}

function jshSetPinShouldStayWatched($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 $1 = (HEAPU8[$2 + 15 | 0] >>> 5 << 2) + 347052 | 0;
 if (HEAP8[$2 + 14 | 0] & 1) {
  $0 = 1 << HEAPU8[$2 + 15 | 0];
 } else {
  $0 = 0;
 }
 HEAP32[$1 >> 2] = $0 | HEAP32[(HEAPU8[$2 + 15 | 0] >>> 5 << 2) + 347052 >> 2] & __wasm_rotl_i32(-2, HEAPU8[$2 + 15 | 0]);
}

function gen_jswrap_Float64Array_Float64Array($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_typedarray_constructor(40, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_Float32Array_Float32Array($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_typedarray_constructor(36, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function graphicsGetPixel($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 graphicsToDeviceCoordinates(HEAP32[$3 + 12 >> 2], $3 + 8 | 0, $3 + 4 | 0);
 $0 = graphicsGetPixelDevice(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function jsvLock($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP16[$1 + 14 >> 1] = $0;
 HEAP32[$1 + 8 >> 2] = jsvGetAddressOf(HEAPU16[$1 + 14 >> 1]);
 $0 = HEAP32[$1 + 8 >> 2];
 $2 = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) + 1024 | 0;
 HEAP8[$0 + 12 | 0] = $2;
 HEAP8[$0 + 13 | 0] = $2 >>> 8;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jshSetPinStateIsManual($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 $1 = (HEAPU8[$2 + 15 | 0] >>> 5 << 2) + 347044 | 0;
 if (HEAP8[$2 + 14 | 0] & 1) {
  $0 = 1 << HEAPU8[$2 + 15 | 0];
 } else {
  $0 = 0;
 }
 HEAP32[$1 >> 2] = $0 | HEAP32[(HEAPU8[$2 + 15 | 0] >>> 5 << 2) + 347044 >> 2] & __wasm_rotl_i32(-2, HEAPU8[$2 + 15 | 0]);
}

function gen_jswrap_Uint32Array_Uint32Array($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_typedarray_constructor(4, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_Uint24Array_Uint24Array($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_typedarray_constructor(3, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_Uint16Array_Uint16Array($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_typedarray_constructor(2, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_Int32Array_Int32Array($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_typedarray_constructor(20, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_Int16Array_Int16Array($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_typedarray_constructor(18, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__operator_28_29_28void__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[HEAP32[$2 + 12 >> 2] >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function jswrap_flash_erasePage($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (!(jsvIsInt(HEAP32[$1 + 12 >> 2]) & 1)) {
   HEAP32[$1 >> 2] = HEAP32[$1 + 12 >> 2];
   jsExceptionHere(1, 113898, $1);
   break label$1;
  }
  jshFlashErasePage(jsvGetInteger(HEAP32[$1 + 12 >> 2]));
 }
 __stack_pointer = $1 + 16 | 0;
}

function jspEvaluateExpressionVar($0) {
 var $1 = 0;
 $1 = __stack_pointer - 144 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 140 >> 2] = $0;
 HEAP32[$1 + 12 >> 2] = jslSetLex($1 + 16 | 0);
 jslInit(HEAP32[$1 + 140 >> 2]);
 HEAP32[$1 + 8 >> 2] = jspeExpression();
 jslKill();
 jslSetLex(HEAP32[$1 + 12 >> 2]);
 $0 = jsvSkipNameAndUnLock(HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 144 | 0;
 return $0;
}

function jsiClearInputLine($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 if (!(jsvIsEmptyString(HEAP32[86768]) & 1)) {
  if (HEAP8[$1 + 15 | 0] & 1) {
   jsiConsoleRemoveInputLine();
  }
  jsiInputLineCursorMoved();
  jsvUnLock(HEAP32[86768]);
  HEAP32[86768] = jsvNewFromEmptyString_5();
  HEAP32[86770] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
}

function gen_jswrap_Uint8Array_Uint8Array($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_typedarray_constructor(1, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function jswrap_array_filter($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = _jswrap_array_iterate_with_callback(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 1, 1, 1);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function jspNewBuiltin($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 4 >> 2] = jswFindBuiltInFunction(0, HEAP32[$1 + 8 >> 2]);
 label$1: {
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsonNeedsNewLine($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = 1;
 label$1: {
  if (jsvIsUndefined(HEAP32[$1 + 12 >> 2]) & 1) {
   break label$1;
  }
  $0 = 1;
  if (jsvIsNull(HEAP32[$1 + 12 >> 2]) & 1) {
   break label$1;
  }
  $0 = jsvIsNumeric(HEAP32[$1 + 12 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return ($0 ^ -1) & 1;
}

function jshI2CInitInfo($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 4 | 0] = 255;
 HEAP8[HEAP32[$1 + 12 >> 2] + 5 | 0] = 255;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 | 0] = 160;
 HEAP8[$0 + 1 | 0] = 134;
 HEAP8[$0 + 2 | 0] = 1;
 HEAP8[$0 + 3 | 0] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 6 | 0] = 0;
 HEAP8[HEAP32[$1 + 12 >> 2] + 7 | 0] = 1;
}

function gen_jswrap_Int8Array_Int8Array($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_typedarray_constructor(17, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function jswrap_array_every($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = _jswrap_array_iterate_with_callback(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 0, 1, 1);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function strcmp($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = HEAPU8[$0 | 0];
 $3 = HEAPU8[$1 | 0];
 label$1: {
  if (!$2 | ($3 | 0) != ($2 | 0)) {
   break label$1;
  }
  while (1) {
   $3 = HEAPU8[$1 + 1 | 0];
   $2 = HEAPU8[$0 + 1 | 0];
   if (!$2) {
    break label$1;
   }
   $1 = $1 + 1 | 0;
   $0 = $0 + 1 | 0;
   if (($2 | 0) == ($3 | 0)) {
    continue;
   }
   break;
  }
 }
 return $2 - $3 | 0;
}

function jswrap_array_some($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = _jswrap_array_iterate_with_callback(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 0, 1, 0);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_String_includes($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_string_indexOf(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 0);
 __stack_pointer = $3 + 16 | 0;
 return ($0 | 0) >= 0 | 0;
}

function tflite__MicroMutableOpResolver_9u____MicroMutableOpResolver_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 tflite__MicroMutableOpResolver_9u____MicroMutableOpResolver_28_29($0);
 tflite__MicroMutableOpResolver_9u___operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_array_map($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = _jswrap_array_iterate_with_callback(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 1, 0, 0);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function jsvUnLock4($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 jsvUnLockInline(HEAP32[$4 + 12 >> 2]);
 jsvUnLockInline(HEAP32[$4 + 8 >> 2]);
 jsvUnLockInline(HEAP32[$4 + 4 >> 2]);
 jsvUnLockInline(HEAP32[$4 >> 2]);
 __stack_pointer = $4 + 16 | 0;
}

function jsvIsInternalFunctionKey($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (jsvIsString(HEAP32[$1 + 12 >> 2]) & 1) {
   $0 = 1;
   if (HEAP8[HEAP32[$1 + 12 >> 2]] == -1) {
    break label$1;
   }
  }
  $0 = jsvIsFunctionParameter(HEAP32[$1 + 12 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return $0 & 1;
}

function jslMatch($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (HEAP16[HEAP32[44743] + 2 >> 1] != HEAP32[$1 + 8 >> 2]) {
   jslMatchError(HEAP32[$1 + 8 >> 2]);
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  jslGetNextToken();
  HEAP8[$1 + 15 | 0] = 1;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}

function jshGetEventDataPin($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 14 | 0] = $0;
 HEAP32[$1 + 8 >> 2] = HEAPU8[$1 + 14 | 0] - 1;
 label$1: {
  if ((HEAP32[(HEAP32[$1 + 8 >> 2] << 2) + 347168 >> 2] & -256) == -256) {
   HEAP8[$1 + 15 | 0] = HEAP32[(HEAP32[$1 + 8 >> 2] << 2) + 347168 >> 2];
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = 255;
 }
 return HEAPU8[$1 + 15 | 0];
}

function tflite__FullyConnectedOptions__asymmetric_quantize_inputs_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20char_20flatbuffers__Table__GetField_unsigned_20char__28unsigned_20short_2c_20unsigned_20char_29_20const(HEAP32[$1 + 12 >> 2], 10, 0) & 255;
 __stack_pointer = $1 + 16 | 0;
 return ($0 | 0) != 0;
}

function jswOnCharEvent($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 14 | 0] = $0;
 HEAP8[$2 + 13 | 0] = $1;
 label$1: {
  if (HEAPU8[$2 + 14 | 0] == 22) {
   HEAP8[$2 + 15 | 0] = jswrap_banglejs_gps_character(HEAP8[$2 + 13 | 0]) & 1;
   break label$1;
  }
  HEAP8[$2 + 15 | 0] = 0;
 }
 __stack_pointer = $2 + 16 | 0;
 return HEAP8[$2 + 15 | 0] & 1;
}

function gen_jswrap_Graphics_drawPolyAA($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = jswrap_graphics_drawPoly_X(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1, 1);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function tflite__AlignPointerUp_28unsigned_20char__2c_20unsigned_20long_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 >> 2] = Math_imul(HEAP32[$2 + 8 >> 2], (HEAP32[$2 + 4 >> 2] + (HEAP32[$2 + 8 >> 2] - 1 | 0) >>> 0) / HEAPU32[$2 + 8 >> 2] | 0);
 return HEAP32[$2 >> 2];
}

function jswrap_espruino_toJS($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 704;
 HEAP32[$1 + 4 >> 2] = jsvNewFromEmptyString_9();
 if (HEAP32[$1 + 4 >> 2]) {
  jsfGetJSON(HEAP32[$1 + 12 >> 2], HEAP32[$1 + 4 >> 2], HEAP32[$1 + 8 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 4 >> 2];
}

function jsvArrayPush2Int($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 jsvArrayPushAndUnLock(HEAP32[$3 + 12 >> 2], jsvNewFromInteger(HEAP32[$3 + 8 >> 2]));
 jsvArrayPushAndUnLock(HEAP32[$3 + 12 >> 2], jsvNewFromInteger(HEAP32[$3 + 4 >> 2]));
 __stack_pointer = $3 + 16 | 0;
}

function tflite__QuantizationParameters__zero_point_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_long_20long__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_long_20long__20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 10);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_spi_write_cb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 FUNCTION_TABLE[HEAP32[HEAP32[$3 + 4 >> 2] >> 2]](HEAP32[$3 + 12 >> 2], 0, HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2] + 4 | 0);
 __stack_pointer = $3 + 16 | 0;
}

function jspeCheckBreakContinue() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 label$1: {
  label$2: {
   if (HEAP32[86758] & 4) {
    HEAP32[86758] = HEAP32[86758] & -64 | 1;
    break label$2;
   }
   if (HEAP32[86758] & 2) {
    HEAP32[86758] = HEAP32[86758] & -64 | 1;
    HEAP8[$0 + 15 | 0] = 1;
    break label$1;
   }
  }
  HEAP8[$0 + 15 | 0] = 0;
 }
 return HEAP8[$0 + 15 | 0] & 1;
}

function gen_jswrap_Graphics_drawPoly($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = jswrap_graphics_drawPoly_X(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1, 0);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function flatbuffers__IndirectHelper_int___Read_28unsigned_20char_20const__2c_20unsigned_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = int_20flatbuffers__EndianScalar_int__28int_29(HEAP32[HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 2) >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function tflite__Operator__custom_options_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_unsigned_20char__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_unsigned_20char__20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 14);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__MicroAllocator__AllocatePersistentBuffer_28unsigned_20long_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, HEAP32[$2 + 8 >> 2], 16) | 0;
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function tflite__RuntimeShape__Resize_28int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (HEAP32[$0 >> 2] > 5) {
  abort();
  abort();
 }
 HEAP32[$0 >> 2] = HEAP32[$2 + 8 >> 2];
 if (HEAP32[$2 + 8 >> 2] > 5) {
  abort();
  abort();
 }
 __stack_pointer = $2 + 16 | 0;
}

function std____2____compressed_pair_elem_TfLiteFullyConnectedParams__2c_200_2c_20false_____compressed_pair_elem_TfLiteFullyConnectedParams___2c_20void__28TfLiteFullyConnectedParams___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
 return $0;
}

function gen_jswrap_String_lastIndexOf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_string_indexOf(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 1);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_DataView_getFloat64($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = jswrap_dataview_get(HEAP32[$3 + 12 >> 2], 40, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_DataView_getFloat32($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = jswrap_dataview_get(HEAP32[$3 + 12 >> 2], 36, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function std____2____compressed_pair_elem_TfLiteDepthwiseConvParams__2c_200_2c_20false_____compressed_pair_elem_TfLiteDepthwiseConvParams___2c_20void__28TfLiteDepthwiseConvParams___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
 return $0;
}

function jswrap_storagefile_read($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 if (HEAP32[$2 + 8 >> 2] < 0) {
  HEAP32[$2 + 8 >> 2] = 0;
 }
 $0 = jswrap_storagefile_read_internal(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function jsvTrace($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP8[$2 + 7 | 0] = HEAPU8[178978];
 HEAP8[178978] = 0;
 _jsvTrace(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2], 0);
 HEAP8[178978] = HEAPU8[$2 + 7 | 0];
 jsiConsolePrintf(146977, 0);
 __stack_pointer = $2 + 16 | 0;
}

function gen_jswrap_DataView_getUint32($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = jswrap_dataview_get(HEAP32[$3 + 12 >> 2], 4, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_DataView_getUint16($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = jswrap_dataview_get(HEAP32[$3 + 12 >> 2], 2, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_DataView_getInt32($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = jswrap_dataview_get(HEAP32[$3 + 12 >> 2], 20, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_DataView_getInt16($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = jswrap_dataview_get(HEAP32[$3 + 12 >> 2], 18, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function __sin($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $3 = $0 * $0;
 $5 = $3 * ($3 * $3) * ($3 * 1.58969099521155e-10 + -2.5050760253406863e-8) + ($3 * ($3 * 27557313707070068e-22 + -.0001984126982985795) + .00833333333332249);
 $4 = $3 * $0;
 if (!$2) {
  return $4 * ($3 * $5 + -.16666666666666632) + $0;
 }
 return $0 - ($3 * ($1 * .5 - $5 * $4) - $1 + $4 * .16666666666666632);
}

function jsvObjectRemoveChild($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = jsvFindChildFromString(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 if (HEAP32[$2 + 4 >> 2]) {
  jsvRemoveChildAndUnLock(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 4 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function gen_jswrap_DataView_getUint8($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = jswrap_dataview_get(HEAP32[$3 + 12 >> 2], 1, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_DataView_getInt8($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = jswrap_dataview_get(HEAP32[$3 + 12 >> 2], 17, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function TfLiteFullyConnectedParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteFullyConnectedParams__28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, 12, 4);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jsvIsGetterOrSetter($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
  HEAP8[$1 + 15 | 0] = HEAP8[$1 + 7 | 0] == 6;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function gen_jswrap_String_indexOf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_string_indexOf(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 0);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function tflite__DepthwiseConv2DOptions__fused_activation_function_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = signed_20char_20flatbuffers__Table__GetField_signed_20char__28unsigned_20short_2c_20signed_20char_29_20const(HEAP32[$1 + 12 >> 2], 12, 0) << 24;
 __stack_pointer = $1 + 16 | 0;
 return $0 >> 24;
}

function std____2____compressed_pair_elem_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29___2c_200_2c_20false_____compressed_pair_elem_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = 0;
 return $0;
}

function jsvIsNativeString($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
  HEAP8[$1 + 15 | 0] = HEAP8[$1 + 7 | 0] == 39;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function TfLiteDepthwiseConvParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteDepthwiseConvParams__28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, 28, 4);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jsvNegateAndUnLock($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvNewFromInteger(0);
 HEAP32[$1 + 4 >> 2] = jsvMathsOpSkipNames(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2], 45);
 jsvUnLock2(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 4 >> 2];
}

function jsvIsFlashString($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
  HEAP8[$1 + 15 | 0] = HEAP8[$1 + 7 | 0] == 40;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function jsvGetLongIntegerAndUnLock($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 >> 2] = jsvGetLongInteger(HEAP32[$1 + 12 >> 2]);
 HEAP32[$1 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
 jsvUnLock(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
 return HEAP32[$1 >> 2];
}

function gen_jswrap_String_padStart($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_string_padX(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 1);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function tflite__internal__ContextHelper__GetEvalTensor_28TfLiteContext_20const__2c_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2];
 return HEAP32[HEAP32[$2 + 4 >> 2] + 12 >> 2] + Math_imul(HEAP32[$2 + 8 >> 2], 12) | 0;
}

function tflite__FullyConnectedOptions__fused_activation_function_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = signed_20char_20flatbuffers__Table__GetField_signed_20char__28unsigned_20short_2c_20signed_20char_29_20const(HEAP32[$1 + 12 >> 2], 4, 0) << 24;
 __stack_pointer = $1 + 16 | 0;
 return $0 >> 24;
}

function jsvObjectIteratorGetValue_16($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetValue_15($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetValue_14($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetValue_13($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetValue_12($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetValue_11($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetValue_10($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvIsFlatString($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
  HEAP8[$1 + 15 | 0] = HEAP8[$1 + 7 | 0] == 38;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function jsvGetArrayLength($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP32[$1 + 12 >> 2] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
 }
 return HEAP32[$1 + 12 >> 2];
}

function tflite__FullyConnectedOptions__keep_num_dims_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20char_20flatbuffers__Table__GetField_unsigned_20char__28unsigned_20short_2c_20unsigned_20char_29_20const(HEAP32[$1 + 12 >> 2], 8, 0) & 255;
 __stack_pointer = $1 + 16 | 0;
 return ($0 | 0) != 0;
}

function jsvObjectIteratorGetValue_9($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetValue_8($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetValue_7($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetValue_6($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetValue_5($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetValue_4($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetValue_3($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetValue_2($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetValue_1($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function gen_jswrap_String_padEnd($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = jswrap_string_padX(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 0);
 __stack_pointer = $3 + 16 | 0;
 return $0 | 0;
}

function mbedtls_zeroize_2($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 12 >> 2];
 while (1) {
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP32[$2 + 8 >> 2] = $0 - 1;
  if ($0) {
   $0 = HEAP32[$2 + 4 >> 2];
   HEAP32[$2 + 4 >> 2] = $0 + 1;
   HEAP8[$0 | 0] = 0;
   continue;
  }
  break;
 }
}

function mbedtls_zeroize_1($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 12 >> 2];
 while (1) {
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP32[$2 + 8 >> 2] = $0 - 1;
  if ($0) {
   $0 = HEAP32[$2 + 4 >> 2];
   HEAP32[$2 + 4 >> 2] = $0 + 1;
   HEAP8[$0 | 0] = 0;
   continue;
  }
  break;
 }
}

function jsvStringIteratorNextInline($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
 if (HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] >= HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2]) {
  jsvStringIteratorLoadInline(HEAP32[$1 + 12 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorGetKey_9($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetKey_8($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetKey_7($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetKey_6($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetKey_5($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetKey_4($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetKey_3($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetKey_2($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorGetKey_1($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvIsEmptyString($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!(jsvHasCharacterData(HEAP32[$1 + 8 >> 2]) & 1)) {
   HEAP8[$1 + 15 | 0] = 1;
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = !jsvGetCharactersInVar(HEAP32[$1 + 8 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 15 | 0] & 1;
}

function jspeBlockOrStatement() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 label$1: {
  if (HEAP16[HEAP32[44743] + 2 >> 1] == 123) {
   jspeBlock();
   HEAP32[$0 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$0 + 8 >> 2] = jspeStatement();
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 8 >> 2];
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function jshPushIOCharEventFlowControl($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 label$1: {
  if (HEAPU8[$1 + 15 | 0] < 21 | HEAPU8[$1 + 15 | 0] > 22) {
   break label$1;
  }
  if ((jshGetEventsUsed() | 0) <= 191) {
   break label$1;
  }
  jshSetFlowControlXON(HEAPU8[$1 + 15 | 0], 0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function tflite__EspruinoErrorReporter___EspruinoErrorReporter_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 tflite__EspruinoErrorReporter___EspruinoErrorReporter_28_29($0);
 tflite__EspruinoErrorReporter__operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_pin_pulse($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP8[$3 + 11 | 0] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 jswrap_io_digitalPulse(jshGetPinFromVar(HEAP32[$3 + 12 >> 2]) & 255, HEAP8[$3 + 11 | 0] & 1, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function jswrap_array_forEach($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 _jswrap_array_iterate_with_callback(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 0, 0, 0);
 __stack_pointer = $3 + 16 | 0;
}

function jsvObjectIteratorGetValue($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvSkipName(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function isAlphaInline_1($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 label$1: {
  if (HEAP8[$1 + 15 | 0] >= 97) {
   $0 = 1;
   if (HEAP8[$1 + 15 | 0] <= 122) {
    break label$1;
   }
  }
  if (HEAP8[$1 + 15 | 0] >= 65) {
   $0 = 1;
   if (HEAP8[$1 + 15 | 0] <= 90) {
    break label$1;
   }
  }
  $0 = HEAP8[$1 + 15 | 0] == 95;
 }
 return $0;
}

function _jswrap_espruino_toUint8Array_char($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jsvArrayBufferIteratorSetByteValue(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2] << 24 >> 24);
 jsvArrayBufferIteratorNext(HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function tflite__Buffer__data_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_unsigned_20char__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_unsigned_20char__20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 4);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function mbedtls_zeroize($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 12 >> 2];
 while (1) {
  $0 = HEAP32[$2 + 8 >> 2];
  HEAP32[$2 + 8 >> 2] = $0 - 1;
  if ($0) {
   $0 = HEAP32[$2 + 4 >> 2];
   HEAP32[$2 + 4 >> 2] = $0 + 1;
   HEAP8[$0 | 0] = 0;
   continue;
  }
  break;
 }
}

function jsvObjectIteratorGetKey($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvLockAgain(HEAP32[HEAP32[$1 + 8 >> 2] >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_pin_pwm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAPF64[$3 + 16 >> 3] = $1;
 HEAP32[$3 + 12 >> 2] = $2;
 jswrap_io_analogWrite(jshGetPinFromVar(HEAP32[$3 + 28 >> 2]) & 255, HEAPF64[$3 + 16 >> 3], HEAP32[$3 + 12 >> 2]);
 __stack_pointer = $3 + 32 | 0;
}

function isAlphaInline($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 label$1: {
  if (HEAP8[$1 + 15 | 0] >= 97) {
   $0 = 1;
   if (HEAP8[$1 + 15 | 0] <= 122) {
    break label$1;
   }
  }
  if (HEAP8[$1 + 15 | 0] >= 65) {
   $0 = 1;
   if (HEAP8[$1 + 15 | 0] <= 90) {
    break label$1;
   }
  }
  $0 = HEAP8[$1 + 15 | 0] == 95;
 }
 return $0;
}

function jsfHashFiles($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 >> 2] = -1412571974;
 jsfBankListFiles(0, 134217728, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], $3);
 __stack_pointer = $3 + 16 | 0;
 return HEAP32[$3 >> 2];
}

function gemmlowp__FixedPoint_int_2c_202___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_202___28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20gemmlowp__RoundingDivideByPOT_int__28int_2c_20int_29(HEAP32[$1 + 12 >> 2], 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function gemmlowp__FixedPoint_int_2c_200___ScalarRawType_20gemmlowp__RescaleConstantInitializer_gemmlowp__FixedPoint_int_2c_200___28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20gemmlowp__RoundingDivideByPOT_int__28int_2c_20int_29(HEAP32[$1 + 12 >> 2], 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__Tensor__quantization_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = tflite__QuantizationParameters_20const__20flatbuffers__Table__GetPointer_tflite__QuantizationParameters_20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 12);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__QuantizationParameters__scale_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_float__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_float__20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 8);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__Pool2DOptions__fused_activation_function_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = signed_20char_20flatbuffers__Table__GetField_signed_20char__28unsigned_20short_2c_20signed_20char_29_20const(HEAP32[$1 + 12 >> 2], 14, 0) << 24;
 __stack_pointer = $1 + 16 | 0;
 return $0 >> 24;
}

function tflite__Conv2DOptions__fused_activation_function_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = signed_20char_20flatbuffers__Table__GetField_signed_20char__28unsigned_20short_2c_20signed_20char_29_20const(HEAP32[$1 + 12 >> 2], 10, 0) << 24;
 __stack_pointer = $1 + 16 | 0;
 return $0 >> 24;
}

function jswrap_espruino_memoryMap($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 $0 = jspExecuteJSFunction(138034, 0, 2, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function jsvIsRoot($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
  HEAP8[$1 + 15 | 0] = HEAP8[$1 + 7 | 0] == 1;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function jsvIsPin($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
  HEAP8[$1 + 15 | 0] = HEAP8[$1 + 7 | 0] == 13;
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function jslGetTokenLength() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 label$1: {
  if (HEAP32[HEAP32[44743] + 76 >> 2]) {
   HEAP32[$0 + 12 >> 2] = jsvGetStringLength(HEAP32[HEAP32[44743] + 76 >> 2]);
   break label$1;
  }
  HEAP32[$0 + 12 >> 2] = HEAPU8[HEAP32[44743] + 80 | 0];
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function tflite__ParseDequantize_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 return 0;
}

function jsvStringIteratorSetChar($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 if (jsvStringIteratorHasChar_2(HEAP32[$2 + 12 >> 2]) & 1) {
  HEAP8[HEAP32[HEAP32[$2 + 12 >> 2] + 16 >> 2] + HEAP32[HEAP32[$2 + 12 >> 2] >> 2] | 0] = HEAPU8[$2 + 11 | 0];
 }
 __stack_pointer = $2 + 16 | 0;
}

function jslKill() {
 HEAP16[HEAP32[44743] + 2 >> 1] = 0;
 if (HEAP32[HEAP32[44743] + 100 >> 2]) {
  jsvLockAgain(HEAP32[HEAP32[44743] + 100 >> 2]);
 }
 jsvStringIteratorFree(HEAP32[44743] + 88 | 0);
 if (HEAP32[HEAP32[44743] + 76 >> 2]) {
  jsvUnLock(HEAP32[HEAP32[44743] + 76 >> 2]);
  HEAP32[HEAP32[44743] + 76 >> 2] = 0;
 }
 jsvUnLock(HEAP32[HEAP32[44743] + 84 >> 2]);
}

function gen_jswrap_E_showPrompt($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 $0 = jspExecuteJSFunction(138380, 0, 2, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function tflite__ParseQuantize_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 return 0;
}

function gen_jswrap_E_showAlert($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 $0 = jspExecuteJSFunction(139898, 0, 2, $2);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function TfLiteReshapeParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteReshapeParams__28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, 36, 4);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function unsigned_20short_20flatbuffers__ReadScalar_unsigned_20short__28void_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20short_20flatbuffers__EndianScalar_unsigned_20short__28unsigned_20short_29(HEAPU16[HEAP32[$1 + 12 >> 2] >> 1]);
 __stack_pointer = $1 + 16 | 0;
 return $0 & 65535;
}

function tflite__FullyConnectedOptions__weights_format_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = signed_20char_20flatbuffers__Table__GetField_signed_20char__28unsigned_20short_2c_20signed_20char_29_20const(HEAP32[$1 + 12 >> 2], 6, 0) << 24;
 __stack_pointer = $1 + 16 | 0;
 return $0 >> 24;
}

function jswrap_promise_catch($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 _jswrap_promise_add(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 0);
 $0 = jswrap_promise_get_chained_promise(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function TfLiteSoftmaxParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteSoftmaxParams__28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, 4, 4);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function memcmp($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 label$1: {
  if (!$2) {
   break label$1;
  }
  while (1) {
   $3 = HEAPU8[$0 | 0];
   $4 = HEAPU8[$1 | 0];
   if (($3 | 0) == ($4 | 0)) {
    $1 = $1 + 1 | 0;
    $0 = $0 + 1 | 0;
    $2 = $2 - 1 | 0;
    if ($2) {
     continue;
    }
    break label$1;
   }
   break;
  }
  $5 = $3 - $4 | 0;
 }
 return $5;
}

function int_20gemmlowp__AddSaturatingIf16Bit_int__28int_2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = gemmlowp__AddSaturatingIf16BitImpl_int_2c_20false___Run_28int_2c_20int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function std____2____compressed_pair_elem_TfLiteSoftmaxParams__2c_200_2c_20false_____compressed_pair_elem_TfLiteSoftmaxParams___2c_20void__28TfLiteSoftmaxParams___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
 return $0;
}

function std____2____compressed_pair_elem_TfLiteReshapeParams__2c_200_2c_20false_____compressed_pair_elem_TfLiteReshapeParams___2c_20void__28TfLiteReshapeParams___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
 return $0;
}

function tflite__ReshapeOptions__new_shape_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_int__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_int__20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 4);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jshInit() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = 0;
 while (1) {
  if (HEAP32[$0 + 12 >> 2] < 16) {
   HEAP8[HEAP32[$0 + 12 >> 2] + 373632 | 0] = 255;
   HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 jshInitDevices();
 HEAP8[178556] = 1;
 __stack_pointer = $0 + 16 | 0;
}

function strncat($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = strlen($0) + $0 | 0;
 label$1: {
  if (!$2) {
   break label$1;
  }
  while (1) {
   $4 = HEAPU8[$1 | 0];
   if (!$4) {
    break label$1;
   }
   HEAP8[$3 | 0] = $4;
   $3 = $3 + 1 | 0;
   $1 = $1 + 1 | 0;
   $2 = $2 - 1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
 HEAP8[$3 | 0] = 0;
 return $0;
}

function jsvGetFlatStringPointer($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!(jsvIsFlatString(HEAP32[$1 + 8 >> 2]) & 1)) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2] + 14;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jspeStatementThrow() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = 0;
 jslGetNextToken();
 HEAP32[$0 + 12 >> 2] = jsvSkipNameAndUnLock(jspeExpression());
 if ((HEAP32[86758] & 63) == 1) {
  jspSetException(HEAP32[$0 + 12 >> 2]);
 }
 jsvUnLock(HEAP32[$0 + 12 >> 2]);
 __stack_pointer = $0 + 16 | 0;
 return 0;
}

function TfLitePoolParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLitePoolParams__28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, 40, 4);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function TfLiteConvParams__20tflite__BuiltinDataAllocator__AllocatePOD_TfLiteConvParams__28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0, 24, 4);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function tflite__Tensor__is_variable_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20char_20flatbuffers__Table__GetField_unsigned_20char__28unsigned_20short_2c_20unsigned_20char_29_20const(HEAP32[$1 + 12 >> 2], 14, 0) & 255;
 __stack_pointer = $1 + 16 | 0;
 return ($0 | 0) != 0;
}

function tflite__Operator__builtin_options_type_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20char_20flatbuffers__Table__GetField_unsigned_20char__28unsigned_20short_2c_20unsigned_20char_29_20const(HEAP32[$1 + 12 >> 2], 10, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 & 255;
}

function tflite__DepthwiseConv2DOptions__padding_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = signed_20char_20flatbuffers__Table__GetField_signed_20char__28unsigned_20short_2c_20signed_20char_29_20const(HEAP32[$1 + 12 >> 2], 4, 0) << 24;
 __stack_pointer = $1 + 16 | 0;
 return $0 >> 24;
}

function lcdSetCallbacks_JS($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 + 52 | 0] = 72;
 HEAP8[$0 + 53 | 0] = 2;
 HEAP8[$0 + 54 | 0] = 0;
 HEAP8[$0 + 55 | 0] = 0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 + 56 | 0] = 73;
 HEAP8[$0 + 57 | 0] = 2;
 HEAP8[$0 + 58 | 0] = 0;
 HEAP8[$0 + 59 | 0] = 0;
}

function jswrap_object_prependListener($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 jswrap_object_on_X(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 1);
 __stack_pointer = $3 + 16 | 0;
}

function jsvObjectIteratorClone($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
 if (HEAP32[HEAP32[$2 + 12 >> 2] >> 2]) {
  jsvLockAgain(HEAP32[HEAP32[$2 + 12 >> 2] >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function gen_jswrap_E_showMessage($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 jsvUnLock(jspExecuteJSFunction(140351, 0, 2, $2));
 __stack_pointer = $2 + 16 | 0;
}

function _jswrap_graphics_stringWidth($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 32 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 _jswrap_graphics_stringMetrics(HEAP32[$3 + 28 >> 2], HEAP32[$3 + 24 >> 2], HEAP32[$3 + 20 >> 2], $3);
 __stack_pointer = $3 + 32 | 0;
 return HEAP32[$3 >> 2];
}

function jsvStringIteratorGetChar_6($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = HEAPU8[HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2] + HEAP32[HEAP32[$1 + 8 >> 2] >> 2] | 0];
 }
 return HEAP8[$1 + 15 | 0];
}

function jsvStringIteratorGetChar_5($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = HEAPU8[HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2] + HEAP32[HEAP32[$1 + 8 >> 2] >> 2] | 0];
 }
 return HEAP8[$1 + 15 | 0];
}

function jsvStringIteratorGetChar_4($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = HEAPU8[HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2] + HEAP32[HEAP32[$1 + 8 >> 2] >> 2] | 0];
 }
 return HEAP8[$1 + 15 | 0];
}

function jsvStringIteratorGetChar_3($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = HEAPU8[HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2] + HEAP32[HEAP32[$1 + 8 >> 2] >> 2] | 0];
 }
 return HEAP8[$1 + 15 | 0];
}

function jsvStringIteratorGetChar_2($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = HEAPU8[HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2] + HEAP32[HEAP32[$1 + 8 >> 2] >> 2] | 0];
 }
 return HEAP8[$1 + 15 | 0];
}

function jsvStringIteratorGetChar_1($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = HEAPU8[HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2] + HEAP32[HEAP32[$1 + 8 >> 2] >> 2] | 0];
 }
 return HEAP8[$1 + 15 | 0];
}

function gen_jswrap_Bangle_setUI($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 jsvUnLock(jspExecuteJSFunction(129139, 0, 2, $2));
 __stack_pointer = $2 + 16 | 0;
}

function tflite___28anonymous_20namespace_29__MicroBuiltinDataAllocator___MicroBuiltinDataAllocator_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 tflite__BuiltinDataAllocator___BuiltinDataAllocator_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jsvIsStringEqualOrStartsWith($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = jsvIsStringEqualOrStartsWithOffset(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1, 0, 0);
 __stack_pointer = $3 + 16 | 0;
 return $0 & 1;
}

function AccelFilter_init($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 0;
 while (1) {
  if (HEAP32[$1 + 8 >> 2] < 7) {
   HEAP8[HEAP32[$1 + 12 >> 2] + HEAP32[$1 + 8 >> 2] | 0] = 0;
   HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] = 0;
}

function lcdMemLCD_waitForSendComplete() {
 var $0 = 0, $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = 1e6;
 while (1) {
  $0 = 0;
  if (HEAP8[373608] & 1) {
   $0 = HEAP32[$1 + 12 >> 2] - 1 | 0;
   HEAP32[$1 + 12 >> 2] = $0;
   $0 = ($0 | 0) != 0;
  }
  if ($0) {
   continue;
  }
  break;
 }
 if (HEAP8[373608] & 1) {
  HEAP8[373608] = 0;
 }
}

function jsvStringIteratorGetChar($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = HEAPU8[HEAP32[HEAP32[$1 + 8 >> 2] + 16 >> 2] + HEAP32[HEAP32[$1 + 8 >> 2] >> 2] | 0];
 }
 return HEAP8[$1 + 15 | 0];
}

function tflite__OperatorCode__builtin_code_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = signed_20char_20flatbuffers__Table__GetField_signed_20char__28unsigned_20short_2c_20signed_20char_29_20const(HEAP32[$1 + 12 >> 2], 4, 0) << 24;
 __stack_pointer = $1 + 16 | 0;
 return $0 >> 24;
}

function std____2____compressed_pair_elem_TfLitePoolParams__2c_200_2c_20false_____compressed_pair_elem_TfLitePoolParams___2c_20void__28TfLitePoolParams___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
 return $0;
}

function std____2____compressed_pair_elem_TfLiteConvParams__2c_200_2c_20false_____compressed_pair_elem_TfLiteConvParams___2c_20void__28TfLiteConvParams___29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
 return $0;
}

function jswrap_object_clone($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvCopy(HEAP32[$1 + 8 >> 2], 1);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function __cos($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = $0 * $0;
 $3 = $2 * .5;
 $4 = 1 - $3;
 $5 = 1 - $4 - $3;
 $3 = $2 * $2;
 return $4 + ($5 + ($2 * ($2 * ($2 * ($2 * 2480158728947673e-20 + -.001388888888887411) + .0416666666666666) + $3 * $3 * ($2 * ($2 * -11359647557788195e-27 + 2.087572321298175e-9) + -2.7557314351390663e-7)) - $0 * $1));
}

function tflite__SubGraph__outputs_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_int__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_int__20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 8);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__Operator__outputs_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_int__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_int__20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 8);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function graphicsFallbackGetPixel($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 return HEAPU8[$0 + 21 | 0] | HEAPU8[$0 + 22 | 0] << 8 | (HEAPU8[$0 + 23 | 0] << 16 | HEAPU8[$0 + 24 | 0] << 24);
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__OperatorCode____size_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__EndianScalar_unsigned_20int__28unsigned_20int_29(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function unsigned_20char_20flatbuffers__ReadScalar_unsigned_20char__28void_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20char_20flatbuffers__EndianScalar_unsigned_20char__28unsigned_20char_29(HEAPU8[HEAP32[$1 + 12 >> 2]]);
 __stack_pointer = $1 + 16 | 0;
 return $0 & 255;
}

function tflite__SubGraph__inputs_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_int__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_int__20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 6);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__Operator__inputs_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_int__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_int__20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 6);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__OperatorCode__custom_code_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__String_20const__20flatbuffers__Table__GetPointer_flatbuffers__String_20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 6);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__AlignPointerDown_28unsigned_20char__2c_20unsigned_20long_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 >> 2] = Math_imul(HEAP32[$2 + 8 >> 2], HEAPU32[$2 + 4 >> 2] / HEAPU32[$2 + 8 >> 2] | 0);
 return HEAP32[$2 >> 2];
}

function jsvMathsOpError($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer + -64 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 60 >> 2] = $0;
 HEAP32[$2 + 56 >> 2] = $1;
 jslTokenAsString(HEAP32[$2 + 60 >> 2], $2 + 16 | 0, 32);
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 56 >> 2];
 HEAP32[$2 >> 2] = $2 + 16;
 jsError(119820, $2);
 __stack_pointer = $2 - -64 | 0;
 return 0;
}

function jsiTimerAdd($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvLock(HEAPU16[173532]);
 HEAP32[$1 + 4 >> 2] = jsvArrayAddToEnd(HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2], 1) - 1;
 jsvUnLock(HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 4 >> 2];
}

function graphicsGetMemoryRequired($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $2 = HEAP32[$1 + 12 >> 2];
 return Math_imul(HEAPU8[HEAP32[$1 + 12 >> 2] + 16 | 0], Math_imul(HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8, HEAPU8[$2 + 14 | 0] | HEAPU8[$2 + 15 | 0] << 8)) + 7 >>> 3 | 0;
}

function tflite__Pool2DOptions__padding_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = signed_20char_20flatbuffers__Table__GetField_signed_20char__28unsigned_20short_2c_20signed_20char_29_20const(HEAP32[$1 + 12 >> 2], 4, 0) << 24;
 __stack_pointer = $1 + 16 | 0;
 return $0 >> 24;
}

function tflite__Conv2DOptions__padding_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = signed_20char_20flatbuffers__Table__GetField_signed_20char__28unsigned_20short_2c_20signed_20char_29_20const(HEAP32[$1 + 12 >> 2], 4, 0) << 24;
 __stack_pointer = $1 + 16 | 0;
 return $0 >> 24;
}

function std____2____less_unsigned_20char_2c_20unsigned_20char___operator_28_29_28unsigned_20char_20const__2c_20unsigned_20char_20const__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 return HEAPU8[HEAP32[$3 + 8 >> 2]] < HEAPU8[HEAP32[$3 + 4 >> 2]];
}

function jswrap_banglejs_getLCDMode() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 8 >> 2] = 0;
 label$1: {
  if (!HEAP32[$0 + 8 >> 2]) {
   HEAP32[$0 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$0 + 12 >> 2] = jsvNewFromString(HEAP32[$0 + 8 >> 2]);
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function tflite__Tensor__shape_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_int__20const__20flatbuffers__Table__GetPointer_flatbuffers__Vector_int__20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 4);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function setCorrectTimeZone($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[HEAP32[$1 + 12 >> 2] + 20 >> 2] = 0;
 $0 = jsdGetEffectiveTimeZone(fromTimeInDay(HEAP32[$1 + 12 >> 2]), 1, HEAP32[$1 + 12 >> 2] + 24 | 0);
 HEAP32[HEAP32[$1 + 12 >> 2] + 20 >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
}

function jspCheckStackPosition() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 label$1: {
  if (jsuGetFreeStack() >>> 0 < 512) {
   jsExceptionHere(1, 111946, 0);
   jspSetInterrupted(1);
   HEAP8[$0 + 15 | 0] = 0;
   break label$1;
  }
  HEAP8[$0 + 15 | 0] = 1;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP8[$0 + 15 | 0] & 1;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph____size_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__EndianScalar_unsigned_20int__28unsigned_20int_29(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Operator____size_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__EndianScalar_unsigned_20int__28unsigned_20int_29(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Metadata____size_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__EndianScalar_unsigned_20int__28unsigned_20int_29(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__AlignSizeUp_28unsigned_20long_2c_20unsigned_20long_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = Math_imul(HEAP32[$2 + 8 >> 2], (HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 8 >> 2] - 1 | 0) >>> 0) / HEAPU32[$2 + 8 >> 2] | 0);
 return HEAP32[$2 + 4 >> 2];
}

function jsiGetPreferredConsoleDevice() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP8[$0 + 15 | 0] = 21;
 if (!(jshIsDeviceInitialised(HEAPU8[$0 + 15 | 0]) & 1)) {
  HEAP8[$0 + 15 | 0] = 20;
 }
 if (jshIsUSBSERIALConnected() & 1) {
  HEAP8[$0 + 15 | 0] = 21;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAPU8[$0 + 15 | 0];
}

function signed_20char_20flatbuffers__ReadScalar_signed_20char__28void_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = signed_20char_20flatbuffers__EndianScalar_signed_20char__28signed_20char_29(HEAP8[HEAP32[$1 + 12 >> 2]]) << 24;
 __stack_pointer = $1 + 16 | 0;
 return $0 >> 24;
}

function jswrap_espruino_setPassword($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  HEAP32[$1 + 12 >> 2] = jsvAsString(HEAP32[$1 + 12 >> 2]);
 }
 jsvUnLock(jsvObjectSetChild(HEAP32[86751], 120564, HEAP32[$1 + 12 >> 2]));
 __stack_pointer = $1 + 16 | 0;
}

function gemmlowp__AddSaturatingIf16BitImpl_int_2c_20false___Run_28int_2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = int_20gemmlowp__Add_int__28int_2c_20int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor____size_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__EndianScalar_unsigned_20int__28unsigned_20int_29(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function unsigned_20int_20flatbuffers__ReadScalar_unsigned_20int__28void_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__EndianScalar_unsigned_20int__28unsigned_20int_29(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__SoftmaxOptions__beta_28_29_20const($0) {
 var $1 = 0, $2 = Math_fround(0);
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = float_20flatbuffers__Table__GetField_float__28unsigned_20short_2c_20float_29_20const(HEAP32[$1 + 12 >> 2], 4, Math_fround(0));
 __stack_pointer = $1 + 16 | 0;
 return $2;
}

function jswrap_object_on($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 jswrap_object_on_X(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 0);
 __stack_pointer = $3 + 16 | 0;
}

function _jswrap_serial_inject_cb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP8[$2 + 7 | 0] = HEAPU8[HEAP32[$2 + 8 >> 2]];
 jshPushIOCharEvent(HEAPU8[$2 + 7 | 0], HEAP32[$2 + 12 >> 2] << 24 >> 24);
 __stack_pointer = $2 + 16 | 0;
}

function _jswrap_drawImageLayerNextX($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 180 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 164 >> 2] + HEAP32[$0 + 180 >> 2];
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 184 >> 2] = HEAP32[$0 + 184 >> 2] - HEAP32[HEAP32[$1 + 12 >> 2] + 168 >> 2];
}

function jsvObjectSetChildAndUnLock($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 jsvObjectSetChild(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 jsvUnLock(HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function int_20gemmlowp__MaskIfZero_int_2c_205__28gemmlowp__FixedPoint_int_2c_205__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = int_20gemmlowp__MaskIfZero_int__28int_29(HEAP32[gemmlowp__FixedPoint_int_2c_205___raw_28_29($1 + 8 | 0) >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__Operator__opcode_index_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__Table__GetField_unsigned_20int__28unsigned_20short_2c_20unsigned_20int_29_20const(HEAP32[$1 + 12 >> 2], 4, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jsvAddNamedChildAndUnLock($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 jsvUnLock2(jsvAddNamedChild(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]), HEAP32[$3 + 8 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function jsfResetStorage() {
 jsiConsolePrintf(146521, 0);
 jsfEraseAll();
 jsiConsolePrintf(146323, 0);
 jsiConsolePrintf(146454, 0);
 label$1: {
  if (HEAP32[256] < 8388608) {
   jsiConsolePrintf(144293, 0);
   jsfResetStorage_progress(1040, 134217728, HEAP32[256]);
   jsiConsolePrintf(146305, 0);
   break label$1;
  }
  jsWarn(146908, 0);
 }
}

function tflite__Tensor__type_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = signed_20char_20flatbuffers__Table__GetField_signed_20char__28unsigned_20short_2c_20signed_20char_29_20const(HEAP32[$1 + 12 >> 2], 6, 0) << 24;
 __stack_pointer = $1 + 16 | 0;
 return $0 >> 24;
}

function tflite__Metadata__name_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__String_20const__20flatbuffers__Table__GetPointer_flatbuffers__String_20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 4);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____less_signed_20char_2c_20signed_20char___operator_28_29_28signed_20char_20const__2c_20signed_20char_20const__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 return HEAP8[HEAP32[$3 + 8 >> 2]] < HEAP8[HEAP32[$3 + 4 >> 2]];
}

function tflite__MicroInterpreter__outputs_size_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_int___Length_28_29_20const(tflite__SubGraph__outputs_28_29_20const(HEAP32[HEAP32[$1 + 12 >> 2] + 116 >> 2]));
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function push_byte($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $1 = HEAPU8[$3 + 7 | 0];
 $0 = HEAP32[HEAP32[$3 + 8 >> 2] >> 2];
 $3 = HEAP32[HEAP32[$3 + 8 >> 2] + 8 >> 2];
 $2 = HEAP32[$3 >> 2];
 HEAP32[$3 >> 2] = $2 + 1;
 HEAP8[$2 + $0 | 0] = $1;
}

function jsGfxGetPtr($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!(HEAP32[$1 + 8 >> 2] < 176 & HEAP32[$1 + 8 >> 2] >= 0)) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = Math_imul(HEAP32[$1 + 8 >> 2], 68) + 349538;
 }
 return HEAP32[$1 + 12 >> 2];
}

function heatshrink_var_output_cb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 jsvStringIteratorSetCharAndNext(HEAP32[$2 + 4 >> 2], HEAP8[$2 + 15 | 0]);
 __stack_pointer = $2 + 16 | 0;
}

function tflite__SimpleMemoryAllocator___SimpleMemoryAllocator_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 FUNCTION_TABLE[641]($0) | 0;
 tflite__SimpleMemoryAllocator__operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function tflite__MicroInterpreter__inputs_size_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_int___Length_28_29_20const(tflite__SubGraph__inputs_28_29_20const(HEAP32[HEAP32[$1 + 12 >> 2] + 116 >> 2]));
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jshIsTopEvent($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 14 | 0] = $0;
 label$1: {
  if (HEAPU8[347148] == HEAPU8[347149]) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = HEAPU8[$1 + 14 | 0] == (HEAPU8[Math_imul(HEAPU8[347149], 5) + 347744 | 0] & 31);
 }
 return HEAP8[$1 + 15 | 0] & 1;
}

function tflite__Metadata__buffer_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__Table__GetField_unsigned_20int__28unsigned_20short_2c_20unsigned_20int_29_20const(HEAP32[$1 + 12 >> 2], 6, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function lcdMemLCD_extcominBacklight($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 HEAP8[373620] = HEAP8[$1 + 15 | 0] & 1;
 label$1: {
  if (HEAP8[$1 + 15 | 0] & 1) {
   jshPinAnalogOutput(6, 3e-4, 120, 0);
   break label$1;
  }
  jshPinOutput(6, 0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_pin_write($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 HEAP8[$2 + 10 | 0] = jshGetPinFromVar(HEAP32[$2 + 12 >> 2]);
 jshPinOutput(HEAPU8[$2 + 10 | 0], HEAP8[$2 + 11 | 0] & 1);
 __stack_pointer = $2 + 16 | 0;
}

function jswGetBuiltInJSLibrary($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!strcmp(HEAP32[$1 + 8 >> 2], 120299)) {
   HEAP32[$1 + 12 >> 2] = 110440;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvLockSafe($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP16[$1 + 10 >> 1] = $0;
 label$1: {
  if (!HEAPU16[$1 + 10 >> 1]) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = jsvLock(HEAPU16[$1 + 10 >> 1]);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function tflite__Tensor__buffer_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__Table__GetField_unsigned_20int__28unsigned_20short_2c_20unsigned_20int_29_20const(HEAP32[$1 + 12 >> 2], 8, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__Model__version_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__Table__GetField_unsigned_20int__28unsigned_20short_2c_20unsigned_20int_29_20const(HEAP32[$1 + 12 >> 2], 4, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jsvIterateCallbackCountCb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 >> 2] = HEAP32[$3 + 4 >> 2];
 $0 = HEAP32[$3 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$3 + 8 >> 2] + HEAP32[$0 >> 2];
}

function jsvArrayBufferIteratorSetByteValue($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 if ((HEAPU8[HEAP32[$2 + 12 >> 2] + 36 | 0] & 15) == 1) {
  jsvStringIteratorSetChar(HEAP32[$2 + 12 >> 2], HEAP8[$2 + 11 | 0]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function heatshrink_ptr_output_cb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 8 >> 2];
 $0 = HEAPU8[$2 + 15 | 0];
 $2 = HEAP32[$2 + 4 >> 2];
 $1 = HEAP32[$2 >> 2];
 HEAP32[$2 >> 2] = $1 + 1;
 HEAP8[$1 | 0] = $0;
}

function jsvRef($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if ((jsvGetRefs(HEAP32[$1 + 12 >> 2]) & 65535) >>> 0 < 255) {
  jsvSetRefs(HEAP32[$1 + 12 >> 2], (jsvGetRefs(HEAP32[$1 + 12 >> 2]) & 65535) + 1 & 65535);
 }
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvArrayPushAndUnLock($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = jsvArrayPush(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 jsvUnLock(HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return HEAP32[$2 + 4 >> 2];
}

function jstGetLastBufferTimerTask($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP16[$2 + 6 >> 1] = jsvGetRef(HEAP32[$2 + 12 >> 2]);
 $0 = utilTimerGetLastTask(558, $2 + 6 | 0, HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function jshGetDeviceToTransmit() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 label$1: {
  if (!(jshHasTransmitData() & 1)) {
   HEAP8[$0 + 15 | 0] = 0;
   break label$1;
  }
  HEAP8[$0 + 15 | 0] = HEAPU8[(HEAPU8[347147] << 1) + 347232 | 0] & 31;
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAPU8[$0 + 15 | 0];
}

function int_20gemmlowp__SaturatingRoundingMultiplyByPOT__12_2c_20int__28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = gemmlowp__ImplSaturatingRoundingMultiplyByPOT__12_2c_20int_2c_20_1___eval_28int_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function int_20gemmlowp__MaskIfGreaterThan_int__28int_2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = int_20gemmlowp__MaskIfNonZero_int__28int_29(HEAP32[$2 + 12 >> 2] > HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function __lseek($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 $3 = __wasi_syscall_ret(legalfunc$__wasi_fd_seek($0, $1, $2, $3 & 255, $4 + 8 | 0));
 __stack_pointer = $4 + 16 | 0;
 $2 = HEAP32[$4 + 12 >> 2];
 i64toi32_i32$HIGH_BITS = $3 ? -1 : $2;
 $1 = HEAP32[$4 + 8 >> 2];
 return $3 ? -1 : $1;
}

function tflite__GreedyMemoryPlanner___GreedyMemoryPlanner_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 FUNCTION_TABLE[700]($0) | 0;
 tflite__GreedyMemoryPlanner__operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function jsError($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 jsiConsoleRemoveInputLine();
 jsiConsolePrintString(144263);
 HEAP32[$2 + 8 >> 2] = $1;
 vcbprintf(7, 0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 jsiConsolePrintString(146977);
 __stack_pointer = $2 + 16 | 0;
}

function tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter__BuiltinDataDeleter_28tflite__BuiltinDataAllocator__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$2 + 8 >> 2];
 return $0;
}

function tflite__QuantizationParameters__quantized_dimension_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20flatbuffers__Table__GetField_int__28unsigned_20short_2c_20int_29_20const(HEAP32[$1 + 12 >> 2], 16, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jsWarn($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 jsiConsoleRemoveInputLine();
 jsiConsolePrintString(144271);
 HEAP32[$2 + 8 >> 2] = $1;
 vcbprintf(7, 0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 jsiConsolePrintString(146977);
 __stack_pointer = $2 + 16 | 0;
}

function int_20gemmlowp__SaturatingRoundingMultiplyByPOT__2_2c_20int__28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = gemmlowp__ImplSaturatingRoundingMultiplyByPOT__2_2c_20int_2c_20_1___eval_28int_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function int_20gemmlowp__SaturatingRoundingMultiplyByPOT__1_2c_20int__28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = gemmlowp__ImplSaturatingRoundingMultiplyByPOT__1_2c_20int_2c_20_1___eval_28int_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__Model_20const__20flatbuffers__GetRoot_tflite__Model__28void_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = tflite__Model__20flatbuffers__GetMutableRoot_tflite__Model__28void__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_onewire_skip($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = onewire_getpin(HEAP32[$1 + 12 >> 2]);
 if (jshIsPinValid(HEAPU8[$1 + 11 | 0]) & 1) {
  OneWireWrite(HEAPU8[$1 + 11 | 0], 8, 204, 0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function jsserialHardwareFunc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP8[$2 + 7 | 0] = HEAPU8[HEAP32[$2 + 8 >> 2]];
 jshTransmit(HEAPU8[$2 + 7 | 0], HEAP32[$2 + 12 >> 2] & 255);
 __stack_pointer = $2 + 16 | 0;
}

function jshFlashGetMemMapAddress($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!(HEAPU32[$1 + 8 >> 2] < 134217728 | HEAPU32[$1 + 8 >> 2] >= 142606336)) {
   HEAP32[$1 + 12 >> 2] = 0;
   break label$1;
  }
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 8 >> 2];
 }
 return HEAP32[$1 + 12 >> 2];
}

function int_20gemmlowp__MaskIfLessThan_int__28int_2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = int_20gemmlowp__MaskIfNonZero_int__28int_29(HEAP32[$2 + 12 >> 2] < HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function tflite__DepthwiseConv2DOptions__dilation_w_factor_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20flatbuffers__Table__GetField_int__28unsigned_20short_2c_20int_29_20const(HEAP32[$1 + 12 >> 2], 14, 1);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__DepthwiseConv2DOptions__dilation_h_factor_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20flatbuffers__Table__GetField_int__28unsigned_20short_2c_20int_29_20const(HEAP32[$1 + 12 >> 2], 16, 1);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_array_find($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = _jswrap_array_iterate_with_callback(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 0, 2, 1, 1);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function jsvUnLock3($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 jsvUnLockInline(HEAP32[$3 + 12 >> 2]);
 jsvUnLockInline(HEAP32[$3 + 8 >> 2]);
 jsvUnLockInline(HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function gen_jswrap_Graphics_setFontVector($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = jswrap_graphics_setFontSizeX(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 1);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function cbprintf($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 __stack_pointer = $4;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 vcbprintf(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 __stack_pointer = $4 + 16 | 0;
}

function tflite__DepthwiseConv2DOptions__depth_multiplier_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20flatbuffers__Table__GetField_int__28unsigned_20short_2c_20int_29_20const(HEAP32[$1 + 12 >> 2], 10, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function int_20gemmlowp__SaturatingRoundingMultiplyByPOT_5_2c_20int__28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = gemmlowp__ImplSaturatingRoundingMultiplyByPOT_5_2c_20int_2c_201___eval_28int_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function int_20gemmlowp__SaturatingRoundingMultiplyByPOT_2_2c_20int__28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = gemmlowp__ImplSaturatingRoundingMultiplyByPOT_2_2c_20int_2c_201___eval_28int_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function int_20gemmlowp__SaturatingRoundingMultiplyByPOT_1_2c_20int__28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = gemmlowp__ImplSaturatingRoundingMultiplyByPOT_1_2c_20int_2c_201___eval_28int_29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function flatbuffers__Vector_unsigned_20char___size_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__EndianScalar_unsigned_20int__28unsigned_20int_29(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 return HEAPF64[HEAP32[$3 + 8 >> 2] >> 3] < HEAPF64[HEAP32[$3 + 4 >> 2] >> 3];
}

function gemmlowp__ImplSaturatingRoundingMultiplyByPOT__12_2c_20int_2c_20_1___eval_28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20gemmlowp__RoundingDivideByPOT_int__28int_2c_20int_29(HEAP32[$1 + 12 >> 2], 12);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function gen_jswrap_Graphics_fillPolyAA($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = jswrap_graphics_fillPoly_X(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 1);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function float_20flatbuffers__ReadScalar_float__28void_20const__29($0) {
 var $1 = 0, $2 = Math_fround(0);
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = float_20flatbuffers__EndianScalar_float__28float_29(HEAPF32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $2;
}

function flatbuffers__Vector_long_20long___size_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__EndianScalar_unsigned_20int__28unsigned_20int_29(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__Operator__builtin_options_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = void_20const__20flatbuffers__Table__GetPointer_void_20const___28unsigned_20short_29_20const(HEAP32[$1 + 12 >> 2], 12);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____less_float_2c_20float___operator_28_29_28float_20const__2c_20float_20const__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 return HEAPF32[HEAP32[$3 + 8 >> 2] >> 2] < HEAPF32[HEAP32[$3 + 4 >> 2] >> 2];
}

function jspeBlockEnd($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[86754]) {
  jspeiRemoveScope();
  jsvUnLock(HEAP32[86754]);
  HEAP32[86754] = 0;
 }
 HEAP32[86754] = HEAP32[$1 + 12 >> 2];
 HEAP8[347020] = HEAPU8[347020] - 1;
 __stack_pointer = $1 + 16 | 0;
}

function gemmlowp__ImplSaturatingRoundingMultiplyByPOT__2_2c_20int_2c_20_1___eval_28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20gemmlowp__RoundingDivideByPOT_int__28int_2c_20int_29(HEAP32[$1 + 12 >> 2], 2);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function gemmlowp__ImplSaturatingRoundingMultiplyByPOT__1_2c_20int_2c_20_1___eval_28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20gemmlowp__RoundingDivideByPOT_int__28int_2c_20int_29(HEAP32[$1 + 12 >> 2], 1);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function memmove($0, $1, $2) {
 var $3 = 0;
 if ($0 >>> 0 < $1 >>> 0) {
  return __memcpy($0, $1, $2);
 }
 if ($2) {
  $3 = $0 + $2 | 0;
  $1 = $1 + $2 | 0;
  while (1) {
   $3 = $3 - 1 | 0;
   $1 = $1 - 1 | 0;
   HEAP8[$3 | 0] = HEAPU8[$1 | 0];
   $2 = $2 - 1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
 return $0;
}

function jsvStringIteratorGetCharAndNext($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = jsvStringIteratorGetChar_2(HEAP32[$1 + 12 >> 2]);
 jsvStringIteratorNextInline(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 11 | 0];
}

function gen_jswrap_Graphics_fillPoly($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = jswrap_graphics_fillPoly_X(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function gemmlowp__FixedPoint_int_2c_2012___FromRaw_28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 4 >> 2] = $0;
 $0 = HEAP32[$1 + 4 >> 2];
 HEAP32[gemmlowp__FixedPoint_int_2c_2012___raw_28_29($1 + 8 | 0) >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jsvGetIndexOf($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = jsvGetIndexOfFull(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1, 0, 0);
 __stack_pointer = $3 + 16 | 0;
 return $0;
}

function jsSendPinWatchEvent($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = jshGetEventFlagsForPin(HEAP32[$1 + 12 >> 2] & 255);
 if (HEAPU8[$1 + 11 | 0]) {
  jshPushIOWatchEvent(HEAPU8[$1 + 11 | 0]);
 }
 __stack_pointer = $1 + 16 | 0;
}

function getCalendarDateFromDateVar($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 48 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 44 >> 2] = $1;
 HEAP8[$3 + 43 | 0] = $2;
 getTimeFromDateVar($3 + 8 | 0, HEAP32[$3 + 44 >> 2], HEAP8[$3 + 43 | 0] & 1);
 getCalendarDate($0, HEAP32[$3 + 8 >> 2]);
 __stack_pointer = $3 + 48 | 0;
}

function tflite__Conv2DOptions__dilation_w_factor_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20flatbuffers__Table__GetField_int__28unsigned_20short_2c_20int_29_20const(HEAP32[$1 + 12 >> 2], 12, 1);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__Conv2DOptions__dilation_h_factor_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20flatbuffers__Table__GetField_int__28unsigned_20short_2c_20int_29_20const(HEAP32[$1 + 12 >> 2], 14, 1);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_trace($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (jsvIsUndefined(HEAP32[$1 + 12 >> 2]) & 1) {
   jsvTrace(HEAP32[86750], 0);
   break label$1;
  }
  jsvTrace(HEAP32[$1 + 12 >> 2], 0);
 }
 __stack_pointer = $1 + 16 | 0;
}

function int_20gemmlowp__MaskIfNonZero_int__28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (HEAP32[$1 + 12 >> 2]) {
   $0 = int_20gemmlowp__BitNot_int__28int_29(0);
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function gemmlowp__FixedPoint_int_2c_205___FromRaw_28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 4 >> 2] = $0;
 $0 = HEAP32[$1 + 4 >> 2];
 HEAP32[gemmlowp__FixedPoint_int_2c_205___raw_28_29($1 + 8 | 0) >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function gemmlowp__FixedPoint_int_2c_202___FromRaw_28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 4 >> 2] = $0;
 $0 = HEAP32[$1 + 4 >> 2];
 HEAP32[gemmlowp__FixedPoint_int_2c_202___raw_28_29($1 + 8 | 0) >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function gemmlowp__FixedPoint_int_2c_200___FromRaw_28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 4 >> 2] = $0;
 $0 = HEAP32[$1 + 4 >> 2];
 HEAP32[gemmlowp__FixedPoint_int_2c_200___raw_28_29($1 + 8 | 0) >> 2] = $0;
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function gemmlowp__FixedPoint_int_2c_200__20gemmlowp__FixedPoint_int_2c_200___ConstantPOT__3__28_29() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 8 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromScalarRaw_28int_29(268435456);
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 8 >> 2];
}

function tflite__ops__micro__Register_RESHAPE_28_29($0) {
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 696;
 HEAP32[$0 + 12 >> 2] = 697;
}

function tflite__DepthwiseConv2DOptions__stride_w_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20flatbuffers__Table__GetField_int__28unsigned_20short_2c_20int_29_20const(HEAP32[$1 + 12 >> 2], 6, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__DepthwiseConv2DOptions__stride_h_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20flatbuffers__Table__GetField_int__28unsigned_20short_2c_20int_29_20const(HEAP32[$1 + 12 >> 2], 8, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_espruino_lockConsole() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = jsvObjectGetChildIfExists(HEAP32[86751], 120564);
 if (HEAP32[$0 + 12 >> 2]) {
  HEAP16[173534] = HEAPU16[173534] | 1024;
 }
 jsvUnLock(HEAP32[$0 + 12 >> 2]);
 __stack_pointer = $0 + 16 | 0;
}

function gemmlowp__FixedPoint_int_2c_205__20gemmlowp__FixedPoint_int_2c_205___ConstantPOT__2__28_29() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 8 >> 2] = gemmlowp__FixedPoint_int_2c_205___FromScalarRaw_28int_29(16777216);
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 8 >> 2];
}

function jshGetSystemTime() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = 178828;
 $1 = HEAP32[$0 + 12 >> 2];
 HEAP8[$0 + 11 | 0] = 0;
 $1 = jshGetTimeFromMilliseconds(+emscripten_asm_const_double($1 | 0, $0 + 11 | 0, 0));
 __stack_pointer = $0 + 16 | 0;
 return $1;
}

function gemmlowp__FixedPoint_int_2c_200___One_28_29() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 8 >> 2] = gemmlowp__FixedPoint_int_2c_200___FromScalarRaw_28int_29(gemmlowp__FixedPoint_int_2c_200___ScalarRawMax_28_29());
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 8 >> 2];
}

function flatbuffers__Vector_float___size_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__EndianScalar_unsigned_20int__28unsigned_20int_29(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__SafeBuiltinDataAllocator_28tflite__BuiltinDataAllocator__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$2 + 8 >> 2];
 return $0;
}

function tflite__MicroAllocator___MicroAllocator_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 FUNCTION_TABLE[654]($0) | 0;
 tflite__MicroAllocator__operator_20delete_28void__29($0);
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_serial_flush($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = jsiGetDeviceFromClass(HEAP32[$1 + 12 >> 2]);
 if (HEAPU8[$1 + 11 | 0]) {
  jshTransmitFlushDevice(HEAPU8[$1 + 11 | 0]);
 }
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorSetValue($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 if (HEAP32[HEAP32[$2 + 12 >> 2] >> 2]) {
  jsvSetValueOfName(HEAP32[HEAP32[$2 + 12 >> 2] >> 2], HEAP32[$2 + 8 >> 2]);
 }
 __stack_pointer = $2 + 16 | 0;
}

function integerDivideFloor($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 if (HEAP32[$2 + 12 >> 2] < 0) {
  $0 = (HEAP32[$2 + 12 >> 2] - HEAP32[$2 + 8 >> 2] | 0) + 1 | 0;
 } else {
  $0 = HEAP32[$2 + 12 >> 2];
 }
 return ($0 | 0) / HEAP32[$2 + 8 >> 2] | 0;
}

function _jswrap_espruino_toString_char($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jsvStringIteratorSetCharAndNext(HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2] << 24 >> 24);
 __stack_pointer = $2 + 16 | 0;
}

function tflite__Pool2DOptions__filter_height_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20flatbuffers__Table__GetField_int__28unsigned_20short_2c_20int_29_20const(HEAP32[$1 + 12 >> 2], 12, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__MicroMutableOpResolver_9u____MicroMutableOpResolver_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 tflite__MicroOpResolver___MicroOpResolver_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function flatbuffers__Vector_int___size_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = unsigned_20int_20flatbuffers__EndianScalar_unsigned_20int__28unsigned_20int_29(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__Pool2DOptions__filter_width_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20flatbuffers__Table__GetField_int__28unsigned_20short_2c_20int_29_20const(HEAP32[$1 + 12 >> 2], 10, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function _jswrap_graphics_freeFontInfo($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[HEAP32[$1 + 12 >> 2] >> 2] & 32768) {
  jsvUnLock2(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2], HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorGotoUTF8($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 jsvStringIteratorGoto(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function tflite__EspruinoErrorReporter__EspruinoErrorReporter_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 tflite__ErrorReporter__ErrorReporter_28_29($0);
 HEAP32[$0 >> 2] = 172912;
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function std____2____less_int_2c_20int___operator_28_29_28int_20const__2c_20int_20const__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 return HEAP32[HEAP32[$3 + 8 >> 2] >> 2] < HEAP32[HEAP32[$3 + 4 >> 2] >> 2];
}

function jshIsEventForPin($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 $0 = HEAPU8[HEAP32[$2 + 12 >> 2]] & 31;
 $1 = jshGetEventFlagsForPin(HEAPU8[$2 + 11 | 0]) & 255;
 __stack_pointer = $2 + 16 | 0;
 return ($0 | 0) == ($1 | 0);
}

function jsvStringIteratorNewUTF8($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 jsvStringIteratorNew(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function jspeiRemoveScope() {
 label$1: {
  if (!HEAP32[86752]) {
   break label$1;
  }
  if (!jsvGetArrayLength(HEAP32[86752])) {
   break label$1;
  }
  jsvUnLock(jsvArrayPop(HEAP32[86752]));
  if (jsvGetFirstChild(HEAP32[86752]) & 65535) {
   break label$1;
  }
  jsvUnLock(HEAP32[86752]);
  HEAP32[86752] = 0;
 }
}

function jswrap_espruino_reverseByte($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 12 >> 2] & 255;
 return Math_imul(Math_imul(HEAP32[$1 + 8 >> 2], 2050) & 139536 | Math_imul(HEAP32[$1 + 8 >> 2], 32800) & 558144, 65793) >>> 16 & 255;
}

function jstRestartUtilTimer() {
 var $0 = 0;
 $0 = Math_imul(HEAPU8[349026], 25) + 349040 | 0;
 HEAP32[87258] = HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
 if (HEAP32[87258] < 0) {
  HEAP32[87258] = 0;
 }
 $0 = HEAP32[87258];
 jshUtilTimerStart($0, $0 >> 31);
}

function jsfSetFlag($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 label$1: {
  if (HEAP8[$2 + 14 | 0] & 1) {
   HEAP8[178976] = HEAPU8[$2 + 15 | 0] | HEAPU8[178976];
   break label$1;
  }
  HEAP8[178976] = HEAPU8[178976] & (HEAPU8[$2 + 15 | 0] ^ -1);
 }
}

function tflite__Pool2DOptions__stride_w_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20flatbuffers__Table__GetField_int__28unsigned_20short_2c_20int_29_20const(HEAP32[$1 + 12 >> 2], 6, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__Pool2DOptions__stride_h_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20flatbuffers__Table__GetField_int__28unsigned_20short_2c_20int_29_20const(HEAP32[$1 + 12 >> 2], 8, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__Conv2DOptions__stride_w_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20flatbuffers__Table__GetField_int__28unsigned_20short_2c_20int_29_20const(HEAP32[$1 + 12 >> 2], 6, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__Conv2DOptions__stride_h_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20flatbuffers__Table__GetField_int__28unsigned_20short_2c_20int_29_20const(HEAP32[$1 + 12 >> 2], 8, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_date_from_milliseconds($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 HEAP32[$1 + 4 >> 2] = jspNewObject(0, 119725);
 jswrap_date_setTime(HEAP32[$1 + 4 >> 2], HEAPF64[$1 + 8 >> 3]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 4 >> 2];
}

function jsvObjectGetFloatChild($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = jsvGetFloatAndUnLock(jsvObjectGetChildIfExists(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]));
 __stack_pointer = $2 + 16 | 0;
 return $3;
}

function _jswrap_promise_resolve($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 _jswrap_promise_resolve_or_reject_chain(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 1);
 __stack_pointer = $2 + 16 | 0;
}

function tflite__OperatorCode__version_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20flatbuffers__Table__GetField_int__28unsigned_20short_2c_20int_29_20const(HEAP32[$1 + 12 >> 2], 8, 1);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_modules_removeAllCached() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = jswrap_modules_getModuleList();
 if (HEAP32[$0 + 12 >> 2]) {
  jsvRemoveAllChildren(HEAP32[$0 + 12 >> 2]);
  jsvUnLock(HEAP32[$0 + 12 >> 2]);
 }
 __stack_pointer = $0 + 16 | 0;
}

function jswrap_math_sqrt($0) {
 $0 = +$0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 label$1: {
  if (HEAPF64[$1 + 8 >> 3] >= 0) {
   $0 = exp(log(HEAPF64[$1 + 8 >> 3]) * .5);
   break label$1;
  }
  $0 = nan;
 }
 __stack_pointer = $1 + 16 | 0;
 return +$0;
}

function jsiHandleHome() {
 var $0 = 0;
 while (1) {
  $0 = 0;
  if (HEAP32[86770]) {
   $0 = (jsvGetCharInString(HEAP32[86768], HEAP32[86770] - 1 | 0) | 0) != 10;
  }
  if ($0) {
   if (jsiShowInputLine() & 1) {
    jsiConsolePrintChar(8);
   }
   HEAP32[86770] = HEAP32[86770] - 1;
   continue;
  }
  break;
 }
}

function gen_jswrap_Math_tan($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 $0 = jswrap_math_sin(HEAPF64[$1 + 8 >> 3]);
 $2 = jswrap_math_sin(HEAPF64[$1 + 8 >> 3] + 1.5707963267948966);
 __stack_pointer = $1 + 16 | 0;
 return +($0 / $2);
}

function _jswrap_promise_reject($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 _jswrap_promise_resolve_or_reject_chain(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 0);
 __stack_pointer = $2 + 16 | 0;
}

function tflite__EspruinoErrorReporter___EspruinoErrorReporter_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 tflite__ErrorReporter___ErrorReporter_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jsvObjectGetIntegerChild($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = jsvGetIntegerAndUnLock(jsvObjectGetChildIfExists(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]));
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jsvLockAgainSafe($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (HEAP32[$1 + 12 >> 2]) {
   $0 = jsvLockAgain(HEAP32[$1 + 12 >> 2]);
   break label$1;
  }
  $0 = 0;
 }
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function tflite__MicroAllocator__ResetTempAllocations_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectGetBoolChild($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = jsvGetBoolAndUnLock(jsvObjectGetChildIfExists(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]));
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function gen_jswrap_ArrayBufferView_byteLength($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 return Math_imul(HEAPU8[HEAP32[$1 + 12 >> 2] + 5 | 0] & 15, HEAPU8[$0 + 4 | 0] << 16 | (HEAPU8[$0 + 2 | 0] | HEAPU8[$0 + 3 | 0] << 8)) | 0;
}

function flatbuffers__Table__GetVTable_28_29_20const($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $2 = int_20flatbuffers__ReadScalar_int__28void_20const__29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 - $2 | 0;
}

function jswrap_pin_mode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jswrap_io_pinMode(jshGetPinFromVar(HEAP32[$2 + 12 >> 2]) & 255, HEAP32[$2 + 8 >> 2], 0);
 __stack_pointer = $2 + 16 | 0;
}

function jswrap_banglejs_setTheme() {
 HEAP8[349444] = 0;
 HEAP8[349445] = 0;
 HEAP8[349446] = 255;
 HEAP8[349447] = 255;
 HEAP8[349448] = 0;
 HEAP8[349449] = 0;
 HEAP8[349450] = 255;
 HEAP8[349451] = 191;
 HEAP8[349452] = 0;
 HEAP8[349453] = 0;
 HEAP8[349454] = 255;
 HEAP8[349455] = 7;
 HEAP8[349456] = 0;
}

function tflite__GreedyMemoryPlanner___GreedyMemoryPlanner_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 tflite__MemoryPlanner___MemoryPlanner_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jslTokenAppendChar($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 if (HEAPU8[HEAP32[44743] + 80 | 0] < 63) {
  $2 = HEAPU8[$1 + 15 | 0];
  $0 = HEAP32[44743];
  $1 = HEAPU8[$0 + 80 | 0];
  HEAP8[$0 + 80 | 0] = $1 + 1;
  HEAP8[($0 + 12 | 0) + $1 | 0] = $2;
 }
}

function jswrap_graphics_init() {
 HEAP8[349444] = 255;
 HEAP8[349445] = 255;
 HEAP8[349446] = 0;
 HEAP8[349447] = 0;
 HEAP8[349448] = 255;
 HEAP8[349449] = 255;
 HEAP8[349450] = 0;
 HEAP8[349451] = 0;
 HEAP8[349452] = 255;
 HEAP8[349453] = 255;
 HEAP8[349454] = 0;
 HEAP8[349455] = 0;
 HEAP8[349456] = 1;
}

function jsfGetJSON($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 jsfGetJSONWhitespace(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 0);
 __stack_pointer = $3 + 16 | 0;
}

function jsiLoop() {
 jshIdle();
 jsiIdle();
 jsiCheckErrors();
 if (HEAP32[86758] & 6144) {
  HEAP32[86758] = HEAP32[86758] & -6145;
  label$2: {
   if (!(jsvIsEmptyString(HEAP32[86768]) & 1)) {
    break label$2;
   }
  }
  jsiClearInputLine(1);
 }
 jsiConsoleReturnInputLine();
 return !HEAPU8[347086];
}
function jsvSetInteger($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = HEAP32[$2 + 8 >> 2];
 HEAP8[$0 | 0] = $1;
 HEAP8[$0 + 1 | 0] = $1 >>> 8;
 HEAP8[$0 + 2 | 0] = $1 >>> 16;
 HEAP8[$0 + 3 | 0] = $1 >>> 24;
}

function gen_jswrap_peek32($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = jswrap_io_peek(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 4);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_peek16($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = jswrap_io_peek(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 2);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function unsigned_20char_20const__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 12 >> 2]) {
   break label$1;
  }
 }
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
}

function gen_jswrap_peek8($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = jswrap_io_peek(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 1);
 __stack_pointer = $2 + 16 | 0;
 return $0 | 0;
}

function ftoa_bounded($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAPF64[$3 + 8 >> 3] = $0;
 HEAP32[$3 + 4 >> 2] = $1;
 HEAP32[$3 >> 2] = $2;
 ftoa_bounded_extra(HEAPF64[$3 + 8 >> 3], HEAP32[$3 + 4 >> 2], HEAP32[$3 >> 2], 10, -1);
 __stack_pointer = $3 + 16 | 0;
}

function jsvRefRef($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP16[$1 + 14 >> 1] = $0;
 HEAP32[$1 + 8 >> 2] = jsvLock(HEAPU16[$1 + 14 >> 1]);
 jsvRef(HEAP32[$1 + 8 >> 2]);
 jsvUnLock(HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAPU16[$1 + 14 >> 1];
}

function jsvObjectIteratorNew($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = jsvLockSafe(jsvGetFirstChild(HEAP32[$2 + 8 >> 2]) & 65535);
 HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = $0;
 __stack_pointer = $2 + 16 | 0;
}

function tflite__MicroOpResolver__MicroOpResolver_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 tflite__OpResolver__OpResolver_28_29($0);
 HEAP32[$0 >> 2] = 172992;
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function tflite__GetModel_28void_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = tflite__Model_20const__20flatbuffers__GetRoot_tflite__Model__28void_20const__29(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jsvGetRef($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 8 >> 2]) {
   HEAP16[$1 + 14 >> 1] = 0;
   break label$1;
  }
  HEAP16[$1 + 14 >> 1] = ((HEAP32[$1 + 8 >> 2] - 178984 | 0) / 14 | 0) + 1;
 }
 return HEAPU16[$1 + 14 >> 1];
}

function signed_20char_20const__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 12 >> 2]) {
   break label$1;
  }
 }
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
}

function jswrap_math_asin($0) {
 $0 = +$0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 $0 = jswrap_math_atan(HEAPF64[$1 + 8 >> 3] / jswrap_math_sqrt(-HEAPF64[$1 + 8 >> 3] * HEAPF64[$1 + 8 >> 3] + 1));
 __stack_pointer = $1 + 16 | 0;
 return +$0;
}

function _jswrap_onewire_write_cb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 OneWireWrite(HEAPU8[HEAP32[$2 + 8 >> 2]], 8, HEAP32[$2 + 12 >> 2], 0);
 __stack_pointer = $2 + 16 | 0;
}

function tflite__NumElements_28TfLiteTensor_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = tflite__NumElements_28TfLiteIntArray_20const__29(HEAP32[HEAP32[$1 + 12 >> 2] + 20 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function gen_jswrap_E_showScroller($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 12 >> 2];
 $0 = jspExecuteJSFunction(136128, 0, 1, $1 + 8 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function flatbuffers__Vector_unsigned_20char___data_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_unsigned_20char___Data_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function int_20flatbuffers__ReadScalar_int__28void_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20flatbuffers__EndianScalar_int__28int_29(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_serial_println($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 _jswrap_serial_print(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 1, 1);
 __stack_pointer = $2 + 16 | 0;
}

function jsvIsUTF8String($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 if (HEAP32[$1 + 8 >> 2]) {
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP8[$1 + 7 | 0] = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63;
 }
 HEAP8[$1 + 15 | 0] = 0;
 return HEAP8[$1 + 15 | 0] & 1;
}

function itostr_4($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 itostr_extra(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], 1, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function itostr_3($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 itostr_extra(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], 1, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function itostr_2($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 itostr_extra(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], 1, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function itostr_1($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 itostr_extra(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], 1, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function jsvArrayPushString($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = jsvArrayPushAndUnLock(HEAP32[$2 + 12 >> 2], jsvNewFromString(HEAP32[$2 + 8 >> 2]));
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function jslCharPosFromLex($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvStringIteratorClone(HEAP32[$1 + 12 >> 2], HEAP32[44743] + 88 | 0);
 HEAP8[HEAP32[$1 + 12 >> 2] + 36 | 0] = HEAPU8[HEAP32[44743]];
 __stack_pointer = $1 + 16 | 0;
}

function jshGetEventsUsed() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 16 | 0;
 if (HEAPU8[347148] >= HEAPU8[347149]) {
  $1 = HEAPU8[347148] - HEAPU8[347149] | 0;
 } else {
  $1 = (HEAPU8[347148] + 256 | 0) - HEAPU8[347149] | 0;
 }
 HEAP32[$0 + 12 >> 2] = $1;
 return HEAP32[$0 + 12 >> 2];
}

function jswrap_serial_write($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 _jswrap_serial_print(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 0, 0);
 __stack_pointer = $2 + 16 | 0;
}

function jswrap_serial_print($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 _jswrap_serial_print(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 1, 0);
 __stack_pointer = $2 + 16 | 0;
}

function jshGetPinFromVarAndUnLock($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = jshGetPinFromVar(HEAP32[$1 + 12 >> 2]);
 jsvUnLock(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAPU8[$1 + 11 | 0];
}

function itostr($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 itostr_extra(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], 1, HEAP32[$3 + 4 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function gen_jswrap_E_showMenu($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 12 >> 2];
 $0 = jspExecuteJSFunction(132403, 0, 1, $1 + 8 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function tflite__MicroOpResolver___MicroOpResolver_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 tflite__OpResolver___OpResolver_28_29($0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jswrap_storage_getFree($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 48 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 47 | 0] = $0;
 HEAP32[$1 + 40 >> 2] = 0;
 jsfGetStorageStats($1 + 8 | 0, HEAP32[$1 + 40 >> 2], 1);
 __stack_pointer = $1 + 48 | 0;
 return HEAP32[$1 + 28 >> 2];
}

function jsvAsArrayIndexAndUnLock($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvAsArrayIndex(HEAP32[$1 + 12 >> 2]);
 jsvUnLock(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jsfIsRealFile($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]) {
  $2 = (jsfGetFileFlags(HEAP32[$1 + 12 >> 2]) & 32) != 0 ^ -1;
 }
 __stack_pointer = $1 + 16 | 0;
 return $2 & 1;
}

function getTimeFromDateVar($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP8[$3 + 11 | 0] = $2;
 getTimeFromMilliSeconds($0, jswrap_date_getTime(HEAP32[$3 + 12 >> 2]), HEAP8[$3 + 11 | 0] & 1);
 __stack_pointer = $3 + 16 | 0;
}

function dtohex($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 12 >> 2] & 15;
 if (HEAP32[$1 + 12 >> 2] < 10) {
  $0 = HEAP32[$1 + 12 >> 2] + 48 | 0;
 } else {
  $0 = HEAP32[$1 + 12 >> 2] + 55 | 0;
 }
 return $0 << 24 >> 24;
}

function add_tag_bit($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 __stack_pointer = $3;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 push_bits(HEAP32[$3 + 12 >> 2], 1, HEAPU8[$3 + 7 | 0], HEAP32[$3 + 8 >> 2]);
 __stack_pointer = $3 + 16 | 0;
}

function jsvLockAgain($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $2 = (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) + 1024 | 0;
 HEAP8[$0 + 12 | 0] = $2;
 HEAP8[$0 + 13 | 0] = $2 >>> 8;
 return HEAP32[$1 + 12 >> 2];
}

function tflite__MicroInterpreter__outputs_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = tflite__SubGraph__outputs_28_29_20const(HEAP32[HEAP32[$1 + 12 >> 2] + 116 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_pin_read($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = jshGetPinFromVar(HEAP32[$1 + 12 >> 2]);
 $0 = jshPinInput(HEAPU8[$1 + 11 | 0]);
 __stack_pointer = $1 + 16 | 0;
 return $0 & 1;
}

function jsvSkipOneNameAndUnLock($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvSkipOneName(HEAP32[$1 + 12 >> 2]);
 jsvUnLock(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jsvRemoveChildAndUnLock($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jsvRemoveChild(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 jsvUnLock(HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function jsvGetArrayItem($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = jsvSkipNameAndUnLock(jsvGetArrayIndex(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]));
 __stack_pointer = $2 + 16 | 0;
 return $0;
}

function itoch($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 8 >> 2] = $0;
 label$1: {
  if (HEAP32[$1 + 8 >> 2] < 10) {
   HEAP8[$1 + 15 | 0] = HEAP32[$1 + 8 >> 2] + 48;
   break label$1;
  }
  HEAP8[$1 + 15 | 0] = HEAP32[$1 + 8 >> 2] + 87;
 }
 return HEAP8[$1 + 15 | 0];
}

function _jsvGetIntegerAndUnLock($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvGetInteger(HEAP32[$1 + 12 >> 2]);
 jsvUnLock(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function _jsvGetBoolAndUnLock($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = jsvGetBool(HEAP32[$1 + 12 >> 2]) & 1;
 jsvUnLock(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP8[$1 + 11 | 0] & 1;
}

function vcbprintf_callback_jsiConsolePrintString($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jsiConsolePrintString(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function tflite__MicroInterpreter__inputs_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = tflite__SubGraph__inputs_28_29_20const(HEAP32[HEAP32[$1 + 12 >> 2] + 116 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jsvIsStringEqual($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = jsvIsStringEqualOrStartsWith(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 0);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function tflite__RuntimeShape__DimsData_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1: {
  if (HEAP32[$0 >> 2] > 5) {
   $0 = HEAP32[$0 + 4 >> 2];
   break label$1;
  }
  $0 = $0 + 4 | 0;
 }
 return $0;
}

function jswrap_tfmicrointerpreter_getOutput($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_tfmicrointerpreter_tensorToArrayBuffer(HEAP32[$1 + 12 >> 2], 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jswrap_espruino_getErrorFlags() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP8[$0 + 15 | 0] = HEAPU8[346998];
 HEAP8[346998] = 0;
 $1 = jswrap_espruino_getErrorFlagArray(HEAPU8[$0 + 15 | 0]);
 __stack_pointer = $0 + 16 | 0;
 return $1 | 0;
}

function long_20long_20flatbuffers__EndianScalar_long_20long__28long_20long_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 8 >> 2];
 $2 = HEAP32[$2 + 12 >> 2];
 i64toi32_i32$HIGH_BITS = $2;
 return $1;
}

function jswrap_tfmicrointerpreter_getInput($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_tfmicrointerpreter_tensorToArrayBuffer(HEAP32[$1 + 12 >> 2], 1);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jsvUnRefRef($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP16[$1 + 14 >> 1] = $0;
 HEAP32[$1 + 8 >> 2] = jsvLock(HEAPU16[$1 + 14 >> 1]);
 jsvUnRef(HEAP32[$1 + 8 >> 2]);
 jsvUnLock(HEAP32[$1 + 8 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return 0;
}

function jsvIterateCallbackCount($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = 0;
 jsvIterateBufferCallback(HEAP32[$1 + 12 >> 2], 5, $1 + 8 | 0);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jswrap_flash_getFree() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = jshFlashGetFree();
 if (!HEAP32[$0 + 12 >> 2]) {
  HEAP32[$0 + 12 >> 2] = jsvNewEmptyArray();
 }
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function jsvSkipNameAndUnLock($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvSkipName(HEAP32[$1 + 12 >> 2]);
 jsvUnLock(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jsvAsStringAndUnLock($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvAsString(HEAP32[$1 + 12 >> 2]);
 jsvUnLock(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jsvAsNumberAndUnLock($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = jsvAsNumber(HEAP32[$1 + 12 >> 2]);
 jsvUnLock(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function int_20gemmlowp__MaskIfZero_int__28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = int_20gemmlowp__MaskIfNonZero_int__28int_29((HEAP32[$1 + 12 >> 2] != 0 ^ -1) & 1);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function gen_jswrap_Bangle_load($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 12 >> 2];
 jsvUnLock(jspExecuteJSFunction(140220, 0, 1, $1 + 8 | 0));
 __stack_pointer = $1 + 16 | 0;
}

function _jswrap_drawImageLayerStartX($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[HEAP32[$1 + 12 >> 2] + 180 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 172 >> 2];
 HEAP32[HEAP32[$1 + 12 >> 2] + 184 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + 176 >> 2];
}

function jswrap_pipe_kill() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = pipeGetArray(0);
 if (HEAP32[$0 + 12 >> 2]) {
  jsvRemoveAllChildren(HEAP32[$0 + 12 >> 2]);
  jsvUnLock(HEAP32[$0 + 12 >> 2]);
 }
 __stack_pointer = $0 + 16 | 0;
}

function jswrap_interface_load($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP16[173534] = HEAPU16[173534] | 64;
 jsvObjectSetChild(HEAP32[86751], 121988, HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jstStopBufferTimerTask($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP16[$1 + 10 >> 1] = jsvGetRef(HEAP32[$1 + 12 >> 2]);
 $0 = utilTimerRemoveTask(558, $1 + 10 | 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 & 1;
}

function tflite__ops__micro__Register_DEPTHWISE_CONV_2D_28_29($0) {
 HEAP32[$0 >> 2] = 674;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 675;
 HEAP32[$0 + 12 >> 2] = 676;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
}

function short_20const__20tflite__micro__GetTensorData_short__28TfLiteEvalTensor_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 12 >> 2]) {
   break label$1;
  }
 }
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
}

function gen_jswrap_poke32($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jswrap_io_poke(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 4);
 __stack_pointer = $2 + 16 | 0;
}

function gen_jswrap_poke16($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jswrap_io_poke(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 2);
 __stack_pointer = $2 + 16 | 0;
}

function float_20const__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 12 >> 2]) {
   break label$1;
  }
 }
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
}

function unsigned_20char__20tflite__micro__GetTensorData_unsigned_20char__28TfLiteEvalTensor__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 } else {
  $0 = 0;
 }
 return $0;
}

function jswrap_banglejs_factoryReset($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 jsfResetStorage();
 if (!(HEAP8[$1 + 15 | 0] & 1)) {
  HEAP16[173534] = HEAPU16[173534] | 64;
 }
 __stack_pointer = $1 + 16 | 0;
}

function gen_jswrap_poke8($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jswrap_io_poke(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 1);
 __stack_pointer = $2 + 16 | 0;
}

function tflite__ops__micro__Register_FULLY_CONNECTED_28_29($0) {
 HEAP32[$0 >> 2] = 687;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 688;
 HEAP32[$0 + 12 >> 2] = 689;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
}

function tflite__ops__micro__Register_AVERAGE_POOL_2D_28_29($0) {
 HEAP32[$0 >> 2] = 680;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 681;
 HEAP32[$0 + 12 >> 2] = 682;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
}

function jswrap_interface_reset($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 HEAP16[173534] = HEAPU16[173534] | 128;
 if (HEAP8[$1 + 15 | 0] & 1) {
  jsfRemoveCodeFromFlash();
 }
 __stack_pointer = $1 + 16 | 0;
}

function jsvAppendStringVarComplete($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jsvAppendStringVar(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2], 0, 2147483647);
 __stack_pointer = $2 + 16 | 0;
}

function gen_jswrap_Object_getOwnPropertyNames($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_object_keys_or_property_names(HEAP32[$1 + 12 >> 2], 1);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function _jsvGetFloatAndUnLock($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAPF64[$1 >> 3] = jsvGetFloat(HEAP32[$1 + 12 >> 2]);
 jsvUnLock(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return HEAPF64[$1 >> 3];
}

function tflite__SizeOfDimension_28TfLiteTensor_20const__2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[(HEAP32[HEAP32[$2 + 12 >> 2] + 20 >> 2] + 4 | 0) + (HEAP32[$2 + 8 >> 2] << 2) >> 2];
}

function tflite__RuntimeShape__DimsData_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1: {
  if (HEAP32[$0 >> 2] > 5) {
   $0 = HEAP32[$0 + 4 >> 2];
   break label$1;
  }
  $0 = $0 + 4 | 0;
 }
 return $0;
}

function std____2____non_trivial_if_true_2c_20std____2__allocator_std____2__unique_ptr_TfLiteDelegate_2c_20void_20_28__29_28TfLiteDelegate__29_______non_trivial_if_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function int_20const__20tflite__micro__GetTensorData_int__28TfLiteEvalTensor_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 label$1: {
  if (!HEAP32[$1 + 12 >> 2]) {
   break label$1;
  }
 }
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
}

function tflite__RuntimeShape___RuntimeShape_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if (HEAP32[$0 >> 2] > 5) {
  abort();
  abort();
 }
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function signed_20char__20tflite__micro__GetTensorData_signed_20char__28TfLiteEvalTensor__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 } else {
  $0 = 0;
 }
 return $0;
}

function jstGetLastPinTimerTask($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = utilTimerGetLastTask(557, $2 + 15 | 0, HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
 return $0 & 1;
}

function gemmlowp__FixedPoint_int_2c_202___One_28_29() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 8 >> 2] = gemmlowp__FixedPoint_int_2c_202___FromScalarRaw_28int_29(536870912);
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 8 >> 2];
}

function btn1Handler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 btnHandlerCommon(1, HEAP8[$2 + 15 | 0] & 1, HEAPU8[$2 + 14 | 0]);
 __stack_pointer = $2 + 16 | 0;
}

function tflite__ops__micro__Register_MAX_POOL_2D_28_29($0) {
 HEAP32[$0 >> 2] = 680;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 681;
 HEAP32[$0 + 12 >> 2] = 683;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
}

function jswrap_math_atan2($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAPF64[$2 + 8 >> 3] = $0;
 HEAPF64[$2 >> 3] = $1;
 $0 = atan2(HEAPF64[$2 + 8 >> 3], HEAPF64[$2 >> 3]);
 __stack_pointer = $2 + 16 | 0;
 return +$0;
}

function jswrap_date_getFullYear($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 getCalendarDateFromDateVar($1 + 8 | 0, HEAP32[$1 + 28 >> 2], 0);
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 20 >> 2];
}

function tflite__ops__micro__Register_DEQUANTIZE_28_29($0) {
 HEAP32[$0 >> 2] = 693;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 694;
 HEAP32[$0 + 12 >> 2] = 695;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
}

function jsvGetRefs($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $1 = HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24);
 $1 = $1 >>> 10 | 0;
 return $1 & 255;
}

function i2c_pin_wr1($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 jshPinSetValue(HEAPU8[$1 + 15 | 0], 1);
 jshPinSetState(HEAPU8[$1 + 15 | 0], 1);
 jshPinSetState(HEAPU8[$1 + 15 | 0], 5);
 __stack_pointer = $1 + 16 | 0;
}

function flatbuffers__Vector_int___Length_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_int___size_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_pin_reset($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = jshGetPinFromVar(HEAP32[$1 + 12 >> 2]);
 jshPinOutput(HEAPU8[$1 + 11 | 0], 0);
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_date_getTimezoneOffset($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 getTimeFromDateVar($1, HEAP32[$1 + 28 >> 2], 0);
 __stack_pointer = $1 + 32 | 0;
 return 0 - HEAP32[$1 + 20 >> 2] | 0;
}

function tflite__ops__micro__Register_QUANTIZE_28_29($0) {
 HEAP32[$0 >> 2] = 690;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 691;
 HEAP32[$0 + 12 >> 2] = 692;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
}

function jswrap_date_getMonth($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 getCalendarDateFromDateVar($1 + 8 | 0, HEAP32[$1 + 28 >> 2], 0);
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 16 >> 2];
}

function gen_jswrap_Graphics_setFontBitmap($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_graphics_setFontSizeX(HEAP32[$1 + 12 >> 2], 8193, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function tflite__ops__micro__Register_SOFTMAX_28_29($0) {
 HEAP32[$0 >> 2] = 684;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 685;
 HEAP32[$0 + 12 >> 2] = 686;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
}

function tflite__ops__micro__Register_CONV_2D_28_29($0) {
 HEAP32[$0 >> 2] = 677;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 678;
 HEAP32[$0 + 12 >> 2] = 679;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
}

function jswrap_pin_set($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP8[$1 + 11 | 0] = jshGetPinFromVar(HEAP32[$1 + 12 >> 2]);
 jshPinOutput(HEAPU8[$1 + 11 | 0], 1);
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_interface_echo($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 label$1: {
  if (HEAP8[$1 + 15 | 0] & 1) {
   HEAP16[173534] = HEAPU16[173534] & -2;
   break label$1;
  }
  HEAP16[173534] = HEAPU16[173534] | 1;
 }
}

function jswrap_date_getDate($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 getCalendarDateFromDateVar($1 + 8 | 0, HEAP32[$1 + 28 >> 2], 0);
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jshBusyIdle() {
 var $0 = 0, $1 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = 178756;
 $1 = HEAP32[$0 + 12 >> 2];
 HEAP8[$0 + 11 | 0] = 0;
 emscripten_asm_const_int($1 | 0, $0 + 11 | 0, 0) | 0;
 __stack_pointer = $0 + 16 | 0;
}

function gemmlowp__FixedPoint_int_2c_2012___Zero_28_29() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 8 >> 2] = gemmlowp__FixedPoint_int_2c_2012___FromScalarRaw_28int_29(0);
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 8 >> 2];
}

function jswrap_graphics_setFontPBF($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jsExceptionHere(1, 120954, 0);
 __stack_pointer = $2 + 16 | 0;
 return 0;
}

function jswrap_date_getDay($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 getCalendarDateFromDateVar($1 + 8 | 0, HEAP32[$1 + 28 >> 2], 0);
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 24 >> 2];
}

function flatbuffers__String__c_str_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = flatbuffers__Vector_char___Data_28_29_20const(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_referenceerror_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = _jswrap_error_constructor(HEAP32[$1 + 12 >> 2], 116180);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jswrap_graphics_dump($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsiConsolePrintf(128040, 0);
 jsvUnLock(jswrap_graphics_asBMP_X(HEAP32[$1 + 12 >> 2], 1));
 __stack_pointer = $1 + 16 | 0;
}

function gen_jswrap_ArrayBufferView_buffer($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvLock(jsvGetFirstChild(HEAP32[$1 + 12 >> 2]) & 65535);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jswrap_internalerror_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = _jswrap_error_constructor(HEAP32[$1 + 12 >> 2], 116156);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jsvGetFlatStringBlocks($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 return ((HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24)) + 13 >>> 0) / 14 | 0;
}

function jsvArrayBufferIteratorFree($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAPU8[HEAP32[$1 + 12 >> 2] + 36 | 0]) {
  jsvStringIteratorFree_2(HEAP32[$1 + 12 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
}

function jshTransmitClearDevice($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 while (1) {
  if ((jshGetCharToTransmit(HEAPU8[$1 + 15 | 0]) | 0) >= 0) {
   continue;
  }
  break;
 }
 __stack_pointer = $1 + 16 | 0;
}

function gen_jswrap_Graphics_getHeight($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_graphics_getWidthOrHeight(HEAP32[$1 + 12 >> 2], 1);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jswrap_syntaxerror_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = _jswrap_error_constructor(HEAP32[$1 + 12 >> 2], 116144);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jswrap_storagefile_readLine($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_storagefile_read_internal(HEAP32[$1 + 12 >> 2], -1);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jsfPrintJSON($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jsfGetJSONWithCallback(HEAP32[$2 + 12 >> 2], 0, HEAP32[$2 + 8 >> 2], 0, 7, 0);
 __stack_pointer = $2 + 16 | 0;
}

function gen_jswrap_Graphics_getWidth($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_graphics_getWidthOrHeight(HEAP32[$1 + 12 >> 2], 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function onewire_getpin($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jshGetPinFromVarAndUnLock(jsvObjectGetChildIfExists(HEAP32[$1 + 12 >> 2], 117541));
 __stack_pointer = $1 + 16 | 0;
 return $0 & 255;
}

function jswrap_pin_getMode($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_io_getPinMode(jshGetPinFromVar(HEAP32[$1 + 12 >> 2]) & 255);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jswrap_banglejs_pwrBacklight($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 jshPinOutput(8, HEAP8[$1 + 15 | 0] & 1);
 lcdMemLCD_extcominBacklight(HEAP8[$1 + 15 | 0] & 1);
 __stack_pointer = $1 + 16 | 0;
}

function jspromise_resolve($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 _jswrap_promise_queueresolve(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function gen_jswrap_String_toUpperCase($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_string_toUpperLowerCase(HEAP32[$1 + 12 >> 2], 1);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_String_toLowerCase($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_string_toUpperLowerCase(HEAP32[$1 + 12 >> 2], 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function std____2____compressed_pair_elem_tflite___28anonymous_20namespace_29__SafeBuiltinDataAllocator__BuiltinDataDeleter_2c_201_2c_20false_____get_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_typeerror_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = _jswrap_error_constructor(HEAP32[$1 + 12 >> 2], 116170);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jsserialGetSerialList($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 $0 = jsvObjectGetChild(HEAP32[86751], 118113, (HEAP8[$1 + 15 | 0] & 1 ? 3 : 0) & 65535);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jsfGetDriveBankAddress($0, $1, $2) {
 var $3 = 0;
 $3 = __stack_pointer - 16 | 0;
 HEAP8[$3 + 15 | 0] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[HEAP32[$3 + 8 >> 2] >> 2] = 134217728;
 HEAP32[HEAP32[$3 + 4 >> 2] >> 2] = 142606336;
}

function gen_jswrap_Object_keys($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_object_keys_or_property_names(HEAP32[$1 + 12 >> 2], 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jswrap_date_getMilliseconds($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 getTimeFromDateVar($1, HEAP32[$1 + 28 >> 2], 0);
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 4 >> 2];
}

function jsvUnLock2($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jsvUnLockInline(HEAP32[$2 + 12 >> 2]);
 jsvUnLockInline(HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function jspromise_reject($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 _jswrap_promise_queuereject(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function gen_jswrap_Object_entries($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_object_values_or_entries(HEAP32[$1 + 12 >> 2], 1);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function srand($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[44634] = HEAP32[$1 + 12 >> 2] & 65535 | HEAP32[$1 + 12 >> 2] << 16;
 HEAP32[44635] = HEAP32[$1 + 12 >> 2] & -65536 | HEAP32[$1 + 12 >> 2] >>> 16;
}

function short__20tflite__micro__GetTensorData_short__28TfLiteEvalTensor__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 } else {
  $0 = 0;
 }
 return $0;
}

function jswrap_pin_analog($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = jshPinAnalog(jshGetPinFromVar(HEAP32[$1 + 12 >> 2]) & 255);
 __stack_pointer = $1 + 16 | 0;
 return +$2;
}

function int_20tflite__CountLeadingZeros_unsigned_20int__28unsigned_20int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = Math_clz32(HEAP32[$1 + 12 >> 2]);
 } else {
  $0 = 32;
 }
 return $0;
}

function gen_jswrap_String_removeAccents($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_string_removeAccents(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_Object_values($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_object_values_or_entries(HEAP32[$1 + 12 >> 2], 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_Graphics_getBgColor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_graphics_getColorX(HEAP32[$1 + 12 >> 2], 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function float__20tflite__micro__GetTensorData_float__28TfLiteEvalTensor__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 } else {
  $0 = 0;
 }
 return $0;
}

function jswrap_error_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = _jswrap_error_constructor(HEAP32[$1 + 12 >> 2], 116189);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jswrap_espruino_toFlatString($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_espruino_toStringX(HEAP32[$1 + 12 >> 2], 1);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jswrap_date_getMinutes($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 getTimeFromDateVar($1, HEAP32[$1 + 28 >> 2], 0);
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_date_getIsDST($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 getTimeFromDateVar($1, HEAP32[$1 + 28 >> 2], 0);
 __stack_pointer = $1 + 32 | 0;
 return HEAP8[$1 + 24 | 0] & 1;
}

function jsvIsArrayBufferName($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63) == 14;
 }
 return $2;
}

function gen_jswrap_Graphics_getColor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_graphics_getColorX(HEAP32[$1 + 12 >> 2], 1);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function tflite__internal__ContextHelper__SetTfLiteEvalTensors_28TfLiteEvalTensor__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2] = HEAP32[$2 + 8 >> 2];
}

function jswrap_object_getPrototypeOf($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jspGetNamedField(HEAP32[$1 + 12 >> 2], 123007, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jswrap_date_getSeconds($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 getTimeFromDateVar($1, HEAP32[$1 + 28 >> 2], 0);
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 8 >> 2];
}

function jsiOneSecondAfterStartup() {
 label$1: {
  if (HEAPU8[178544] == 19) {
   HEAP8[178544] = jsiGetPreferredConsoleDevice();
   jshTransmitMove(19, HEAPU8[178544]);
   jshUSARTKick(HEAPU8[178544]);
   break label$1;
  }
  jshTransmitClearDevice(19);
 }
}

function dly($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]) {
  jshDelayMicroseconds(HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]);
 }
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_date_getTime($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = jsvObjectGetFloatChild(HEAP32[$1 + 12 >> 2], 115397);
 __stack_pointer = $1 + 16 | 0;
 return +$2;
}

function jswrap_date_getHours($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 32 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 28 >> 2] = $0;
 getTimeFromDateVar($1, HEAP32[$1 + 28 >> 2], 0);
 __stack_pointer = $1 + 32 | 0;
 return HEAP32[$1 + 16 >> 2];
}

function jsvIsNativeFunction($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63) == 8;
 }
 return $2;
}

function jsvIsFunctionReturn($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63) == 9;
 }
 return $2;
}

function int__20tflite__micro__GetTensorData_int__28TfLiteEvalTensor__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
 } else {
  $0 = 0;
 }
 return $0;
}

function graphicsFallbackSetPixel($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = __stack_pointer - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
}

function jsvGetLastChild($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 return (HEAPU8[$0 + 8 | 0] | HEAPU8[$0 + 9 | 0] << 8 | (HEAPU8[$0 + 10 | 0] << 16 | HEAPU8[$0 + 11 | 0] << 24)) >>> 18 | 0;
}

function gen_jswrap_Math_acos($0) {
 $0 = +$0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 $0 = jswrap_math_asin(HEAPF64[$1 + 8 >> 3]);
 __stack_pointer = $1 + 16 | 0;
 return +(1.5707963267948966 - $0);
}

function gen_jswrap_Array_pop($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvSkipNameAndUnLock(jsvArrayPop(HEAP32[$1 + 12 >> 2]));
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function pipeGetArray($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 $0 = jsvObjectGetChild(HEAP32[86751], 115491, (HEAP8[$1 + 15 | 0] & 1 ? 3 : 0) & 65535);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jswrap_interface_clearInterval($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _jswrap_interface_clearTimeoutOrInterval(HEAP32[$1 + 12 >> 2], 0);
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_espruino_toString($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_espruino_toStringX(HEAP32[$1 + 12 >> 2], 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jsvIsNameIntBool($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63) == 17;
 }
 return $2;
}

function jshGetMillisecondsFromTime($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $1;
 $3 = +HEAPU32[$2 + 8 >> 2];
 $2 = HEAP32[$2 + 12 >> 2];
 return ($3 + +($2 | 0) * 4294967296) / 1e3;
}

function jswrap_interface_clearTimeout($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _jswrap_interface_clearTimeoutOrInterval(HEAP32[$1 + 12 >> 2], 1);
 __stack_pointer = $1 + 16 | 0;
}

function jsvIsArrayBuffer($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63) == 4;
 }
 return $2;
}

function jswrap_espruino_asm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 jsExceptionHere(1, 121835, 0);
 __stack_pointer = $2 + 16 | 0;
}

function jsvIsSimpleInt($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63) == 10;
 }
 return $2;
}

function jsvGetNextSibling($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 return (HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24)) & 16383;
}

function jsiInit($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 HEAP16[173534] = 6144;
 HEAP8[178544] = 19;
 jsiSemiInit(HEAP8[$1 + 15 | 0] & 1, 0);
 jsiSetBusy(1, 0);
 __stack_pointer = $1 + 16 | 0;
}

function jsiConsolePrintf($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 vcbprintf(554, 0, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function gen_jswrap_Serial_find($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 $0 = jshGetDeviceObjectFor(768, 848, HEAPU8[$1 + 15 | 0]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jsvIsConstant($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 64) == 64;
 }
 return $2;
}

function jsvAppendCharacter_2($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 jsvAppendStringBuf(HEAP32[$2 + 12 >> 2], $2 + 11 | 0, 1);
 __stack_pointer = $2 + 16 | 0;
}

function jsvAppendCharacter_1($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 jsvAppendStringBuf(HEAP32[$2 + 12 >> 2], $2 + 11 | 0, 1);
 __stack_pointer = $2 + 16 | 0;
}

function jshGetWatchedPinState($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 $0 = jshPinGetValue(HEAPU8[(HEAPU8[$1 + 15 | 0] - 1 | 0) + 373632 | 0]);
 __stack_pointer = $1 + 16 | 0;
 return $0 & 1;
}

function jsvIsNullish($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = 1;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = HEAP32[$1 + 12 >> 2];
  $0 = ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63) == 2;
 }
 return $0;
}

function tflite___28anonymous_20namespace_29__AllocationInfoBuilder__Size_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 return HEAP32[$0 + 8 >> 2] + HEAP32[$0 + 12 >> 2] | 0;
}

function rand() {
 HEAP32[44635] = Math_imul(HEAP32[44635] & 65535, 36969) + (HEAP32[44635] >>> 16 | 0);
 HEAP32[44634] = Math_imul(HEAP32[44634] & 65535, 18e3) + (HEAP32[44634] >>> 16 | 0);
 return HEAP32[44634] + (HEAP32[44635] << 16) & 2147483647;
}

function jswrap_graphics_asBMP($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_graphics_asBMP_X(HEAP32[$1 + 12 >> 2], 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jsvArrayBufferIteratorGetIndex($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvNewFromInteger(HEAP32[HEAP32[$1 + 12 >> 2] + 48 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jsvAppendCharacter($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 jsvAppendStringBuf(HEAP32[$2 + 12 >> 2], $2 + 11 | 0, 1);
 __stack_pointer = $2 + 16 | 0;
}

function jspSetInterrupted($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 label$1: {
  if (HEAP8[$1 + 15 | 0] & 1) {
   HEAP32[86758] = HEAP32[86758] | 16;
   break label$1;
  }
  HEAP32[86758] = HEAP32[86758] & -17;
 }
}

function jspKill() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 jspSoftKill();
 HEAP32[$0 + 12 >> 2] = jsvFindOrCreateRoot();
 jsvUnRef(HEAP32[$0 + 12 >> 2]);
 jsvUnLock(HEAP32[$0 + 12 >> 2]);
 __stack_pointer = $0 + 16 | 0;
}

function gen_jswrap_crypto_SHA512($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_crypto_SHAx(HEAP32[$1 + 12 >> 2], 512);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_crypto_SHA384($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_crypto_SHAx(HEAP32[$1 + 12 >> 2], 384);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_crypto_SHA256($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_crypto_SHAx(HEAP32[$1 + 12 >> 2], 256);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_crypto_SHA224($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_crypto_SHAx(HEAP32[$1 + 12 >> 2], 224);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_SPI_find($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 $0 = jshGetDeviceObjectFor(512, 544, HEAPU8[$1 + 15 | 0]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_I2C_find($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 $0 = jshGetDeviceObjectFor(640, 688, HEAPU8[$1 + 15 | 0]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jsvIsFloat($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63) == 11;
 }
 return $2;
}

function jswrap_math_cos($0) {
 $0 = +$0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 $0 = jswrap_math_sin(HEAPF64[$1 + 8 >> 3] + 1.5707963267948966);
 __stack_pointer = $1 + 16 | 0;
 return +$0;
}

function jsvIsArray($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63) == 3;
 }
 return $2;
}

function gen_jswrap_Math_min($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = jswrap_math_minmax(HEAP32[$1 + 12 >> 2], 0);
 __stack_pointer = $1 + 16 | 0;
 return +$2;
}

function gen_jswrap_Math_max($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = jswrap_math_minmax(HEAP32[$1 + 12 >> 2], 1);
 __stack_pointer = $1 + 16 | 0;
 return +$2;
}

function float_20tflite__TfLiteRound_float__28float_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAPF32[$1 + 12 >> 2] = $0;
 $0 = round_28float_29(HEAPF32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jsvIsNull($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  $0 = HEAP32[$1 + 12 >> 2];
  $2 = ((HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) & 63) == 2;
 }
 return $2;
}

function jsfNameFromVarAndUnLock($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 __stack_pointer = $2;
 HEAP32[$2 + 12 >> 2] = $1;
 jsfNameFromVar($0, HEAP32[$2 + 12 >> 2]);
 jsvUnLock(HEAP32[$2 + 12 >> 2]);
 __stack_pointer = $2 + 16 | 0;
}

function jswrap_pipe_src_close_listener($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jswrap_pipe_close_listener(HEAP32[$1 + 12 >> 2], 120470);
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_pipe_dst_close_listener($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jswrap_pipe_close_listener(HEAP32[$1 + 12 >> 2], 117517);
 __stack_pointer = $1 + 16 | 0;
}

function jsvNewFromStringVarComplete($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvNewFromStringVar(HEAP32[$1 + 12 >> 2], 0, 2147483647);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function gen_jswrap_crypto_SHA1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_crypto_SHAx(HEAP32[$1 + 12 >> 2], 1);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function gen_jswrap_ArrayBuffer_byteLength($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 return HEAPU8[$0 + 4 | 0] << 16 | (HEAPU8[$0 + 2 | 0] | HEAPU8[$0 + 3 | 0] << 8);
}

function jswrap_json_parse($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jswrap_json_parse_ext(HEAP32[$1 + 12 >> 2], 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jswrap_espruino_setClock($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jshSetSystemClock(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function mbedtls_sha512_free($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  mbedtls_zeroize_2(HEAP32[$1 + 12 >> 2], 216);
 }
 __stack_pointer = $1 + 16 | 0;
}

function mbedtls_sha256_free($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  mbedtls_zeroize_1(HEAP32[$1 + 12 >> 2], 108);
 }
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_storage_hash($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsfHashFiles(HEAP32[$1 + 12 >> 2], 0, 64);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jswrap_banglejs_setLocked($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 _jswrap_banglejs_setLocked(HEAP8[$1 + 15 | 0] & 1, 115420);
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_banglejs_setLCDPowerController($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 jshPinOutput(6, 0);
 jshPinOutput(7, HEAP8[$1 + 15 | 0] & 1);
 __stack_pointer = $1 + 16 | 0;
}

function jsvSkipName($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvSkipNameWithParent(HEAP32[$1 + 12 >> 2], 1, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jsvNewFromString($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvNewNameOrString(HEAP32[$1 + 12 >> 2], 0);
 __stack_pointer = $1 + 16 | 0;
 return $0 | 0;
}

function jsvArrayIsEmpty($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = (jsvGetFirstChild(HEAP32[$1 + 12 >> 2]) & 65535) != 0 ^ -1;
 __stack_pointer = $1 + 16 | 0;
 return $0 & 1;
}

function jswrap_boolean_constructor($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvGetBool(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 & 1;
}

function jswrap_banglejs_setOptions($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 _jswrap_banglejs_setOptions(HEAP32[$1 + 12 >> 2], 0);
 __stack_pointer = $1 + 16 | 0;
}

function jspSoftInit() {
 HEAP32[86750] = jsvFindOrCreateRoot();
 HEAP32[86751] = jsvObjectGetChild(HEAP32[86750], 110430, 5);
 HEAP32[86758] = 1;
 HEAP32[86752] = 0;
 HEAP32[86753] = HEAP32[86750];
 HEAP32[86754] = 0;
 HEAP8[347020] = 0;
}

function double_20tflite__TfLiteRound_double__28double_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 $0 = round(HEAPF64[$1 + 8 >> 3]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function mbedtls_sha1_free($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 if (HEAP32[$1 + 12 >> 2]) {
  mbedtls_zeroize(HEAP32[$1 + 12 >> 2], 92);
 }
 __stack_pointer = $1 + 16 | 0;
}

function jsiConsolePrintStringVar($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsiConsolePrintStringVarWithNewLineChar(HEAP32[$1 + 12 >> 2], 0, 0);
 __stack_pointer = $1 + 16 | 0;
}

function gen_jswrap_Array_isArray($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvIsArray(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 & 1;
}

function tflite__internal__ContextHelper__SetNodeIndex_28int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] + 16 >> 2] = HEAP32[$2 + 8 >> 2];
}

function __memcpy($0, $1, $2) {
 var $3 = 0;
 if ($2) {
  $3 = $0;
  while (1) {
   HEAP8[$3 | 0] = HEAPU8[$1 | 0];
   $3 = $3 + 1 | 0;
   $1 = $1 + 1 | 0;
   $2 = $2 - 1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
 return $0;
}

function _jswrap_arraybufferview_sort_int($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[$2 + 12 >> 2] - HEAP32[$2 + 8 >> 2] | 0;
}

function stringToFloat($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = stringToFloatWithRadix(HEAP32[$1 + 12 >> 2], 0, 0);
 __stack_pointer = $1 + 16 | 0;
 return $2;
}

function jsvGetFloatAndUnLock($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = _jsvGetFloatAndUnLock(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $2;
}

function i2c_pin_wr0($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 jshPinSetValue(HEAPU8[$1 + 15 | 0], 0);
 jshPinSetState(HEAPU8[$1 + 15 | 0], 1);
 __stack_pointer = $1 + 16 | 0;
}

function tflite__SimpleMemoryAllocator__ResetTempAllocations_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 16 >> 2];
}

function healthStateClear($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
}

function tflite___28anonymous_20namespace_29__MicroBuiltinDataAllocator__Deallocate_28void__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
}

function legalstub$dynCall_jiji($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $0 = dynCall_jiji($0, $1, $2, $3, $4);
 $2 = i64toi32_i32$HIGH_BITS;
 setTempRet0($2 | 0);
 return $0 | 0;
}

function jslIsIDOrReservedWord() {
 var $0 = 0, $1 = 0;
 $0 = 1;
 if (HEAP16[HEAP32[44743] + 2 >> 1] != 128) {
  $1 = HEAP16[HEAP32[44743] + 2 >> 1] >= 163 ? HEAP16[HEAP32[44743] + 2 >> 1] <= 198 : $1;
  $0 = $1;
 }
 return $0 & 1;
}

function round_28float_29($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAPF32[$1 + 12 >> 2] = $0;
 $2 = round(+HEAPF32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return Math_fround($2);
}

function jsvGetIntegerAndUnLock($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = _jsvGetIntegerAndUnLock(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function get_input_offset($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = get_input_buffer_size(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 & 65535;
}

function jsvGetBoolAndUnLock($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = _jsvGetBoolAndUnLock(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0 & 1;
}

function jsvSkipOneName($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvSkipNameWithParent(HEAP32[$1 + 12 >> 2], 0, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jsvNewNameFromString($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvNewNameOrString(HEAP32[$1 + 12 >> 2], 1);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function stringToInt($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = stringToIntWithRadix(HEAP32[$1 + 12 >> 2], 0, 0, 0);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function jsiShowInputLine() {
 var $0 = 0;
 $0 = 0;
 label$1: {
  if (!(jsiEcho() & 1)) {
   break label$1;
  }
  $0 = 0;
  if (HEAP8[347076] & 1) {
   break label$1;
  }
  $0 = jsiPasswordProtected() ^ -1;
 }
 return $0 & 1;
}

function jshIsPinValid($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 $2 = HEAPU8[$1 + 15 | 0] < 48 ? (HEAPU8[Math_imul(HEAPU8[$1 + 15 | 0], 3) + 163712 | 0] & 15) != 0 : $2;
 return $2;
}

function _jswrap_graphics_freeImageInfo($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 20 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function _jswrap_arraybufferview_sort_float($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAPF64[$2 + 8 >> 3] = $0;
 HEAPF64[$2 >> 3] = $1;
 return +(HEAPF64[$2 + 8 >> 3] - HEAPF64[$2 >> 3]);
}

function terminalSetGFX($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 __memcpy(349460, HEAP32[$1 + 12 >> 2], 72);
 HEAP8[373979] = 1;
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_espruino_asUTF8($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsExceptionHere(1, 120918, 0);
 __stack_pointer = $1 + 16 | 0;
 return 0;
}

function jsvGetArrayBufferLength($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 return HEAPU8[$0 + 4 | 0] << 16 | (HEAPU8[$0 + 2 | 0] | HEAPU8[$0 + 3 | 0] << 8);
}

function jshIsPinStateDefault($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 $0 = 1;
 $0 = HEAPU8[$2 + 14 | 0] != 4 ? HEAPU8[$2 + 14 | 0] == 7 : $0;
 return $0;
}

function int_20gemmlowp__ShiftRight_int__28int_2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[$2 + 12 >> 2] >> HEAP32[$2 + 8 >> 2];
}

function ruy__profiler__ScopeLabel__ScopeLabel_char_20const___28char_20const__29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[$2 + 12 >> 2];
}

function err($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 >> 2] = HEAP32[$1 + 12 >> 2];
 jsExceptionHere(1, 115948, $1);
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorFree_16($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorFree_15($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorFree_14($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorFree_13($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorFree_12($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorFree_11($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorFree_10($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function std____2____compressed_pair_elem_TfLiteFullyConnectedParams__2c_200_2c_20false_____get_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvStringIteratorFree_9($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorFree_8($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorFree_7($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorFree_6($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorFree_5($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorFree_4($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorFree_3($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorFree_2($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorFree_1($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jshI2CWrite($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 16 | 0;
 HEAP8[$5 + 15 | 0] = $0;
 HEAP8[$5 + 14 | 0] = $1;
 HEAP32[$5 + 8 >> 2] = $2;
 HEAP32[$5 + 4 >> 2] = $3;
 HEAP8[$5 + 3 | 0] = $4;
}

function __DOUBLE_BITS_11($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
 i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
 return HEAP32[$1 >> 2];
}

function __DOUBLE_BITS_10($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
 i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
 return HEAP32[$1 >> 2];
}

function std____2____compressed_pair_elem_TfLiteDepthwiseConvParams__2c_200_2c_20false_____get_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_math_atan($0) {
 $0 = +$0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 $0 = atan(HEAPF64[$1 + 8 >> 3]);
 __stack_pointer = $1 + 16 | 0;
 return +$0;
}

function jsvHasRef($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = jsvIsStringExt(HEAP32[$1 + 12 >> 2]) ^ -1;
 __stack_pointer = $1 + 16 | 0;
 return $0 & 1;
}

function jshI2CRead($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = __stack_pointer - 16 | 0;
 HEAP8[$5 + 15 | 0] = $0;
 HEAP8[$5 + 14 | 0] = $1;
 HEAP32[$5 + 8 >> 2] = $2;
 HEAP32[$5 + 4 >> 2] = $3;
 HEAP8[$5 + 3 | 0] = $4;
}

function isWhitespace($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 $0 = isWhitespaceInline_1(HEAP8[$1 + 15 | 0]);
 __stack_pointer = $1 + 16 | 0;
 return $0 & 1;
}

function int_20gemmlowp__Sub_int__28int_2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[$2 + 12 >> 2] - HEAP32[$2 + 8 >> 2] | 0;
}

function int_20gemmlowp__Add_int__28int_2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[$2 + 12 >> 2] + HEAP32[$2 + 8 >> 2] | 0;
}

function gen_jswrap_ArrayBufferView_byteOffset($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 return HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8;
}

function _jsvGetAddressOf($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP16[$1 + 14 >> 1] = $0;
 $0 = jsvGetAddressOf(HEAPU16[$1 + 14 >> 1]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function __DOUBLE_BITS_9($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
 i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
 return HEAP32[$1 >> 2];
}

function __DOUBLE_BITS_8($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
 i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
 return HEAP32[$1 >> 2];
}

function __DOUBLE_BITS_7($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
 i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
 return HEAP32[$1 >> 2];
}

function __DOUBLE_BITS_6($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
 i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
 return HEAP32[$1 >> 2];
}

function __DOUBLE_BITS_5($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
 i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
 return HEAP32[$1 >> 2];
}

function __DOUBLE_BITS_4($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
 i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
 return HEAP32[$1 >> 2];
}

function __DOUBLE_BITS_3($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
 i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
 return HEAP32[$1 >> 2];
}

function __DOUBLE_BITS_2($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
 i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
 return HEAP32[$1 >> 2];
}

function __DOUBLE_BITS_1($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
 i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
 return HEAP32[$1 >> 2];
}

function tflite___28anonymous_20namespace_29__AllocationInfoBuilder__Finish_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2];
}

function jsvStringIteratorNext($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvStringIteratorNextInline(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorFree($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function int_20gemmlowp__BitXor_int__28int_2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[$2 + 12 >> 2] ^ HEAP32[$2 + 8 >> 2];
}

function int_20gemmlowp__BitAnd_int__28int_2c_20int_29($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[$2 + 12 >> 2] & HEAP32[$2 + 8 >> 2];
}

function jswrap_math_sin($0) {
 $0 = +$0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAPF64[$1 + 8 >> 3] = $0;
 $0 = sin(HEAPF64[$1 + 8 >> 3]);
 __stack_pointer = $1 + 16 | 0;
 return +$0;
}

function jswrap_banglejs_setLCDMode($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsExceptionHere(1, 120516, 0);
 __stack_pointer = $1 + 16 | 0;
}

function __DOUBLE_BITS($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 HEAPF64[$1 >> 3] = HEAPF64[$1 + 8 >> 3];
 i64toi32_i32$HIGH_BITS = HEAP32[$1 + 4 >> 2];
 return HEAP32[$1 >> 2];
}

function jswrap_storage_compact($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 jsfCompact(HEAP8[$1 + 15 | 0] & 1);
 __stack_pointer = $1 + 16 | 0;
}

function jswrap_espruino_compiledC($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsExceptionHere(1, 121911, 0);
 __stack_pointer = $1 + 16 | 0;
}

function jsvStringIteratorNextUTF8($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvStringIteratorNext(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorFree_18($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorFree_17($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorFree_16($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorFree_15($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorFree_14($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorFree_13($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorFree_12($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorFree_11($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorFree_10($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jshSetEventDataPin($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 HEAP32[(HEAPU8[$2 + 15 | 0] << 2) + 347164 >> 2] = HEAPU8[$2 + 14 | 0] | -256;
}

function jsvObjectIteratorFree_9($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorFree_8($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorFree_7($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorFree_6($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorFree_5($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorFree_4($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorFree_3($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorFree_2($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsvObjectIteratorFree_1($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jspSetError($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 HEAP32[86758] = HEAP32[86758] & -2 | 64;
 if (HEAP8[$1 + 15 | 0] & 1) {
  HEAP32[86758] = HEAP32[86758] | 128;
 }
}

function tflite__BuiltinDataAllocator__BuiltinDataAllocator_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = 172732;
 return $0;
}

function std____2____compressed_pair_elem_TfLiteSoftmaxParams__2c_200_2c_20false_____get_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function std____2____compressed_pair_elem_TfLiteReshapeParams__2c_200_2c_20false_____get_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_date_now() {
 return +((+(jshGetSystemTime() >>> 0) + +(i64toi32_i32$HIGH_BITS | 0) * 4294967296) / (+(jshGetTimeFromMilliseconds(1e3) >>> 0) + +(i64toi32_i32$HIGH_BITS | 0) * 4294967296) * 1e3);
}

function jsvObjectIteratorFree($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLock(HEAP32[HEAP32[$1 + 12 >> 2] >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function jsiConsolePrintChar($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 jshTransmit(HEAPU8[178544], HEAPU8[$1 + 15 | 0]);
 __stack_pointer = $1 + 16 | 0;
}

function jshPinAnalogOutput($0, $1, $2, $3) {
 var $4 = 0;
 $4 = __stack_pointer - 32 | 0;
 HEAP8[$4 + 31 | 0] = $0;
 HEAPF64[$4 + 16 >> 3] = $1;
 HEAPF64[$4 + 8 >> 3] = $2;
 HEAP32[$4 + 4 >> 2] = $3;
 return 0;
}

function isNumeric($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 $0 = isNumericInline_1(HEAP8[$1 + 15 | 0]);
 __stack_pointer = $1 + 16 | 0;
 return $0 & 1;
}

function std____2____compressed_pair_elem_TfLiteFullyConnectedParams__2c_200_2c_20false_____get_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function jslNextCh() {
 var $0 = 0;
 if (HEAP32[HEAP32[44743] + 104 >> 2]) {
  $0 = HEAPU8[HEAP32[HEAP32[44743] + 104 >> 2] + HEAP32[HEAP32[44743] + 88 >> 2] | 0];
 } else {
  $0 = 0;
 }
 return $0 << 24 >> 24;
}

function std____2____compressed_pair_elem_TfLiteDepthwiseConvParams__2c_200_2c_20false_____get_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function jshSetEventCallback($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[(HEAPU8[$2 + 15 | 0] << 2) + 347164 >> 2] = HEAP32[$2 + 8 >> 2];
}

function std____2____compressed_pair_elem_TfLitePoolParams__2c_200_2c_20false_____get_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function std____2____compressed_pair_elem_TfLiteConvParams__2c_200_2c_20false_____get_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function gen_jswrap_getTime() {
 return +((+(jshGetSystemTime() >>> 0) + +(i64toi32_i32$HIGH_BITS | 0) * 4294967296) / (+(jshGetTimeFromMilliseconds(1e3) >>> 0) + +(i64toi32_i32$HIGH_BITS | 0) * 4294967296));
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__OperatorCode____Data_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 4 | 0;
}

function jsvInit($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP16[89490] = jsvInitJsVars(1, 12e3);
 jsvSoftInit();
 __stack_pointer = $1 + 16 | 0;
}

function isAlpha($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP8[$1 + 15 | 0] = $0;
 $0 = isAlphaInline_1(HEAP8[$1 + 15 | 0]);
 __stack_pointer = $1 + 16 | 0;
 return $0 & 1;
}

function st_save_backlog($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 save_backlog(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return 0;
}

function jsvUnLock($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvUnLockInline(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function exp_28float_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAPF32[$1 + 12 >> 2] = $0;
 $0 = expf(HEAPF32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
 return $0;
}

function __DOUBLE_BITS_13($0) {
 var $1 = 0, $2 = 0;
 wasm2js_scratch_store_f64(+$0);
 $1 = wasm2js_scratch_load_i32(1) | 0;
 $2 = wasm2js_scratch_load_i32(0) | 0;
 i64toi32_i32$HIGH_BITS = $1;
 return $2;
}

function __DOUBLE_BITS_12($0) {
 var $1 = 0, $2 = 0;
 wasm2js_scratch_store_f64(+$0);
 $1 = wasm2js_scratch_load_i32(1) | 0;
 $2 = wasm2js_scratch_load_i32(0) | 0;
 i64toi32_i32$HIGH_BITS = $1;
 return $2;
}

function jshGetPinShouldStayWatched($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 return HEAP32[(HEAPU8[$1 + 15 | 0] >>> 5 << 2) + 347052 >> 2] >>> HEAPU8[$1 + 15 | 0] & 1;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__SubGraph____Data_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 4 | 0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Operator____Data_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 4 | 0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Metadata____Data_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 4 | 0;
}

function unsigned_20short_20flatbuffers__EndianScalar_unsigned_20short__28unsigned_20short_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP16[$1 + 14 >> 1] = $0;
 return HEAPU16[$1 + 14 >> 1];
}

function std____2____compressed_pair_elem_TfLiteSoftmaxParams__2c_200_2c_20false_____get_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function std____2____compressed_pair_elem_TfLiteReshapeParams__2c_200_2c_20false_____get_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function jslSetLex($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[$1 + 8 >> 2] = HEAP32[44743];
 HEAP32[44743] = HEAP32[$1 + 12 >> 2];
 return HEAP32[$1 + 8 >> 2];
}

function jslCharPosFree($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 jsvStringIteratorFree(HEAP32[$1 + 12 >> 2]);
 __stack_pointer = $1 + 16 | 0;
}

function can_take_byte($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU32[HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}

function memset($0, $1, $2) {
 var $3 = 0;
 if ($2) {
  $3 = $0;
  while (1) {
   HEAP8[$3 | 0] = $1;
   $3 = $3 + 1 | 0;
   $2 = $2 - 1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
 return $0;
}

function jsvStringIteratorGetIndex_6($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] + HEAP32[HEAP32[$1 + 12 >> 2] >> 2] | 0;
}

function jsvStringIteratorGetIndex_5($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] + HEAP32[HEAP32[$1 + 12 >> 2] >> 2] | 0;
}

function jsvStringIteratorGetIndex_4($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] + HEAP32[HEAP32[$1 + 12 >> 2] >> 2] | 0;
}

function jsvStringIteratorGetIndex_3($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] + HEAP32[HEAP32[$1 + 12 >> 2] >> 2] | 0;
}

function jsvStringIteratorGetIndex_2($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] + HEAP32[HEAP32[$1 + 12 >> 2] >> 2] | 0;
}

function jsvStringIteratorGetIndex_1($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] + HEAP32[HEAP32[$1 + 12 >> 2] >> 2] | 0;
}

function jshFlashGetFree() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[$0 + 12 >> 2] = jsvNewEmptyArray();
 __stack_pointer = $0 + 16 | 0;
 return HEAP32[$0 + 12 >> 2];
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Tensor____Data_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 4 | 0;
}

function flatbuffers__Vector_flatbuffers__Offset_tflite__Buffer____Data_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 4 | 0;
}

function mbedtls_sha512_init($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 memset(HEAP32[$1 + 12 >> 2], 0, 216);
 __stack_pointer = $1 + 16 | 0;
}

function mbedtls_sha256_init($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 memset(HEAP32[$1 + 12 >> 2], 0, 108);
 __stack_pointer = $1 + 16 | 0;
}

function int_20gemmlowp__Dup_int__28gemmlowp__FixedPointRawTypeTraits_int___ScalarRawType_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function std____2____compressed_pair_elem_TfLitePoolParams__2c_200_2c_20false_____get_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function std____2____compressed_pair_elem_TfLiteConvParams__2c_200_2c_20false_____get_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvStringIteratorHasChar_12($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}

function jsvStringIteratorHasChar_11($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}

function jsvStringIteratorHasChar_10($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}

function jsvStringIteratorGetIndex($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] + HEAP32[HEAP32[$1 + 12 >> 2] >> 2] | 0;
}

function jshGetPinStateIsManual($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 return HEAP32[(HEAPU8[$1 + 15 | 0] >>> 5 << 2) + 347044 >> 2] >>> HEAPU8[$1 + 15 | 0] & 1;
}

function jsInit() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 __stack_pointer = $0;
 HEAP32[93406] = $0 + 12;
 jshInit();
 jswHWInit();
 jsvInit(12e3);
 jsiInit(1);
 __stack_pointer = $0 + 16 | 0;
}

function jsvStringIteratorHasChar_9($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}

function jsvStringIteratorHasChar_8($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}

function jsvStringIteratorHasChar_7($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}

function jsvStringIteratorHasChar_6($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}

function jsvStringIteratorHasChar_5($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}

function jsvStringIteratorHasChar_4($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}

function jsvStringIteratorHasChar_3($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}

function jsvStringIteratorHasChar_2($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}

function jsvStringIteratorHasChar_1($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}

function tflite__GreedyMemoryPlanner__GetBufferCount_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
}

function stepcount_init() {
 AccelFilter_init(178944);
 HEAP32[44632] = 98304;
 HEAP16[89478] = 0;
 HEAP16[89479] = 0;
 HEAP16[89480] = 0;
 HEAP32[44741] = 0;
 HEAP8[178968] = 0;
 HEAP8[178969] = 0;
}

function mbedtls_sha1_init($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 __stack_pointer = $1;
 HEAP32[$1 + 12 >> 2] = $0;
 memset(HEAP32[$1 + 12 >> 2], 0, 92);
 __stack_pointer = $1 + 16 | 0;
}

function jspeBlockStart() {
 var $0 = 0;
 HEAP8[347020] = HEAPU8[347020] + 1;
 $0 = __stack_pointer - 16 | 0;
 HEAP32[$0 + 12 >> 2] = HEAP32[86754];
 HEAP32[86754] = 0;
 return HEAP32[$0 + 12 >> 2];
}

function tflite__NumDimensions_28TfLiteTensor_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[HEAP32[$1 + 12 >> 2] + 20 >> 2] >> 2];
}

function tflite__MemoryPlanner__MemoryPlanner_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = 172848;
 return $0;
}

function tflite__ErrorReporter__ErrorReporter_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = 172932;
 return $0;
}

function jsvStringIteratorHasChar($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPU32[HEAP32[$1 + 12 >> 2] >> 2] < HEAPU32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}

function jsvGetLocks($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 return (HEAPU8[$0 + 12 | 0] | HEAPU8[$0 + 13 | 0] << 8) >>> 10 & 15;
}

function unsigned_20int_20flatbuffers__EndianScalar_unsigned_20int__28unsigned_20int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function unsigned_20char_20flatbuffers__EndianScalar_unsigned_20char__28unsigned_20char_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 return HEAPU8[$1 + 15 | 0];
}

function jswrap_espruino_stopEventPropagation() {
 label$1: {
  if (HEAPU16[173534] & 8192) {
   HEAP16[173534] = HEAPU16[173534] | 16384;
   break label$1;
  }
  jsExceptionHere(1, 114859, 0);
 }
}

function tflite__SimpleMemoryAllocator__GetBufferHead_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
}

function tflite__SimpleMemoryAllocator___SimpleMemoryAllocator_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function tflite__OpResolver__OpResolver_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = 173032;
 return $0;
}

function tflite__NumOutputs_28TfLiteNode_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2] >> 2];
}

function tflite__RuntimeShape__RuntimeShape_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = 0;
 return $0;
}

function tflite__BuiltinDataAllocator___BuiltinDataAllocator_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function signed_20char_20flatbuffers__EndianScalar_signed_20char__28signed_20char_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 return HEAP8[$1 + 15 | 0];
}

function jswrap_banglejs_setBarometerPower($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return 0;
}

function tflite__SimpleMemoryAllocator__GetTail_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 20 >> 2];
}

function jswrap_banglejs_setCompassPower($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return 0;
}

function isNumericInline_1($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 $2 = HEAP8[$1 + 15 | 0] >= 48 ? HEAP8[$1 + 15 | 0] <= 57 : $2;
 return $2;
}

function tflite__NumInputs_28TfLiteNode_20const__29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[HEAP32[$1 + 12 >> 2] >> 2] >> 2];
}

function jswrap_banglejs_barometerRd($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return 0;
}

function jspeBlock() {
 if (jslMatch(123) & 1) {
  jspeBlockNoBrackets();
  if (!(HEAP32[86758] & 80)) {
   label$3: {
    if (jslMatch(125) & 1) {
     break label$3;
    }
   }
  }
 }
}

function isNumericInline($0) {
 var $1 = 0, $2 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 $2 = HEAP8[$1 + 15 | 0] >= 48 ? HEAP8[$1 + 15 | 0] <= 57 : $2;
 return $2;
}

function jswrap_banglejs_setHRMPower($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return 0;
}

function jswrap_banglejs_setGPSPower($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return 0;
}

function jswrap_banglejs_compassRd($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return 0;
}

function tflite__RuntimeShape__DimensionsCount_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
}

function flatbuffers__Vector_unsigned_20char___Data_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 4 | 0;
}

function jswrap_banglejs_accelRd($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return 0;
}

function jswrap_banglejs_hrmRd($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return 0;
}

function std____2____libcpp_numeric_limits_signed_20char_2c_20true___lowest_28_29() {
 return std____2____libcpp_numeric_limits_signed_20char_2c_20true___min_28_29() << 24 >> 24;
}

function flatbuffers__Vector_long_20long___Data_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 4 | 0;
}

function tflite__MicroAllocator___MicroAllocator_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function tflite__RuntimeShape__DimsDataUpTo5D_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 4 | 0;
}

function gen_jswrap_NRF_setAdvertising($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
}

function tflite__MemoryPlanner___MemoryPlanner_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function tflite__ErrorReporter___ErrorReporter_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_banglejs_barometerWr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
}

function gen_jswrap_NRF_setServices($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
}

function jswrap_banglejs_compassWr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
}

function flatbuffers__Vector_float___Data_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 4 | 0;
}

function jsvConvertFromUTF8Index($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[$2 + 8 >> 2];
}

function float_20flatbuffers__EndianScalar_float__28float_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF32[$1 + 12 >> 2] = $0;
 return HEAPF32[$1 + 12 >> 2];
}

function flatbuffers__Vector_char___Data_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 4 | 0;
}

function tf_get_size($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[$2 + 12 >> 2] + 560 | 0;
}

function jswrap_banglejs_accelWr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
}

function flatbuffers__Vector_int___Data_28_29_20const($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 4 | 0;
}

function tflite__OpResolver___OpResolver_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function jswrap_banglejs_setStepCount($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 HEAP32[93431] = HEAP32[$1 + 12 >> 2];
}

function jswrap_banglejs_setPollInterval_internal($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP16[$1 + 14 >> 1] = $0;
 HEAP16[186839] = HEAPU16[$1 + 14 >> 1];
}

function jsvConvertToUTF8Index($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[$2 + 8 >> 2];
}

function jswrap_banglejs_hrmWr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
}

function utilTimerIsFull() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 HEAP8[$0 + 15 | 0] = HEAPU8[349025] + 1 & 15;
 return HEAPU8[$0 + 15 | 0] == HEAPU8[349026];
}

function lcdMemLCD_getRowPtr($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_imul(HEAP32[$1 + 12 >> 2], 68) + 361506 | 0;
}

function jspSoftKill() {
 jsvUnLock(HEAP32[86752]);
 HEAP32[86752] = 0;
 jsvUnLock(HEAP32[86751]);
 HEAP32[86751] = 0;
 jsvUnLock(HEAP32[86750]);
 HEAP32[86750] = 0;
}

function std____2____libcpp_numeric_limits_float_2c_20true___lowest_28_29() {
 return Math_fround(-std____2____libcpp_numeric_limits_float_2c_20true___max_28_29());
}

function jsvObjectIteratorHasValue_18($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvObjectIteratorHasValue_17($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvObjectIteratorHasValue_16($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvObjectIteratorHasValue_15($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvObjectIteratorHasValue_14($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvObjectIteratorHasValue_13($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvObjectIteratorHasValue_12($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvObjectIteratorHasValue_11($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvObjectIteratorHasValue_10($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvObjectIteratorHasValue_9($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvObjectIteratorHasValue_8($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvObjectIteratorHasValue_7($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvObjectIteratorHasValue_6($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvObjectIteratorHasValue_5($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvObjectIteratorHasValue_4($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvObjectIteratorHasValue_3($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvObjectIteratorHasValue_2($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsvObjectIteratorHasValue_1($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function jsGfxChanged() {
 var $0 = 0;
 $0 = __stack_pointer - 16 | 0;
 HEAP8[$0 + 15 | 0] = HEAP8[349532] & 1;
 HEAP8[349532] = 0;
 return HEAP8[$0 + 15 | 0] & 1;
}

function int_20flatbuffers__EndianScalar_int__28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function std____2__numeric_limits_signed_20char___lowest_28_29() {
 return std____2____libcpp_numeric_limits_signed_20char_2c_20true___lowest_28_29() << 24 >> 24;
}

function ruy__profiler__ScopeLabel___ScopeLabel_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvGetAddressOf($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP16[$1 + 14 >> 1] = $0;
 return Math_imul(HEAPU16[$1 + 14 >> 1], 14) + 178970 | 0;
}

function jshPinAnalog($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 HEAPF64[$1 >> 3] = 0;
 return +HEAPF64[$1 >> 3];
}

function gemmlowp__FixedPoint_int_2c_2012___raw_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function jsvObjectIteratorHasValue($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] != 0;
}

function gemmlowp__FixedPoint_int_2c_205___raw_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function gemmlowp__FixedPoint_int_2c_204___raw_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function gemmlowp__FixedPoint_int_2c_202___raw_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function gemmlowp__FixedPoint_int_2c_201___raw_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function gemmlowp__FixedPoint_int_2c_200___raw_28_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}

function TfLiteIntArrayGetSizeInBytes($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return (HEAP32[$1 + 12 >> 2] << 2) + 4 | 0;
}

function __stdio_seek($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $2 = __lseek(HEAP32[$0 + 60 >> 2], $1, $2, $3);
 return $2 | 0;
}

function tflite___28anonymous_20namespace_29__MicroBuiltinDataAllocator__operator_20delete_28void__29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function int_20gemmlowp__BitNot_int__28int_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] ^ -1;
}

function jshSPISend($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 11 | 0] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 return HEAP32[$2 + 12 >> 2];
}

function jsfGetFileFlags($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] >>> 24 | 0;
}

function std____2__numeric_limits_signed_20char___min_28_29() {
 return std____2____libcpp_numeric_limits_signed_20char_2c_20true___min_28_29() << 24 >> 24;
}

function std____2__numeric_limits_signed_20char___max_28_29() {
 return std____2____libcpp_numeric_limits_signed_20char_2c_20true___max_28_29() << 24 >> 24;
}

function jsfGetFileSize($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2] & 16777215;
}

function std____2__numeric_limits_unsigned_20char___min_28_29() {
 return std____2____libcpp_numeric_limits_unsigned_20char_2c_20true___min_28_29() & 255;
}

function std____2__numeric_limits_unsigned_20char___max_28_29() {
 return std____2____libcpp_numeric_limits_unsigned_20char_2c_20true___max_28_29() & 255;
}

function tflite__BuiltinDataAllocator___BuiltinDataAllocator_28_29_1($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 abort();
}

function is_finishing($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP8[HEAP32[$1 + 12 >> 2] + 11 | 0] & 1;
}

function jshKickSoftWatchDog() {
 jswrap_banglejs_kickPollWatchdog();
 if (HEAP32[86758] & 4096) {
  HEAP32[86758] = HEAP32[86758] & -4097 | 2048;
 }
}

function jsfGetFlag($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP8[$1 + 15 | 0] = $0;
 return (HEAPU8[178976] & HEAPU8[$1 + 15 | 0]) != 0;
}

function jstReset() {
 jshUtilTimerDisable();
 HEAP8[349027] = 0;
 HEAP8[349025] = 0;
 HEAP8[349026] = 0;
 HEAP32[87360] = 0;
 HEAP32[87258] = 0;
}

function abs_28double_29($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 return Math_abs(HEAPF64[$1 + 8 >> 3]);
}

function jsfAlignAddress($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 3 & -4;
}

function __wasm_i64_udiv($0, $1, $2, $3) {
 $3 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1, $2, $3);
 return $3;
}

function tflite__MicroOpResolver___MicroOpResolver_28_29_1($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 abort();
}

function std____2__numeric_limits_short___min_28_29() {
 return std____2____libcpp_numeric_limits_short_2c_20true___min_28_29() << 16 >> 16;
}

function std____2__numeric_limits_short___max_28_29() {
 return std____2____libcpp_numeric_limits_short_2c_20true___max_28_29() << 16 >> 16;
}

function jstSystemTimeChanged($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $1;
}

function jsiInputLineCursorMoved() {
 if (HEAP32[86777]) {
  jsvStringIteratorFree_5(347096);
  HEAP32[86777] = 0;
 }
 HEAP32[44637] = -1;
}

function __wasm_rotl_i32($0, $1) {
 var $2 = 0;
 $2 = $1 & 31;
 $1 = 0 - $1 & 31;
 return (-1 >>> $2 & $0) << $2 | (-1 << $1 & $0) >>> $1;
}

function __wasm_i64_sdiv($0, $1, $2, $3) {
 $3 = _ZN17compiler_builtins3int4sdiv3Div3div17he78fc483e41d7ec7E($0, $1, $2, $3);
 return $3;
}

function tflite__MemoryPlanner___MemoryPlanner_28_29_1($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 abort();
}

function tflite__ErrorReporter___ErrorReporter_28_29_1($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 abort();
}

function jshUtilTimerStart($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $1;
}

function legalfunc$__wasi_fd_seek($0, $1, $2, $3, $4) {
 return legalimport$__wasi_fd_seek($0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0) | 0;
}

function jshSetSystemTime($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $1;
}

function __wasm_i64_mul($0, $1, $2, $3) {
 $3 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0, $1, $2, $3);
 return $3;
}

function std____2__numeric_limits_float___lowest_28_29() {
 return std____2____libcpp_numeric_limits_float_2c_20true___lowest_28_29();
}

function jsfEraseAll() {
 jsfCacheClear();
 HEAP32[86759] = 0;
 HEAP32[86760] = 0;
 return jshFlashErasePages(134217728, 8388608) & 1;
}

function jsvIsUndefined($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return !HEAP32[$1 + 12 >> 2];
}

function jshSPISetReceive($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
}

function tflite__MicroMutableOpResolver_9u___operator_20delete_28void__29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function fp_barrierf($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF32[$1 + 12 >> 2] = $0;
 return HEAPF32[$1 + 12 >> 2];
}

function tflite__OpResolver___OpResolver_28_29_1($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 abort();
}

function jshUSARTSetup($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
}

function jshPinSetState($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
}

function jsfCachePut($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
}

function jswrap_banglejs_beep_callback() {
 HEAP16[186897] = 0;
 if (HEAP32[93413] & 128) {
  _jswrap_banglejs_setVibration();
 }
}

function jshSPISend16($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
}

function std____2__numeric_limits_float___max_28_29() {
 return std____2____libcpp_numeric_limits_float_2c_20true___max_28_29();
}

function jshSPISetup($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
}

function jshI2CSetup($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
}

function fp_barrier($0) {
 var $1 = 0;
 $1 = __stack_pointer - 16 | 0;
 HEAPF64[$1 + 8 >> 3] = $0;
 return HEAPF64[$1 + 8 >> 3];
}

function tflite__GreedyMemoryPlanner__per_buffer_size_28_29() {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = 40;
 return 40;
}

function jshSPISet16($0, $1) {
 var $2 = 0;
 $2 = __stack_pointer - 16 | 0;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
}

function tflite__SimpleMemoryAllocator__operator_20delete_28void__29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function tflite__EspruinoErrorReporter__operator_20delete_28void__29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function tflite__GreedyMemoryPlanner__operator_20delete_28void__29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function std____2__numeric_limits_int___min_28_29() {
 return std____2____libcpp_numeric_limits_int_2c_20true___min_28_29();
}

function std____2__numeric_limits_int___max_28_29() {
 return std____2____libcpp_numeric_limits_int_2c_20true___max_28_29();
}

function jspDebuggerLoopIfCtrlC() {
 if (!(!(HEAP32[86758] & 4096) | (HEAP32[86758] & 63) != 1)) {
  jsiDebuggerLoop();
 }
}

function jswrap_terminal_idle() {
 if (HEAP8[373979] & 1) {
  graphicsInternalFlip();
  HEAP8[373979] = 0;
 }
 return 0;
}

function tflite__MicroAllocator__operator_20delete_28void__29($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function terminalControlCharsReset() {
 HEAP8[373980] = 0;
 HEAP8[373981] = 0;
 HEAP8[373982] = 0;
 HEAP8[373983] = 0;
}

function std____2____libcpp_numeric_limits_float_2c_20true___max_28_29() {
 return Math_fround(34028234663852886e22);
}

function jshResetPinStateIsManual() {
 HEAP32[86761] = 0;
 HEAP32[86762] = 0;
 HEAP32[86763] = 0;
 HEAP32[86764] = 0;
}

function gemmlowp__FixedPoint_int_2c_200___ScalarRawMax_28_29() {
 return std____2__numeric_limits_int___max_28_29();
}

function jswrap_espruino_fromUTF8($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 0;
}

function jswrap_espruino_isUTF8($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 0;
}

function stackAlloc($0) {
 $0 = $0 | 0;
 $0 = __stack_pointer - $0 & -16;
 __stack_pointer = $0;
 return $0 | 0;
}

function __wasi_syscall_ret($0) {
 if (!$0) {
  return 0;
 }
 HEAP32[__errno_location() >> 2] = $0;
 return -1;
}

function jsiGetHistory() {
 return jsvObjectGetChild(HEAP32[86751], HEAPU16[173534] & 8 ? 112688 : 111590, 3);
}

function jswrap_banglejs_setLCDOffset($0) {
 $0 = $0 | 0;
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function jsfGetBankEndAddress($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 142606336;
}

function jswrap_banglejs_gps_character($0) {
 HEAP8[(__stack_pointer - 16 | 0) + 15 | 0] = $0;
 return 1;
}

function dynCall_jiji($0, $1, $2, $3, $4) {
 $3 = FUNCTION_TABLE[$0 | 0]($1, $2, $3, $4) | 0;
 return $3;
}

function jswrap_terminal_init() {
 terminalControlCharsReset();
 HEAP8[373978] = 0;
 HEAP8[178600] = 21;
}

function __stdio_close($0) {
 $0 = $0 | 0;
 return __wasi_fd_close(dummy(HEAP32[$0 + 60 >> 2]) | 0) | 0;
}

function jswrap_graphics_getInstance() {
 return jsvObjectGetChildIfExists(HEAP32[86751], 111850) | 0;
}

function jspeAssignmentExpression() {
 return __jspeAssignmentExpression(jspeConditionalExpression());
}

function jsiCtrlC() {
 if (!(jsiPasswordProtected() & 1)) {
  HEAP32[86758] = HEAP32[86758] | 2048;
 }
}

function top12($0) {
 return (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2)) >>> 20 | 0;
}

function get_input_buffer_size($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 256;
}

function jslSingleChar() {
 HEAP16[HEAP32[44743] + 2 >> 1] = HEAPU8[HEAP32[44743]];
 jslGetNextCh();
}

function jshGetCurrentPinFunction($0) {
 HEAP8[(__stack_pointer - 16 | 0) + 15 | 0] = $0;
 return 0;
}

function jspeConditionalExpression() {
 return __jspeConditionalExpression(jspeBinaryExpression());
}

function jshIdle() {
 if (HEAP8[178556] & 1) {
  jsiOneSecondAfterStartup();
 }
 HEAP8[178556] = 0;
}

function __math_xflowf($0, $1) {
 return Math_fround(fp_barrierf($0 ? Math_fround(-$1) : $1) * $1);
}

function jshIsDeviceInitialised($0) {
 HEAP8[(__stack_pointer - 16 | 0) + 15 | 0] = $0;
 return 1;
}

function gen_jswrap_Bangle_showRecoveryMenu() {
 jsvUnLock(jspExecuteJSFunction(140992, 0, 0, 0));
}

function std____2____libcpp_numeric_limits_unsigned_20char_2c_20true___max_28_29() {
 return 255;
}

function get_lookahead_size($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 64;
}

function __wasm_ctz_i32($0) {
 if ($0) {
  return 31 - Math_clz32($0 - 1 ^ $0) | 0;
 }
 return 32;
}
function std____2____libcpp_numeric_limits_signed_20char_2c_20true___min_28_29() {
 return -128;
}

function jswrap_banglejs_buzz_callback() {
 HEAP8[373792] = 0;
 _jswrap_banglejs_setVibration();
}

function std____2____libcpp_numeric_limits_unsigned_20char_2c_20true___min_28_29() {
 return 0;
}

function std____2____libcpp_numeric_limits_signed_20char_2c_20true___max_28_29() {
 return 127;
}

function jswInit() {
 jswrap_graphics_init();
 jswrap_banglejs_init();
 jswrap_terminal_init();
}

function jshSetSystemClock($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
 return 0;
}

function jsfCacheFind($0, $1) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $1;
 return -1;
}

function jswrap_modules_getModuleList() {
 return jsvObjectGetChild(HEAP32[86751], 115504, 5);
}

function jswrap_banglejs_getPressure() {
 return HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2];
}

function gen_jswrap_Bangle_showLauncher() {
 jsvUnLock(jspExecuteJSFunction(137475, 0, 0, 0));
}

function flatbuffers__EndianCheck_28_29() {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = 1;
}

function std____2____libcpp_numeric_limits_int_2c_20true___min_28_29() {
 return -2147483648;
}

function gen_jswrap_Bangle_loadWidgets() {
 jsvUnLock(jspExecuteJSFunction(132121, 0, 0, 0));
}

function gen_jswrap_Bangle_drawWidgets() {
 jsvUnLock(jspExecuteJSFunction(128717, 0, 0, 0));
}

function std____2____libcpp_numeric_limits_int_2c_20true___max_28_29() {
 return 2147483647;
}

function jswKill() {
 jswrap_banglejs_kill();
 jswrap_pipe_kill();
 jswrap_waveform_kill();
}

function jspeBinaryExpression() {
 return __jspeBinaryExpression(jspeUnaryExpression(), 0);
}

function gen_jswrap_Bangle_showClock() {
 jsvUnLock(jspExecuteJSFunction(140954, 0, 0, 0));
}

function _parse_int() {
 return stringToIntWithRadix(jslGetTokenValueAsString(), 10, 0, 0);
}

function std____2____libcpp_numeric_limits_short_2c_20true___min_28_29() {
 return -32768;
}

function jshPinGetState($0) {
 HEAP8[(__stack_pointer - 16 | 0) + 15 | 0] = $0;
 return 0;
}

function __math_uflowf($0) {
 return __math_xflowf($0, Math_fround(2524354896707238e-44));
}

function __math_oflowf($0) {
 return __math_xflowf($0, Math_fround(15845632502852868e13));
}

function std____2____libcpp_numeric_limits_short_2c_20true___max_28_29() {
 return 32767;
}

function jshDelayMicroseconds($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function jshCanWatch($0) {
 HEAP8[(__stack_pointer - 16 | 0) + 15 | 0] = $0;
 return 1;
}

function jswrap_banglejs_getOptions() {
 return _jswrap_banglejs_setOptions(0, 1) | 0;
}

function jswrap_banglejs_isBacklightOn() {
 return (HEAP32[93413] & 131072) != 0 | 0;
}

function jswrap_banglejs_isBarometerOn() {
 return (HEAP32[93413] & 32768) != 0 | 0;
}

function jshEnableWatchDog($0) {
 HEAPF64[(__stack_pointer - 16 | 0) + 8 >> 3] = $0;
}

function jswrap_banglejs_isCompassOn() {
 return (HEAP32[93413] & 16384) != 0 | 0;
}

function emscripten_stack_init() {
 __stack_base = 5616896;
 __stack_end = 374016;
}

function emscripten_stack_get_free() {
 return __stack_pointer - __stack_end | 0;
}

function jswrap_banglejs_isLocked() {
 return (HEAP32[93413] & 262144) != 0 | 0;
}

function jshUSARTUnSetup($0) {
 HEAP8[(__stack_pointer - 16 | 0) + 15 | 0] = $0;
}

function gen_jswrap_LED2() {
 return jspExecuteJSFunction(128434, 0, 0, 0) | 0;
}

function gen_jswrap_LED1() {
 return jspExecuteJSFunction(128151, 0, 0, 0) | 0;
}

function jswrap_banglejs_isLCDOn() {
 return (HEAP32[93413] & 65536) != 0 | 0;
}

function jswrap_banglejs_isCharging() {
 return (jshPinGetValue(23) ^ -1) & 1;
}

function do_indexing($0) {
 HEAP32[(__stack_pointer - 16 | 0) + 12 >> 2] = $0;
}

function jswrap_banglejs_isHRMOn() {
 return (HEAP32[93413] & 4096) != 0 | 0;
}

function jswrap_banglejs_isGPSOn() {
 return (HEAP32[93413] & 8192) != 0 | 0;
}

function jshUSARTKick($0) {
 HEAP8[(__stack_pointer - 16 | 0) + 15 | 0] = $0;
}

function gen_jswrap_process_version() {
 return jsvNewFromString(125894) | 0;
}

function __math_uflow($0) {
 return __math_xflow($0, 12882297539194267e-247);
}

function jspeiClearScopes() {
 jsvUnLock(HEAP32[86752]);
 HEAP32[86752] = 0;
}

function gen_jswrap_NRF_getAddress() {
 return jsvNewFromString(122887) | 0;
}

function jswrap_serial_constructor() {
 return jspNewObject(0, 118122) | 0;
}

function jshSPIWait($0) {
 HEAP8[(__stack_pointer - 16 | 0) + 15 | 0] = $0;
}

function jsIdle() {
 HEAP32[44638] = -1;
 jsiLoop();
 return HEAP32[44638];
}

function gen_jswrap_LoopbackB() {
 return jspNewObject(125190, 118122) | 0;
}

function gen_jswrap_LoopbackA() {
 return jspNewObject(125212, 118122) | 0;
}

function abs($0) {
 var $1 = 0;
 $1 = $0 >> 31;
 return ($1 ^ $0) - $1 | 0;
}

function __math_oflow($0) {
 return __math_xflow($0, 3105036184601418e216);
}

function jswrap_espruino_getTemperature() {
 return +jshReadTemperature();
}

function gen_jswrap_Terminal() {
 return jspNewObject(118104, 118122) | 0;
}

function gen_jswrap_Math_random() {
 return +(+(rand() | 0) / 2147483647);
}

function jshHasTransmitData() {
 return HEAPU8[347146] != HEAPU8[347147];
}

function gen_jswrap_Serial1() {
 return jspNewObject(126587, 118122) | 0;
}

function gen_jswrap_NRF_getSecurityStatus() {
 return jsvNewObject() | 0;
}

function jswrap_spi_constructor() {
 return jspNewObject(0, 124621) | 0;
}

function jswrap_serial_idle() {
 return jsserialEventCallbackIdle() & 1;
}

function jswrap_i2c_constructor() {
 return jspNewObject(0, 125181) | 0;
}

function jsiPasswordProtected() {
 return (HEAPU16[173534] & 1024) != 0;
}

function gen_jswrap_TFMicroInterpreter_TFMicroInterpreter() {
 return 0;
}

function gen_jswrap_Number_MIN_VALUE() {
 return 22250738585072014e-324;
}

function jsiConsoleEraseAfterCursor() {
 jsiConsolePrintString(124524);
}

function gen_jswrap_global() {
 return jsvLockAgain(HEAP32[86750]) | 0;
}

function gen_jswrap_Number_MAX_VALUE() {
 return 17976931348623157e292;
}

function __math_xflow($0, $1) {
 return fp_barrier($0 ? -$1 : $1) * $1;
}

function jshIOEventOverflowed() {
 HEAP8[346998] = HEAPU8[346998] | 1;
}

function gen_jswrap_SPI1() {
 return jspNewObject(126635, 124621) | 0;
}

function gen_jswrap_I2C1() {
 return jspNewObject(126644, 125181) | 0;
}

function gen_jswrap_USB() {
 return jspNewObject(125208, 118122) | 0;
}

function jswrap_banglejs_softOff() {
 jsExceptionHere(1, 116090, 0);
}

function jsvIsMemoryFull() {
 return (HEAPU16[89490] != 0 ^ -1) & 1;
}

function jsiTimersChanged() {
 HEAP16[173534] = HEAPU16[173534] | 4;
}

function __cxa_pure_virtual() {
 abort_message(143807, 0);
 abort();
}

function tflite__EnumNamesBuiltinOperator_28_29() {
 return 172128;
}

function jshInitDevices() {
 HEAP8[347150] = 8;
 jshResetDevices();
}

function jshHasEvents() {
 return HEAPU8[347148] != HEAPU8[347149];
}

function jsfCreateFileTable() {
 jsfBankCreateFileTable(134217728);
}

function gen_jswrap_Number_NEGATIVE_INFINITY() {
 return -infinity;
}

function jswrap_banglejs_kickPollWatchdog() {
 HEAP16[186840] = 0;
}

function jsvNewFromEmptyString_14() {
 return jsvNewWithFlags(28);
}

function jsvNewFromEmptyString_13() {
 return jsvNewWithFlags(28);
}

function jsvNewFromEmptyString_12() {
 return jsvNewWithFlags(28);
}

function jsvNewFromEmptyString_11() {
 return jsvNewWithFlags(28);
}

function jsvNewFromEmptyString_10() {
 return jsvNewWithFlags(28);
}

function jspSetNoExecute() {
 HEAP32[86758] = HEAP32[86758] & -64;
}

function gen_jswrap_Number_POSITIVE_INFINITY() {
 return infinity;
}

function gen_jswrap_ArrayBufferView_ArrayBufferView() {
 return 0;
}

function jsvNewFromEmptyString_9() {
 return jsvNewWithFlags(28);
}

function jsvNewFromEmptyString_8() {
 return jsvNewWithFlags(28);
}

function jsvNewFromEmptyString_7() {
 return jsvNewWithFlags(28);
}

function jsvNewFromEmptyString_6() {
 return jsvNewWithFlags(28);
}

function jsvNewFromEmptyString_5() {
 return jsvNewWithFlags(28);
}

function jsvNewFromEmptyString_4() {
 return jsvNewWithFlags(28);
}

function jsvNewFromEmptyString_3() {
 return jsvNewWithFlags(28);
}

function jsvNewFromEmptyString_2() {
 return jsvNewWithFlags(28);
}

function jsvNewFromEmptyString_1() {
 return jsvNewWithFlags(28);
}

function stackRestore($0) {
 $0 = $0 | 0;
 __stack_pointer = $0;
}

function jswrap_espruino_dumpTimers() {
 jstDumpUtilityTimers();
}

function jswrap_banglejs_off() {
 jsExceptionHere(1, 116090, 0);
}

function jswrap_banglejs_getStepCount() {
 return HEAP32[93431];
}

function jspIsInterrupted() {
 return (HEAP32[86758] & 16) != 0;
}

function emscripten_stack_get_base() {
 return __stack_base | 0;
}

function jswrap_espruino_reboot() {
 jswrap_interface_reset(0);
}

function jsvNewFromEmptyString() {
 return jsvNewWithFlags(28);
}

function gen_jswrap_Math_SQRT1_2() {
 return .7071067811865476;
}

function gen_jswrap_E_getAnalogVRef() {
 return +jshReadVRef();
}

function jspromise_create() {
 return jspNewObject(0, 119742);
}

function jsfIsNameEqual($0, $1) {
 return !memcmp($0, $1, 28);
}

function gen_jswrap_Math_SQRT2() {
 return 1.4142135623730951;
}

function gen_jswrap_Math_LOG2E() {
 return 1.4426950408889634;
}

function gen_jswrap_Math_LOG10E() {
 return .4342944819032518;
}

function emscripten_stack_get_end() {
 return __stack_end | 0;
}

function jswrap_graphics_idle() {
 graphicsIdle();
 return 0;
}

function jswrap_espruino_kickWatchdog() {
 jshKickWatchDog();
}

function jstUtilTimerIsRunning() {
 return HEAP8[349027] & 1;
}

function jspHasError() {
 return (HEAP32[86758] & 112) != 0;
}

function jslPreload() {
 jslGetNextCh();
 jslGetNextToken();
}

function gen_jswrap_Math_LN10() {
 return 2.302585092994046;
}

function jswrap_storage_optimise() {
 jsfCreateFileTable();
}

function jsfSaveToFlash() {
 jsiConsolePrintString(145513);
}

function gen_jswrap_Math_LN2() {
 return .6931471805599453;
}

function graphicsInternalFlip() {
 lcdMemLCD_flip(349460);
}

function gen_jswrap_StorageFile_StorageFile() {
 return 0;
}

function gen_jswrap_Math_PI() {
 return 3.141592653589793;
}

function jsvNewEmptyArray() {
 return jsvNewWithFlags(3);
}

function jstGetUtilTimerOffset() {
 return HEAP32[87360];
}

function gen_jswrap_Math_E() {
 return 2.718281828459045;
}

function strcpy($0, $1) {
 __stpcpy($0, $1);
 return $0;
}

function jsiGetConsoleDevice() {
 return HEAPU8[178544];
}

function gen_jswrap_tensorflow_tensorflow() {
 return 0;
}

function gen_jswrap_heatshrink_heatshrink() {
 return 0;
}

function floor($0) {
 $0 = +$0;
 return +Math_floor($0);
}

function __wasm_call_ctors() {
 emscripten_stack_init();
}

function __ofl_lock() {
 __lock(373992);
 return 373996;
}

function jsKill() {
 jsiKill();
 jsvKill();
 jshKill();
}

function jswGetBuiltInLibraryNames() {
 return 120256;
}

function gen_jswrap_Bluetooth_Bluetooth() {
 return 0;
}

function ceil($0) {
 $0 = +$0;
 return +Math_ceil($0);
}

function jsvNewObject() {
 return jsvNewWithFlags(5);
}

function jsvNewNull_1() {
 return jsvNewWithFlags(2);
}

function fabs($0) {
 $0 = +$0;
 return +Math_abs($0);
}

function jswrap_storage_eraseAll() {
 jsfEraseAll();
}

function jsiEcho() {
 return !(HEAPU16[173534] & 3);
}

function gen_jswrap_Graphics_Graphics() {
 return 0;
}

function abort_message($0, $1) {
 abort();
 abort();
}

function stackSave() {
 return __stack_pointer | 0;
}

function jswrap_banglejs_getBattery() {
 return 50;
}

function jsvNewNull() {
 return jsvNewWithFlags(2);
}

function jshGetRandomNumber() {
 return rand() | 0;
}

function jswrap_espruino_getBattery() {
 return 0;
}

function jswrap_banglejs_getCompass() {
 return 0;
}

function jsvSoftInit() {
 jsvCreateEmptyVarList();
}

function gen_jswrap_process_process() {
 return 0;
}

function gen_jswrap_console_console() {
 return 0;
}

function gen_jswrap_Storage_Storage() {
 return 0;
}

function gen_jswrap_Modules_Modules() {
 return 0;
}

function gen_jswrap_Infinity() {
 return infinity;
}

function jswrap_banglejs_getGPSFix() {
 return 0;
}

function jswHWInit() {
 jswrap_banglejs_hwinit();
}

function jsvSoftKill() {
 jsvClearEmptyVarList();
}

function gen_jswrap_dump() {
 jsiDumpState(7, 0);
}

function jsiKill() {
 jsiSoftKill();
 jspKill();
}

function gen_jswrap_crypto_crypto() {
 return 0;
}

function gen_jswrap_Bangle_Bangle() {
 return 0;
}

function jshIsUSBSERIALConnected() {
 return 1;
}

function gen_jswrap_Number_NaN() {
 return nan;
}

function gen_jswrap_Flash_Flash() {
 return 0;
}

function __errno_location() {
 return 374004;
}

function jsvGetMemoryTotal() {
 return 12e3;
}

function jshReadTemperature() {
 return nan;
}

function gen_jswrap_Math_Math() {
 return 0;
}

function gen_jswrap_JSON_JSON() {
 return 0;
}

function __ofl_unlock() {
 __unlock(373992);
}

function gen_jswrap_VIBRATE() {
 return 19;
}

function gen_jswrap_Bluetooth_setConsole() {}

function gen_jswrap_NRF_NRF() {
 return 0;
}

function jsuGetFreeStack() {
 return 1e6;
}

function jshReset() {
 jshResetDevices();
}

function jswrap_banglejs_resetCompass() {}

function jshIsInInterrupt() {
 return 0;
}

function gen_jswrap_fs_fs() {
 return 0;
}

function gen_jswrap_NaN() {
 return nan;
}

function gen_jswrap_BTN1() {
 return 17;
}

function gen_jswrap_HIGH() {
 return 1;
}

function gen_jswrap_BTN() {
 return 17;
}

function gen_jswrap_LOW() {
 return 0;
}

function gen_jswrap_E_E() {
 return 0;
}

function jshReadVRef() {
 return nan;
}

function jswrap_banglejs_postInit() {}

function jspInit() {
 jspSoftInit();
}

function __lockfile($0) {
 return 1;
}

function jsfLoadStateFromFlash() {}

function dummy($0) {
 return $0;
}

function jshUtilTimerDisable() {}

function jsfCacheClearFile($0) {}

function jshKickWatchDog() {}

function jshInterruptOff() {}

function jshInterruptOn() {}

function __unlockfile($0) {}

function jsfCacheClear() {}

function graphicsIdle() {}

function __unlock($0) {}

function __lock($0) {}

function jsvKill() {}

function jshKill() {}


// EMSCRIPTEN_END_FUNCS

;
 bufferView = HEAPU8;
 initActiveSegments(env);
 var FUNCTION_TABLE = Table([null, jswrap_object_toString, jsvStringIteratorPrintfCallback, jsvIsInternalFunctionKey, jsvIsInternalObjectKey, jsvIterateCallbackCountCb, jsvIterateCallbackToBytesCb, vcbprintf_callback_jsiConsolePrintString, espruino_snprintf_cb, jswrap_eval, gen_jswrap_Graphics_Graphics, jswrap_dataview_constructor, jswrap_date_constructor, jswrap_error_constructor, jswrap_syntaxerror_constructor, jswrap_typeerror_constructor, jswrap_internalerror_constructor, jswrap_referenceerror_constructor, jswrap_regexp_constructor, jswrap_onewire_constructor, jswrap_promise_constructor, jswrap_serial_constructor, gen_jswrap_StorageFile_StorageFile, jswrap_spi_constructor, jswrap_i2c_constructor, jswrap_waveform_constructor, gen_jswrap_TFMicroInterpreter_TFMicroInterpreter, jswrap_pin_constructor, gen_jswrap_Bangle_Bangle, gen_jswrap_E_E, gen_jswrap_NRF_NRF, gen_jswrap_Bluetooth_Bluetooth, jswrap_array_constructor, gen_jswrap_console_console, gen_jswrap_JSON_JSON, jswrap_number_constructor, jswrap_object_constructor, jswrap_string_constructor, gen_jswrap_Modules_Modules, gen_jswrap_Math_Math, gen_jswrap_Flash_Flash, gen_jswrap_fs_fs, gen_jswrap_process_process, gen_jswrap_Storage_Storage, gen_jswrap_heatshrink_heatshrink, gen_jswrap_crypto_crypto, gen_jswrap_tensorflow_tensorflow, jswrap_arraybuffer_constructor, gen_jswrap_ArrayBufferView_ArrayBufferView, jswrap_function_constructor, jswrap_pin_analog, jswrap_pin_getInfo, jswrap_pin_getMode, jswrap_pin_mode, jswrap_pin_pulse, jswrap_pin_pwm, jswrap_pin_read, jswrap_pin_reset, jswrap_pin_set, jswrap_pin_toggle, jswrap_pin_write, jswrap_pin_writeAtTime, gen_jswrap_BTN, gen_jswrap_BTN1, jswrap_boolean_constructor, gen_jswrap_Float32Array_Float32Array, gen_jswrap_Float64Array_Float64Array, gen_jswrap_HIGH, gen_jswrap_I2C1, gen_jswrap_Infinity, gen_jswrap_Int16Array_Int16Array, gen_jswrap_Int32Array_Int32Array, gen_jswrap_Int8Array_Int8Array, gen_jswrap_LED1, gen_jswrap_LED2, gen_jswrap_LOW, gen_jswrap_LoopbackA, gen_jswrap_LoopbackB, gen_jswrap_NaN, gen_jswrap_SPI1, gen_jswrap_Serial1, gen_jswrap_Terminal, gen_jswrap_USB, gen_jswrap_Uint16Array_Uint16Array, gen_jswrap_Uint24Array_Uint24Array, gen_jswrap_Uint32Array_Uint32Array, gen_jswrap_Uint8Array_Uint8Array, gen_jswrap_Uint8ClampedArray_Uint8ClampedArray, gen_jswrap_VIBRATE, jshPinAnalog, jswrap_io_analogWrite, jswrap_arguments, jswrap_atob, jswrap_btoa, jswrap_interface_changeInterval, jswrap_interface_clearInterval, jswrap_interface_clearTimeout, jswrap_interface_clearWatch, jswrap_decodeURIComponent, jswrap_io_digitalPulse, jswrap_io_digitalRead, jswrap_io_digitalWrite, gen_jswrap_dump, jswrap_interface_echo, jswrap_interface_edit, jswrap_encodeURIComponent, jswrap_io_getPinMode, jswrap_interface_getSerial, gen_jswrap_getTime, gen_jswrap_global, jswrap_isFinite, jswrap_isNaN, jswrap_interface_load, jswrap_parseFloat, jswrap_parseInt, gen_jswrap_peek16, gen_jswrap_peek32, gen_jswrap_peek8, jswrap_io_pinMode, gen_jswrap_poke16, gen_jswrap_poke32, gen_jswrap_poke8, jswrap_print, jswrap_require, jswrap_interface_reset, jswrap_interface_setBusyIndicator, jswrap_interface_setInterval, jswrap_interface_setSleepIndicator, jswrap_interactive_setTime, jswrap_interface_setTimeout, jswrap_interface_setWatch, jswrap_io_shiftOut, jswrap_trace, jswrap_banglejs_accelRd, jswrap_banglejs_accelWr, jswrap_banglejs_appRect, jswrap_banglejs_barometerRd, jswrap_banglejs_barometerWr, jswrap_banglejs_beep, jswrap_banglejs_buzz, jswrap_banglejs_compassRd, jswrap_banglejs_compassWr, jswrap_banglejs_dbg, gen_jswrap_Bangle_drawWidgets, jswrap_banglejs_factoryReset, jswrap_banglejs_getAccel, jswrap_banglejs_getCompass, jswrap_banglejs_getGPSFix, jswrap_banglejs_getHealthStatus, jswrap_banglejs_getLCDMode, jswrap_banglejs_getLogo, jswrap_banglejs_getOptions, jswrap_banglejs_getPressure, jswrap_banglejs_getStepCount, jswrap_banglejs_hrmRd, jswrap_banglejs_hrmWr, jswrap_banglejs_isBacklightOn, jswrap_banglejs_isBarometerOn, jswrap_banglejs_isCharging, jswrap_banglejs_isCompassOn, jswrap_banglejs_isGPSOn, jswrap_banglejs_isHRMOn, jswrap_banglejs_isLCDOn, jswrap_banglejs_isLocked, jswrap_banglejs_lcdWr, gen_jswrap_Bangle_load, gen_jswrap_Bangle_loadWidgets, jswrap_banglejs_off, jswrap_banglejs_project, jswrap_banglejs_resetCompass, jswrap_banglejs_setLCDPowerBacklight, jswrap_banglejs_setBarometerPower, jswrap_banglejs_setCompassPower, jswrap_banglejs_setGPSPower, jswrap_banglejs_setHRMPower, jswrap_banglejs_setLCDBrightness, jswrap_banglejs_setLCDMode, jswrap_banglejs_setLCDOffset, jswrap_banglejs_setLCDOverlay, jswrap_banglejs_setLCDPower, jswrap_banglejs_setLCDTimeout, jswrap_banglejs_setLocked, jswrap_banglejs_setOptions, jswrap_banglejs_setPollInterval, jswrap_banglejs_setStepCount, gen_jswrap_Bangle_setUI, gen_jswrap_Bangle_showClock, gen_jswrap_Bangle_showLauncher, gen_jswrap_Bangle_showRecoveryMenu, jswrap_banglejs_softOff, jswrap_espruino_CRC32, jswrap_espruino_FFT, jswrap_espruino_HSBtoRGB, jswrap_espruino_asUTF8, jswrap_espruino_asm, jswrap_espruino_clip, jswrap_espruino_compiledC, jswrap_espruino_convolve, jswrap_espruino_decodeUTF8, jsvDefragment, jswrap_e_dumpFragmentation, jswrap_e_dumpStr, jswrap_espruino_dumpTimers, jswrap_e_dumpVariables, jswrap_espruino_enableWatchdog, jswrap_espruino_fromUTF8, jswrap_espruino_getAddressOf, gen_jswrap_E_getAnalogVRef, jswrap_espruino_getBattery, jswrap_espruino_getConsole, jswrap_espruino_getErrorFlags, jsfGetFlags, jswrap_espruino_getSizeOf, jswrap_espruino_getTemperature, jshGetRandomNumber, jswrap_espruino_isUTF8, jswrap_espruino_kickWatchdog, jswrap_espruino_lockConsole, jswrap_espruino_lookupNoCase, jswrap_espruino_mapInPlace, jswrap_espruino_memoryArea, jswrap_espruino_memoryMap, jswrap_espruino_nativeCall, jswrap_pipe, jswrap_espruino_reboot, jswrap_espruino_reverseByte, jswrap_espruino_setBootCode, jswrap_espruino_setClock, jswrap_espruino_setConsole, jswrap_espruino_setDST, jsfSetFlags, jswrap_espruino_setPassword, jswrap_espruino_setTimeZone, gen_jswrap_E_showAlert, gen_jswrap_E_showMenu, gen_jswrap_E_showMessage, gen_jswrap_E_showPrompt, gen_jswrap_E_showScroller, srand, jswrap_espruino_stopEventPropagation, jswrap_espruino_sum, jswrap_espruino_toArrayBuffer, jswrap_espruino_toFlatString, jswrap_espruino_toJS, jswrap_espruino_toString, jswrap_espruino_toUint8Array, jswrap_espruino_variance, jswrap_graphics_asBMP, jswrap_graphics_asImage, jswrap_graphics_asURL, jswrap_graphics_blendColor, jswrap_graphics_blit, jswrap_graphics_clear, jswrap_graphics_clearRect, jswrap_graphics_drawCircle, jswrap_graphics_drawCircleAA, jswrap_graphics_drawEllipse, jswrap_graphics_drawImage, jswrap_graphics_drawImages, jswrap_graphics_drawLine, jswrap_graphics_drawLineAA, gen_jswrap_Graphics_drawPoly, gen_jswrap_Graphics_drawPolyAA, jswrap_graphics_drawRect, jswrap_graphics_drawString, jswrap_graphics_dump, jswrap_graphics_fillCircle, jswrap_graphics_fillEllipse, gen_jswrap_Graphics_fillPoly, gen_jswrap_Graphics_fillPolyAA, jswrap_graphics_fillRect, jswrap_graphics_floodFill, jswrap_graphics_getBPP, gen_jswrap_Graphics_getBgColor, gen_jswrap_Graphics_getColor, jswrap_graphics_getFont, jswrap_graphics_getFontHeight, jswrap_graphics_getFonts, gen_jswrap_Graphics_getHeight, jswrap_graphics_getModified, jswrap_graphics_getPixel, jswrap_graphics_getVectorFontPolys, gen_jswrap_Graphics_getWidth, jswrap_graphics_imageMetrics, jswrap_graphics_lineTo, jswrap_graphics_moveTo, jswrap_graphics_quadraticBezier, jswrap_graphics_reset, jswrap_graphics_scroll, gen_jswrap_Graphics_setBgColor, jswrap_graphics_setClipRect, gen_jswrap_Graphics_setColor, jswrap_graphics_setFont, jswrap_graphics_setFont12x20, jswrap_graphics_setFont6x15, jswrap_graphics_setFontAlign, gen_jswrap_Graphics_setFontBitmap, jswrap_graphics_setFontCustom, jswrap_graphics_setFontPBF, gen_jswrap_Graphics_setFontVector, jswrap_graphics_setPixel, jswrap_graphics_setRotation, jswrap_graphics_setTheme, jswrap_graphics_stringMetrics, jswrap_graphics_stringWidth, jswrap_graphics_theme, jswrap_graphics_toColor, jswrap_graphics_transformVertices, jswrap_graphics_wrapString, gen_jswrap_NRF_getAddress, gen_jswrap_NRF_getSecurityStatus, gen_jswrap_NRF_setAdvertising, gen_jswrap_NRF_setServices, gen_jswrap_Bluetooth_setConsole, jswrap_array_concat, jswrap_array_every, jswrap_array_fill, jswrap_array_filter, jswrap_array_find, jswrap_array_findIndex, jswrap_array_forEach, jswrap_array_includes, jswrap_array_indexOf, jswrap_array_join, jswrap_object_length, jswrap_array_map, gen_jswrap_Array_pop, jswrap_array_push, jswrap_array_reduce, jswrap_array_reverse, jswrap_array_shift, jswrap_array_slice, jswrap_array_some, jswrap_array_sort, jswrap_array_splice, jswrap_array_unshift, gen_jswrap_Array_isArray, gen_jswrap_ArrayBuffer_byteLength, gen_jswrap_ArrayBufferView_buffer, gen_jswrap_ArrayBufferView_byteLength, gen_jswrap_ArrayBufferView_byteOffset, jswrap_arraybufferview_map, jswrap_arraybufferview_set, jswrap_arraybufferview_sort, jswrap_arraybufferview_subarray, gen_jswrap_DataView_getFloat32, gen_jswrap_DataView_getFloat64, gen_jswrap_DataView_getInt16, gen_jswrap_DataView_getInt32, gen_jswrap_DataView_getInt8, gen_jswrap_DataView_getUint16, gen_jswrap_DataView_getUint32, gen_jswrap_DataView_getUint8, gen_jswrap_DataView_setFloat32, gen_jswrap_DataView_setFloat64, gen_jswrap_DataView_setInt16, gen_jswrap_DataView_setInt32, gen_jswrap_DataView_setInt8, gen_jswrap_DataView_setUint16, gen_jswrap_DataView_setUint32, gen_jswrap_DataView_setUint8, jswrap_date_now, jswrap_date_parse, jswrap_date_getDate, jswrap_date_getDay, jswrap_date_getFullYear, jswrap_date_getHours, jswrap_date_getIsDST, jswrap_date_getMilliseconds, jswrap_date_getMinutes, jswrap_date_getMonth, jswrap_date_getSeconds, jswrap_date_getTime, jswrap_date_getTimezoneOffset, jswrap_date_setDate, jswrap_date_setFullYear, jswrap_date_setHours, jswrap_date_setMilliseconds, jswrap_date_setMinutes, jswrap_date_setMonth, jswrap_date_setSeconds, jswrap_date_setTime, jswrap_date_toISOString, jswrap_date_toLocalISOString, jswrap_date_toString, jswrap_date_toUTCString, jswrap_error_toString, jswrap_json_parse, jswrap_json_stringify, gen_jswrap_Number_MAX_VALUE, gen_jswrap_Number_MIN_VALUE, gen_jswrap_Number_NEGATIVE_INFINITY, gen_jswrap_Number_NaN, gen_jswrap_Number_POSITIVE_INFINITY, jswrap_number_toFixed, jswrap_object_on, jswrap_object_clone, jswrap_object_emit, jswrap_object_hasOwnProperty, jswrap_object_prependListener, jswrap_object_removeAllListeners, jswrap_object_removeListener, jswrap_object_valueOf, jswrap_object_assign, jswrap_object_create, jswrap_object_defineProperties, jswrap_object_defineProperty, gen_jswrap_Object_entries, jswrap_object_fromEntries, jswrap_object_getOwnPropertyDescriptor, jswrap_object_getOwnPropertyDescriptors, gen_jswrap_Object_getOwnPropertyNames, jswrap_object_getPrototypeOf, gen_jswrap_Object_keys, jswrap_object_setPrototypeOf, gen_jswrap_Object_values, jswrap_function_apply_or_call, jswrap_function_bind, jswrap_function_replaceWith, jswrap_regexp_exec, jswrap_regexp_test, jswrap_string_charAt, jswrap_string_charCodeAt, jswrap_string_concat, jswrap_string_endsWith, gen_jswrap_String_includes, gen_jswrap_String_indexOf, gen_jswrap_String_lastIndexOf, jswrap_string_match, gen_jswrap_String_padEnd, gen_jswrap_String_padStart, gen_jswrap_String_removeAccents, jswrap_string_repeat, jswrap_string_replace, jswrap_string_slice, jswrap_string_split, jswrap_string_startsWith, jswrap_string_substr, jswrap_string_substring, gen_jswrap_String_toLowerCase, gen_jswrap_String_toUpperCase, jswrap_string_trim, jswrap_string_fromCharCode, jswrap_modules_addCached, jswrap_modules_getCached, jswrap_modules_removeAllCached, jswrap_modules_removeCached, gen_jswrap_Math_E, gen_jswrap_Math_LN10, gen_jswrap_Math_LN2, gen_jswrap_Math_LOG10E, gen_jswrap_Math_LOG2E, gen_jswrap_Math_PI, gen_jswrap_Math_SQRT1_2, gen_jswrap_Math_SQRT2, fabs, gen_jswrap_Math_acos, jswrap_math_asin, jswrap_math_atan, jswrap_math_atan2, ceil, jswrap_math_clip, jswrap_math_cos, exp, floor, log, gen_jswrap_Math_max, gen_jswrap_Math_min, jswrap_math_pow, gen_jswrap_Math_random, jswrap_math_round, jswrap_math_sign, jswrap_math_sin, jswrap_math_sqrt, gen_jswrap_Math_tan, wrapAround, jswrap_flash_erasePage, jswrap_flash_getFree, jswrap_flash_getPage, jswrap_flash_read, jswrap_flash_write, jswrap_process_env, jswrap_process_memory, gen_jswrap_process_version, jswrap_onewire_read, jswrap_onewire_reset, jswrap_onewire_search, jswrap_onewire_select, jswrap_onewire_skip, jswrap_onewire_write, jswrap_promise_all, jswrap_promise_reject, jswrap_promise_resolve, jswrap_promise_catch, jswrap_promise_then, gen_jswrap_Serial_find, jswrap_stream_available, jswrap_serial_flush, jswrap_serial_inject, jswrap_serial_print, jswrap_serial_println, jswrap_stream_read, jswrap_serial_setConsole, jswrap_serial_setup, jswrap_serial_unsetup, jswrap_serial_write, jswrap_storage_compact, jswrap_storage_erase, jswrap_storage_eraseAll, jswrap_storage_getFree, jswrap_storage_getStats, jswrap_storage_hash, jswrap_storage_list, jswrap_storage_open, jswrap_storage_optimise, jswrap_storage_read, jswrap_storage_readArrayBuffer, jswrap_storage_readJSON, jswrap_storage_write, jswrap_storage_writeJSON, jswrap_storagefile_erase, jswrap_storagefile_getLength, jswrap_storagefile_read, jswrap_storagefile_readLine, jswrap_storagefile_write, gen_jswrap_SPI_find, jswrap_spi_send, jswrap_spi_send4bit, jswrap_spi_send8bit, jswrap_spi_setup, jswrap_spi_write, gen_jswrap_I2C_find, jswrap_i2c_readFrom, jswrap_i2c_readReg, jswrap_i2c_setup, jswrap_i2c_writeTo, jswrap_waveform_startInput, jswrap_waveform_startOutput, jswrap_waveform_stop, jswrap_heatshrink_compress, jswrap_heatshrink_decompress, jswrap_graphics_createArrayBuffer, jswrap_graphics_createCallback, jswrap_graphics_createImage, jswrap_graphics_getInstance, gen_jswrap_crypto_SHA1, gen_jswrap_crypto_SHA224, gen_jswrap_crypto_SHA256, gen_jswrap_crypto_SHA384, gen_jswrap_crypto_SHA512, jswrap_tensorflow_create, jswrap_tfmicrointerpreter_getInput, jswrap_tfmicrointerpreter_getOutput, jswrap_tfmicrointerpreter_invoke, jsiConsolePrintString, jsiTabComplete_findCommon, jsiTabComplete_printCommon, jstPinTaskChecker, jstBufferTaskChecker, jsserialHardwareFunc, jsserialSoftwareFunc, jsserialEventCallback, jsspiHardwareFunc, jsspiFastSoftwareFunc, jsspiSoftwareFunc, heatshrink_ptr_output_cb, graphicsFallbackSetPixel, graphicsFallbackGetPixel, graphicsFallbackFillRect, graphicsFallbackBlit, graphicsFallbackScroll, graphicsSetPixel, lcdSetPixel_ArrayBuffer_flat1, lcdGetPixel_ArrayBuffer_flat, lcdFillRect_ArrayBuffer_flat1, lcdSetPixel_ArrayBuffer_flat8, lcdGetPixel_ArrayBuffer_flat8, lcdFillRect_ArrayBuffer_flat8, lcdScroll_ArrayBuffer_flat8, lcdSetPixel_ArrayBuffer_flat, lcdFillRect_ArrayBuffer_flat, lcdSetPixel_ArrayBuffer, lcdGetPixel_ArrayBuffer, lcdFillRect_ArrayBuffer, lcdSetPixel_JS, lcdFillRect_JS, lcdMemLCD_setPixel, lcdMemLCD_fillRect, lcdMemLCD_getPixel, lcdMemLCD_scroll, lcd_flip, btn1Handler, jswrap_banglejs_postInit, jswrap_banglejs_beep_callback, jswrap_banglejs_buzz_callback, _jswrap_arraybufferview_sort_float, _jswrap_arraybufferview_sort_int, jsvArrayAddUnique, _jswrap_object_entries_cb, _jswrap_object_values_cb, _jswrap_espruino_toString_char, _jswrap_espruino_toUint8Array_char, jswrap_io_shiftOutCallback, jswrap_pipe_src_close_listener, jswrap_pipe_drain_listener, jswrap_pipe_dst_close_listener, jsvLockAgainSafe, jsvUnLock, jsvSkipName, jsvMathsOp, jsvNewWithFlags, jsvNewFromFloat, jsvNewFromInteger, jsvNewFromString, jsvNewFromBool, jsvGetFloat, jsvGetInteger, jsvGetBool, jsvReplaceWith, jspeFunctionCall, jspGetNamedVariable, jspGetNamedField, jspGetVarNamedField, _jswrap_onewire_write_cb, _jswrap_promise_queueresolve, _jswrap_promise_queuereject, _jswrap_promise_resolve, _jswrap_promise_reject, jswrap_promise_all_reject, jswrap_promise_all_resolve, _jswrap_serial_inject_cb, jswrap_spi_send_cb, jswrap_spi_write_cb, heatshrink_var_input_cb, heatshrink_var_output_cb, jswrap_graphics_getFonts_callback, graphicsFillPoly, _jswrap_graphics_getVectorFontPolys_cb, graphicsDrawLineAA, graphicsDrawLine, tflite__SimpleMemoryAllocator__SimpleMemoryAllocator_28tflite__ErrorReporter__2c_20unsigned_20char__2c_20unsigned_20long_29, tflite__SimpleMemoryAllocator___SimpleMemoryAllocator_28_29, tflite__SimpleMemoryAllocator___SimpleMemoryAllocator_28_29_1, tflite__SimpleMemoryAllocator__EnsureHeadSize_28unsigned_20long_2c_20unsigned_20long_29, tflite__SimpleMemoryAllocator__AllocateFromTail_28unsigned_20long_2c_20unsigned_20long_29, tflite__SimpleMemoryAllocator__AllocateTemp_28unsigned_20long_2c_20unsigned_20long_29, tflite__SimpleMemoryAllocator__ResetTempAllocations_28_29, tflite__internal__ContextHelper__ContextHelper_28tflite__ErrorReporter__2c_20tflite__MicroAllocator__2c_20tflite__Model_20const__29, tflite__internal__ContextHelper__ReportOpError_28TfLiteContext__2c_20char_20const__2c_20____29, tflite__internal__ContextHelper__GetTensor_28TfLiteContext_20const__2c_20int_29, tflite__internal__ContextHelper__GetEvalTensor_28TfLiteContext_20const__2c_20int_29, tflite__internal__ContextHelper__AllocatePersistentBuffer_28TfLiteContext__2c_20unsigned_20long_29, tflite__internal__ContextHelper__RequestScratchBufferInArena_28TfLiteContext__2c_20unsigned_20long_2c_20int__29, tflite__internal__ContextHelper__GetScratchBuffer_28TfLiteContext__2c_20int_29, tflite__MicroAllocator___MicroAllocator_28_29, tflite__MicroAllocator__MicroAllocator_28tflite__SimpleMemoryAllocator__2c_20tflite__ErrorReporter__29, tflite__MicroAllocator__AllocatePersistentTfLiteTensor_28tflite__Model_20const__2c_20TfLiteEvalTensor__2c_20int_29, tflite__MicroAllocator__AllocateTempTfLiteTensor_28tflite__Model_20const__2c_20TfLiteEvalTensor__2c_20int_29, tflite__MicroAllocator__ResetTempAllocations_28_29, tflite__MicroAllocator___MicroAllocator_28_29_1, tflite__MicroAllocator__AllocateNodeAndRegistrations_28tflite__Model_20const__2c_20tflite__NodeAndRegistration___29, tflite__MicroAllocator__PrepareNodeAndRegistrationDataFromFlatbuffer_28tflite__Model_20const__2c_20tflite__MicroOpResolver_20const__2c_20tflite__NodeAndRegistration__29, tflite__MicroAllocator__AllocateTfLiteEvalTensors_28tflite__Model_20const__2c_20TfLiteEvalTensor___29, tflite__MicroAllocator__AllocateVariables_28tflite__SubGraph_20const__2c_20TfLiteEvalTensor__29, tflite__MicroAllocator__AllocatePersistentTfLiteTensorInternal_28tflite__Model_20const__2c_20TfLiteEvalTensor__2c_20int_29, tflite__MicroAllocator__PopulateTfLiteTensorFromFlatbuffer_28tflite__Model_20const__2c_20tflite__SubGraph_20const__2c_20TfLiteTensor__2c_20int_2c_20bool_29, tflite__MicroAllocator__CommitStaticMemoryPlan_28tflite__Model_20const__2c_20tflite__SubGraph_20const__2c_20TfLiteEvalTensor__29, tflite___28anonymous_20namespace_29__MicroBuiltinDataAllocator__Allocate_28unsigned_20long_2c_20unsigned_20long_29, tflite___28anonymous_20namespace_29__MicroBuiltinDataAllocator__Deallocate_28void__29, tflite___28anonymous_20namespace_29__MicroBuiltinDataAllocator___MicroBuiltinDataAllocator_28_29, tflite___28anonymous_20namespace_29__MicroBuiltinDataAllocator___MicroBuiltinDataAllocator_28_29_1, __cxa_pure_virtual, tflite__BuiltinDataAllocator___BuiltinDataAllocator_28_29, tflite__BuiltinDataAllocator___BuiltinDataAllocator_28_29_1, tflite__ops__micro__depthwise_conv__Init_28TfLiteContext__2c_20char_20const__2c_20unsigned_20long_29, tflite__ops__micro__depthwise_conv__Prepare_28TfLiteContext__2c_20TfLiteNode__29, tflite__ops__micro__depthwise_conv__Eval_28TfLiteContext__2c_20TfLiteNode__29, tflite__ops__micro__conv__Init_28TfLiteContext__2c_20char_20const__2c_20unsigned_20long_29, tflite__ops__micro__conv__Prepare_28TfLiteContext__2c_20TfLiteNode__29, tflite__ops__micro__conv__Eval_28TfLiteContext__2c_20TfLiteNode__29, tflite__ops__micro__pooling__Init_28TfLiteContext__2c_20char_20const__2c_20unsigned_20long_29, tflite__ops__micro__pooling__Prepare_28TfLiteContext__2c_20TfLiteNode__29, tflite__ops__micro__pooling__AverageEval_28TfLiteContext__2c_20TfLiteNode__29, tflite__ops__micro__pooling__MaxEval_28TfLiteContext__2c_20TfLiteNode__29, tflite__ops__micro__activations__SoftmaxInit_28TfLiteContext__2c_20char_20const__2c_20unsigned_20long_29, tflite__ops__micro__activations__SoftmaxPrepare_28TfLiteContext__2c_20TfLiteNode__29, tflite__ops__micro__activations__SoftmaxEval_28TfLiteContext__2c_20TfLiteNode__29, tflite__ops__micro__fully_connected__Init_28TfLiteContext__2c_20char_20const__2c_20unsigned_20long_29, tflite__ops__micro__fully_connected__Prepare_28TfLiteContext__2c_20TfLiteNode__29, tflite__ops__micro__fully_connected__Eval_28TfLiteContext__2c_20TfLiteNode__29, tflite__ops__micro__quantize__Init_28TfLiteContext__2c_20char_20const__2c_20unsigned_20long_29, tflite__ops__micro__quantize__Prepare_28TfLiteContext__2c_20TfLiteNode__29, tflite__ops__micro__quantize__Eval_28TfLiteContext__2c_20TfLiteNode__29, tflite__ops__micro__dequantize__Init_28TfLiteContext__2c_20char_20const__2c_20unsigned_20long_29, tflite__ops__micro__dequantize__Prepare_28TfLiteContext__2c_20TfLiteNode__29, tflite__ops__micro__dequantize__Eval_28TfLiteContext__2c_20TfLiteNode__29, tflite__ops__micro__reshape__Prepare_28TfLiteContext__2c_20TfLiteNode__29, tflite__ops__micro__reshape__Eval_28TfLiteContext__2c_20TfLiteNode__29, tflite__MemoryPlanner___MemoryPlanner_28_29, tflite__MemoryPlanner___MemoryPlanner_28_29_1, tflite__GreedyMemoryPlanner___GreedyMemoryPlanner_28_29, tflite__GreedyMemoryPlanner___GreedyMemoryPlanner_28_29_1, tflite__GreedyMemoryPlanner__AddBuffer_28tflite__ErrorReporter__2c_20int_2c_20int_2c_20int_29, tflite__GreedyMemoryPlanner__GetMaximumMemorySize_28_29, tflite__GreedyMemoryPlanner__GetBufferCount_28_29, tflite__GreedyMemoryPlanner__GetOffsetForBuffer_28tflite__ErrorReporter__2c_20int_2c_20int__29, tflite__ParseDepthwiseConv2D_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29, tflite__ParseConv2D_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29, tflite__ParsePool_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29, tflite__ParseFullyConnected_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29, tflite__ParseSoftmax_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29, tflite__ParseQuantize_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29, tflite__ParseDequantize_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29, tflite__ParseReshape_28tflite__Operator_20const__2c_20tflite__ErrorReporter__2c_20tflite__BuiltinDataAllocator__2c_20void___29, tflite__EspruinoErrorReporter___EspruinoErrorReporter_28_29, tflite__EspruinoErrorReporter___EspruinoErrorReporter_28_29_1, tflite__EspruinoErrorReporter__Report_28char_20const__2c_20void__29, tflite__ErrorReporter___ErrorReporter_28_29, tflite__ErrorReporter___ErrorReporter_28_29_1, tflite__MicroOpResolver__FindOp_28tflite__BuiltinOperator_2c_20int_29_20const, tflite__MicroOpResolver__FindOp_28char_20const__2c_20int_29_20const, tflite__OpResolver__GetDelegates_28int_29_20const, tflite__MicroMutableOpResolver_9u____MicroMutableOpResolver_28_29, tflite__MicroMutableOpResolver_9u____MicroMutableOpResolver_28_29_1, tflite__MicroMutableOpResolver_9u___FindOp_28tflite__BuiltinOperator_29_20const, tflite__MicroMutableOpResolver_9u___FindOp_28char_20const__29_20const, tflite__MicroMutableOpResolver_9u___GetOpDataParser_28tflite__BuiltinOperator_29_20const, tflite__MicroOpResolver___MicroOpResolver_28_29, tflite__MicroOpResolver___MicroOpResolver_28_29_1, tflite__OpResolver___OpResolver_28_29, tflite__OpResolver___OpResolver_28_29_1, __stdio_close, __stdio_write, __stdio_seek]);
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
}
 
 return {
  "__wasm_call_ctors": __wasm_call_ctors, 
  "__indirect_function_table": FUNCTION_TABLE, 
  "jshPushIOCharEvent": jshPushIOCharEvent, 
  "jshGetCharToTransmit": jshGetCharToTransmit, 
  "jshGetDeviceToTransmit": jshGetDeviceToTransmit, 
  "jsGfxChanged": jsGfxChanged, 
  "jsGfxGetPtr": jsGfxGetPtr, 
  "jsInit": jsInit, 
  "jsIdle": jsIdle, 
  "jsSendPinWatchEvent": jsSendPinWatchEvent, 
  "jsSendTouchEvent": jsSendTouchEvent, 
  "jsKill": jsKill, 
  "__errno_location": __errno_location, 
  "fflush": fflush, 
  "emscripten_stack_init": emscripten_stack_init, 
  "emscripten_stack_get_free": emscripten_stack_get_free, 
  "emscripten_stack_get_base": emscripten_stack_get_base, 
  "emscripten_stack_get_end": emscripten_stack_get_end, 
  "stackSave": stackSave, 
  "stackRestore": stackRestore, 
  "stackAlloc": stackAlloc, 
  "dynCall_jiji": legalstub$dynCall_jiji
};
}

  return asmFunc(asmLibraryArg);
}
// EMSCRIPTEN_END_ASM




)(asmLibraryArg);
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        var module = new WebAssembly.Module(binary);
        ok({
          'instance': new WebAssembly.Instance(module)
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];

// end include: wasm2js.js
if (typeof WebAssembly != 'object') {
  abort('no native wasm support detected');
}

// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed' + (text ? ': ' + text : ''));
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
/** @param {string|null=} returnType
    @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') {
      
      return UTF8ToString(ret);
    }
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  function onDone(ret) {
    if (stack !== 0) stackRestore(stack);
    return convertReturnValue(ret);
  }

  ret = onDone(ret);
  return ret;
}

/** @param {string=} returnType
    @param {Array=} argTypes
    @param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

// We used to include malloc/free by default in the past. Show a helpful error in
// builds with assertions.
function _malloc() {
  abort("malloc() called but not included in the build - add '_malloc' to EXPORTED_FUNCTIONS");
}
function _free() {
  // Show a helpful error since we used to include free by default in the past.
  abort("free() called but not included in the build - add '_free' to EXPORTED_FUNCTIONS");
}

// include: runtime_legacy.js


var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call

/**
 * allocate(): This function is no longer used by emscripten but is kept around to avoid
 *             breaking external users.
 *             You should normally not use allocate(), and instead allocate
 *             memory using _malloc()/stackAlloc(), initialize it with
 *             setValue(), and so forth.
 * @param {(Uint8Array|Array<number>)} slab: An array of data.
 * @param {number=} allocator : How to allocate memory, see ALLOC_*
 */
function allocate(slab, allocator) {
  var ret;
  assert(typeof allocator == 'number', 'allocate no longer takes a type argument')
  assert(typeof slab != 'number', 'allocate no longer takes a number as arg0')

  if (allocator == ALLOC_STACK) {
    ret = stackAlloc(slab.length);
  } else {
    ret = abort('malloc was not included, but is needed in allocate. Adding "_malloc" to EXPORTED_FUNCTIONS should fix that. This may be a bug in the compiler, please file an issue.');;
  }

  if (!slab.subarray && !slab.slice) {
    slab = new Uint8Array(slab);
  }
  HEAPU8.set(slab, ret);
  return ret;
}

// end include: runtime_legacy.js
// include: runtime_strings.js


// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

var UTF8Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder('utf8') : undefined;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.
/**
 * heapOrArray is either a regular array, or a JavaScript typed array view.
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heapOrArray, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
    return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = heapOrArray[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = heapOrArray[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = heapOrArray[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string in wasm memory to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heapOrArray[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u > 0x10FFFF) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF).');
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}

// end include: runtime_strings.js
// include: runtime_strings_extra.js


// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr, maxBytesToRead) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  var maxIdx = idx + maxBytesToRead / 2;
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var str = '';

    // If maxBytesToRead is not passed explicitly, it will be undefined, and the for-loop's condition
    // will always evaluate to true. The loop is then terminated on the first null char.
    for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) break;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }

    return str;
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)] = codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)] = 0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr, maxBytesToRead) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(i >= maxBytesToRead / 4)) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0) break;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
  return str;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)] = codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)] = 0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = abort('malloc was not included, but is needed in allocateUTF8. Adding "_malloc" to EXPORTED_FUNCTIONS should fix that. This may be a bug in the compiler, please file an issue.');;
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
    @param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === (str.charCodeAt(i) & 0xff));
    HEAP8[((buffer++)>>0)] = str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)] = 0;
}

// end include: runtime_strings_extra.js
// Memory management

var HEAP,
/** @type {!ArrayBuffer} */
  buffer,
/** @type {!Int8Array} */
  HEAP8,
/** @type {!Uint8Array} */
  HEAPU8,
/** @type {!Int16Array} */
  HEAP16,
/** @type {!Uint16Array} */
  HEAPU16,
/** @type {!Int32Array} */
  HEAP32,
/** @type {!Uint32Array} */
  HEAPU32,
/** @type {!Float32Array} */
  HEAPF32,
/** @type {!Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;legacyModuleProp('INITIAL_MEMORY', 'INITIAL_MEMORY');

assert(INITIAL_MEMORY >= TOTAL_STACK, 'INITIAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array != 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray != undefined && Int32Array.prototype.set != undefined,
       'JS engine does not provide full typed array support');

// In non-standalone/normal mode, we create the memory here.
// include: runtime_init_memory.js


// Create the wasm memory. (Note: this only applies if IMPORTED_MEMORY is defined)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_MEMORY / 65536,
      'maximum': INITIAL_MEMORY / 65536
    });
  }

if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_MEMORY = buffer.byteLength;
assert(INITIAL_MEMORY % 65536 === 0);
updateGlobalBufferAndViews(buffer);

// end include: runtime_init_memory.js

// include: runtime_init_table.js
// In regular non-RELOCATABLE mode the table is exported
// from the wasm module and this will be assigned once
// the exports are available.
var wasmTable;

// end include: runtime_init_table.js
// include: runtime_stack_check.js


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  var max = _emscripten_stack_get_end();
  assert((max & 3) == 0);
  // The stack grow downwards towards _emscripten_stack_get_end.
  // We write cookies to the final two words in the stack and detect if they are
  // ever overwritten.
  HEAP32[((max)>>2)] = 0x2135467;
  HEAP32[(((max)+(4))>>2)] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  HEAPU32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  if (ABORT) return;
  var max = _emscripten_stack_get_end();
  var cookie1 = HEAPU32[((max)>>2)];
  var cookie2 = HEAPU32[(((max)+(4))>>2)];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' 0x' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAPU32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

// end include: runtime_stack_check.js
// include: runtime_assertions.js


// Endianness check
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)';
})();

// end include: runtime_assertions.js
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;

function keepRuntimeAlive() {
  return noExitRuntime;
}

function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  assert(!runtimeInitialized);
  runtimeInitialized = true;

  checkStackCookie();

  
  callRuntimeCallbacks(__ATINIT__);
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// include: runtime_math.js


// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

// end include: runtime_math.js
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval != 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

/** @param {string|number=} what */
function abort(what) {
  {
    if (Module['onAbort']) {
      Module['onAbort'](what);
    }
  }

  what = 'Aborted(' + what + ')';
  // TODO(sbc): Should we remove printing and leave it up to whoever
  // catches the exception?
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  // FIXME This approach does not work in Wasm EH because it currently does not assume
  // all RuntimeErrors are from traps; it decides whether a RuntimeError is from
  // a trap or not based on a hidden field within the object. So at the moment
  // we don't have a way of throwing a wasm trap from JS. TODO Make a JS API that
  // allows this in the wasm spec.

  // Suppress closure compiler warning here. Closure compiler's builtin extern
  // defintion for WebAssembly.RuntimeError claims it takes no arguments even
  // though it can.
  // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure gets fixed.
  /** @suppress {checkTypes} */
  var e = new WebAssembly.RuntimeError(what);

  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

// {{MEM_INITIALIZER}}

// include: memoryprofiler.js


// end include: memoryprofiler.js
// show errors on likely calls to FS when it was not included
var FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with -sFORCE_FILESYSTEM');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;

// include: URIUtils.js


// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  // Prefix of data URIs emitted by SINGLE_FILE and related options.
  return filename.startsWith(dataURIPrefix);
}

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return filename.startsWith('file://');
}

// end include: URIUtils.js
/** @param {boolean=} fixedasm */
function createExportWrapper(name, fixedasm) {
  return function() {
    var displayName = name;
    var asm = fixedasm;
    if (!fixedasm) {
      asm = Module['asm'];
    }
    assert(runtimeInitialized, 'native function `' + displayName + '` called before runtime initialization');
    if (!asm[name]) {
      assert(asm[name], 'exported native function `' + displayName + '` not found');
    }
    return asm[name].apply(null, arguments);
  };
}

var wasmBinaryFile;
  wasmBinaryFile = 'emulator_banglejs2.wasm';
  if (!isDataURI(wasmBinaryFile)) {
    wasmBinaryFile = locateFile(wasmBinaryFile);
  }

function getBinary(file) {
  try {
    if (file == wasmBinaryFile && wasmBinary) {
      return new Uint8Array(wasmBinary);
    }
    var binary = tryParseAsDataURI(file);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(file);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // If we don't have the binary yet, try to to load it asynchronously.
  // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.
  // See https://github.com/github/fetch/pull/92#issuecomment-140665932
  // Cordova or Electron apps are typically loaded from a file:// url.
  // So use fetch if it is available and the url is not a file, otherwise fall back to XHR.
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
    if (typeof fetch == 'function'
      && !isFileURI(wasmBinaryFile)
    ) {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        if (!response['ok']) {
          throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
        }
        return response['arrayBuffer']();
      }).catch(function () {
          return getBinary(wasmBinaryFile);
      });
    }
    else {
      if (readAsync) {
        // fetch is not available or url is file => try XHR (readAsync uses XHR internally)
        return new Promise(function(resolve, reject) {
          readAsync(wasmBinaryFile, function(response) { resolve(new Uint8Array(/** @type{!ArrayBuffer} */(response))) }, reject)
        });
      }
    }
  }

  // Otherwise, getBinary should be able to get it synchronously
  return Promise.resolve().then(function() { return getBinary(wasmBinaryFile); });
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg,
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;

    Module['asm'] = exports;

    wasmTable = Module['asm']['__indirect_function_table'];
    assert(wasmTable, "table not found in wasm exports");

    addOnInit(Module['asm']['__wasm_call_ctors']);

    removeRunDependency('wasm-instantiate');

  }
  // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');

  // Prefer streaming instantiation if available.
  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiationResult(result) {
    // 'result' is a ResultObject object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(result['instance']);
  }

  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(function (instance) {
      return instance;
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);

      // Warn on some common problems.
      if (isFileURI(wasmBinaryFile)) {
        err('warning: Loading from a file URI (' + wasmBinaryFile + ') is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing');
      }
      abort(reason);
    });
  }

  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming == 'function' &&
        !isDataURI(wasmBinaryFile) &&
        // Don't use streaming for file:// delivered objects in a webview, fetch them synchronously.
        !isFileURI(wasmBinaryFile) &&
        // Avoid instantiateStreaming() on Node.js environment for now, as while
        // Node.js v18.1.0 implements it, it does not have a full fetch()
        // implementation yet.
        //
        // Reference:
        //   https://github.com/emscripten-core/emscripten/pull/16917
        !ENVIRONMENT_IS_NODE &&
        typeof fetch == 'function') {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        // Suppress closure warning here since the upstream definition for
        // instantiateStreaming only allows Promise<Repsponse> rather than
        // an actual Response.
        // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure is fixed.
        /** @suppress {checkTypes} */
        var result = WebAssembly.instantiateStreaming(response, info);

        return result.then(
          receiveInstantiationResult,
          function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            return instantiateArrayBuffer(receiveInstantiationResult);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiationResult);
    }
  }

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  // Also pthreads and wasm workers initialize the wasm instance through this path.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}

// Globals used by JS i64 conversions (see makeSetValue)
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  178756: () => { jsHandleIO(); },  
 178774: ($0, $1) => { hwSetPinValue($0,$1) },  
 178799: ($0) => { return hwGetPinValue($0) },  
 178828: () => { return Date.now(); },  
 178851: ($0, $1, $2) => { hwFlashWritePtr($0,$1,$2); },  
 178882: ($0) => { return hwFlashRead($0) },  
 178909: ($0, $1, $2) => { hwFlashWritePtr($0,$1,$2); }
};






  function callRuntimeCallbacks(callbacks) {
      while (callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == 'function') {
          callback(Module); // Pass the module as the first argument.
          continue;
        }
        var func = callback.func;
        if (typeof func == 'number') {
          if (callback.arg === undefined) {
            // Run the wasm function ptr with signature 'v'. If no function
            // with such signature was exported, this call does not need
            // to be emitted (and would confuse Closure)
            getWasmTableEntry(func)();
          } else {
            // If any function with signature 'vi' was exported, run
            // the callback with that signature.
            getWasmTableEntry(func)(callback.arg);
          }
        } else {
          func(callback.arg === undefined ? null : callback.arg);
        }
      }
    }

  function withStackSave(f) {
      var stack = stackSave();
      var ret = f();
      stackRestore(stack);
      return ret;
    }
  function demangle(func) {
      warnOnce('warning: build with -sDEMANGLE_SUPPORT to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  
    /**
     * @param {number} ptr
     * @param {string} type
     */
  function getValue(ptr, type = 'i8') {
      if (type.endsWith('*')) type = 'i32';
      switch (type) {
        case 'i1': return HEAP8[((ptr)>>0)];
        case 'i8': return HEAP8[((ptr)>>0)];
        case 'i16': return HEAP16[((ptr)>>1)];
        case 'i32': return HEAP32[((ptr)>>2)];
        case 'i64': return HEAP32[((ptr)>>2)];
        case 'float': return HEAPF32[((ptr)>>2)];
        case 'double': return Number(HEAPF64[((ptr)>>3)]);
        default: abort('invalid type for getValue: ' + type);
      }
      return null;
    }

  function getWasmTableEntry(funcPtr) {
      // In -Os and -Oz builds, do not implement a JS side wasm table mirror for small
      // code size, but directly access wasmTable, which is a bit slower as uncached.
      return wasmTable.get(funcPtr);
    }

  function handleException(e) {
      // Certain exception types we do not treat as errors since they are used for
      // internal control flow.
      // 1. ExitStatus, which is thrown by exit()
      // 2. "unwind", which is thrown by emscripten_unwind_to_js_event_loop() and others
      //    that wish to return to JS event loop.
      if (e instanceof ExitStatus || e == 'unwind') {
        return EXITSTATUS;
      }
      quit_(1, e);
    }

  function jsStackTrace() {
      var error = new Error();
      if (!error.stack) {
        // IE10+ special cases: It does have callstack info, but it is only
        // populated if an Error object is thrown, so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          error = e;
        }
        if (!error.stack) {
          return '(no stack trace available)';
        }
      }
      return error.stack.toString();
    }

  
    /**
     * @param {number} ptr
     * @param {number} value
     * @param {string} type
     */
  function setValue(ptr, value, type = 'i8') {
      if (type.endsWith('*')) type = 'i32';
      switch (type) {
        case 'i1': HEAP8[((ptr)>>0)] = value; break;
        case 'i8': HEAP8[((ptr)>>0)] = value; break;
        case 'i16': HEAP16[((ptr)>>1)] = value; break;
        case 'i32': HEAP32[((ptr)>>2)] = value; break;
        case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)] = tempI64[0],HEAP32[(((ptr)+(4))>>2)] = tempI64[1]); break;
        case 'float': HEAPF32[((ptr)>>2)] = value; break;
        case 'double': HEAPF64[((ptr)>>3)] = value; break;
        default: abort('invalid type for setValue: ' + type);
      }
    }

  function setWasmTableEntry(idx, func) {
      wasmTable.set(idx, func);
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function _abort() {
      abort('native code called abort()');
    }

  var readAsmConstArgsArray = [];
  function readAsmConstArgs(sigPtr, buf) {
      // Nobody should have mutated _readAsmConstArgsArray underneath us to be something else than an array.
      assert(Array.isArray(readAsmConstArgsArray));
      // The input buffer is allocated on the stack, so it must be stack-aligned.
      assert(buf % 16 == 0);
      readAsmConstArgsArray.length = 0;
      var ch;
      // Most arguments are i32s, so shift the buffer pointer so it is a plain
      // index into HEAP32.
      buf >>= 2;
      while (ch = HEAPU8[sigPtr++]) {
        var chr = String.fromCharCode(ch);
        var validChars = ['d', 'f', 'i'];
        assert(validChars.includes(chr), 'Invalid character ' + ch + '("' + chr + '") in readAsmConstArgs! Use only [' + validChars + '], and do not specify "v" for void return argument.');
        // Floats are always passed as doubles, and doubles and int64s take up 8
        // bytes (two 32-bit slots) in memory, align reads to these:
        buf += (ch != 105/*i*/) & buf;
        readAsmConstArgsArray.push(
          ch == 105/*i*/ ? HEAP32[buf] :
         HEAPF64[buf++ >> 1]
        );
        ++buf;
      }
      return readAsmConstArgsArray;
    }
  function _emscripten_asm_const_int(code, sigPtr, argbuf) {
      var args = readAsmConstArgs(sigPtr, argbuf);
      if (!ASM_CONSTS.hasOwnProperty(code)) abort('No EM_ASM constant found at address ' + code);
      return ASM_CONSTS[code].apply(null, args);
    }
  function _emscripten_asm_const_double(a0,a1,a2
  ) {
  return _emscripten_asm_const_int(a0,a1,a2);
  }


  var SYSCALLS = {varargs:undefined,get:function() {
        assert(SYSCALLS.varargs != undefined);
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      }};
  function _fd_close(fd) {
      abort('fd_close called without SYSCALLS_REQUIRE_FILESYSTEM');
    }

  function convertI32PairToI53Checked(lo, hi) {
      assert(lo == (lo >>> 0) || lo == (lo|0)); // lo should either be a i32 or a u32
      assert(hi === (hi|0));                    // hi should be a i32
      return ((hi + 0x200000) >>> 0 < 0x400001 - !!lo) ? (lo >>> 0) + hi * 4294967296 : NaN;
    }
  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
      return 70;
    }

  var printCharBuffers = [null,[],[]];
  function printChar(stream, curr) {
      var buffer = printCharBuffers[stream];
      assert(buffer);
      if (curr === 0 || curr === 10) {
        (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));
        buffer.length = 0;
      } else {
        buffer.push(curr);
      }
    }
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      _fflush(0);
      if (printCharBuffers[1].length) printChar(1, 10);
      if (printCharBuffers[2].length) printChar(2, 10);
    }
  function _fd_write(fd, iov, iovcnt, pnum) {
      // hack to support printf in SYSCALLS_REQUIRE_FILESYSTEM=0
      var num = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAPU32[((iov)>>2)];
        var len = HEAPU32[(((iov)+(4))>>2)];
        iov += 8;
        for (var j = 0; j < len; j++) {
          printChar(fd, HEAPU8[ptr+j]);
        }
        num += len;
      }
      HEAPU32[((pnum)>>2)] = num;
      return 0;
    }

  function _setTempRet0(val) {
      setTempRet0(val);
    }
var ASSERTIONS = true;



/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob == 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE == 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf = Buffer.from(s, 'base64');
    return new Uint8Array(buf['buffer'], buf['byteOffset'], buf['byteLength']);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


function checkIncomingModuleAPI() {
  ignoredModuleProp('fetchSettings');
}
var asmLibraryArg = {
  "abort": _abort,
  "emscripten_asm_const_double": _emscripten_asm_const_double,
  "emscripten_asm_const_int": _emscripten_asm_const_int,
  "fd_close": _fd_close,
  "fd_seek": _fd_seek,
  "fd_write": _fd_write,
  "getTempRet0": getTempRet0,
  "memory": wasmMemory,
  "setTempRet0": setTempRet0
};
var asm = createWasm();
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = createExportWrapper("__wasm_call_ctors");

/** @type {function(...*):?} */
var _jshPushIOCharEvent = Module["_jshPushIOCharEvent"] = createExportWrapper("jshPushIOCharEvent");

/** @type {function(...*):?} */
var _jshGetCharToTransmit = Module["_jshGetCharToTransmit"] = createExportWrapper("jshGetCharToTransmit");

/** @type {function(...*):?} */
var _jshGetDeviceToTransmit = Module["_jshGetDeviceToTransmit"] = createExportWrapper("jshGetDeviceToTransmit");

/** @type {function(...*):?} */
var _jsGfxChanged = Module["_jsGfxChanged"] = createExportWrapper("jsGfxChanged");

/** @type {function(...*):?} */
var _jsGfxGetPtr = Module["_jsGfxGetPtr"] = createExportWrapper("jsGfxGetPtr");

/** @type {function(...*):?} */
var _jsInit = Module["_jsInit"] = createExportWrapper("jsInit");

/** @type {function(...*):?} */
var _jsIdle = Module["_jsIdle"] = createExportWrapper("jsIdle");

/** @type {function(...*):?} */
var _jsSendPinWatchEvent = Module["_jsSendPinWatchEvent"] = createExportWrapper("jsSendPinWatchEvent");

/** @type {function(...*):?} */
var _jsSendTouchEvent = Module["_jsSendTouchEvent"] = createExportWrapper("jsSendTouchEvent");

/** @type {function(...*):?} */
var _jsKill = Module["_jsKill"] = createExportWrapper("jsKill");

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = createExportWrapper("__errno_location");

/** @type {function(...*):?} */
var _fflush = Module["_fflush"] = createExportWrapper("fflush");

/** @type {function(...*):?} */
var _emscripten_stack_init = Module["_emscripten_stack_init"] = function() {
  return (_emscripten_stack_init = Module["_emscripten_stack_init"] = Module["asm"]["emscripten_stack_init"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = function() {
  return (_emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = Module["asm"]["emscripten_stack_get_free"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_base = Module["_emscripten_stack_get_base"] = function() {
  return (_emscripten_stack_get_base = Module["_emscripten_stack_get_base"] = Module["asm"]["emscripten_stack_get_base"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = function() {
  return (_emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = Module["asm"]["emscripten_stack_get_end"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = createExportWrapper("stackSave");

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = createExportWrapper("stackRestore");

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = createExportWrapper("stackAlloc");

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = createExportWrapper("dynCall_jiji");





// === Auto-generated postamble setup entry stuff ===

Module["ccall"] = ccall;
unexportedRuntimeFunction('cwrap', false);
unexportedRuntimeFunction('allocate', false);
unexportedRuntimeFunction('UTF8ArrayToString', false);
unexportedRuntimeFunction('UTF8ToString', false);
unexportedRuntimeFunction('stringToUTF8Array', false);
unexportedRuntimeFunction('stringToUTF8', false);
unexportedRuntimeFunction('lengthBytesUTF8', false);
unexportedRuntimeFunction('addOnPreRun', false);
unexportedRuntimeFunction('addOnInit', false);
unexportedRuntimeFunction('addOnPreMain', false);
unexportedRuntimeFunction('addOnExit', false);
unexportedRuntimeFunction('addOnPostRun', false);
unexportedRuntimeFunction('addRunDependency', true);
unexportedRuntimeFunction('removeRunDependency', true);
unexportedRuntimeFunction('FS_createFolder', false);
unexportedRuntimeFunction('FS_createPath', true);
unexportedRuntimeFunction('FS_createDataFile', true);
unexportedRuntimeFunction('FS_createPreloadedFile', true);
unexportedRuntimeFunction('FS_createLazyFile', true);
unexportedRuntimeFunction('FS_createLink', false);
unexportedRuntimeFunction('FS_createDevice', true);
unexportedRuntimeFunction('FS_unlink', true);
unexportedRuntimeFunction('getLEB', false);
unexportedRuntimeFunction('getFunctionTables', false);
unexportedRuntimeFunction('alignFunctionTables', false);
unexportedRuntimeFunction('registerFunctions', false);
unexportedRuntimeFunction('addFunction', false);
unexportedRuntimeFunction('removeFunction', false);
unexportedRuntimeFunction('prettyPrint', false);
unexportedRuntimeFunction('getCompilerSetting', false);
unexportedRuntimeFunction('print', false);
unexportedRuntimeFunction('printErr', false);
unexportedRuntimeFunction('getTempRet0', false);
unexportedRuntimeFunction('setTempRet0', false);
unexportedRuntimeFunction('callMain', false);
unexportedRuntimeFunction('abort', false);
unexportedRuntimeFunction('keepRuntimeAlive', false);
unexportedRuntimeFunction('wasmMemory', false);
unexportedRuntimeFunction('warnOnce', false);
unexportedRuntimeFunction('stackSave', false);
unexportedRuntimeFunction('stackRestore', false);
unexportedRuntimeFunction('stackAlloc', false);
unexportedRuntimeFunction('AsciiToString', false);
unexportedRuntimeFunction('stringToAscii', false);
unexportedRuntimeFunction('UTF16ToString', false);
unexportedRuntimeFunction('stringToUTF16', false);
unexportedRuntimeFunction('lengthBytesUTF16', false);
unexportedRuntimeFunction('UTF32ToString', false);
unexportedRuntimeFunction('stringToUTF32', false);
unexportedRuntimeFunction('lengthBytesUTF32', false);
unexportedRuntimeFunction('allocateUTF8', false);
unexportedRuntimeFunction('allocateUTF8OnStack', false);
unexportedRuntimeFunction('ExitStatus', false);
unexportedRuntimeFunction('intArrayFromString', false);
unexportedRuntimeFunction('intArrayToString', false);
unexportedRuntimeFunction('writeStringToMemory', false);
unexportedRuntimeFunction('writeArrayToMemory', false);
unexportedRuntimeFunction('writeAsciiToMemory', false);
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
unexportedRuntimeFunction('intArrayFromBase64', false);
unexportedRuntimeFunction('tryParseAsDataURI', false);
unexportedRuntimeFunction('ptrToString', false);
unexportedRuntimeFunction('zeroMemory', false);
unexportedRuntimeFunction('stringToNewUTF8', false);
unexportedRuntimeFunction('getHeapMax', false);
unexportedRuntimeFunction('abortOnCannotGrowMemory', false);
unexportedRuntimeFunction('emscripten_realloc_buffer', false);
unexportedRuntimeFunction('ENV', false);
unexportedRuntimeFunction('ERRNO_CODES', false);
unexportedRuntimeFunction('ERRNO_MESSAGES', false);
unexportedRuntimeFunction('setErrNo', false);
unexportedRuntimeFunction('inetPton4', false);
unexportedRuntimeFunction('inetNtop4', false);
unexportedRuntimeFunction('inetPton6', false);
unexportedRuntimeFunction('inetNtop6', false);
unexportedRuntimeFunction('readSockaddr', false);
unexportedRuntimeFunction('writeSockaddr', false);
unexportedRuntimeFunction('DNS', false);
unexportedRuntimeFunction('getHostByName', false);
unexportedRuntimeFunction('Protocols', false);
unexportedRuntimeFunction('Sockets', false);
unexportedRuntimeFunction('getRandomDevice', false);
unexportedRuntimeFunction('traverseStack', false);
unexportedRuntimeFunction('UNWIND_CACHE', false);
unexportedRuntimeFunction('convertPCtoSourceLocation', false);
unexportedRuntimeFunction('readAsmConstArgsArray', false);
unexportedRuntimeFunction('readAsmConstArgs', false);
unexportedRuntimeFunction('mainThreadEM_ASM', false);
unexportedRuntimeFunction('jstoi_q', false);
unexportedRuntimeFunction('jstoi_s', false);
unexportedRuntimeFunction('getExecutableName', false);
unexportedRuntimeFunction('listenOnce', false);
unexportedRuntimeFunction('autoResumeAudioContext', false);
unexportedRuntimeFunction('dynCallLegacy', false);
unexportedRuntimeFunction('getDynCaller', false);
unexportedRuntimeFunction('dynCall', false);
unexportedRuntimeFunction('setWasmTableEntry', false);
unexportedRuntimeFunction('getWasmTableEntry', false);
unexportedRuntimeFunction('handleException', false);
unexportedRuntimeFunction('runtimeKeepalivePush', false);
unexportedRuntimeFunction('runtimeKeepalivePop', false);
unexportedRuntimeFunction('callUserCallback', false);
unexportedRuntimeFunction('maybeExit', false);
unexportedRuntimeFunction('safeSetTimeout', false);
unexportedRuntimeFunction('asmjsMangle', false);
unexportedRuntimeFunction('asyncLoad', false);
unexportedRuntimeFunction('alignMemory', false);
unexportedRuntimeFunction('mmapAlloc', false);
unexportedRuntimeFunction('writeI53ToI64', false);
unexportedRuntimeFunction('writeI53ToI64Clamped', false);
unexportedRuntimeFunction('writeI53ToI64Signaling', false);
unexportedRuntimeFunction('writeI53ToU64Clamped', false);
unexportedRuntimeFunction('writeI53ToU64Signaling', false);
unexportedRuntimeFunction('readI53FromI64', false);
unexportedRuntimeFunction('readI53FromU64', false);
unexportedRuntimeFunction('convertI32PairToI53', false);
unexportedRuntimeFunction('convertI32PairToI53Checked', false);
unexportedRuntimeFunction('convertU32PairToI53', false);
unexportedRuntimeFunction('reallyNegative', false);
unexportedRuntimeFunction('unSign', false);
unexportedRuntimeFunction('strLen', false);
unexportedRuntimeFunction('reSign', false);
unexportedRuntimeFunction('formatString', false);
unexportedRuntimeFunction('setValue', false);
unexportedRuntimeFunction('getValue', false);
unexportedRuntimeFunction('PATH', false);
unexportedRuntimeFunction('PATH_FS', false);
unexportedRuntimeFunction('SYSCALLS', false);
unexportedRuntimeFunction('getSocketFromFD', false);
unexportedRuntimeFunction('getSocketAddress', false);
unexportedRuntimeFunction('JSEvents', false);
unexportedRuntimeFunction('registerKeyEventCallback', false);
unexportedRuntimeFunction('specialHTMLTargets', false);
unexportedRuntimeFunction('maybeCStringToJsString', false);
unexportedRuntimeFunction('findEventTarget', false);
unexportedRuntimeFunction('findCanvasEventTarget', false);
unexportedRuntimeFunction('getBoundingClientRect', false);
unexportedRuntimeFunction('fillMouseEventData', false);
unexportedRuntimeFunction('registerMouseEventCallback', false);
unexportedRuntimeFunction('registerWheelEventCallback', false);
unexportedRuntimeFunction('registerUiEventCallback', false);
unexportedRuntimeFunction('registerFocusEventCallback', false);
unexportedRuntimeFunction('fillDeviceOrientationEventData', false);
unexportedRuntimeFunction('registerDeviceOrientationEventCallback', false);
unexportedRuntimeFunction('fillDeviceMotionEventData', false);
unexportedRuntimeFunction('registerDeviceMotionEventCallback', false);
unexportedRuntimeFunction('screenOrientation', false);
unexportedRuntimeFunction('fillOrientationChangeEventData', false);
unexportedRuntimeFunction('registerOrientationChangeEventCallback', false);
unexportedRuntimeFunction('fillFullscreenChangeEventData', false);
unexportedRuntimeFunction('registerFullscreenChangeEventCallback', false);
unexportedRuntimeFunction('JSEvents_requestFullscreen', false);
unexportedRuntimeFunction('JSEvents_resizeCanvasForFullscreen', false);
unexportedRuntimeFunction('registerRestoreOldStyle', false);
unexportedRuntimeFunction('hideEverythingExceptGivenElement', false);
unexportedRuntimeFunction('restoreHiddenElements', false);
unexportedRuntimeFunction('setLetterbox', false);
unexportedRuntimeFunction('currentFullscreenStrategy', false);
unexportedRuntimeFunction('restoreOldWindowedStyle', false);
unexportedRuntimeFunction('softFullscreenResizeWebGLRenderTarget', false);
unexportedRuntimeFunction('doRequestFullscreen', false);
unexportedRuntimeFunction('fillPointerlockChangeEventData', false);
unexportedRuntimeFunction('registerPointerlockChangeEventCallback', false);
unexportedRuntimeFunction('registerPointerlockErrorEventCallback', false);
unexportedRuntimeFunction('requestPointerLock', false);
unexportedRuntimeFunction('fillVisibilityChangeEventData', false);
unexportedRuntimeFunction('registerVisibilityChangeEventCallback', false);
unexportedRuntimeFunction('registerTouchEventCallback', false);
unexportedRuntimeFunction('fillGamepadEventData', false);
unexportedRuntimeFunction('registerGamepadEventCallback', false);
unexportedRuntimeFunction('registerBeforeUnloadEventCallback', false);
unexportedRuntimeFunction('fillBatteryEventData', false);
unexportedRuntimeFunction('battery', false);
unexportedRuntimeFunction('registerBatteryEventCallback', false);
unexportedRuntimeFunction('setCanvasElementSize', false);
unexportedRuntimeFunction('getCanvasElementSize', false);
unexportedRuntimeFunction('demangle', false);
unexportedRuntimeFunction('demangleAll', false);
unexportedRuntimeFunction('jsStackTrace', false);
unexportedRuntimeFunction('stackTrace', false);
unexportedRuntimeFunction('getEnvStrings', false);
unexportedRuntimeFunction('checkWasiClock', false);
unexportedRuntimeFunction('flush_NO_FILESYSTEM', false);
unexportedRuntimeFunction('dlopenMissingError', false);
unexportedRuntimeFunction('setImmediateWrapped', false);
unexportedRuntimeFunction('clearImmediateWrapped', false);
unexportedRuntimeFunction('polyfillSetImmediate', false);
unexportedRuntimeFunction('uncaughtExceptionCount', false);
unexportedRuntimeFunction('exceptionLast', false);
unexportedRuntimeFunction('exceptionCaught', false);
unexportedRuntimeFunction('ExceptionInfo', false);
unexportedRuntimeFunction('exception_addRef', false);
unexportedRuntimeFunction('exception_decRef', false);
unexportedRuntimeFunction('Browser', false);
unexportedRuntimeFunction('setMainLoop', false);
unexportedRuntimeFunction('wget', false);
unexportedRuntimeFunction('FS', false);
unexportedRuntimeFunction('MEMFS', false);
unexportedRuntimeFunction('TTY', false);
unexportedRuntimeFunction('PIPEFS', false);
unexportedRuntimeFunction('SOCKFS', false);
unexportedRuntimeFunction('_setNetworkCallback', false);
unexportedRuntimeFunction('tempFixedLengthArray', false);
unexportedRuntimeFunction('miniTempWebGLFloatBuffers', false);
unexportedRuntimeFunction('heapObjectForWebGLType', false);
unexportedRuntimeFunction('heapAccessShiftForWebGLHeap', false);
unexportedRuntimeFunction('GL', false);
unexportedRuntimeFunction('emscriptenWebGLGet', false);
unexportedRuntimeFunction('computeUnpackAlignedImageSize', false);
unexportedRuntimeFunction('emscriptenWebGLGetTexPixelData', false);
unexportedRuntimeFunction('emscriptenWebGLGetUniform', false);
unexportedRuntimeFunction('webglGetUniformLocation', false);
unexportedRuntimeFunction('webglPrepareUniformLocationsBeforeFirstUse', false);
unexportedRuntimeFunction('webglGetLeftBracePos', false);
unexportedRuntimeFunction('emscriptenWebGLGetVertexAttrib', false);
unexportedRuntimeFunction('writeGLArray', false);
unexportedRuntimeFunction('AL', false);
unexportedRuntimeFunction('SDL_unicode', false);
unexportedRuntimeFunction('SDL_ttfContext', false);
unexportedRuntimeFunction('SDL_audio', false);
unexportedRuntimeFunction('SDL', false);
unexportedRuntimeFunction('SDL_gfx', false);
unexportedRuntimeFunction('GLUT', false);
unexportedRuntimeFunction('EGL', false);
unexportedRuntimeFunction('GLFW_Window', false);
unexportedRuntimeFunction('GLFW', false);
unexportedRuntimeFunction('GLEW', false);
unexportedRuntimeFunction('IDBStore', false);
unexportedRuntimeFunction('runAndAbortIfError', false);
unexportedRuntimeSymbol('ALLOC_NORMAL', false);
unexportedRuntimeSymbol('ALLOC_STACK', false);

var calledRun;

/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function stackCheckInit() {
  // This is normally called automatically during __wasm_call_ctors but need to
  // get these values before even running any of the ctors so we call it redundantly
  // here.
  _emscripten_stack_init();
  // TODO(sbc): Move writeStackCookie to native to to avoid this.
  writeStackCookie();
}

/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

    stackCheckInit();

  preRun();

  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    return;
  }

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var oldOut = out;
  var oldErr = err;
  var has = false;
  out = err = (x) => {
    has = true;
  }
  try { // it doesn't matter if it fails
    flush_NO_FILESYSTEM();
  } catch(e) {}
  out = oldOut;
  err = oldErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
    warnOnce('(this may also be due to not including full filesystem support - try building with -sFORCE_FILESYSTEM)');
  }
}

/** @param {boolean|number=} implicit */
function exit(status, implicit) {
  EXITSTATUS = status;

  checkUnflushedContent();

  // if exit() was called explicitly, warn the user if the runtime isn't actually being shut down
  if (keepRuntimeAlive() && !implicit) {
    var msg = 'program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)';
    err(msg);
  }

  procExit(status);
}

function procExit(code) {
  EXITSTATUS = code;
  if (!keepRuntimeAlive()) {
    if (Module['onExit']) Module['onExit'](code);
    ABORT = true;
  }
  quit_(code, new ExitStatus(code));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

run();





